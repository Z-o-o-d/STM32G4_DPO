
DPO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000140d4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  080142b8  080142b8  000152b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014808  08014808  00016350  2**0
                  CONTENTS
  4 .ARM          00000008  08014808  08014808  00015808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014810  08014810  00016350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014810  08014810  00015810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014814  08014814  00015814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  08014818  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000265c  20000350  08014b68  00016350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200029ac  08014b68  000169ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029504  00000000  00000000  00016380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056f9  00000000  00000000  0003f884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002360  00000000  00000000  00044f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b56  00000000  00000000  000472e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030256  00000000  00000000  00048e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e442  00000000  00000000  0007908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012a24f  00000000  00000000  000a74ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d171d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ac10  00000000  00000000  001d1760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001dc370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801429c 	.word	0x0801429c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	0801429c 	.word	0x0801429c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <TLC5952_WriteBit>:
/**
 * @brief 发送单个 bit
 * @param bit 0 或 1
 */
void TLC5952_WriteBit(uint8_t bit)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
    if (bit)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <TLC5952_WriteBit+0x1c>
        TLC5952_SIN_HIGH();
 8001044:	2201      	movs	r2, #1
 8001046:	2120      	movs	r1, #32
 8001048:	480b      	ldr	r0, [pc, #44]	@ (8001078 <TLC5952_WriteBit+0x44>)
 800104a:	f004 fc99 	bl	8005980 <HAL_GPIO_WritePin>
 800104e:	e004      	b.n	800105a <TLC5952_WriteBit+0x26>
    else
        TLC5952_SIN_LOW();
 8001050:	2200      	movs	r2, #0
 8001052:	2120      	movs	r1, #32
 8001054:	4808      	ldr	r0, [pc, #32]	@ (8001078 <TLC5952_WriteBit+0x44>)
 8001056:	f004 fc93 	bl	8005980 <HAL_GPIO_WritePin>

    TLC5952_SCLK_HIGH();
 800105a:	2201      	movs	r2, #1
 800105c:	2108      	movs	r1, #8
 800105e:	4806      	ldr	r0, [pc, #24]	@ (8001078 <TLC5952_WriteBit+0x44>)
 8001060:	f004 fc8e 	bl	8005980 <HAL_GPIO_WritePin>
    TLC5952_SCLK_LOW();
 8001064:	2200      	movs	r2, #0
 8001066:	2108      	movs	r1, #8
 8001068:	4803      	ldr	r0, [pc, #12]	@ (8001078 <TLC5952_WriteBit+0x44>)
 800106a:	f004 fc89 	bl	8005980 <HAL_GPIO_WritePin>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	48000400 	.word	0x48000400

0800107c <TLC5952_WriteLED>:

/**
 * @brief 发送 24 位 LED 数据
 */
void TLC5952_WriteLED(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
    TLC5952_WriteBit(0);
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff ffd6 	bl	8001034 <TLC5952_WriteBit>
    uint32_t *data = (uint32_t *)&allData;
 8001088:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <TLC5952_WriteLED+0x64>)
 800108a:	60bb      	str	r3, [r7, #8]
    for (int8_t i = 23; i >= 0; i--)
 800108c:	2317      	movs	r3, #23
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e013      	b.n	80010ba <TLC5952_WriteLED+0x3e>
    {
        uint8_t currentBit = (*data >> i) & 0x01;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	fa22 f303 	lsr.w	r3, r2, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	71fb      	strb	r3, [r7, #7]
        TLC5952_WriteBit(currentBit);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ffc3 	bl	8001034 <TLC5952_WriteBit>
    for (int8_t i = 23; i >= 0; i--)
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	3b01      	subs	r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	73fb      	strb	r3, [r7, #15]
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	dae7      	bge.n	8001092 <TLC5952_WriteLED+0x16>
    }
    TLC5952_LAT_HIGH();
 80010c2:	2201      	movs	r2, #1
 80010c4:	2110      	movs	r1, #16
 80010c6:	4807      	ldr	r0, [pc, #28]	@ (80010e4 <TLC5952_WriteLED+0x68>)
 80010c8:	f004 fc5a 	bl	8005980 <HAL_GPIO_WritePin>
    TLC5952_LAT_LOW();
 80010cc:	2200      	movs	r2, #0
 80010ce:	2110      	movs	r1, #16
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <TLC5952_WriteLED+0x68>)
 80010d2:	f004 fc55 	bl	8005980 <HAL_GPIO_WritePin>
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000036c 	.word	0x2000036c
 80010e4:	48000400 	.word	0x48000400

080010e8 <TLC5952_WriteControl>:


/**
 * @brief 发送 24 位 控制 数据
 */
void TLC5952_WriteControl(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
    TLC5952_WriteBit(1);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff ffa0 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 80010f4:	2306      	movs	r3, #6
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	e012      	b.n	8001120 <TLC5952_WriteControl+0x38>
        TLC5952_WriteBit((allData.red_brightness >> i) & 0x01);
 80010fa:	4b37      	ldr	r3, [pc, #220]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 80010fc:	78db      	ldrb	r3, [r3, #3]
 80010fe:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	fa42 f303 	asr.w	r3, r2, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff8d 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3b01      	subs	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	dae9      	bge.n	80010fa <TLC5952_WriteControl+0x12>
    }
    for (int i = 6; i >= 0; i--) {
 8001126:	2306      	movs	r3, #6
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	e012      	b.n	8001152 <TLC5952_WriteControl+0x6a>
        TLC5952_WriteBit((allData.green_brightness >> i) & 0x01);
 800112c:	4b2a      	ldr	r3, [pc, #168]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 800112e:	791b      	ldrb	r3, [r3, #4]
 8001130:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001134:	b2db      	uxtb	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	fa42 f303 	asr.w	r3, r2, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff74 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	3b01      	subs	r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	dae9      	bge.n	800112c <TLC5952_WriteControl+0x44>
    }
    for (int i = 6; i >= 0; i--) {
 8001158:	2306      	movs	r3, #6
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	e012      	b.n	8001184 <TLC5952_WriteControl+0x9c>
        TLC5952_WriteBit((allData.blue_brightness >> i) & 0x01);
 800115e:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 8001160:	889b      	ldrh	r3, [r3, #4]
 8001162:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8001166:	b2db      	uxtb	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	fa42 f303 	asr.w	r3, r2, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5b 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3b01      	subs	r3, #1
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	dae9      	bge.n	800115e <TLC5952_WriteControl+0x76>
    }
    for (int i = 2; i >= 0; i--) {
 800118a:	2302      	movs	r3, #2
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	e012      	b.n	80011b6 <TLC5952_WriteControl+0xce>
        TLC5952_WriteBit((allData.detection_voltage_select >> i) & 0x01);
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f3c3 3382 	ubfx	r3, r3, #14, #3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	fa42 f303 	asr.w	r3, r2, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff42 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 2; i >= 0; i--) {
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dae9      	bge.n	8001190 <TLC5952_WriteControl+0xa8>
    }
    TLC5952_LAT_HIGH();
 80011bc:	2201      	movs	r2, #1
 80011be:	2110      	movs	r1, #16
 80011c0:	4806      	ldr	r0, [pc, #24]	@ (80011dc <TLC5952_WriteControl+0xf4>)
 80011c2:	f004 fbdd 	bl	8005980 <HAL_GPIO_WritePin>
    TLC5952_LAT_LOW();
 80011c6:	2200      	movs	r2, #0
 80011c8:	2110      	movs	r1, #16
 80011ca:	4804      	ldr	r0, [pc, #16]	@ (80011dc <TLC5952_WriteControl+0xf4>)
 80011cc:	f004 fbd8 	bl	8005980 <HAL_GPIO_WritePin>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	2000036c 	.word	0x2000036c
 80011dc:	48000400 	.word	0x48000400

080011e0 <FT6336_ReadRegister>:

HAL_StatusTypeDef FT6336_WriteRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
    return HAL_I2C_Mem_Write(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
}

HAL_StatusTypeDef FT6336_ReadRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af04      	add	r7, sp, #16
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	4613      	mov	r3, r2
 80011ee:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	88bb      	ldrh	r3, [r7, #4]
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2301      	movs	r3, #1
 8001204:	2170      	movs	r1, #112	@ 0x70
 8001206:	4804      	ldr	r0, [pc, #16]	@ (8001218 <FT6336_ReadRegister+0x38>)
 8001208:	f004 fc90 	bl	8005b2c <HAL_I2C_Mem_Read>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000046c 	.word	0x2000046c

0800121c <AdjustTouchCoordinates>:



}

static void AdjustTouchCoordinates(uint16_t *x, uint16_t *y) {
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
    uint16_t rawX = *x;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	81fb      	strh	r3, [r7, #14]
    uint16_t rawY = *y;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	81bb      	strh	r3, [r7, #12]
//
//    *x = (*x * SCREEN_WIDTH) / TOUCH_WIDTH;
//    *y = (*y * SCREEN_HEIGHT) / TOUCH_HEIGHT;

    // 情况 X：特殊处理
    *x = rawY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	89ba      	ldrh	r2, [r7, #12]
 8001236:	801a      	strh	r2, [r3, #0]
    *y = SCREEN_HEIGHT-rawX;
 8001238:	89fb      	ldrh	r3, [r7, #14]
 800123a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800123e:	b29a      	uxth	r2, r3
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	801a      	strh	r2, [r3, #0]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <FT6336_GetTouchPoint>:





void FT6336_GetTouchPoint(TouchPoints_HandleTypeDef *touchPoints) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
    uint8_t touchStatus = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	73bb      	strb	r3, [r7, #14]
    uint8_t touchData[4];  // 存储两个点的坐标数据 (每个点4个字节)

    // 读取触摸状态寄存器
    FT6336_ReadRegister(FT6336_TD_STATUS, &touchStatus, 1);
 800125c:	f107 030e 	add.w	r3, r7, #14
 8001260:	2201      	movs	r2, #1
 8001262:	4619      	mov	r1, r3
 8001264:	2002      	movs	r0, #2
 8001266:	f7ff ffbb 	bl	80011e0 <FT6336_ReadRegister>
    uint8_t touchCount = touchStatus & 0x0F;  // 获取触摸点数量
 800126a:	7bbb      	ldrb	r3, [r7, #14]
 800126c:	f003 030f 	and.w	r3, r3, #15
 8001270:	73fb      	strb	r3, [r7, #15]

    if (touchCount > 0) {
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d054      	beq.n	8001322 <FT6336_GetTouchPoint+0xd2>
        // 读取第一个触摸点的坐标 (4个字节)
    	FT6336_ReadRegister(FT6336_P1_XH, touchData, 4);
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	2204      	movs	r2, #4
 800127e:	4619      	mov	r1, r3
 8001280:	2003      	movs	r0, #3
 8001282:	f7ff ffad 	bl	80011e0 <FT6336_ReadRegister>
        touchPoints->point1_x = ((touchData[0] & 0x0F) << 8) | touchData[1];
 8001286:	7a3b      	ldrb	r3, [r7, #8]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21b      	sxth	r3, r3
 800128c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001290:	b21a      	sxth	r2, r3
 8001292:	7a7b      	ldrb	r3, [r7, #9]
 8001294:	b21b      	sxth	r3, r3
 8001296:	4313      	orrs	r3, r2
 8001298:	b21b      	sxth	r3, r3
 800129a:	b29a      	uxth	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	801a      	strh	r2, [r3, #0]
        touchPoints->point1_y = ((touchData[2] & 0x0F) << 8) | touchData[3];
 80012a0:	7abb      	ldrb	r3, [r7, #10]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	7afb      	ldrb	r3, [r7, #11]
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	805a      	strh	r2, [r3, #2]
        AdjustTouchCoordinates(&touchPoints->point1_x, &touchPoints->point1_y);  // 调整第一个触摸点坐标
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3302      	adds	r3, #2
 80012c0:	4619      	mov	r1, r3
 80012c2:	4610      	mov	r0, r2
 80012c4:	f7ff ffaa 	bl	800121c <AdjustTouchCoordinates>

        if (touchCount > 1) {
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d929      	bls.n	8001322 <FT6336_GetTouchPoint+0xd2>
            // 读取第二个触摸点的坐标 (4个字节)
        	FT6336_ReadRegister(FT6336_P2_XH, &touchData[4], 4);
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	3304      	adds	r3, #4
 80012d4:	2204      	movs	r2, #4
 80012d6:	4619      	mov	r1, r3
 80012d8:	2009      	movs	r0, #9
 80012da:	f7ff ff81 	bl	80011e0 <FT6336_ReadRegister>
            touchPoints->point2_x = ((touchData[4] & 0x0F) << 8) | touchData[5];
 80012de:	7b3b      	ldrb	r3, [r7, #12]
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	7b7b      	ldrb	r3, [r7, #13]
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	809a      	strh	r2, [r3, #4]
            touchPoints->point2_y = ((touchData[6] & 0x0F) << 8) | touchData[7];
 80012f8:	7bbb      	ldrb	r3, [r7, #14]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001302:	b21a      	sxth	r2, r3
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b21b      	sxth	r3, r3
 800130c:	b29a      	uxth	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	80da      	strh	r2, [r3, #6]
            AdjustTouchCoordinates(&touchPoints->point2_x, &touchPoints->point2_y);  // 调整第二个触摸点坐标
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	1d1a      	adds	r2, r3, #4
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3306      	adds	r3, #6
 800131a:	4619      	mov	r1, r3
 800131c:	4610      	mov	r0, r2
 800131e:	f7ff ff7d 	bl	800121c <AdjustTouchCoordinates>
        }
    }
}
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001330:	f002 f8d3 	bl	80034da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001334:	f000 f85e 	bl	80013f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001338:	f000 feca 	bl	80020d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800133c:	f000 fe8e 	bl	800205c <MX_DMA_Init>
  MX_USB_Device_Init();
 8001340:	f00d ff60 	bl	800f204 <MX_USB_Device_Init>
  MX_COMP2_Init();
 8001344:	f000 f90a 	bl	800155c <MX_COMP2_Init>
  MX_COMP5_Init();
 8001348:	f000 f92e 	bl	80015a8 <MX_COMP5_Init>
  MX_DAC1_Init();
 800134c:	f000 f952 	bl	80015f4 <MX_DAC1_Init>
  MX_DAC2_Init();
 8001350:	f000 f998 	bl	8001684 <MX_DAC2_Init>
  MX_OPAMP1_Init();
 8001354:	f000 fa94 	bl	8001880 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001358:	f000 fabe 	bl	80018d8 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 800135c:	f000 fae2 	bl	8001924 <MX_OPAMP3_Init>
  MX_OPAMP6_Init();
 8001360:	f000 fb52 	bl	8001a08 <MX_OPAMP6_Init>
  MX_TIM1_Init();
 8001364:	f000 fbb4 	bl	8001ad0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001368:	f000 fc62 	bl	8001c30 <MX_TIM4_Init>
  MX_TIM20_Init();
 800136c:	f000 fe1c 	bl	8001fa8 <MX_TIM20_Init>
  MX_TIM3_Init();
 8001370:	f000 fc08 	bl	8001b84 <MX_TIM3_Init>
  MX_ADC5_Init();
 8001374:	f000 f88c 	bl	8001490 <MX_ADC5_Init>
  MX_TIM15_Init();
 8001378:	f000 fd72 	bl	8001e60 <MX_TIM15_Init>
  MX_TIM8_Init();
 800137c:	f000 fcae 	bl	8001cdc <MX_TIM8_Init>
  MX_SPI3_Init();
 8001380:	f000 fb68 	bl	8001a54 <MX_SPI3_Init>
  MX_I2C3_Init();
 8001384:	f000 f9f2 	bl	800176c <MX_I2C3_Init>
  MX_DAC4_Init();
 8001388:	f000 f9b6 	bl	80016f8 <MX_DAC4_Init>
  MX_LPUART1_UART_Init();
 800138c:	f000 fa2e 	bl	80017ec <MX_LPUART1_UART_Init>
  MX_OPAMP4_Init();
 8001390:	f000 faee 	bl	8001970 <MX_OPAMP4_Init>
  MX_OPAMP5_Init();
 8001394:	f000 fb12 	bl	80019bc <MX_OPAMP5_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001398:	213c      	movs	r1, #60	@ 0x3c
 800139a:	4811      	ldr	r0, [pc, #68]	@ (80013e0 <main+0xb4>)
 800139c:	f008 fd98 	bl	8009ed0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80013a0:	213c      	movs	r1, #60	@ 0x3c
 80013a2:	4810      	ldr	r0, [pc, #64]	@ (80013e4 <main+0xb8>)
 80013a4:	f008 fd94 	bl	8009ed0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80013a8:	213c      	movs	r1, #60	@ 0x3c
 80013aa:	480f      	ldr	r0, [pc, #60]	@ (80013e8 <main+0xbc>)
 80013ac:	f008 fd90 	bl	8009ed0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim20, TIM_CHANNEL_ALL);
 80013b0:	213c      	movs	r1, #60	@ 0x3c
 80013b2:	480e      	ldr	r0, [pc, #56]	@ (80013ec <main+0xc0>)
 80013b4:	f008 fd8c 	bl	8009ed0 <HAL_TIM_Encoder_Start>
//  HAL_TIM_Base_Start(&htim8);
//  HAL_TIM_Base_Start(&htim15);
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
//	WS2812_RunningHorse(95,10);

	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80013b8:	2100      	movs	r1, #0
 80013ba:	480d      	ldr	r0, [pc, #52]	@ (80013f0 <main+0xc4>)
 80013bc:	f008 fbd0 	bl	8009b60 <HAL_TIM_PWM_Start>

	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80013c0:	2108      	movs	r1, #8
 80013c2:	480b      	ldr	r0, [pc, #44]	@ (80013f0 <main+0xc4>)
 80013c4:	f008 fbcc 	bl	8009b60 <HAL_TIM_PWM_Start>


	  ST7789_Init();
 80013c8:	f001 f89e 	bl	8002508 <ST7789_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  ST7789_Test();
	    TLC5952_WriteLED();  // 发送数据
 80013cc:	f7ff fe56 	bl	800107c <TLC5952_WriteLED>
	    TLC5952_WriteControl();
 80013d0:	f7ff fe8a 	bl	80010e8 <TLC5952_WriteControl>



	    HAL_Delay(100);
 80013d4:	2064      	movs	r0, #100	@ 0x64
 80013d6:	f002 f8f1 	bl	80035bc <HAL_Delay>
	    TLC5952_WriteLED();  // 发送数据
 80013da:	bf00      	nop
 80013dc:	e7f6      	b.n	80013cc <main+0xa0>
 80013de:	bf00      	nop
 80013e0:	20000780 	.word	0x20000780
 80013e4:	200007cc 	.word	0x200007cc
 80013e8:	20000818 	.word	0x20000818
 80013ec:	200008fc 	.word	0x200008fc
 80013f0:	20000864 	.word	0x20000864

080013f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b094      	sub	sp, #80	@ 0x50
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 0318 	add.w	r3, r7, #24
 80013fe:	2238      	movs	r2, #56	@ 0x38
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f00f fb73 	bl	8010aee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001416:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800141a:	f006 fd79 	bl	8007f10 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800141e:	2321      	movs	r3, #33	@ 0x21
 8001420:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001422:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001426:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001428:	2301      	movs	r3, #1
 800142a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142c:	2302      	movs	r3, #2
 800142e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001430:	2303      	movs	r3, #3
 8001432:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001434:	2302      	movs	r3, #2
 8001436:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001438:	234b      	movs	r3, #75	@ 0x4b
 800143a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800143c:	2306      	movs	r3, #6
 800143e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001440:	2302      	movs	r3, #2
 8001442:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001444:	2302      	movs	r3, #2
 8001446:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001448:	f107 0318 	add.w	r3, r7, #24
 800144c:	4618      	mov	r0, r3
 800144e:	f006 fe13 	bl	8008078 <HAL_RCC_OscConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001458:	f000 ff54 	bl	8002304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145c:	230f      	movs	r3, #15
 800145e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001460:	2303      	movs	r3, #3
 8001462:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2104      	movs	r1, #4
 8001474:	4618      	mov	r0, r3
 8001476:	f007 f911 	bl	800869c <HAL_RCC_ClockConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001480:	f000 ff40 	bl	8002304 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001484:	f007 fae0 	bl	8008a48 <HAL_RCC_EnableCSS>
}
 8001488:	bf00      	nop
 800148a:	3750      	adds	r7, #80	@ 0x50
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001496:	463b      	mov	r3, r7
 8001498:	2220      	movs	r2, #32
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f00f fb26 	bl	8010aee <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80014a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001550 <MX_ADC5_Init+0xc0>)
 80014a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001554 <MX_ADC5_Init+0xc4>)
 80014a6:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80014a8:	4b29      	ldr	r3, [pc, #164]	@ (8001550 <MX_ADC5_Init+0xc0>)
 80014aa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014ae:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80014b0:	4b27      	ldr	r3, [pc, #156]	@ (8001550 <MX_ADC5_Init+0xc0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014b6:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <MX_ADC5_Init+0xc0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80014bc:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <MX_ADC5_Init+0xc0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014c2:	4b23      	ldr	r3, [pc, #140]	@ (8001550 <MX_ADC5_Init+0xc0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c8:	4b21      	ldr	r3, [pc, #132]	@ (8001550 <MX_ADC5_Init+0xc0>)
 80014ca:	2204      	movs	r2, #4
 80014cc:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80014ce:	4b20      	ldr	r3, [pc, #128]	@ (8001550 <MX_ADC5_Init+0xc0>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 80014d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001550 <MX_ADC5_Init+0xc0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80014da:	4b1d      	ldr	r3, [pc, #116]	@ (8001550 <MX_ADC5_Init+0xc0>)
 80014dc:	2201      	movs	r2, #1
 80014de:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <MX_ADC5_Init+0xc0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e8:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <MX_ADC5_Init+0xc0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ee:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <MX_ADC5_Init+0xc0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80014f4:	4b16      	ldr	r3, [pc, #88]	@ (8001550 <MX_ADC5_Init+0xc0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014fc:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <MX_ADC5_Init+0xc0>)
 80014fe:	2200      	movs	r2, #0
 8001500:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001502:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <MX_ADC5_Init+0xc0>)
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800150a:	4811      	ldr	r0, [pc, #68]	@ (8001550 <MX_ADC5_Init+0xc0>)
 800150c:	f002 fa72 	bl	80039f4 <HAL_ADC_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8001516:	f000 fef5 	bl	8002304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800151a:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <MX_ADC5_Init+0xc8>)
 800151c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800151e:	2306      	movs	r3, #6
 8001520:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001526:	237f      	movs	r3, #127	@ 0x7f
 8001528:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800152a:	2304      	movs	r3, #4
 800152c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001532:	463b      	mov	r3, r7
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	@ (8001550 <MX_ADC5_Init+0xc0>)
 8001538:	f002 fc18 	bl	8003d6c <HAL_ADC_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8001542:	f000 fedf 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	3720      	adds	r7, #32
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2000037c 	.word	0x2000037c
 8001554:	50000600 	.word	0x50000600
 8001558:	08600004 	.word	0x08600004

0800155c <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001560:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <MX_COMP2_Init+0x44>)
 8001562:	4a10      	ldr	r2, [pc, #64]	@ (80015a4 <MX_COMP2_Init+0x48>)
 8001564:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001566:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <MX_COMP2_Init+0x44>)
 8001568:	2200      	movs	r2, #0
 800156a:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 800156c:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <MX_COMP2_Init+0x44>)
 800156e:	2250      	movs	r2, #80	@ 0x50
 8001570:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001572:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <MX_COMP2_Init+0x44>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001578:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <MX_COMP2_Init+0x44>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800157e:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <MX_COMP2_Init+0x44>)
 8001580:	2200      	movs	r2, #0
 8001582:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <MX_COMP2_Init+0x44>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800158a:	4805      	ldr	r0, [pc, #20]	@ (80015a0 <MX_COMP2_Init+0x44>)
 800158c:	f003 f97e 	bl	800488c <HAL_COMP_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 8001596:	f000 feb5 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200003e8 	.word	0x200003e8
 80015a4:	40010204 	.word	0x40010204

080015a8 <MX_COMP5_Init>:
  * @brief COMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP5_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <MX_COMP5_Init+0x44>)
 80015ae:	4a10      	ldr	r2, [pc, #64]	@ (80015f0 <MX_COMP5_Init+0x48>)
 80015b0:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_COMP5_Init+0x44>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	605a      	str	r2, [r3, #4]
  hcomp5.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_COMP5_Init+0x44>)
 80015ba:	2250      	movs	r2, #80	@ 0x50
 80015bc:	609a      	str	r2, [r3, #8]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80015be:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <MX_COMP5_Init+0x44>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_COMP5_Init+0x44>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <MX_COMP5_Init+0x44>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_COMP5_Init+0x44>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <MX_COMP5_Init+0x44>)
 80015d8:	f003 f958 	bl	800488c <HAL_COMP_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_COMP5_Init+0x3e>
  {
    Error_Handler();
 80015e2:	f000 fe8f 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000040c 	.word	0x2000040c
 80015f0:	40010210 	.word	0x40010210

080015f4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08c      	sub	sp, #48	@ 0x30
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015fa:	463b      	mov	r3, r7
 80015fc:	2230      	movs	r2, #48	@ 0x30
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f00f fa74 	bl	8010aee <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001606:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <MX_DAC1_Init+0x88>)
 8001608:	4a1d      	ldr	r2, [pc, #116]	@ (8001680 <MX_DAC1_Init+0x8c>)
 800160a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800160c:	481b      	ldr	r0, [pc, #108]	@ (800167c <MX_DAC1_Init+0x88>)
 800160e:	f003 fbe6 	bl	8004dde <HAL_DAC_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001618:	f000 fe74 	bl	8002304 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800161c:	2302      	movs	r3, #2
 800161e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001638:	2304      	movs	r3, #4
 800163a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001640:	463b      	mov	r3, r7
 8001642:	2200      	movs	r2, #0
 8001644:	4619      	mov	r1, r3
 8001646:	480d      	ldr	r0, [pc, #52]	@ (800167c <MX_DAC1_Init+0x88>)
 8001648:	f003 fbec 	bl	8004e24 <HAL_DAC_ConfigChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001652:	f000 fe57 	bl	8002304 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001656:	2302      	movs	r3, #2
 8001658:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800165a:	2302      	movs	r3, #2
 800165c:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800165e:	463b      	mov	r3, r7
 8001660:	2210      	movs	r2, #16
 8001662:	4619      	mov	r1, r3
 8001664:	4805      	ldr	r0, [pc, #20]	@ (800167c <MX_DAC1_Init+0x88>)
 8001666:	f003 fbdd 	bl	8004e24 <HAL_DAC_ConfigChannel>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_DAC1_Init+0x80>
  {
    Error_Handler();
 8001670:	f000 fe48 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	3730      	adds	r7, #48	@ 0x30
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000430 	.word	0x20000430
 8001680:	50000800 	.word	0x50000800

08001684 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08c      	sub	sp, #48	@ 0x30
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800168a:	463b      	mov	r3, r7
 800168c:	2230      	movs	r2, #48	@ 0x30
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f00f fa2c 	bl	8010aee <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001696:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <MX_DAC2_Init+0x6c>)
 8001698:	4a16      	ldr	r2, [pc, #88]	@ (80016f4 <MX_DAC2_Init+0x70>)
 800169a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800169c:	4814      	ldr	r0, [pc, #80]	@ (80016f0 <MX_DAC2_Init+0x6c>)
 800169e:	f003 fb9e 	bl	8004dde <HAL_DAC_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80016a8:	f000 fe2c 	bl	8002304 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80016ac:	2302      	movs	r3, #2
 80016ae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 80016c8:	2304      	movs	r3, #4
 80016ca:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016d0:	463b      	mov	r3, r7
 80016d2:	2200      	movs	r2, #0
 80016d4:	4619      	mov	r1, r3
 80016d6:	4806      	ldr	r0, [pc, #24]	@ (80016f0 <MX_DAC2_Init+0x6c>)
 80016d8:	f003 fba4 	bl	8004e24 <HAL_DAC_ConfigChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80016e2:	f000 fe0f 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	3730      	adds	r7, #48	@ 0x30
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000444 	.word	0x20000444
 80016f4:	50000c00 	.word	0x50000c00

080016f8 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08c      	sub	sp, #48	@ 0x30
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016fe:	463b      	mov	r3, r7
 8001700:	2230      	movs	r2, #48	@ 0x30
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f00f f9f2 	bl	8010aee <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 800170a:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <MX_DAC4_Init+0x6c>)
 800170c:	4a16      	ldr	r2, [pc, #88]	@ (8001768 <MX_DAC4_Init+0x70>)
 800170e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8001710:	4814      	ldr	r0, [pc, #80]	@ (8001764 <MX_DAC4_Init+0x6c>)
 8001712:	f003 fb64 	bl	8004dde <HAL_DAC_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 800171c:	f000 fdf2 	bl	8002304 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001720:	2302      	movs	r3, #2
 8001722:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001734:	2300      	movs	r3, #0
 8001736:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001738:	2302      	movs	r3, #2
 800173a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800173c:	2302      	movs	r3, #2
 800173e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001744:	463b      	mov	r3, r7
 8001746:	2200      	movs	r2, #0
 8001748:	4619      	mov	r1, r3
 800174a:	4806      	ldr	r0, [pc, #24]	@ (8001764 <MX_DAC4_Init+0x6c>)
 800174c:	f003 fb6a 	bl	8004e24 <HAL_DAC_ConfigChannel>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 8001756:	f000 fdd5 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	3730      	adds	r7, #48	@ 0x30
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000458 	.word	0x20000458
 8001768:	50001400 	.word	0x50001400

0800176c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001770:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <MX_I2C3_Init+0x74>)
 8001772:	4a1c      	ldr	r2, [pc, #112]	@ (80017e4 <MX_I2C3_Init+0x78>)
 8001774:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30D293D6;
 8001776:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <MX_I2C3_Init+0x74>)
 8001778:	4a1b      	ldr	r2, [pc, #108]	@ (80017e8 <MX_I2C3_Init+0x7c>)
 800177a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800177c:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <MX_I2C3_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001782:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <MX_I2C3_Init+0x74>)
 8001784:	2201      	movs	r2, #1
 8001786:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001788:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <MX_I2C3_Init+0x74>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800178e:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <MX_I2C3_Init+0x74>)
 8001790:	2200      	movs	r2, #0
 8001792:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <MX_I2C3_Init+0x74>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800179a:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <MX_I2C3_Init+0x74>)
 800179c:	2200      	movs	r2, #0
 800179e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <MX_I2C3_Init+0x74>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017a6:	480e      	ldr	r0, [pc, #56]	@ (80017e0 <MX_I2C3_Init+0x74>)
 80017a8:	f004 f925 	bl	80059f6 <HAL_I2C_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80017b2:	f000 fda7 	bl	8002304 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017b6:	2100      	movs	r1, #0
 80017b8:	4809      	ldr	r0, [pc, #36]	@ (80017e0 <MX_I2C3_Init+0x74>)
 80017ba:	f004 fd3f 	bl	800623c <HAL_I2CEx_ConfigAnalogFilter>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80017c4:	f000 fd9e 	bl	8002304 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80017c8:	2100      	movs	r1, #0
 80017ca:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <MX_I2C3_Init+0x74>)
 80017cc:	f004 fd81 	bl	80062d2 <HAL_I2CEx_ConfigDigitalFilter>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80017d6:	f000 fd95 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000046c 	.word	0x2000046c
 80017e4:	40007800 	.word	0x40007800
 80017e8:	30d293d6 	.word	0x30d293d6

080017ec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80017f0:	4b21      	ldr	r3, [pc, #132]	@ (8001878 <MX_LPUART1_UART_Init+0x8c>)
 80017f2:	4a22      	ldr	r2, [pc, #136]	@ (800187c <MX_LPUART1_UART_Init+0x90>)
 80017f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 921600;
 80017f6:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <MX_LPUART1_UART_Init+0x8c>)
 80017f8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80017fc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001878 <MX_LPUART1_UART_Init+0x8c>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b1c      	ldr	r3, [pc, #112]	@ (8001878 <MX_LPUART1_UART_Init+0x8c>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800180a:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <MX_LPUART1_UART_Init+0x8c>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <MX_LPUART1_UART_Init+0x8c>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b18      	ldr	r3, [pc, #96]	@ (8001878 <MX_LPUART1_UART_Init+0x8c>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800181c:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <MX_LPUART1_UART_Init+0x8c>)
 800181e:	2200      	movs	r2, #0
 8001820:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <MX_LPUART1_UART_Init+0x8c>)
 8001824:	2200      	movs	r2, #0
 8001826:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001828:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <MX_LPUART1_UART_Init+0x8c>)
 800182a:	2200      	movs	r2, #0
 800182c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800182e:	4812      	ldr	r0, [pc, #72]	@ (8001878 <MX_LPUART1_UART_Init+0x8c>)
 8001830:	f009 fbd0 	bl	800afd4 <HAL_UART_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800183a:	f000 fd63 	bl	8002304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800183e:	2100      	movs	r1, #0
 8001840:	480d      	ldr	r0, [pc, #52]	@ (8001878 <MX_LPUART1_UART_Init+0x8c>)
 8001842:	f00a f96b 	bl	800bb1c <HAL_UARTEx_SetTxFifoThreshold>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800184c:	f000 fd5a 	bl	8002304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001850:	2100      	movs	r1, #0
 8001852:	4809      	ldr	r0, [pc, #36]	@ (8001878 <MX_LPUART1_UART_Init+0x8c>)
 8001854:	f00a f9a0 	bl	800bb98 <HAL_UARTEx_SetRxFifoThreshold>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800185e:	f000 fd51 	bl	8002304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001862:	4805      	ldr	r0, [pc, #20]	@ (8001878 <MX_LPUART1_UART_Init+0x8c>)
 8001864:	f00a f921 	bl	800baaa <HAL_UARTEx_DisableFifoMode>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800186e:	f000 fd49 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200004c0 	.word	0x200004c0
 800187c:	40008000 	.word	0x40008000

08001880 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <MX_OPAMP1_Init+0x50>)
 8001886:	4a13      	ldr	r2, [pc, #76]	@ (80018d4 <MX_OPAMP1_Init+0x54>)
 8001888:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800188a:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <MX_OPAMP1_Init+0x50>)
 800188c:	2200      	movs	r2, #0
 800188e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001890:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <MX_OPAMP1_Init+0x50>)
 8001892:	2240      	movs	r2, #64	@ 0x40
 8001894:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001896:	4b0e      	ldr	r3, [pc, #56]	@ (80018d0 <MX_OPAMP1_Init+0x50>)
 8001898:	2208      	movs	r2, #8
 800189a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 800189c:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <MX_OPAMP1_Init+0x50>)
 800189e:	2201      	movs	r2, #1
 80018a0:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80018a2:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <MX_OPAMP1_Init+0x50>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 80018a8:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <MX_OPAMP1_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 80018ae:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <MX_OPAMP1_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80018b4:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <MX_OPAMP1_Init+0x50>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80018ba:	4805      	ldr	r0, [pc, #20]	@ (80018d0 <MX_OPAMP1_Init+0x50>)
 80018bc:	f004 fd56 	bl	800636c <HAL_OPAMP_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_OPAMP1_Init+0x4a>
  {
    Error_Handler();
 80018c6:	f000 fd1d 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000554 	.word	0x20000554
 80018d4:	40010300 	.word	0x40010300

080018d8 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <MX_OPAMP2_Init+0x44>)
 80018de:	4a10      	ldr	r2, [pc, #64]	@ (8001920 <MX_OPAMP2_Init+0x48>)
 80018e0:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <MX_OPAMP2_Init+0x44>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <MX_OPAMP2_Init+0x44>)
 80018ea:	2260      	movs	r2, #96	@ 0x60
 80018ec:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <MX_OPAMP2_Init+0x44>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 80018f4:	4b09      	ldr	r3, [pc, #36]	@ (800191c <MX_OPAMP2_Init+0x44>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	@ (800191c <MX_OPAMP2_Init+0x44>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <MX_OPAMP2_Init+0x44>)
 8001902:	2200      	movs	r2, #0
 8001904:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	@ (800191c <MX_OPAMP2_Init+0x44>)
 8001908:	f004 fd30 	bl	800636c <HAL_OPAMP_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_OPAMP2_Init+0x3e>
  {
    Error_Handler();
 8001912:	f000 fcf7 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000590 	.word	0x20000590
 8001920:	40010304 	.word	0x40010304

08001924 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001928:	4b0f      	ldr	r3, [pc, #60]	@ (8001968 <MX_OPAMP3_Init+0x44>)
 800192a:	4a10      	ldr	r2, [pc, #64]	@ (800196c <MX_OPAMP3_Init+0x48>)
 800192c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800192e:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <MX_OPAMP3_Init+0x44>)
 8001930:	2200      	movs	r2, #0
 8001932:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001934:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <MX_OPAMP3_Init+0x44>)
 8001936:	2260      	movs	r2, #96	@ 0x60
 8001938:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO1;
 800193a:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <MX_OPAMP3_Init+0x44>)
 800193c:	2204      	movs	r2, #4
 800193e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8001940:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <MX_OPAMP3_Init+0x44>)
 8001942:	2201      	movs	r2, #1
 8001944:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001946:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <MX_OPAMP3_Init+0x44>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <MX_OPAMP3_Init+0x44>)
 800194e:	2200      	movs	r2, #0
 8001950:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001952:	4805      	ldr	r0, [pc, #20]	@ (8001968 <MX_OPAMP3_Init+0x44>)
 8001954:	f004 fd0a 	bl	800636c <HAL_OPAMP_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 800195e:	f000 fcd1 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200005cc 	.word	0x200005cc
 800196c:	40010308 	.word	0x40010308

08001970 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8001974:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <MX_OPAMP4_Init+0x44>)
 8001976:	4a10      	ldr	r2, [pc, #64]	@ (80019b8 <MX_OPAMP4_Init+0x48>)
 8001978:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800197a:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <MX_OPAMP4_Init+0x44>)
 800197c:	2200      	movs	r2, #0
 800197e:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <MX_OPAMP4_Init+0x44>)
 8001982:	2260      	movs	r2, #96	@ 0x60
 8001984:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8001986:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <MX_OPAMP4_Init+0x44>)
 8001988:	220c      	movs	r2, #12
 800198a:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 800198c:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <MX_OPAMP4_Init+0x44>)
 800198e:	2200      	movs	r2, #0
 8001990:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001992:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <MX_OPAMP4_Init+0x44>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <MX_OPAMP4_Init+0x44>)
 800199a:	2200      	movs	r2, #0
 800199c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 800199e:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <MX_OPAMP4_Init+0x44>)
 80019a0:	f004 fce4 	bl	800636c <HAL_OPAMP_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_OPAMP4_Init+0x3e>
  {
    Error_Handler();
 80019aa:	f000 fcab 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000608 	.word	0x20000608
 80019b8:	4001030c 	.word	0x4001030c

080019bc <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <MX_OPAMP5_Init+0x44>)
 80019c2:	4a10      	ldr	r2, [pc, #64]	@ (8001a04 <MX_OPAMP5_Init+0x48>)
 80019c4:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <MX_OPAMP5_Init+0x44>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_FOLLOWER_MODE;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <MX_OPAMP5_Init+0x44>)
 80019ce:	2260      	movs	r2, #96	@ 0x60
 80019d0:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <MX_OPAMP5_Init+0x44>)
 80019d4:	2208      	movs	r2, #8
 80019d6:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = ENABLE;
 80019d8:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <MX_OPAMP5_Init+0x44>)
 80019da:	2201      	movs	r2, #1
 80019dc:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80019de:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <MX_OPAMP5_Init+0x44>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <MX_OPAMP5_Init+0x44>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	@ (8001a00 <MX_OPAMP5_Init+0x44>)
 80019ec:	f004 fcbe 	bl	800636c <HAL_OPAMP_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_OPAMP5_Init+0x3e>
  {
    Error_Handler();
 80019f6:	f000 fc85 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000644 	.word	0x20000644
 8001a04:	40010310 	.word	0x40010310

08001a08 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <MX_OPAMP6_Init+0x44>)
 8001a0e:	4a10      	ldr	r2, [pc, #64]	@ (8001a50 <MX_OPAMP6_Init+0x48>)
 8001a10:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <MX_OPAMP6_Init+0x44>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <MX_OPAMP6_Init+0x44>)
 8001a1a:	2260      	movs	r2, #96	@ 0x60
 8001a1c:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <MX_OPAMP6_Init+0x44>)
 8001a20:	2208      	movs	r2, #8
 8001a22:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 8001a24:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <MX_OPAMP6_Init+0x44>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001a2a:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <MX_OPAMP6_Init+0x44>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001a30:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <MX_OPAMP6_Init+0x44>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8001a36:	4805      	ldr	r0, [pc, #20]	@ (8001a4c <MX_OPAMP6_Init+0x44>)
 8001a38:	f004 fc98 	bl	800636c <HAL_OPAMP_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 8001a42:	f000 fc5f 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000680 	.word	0x20000680
 8001a50:	40010314 	.word	0x40010314

08001a54 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001a58:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <MX_SPI3_Init+0x74>)
 8001a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8001acc <MX_SPI3_Init+0x78>)
 8001a5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <MX_SPI3_Init+0x74>)
 8001a60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001a66:	4b18      	ldr	r3, [pc, #96]	@ (8001ac8 <MX_SPI3_Init+0x74>)
 8001a68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a6c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a6e:	4b16      	ldr	r3, [pc, #88]	@ (8001ac8 <MX_SPI3_Init+0x74>)
 8001a70:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001a74:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a76:	4b14      	ldr	r3, [pc, #80]	@ (8001ac8 <MX_SPI3_Init+0x74>)
 8001a78:	2202      	movs	r2, #2
 8001a7a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <MX_SPI3_Init+0x74>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a82:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <MX_SPI3_Init+0x74>)
 8001a84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a88:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <MX_SPI3_Init+0x74>)
 8001a8c:	2210      	movs	r2, #16
 8001a8e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <MX_SPI3_Init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <MX_SPI3_Init+0x74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <MX_SPI3_Init+0x74>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <MX_SPI3_Init+0x74>)
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <MX_SPI3_Init+0x74>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <MX_SPI3_Init+0x74>)
 8001ab0:	2208      	movs	r2, #8
 8001ab2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ab4:	4804      	ldr	r0, [pc, #16]	@ (8001ac8 <MX_SPI3_Init+0x74>)
 8001ab6:	f007 fa87 	bl	8008fc8 <HAL_SPI_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8001ac0:	f000 fc20 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200006bc 	.word	0x200006bc
 8001acc:	40003c00 	.word	0x40003c00

08001ad0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08c      	sub	sp, #48	@ 0x30
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	2224      	movs	r2, #36	@ 0x24
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f00f f805 	bl	8010aee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aee:	4b23      	ldr	r3, [pc, #140]	@ (8001b7c <MX_TIM1_Init+0xac>)
 8001af0:	4a23      	ldr	r2, [pc, #140]	@ (8001b80 <MX_TIM1_Init+0xb0>)
 8001af2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001af4:	4b21      	ldr	r3, [pc, #132]	@ (8001b7c <MX_TIM1_Init+0xac>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afa:	4b20      	ldr	r3, [pc, #128]	@ (8001b7c <MX_TIM1_Init+0xac>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b00:	4b1e      	ldr	r3, [pc, #120]	@ (8001b7c <MX_TIM1_Init+0xac>)
 8001b02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b08:	4b1c      	ldr	r3, [pc, #112]	@ (8001b7c <MX_TIM1_Init+0xac>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b7c <MX_TIM1_Init+0xac>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b14:	4b19      	ldr	r3, [pc, #100]	@ (8001b7c <MX_TIM1_Init+0xac>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b22:	2301      	movs	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001b2a:	230f      	movs	r3, #15
 8001b2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b32:	2301      	movs	r3, #1
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001b3a:	230f      	movs	r3, #15
 8001b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	4619      	mov	r1, r3
 8001b44:	480d      	ldr	r0, [pc, #52]	@ (8001b7c <MX_TIM1_Init+0xac>)
 8001b46:	f008 f91d 	bl	8009d84 <HAL_TIM_Encoder_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001b50:	f000 fbd8 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b60:	463b      	mov	r3, r7
 8001b62:	4619      	mov	r1, r3
 8001b64:	4805      	ldr	r0, [pc, #20]	@ (8001b7c <MX_TIM1_Init+0xac>)
 8001b66:	f009 f90b 	bl	800ad80 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001b70:	f000 fbc8 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	3730      	adds	r7, #48	@ 0x30
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000780 	.word	0x20000780
 8001b80:	40012c00 	.word	0x40012c00

08001b84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08c      	sub	sp, #48	@ 0x30
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b8a:	f107 030c 	add.w	r3, r7, #12
 8001b8e:	2224      	movs	r2, #36	@ 0x24
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f00e ffab 	bl	8010aee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b98:	463b      	mov	r3, r7
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ba2:	4b21      	ldr	r3, [pc, #132]	@ (8001c28 <MX_TIM3_Init+0xa4>)
 8001ba4:	4a21      	ldr	r2, [pc, #132]	@ (8001c2c <MX_TIM3_Init+0xa8>)
 8001ba6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c28 <MX_TIM3_Init+0xa4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bae:	4b1e      	ldr	r3, [pc, #120]	@ (8001c28 <MX_TIM3_Init+0xa4>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <MX_TIM3_Init+0xa4>)
 8001bb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <MX_TIM3_Init+0xa4>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc2:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <MX_TIM3_Init+0xa4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001bd8:	230f      	movs	r3, #15
 8001bda:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001be0:	2301      	movs	r3, #1
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001be8:	230f      	movs	r3, #15
 8001bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	480d      	ldr	r0, [pc, #52]	@ (8001c28 <MX_TIM3_Init+0xa4>)
 8001bf4:	f008 f8c6 	bl	8009d84 <HAL_TIM_Encoder_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001bfe:	f000 fb81 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4806      	ldr	r0, [pc, #24]	@ (8001c28 <MX_TIM3_Init+0xa4>)
 8001c10:	f009 f8b6 	bl	800ad80 <HAL_TIMEx_MasterConfigSynchronization>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c1a:	f000 fb73 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c1e:	bf00      	nop
 8001c20:	3730      	adds	r7, #48	@ 0x30
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200007cc 	.word	0x200007cc
 8001c2c:	40000400 	.word	0x40000400

08001c30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08c      	sub	sp, #48	@ 0x30
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	2224      	movs	r2, #36	@ 0x24
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f00e ff55 	bl	8010aee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c44:	463b      	mov	r3, r7
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c4e:	4b21      	ldr	r3, [pc, #132]	@ (8001cd4 <MX_TIM4_Init+0xa4>)
 8001c50:	4a21      	ldr	r2, [pc, #132]	@ (8001cd8 <MX_TIM4_Init+0xa8>)
 8001c52:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c54:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd4 <MX_TIM4_Init+0xa4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd4 <MX_TIM4_Init+0xa4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c60:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd4 <MX_TIM4_Init+0xa4>)
 8001c62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c68:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <MX_TIM4_Init+0xa4>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6e:	4b19      	ldr	r3, [pc, #100]	@ (8001cd4 <MX_TIM4_Init+0xa4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c74:	2301      	movs	r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001c84:	230f      	movs	r3, #15
 8001c86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001c94:	230f      	movs	r3, #15
 8001c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	480d      	ldr	r0, [pc, #52]	@ (8001cd4 <MX_TIM4_Init+0xa4>)
 8001ca0:	f008 f870 	bl	8009d84 <HAL_TIM_Encoder_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001caa:	f000 fb2b 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4806      	ldr	r0, [pc, #24]	@ (8001cd4 <MX_TIM4_Init+0xa4>)
 8001cbc:	f009 f860 	bl	800ad80 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001cc6:	f000 fb1d 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	3730      	adds	r7, #48	@ 0x30
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000818 	.word	0x20000818
 8001cd8:	40000800 	.word	0x40000800

08001cdc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b09c      	sub	sp, #112	@ 0x70
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cfc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
 8001d0c:	615a      	str	r2, [r3, #20]
 8001d0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	2234      	movs	r2, #52	@ 0x34
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f00e fee9 	bl	8010aee <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d1c:	4b4e      	ldr	r3, [pc, #312]	@ (8001e58 <MX_TIM8_Init+0x17c>)
 8001d1e:	4a4f      	ldr	r2, [pc, #316]	@ (8001e5c <MX_TIM8_Init+0x180>)
 8001d20:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d22:	4b4d      	ldr	r3, [pc, #308]	@ (8001e58 <MX_TIM8_Init+0x17c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d28:	4b4b      	ldr	r3, [pc, #300]	@ (8001e58 <MX_TIM8_Init+0x17c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 179;
 8001d2e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e58 <MX_TIM8_Init+0x17c>)
 8001d30:	22b3      	movs	r2, #179	@ 0xb3
 8001d32:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d34:	4b48      	ldr	r3, [pc, #288]	@ (8001e58 <MX_TIM8_Init+0x17c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d3a:	4b47      	ldr	r3, [pc, #284]	@ (8001e58 <MX_TIM8_Init+0x17c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d40:	4b45      	ldr	r3, [pc, #276]	@ (8001e58 <MX_TIM8_Init+0x17c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d46:	4844      	ldr	r0, [pc, #272]	@ (8001e58 <MX_TIM8_Init+0x17c>)
 8001d48:	f007 fe52 	bl	80099f0 <HAL_TIM_Base_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001d52:	f000 fad7 	bl	8002304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d5a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d5c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d60:	4619      	mov	r1, r3
 8001d62:	483d      	ldr	r0, [pc, #244]	@ (8001e58 <MX_TIM8_Init+0x17c>)
 8001d64:	f008 fa56 	bl	800a214 <HAL_TIM_ConfigClockSource>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001d6e:	f000 fac9 	bl	8002304 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d72:	4839      	ldr	r0, [pc, #228]	@ (8001e58 <MX_TIM8_Init+0x17c>)
 8001d74:	f007 fe93 	bl	8009a9e <HAL_TIM_PWM_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001d7e:	f000 fac1 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d92:	4619      	mov	r1, r3
 8001d94:	4830      	ldr	r0, [pc, #192]	@ (8001e58 <MX_TIM8_Init+0x17c>)
 8001d96:	f008 fff3 	bl	800ad80 <HAL_TIMEx_MasterConfigSynchronization>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001da0:	f000 fab0 	bl	8002304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001da4:	2370      	movs	r3, #112	@ 0x70
 8001da6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 90;
 8001da8:	235a      	movs	r3, #90	@ 0x5a
 8001daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001dac:	2302      	movs	r3, #2
 8001dae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001db0:	2300      	movs	r3, #0
 8001db2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001db8:	2300      	movs	r3, #0
 8001dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4823      	ldr	r0, [pc, #140]	@ (8001e58 <MX_TIM8_Init+0x17c>)
 8001dca:	f008 f90f 	bl	8009fec <HAL_TIM_PWM_ConfigChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8001dd4:	f000 fa96 	bl	8002304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd8:	2360      	movs	r3, #96	@ 0x60
 8001dda:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001de0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001de4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001de6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dea:	2208      	movs	r2, #8
 8001dec:	4619      	mov	r1, r3
 8001dee:	481a      	ldr	r0, [pc, #104]	@ (8001e58 <MX_TIM8_Init+0x17c>)
 8001df0:	f008 f8fc 	bl	8009fec <HAL_TIM_PWM_ConfigChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM8_Init+0x122>
  {
    Error_Handler();
 8001dfa:	f000 fa83 	bl	8002304 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4807      	ldr	r0, [pc, #28]	@ (8001e58 <MX_TIM8_Init+0x17c>)
 8001e3c:	f009 f836 	bl	800aeac <HAL_TIMEx_ConfigBreakDeadTime>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM8_Init+0x16e>
  {
    Error_Handler();
 8001e46:	f000 fa5d 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001e4a:	4803      	ldr	r0, [pc, #12]	@ (8001e58 <MX_TIM8_Init+0x17c>)
 8001e4c:	f001 f92e 	bl	80030ac <HAL_TIM_MspPostInit>

}
 8001e50:	bf00      	nop
 8001e52:	3770      	adds	r7, #112	@ 0x70
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000864 	.word	0x20000864
 8001e5c:	40013400 	.word	0x40013400

08001e60 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b09c      	sub	sp, #112	@ 0x70
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e66:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e80:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
 8001e90:	615a      	str	r2, [r3, #20]
 8001e92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	2234      	movs	r2, #52	@ 0x34
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f00e fe27 	bl	8010aee <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001ea0:	4b3f      	ldr	r3, [pc, #252]	@ (8001fa0 <MX_TIM15_Init+0x140>)
 8001ea2:	4a40      	ldr	r2, [pc, #256]	@ (8001fa4 <MX_TIM15_Init+0x144>)
 8001ea4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 150;
 8001ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fa0 <MX_TIM15_Init+0x140>)
 8001ea8:	2296      	movs	r2, #150	@ 0x96
 8001eaa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eac:	4b3c      	ldr	r3, [pc, #240]	@ (8001fa0 <MX_TIM15_Init+0x140>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa0 <MX_TIM15_Init+0x140>)
 8001eb4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001eb8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eba:	4b39      	ldr	r3, [pc, #228]	@ (8001fa0 <MX_TIM15_Init+0x140>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001ec0:	4b37      	ldr	r3, [pc, #220]	@ (8001fa0 <MX_TIM15_Init+0x140>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec6:	4b36      	ldr	r3, [pc, #216]	@ (8001fa0 <MX_TIM15_Init+0x140>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001ecc:	4834      	ldr	r0, [pc, #208]	@ (8001fa0 <MX_TIM15_Init+0x140>)
 8001ece:	f007 fd8f 	bl	80099f0 <HAL_TIM_Base_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001ed8:	f000 fa14 	bl	8002304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001edc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001ee2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	482d      	ldr	r0, [pc, #180]	@ (8001fa0 <MX_TIM15_Init+0x140>)
 8001eea:	f008 f993 	bl	800a214 <HAL_TIM_ConfigClockSource>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001ef4:	f000 fa06 	bl	8002304 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001ef8:	4829      	ldr	r0, [pc, #164]	@ (8001fa0 <MX_TIM15_Init+0x140>)
 8001efa:	f007 fdd0 	bl	8009a9e <HAL_TIM_PWM_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001f04:	f000 f9fe 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001f10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f14:	4619      	mov	r1, r3
 8001f16:	4822      	ldr	r0, [pc, #136]	@ (8001fa0 <MX_TIM15_Init+0x140>)
 8001f18:	f008 ff32 	bl	800ad80 <HAL_TIMEx_MasterConfigSynchronization>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001f22:	f000 f9ef 	bl	8002304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f26:	2360      	movs	r3, #96	@ 0x60
 8001f28:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 499;
 8001f2a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f30:	2300      	movs	r3, #0
 8001f32:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f34:	2300      	movs	r3, #0
 8001f36:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f44:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f48:	2200      	movs	r2, #0
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4814      	ldr	r0, [pc, #80]	@ (8001fa0 <MX_TIM15_Init+0x140>)
 8001f4e:	f008 f84d 	bl	8009fec <HAL_TIM_PWM_ConfigChannel>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8001f58:	f000 f9d4 	bl	8002304 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	4619      	mov	r1, r3
 8001f82:	4807      	ldr	r0, [pc, #28]	@ (8001fa0 <MX_TIM15_Init+0x140>)
 8001f84:	f008 ff92 	bl	800aeac <HAL_TIMEx_ConfigBreakDeadTime>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001f8e:	f000 f9b9 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001f92:	4803      	ldr	r0, [pc, #12]	@ (8001fa0 <MX_TIM15_Init+0x140>)
 8001f94:	f001 f88a 	bl	80030ac <HAL_TIM_MspPostInit>

}
 8001f98:	bf00      	nop
 8001f9a:	3770      	adds	r7, #112	@ 0x70
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	200008b0 	.word	0x200008b0
 8001fa4:	40014000 	.word	0x40014000

08001fa8 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08c      	sub	sp, #48	@ 0x30
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fae:	f107 030c 	add.w	r3, r7, #12
 8001fb2:	2224      	movs	r2, #36	@ 0x24
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f00e fd99 	bl	8010aee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001fc6:	4b23      	ldr	r3, [pc, #140]	@ (8002054 <MX_TIM20_Init+0xac>)
 8001fc8:	4a23      	ldr	r2, [pc, #140]	@ (8002058 <MX_TIM20_Init+0xb0>)
 8001fca:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001fcc:	4b21      	ldr	r3, [pc, #132]	@ (8002054 <MX_TIM20_Init+0xac>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd2:	4b20      	ldr	r3, [pc, #128]	@ (8002054 <MX_TIM20_Init+0xac>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8001fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002054 <MX_TIM20_Init+0xac>)
 8001fda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fde:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8002054 <MX_TIM20_Init+0xac>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <MX_TIM20_Init+0xac>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fec:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <MX_TIM20_Init+0xac>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002002:	230f      	movs	r3, #15
 8002004:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800200a:	2301      	movs	r3, #1
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800200e:	2300      	movs	r3, #0
 8002010:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8002012:	230f      	movs	r3, #15
 8002014:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 8002016:	f107 030c 	add.w	r3, r7, #12
 800201a:	4619      	mov	r1, r3
 800201c:	480d      	ldr	r0, [pc, #52]	@ (8002054 <MX_TIM20_Init+0xac>)
 800201e:	f007 feb1 	bl	8009d84 <HAL_TIM_Encoder_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 8002028:	f000 f96c 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202c:	2300      	movs	r3, #0
 800202e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8002038:	463b      	mov	r3, r7
 800203a:	4619      	mov	r1, r3
 800203c:	4805      	ldr	r0, [pc, #20]	@ (8002054 <MX_TIM20_Init+0xac>)
 800203e:	f008 fe9f 	bl	800ad80 <HAL_TIMEx_MasterConfigSynchronization>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 8002048:	f000 f95c 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 800204c:	bf00      	nop
 800204e:	3730      	adds	r7, #48	@ 0x30
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	200008fc 	.word	0x200008fc
 8002058:	40015000 	.word	0x40015000

0800205c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002062:	4b1a      	ldr	r3, [pc, #104]	@ (80020cc <MX_DMA_Init+0x70>)
 8002064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002066:	4a19      	ldr	r2, [pc, #100]	@ (80020cc <MX_DMA_Init+0x70>)
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	6493      	str	r3, [r2, #72]	@ 0x48
 800206e:	4b17      	ldr	r3, [pc, #92]	@ (80020cc <MX_DMA_Init+0x70>)
 8002070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800207a:	4b14      	ldr	r3, [pc, #80]	@ (80020cc <MX_DMA_Init+0x70>)
 800207c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800207e:	4a13      	ldr	r2, [pc, #76]	@ (80020cc <MX_DMA_Init+0x70>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6493      	str	r3, [r2, #72]	@ 0x48
 8002086:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <MX_DMA_Init+0x70>)
 8002088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	200b      	movs	r0, #11
 8002098:	f002 fe6d 	bl	8004d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800209c:	200b      	movs	r0, #11
 800209e:	f002 fe84 	bl	8004daa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	200c      	movs	r0, #12
 80020a8:	f002 fe65 	bl	8004d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80020ac:	200c      	movs	r0, #12
 80020ae:	f002 fe7c 	bl	8004daa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	200d      	movs	r0, #13
 80020b8:	f002 fe5d 	bl	8004d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80020bc:	200d      	movs	r0, #13
 80020be:	f002 fe74 	bl	8004daa <HAL_NVIC_EnableIRQ>

}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000

080020d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	@ 0x28
 80020d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
 80020e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e6:	4b83      	ldr	r3, [pc, #524]	@ (80022f4 <MX_GPIO_Init+0x224>)
 80020e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ea:	4a82      	ldr	r2, [pc, #520]	@ (80022f4 <MX_GPIO_Init+0x224>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020f2:	4b80      	ldr	r3, [pc, #512]	@ (80022f4 <MX_GPIO_Init+0x224>)
 80020f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020fe:	4b7d      	ldr	r3, [pc, #500]	@ (80022f4 <MX_GPIO_Init+0x224>)
 8002100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002102:	4a7c      	ldr	r2, [pc, #496]	@ (80022f4 <MX_GPIO_Init+0x224>)
 8002104:	f043 0320 	orr.w	r3, r3, #32
 8002108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800210a:	4b7a      	ldr	r3, [pc, #488]	@ (80022f4 <MX_GPIO_Init+0x224>)
 800210c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002116:	4b77      	ldr	r3, [pc, #476]	@ (80022f4 <MX_GPIO_Init+0x224>)
 8002118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211a:	4a76      	ldr	r2, [pc, #472]	@ (80022f4 <MX_GPIO_Init+0x224>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002122:	4b74      	ldr	r3, [pc, #464]	@ (80022f4 <MX_GPIO_Init+0x224>)
 8002124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800212e:	4b71      	ldr	r3, [pc, #452]	@ (80022f4 <MX_GPIO_Init+0x224>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002132:	4a70      	ldr	r2, [pc, #448]	@ (80022f4 <MX_GPIO_Init+0x224>)
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800213a:	4b6e      	ldr	r3, [pc, #440]	@ (80022f4 <MX_GPIO_Init+0x224>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002146:	4b6b      	ldr	r3, [pc, #428]	@ (80022f4 <MX_GPIO_Init+0x224>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214a:	4a6a      	ldr	r2, [pc, #424]	@ (80022f4 <MX_GPIO_Init+0x224>)
 800214c:	f043 0308 	orr.w	r3, r3, #8
 8002150:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002152:	4b68      	ldr	r3, [pc, #416]	@ (80022f4 <MX_GPIO_Init+0x224>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AC_DC_CH2_Pin|CD_CH2_A_Pin|CD_CH2_B_Pin|CD_CH1_A_Pin
 800215e:	2200      	movs	r2, #0
 8002160:	f64e 0120 	movw	r1, #59424	@ 0xe820
 8002164:	4864      	ldr	r0, [pc, #400]	@ (80022f8 <MX_GPIO_Init+0x228>)
 8002166:	f003 fc0b 	bl	8005980 <HAL_GPIO_WritePin>
                          |ST7789_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CD_CH2_C_Pin|GPIO_PIN_5|CD_CH1_C_Pin, GPIO_PIN_RESET);
 800216a:	2200      	movs	r2, #0
 800216c:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002170:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002174:	f003 fc04 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CD_CH1_B_Pin|TLC5952_SCLK_Pin|TLC5952_LAT_Pin|TLC5952_SIN_Pin, GPIO_PIN_RESET);
 8002178:	2200      	movs	r2, #0
 800217a:	f248 0138 	movw	r1, #32824	@ 0x8038
 800217e:	485f      	ldr	r0, [pc, #380]	@ (80022fc <MX_GPIO_Init+0x22c>)
 8002180:	f003 fbfe 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FT6336_RST_GPIO_Port, FT6336_RST_Pin, GPIO_PIN_RESET);
 8002184:	2200      	movs	r2, #0
 8002186:	2104      	movs	r1, #4
 8002188:	485d      	ldr	r0, [pc, #372]	@ (8002300 <MX_GPIO_Init+0x230>)
 800218a:	f003 fbf9 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AC_DC_CH2_Pin CD_CH2_A_Pin CD_CH2_B_Pin CD_CH1_A_Pin
                           ST7789_DC_Pin */
  GPIO_InitStruct.Pin = AC_DC_CH2_Pin|CD_CH2_A_Pin|CD_CH2_B_Pin|CD_CH1_A_Pin
 800218e:	f64e 0320 	movw	r3, #59424	@ 0xe820
 8002192:	617b      	str	r3, [r7, #20]
                          |ST7789_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002194:	2301      	movs	r3, #1
 8002196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	4619      	mov	r1, r3
 80021a6:	4854      	ldr	r0, [pc, #336]	@ (80022f8 <MX_GPIO_Init+0x228>)
 80021a8:	f003 fa68 	bl	800567c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021ac:	2301      	movs	r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 80021bc:	230e      	movs	r3, #14
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4619      	mov	r1, r3
 80021c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021ca:	f003 fa57 	bl	800567c <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_CH2_C_Pin PA5 CD_CH1_C_Pin */
  GPIO_InitStruct.Pin = CD_CH2_C_Pin|GPIO_PIN_5|CD_CH1_C_Pin;
 80021ce:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80021d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d4:	2301      	movs	r3, #1
 80021d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	4619      	mov	r1, r3
 80021e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021ea:	f003 fa47 	bl	800567c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10;
 80021ee:	f240 430c 	movw	r3, #1036	@ 0x40c
 80021f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fe:	f107 0314 	add.w	r3, r7, #20
 8002202:	4619      	mov	r1, r3
 8002204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002208:	f003 fa38 	bl	800567c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800220c:	2310      	movs	r3, #16
 800220e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002210:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	4835      	ldr	r0, [pc, #212]	@ (80022f8 <MX_GPIO_Init+0x228>)
 8002222:	f003 fa2b 	bl	800567c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8;
 8002226:	f240 1303 	movw	r3, #259	@ 0x103
 800222a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800222c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	482f      	ldr	r0, [pc, #188]	@ (80022fc <MX_GPIO_Init+0x22c>)
 800223e:	f003 fa1d 	bl	800567c <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_CH1_B_Pin TLC5952_SCLK_Pin TLC5952_LAT_Pin TLC5952_SIN_Pin */
  GPIO_InitStruct.Pin = CD_CH1_B_Pin|TLC5952_SCLK_Pin|TLC5952_LAT_Pin|TLC5952_SIN_Pin;
 8002242:	f248 0338 	movw	r3, #32824	@ 0x8038
 8002246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002248:	2301      	movs	r3, #1
 800224a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	4619      	mov	r1, r3
 800225a:	4828      	ldr	r0, [pc, #160]	@ (80022fc <MX_GPIO_Init+0x22c>)
 800225c:	f003 fa0e 	bl	800567c <HAL_GPIO_Init>

  /*Configure GPIO pin : FT6336_RST_Pin */
  GPIO_InitStruct.Pin = FT6336_RST_Pin;
 8002260:	2304      	movs	r3, #4
 8002262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002264:	2301      	movs	r3, #1
 8002266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FT6336_RST_GPIO_Port, &GPIO_InitStruct);
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	4619      	mov	r1, r3
 8002276:	4822      	ldr	r0, [pc, #136]	@ (8002300 <MX_GPIO_Init+0x230>)
 8002278:	f003 fa00 	bl	800567c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	2100      	movs	r1, #0
 8002280:	2006      	movs	r0, #6
 8002282:	f002 fd78 	bl	8004d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002286:	2006      	movs	r0, #6
 8002288:	f002 fd8f 	bl	8004daa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800228c:	2200      	movs	r2, #0
 800228e:	2100      	movs	r1, #0
 8002290:	2007      	movs	r0, #7
 8002292:	f002 fd70 	bl	8004d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002296:	2007      	movs	r0, #7
 8002298:	f002 fd87 	bl	8004daa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800229c:	2200      	movs	r2, #0
 800229e:	2100      	movs	r1, #0
 80022a0:	2008      	movs	r0, #8
 80022a2:	f002 fd68 	bl	8004d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80022a6:	2008      	movs	r0, #8
 80022a8:	f002 fd7f 	bl	8004daa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2100      	movs	r1, #0
 80022b0:	2009      	movs	r0, #9
 80022b2:	f002 fd60 	bl	8004d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80022b6:	2009      	movs	r0, #9
 80022b8:	f002 fd77 	bl	8004daa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80022bc:	2200      	movs	r2, #0
 80022be:	2100      	movs	r1, #0
 80022c0:	200a      	movs	r0, #10
 80022c2:	f002 fd58 	bl	8004d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80022c6:	200a      	movs	r0, #10
 80022c8:	f002 fd6f 	bl	8004daa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2100      	movs	r1, #0
 80022d0:	2017      	movs	r0, #23
 80022d2:	f002 fd50 	bl	8004d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80022d6:	2017      	movs	r0, #23
 80022d8:	f002 fd67 	bl	8004daa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022dc:	2200      	movs	r2, #0
 80022de:	2100      	movs	r1, #0
 80022e0:	2028      	movs	r0, #40	@ 0x28
 80022e2:	f002 fd48 	bl	8004d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022e6:	2028      	movs	r0, #40	@ 0x28
 80022e8:	f002 fd5f 	bl	8004daa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022ec:	bf00      	nop
 80022ee:	3728      	adds	r7, #40	@ 0x28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	48000800 	.word	0x48000800
 80022fc:	48000400 	.word	0x48000400
 8002300:	48000c00 	.word	0x48000c00

08002304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002308:	b672      	cpsid	i
}
 800230a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800230c:	bf00      	nop
 800230e:	e7fd      	b.n	800230c <Error_Handler+0x8>

08002310 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800231a:	bf00      	nop
	ST7789_DC_Clr();
 800231c:	2200      	movs	r2, #0
 800231e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002322:	4807      	ldr	r0, [pc, #28]	@ (8002340 <ST7789_WriteCommand+0x30>)
 8002324:	f003 fb2c 	bl	8005980 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002328:	1df9      	adds	r1, r7, #7
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
 800232e:	2201      	movs	r2, #1
 8002330:	4804      	ldr	r0, [pc, #16]	@ (8002344 <ST7789_WriteCommand+0x34>)
 8002332:	f006 fef4 	bl	800911e <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8002336:	bf00      	nop
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	48000800 	.word	0x48000800
 8002344:	200006bc 	.word	0x200006bc

08002348 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8002352:	bf00      	nop
	ST7789_DC_Set();
 8002354:	2201      	movs	r2, #1
 8002356:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800235a:	481b      	ldr	r0, [pc, #108]	@ (80023c8 <ST7789_WriteData+0x80>)
 800235c:	f003 fb10 	bl	8005980 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8002360:	e02a      	b.n	80023b8 <ST7789_WriteData+0x70>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002368:	4293      	cmp	r3, r2
 800236a:	bf28      	it	cs
 800236c:	4613      	movcs	r3, r2
 800236e:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 8002370:	4b16      	ldr	r3, [pc, #88]	@ (80023cc <ST7789_WriteData+0x84>)
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	4293      	cmp	r3, r2
 800237a:	d30e      	bcc.n	800239a <ST7789_WriteData+0x52>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 800237c:	89fb      	ldrh	r3, [r7, #14]
 800237e:	461a      	mov	r2, r3
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4813      	ldr	r0, [pc, #76]	@ (80023d0 <ST7789_WriteData+0x88>)
 8002384:	f007 f842 	bl	800940c <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8002388:	bf00      	nop
 800238a:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <ST7789_WriteData+0x88>)
 800238c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d1f8      	bne.n	800238a <ST7789_WriteData+0x42>
 8002398:	e006      	b.n	80023a8 <ST7789_WriteData+0x60>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 800239a:	89fa      	ldrh	r2, [r7, #14]
 800239c:	f04f 33ff 	mov.w	r3, #4294967295
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	480b      	ldr	r0, [pc, #44]	@ (80023d0 <ST7789_WriteData+0x88>)
 80023a4:	f006 febb 	bl	800911e <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 80023a8:	89fb      	ldrh	r3, [r7, #14]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80023b0:	89fb      	ldrh	r3, [r7, #14]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1d1      	bne.n	8002362 <ST7789_WriteData+0x1a>
	}

	ST7789_UnSelect();
 80023be:	bf00      	nop
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	48000800 	.word	0x48000800
 80023cc:	20000000 	.word	0x20000000
 80023d0:	200006bc 	.word	0x200006bc

080023d4 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80023de:	bf00      	nop
	ST7789_DC_Set();
 80023e0:	2201      	movs	r2, #1
 80023e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80023e6:	4807      	ldr	r0, [pc, #28]	@ (8002404 <ST7789_WriteSmallData+0x30>)
 80023e8:	f003 faca 	bl	8005980 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 80023ec:	1df9      	adds	r1, r7, #7
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
 80023f2:	2201      	movs	r2, #1
 80023f4:	4804      	ldr	r0, [pc, #16]	@ (8002408 <ST7789_WriteSmallData+0x34>)
 80023f6:	f006 fe92 	bl	800911e <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80023fa:	bf00      	nop
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	48000800 	.word	0x48000800
 8002408:	200006bc 	.word	0x200006bc

0800240c <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8002416:	2036      	movs	r0, #54	@ 0x36
 8002418:	f7ff ff7a 	bl	8002310 <ST7789_WriteCommand>
	switch (m) {
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	2b03      	cmp	r3, #3
 8002420:	d81a      	bhi.n	8002458 <ST7789_SetRotation+0x4c>
 8002422:	a201      	add	r2, pc, #4	@ (adr r2, 8002428 <ST7789_SetRotation+0x1c>)
 8002424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002428:	08002439 	.word	0x08002439
 800242c:	08002441 	.word	0x08002441
 8002430:	08002449 	.word	0x08002449
 8002434:	08002451 	.word	0x08002451
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8002438:	20c0      	movs	r0, #192	@ 0xc0
 800243a:	f7ff ffcb 	bl	80023d4 <ST7789_WriteSmallData>
		break;
 800243e:	e00c      	b.n	800245a <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002440:	20a0      	movs	r0, #160	@ 0xa0
 8002442:	f7ff ffc7 	bl	80023d4 <ST7789_WriteSmallData>
		break;
 8002446:	e008      	b.n	800245a <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8002448:	2000      	movs	r0, #0
 800244a:	f7ff ffc3 	bl	80023d4 <ST7789_WriteSmallData>
		break;
 800244e:	e004      	b.n	800245a <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002450:	2060      	movs	r0, #96	@ 0x60
 8002452:	f7ff ffbf 	bl	80023d4 <ST7789_WriteSmallData>
		break;
 8002456:	e000      	b.n	800245a <ST7789_SetRotation+0x4e>
	default:
		break;
 8002458:	bf00      	nop
	}
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop

08002464 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	4604      	mov	r4, r0
 800246c:	4608      	mov	r0, r1
 800246e:	4611      	mov	r1, r2
 8002470:	461a      	mov	r2, r3
 8002472:	4623      	mov	r3, r4
 8002474:	80fb      	strh	r3, [r7, #6]
 8002476:	4603      	mov	r3, r0
 8002478:	80bb      	strh	r3, [r7, #4]
 800247a:	460b      	mov	r3, r1
 800247c:	807b      	strh	r3, [r7, #2]
 800247e:	4613      	mov	r3, r2
 8002480:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8002482:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8002484:	88fb      	ldrh	r3, [r7, #6]
 8002486:	82fb      	strh	r3, [r7, #22]
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 800248c:	88bb      	ldrh	r3, [r7, #4]
 800248e:	827b      	strh	r3, [r7, #18]
 8002490:	883b      	ldrh	r3, [r7, #0]
 8002492:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8002494:	202a      	movs	r0, #42	@ 0x2a
 8002496:	f7ff ff3b 	bl	8002310 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 800249a:	8afb      	ldrh	r3, [r7, #22]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	b29b      	uxth	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	733b      	strb	r3, [r7, #12]
 80024a4:	8afb      	ldrh	r3, [r7, #22]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	737b      	strb	r3, [r7, #13]
 80024aa:	8abb      	ldrh	r3, [r7, #20]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	73bb      	strb	r3, [r7, #14]
 80024b4:	8abb      	ldrh	r3, [r7, #20]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 80024ba:	f107 030c 	add.w	r3, r7, #12
 80024be:	2104      	movs	r1, #4
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ff41 	bl	8002348 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 80024c6:	202b      	movs	r0, #43	@ 0x2b
 80024c8:	f7ff ff22 	bl	8002310 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 80024cc:	8a7b      	ldrh	r3, [r7, #18]
 80024ce:	0a1b      	lsrs	r3, r3, #8
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	723b      	strb	r3, [r7, #8]
 80024d6:	8a7b      	ldrh	r3, [r7, #18]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	727b      	strb	r3, [r7, #9]
 80024dc:	8a3b      	ldrh	r3, [r7, #16]
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	72bb      	strb	r3, [r7, #10]
 80024e6:	8a3b      	ldrh	r3, [r7, #16]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 80024ec:	f107 0308 	add.w	r3, r7, #8
 80024f0:	2104      	movs	r1, #4
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ff28 	bl	8002348 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 80024f8:	202c      	movs	r0, #44	@ 0x2c
 80024fa:	f7ff ff09 	bl	8002310 <ST7789_WriteCommand>
	ST7789_UnSelect();
 80024fe:	bf00      	nop
}
 8002500:	bf00      	nop
 8002502:	371c      	adds	r7, #28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd90      	pop	{r4, r7, pc}

08002508 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b08b      	sub	sp, #44	@ 0x2c
 800250c:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 800250e:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8002512:	2100      	movs	r1, #0
 8002514:	484a      	ldr	r0, [pc, #296]	@ (8002640 <ST7789_Init+0x138>)
 8002516:	f00e faea 	bl	8010aee <memset>
	#endif
	HAL_Delay(10);
 800251a:	200a      	movs	r0, #10
 800251c:	f001 f84e 	bl	80035bc <HAL_Delay>
    ST7789_RST_Clr();
 8002520:	2200      	movs	r2, #0
 8002522:	2104      	movs	r1, #4
 8002524:	4847      	ldr	r0, [pc, #284]	@ (8002644 <ST7789_Init+0x13c>)
 8002526:	f003 fa2b 	bl	8005980 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800252a:	200a      	movs	r0, #10
 800252c:	f001 f846 	bl	80035bc <HAL_Delay>
    ST7789_RST_Set();
 8002530:	2201      	movs	r2, #1
 8002532:	2104      	movs	r1, #4
 8002534:	4843      	ldr	r0, [pc, #268]	@ (8002644 <ST7789_Init+0x13c>)
 8002536:	f003 fa23 	bl	8005980 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800253a:	2014      	movs	r0, #20
 800253c:	f001 f83e 	bl	80035bc <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8002540:	203a      	movs	r0, #58	@ 0x3a
 8002542:	f7ff fee5 	bl	8002310 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8002546:	2055      	movs	r0, #85	@ 0x55
 8002548:	f7ff ff44 	bl	80023d4 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800254c:	20b2      	movs	r0, #178	@ 0xb2
 800254e:	f7ff fedf 	bl	8002310 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8002552:	4a3d      	ldr	r2, [pc, #244]	@ (8002648 <ST7789_Init+0x140>)
 8002554:	f107 0320 	add.w	r3, r7, #32
 8002558:	e892 0003 	ldmia.w	r2, {r0, r1}
 800255c:	6018      	str	r0, [r3, #0]
 800255e:	3304      	adds	r3, #4
 8002560:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8002562:	f107 0320 	add.w	r3, r7, #32
 8002566:	2105      	movs	r1, #5
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff feed 	bl	8002348 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 800256e:	2003      	movs	r0, #3
 8002570:	f7ff ff4c 	bl	800240c <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8002574:	20b7      	movs	r0, #183	@ 0xb7
 8002576:	f7ff fecb 	bl	8002310 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 800257a:	2035      	movs	r0, #53	@ 0x35
 800257c:	f7ff ff2a 	bl	80023d4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8002580:	20bb      	movs	r0, #187	@ 0xbb
 8002582:	f7ff fec5 	bl	8002310 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8002586:	2019      	movs	r0, #25
 8002588:	f7ff ff24 	bl	80023d4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 800258c:	20c0      	movs	r0, #192	@ 0xc0
 800258e:	f7ff febf 	bl	8002310 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8002592:	202c      	movs	r0, #44	@ 0x2c
 8002594:	f7ff ff1e 	bl	80023d4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8002598:	20c2      	movs	r0, #194	@ 0xc2
 800259a:	f7ff feb9 	bl	8002310 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 800259e:	2001      	movs	r0, #1
 80025a0:	f7ff ff18 	bl	80023d4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80025a4:	20c3      	movs	r0, #195	@ 0xc3
 80025a6:	f7ff feb3 	bl	8002310 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80025aa:	2012      	movs	r0, #18
 80025ac:	f7ff ff12 	bl	80023d4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 80025b0:	20c4      	movs	r0, #196	@ 0xc4
 80025b2:	f7ff fead 	bl	8002310 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 80025b6:	2020      	movs	r0, #32
 80025b8:	f7ff ff0c 	bl	80023d4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 80025bc:	20c6      	movs	r0, #198	@ 0xc6
 80025be:	f7ff fea7 	bl	8002310 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 80025c2:	200f      	movs	r0, #15
 80025c4:	f7ff ff06 	bl	80023d4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 80025c8:	20d0      	movs	r0, #208	@ 0xd0
 80025ca:	f7ff fea1 	bl	8002310 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 80025ce:	20a4      	movs	r0, #164	@ 0xa4
 80025d0:	f7ff ff00 	bl	80023d4 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 80025d4:	20a1      	movs	r0, #161	@ 0xa1
 80025d6:	f7ff fefd 	bl	80023d4 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 80025da:	20e0      	movs	r0, #224	@ 0xe0
 80025dc:	f7ff fe98 	bl	8002310 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 80025e0:	4b1a      	ldr	r3, [pc, #104]	@ (800264c <ST7789_Init+0x144>)
 80025e2:	f107 0410 	add.w	r4, r7, #16
 80025e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025e8:	c407      	stmia	r4!, {r0, r1, r2}
 80025ea:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80025ec:	f107 0310 	add.w	r3, r7, #16
 80025f0:	210e      	movs	r1, #14
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fea8 	bl	8002348 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 80025f8:	20e1      	movs	r0, #225	@ 0xe1
 80025fa:	f7ff fe89 	bl	8002310 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 80025fe:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <ST7789_Init+0x148>)
 8002600:	463c      	mov	r4, r7
 8002602:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002604:	c407      	stmia	r4!, {r0, r1, r2}
 8002606:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002608:	463b      	mov	r3, r7
 800260a:	210e      	movs	r1, #14
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fe9b 	bl	8002348 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8002612:	2021      	movs	r0, #33	@ 0x21
 8002614:	f7ff fe7c 	bl	8002310 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8002618:	2011      	movs	r0, #17
 800261a:	f7ff fe79 	bl	8002310 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800261e:	2013      	movs	r0, #19
 8002620:	f7ff fe76 	bl	8002310 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8002624:	2029      	movs	r0, #41	@ 0x29
 8002626:	f7ff fe73 	bl	8002310 <ST7789_WriteCommand>

	HAL_Delay(50);
 800262a:	2032      	movs	r0, #50	@ 0x32
 800262c:	f000 ffc6 	bl	80035bc <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8002630:	2000      	movs	r0, #0
 8002632:	f000 f80f 	bl	8002654 <ST7789_Fill_Color>
}
 8002636:	bf00      	nop
 8002638:	372c      	adds	r7, #44	@ 0x2c
 800263a:	46bd      	mov	sp, r7
 800263c:	bd90      	pop	{r4, r7, pc}
 800263e:	bf00      	nop
 8002640:	20000a08 	.word	0x20000a08
 8002644:	48000c00 	.word	0x48000c00
 8002648:	080142b8 	.word	0x080142b8
 800264c:	080142c0 	.word	0x080142c0
 8002650:	080142d0 	.word	0x080142d0

08002654 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800265e:	23ef      	movs	r3, #239	@ 0xef
 8002660:	f240 123f 	movw	r2, #319	@ 0x13f
 8002664:	2100      	movs	r1, #0
 8002666:	2000      	movs	r0, #0
 8002668:	f7ff fefc 	bl	8002464 <ST7789_SetAddressWindow>
	ST7789_Select();
 800266c:	bf00      	nop

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800266e:	2300      	movs	r3, #0
 8002670:	81fb      	strh	r3, [r7, #14]
 8002672:	e00e      	b.n	8002692 <ST7789_Fill_Color+0x3e>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800267a:	4619      	mov	r1, r3
 800267c:	4809      	ldr	r0, [pc, #36]	@ (80026a4 <ST7789_Fill_Color+0x50>)
 800267e:	f00e fa36 	bl	8010aee <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8002682:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 8002686:	4807      	ldr	r0, [pc, #28]	@ (80026a4 <ST7789_Fill_Color+0x50>)
 8002688:	f7ff fe5e 	bl	8002348 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800268c:	89fb      	ldrh	r3, [r7, #14]
 800268e:	3301      	adds	r3, #1
 8002690:	81fb      	strh	r3, [r7, #14]
 8002692:	89fb      	ldrh	r3, [r7, #14]
 8002694:	2b2f      	cmp	r3, #47	@ 0x2f
 8002696:	d9ed      	bls.n	8002674 <ST7789_Fill_Color+0x20>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8002698:	bf00      	nop
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000a08 	.word	0x20000a08

080026a8 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	80fb      	strh	r3, [r7, #6]
 80026b2:	460b      	mov	r3, r1
 80026b4:	80bb      	strh	r3, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80026c0:	d219      	bcs.n	80026f6 <ST7789_DrawPixel+0x4e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80026c2:	88bb      	ldrh	r3, [r7, #4]
 80026c4:	2bef      	cmp	r3, #239	@ 0xef
 80026c6:	d816      	bhi.n	80026f6 <ST7789_DrawPixel+0x4e>
	
	ST7789_SetAddressWindow(x, y, x, y);
 80026c8:	88bb      	ldrh	r3, [r7, #4]
 80026ca:	88fa      	ldrh	r2, [r7, #6]
 80026cc:	88b9      	ldrh	r1, [r7, #4]
 80026ce:	88f8      	ldrh	r0, [r7, #6]
 80026d0:	f7ff fec8 	bl	8002464 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 80026d4:	887b      	ldrh	r3, [r7, #2]
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	b29b      	uxth	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	733b      	strb	r3, [r7, #12]
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 80026e4:	bf00      	nop
	ST7789_WriteData(data, sizeof(data));
 80026e6:	f107 030c 	add.w	r3, r7, #12
 80026ea:	2102      	movs	r1, #2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fe2b 	bl	8002348 <ST7789_WriteData>
	ST7789_UnSelect();
 80026f2:	bf00      	nop
 80026f4:	e000      	b.n	80026f8 <ST7789_DrawPixel+0x50>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80026f6:	bf00      	nop
}
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002706:	4b11      	ldr	r3, [pc, #68]	@ (800274c <HAL_MspInit+0x4c>)
 8002708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800270a:	4a10      	ldr	r2, [pc, #64]	@ (800274c <HAL_MspInit+0x4c>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6613      	str	r3, [r2, #96]	@ 0x60
 8002712:	4b0e      	ldr	r3, [pc, #56]	@ (800274c <HAL_MspInit+0x4c>)
 8002714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <HAL_MspInit+0x4c>)
 8002720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002722:	4a0a      	ldr	r2, [pc, #40]	@ (800274c <HAL_MspInit+0x4c>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002728:	6593      	str	r3, [r2, #88]	@ 0x58
 800272a:	4b08      	ldr	r3, [pc, #32]	@ (800274c <HAL_MspInit+0x4c>)
 800272c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8002736:	f000 ff77 	bl	8003628 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800273a:	2002      	movs	r0, #2
 800273c:	f000 ff60 	bl	8003600 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002740:	f005 fc8a 	bl	8008058 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000

08002750 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b09e      	sub	sp, #120	@ 0x78
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	2254      	movs	r2, #84	@ 0x54
 800276e:	2100      	movs	r1, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f00e f9bc 	bl	8010aee <memset>
  if(hadc->Instance==ADC5)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1e      	ldr	r2, [pc, #120]	@ (80027f4 <HAL_ADC_MspInit+0xa4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d135      	bne.n	80027ec <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8002780:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002784:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8002786:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800278a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800278c:	f107 0310 	add.w	r3, r7, #16
 8002790:	4618      	mov	r0, r3
 8002792:	f006 f9cb 	bl	8008b2c <HAL_RCCEx_PeriphCLKConfig>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800279c:	f7ff fdb2 	bl	8002304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 80027a0:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <HAL_ADC_MspInit+0xa8>)
 80027a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a4:	4a14      	ldr	r2, [pc, #80]	@ (80027f8 <HAL_ADC_MspInit+0xa8>)
 80027a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027ac:	4b12      	ldr	r3, [pc, #72]	@ (80027f8 <HAL_ADC_MspInit+0xa8>)
 80027ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b8:	4b0f      	ldr	r3, [pc, #60]	@ (80027f8 <HAL_ADC_MspInit+0xa8>)
 80027ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027bc:	4a0e      	ldr	r2, [pc, #56]	@ (80027f8 <HAL_ADC_MspInit+0xa8>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027c4:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <HAL_ADC_MspInit+0xa8>)
 80027c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC5 GPIO Configuration
    PA9     ------> ADC5_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027d4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027d6:	2303      	movs	r3, #3
 80027d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027de:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80027e2:	4619      	mov	r1, r3
 80027e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027e8:	f002 ff48 	bl	800567c <HAL_GPIO_Init>

  /* USER CODE END ADC5_MspInit 1 */

  }

}
 80027ec:	bf00      	nop
 80027ee:	3778      	adds	r7, #120	@ 0x78
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	50000600 	.word	0x50000600
 80027f8:	40021000 	.word	0x40021000

080027fc <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	@ 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a1f      	ldr	r2, [pc, #124]	@ (8002898 <HAL_COMP_MspInit+0x9c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d119      	bne.n	8002852 <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	4b1f      	ldr	r3, [pc, #124]	@ (800289c <HAL_COMP_MspInit+0xa0>)
 8002820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002822:	4a1e      	ldr	r2, [pc, #120]	@ (800289c <HAL_COMP_MspInit+0xa0>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800282a:	4b1c      	ldr	r3, [pc, #112]	@ (800289c <HAL_COMP_MspInit+0xa0>)
 800282c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	693b      	ldr	r3, [r7, #16]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002836:	2380      	movs	r3, #128	@ 0x80
 8002838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800283a:	2303      	movs	r3, #3
 800283c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002842:	f107 0314 	add.w	r3, r7, #20
 8002846:	4619      	mov	r1, r3
 8002848:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800284c:	f002 ff16 	bl	800567c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP5_MspInit 1 */

  /* USER CODE END COMP5_MspInit 1 */
  }

}
 8002850:	e01d      	b.n	800288e <HAL_COMP_MspInit+0x92>
  else if(hcomp->Instance==COMP5)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a12      	ldr	r2, [pc, #72]	@ (80028a0 <HAL_COMP_MspInit+0xa4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d118      	bne.n	800288e <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285c:	4b0f      	ldr	r3, [pc, #60]	@ (800289c <HAL_COMP_MspInit+0xa0>)
 800285e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002860:	4a0e      	ldr	r2, [pc, #56]	@ (800289c <HAL_COMP_MspInit+0xa0>)
 8002862:	f043 0302 	orr.w	r3, r3, #2
 8002866:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002868:	4b0c      	ldr	r3, [pc, #48]	@ (800289c <HAL_COMP_MspInit+0xa0>)
 800286a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002874:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800287a:	2303      	movs	r3, #3
 800287c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	4619      	mov	r1, r3
 8002888:	4806      	ldr	r0, [pc, #24]	@ (80028a4 <HAL_COMP_MspInit+0xa8>)
 800288a:	f002 fef7 	bl	800567c <HAL_GPIO_Init>
}
 800288e:	bf00      	nop
 8002890:	3728      	adds	r7, #40	@ 0x28
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40010204 	.word	0x40010204
 800289c:	40021000 	.word	0x40021000
 80028a0:	40010210 	.word	0x40010210
 80028a4:	48000400 	.word	0x48000400

080028a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08c      	sub	sp, #48	@ 0x30
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	f107 031c 	add.w	r3, r7, #28
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a34      	ldr	r2, [pc, #208]	@ (8002998 <HAL_DAC_MspInit+0xf0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d125      	bne.n	8002916 <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80028ca:	4b34      	ldr	r3, [pc, #208]	@ (800299c <HAL_DAC_MspInit+0xf4>)
 80028cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ce:	4a33      	ldr	r2, [pc, #204]	@ (800299c <HAL_DAC_MspInit+0xf4>)
 80028d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028d6:	4b31      	ldr	r3, [pc, #196]	@ (800299c <HAL_DAC_MspInit+0xf4>)
 80028d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e2:	4b2e      	ldr	r3, [pc, #184]	@ (800299c <HAL_DAC_MspInit+0xf4>)
 80028e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e6:	4a2d      	ldr	r2, [pc, #180]	@ (800299c <HAL_DAC_MspInit+0xf4>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028ee:	4b2b      	ldr	r3, [pc, #172]	@ (800299c <HAL_DAC_MspInit+0xf4>)
 80028f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028fa:	2310      	movs	r3, #16
 80028fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028fe:	2303      	movs	r3, #3
 8002900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002906:	f107 031c 	add.w	r3, r7, #28
 800290a:	4619      	mov	r1, r3
 800290c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002910:	f002 feb4 	bl	800567c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8002914:	e03b      	b.n	800298e <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC2)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a21      	ldr	r2, [pc, #132]	@ (80029a0 <HAL_DAC_MspInit+0xf8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d125      	bne.n	800296c <HAL_DAC_MspInit+0xc4>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8002920:	4b1e      	ldr	r3, [pc, #120]	@ (800299c <HAL_DAC_MspInit+0xf4>)
 8002922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002924:	4a1d      	ldr	r2, [pc, #116]	@ (800299c <HAL_DAC_MspInit+0xf4>)
 8002926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800292a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800292c:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <HAL_DAC_MspInit+0xf4>)
 800292e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002938:	4b18      	ldr	r3, [pc, #96]	@ (800299c <HAL_DAC_MspInit+0xf4>)
 800293a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293c:	4a17      	ldr	r2, [pc, #92]	@ (800299c <HAL_DAC_MspInit+0xf4>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002944:	4b15      	ldr	r3, [pc, #84]	@ (800299c <HAL_DAC_MspInit+0xf4>)
 8002946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002950:	2340      	movs	r3, #64	@ 0x40
 8002952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002954:	2303      	movs	r3, #3
 8002956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295c:	f107 031c 	add.w	r3, r7, #28
 8002960:	4619      	mov	r1, r3
 8002962:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002966:	f002 fe89 	bl	800567c <HAL_GPIO_Init>
}
 800296a:	e010      	b.n	800298e <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC4)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0c      	ldr	r2, [pc, #48]	@ (80029a4 <HAL_DAC_MspInit+0xfc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d10b      	bne.n	800298e <HAL_DAC_MspInit+0xe6>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8002976:	4b09      	ldr	r3, [pc, #36]	@ (800299c <HAL_DAC_MspInit+0xf4>)
 8002978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297a:	4a08      	ldr	r2, [pc, #32]	@ (800299c <HAL_DAC_MspInit+0xf4>)
 800297c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002982:	4b06      	ldr	r3, [pc, #24]	@ (800299c <HAL_DAC_MspInit+0xf4>)
 8002984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002986:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
}
 800298e:	bf00      	nop
 8002990:	3730      	adds	r7, #48	@ 0x30
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	50000800 	.word	0x50000800
 800299c:	40021000 	.word	0x40021000
 80029a0:	50000c00 	.word	0x50000c00
 80029a4:	50001400 	.word	0x50001400

080029a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b09e      	sub	sp, #120	@ 0x78
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029c0:	f107 0310 	add.w	r3, r7, #16
 80029c4:	2254      	movs	r2, #84	@ 0x54
 80029c6:	2100      	movs	r1, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f00e f890 	bl	8010aee <memset>
  if(hi2c->Instance==I2C3)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a50 <HAL_I2C_MspInit+0xa8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d137      	bne.n	8002a48 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80029d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029dc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80029de:	2300      	movs	r3, #0
 80029e0:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029e2:	f107 0310 	add.w	r3, r7, #16
 80029e6:	4618      	mov	r0, r3
 80029e8:	f006 f8a0 	bl	8008b2c <HAL_RCCEx_PeriphCLKConfig>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80029f2:	f7ff fc87 	bl	8002304 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f6:	4b17      	ldr	r3, [pc, #92]	@ (8002a54 <HAL_I2C_MspInit+0xac>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fa:	4a16      	ldr	r2, [pc, #88]	@ (8002a54 <HAL_I2C_MspInit+0xac>)
 80029fc:	f043 0304 	orr.w	r3, r3, #4
 8002a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a02:	4b14      	ldr	r3, [pc, #80]	@ (8002a54 <HAL_I2C_MspInit+0xac>)
 8002a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a12:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a14:	2312      	movs	r3, #18
 8002a16:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002a20:	2308      	movs	r3, #8
 8002a22:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a24:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a28:	4619      	mov	r1, r3
 8002a2a:	480b      	ldr	r0, [pc, #44]	@ (8002a58 <HAL_I2C_MspInit+0xb0>)
 8002a2c:	f002 fe26 	bl	800567c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a30:	4b08      	ldr	r3, [pc, #32]	@ (8002a54 <HAL_I2C_MspInit+0xac>)
 8002a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a34:	4a07      	ldr	r2, [pc, #28]	@ (8002a54 <HAL_I2C_MspInit+0xac>)
 8002a36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a3c:	4b05      	ldr	r3, [pc, #20]	@ (8002a54 <HAL_I2C_MspInit+0xac>)
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002a48:	bf00      	nop
 8002a4a:	3778      	adds	r7, #120	@ 0x78
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40007800 	.word	0x40007800
 8002a54:	40021000 	.word	0x40021000
 8002a58:	48000800 	.word	0x48000800

08002a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b09e      	sub	sp, #120	@ 0x78
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a74:	f107 0310 	add.w	r3, r7, #16
 8002a78:	2254      	movs	r2, #84	@ 0x54
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f00e f836 	bl	8010aee <memset>
  if(huart->Instance==LPUART1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1f      	ldr	r2, [pc, #124]	@ (8002b04 <HAL_UART_MspInit+0xa8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d136      	bne.n	8002afa <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002a8c:	2320      	movs	r3, #32
 8002a8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a94:	f107 0310 	add.w	r3, r7, #16
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f006 f847 	bl	8008b2c <HAL_RCCEx_PeriphCLKConfig>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002aa4:	f7ff fc2e 	bl	8002304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002aa8:	4b17      	ldr	r3, [pc, #92]	@ (8002b08 <HAL_UART_MspInit+0xac>)
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aac:	4a16      	ldr	r2, [pc, #88]	@ (8002b08 <HAL_UART_MspInit+0xac>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002ab4:	4b14      	ldr	r3, [pc, #80]	@ (8002b08 <HAL_UART_MspInit+0xac>)
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac0:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <HAL_UART_MspInit+0xac>)
 8002ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac4:	4a10      	ldr	r2, [pc, #64]	@ (8002b08 <HAL_UART_MspInit+0xac>)
 8002ac6:	f043 0302 	orr.w	r3, r3, #2
 8002aca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002acc:	4b0e      	ldr	r3, [pc, #56]	@ (8002b08 <HAL_UART_MspInit+0xac>)
 8002ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ad8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002adc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002aea:	2308      	movs	r3, #8
 8002aec:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aee:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002af2:	4619      	mov	r1, r3
 8002af4:	4805      	ldr	r0, [pc, #20]	@ (8002b0c <HAL_UART_MspInit+0xb0>)
 8002af6:	f002 fdc1 	bl	800567c <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8002afa:	bf00      	nop
 8002afc:	3778      	adds	r7, #120	@ 0x78
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40008000 	.word	0x40008000
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	48000400 	.word	0x48000400

08002b10 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08e      	sub	sp, #56	@ 0x38
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a5c      	ldr	r2, [pc, #368]	@ (8002ca0 <HAL_OPAMP_MspInit+0x190>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d119      	bne.n	8002b66 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b32:	4b5c      	ldr	r3, [pc, #368]	@ (8002ca4 <HAL_OPAMP_MspInit+0x194>)
 8002b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b36:	4a5b      	ldr	r2, [pc, #364]	@ (8002ca4 <HAL_OPAMP_MspInit+0x194>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b3e:	4b59      	ldr	r3, [pc, #356]	@ (8002ca4 <HAL_OPAMP_MspInit+0x194>)
 8002b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	623b      	str	r3, [r7, #32]
 8002b48:	6a3b      	ldr	r3, [r7, #32]
    /**OPAMP1 GPIO Configuration
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b4a:	2380      	movs	r3, #128	@ 0x80
 8002b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b60:	f002 fd8c 	bl	800567c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8002b64:	e098      	b.n	8002c98 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP2)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a4f      	ldr	r2, [pc, #316]	@ (8002ca8 <HAL_OPAMP_MspInit+0x198>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d119      	bne.n	8002ba4 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b70:	4b4c      	ldr	r3, [pc, #304]	@ (8002ca4 <HAL_OPAMP_MspInit+0x194>)
 8002b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b74:	4a4b      	ldr	r2, [pc, #300]	@ (8002ca4 <HAL_OPAMP_MspInit+0x194>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b7c:	4b49      	ldr	r3, [pc, #292]	@ (8002ca4 <HAL_OPAMP_MspInit+0x194>)
 8002b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b88:	2380      	movs	r3, #128	@ 0x80
 8002b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b9e:	f002 fd6d 	bl	800567c <HAL_GPIO_Init>
}
 8002ba2:	e079      	b.n	8002c98 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP3)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a40      	ldr	r2, [pc, #256]	@ (8002cac <HAL_OPAMP_MspInit+0x19c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d119      	bne.n	8002be2 <HAL_OPAMP_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bae:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca4 <HAL_OPAMP_MspInit+0x194>)
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb2:	4a3c      	ldr	r2, [pc, #240]	@ (8002ca4 <HAL_OPAMP_MspInit+0x194>)
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bba:	4b3a      	ldr	r3, [pc, #232]	@ (8002ca4 <HAL_OPAMP_MspInit+0x194>)
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002bc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4835      	ldr	r0, [pc, #212]	@ (8002cb0 <HAL_OPAMP_MspInit+0x1a0>)
 8002bdc:	f002 fd4e 	bl	800567c <HAL_GPIO_Init>
}
 8002be0:	e05a      	b.n	8002c98 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP4)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a33      	ldr	r2, [pc, #204]	@ (8002cb4 <HAL_OPAMP_MspInit+0x1a4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d119      	bne.n	8002c20 <HAL_OPAMP_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bec:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <HAL_OPAMP_MspInit+0x194>)
 8002bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf0:	4a2c      	ldr	r2, [pc, #176]	@ (8002ca4 <HAL_OPAMP_MspInit+0x194>)
 8002bf2:	f043 0302 	orr.w	r3, r3, #2
 8002bf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bf8:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca4 <HAL_OPAMP_MspInit+0x194>)
 8002bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c16:	4619      	mov	r1, r3
 8002c18:	4825      	ldr	r0, [pc, #148]	@ (8002cb0 <HAL_OPAMP_MspInit+0x1a0>)
 8002c1a:	f002 fd2f 	bl	800567c <HAL_GPIO_Init>
}
 8002c1e:	e03b      	b.n	8002c98 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP5)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a24      	ldr	r2, [pc, #144]	@ (8002cb8 <HAL_OPAMP_MspInit+0x1a8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d118      	bne.n	8002c5c <HAL_OPAMP_MspInit+0x14c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca4 <HAL_OPAMP_MspInit+0x194>)
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca4 <HAL_OPAMP_MspInit+0x194>)
 8002c30:	f043 0304 	orr.w	r3, r3, #4
 8002c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c36:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca4 <HAL_OPAMP_MspInit+0x194>)
 8002c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c42:	2308      	movs	r3, #8
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c46:	2303      	movs	r3, #3
 8002c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c52:	4619      	mov	r1, r3
 8002c54:	4819      	ldr	r0, [pc, #100]	@ (8002cbc <HAL_OPAMP_MspInit+0x1ac>)
 8002c56:	f002 fd11 	bl	800567c <HAL_GPIO_Init>
}
 8002c5a:	e01d      	b.n	8002c98 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP6)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a17      	ldr	r2, [pc, #92]	@ (8002cc0 <HAL_OPAMP_MspInit+0x1b0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d118      	bne.n	8002c98 <HAL_OPAMP_MspInit+0x188>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c66:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca4 <HAL_OPAMP_MspInit+0x194>)
 8002c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ca4 <HAL_OPAMP_MspInit+0x194>)
 8002c6c:	f043 0302 	orr.w	r3, r3, #2
 8002c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c72:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca4 <HAL_OPAMP_MspInit+0x194>)
 8002c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002c7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c84:	2303      	movs	r3, #3
 8002c86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c90:	4619      	mov	r1, r3
 8002c92:	4807      	ldr	r0, [pc, #28]	@ (8002cb0 <HAL_OPAMP_MspInit+0x1a0>)
 8002c94:	f002 fcf2 	bl	800567c <HAL_GPIO_Init>
}
 8002c98:	bf00      	nop
 8002c9a:	3738      	adds	r7, #56	@ 0x38
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40010300 	.word	0x40010300
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40010304 	.word	0x40010304
 8002cac:	40010308 	.word	0x40010308
 8002cb0:	48000400 	.word	0x48000400
 8002cb4:	4001030c 	.word	0x4001030c
 8002cb8:	40010310 	.word	0x40010310
 8002cbc:	48000800 	.word	0x48000800
 8002cc0:	40010314 	.word	0x40010314

08002cc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	@ 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a2c      	ldr	r2, [pc, #176]	@ (8002d94 <HAL_SPI_MspInit+0xd0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d151      	bne.n	8002d8a <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8002d98 <HAL_SPI_MspInit+0xd4>)
 8002ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cea:	4a2b      	ldr	r2, [pc, #172]	@ (8002d98 <HAL_SPI_MspInit+0xd4>)
 8002cec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cf2:	4b29      	ldr	r3, [pc, #164]	@ (8002d98 <HAL_SPI_MspInit+0xd4>)
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfe:	4b26      	ldr	r3, [pc, #152]	@ (8002d98 <HAL_SPI_MspInit+0xd4>)
 8002d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d02:	4a25      	ldr	r2, [pc, #148]	@ (8002d98 <HAL_SPI_MspInit+0xd4>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d0a:	4b23      	ldr	r3, [pc, #140]	@ (8002d98 <HAL_SPI_MspInit+0xd4>)
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002d16:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d24:	2300      	movs	r3, #0
 8002d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d28:	2306      	movs	r3, #6
 8002d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d2c:	f107 0314 	add.w	r3, r7, #20
 8002d30:	4619      	mov	r1, r3
 8002d32:	481a      	ldr	r0, [pc, #104]	@ (8002d9c <HAL_SPI_MspInit+0xd8>)
 8002d34:	f002 fca2 	bl	800567c <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel3;
 8002d38:	4b19      	ldr	r3, [pc, #100]	@ (8002da0 <HAL_SPI_MspInit+0xdc>)
 8002d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8002da4 <HAL_SPI_MspInit+0xe0>)
 8002d3c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8002d3e:	4b18      	ldr	r3, [pc, #96]	@ (8002da0 <HAL_SPI_MspInit+0xdc>)
 8002d40:	220f      	movs	r2, #15
 8002d42:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d44:	4b16      	ldr	r3, [pc, #88]	@ (8002da0 <HAL_SPI_MspInit+0xdc>)
 8002d46:	2210      	movs	r2, #16
 8002d48:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d4a:	4b15      	ldr	r3, [pc, #84]	@ (8002da0 <HAL_SPI_MspInit+0xdc>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d50:	4b13      	ldr	r3, [pc, #76]	@ (8002da0 <HAL_SPI_MspInit+0xdc>)
 8002d52:	2280      	movs	r2, #128	@ 0x80
 8002d54:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d56:	4b12      	ldr	r3, [pc, #72]	@ (8002da0 <HAL_SPI_MspInit+0xdc>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d5c:	4b10      	ldr	r3, [pc, #64]	@ (8002da0 <HAL_SPI_MspInit+0xdc>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8002d62:	4b0f      	ldr	r3, [pc, #60]	@ (8002da0 <HAL_SPI_MspInit+0xdc>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d68:	4b0d      	ldr	r3, [pc, #52]	@ (8002da0 <HAL_SPI_MspInit+0xdc>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002d6e:	480c      	ldr	r0, [pc, #48]	@ (8002da0 <HAL_SPI_MspInit+0xdc>)
 8002d70:	f002 fa12 	bl	8005198 <HAL_DMA_Init>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8002d7a:	f7ff fac3 	bl	8002304 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a07      	ldr	r2, [pc, #28]	@ (8002da0 <HAL_SPI_MspInit+0xdc>)
 8002d82:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d84:	4a06      	ldr	r2, [pc, #24]	@ (8002da0 <HAL_SPI_MspInit+0xdc>)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002d8a:	bf00      	nop
 8002d8c:	3728      	adds	r7, #40	@ 0x28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40003c00 	.word	0x40003c00
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	48000800 	.word	0x48000800
 8002da0:	20000720 	.word	0x20000720
 8002da4:	40020030 	.word	0x40020030

08002da8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b090      	sub	sp, #64	@ 0x40
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a6a      	ldr	r2, [pc, #424]	@ (8002f70 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d128      	bne.n	8002e1c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002dca:	4b6a      	ldr	r3, [pc, #424]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dce:	4a69      	ldr	r2, [pc, #420]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002dd0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002dd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dd6:	4b67      	ldr	r3, [pc, #412]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de2:	4b64      	ldr	r3, [pc, #400]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de6:	4a63      	ldr	r2, [pc, #396]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002de8:	f043 0304 	orr.w	r3, r3, #4
 8002dec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dee:	4b61      	ldr	r3, [pc, #388]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e02:	2301      	movs	r3, #1
 8002e04:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e06:	2303      	movs	r3, #3
 8002e08:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e12:	4619      	mov	r1, r3
 8002e14:	4858      	ldr	r0, [pc, #352]	@ (8002f78 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002e16:	f002 fc31 	bl	800567c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8002e1a:	e0a4      	b.n	8002f66 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM3)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a56      	ldr	r2, [pc, #344]	@ (8002f7c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d128      	bne.n	8002e78 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e26:	4b53      	ldr	r3, [pc, #332]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2a:	4a52      	ldr	r2, [pc, #328]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002e2c:	f043 0302 	orr.w	r3, r3, #2
 8002e30:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e32:	4b50      	ldr	r3, [pc, #320]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	623b      	str	r3, [r7, #32]
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e3e:	4b4d      	ldr	r3, [pc, #308]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e42:	4a4c      	ldr	r2, [pc, #304]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002e44:	f043 0304 	orr.w	r3, r3, #4
 8002e48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	61fb      	str	r3, [r7, #28]
 8002e54:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e56:	23c0      	movs	r3, #192	@ 0xc0
 8002e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e62:	2303      	movs	r3, #3
 8002e64:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e66:	2302      	movs	r3, #2
 8002e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4841      	ldr	r0, [pc, #260]	@ (8002f78 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002e72:	f002 fc03 	bl	800567c <HAL_GPIO_Init>
}
 8002e76:	e076      	b.n	8002f66 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM4)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a40      	ldr	r2, [pc, #256]	@ (8002f80 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d128      	bne.n	8002ed4 <HAL_TIM_Encoder_MspInit+0x12c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e82:	4b3c      	ldr	r3, [pc, #240]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e86:	4a3b      	ldr	r2, [pc, #236]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e8e:	4b39      	ldr	r3, [pc, #228]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	61bb      	str	r3, [r7, #24]
 8002e98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9a:	4b36      	ldr	r3, [pc, #216]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e9e:	4a35      	ldr	r2, [pc, #212]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002ea0:	f043 0302 	orr.w	r3, r3, #2
 8002ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ea6:	4b33      	ldr	r3, [pc, #204]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eb2:	23c0      	movs	r3, #192	@ 0xc0
 8002eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eca:	4619      	mov	r1, r3
 8002ecc:	482d      	ldr	r0, [pc, #180]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002ece:	f002 fbd5 	bl	800567c <HAL_GPIO_Init>
}
 8002ed2:	e048      	b.n	8002f66 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM20)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a2b      	ldr	r2, [pc, #172]	@ (8002f88 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d143      	bne.n	8002f66 <HAL_TIM_Encoder_MspInit+0x1be>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8002ede:	4b25      	ldr	r3, [pc, #148]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee2:	4a24      	ldr	r2, [pc, #144]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002ee4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ee8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002eea:	4b22      	ldr	r3, [pc, #136]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efa:	4a1e      	ldr	r2, [pc, #120]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002efc:	f043 0304 	orr.w	r3, r3, #4
 8002f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f02:	4b1c      	ldr	r3, [pc, #112]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0e:	4b19      	ldr	r3, [pc, #100]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f12:	4a18      	ldr	r2, [pc, #96]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002f14:	f043 0302 	orr.w	r3, r3, #2
 8002f18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f1a:	4b16      	ldr	r3, [pc, #88]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f26:	2304      	movs	r3, #4
 8002f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f32:	2303      	movs	r3, #3
 8002f34:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8002f36:	2306      	movs	r3, #6
 8002f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f3e:	4619      	mov	r1, r3
 8002f40:	480d      	ldr	r0, [pc, #52]	@ (8002f78 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002f42:	f002 fb9b 	bl	800567c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f46:	2304      	movs	r3, #4
 8002f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f52:	2303      	movs	r3, #3
 8002f54:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8002f56:	2303      	movs	r3, #3
 8002f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4808      	ldr	r0, [pc, #32]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002f62:	f002 fb8b 	bl	800567c <HAL_GPIO_Init>
}
 8002f66:	bf00      	nop
 8002f68:	3740      	adds	r7, #64	@ 0x40
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	40021000 	.word	0x40021000
 8002f78:	48000800 	.word	0x48000800
 8002f7c:	40000400 	.word	0x40000400
 8002f80:	40000800 	.word	0x40000800
 8002f84:	48000400 	.word	0x48000400
 8002f88:	40015000 	.word	0x40015000

08002f8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a3d      	ldr	r2, [pc, #244]	@ (8003090 <HAL_TIM_Base_MspInit+0x104>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d137      	bne.n	800300e <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f9e:	4b3d      	ldr	r3, [pc, #244]	@ (8003094 <HAL_TIM_Base_MspInit+0x108>)
 8002fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa2:	4a3c      	ldr	r2, [pc, #240]	@ (8003094 <HAL_TIM_Base_MspInit+0x108>)
 8002fa4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002fa8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002faa:	4b3a      	ldr	r3, [pc, #232]	@ (8003094 <HAL_TIM_Base_MspInit+0x108>)
 8002fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* TIM8_CH3 Init */
    hdma_tim8_ch3.Instance = DMA1_Channel1;
 8002fb6:	4b38      	ldr	r3, [pc, #224]	@ (8003098 <HAL_TIM_Base_MspInit+0x10c>)
 8002fb8:	4a38      	ldr	r2, [pc, #224]	@ (800309c <HAL_TIM_Base_MspInit+0x110>)
 8002fba:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Request = DMA_REQUEST_TIM8_CH3;
 8002fbc:	4b36      	ldr	r3, [pc, #216]	@ (8003098 <HAL_TIM_Base_MspInit+0x10c>)
 8002fbe:	2233      	movs	r2, #51	@ 0x33
 8002fc0:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fc2:	4b35      	ldr	r3, [pc, #212]	@ (8003098 <HAL_TIM_Base_MspInit+0x10c>)
 8002fc4:	2210      	movs	r2, #16
 8002fc6:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fc8:	4b33      	ldr	r3, [pc, #204]	@ (8003098 <HAL_TIM_Base_MspInit+0x10c>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002fce:	4b32      	ldr	r3, [pc, #200]	@ (8003098 <HAL_TIM_Base_MspInit+0x10c>)
 8002fd0:	2280      	movs	r2, #128	@ 0x80
 8002fd2:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fd4:	4b30      	ldr	r3, [pc, #192]	@ (8003098 <HAL_TIM_Base_MspInit+0x10c>)
 8002fd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fda:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fdc:	4b2e      	ldr	r3, [pc, #184]	@ (8003098 <HAL_TIM_Base_MspInit+0x10c>)
 8002fde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fe2:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_NORMAL;
 8002fe4:	4b2c      	ldr	r3, [pc, #176]	@ (8003098 <HAL_TIM_Base_MspInit+0x10c>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002fea:	4b2b      	ldr	r3, [pc, #172]	@ (8003098 <HAL_TIM_Base_MspInit+0x10c>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 8002ff0:	4829      	ldr	r0, [pc, #164]	@ (8003098 <HAL_TIM_Base_MspInit+0x10c>)
 8002ff2:	f002 f8d1 	bl	8005198 <HAL_DMA_Init>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8002ffc:	f7ff f982 	bl	8002304 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a25      	ldr	r2, [pc, #148]	@ (8003098 <HAL_TIM_Base_MspInit+0x10c>)
 8003004:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003006:	4a24      	ldr	r2, [pc, #144]	@ (8003098 <HAL_TIM_Base_MspInit+0x10c>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800300c:	e03b      	b.n	8003086 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM15)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a23      	ldr	r2, [pc, #140]	@ (80030a0 <HAL_TIM_Base_MspInit+0x114>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d136      	bne.n	8003086 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003018:	4b1e      	ldr	r3, [pc, #120]	@ (8003094 <HAL_TIM_Base_MspInit+0x108>)
 800301a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800301c:	4a1d      	ldr	r2, [pc, #116]	@ (8003094 <HAL_TIM_Base_MspInit+0x108>)
 800301e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003022:	6613      	str	r3, [r2, #96]	@ 0x60
 8003024:	4b1b      	ldr	r3, [pc, #108]	@ (8003094 <HAL_TIM_Base_MspInit+0x108>)
 8003026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
    hdma_tim15_ch1.Instance = DMA1_Channel2;
 8003030:	4b1c      	ldr	r3, [pc, #112]	@ (80030a4 <HAL_TIM_Base_MspInit+0x118>)
 8003032:	4a1d      	ldr	r2, [pc, #116]	@ (80030a8 <HAL_TIM_Base_MspInit+0x11c>)
 8003034:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1.Init.Request = DMA_REQUEST_TIM15_CH1;
 8003036:	4b1b      	ldr	r3, [pc, #108]	@ (80030a4 <HAL_TIM_Base_MspInit+0x118>)
 8003038:	224e      	movs	r2, #78	@ 0x4e
 800303a:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800303c:	4b19      	ldr	r3, [pc, #100]	@ (80030a4 <HAL_TIM_Base_MspInit+0x118>)
 800303e:	2210      	movs	r2, #16
 8003040:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003042:	4b18      	ldr	r3, [pc, #96]	@ (80030a4 <HAL_TIM_Base_MspInit+0x118>)
 8003044:	2200      	movs	r2, #0
 8003046:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003048:	4b16      	ldr	r3, [pc, #88]	@ (80030a4 <HAL_TIM_Base_MspInit+0x118>)
 800304a:	2280      	movs	r2, #128	@ 0x80
 800304c:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800304e:	4b15      	ldr	r3, [pc, #84]	@ (80030a4 <HAL_TIM_Base_MspInit+0x118>)
 8003050:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003054:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003056:	4b13      	ldr	r3, [pc, #76]	@ (80030a4 <HAL_TIM_Base_MspInit+0x118>)
 8003058:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800305c:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1.Init.Mode = DMA_NORMAL;
 800305e:	4b11      	ldr	r3, [pc, #68]	@ (80030a4 <HAL_TIM_Base_MspInit+0x118>)
 8003060:	2200      	movs	r2, #0
 8003062:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003064:	4b0f      	ldr	r3, [pc, #60]	@ (80030a4 <HAL_TIM_Base_MspInit+0x118>)
 8003066:	2200      	movs	r2, #0
 8003068:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1) != HAL_OK)
 800306a:	480e      	ldr	r0, [pc, #56]	@ (80030a4 <HAL_TIM_Base_MspInit+0x118>)
 800306c:	f002 f894 	bl	8005198 <HAL_DMA_Init>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_TIM_Base_MspInit+0xee>
      Error_Handler();
 8003076:	f7ff f945 	bl	8002304 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a09      	ldr	r2, [pc, #36]	@ (80030a4 <HAL_TIM_Base_MspInit+0x118>)
 800307e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003080:	4a08      	ldr	r2, [pc, #32]	@ (80030a4 <HAL_TIM_Base_MspInit+0x118>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40013400 	.word	0x40013400
 8003094:	40021000 	.word	0x40021000
 8003098:	20000948 	.word	0x20000948
 800309c:	40020008 	.word	0x40020008
 80030a0:	40014000 	.word	0x40014000
 80030a4:	200009a8 	.word	0x200009a8
 80030a8:	4002001c 	.word	0x4002001c

080030ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	@ 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a32      	ldr	r2, [pc, #200]	@ (8003194 <HAL_TIM_MspPostInit+0xe8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d13b      	bne.n	8003146 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ce:	4b32      	ldr	r3, [pc, #200]	@ (8003198 <HAL_TIM_MspPostInit+0xec>)
 80030d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d2:	4a31      	ldr	r2, [pc, #196]	@ (8003198 <HAL_TIM_MspPostInit+0xec>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030da:	4b2f      	ldr	r3, [pc, #188]	@ (8003198 <HAL_TIM_MspPostInit+0xec>)
 80030dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003198 <HAL_TIM_MspPostInit+0xec>)
 80030e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ea:	4a2b      	ldr	r2, [pc, #172]	@ (8003198 <HAL_TIM_MspPostInit+0xec>)
 80030ec:	f043 0302 	orr.w	r3, r3, #2
 80030f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030f2:	4b29      	ldr	r3, [pc, #164]	@ (8003198 <HAL_TIM_MspPostInit+0xec>)
 80030f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA15     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80030fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003104:	2302      	movs	r3, #2
 8003106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003108:	2302      	movs	r3, #2
 800310a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800310c:	2303      	movs	r3, #3
 800310e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8003110:	2302      	movs	r3, #2
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003114:	f107 0314 	add.w	r3, r7, #20
 8003118:	4619      	mov	r1, r3
 800311a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800311e:	f002 faad 	bl	800567c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003122:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003128:	2302      	movs	r3, #2
 800312a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800312c:	2302      	movs	r3, #2
 800312e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003130:	2303      	movs	r3, #3
 8003132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8003134:	230a      	movs	r3, #10
 8003136:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003138:	f107 0314 	add.w	r3, r7, #20
 800313c:	4619      	mov	r1, r3
 800313e:	4817      	ldr	r0, [pc, #92]	@ (800319c <HAL_TIM_MspPostInit+0xf0>)
 8003140:	f002 fa9c 	bl	800567c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003144:	e021      	b.n	800318a <HAL_TIM_MspPostInit+0xde>
  else if(htim->Instance==TIM15)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a15      	ldr	r2, [pc, #84]	@ (80031a0 <HAL_TIM_MspPostInit+0xf4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d11c      	bne.n	800318a <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003150:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <HAL_TIM_MspPostInit+0xec>)
 8003152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003154:	4a10      	ldr	r2, [pc, #64]	@ (8003198 <HAL_TIM_MspPostInit+0xec>)
 8003156:	f043 0302 	orr.w	r3, r3, #2
 800315a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800315c:	4b0e      	ldr	r3, [pc, #56]	@ (8003198 <HAL_TIM_MspPostInit+0xec>)
 800315e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003168:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800316c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316e:	2302      	movs	r3, #2
 8003170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003172:	2301      	movs	r3, #1
 8003174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003176:	2303      	movs	r3, #3
 8003178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 800317a:	2301      	movs	r3, #1
 800317c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317e:	f107 0314 	add.w	r3, r7, #20
 8003182:	4619      	mov	r1, r3
 8003184:	4805      	ldr	r0, [pc, #20]	@ (800319c <HAL_TIM_MspPostInit+0xf0>)
 8003186:	f002 fa79 	bl	800567c <HAL_GPIO_Init>
}
 800318a:	bf00      	nop
 800318c:	3728      	adds	r7, #40	@ 0x28
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40013400 	.word	0x40013400
 8003198:	40021000 	.word	0x40021000
 800319c:	48000400 	.word	0x48000400
 80031a0:	40014000 	.word	0x40014000

080031a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80031a8:	f005 fc5e 	bl	8008a68 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031ac:	bf00      	nop
 80031ae:	e7fd      	b.n	80031ac <NMI_Handler+0x8>

080031b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031b4:	bf00      	nop
 80031b6:	e7fd      	b.n	80031b4 <HardFault_Handler+0x4>

080031b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031bc:	bf00      	nop
 80031be:	e7fd      	b.n	80031bc <MemManage_Handler+0x4>

080031c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031c4:	bf00      	nop
 80031c6:	e7fd      	b.n	80031c4 <BusFault_Handler+0x4>

080031c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <UsageFault_Handler+0x4>

080031d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031de:	b480      	push	{r7}
 80031e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031fe:	f000 f9bf 	bl	8003580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}

08003206 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800320a:	2001      	movs	r0, #1
 800320c:	f002 fbd0 	bl	80059b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003210:	bf00      	nop
 8003212:	bd80      	pop	{r7, pc}

08003214 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003218:	2002      	movs	r0, #2
 800321a:	f002 fbc9 	bl	80059b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}

08003222 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003226:	2004      	movs	r0, #4
 8003228:	f002 fbc2 	bl	80059b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800322c:	bf00      	nop
 800322e:	bd80      	pop	{r7, pc}

08003230 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003234:	2008      	movs	r0, #8
 8003236:	f002 fbbb 	bl	80059b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}

0800323e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003242:	2010      	movs	r0, #16
 8003244:	f002 fbb4 	bl	80059b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003248:	bf00      	nop
 800324a:	bd80      	pop	{r7, pc}

0800324c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 8003250:	4802      	ldr	r0, [pc, #8]	@ (800325c <DMA1_Channel1_IRQHandler+0x10>)
 8003252:	f002 f8c4 	bl	80053de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003256:	bf00      	nop
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000948 	.word	0x20000948

08003260 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1);
 8003264:	4802      	ldr	r0, [pc, #8]	@ (8003270 <DMA1_Channel2_IRQHandler+0x10>)
 8003266:	f002 f8ba 	bl	80053de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	200009a8 	.word	0x200009a8

08003274 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003278:	4802      	ldr	r0, [pc, #8]	@ (8003284 <DMA1_Channel3_IRQHandler+0x10>)
 800327a:	f002 f8b0 	bl	80053de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000720 	.word	0x20000720

08003288 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800328c:	4802      	ldr	r0, [pc, #8]	@ (8003298 <USB_LP_IRQHandler+0x10>)
 800328e:	f003 fa2d 	bl	80066ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20002364 	.word	0x20002364

0800329c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80032a0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80032a4:	f002 fb84 	bl	80059b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80032a8:	bf00      	nop
 80032aa:	bd80      	pop	{r7, pc}

080032ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	  FT6336_GetTouchPoint(&TouchPoints);
 80032b0:	4808      	ldr	r0, [pc, #32]	@ (80032d4 <EXTI15_10_IRQHandler+0x28>)
 80032b2:	f7fd ffcd 	bl	8001250 <FT6336_GetTouchPoint>

	  ST7789_DrawPixel(TouchPoints.point1_x, TouchPoints.point1_y, 0xffffff);
 80032b6:	4b07      	ldr	r3, [pc, #28]	@ (80032d4 <EXTI15_10_IRQHandler+0x28>)
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	4a06      	ldr	r2, [pc, #24]	@ (80032d4 <EXTI15_10_IRQHandler+0x28>)
 80032bc:	8851      	ldrh	r1, [r2, #2]
 80032be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff f9f0 	bl	80026a8 <ST7789_DrawPixel>


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80032c8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80032cc:	f002 fb70 	bl	80059b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80032d0:	bf00      	nop
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20000374 	.word	0x20000374

080032d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return 1;
 80032dc:	2301      	movs	r3, #1
}
 80032de:	4618      	mov	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <_kill>:

int _kill(int pid, int sig)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032f2:	f00d fc4f 	bl	8010b94 <__errno>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2216      	movs	r2, #22
 80032fa:	601a      	str	r2, [r3, #0]
  return -1;
 80032fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <_exit>:

void _exit (int status)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003310:	f04f 31ff 	mov.w	r1, #4294967295
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ffe7 	bl	80032e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800331a:	bf00      	nop
 800331c:	e7fd      	b.n	800331a <_exit+0x12>

0800331e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b086      	sub	sp, #24
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	e00a      	b.n	8003346 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003330:	f3af 8000 	nop.w
 8003334:	4601      	mov	r1, r0
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	60ba      	str	r2, [r7, #8]
 800333c:	b2ca      	uxtb	r2, r1
 800333e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	3301      	adds	r3, #1
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	429a      	cmp	r2, r3
 800334c:	dbf0      	blt.n	8003330 <_read+0x12>
  }

  return len;
 800334e:	687b      	ldr	r3, [r7, #4]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	e009      	b.n	800337e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	60ba      	str	r2, [r7, #8]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	3301      	adds	r3, #1
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	429a      	cmp	r2, r3
 8003384:	dbf1      	blt.n	800336a <_write+0x12>
  }
  return len;
 8003386:	687b      	ldr	r3, [r7, #4]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <_close>:

int _close(int file)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003398:	f04f 33ff 	mov.w	r3, #4294967295
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033b8:	605a      	str	r2, [r3, #4]
  return 0;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <_isatty>:

int _isatty(int file)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033d0:	2301      	movs	r3, #1
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033de:	b480      	push	{r7}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003400:	4a14      	ldr	r2, [pc, #80]	@ (8003454 <_sbrk+0x5c>)
 8003402:	4b15      	ldr	r3, [pc, #84]	@ (8003458 <_sbrk+0x60>)
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800340c:	4b13      	ldr	r3, [pc, #76]	@ (800345c <_sbrk+0x64>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d102      	bne.n	800341a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003414:	4b11      	ldr	r3, [pc, #68]	@ (800345c <_sbrk+0x64>)
 8003416:	4a12      	ldr	r2, [pc, #72]	@ (8003460 <_sbrk+0x68>)
 8003418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800341a:	4b10      	ldr	r3, [pc, #64]	@ (800345c <_sbrk+0x64>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4413      	add	r3, r2
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	429a      	cmp	r2, r3
 8003426:	d207      	bcs.n	8003438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003428:	f00d fbb4 	bl	8010b94 <__errno>
 800342c:	4603      	mov	r3, r0
 800342e:	220c      	movs	r2, #12
 8003430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003432:	f04f 33ff 	mov.w	r3, #4294967295
 8003436:	e009      	b.n	800344c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003438:	4b08      	ldr	r3, [pc, #32]	@ (800345c <_sbrk+0x64>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800343e:	4b07      	ldr	r3, [pc, #28]	@ (800345c <_sbrk+0x64>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4413      	add	r3, r2
 8003446:	4a05      	ldr	r2, [pc, #20]	@ (800345c <_sbrk+0x64>)
 8003448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800344a:	68fb      	ldr	r3, [r7, #12]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20020000 	.word	0x20020000
 8003458:	00000400 	.word	0x00000400
 800345c:	20001688 	.word	0x20001688
 8003460:	200029b0 	.word	0x200029b0

08003464 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003468:	4b06      	ldr	r3, [pc, #24]	@ (8003484 <SystemInit+0x20>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346e:	4a05      	ldr	r2, [pc, #20]	@ (8003484 <SystemInit+0x20>)
 8003470:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003474:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003478:	bf00      	nop
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003488:	480d      	ldr	r0, [pc, #52]	@ (80034c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800348a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800348c:	f7ff ffea 	bl	8003464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003490:	480c      	ldr	r0, [pc, #48]	@ (80034c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003492:	490d      	ldr	r1, [pc, #52]	@ (80034c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003494:	4a0d      	ldr	r2, [pc, #52]	@ (80034cc <LoopForever+0xe>)
  movs r3, #0
 8003496:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003498:	e002      	b.n	80034a0 <LoopCopyDataInit>

0800349a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800349a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800349c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800349e:	3304      	adds	r3, #4

080034a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034a4:	d3f9      	bcc.n	800349a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034a6:	4a0a      	ldr	r2, [pc, #40]	@ (80034d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034a8:	4c0a      	ldr	r4, [pc, #40]	@ (80034d4 <LoopForever+0x16>)
  movs r3, #0
 80034aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034ac:	e001      	b.n	80034b2 <LoopFillZerobss>

080034ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034b0:	3204      	adds	r2, #4

080034b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034b4:	d3fb      	bcc.n	80034ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034b6:	f00d fb73 	bl	8010ba0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80034ba:	f7fd ff37 	bl	800132c <main>

080034be <LoopForever>:

LoopForever:
    b LoopForever
 80034be:	e7fe      	b.n	80034be <LoopForever>
  ldr   r0, =_estack
 80034c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034c8:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 80034cc:	08014818 	.word	0x08014818
  ldr r2, =_sbss
 80034d0:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 80034d4:	200029ac 	.word	0x200029ac

080034d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034d8:	e7fe      	b.n	80034d8 <ADC1_2_IRQHandler>

080034da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034e4:	2003      	movs	r0, #3
 80034e6:	f001 fc3b 	bl	8004d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034ea:	200f      	movs	r0, #15
 80034ec:	f000 f80e 	bl	800350c <HAL_InitTick>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	71fb      	strb	r3, [r7, #7]
 80034fa:	e001      	b.n	8003500 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034fc:	f7ff f900 	bl	8002700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003500:	79fb      	ldrb	r3, [r7, #7]

}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003518:	4b16      	ldr	r3, [pc, #88]	@ (8003574 <HAL_InitTick+0x68>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d022      	beq.n	8003566 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003520:	4b15      	ldr	r3, [pc, #84]	@ (8003578 <HAL_InitTick+0x6c>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b13      	ldr	r3, [pc, #76]	@ (8003574 <HAL_InitTick+0x68>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800352c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003530:	fbb2 f3f3 	udiv	r3, r2, r3
 8003534:	4618      	mov	r0, r3
 8003536:	f001 fc46 	bl	8004dc6 <HAL_SYSTICK_Config>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10f      	bne.n	8003560 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b0f      	cmp	r3, #15
 8003544:	d809      	bhi.n	800355a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003546:	2200      	movs	r2, #0
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	f04f 30ff 	mov.w	r0, #4294967295
 800354e:	f001 fc12 	bl	8004d76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003552:	4a0a      	ldr	r2, [pc, #40]	@ (800357c <HAL_InitTick+0x70>)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	e007      	b.n	800356a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]
 800355e:	e004      	b.n	800356a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
 8003564:	e001      	b.n	800356a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800356a:	7bfb      	ldrb	r3, [r7, #15]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	2000000c 	.word	0x2000000c
 8003578:	20000004 	.word	0x20000004
 800357c:	20000008 	.word	0x20000008

08003580 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003584:	4b05      	ldr	r3, [pc, #20]	@ (800359c <HAL_IncTick+0x1c>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4b05      	ldr	r3, [pc, #20]	@ (80035a0 <HAL_IncTick+0x20>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4413      	add	r3, r2
 800358e:	4a03      	ldr	r2, [pc, #12]	@ (800359c <HAL_IncTick+0x1c>)
 8003590:	6013      	str	r3, [r2, #0]
}
 8003592:	bf00      	nop
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	2000168c 	.word	0x2000168c
 80035a0:	2000000c 	.word	0x2000000c

080035a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  return uwTick;
 80035a8:	4b03      	ldr	r3, [pc, #12]	@ (80035b8 <HAL_GetTick+0x14>)
 80035aa:	681b      	ldr	r3, [r3, #0]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	2000168c 	.word	0x2000168c

080035bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035c4:	f7ff ffee 	bl	80035a4 <HAL_GetTick>
 80035c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d004      	beq.n	80035e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80035d6:	4b09      	ldr	r3, [pc, #36]	@ (80035fc <HAL_Delay+0x40>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4413      	add	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035e0:	bf00      	nop
 80035e2:	f7ff ffdf 	bl	80035a4 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d8f7      	bhi.n	80035e2 <HAL_Delay+0x26>
  {
  }
}
 80035f2:	bf00      	nop
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	2000000c 	.word	0x2000000c

08003600 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8003608:	4b06      	ldr	r3, [pc, #24]	@ (8003624 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f023 0202 	bic.w	r2, r3, #2
 8003610:	4904      	ldr	r1, [pc, #16]	@ (8003624 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	40010030 	.word	0x40010030

08003628 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800362c:	4b05      	ldr	r3, [pc, #20]	@ (8003644 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a04      	ldr	r2, [pc, #16]	@ (8003644 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8003632:	f023 0301 	bic.w	r3, r3, #1
 8003636:	6013      	str	r3, [r2, #0]
}
 8003638:	bf00      	nop
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40010030 	.word	0x40010030

08003648 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	609a      	str	r2, [r3, #8]
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	609a      	str	r2, [r3, #8]
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	3360      	adds	r3, #96	@ 0x60
 80036c2:	461a      	mov	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4b08      	ldr	r3, [pc, #32]	@ (80036f4 <LL_ADC_SetOffset+0x44>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	4313      	orrs	r3, r2
 80036e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80036e8:	bf00      	nop
 80036ea:	371c      	adds	r7, #28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	03fff000 	.word	0x03fff000

080036f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3360      	adds	r3, #96	@ 0x60
 8003706:	461a      	mov	r2, r3
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3360      	adds	r3, #96	@ 0x60
 8003734:	461a      	mov	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	431a      	orrs	r2, r3
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800375a:	b480      	push	{r7}
 800375c:	b087      	sub	sp, #28
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3360      	adds	r3, #96	@ 0x60
 800376a:	461a      	mov	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	431a      	orrs	r2, r3
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003784:	bf00      	nop
 8003786:	371c      	adds	r7, #28
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	3360      	adds	r3, #96	@ 0x60
 80037a0:	461a      	mov	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	431a      	orrs	r2, r3
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80037ba:	bf00      	nop
 80037bc:	371c      	adds	r7, #28
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	615a      	str	r2, [r3, #20]
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	3330      	adds	r3, #48	@ 0x30
 80037fc:	461a      	mov	r2, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	0a1b      	lsrs	r3, r3, #8
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	f003 030c 	and.w	r3, r3, #12
 8003808:	4413      	add	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	211f      	movs	r1, #31
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	401a      	ands	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	0e9b      	lsrs	r3, r3, #26
 8003824:	f003 011f 	and.w	r1, r3, #31
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	fa01 f303 	lsl.w	r3, r1, r3
 8003832:	431a      	orrs	r2, r3
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003838:	bf00      	nop
 800383a:	371c      	adds	r7, #28
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	3314      	adds	r3, #20
 8003854:	461a      	mov	r2, r3
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	0e5b      	lsrs	r3, r3, #25
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	4413      	add	r3, r2
 8003862:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	0d1b      	lsrs	r3, r3, #20
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	2107      	movs	r1, #7
 8003872:	fa01 f303 	lsl.w	r3, r1, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	401a      	ands	r2, r3
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	0d1b      	lsrs	r3, r3, #20
 800387e:	f003 031f 	and.w	r3, r3, #31
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	fa01 f303 	lsl.w	r3, r1, r3
 8003888:	431a      	orrs	r2, r3
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800388e:	bf00      	nop
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
	...

0800389c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b4:	43db      	mvns	r3, r3
 80038b6:	401a      	ands	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f003 0318 	and.w	r3, r3, #24
 80038be:	4908      	ldr	r1, [pc, #32]	@ (80038e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80038c0:	40d9      	lsrs	r1, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	400b      	ands	r3, r1
 80038c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ca:	431a      	orrs	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80038d2:	bf00      	nop
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	0007ffff 	.word	0x0007ffff

080038e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80038f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6093      	str	r3, [r2, #8]
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800391c:	d101      	bne.n	8003922 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003940:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003944:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003968:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800396c:	d101      	bne.n	8003972 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <LL_ADC_IsEnabled+0x18>
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <LL_ADC_IsEnabled+0x1a>
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d101      	bne.n	80039be <LL_ADC_REG_IsConversionOngoing+0x18>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d101      	bne.n	80039e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039f4:	b590      	push	{r4, r7, lr}
 80039f6:	b089      	sub	sp, #36	@ 0x24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e1a9      	b.n	8003d62 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d109      	bne.n	8003a30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7fe fe97 	bl	8002750 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff ff67 	bl	8003908 <LL_ADC_IsDeepPowerDownEnabled>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d004      	beq.n	8003a4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ff4d 	bl	80038e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff ff82 	bl	8003958 <LL_ADC_IsInternalRegulatorEnabled>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d115      	bne.n	8003a86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff ff66 	bl	8003930 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a64:	4b9c      	ldr	r3, [pc, #624]	@ (8003cd8 <HAL_ADC_Init+0x2e4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	099b      	lsrs	r3, r3, #6
 8003a6a:	4a9c      	ldr	r2, [pc, #624]	@ (8003cdc <HAL_ADC_Init+0x2e8>)
 8003a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a70:	099b      	lsrs	r3, r3, #6
 8003a72:	3301      	adds	r3, #1
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a78:	e002      	b.n	8003a80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f9      	bne.n	8003a7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff ff64 	bl	8003958 <LL_ADC_IsInternalRegulatorEnabled>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10d      	bne.n	8003ab2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9a:	f043 0210 	orr.w	r2, r3, #16
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa6:	f043 0201 	orr.w	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff ff75 	bl	80039a6 <LL_ADC_REG_IsConversionOngoing>
 8003abc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac2:	f003 0310 	and.w	r3, r3, #16
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f040 8142 	bne.w	8003d50 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f040 813e 	bne.w	8003d50 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003adc:	f043 0202 	orr.w	r2, r3, #2
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ff49 	bl	8003980 <LL_ADC_IsEnabled>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d141      	bne.n	8003b78 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003afc:	d004      	beq.n	8003b08 <HAL_ADC_Init+0x114>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a77      	ldr	r2, [pc, #476]	@ (8003ce0 <HAL_ADC_Init+0x2ec>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d10f      	bne.n	8003b28 <HAL_ADC_Init+0x134>
 8003b08:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b0c:	f7ff ff38 	bl	8003980 <LL_ADC_IsEnabled>
 8003b10:	4604      	mov	r4, r0
 8003b12:	4873      	ldr	r0, [pc, #460]	@ (8003ce0 <HAL_ADC_Init+0x2ec>)
 8003b14:	f7ff ff34 	bl	8003980 <LL_ADC_IsEnabled>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	4323      	orrs	r3, r4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	e012      	b.n	8003b4e <HAL_ADC_Init+0x15a>
 8003b28:	486e      	ldr	r0, [pc, #440]	@ (8003ce4 <HAL_ADC_Init+0x2f0>)
 8003b2a:	f7ff ff29 	bl	8003980 <LL_ADC_IsEnabled>
 8003b2e:	4604      	mov	r4, r0
 8003b30:	486d      	ldr	r0, [pc, #436]	@ (8003ce8 <HAL_ADC_Init+0x2f4>)
 8003b32:	f7ff ff25 	bl	8003980 <LL_ADC_IsEnabled>
 8003b36:	4603      	mov	r3, r0
 8003b38:	431c      	orrs	r4, r3
 8003b3a:	486c      	ldr	r0, [pc, #432]	@ (8003cec <HAL_ADC_Init+0x2f8>)
 8003b3c:	f7ff ff20 	bl	8003980 <LL_ADC_IsEnabled>
 8003b40:	4603      	mov	r3, r0
 8003b42:	4323      	orrs	r3, r4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf0c      	ite	eq
 8003b48:	2301      	moveq	r3, #1
 8003b4a:	2300      	movne	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d012      	beq.n	8003b78 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b5a:	d004      	beq.n	8003b66 <HAL_ADC_Init+0x172>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a5f      	ldr	r2, [pc, #380]	@ (8003ce0 <HAL_ADC_Init+0x2ec>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d101      	bne.n	8003b6a <HAL_ADC_Init+0x176>
 8003b66:	4a62      	ldr	r2, [pc, #392]	@ (8003cf0 <HAL_ADC_Init+0x2fc>)
 8003b68:	e000      	b.n	8003b6c <HAL_ADC_Init+0x178>
 8003b6a:	4a62      	ldr	r2, [pc, #392]	@ (8003cf4 <HAL_ADC_Init+0x300>)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	4619      	mov	r1, r3
 8003b72:	4610      	mov	r0, r2
 8003b74:	f7ff fd68 	bl	8003648 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	7f5b      	ldrb	r3, [r3, #29]
 8003b7c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b82:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003b88:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003b8e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b96:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d106      	bne.n	8003bb4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003baa:	3b01      	subs	r3, #1
 8003bac:	045b      	lsls	r3, r3, #17
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d009      	beq.n	8003bd0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	4b48      	ldr	r3, [pc, #288]	@ (8003cf8 <HAL_ADC_Init+0x304>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	69b9      	ldr	r1, [r7, #24]
 8003be0:	430b      	orrs	r3, r1
 8003be2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fee4 	bl	80039cc <LL_ADC_INJ_IsConversionOngoing>
 8003c04:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d17f      	bne.n	8003d0c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d17c      	bne.n	8003d0c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c16:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c1e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c2e:	f023 0302 	bic.w	r3, r3, #2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6812      	ldr	r2, [r2, #0]
 8003c36:	69b9      	ldr	r1, [r7, #24]
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d017      	beq.n	8003c74 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691a      	ldr	r2, [r3, #16]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003c52:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c5c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003c60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6911      	ldr	r1, [r2, #16]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003c72:	e013      	b.n	8003c9c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691a      	ldr	r2, [r3, #16]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003c82:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003c94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c98:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d12a      	bne.n	8003cfc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003cb0:	f023 0304 	bic.w	r3, r3, #4
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003cbc:	4311      	orrs	r1, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003cc2:	4311      	orrs	r1, r2
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0201 	orr.w	r2, r2, #1
 8003cd4:	611a      	str	r2, [r3, #16]
 8003cd6:	e019      	b.n	8003d0c <HAL_ADC_Init+0x318>
 8003cd8:	20000004 	.word	0x20000004
 8003cdc:	053e2d63 	.word	0x053e2d63
 8003ce0:	50000100 	.word	0x50000100
 8003ce4:	50000400 	.word	0x50000400
 8003ce8:	50000500 	.word	0x50000500
 8003cec:	50000600 	.word	0x50000600
 8003cf0:	50000300 	.word	0x50000300
 8003cf4:	50000700 	.word	0x50000700
 8003cf8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0201 	bic.w	r2, r2, #1
 8003d0a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d10c      	bne.n	8003d2e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1a:	f023 010f 	bic.w	r1, r3, #15
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	1e5a      	subs	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d2c:	e007      	b.n	8003d3e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 020f 	bic.w	r2, r2, #15
 8003d3c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d42:	f023 0303 	bic.w	r3, r3, #3
 8003d46:	f043 0201 	orr.w	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d4e:	e007      	b.n	8003d60 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d54:	f043 0210 	orr.w	r2, r3, #16
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d60:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3724      	adds	r7, #36	@ 0x24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd90      	pop	{r4, r7, pc}
 8003d6a:	bf00      	nop

08003d6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b0b6      	sub	sp, #216	@ 0xd8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d102      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x24>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	f000 bc13 	b.w	80045b6 <HAL_ADC_ConfigChannel+0x84a>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fe02 	bl	80039a6 <LL_ADC_REG_IsConversionOngoing>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f040 83f3 	bne.w	8004590 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6859      	ldr	r1, [r3, #4]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	f7ff fd18 	bl	80037ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fdf0 	bl	80039a6 <LL_ADC_REG_IsConversionOngoing>
 8003dc6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fdfc 	bl	80039cc <LL_ADC_INJ_IsConversionOngoing>
 8003dd4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dd8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f040 81d9 	bne.w	8004194 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003de2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f040 81d4 	bne.w	8004194 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003df4:	d10f      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	4619      	mov	r1, r3
 8003e02:	f7ff fd1f 	bl	8003844 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff fcd9 	bl	80037c6 <LL_ADC_SetSamplingTimeCommonConfig>
 8003e14:	e00e      	b.n	8003e34 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6819      	ldr	r1, [r3, #0]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f7ff fd0e 	bl	8003844 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fcc9 	bl	80037c6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	08db      	lsrs	r3, r3, #3
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d022      	beq.n	8003e9c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	6919      	ldr	r1, [r3, #16]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003e66:	f7ff fc23 	bl	80036b0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6919      	ldr	r1, [r3, #16]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	461a      	mov	r2, r3
 8003e78:	f7ff fc6f 	bl	800375a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d102      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x126>
 8003e8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e90:	e000      	b.n	8003e94 <HAL_ADC_ConfigChannel+0x128>
 8003e92:	2300      	movs	r3, #0
 8003e94:	461a      	mov	r2, r3
 8003e96:	f7ff fc7b 	bl	8003790 <LL_ADC_SetOffsetSaturation>
 8003e9a:	e17b      	b.n	8004194 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff fc28 	bl	80036f8 <LL_ADC_GetOffsetChannel>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x15c>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff fc1d 	bl	80036f8 <LL_ADC_GetOffsetChannel>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	0e9b      	lsrs	r3, r3, #26
 8003ec2:	f003 021f 	and.w	r2, r3, #31
 8003ec6:	e01e      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x19a>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fc12 	bl	80036f8 <LL_ADC_GetOffsetChannel>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ee6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003eea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003eee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003ef6:	2320      	movs	r3, #32
 8003ef8:	e004      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003efa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003efe:	fab3 f383 	clz	r3, r3
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d105      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x1b2>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	0e9b      	lsrs	r3, r3, #26
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	e018      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x1e4>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003f2a:	fa93 f3a3 	rbit	r3, r3
 8003f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003f3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003f42:	2320      	movs	r3, #32
 8003f44:	e004      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003f46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f4a:	fab3 f383 	clz	r3, r3
 8003f4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d106      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff fbe1 	bl	8003724 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2101      	movs	r1, #1
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff fbc5 	bl	80036f8 <LL_ADC_GetOffsetChannel>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x222>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff fbba 	bl	80036f8 <LL_ADC_GetOffsetChannel>
 8003f84:	4603      	mov	r3, r0
 8003f86:	0e9b      	lsrs	r3, r3, #26
 8003f88:	f003 021f 	and.w	r2, r3, #31
 8003f8c:	e01e      	b.n	8003fcc <HAL_ADC_ConfigChannel+0x260>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2101      	movs	r1, #1
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff fbaf 	bl	80036f8 <LL_ADC_GetOffsetChannel>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003fa4:	fa93 f3a3 	rbit	r3, r3
 8003fa8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003fac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003fb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003fbc:	2320      	movs	r3, #32
 8003fbe:	e004      	b.n	8003fca <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003fc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003fc4:	fab3 f383 	clz	r3, r3
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d105      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x278>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	0e9b      	lsrs	r3, r3, #26
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	e018      	b.n	8004016 <HAL_ADC_ConfigChannel+0x2aa>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ff0:	fa93 f3a3 	rbit	r3, r3
 8003ff4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003ff8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ffc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004000:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004008:	2320      	movs	r3, #32
 800400a:	e004      	b.n	8004016 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800400c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004010:	fab3 f383 	clz	r3, r3
 8004014:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004016:	429a      	cmp	r2, r3
 8004018:	d106      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2200      	movs	r2, #0
 8004020:	2101      	movs	r1, #1
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fb7e 	bl	8003724 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2102      	movs	r1, #2
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff fb62 	bl	80036f8 <LL_ADC_GetOffsetChannel>
 8004034:	4603      	mov	r3, r0
 8004036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <HAL_ADC_ConfigChannel+0x2e8>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2102      	movs	r1, #2
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff fb57 	bl	80036f8 <LL_ADC_GetOffsetChannel>
 800404a:	4603      	mov	r3, r0
 800404c:	0e9b      	lsrs	r3, r3, #26
 800404e:	f003 021f 	and.w	r2, r3, #31
 8004052:	e01e      	b.n	8004092 <HAL_ADC_ConfigChannel+0x326>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2102      	movs	r1, #2
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff fb4c 	bl	80036f8 <LL_ADC_GetOffsetChannel>
 8004060:	4603      	mov	r3, r0
 8004062:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800406a:	fa93 f3a3 	rbit	r3, r3
 800406e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004072:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004076:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800407a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004082:	2320      	movs	r3, #32
 8004084:	e004      	b.n	8004090 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004086:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800408a:	fab3 f383 	clz	r3, r3
 800408e:	b2db      	uxtb	r3, r3
 8004090:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800409a:	2b00      	cmp	r3, #0
 800409c:	d105      	bne.n	80040aa <HAL_ADC_ConfigChannel+0x33e>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	0e9b      	lsrs	r3, r3, #26
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	e016      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x36c>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040b6:	fa93 f3a3 	rbit	r3, r3
 80040ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80040bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80040c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80040ca:	2320      	movs	r3, #32
 80040cc:	e004      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80040ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040d2:	fab3 f383 	clz	r3, r3
 80040d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040d8:	429a      	cmp	r2, r3
 80040da:	d106      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2200      	movs	r2, #0
 80040e2:	2102      	movs	r1, #2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff fb1d 	bl	8003724 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2103      	movs	r1, #3
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff fb01 	bl	80036f8 <LL_ADC_GetOffsetChannel>
 80040f6:	4603      	mov	r3, r0
 80040f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10a      	bne.n	8004116 <HAL_ADC_ConfigChannel+0x3aa>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2103      	movs	r1, #3
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff faf6 	bl	80036f8 <LL_ADC_GetOffsetChannel>
 800410c:	4603      	mov	r3, r0
 800410e:	0e9b      	lsrs	r3, r3, #26
 8004110:	f003 021f 	and.w	r2, r3, #31
 8004114:	e017      	b.n	8004146 <HAL_ADC_ConfigChannel+0x3da>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2103      	movs	r1, #3
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff faeb 	bl	80036f8 <LL_ADC_GetOffsetChannel>
 8004122:	4603      	mov	r3, r0
 8004124:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004126:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004128:	fa93 f3a3 	rbit	r3, r3
 800412c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800412e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004130:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004132:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004138:	2320      	movs	r3, #32
 800413a:	e003      	b.n	8004144 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800413c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800413e:	fab3 f383 	clz	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800414e:	2b00      	cmp	r3, #0
 8004150:	d105      	bne.n	800415e <HAL_ADC_ConfigChannel+0x3f2>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	0e9b      	lsrs	r3, r3, #26
 8004158:	f003 031f 	and.w	r3, r3, #31
 800415c:	e011      	b.n	8004182 <HAL_ADC_ConfigChannel+0x416>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800416c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800416e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004176:	2320      	movs	r3, #32
 8004178:	e003      	b.n	8004182 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800417a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800417c:	fab3 f383 	clz	r3, r3
 8004180:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004182:	429a      	cmp	r2, r3
 8004184:	d106      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2200      	movs	r2, #0
 800418c:	2103      	movs	r1, #3
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff fac8 	bl	8003724 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff fbf1 	bl	8003980 <LL_ADC_IsEnabled>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f040 813d 	bne.w	8004420 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	6819      	ldr	r1, [r3, #0]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	461a      	mov	r2, r3
 80041b4:	f7ff fb72 	bl	800389c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4aa2      	ldr	r2, [pc, #648]	@ (8004448 <HAL_ADC_ConfigChannel+0x6dc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	f040 812e 	bne.w	8004420 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10b      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x480>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	0e9b      	lsrs	r3, r3, #26
 80041da:	3301      	adds	r3, #1
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	2b09      	cmp	r3, #9
 80041e2:	bf94      	ite	ls
 80041e4:	2301      	movls	r3, #1
 80041e6:	2300      	movhi	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	e019      	b.n	8004220 <HAL_ADC_ConfigChannel+0x4b4>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80041fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041fc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80041fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004204:	2320      	movs	r3, #32
 8004206:	e003      	b.n	8004210 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004208:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800420a:	fab3 f383 	clz	r3, r3
 800420e:	b2db      	uxtb	r3, r3
 8004210:	3301      	adds	r3, #1
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	2b09      	cmp	r3, #9
 8004218:	bf94      	ite	ls
 800421a:	2301      	movls	r3, #1
 800421c:	2300      	movhi	r3, #0
 800421e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004220:	2b00      	cmp	r3, #0
 8004222:	d079      	beq.n	8004318 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800422c:	2b00      	cmp	r3, #0
 800422e:	d107      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x4d4>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	0e9b      	lsrs	r3, r3, #26
 8004236:	3301      	adds	r3, #1
 8004238:	069b      	lsls	r3, r3, #26
 800423a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800423e:	e015      	b.n	800426c <HAL_ADC_ConfigChannel+0x500>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004246:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004248:	fa93 f3a3 	rbit	r3, r3
 800424c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800424e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004250:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004258:	2320      	movs	r3, #32
 800425a:	e003      	b.n	8004264 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800425c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800425e:	fab3 f383 	clz	r3, r3
 8004262:	b2db      	uxtb	r3, r3
 8004264:	3301      	adds	r3, #1
 8004266:	069b      	lsls	r3, r3, #26
 8004268:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004274:	2b00      	cmp	r3, #0
 8004276:	d109      	bne.n	800428c <HAL_ADC_ConfigChannel+0x520>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	0e9b      	lsrs	r3, r3, #26
 800427e:	3301      	adds	r3, #1
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	2101      	movs	r1, #1
 8004286:	fa01 f303 	lsl.w	r3, r1, r3
 800428a:	e017      	b.n	80042bc <HAL_ADC_ConfigChannel+0x550>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004294:	fa93 f3a3 	rbit	r3, r3
 8004298:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800429a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800429c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800429e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80042a4:	2320      	movs	r3, #32
 80042a6:	e003      	b.n	80042b0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80042a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042aa:	fab3 f383 	clz	r3, r3
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	3301      	adds	r3, #1
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	2101      	movs	r1, #1
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	ea42 0103 	orr.w	r1, r2, r3
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10a      	bne.n	80042e2 <HAL_ADC_ConfigChannel+0x576>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	0e9b      	lsrs	r3, r3, #26
 80042d2:	3301      	adds	r3, #1
 80042d4:	f003 021f 	and.w	r2, r3, #31
 80042d8:	4613      	mov	r3, r2
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	4413      	add	r3, r2
 80042de:	051b      	lsls	r3, r3, #20
 80042e0:	e018      	b.n	8004314 <HAL_ADC_ConfigChannel+0x5a8>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80042f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80042f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80042fa:	2320      	movs	r3, #32
 80042fc:	e003      	b.n	8004306 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80042fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004300:	fab3 f383 	clz	r3, r3
 8004304:	b2db      	uxtb	r3, r3
 8004306:	3301      	adds	r3, #1
 8004308:	f003 021f 	and.w	r2, r3, #31
 800430c:	4613      	mov	r3, r2
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	4413      	add	r3, r2
 8004312:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004314:	430b      	orrs	r3, r1
 8004316:	e07e      	b.n	8004416 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004320:	2b00      	cmp	r3, #0
 8004322:	d107      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x5c8>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	0e9b      	lsrs	r3, r3, #26
 800432a:	3301      	adds	r3, #1
 800432c:	069b      	lsls	r3, r3, #26
 800432e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004332:	e015      	b.n	8004360 <HAL_ADC_ConfigChannel+0x5f4>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800433c:	fa93 f3a3 	rbit	r3, r3
 8004340:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004344:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800434c:	2320      	movs	r3, #32
 800434e:	e003      	b.n	8004358 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	3301      	adds	r3, #1
 800435a:	069b      	lsls	r3, r3, #26
 800435c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004368:	2b00      	cmp	r3, #0
 800436a:	d109      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x614>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	0e9b      	lsrs	r3, r3, #26
 8004372:	3301      	adds	r3, #1
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	2101      	movs	r1, #1
 800437a:	fa01 f303 	lsl.w	r3, r1, r3
 800437e:	e017      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x644>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	fa93 f3a3 	rbit	r3, r3
 800438c:	61fb      	str	r3, [r7, #28]
  return result;
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004398:	2320      	movs	r3, #32
 800439a:	e003      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800439c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439e:	fab3 f383 	clz	r3, r3
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	3301      	adds	r3, #1
 80043a6:	f003 031f 	and.w	r3, r3, #31
 80043aa:	2101      	movs	r1, #1
 80043ac:	fa01 f303 	lsl.w	r3, r1, r3
 80043b0:	ea42 0103 	orr.w	r1, r2, r3
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10d      	bne.n	80043dc <HAL_ADC_ConfigChannel+0x670>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	0e9b      	lsrs	r3, r3, #26
 80043c6:	3301      	adds	r3, #1
 80043c8:	f003 021f 	and.w	r2, r3, #31
 80043cc:	4613      	mov	r3, r2
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	4413      	add	r3, r2
 80043d2:	3b1e      	subs	r3, #30
 80043d4:	051b      	lsls	r3, r3, #20
 80043d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80043da:	e01b      	b.n	8004414 <HAL_ADC_ConfigChannel+0x6a8>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	fa93 f3a3 	rbit	r3, r3
 80043e8:	613b      	str	r3, [r7, #16]
  return result;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80043f4:	2320      	movs	r3, #32
 80043f6:	e003      	b.n	8004400 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	fab3 f383 	clz	r3, r3
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	3301      	adds	r3, #1
 8004402:	f003 021f 	and.w	r2, r3, #31
 8004406:	4613      	mov	r3, r2
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	4413      	add	r3, r2
 800440c:	3b1e      	subs	r3, #30
 800440e:	051b      	lsls	r3, r3, #20
 8004410:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004414:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800441a:	4619      	mov	r1, r3
 800441c:	f7ff fa12 	bl	8003844 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b09      	ldr	r3, [pc, #36]	@ (800444c <HAL_ADC_ConfigChannel+0x6e0>)
 8004426:	4013      	ands	r3, r2
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 80be 	beq.w	80045aa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004436:	d004      	beq.n	8004442 <HAL_ADC_ConfigChannel+0x6d6>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a04      	ldr	r2, [pc, #16]	@ (8004450 <HAL_ADC_ConfigChannel+0x6e4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d10a      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x6ec>
 8004442:	4b04      	ldr	r3, [pc, #16]	@ (8004454 <HAL_ADC_ConfigChannel+0x6e8>)
 8004444:	e009      	b.n	800445a <HAL_ADC_ConfigChannel+0x6ee>
 8004446:	bf00      	nop
 8004448:	407f0000 	.word	0x407f0000
 800444c:	80080000 	.word	0x80080000
 8004450:	50000100 	.word	0x50000100
 8004454:	50000300 	.word	0x50000300
 8004458:	4b59      	ldr	r3, [pc, #356]	@ (80045c0 <HAL_ADC_ConfigChannel+0x854>)
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff f91a 	bl	8003694 <LL_ADC_GetCommonPathInternalCh>
 8004460:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a56      	ldr	r2, [pc, #344]	@ (80045c4 <HAL_ADC_ConfigChannel+0x858>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d004      	beq.n	8004478 <HAL_ADC_ConfigChannel+0x70c>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a55      	ldr	r2, [pc, #340]	@ (80045c8 <HAL_ADC_ConfigChannel+0x85c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d13a      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004478:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800447c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d134      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800448c:	d005      	beq.n	800449a <HAL_ADC_ConfigChannel+0x72e>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a4e      	ldr	r2, [pc, #312]	@ (80045cc <HAL_ADC_ConfigChannel+0x860>)
 8004494:	4293      	cmp	r3, r2
 8004496:	f040 8085 	bne.w	80045a4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044a2:	d004      	beq.n	80044ae <HAL_ADC_ConfigChannel+0x742>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a49      	ldr	r2, [pc, #292]	@ (80045d0 <HAL_ADC_ConfigChannel+0x864>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d101      	bne.n	80044b2 <HAL_ADC_ConfigChannel+0x746>
 80044ae:	4a49      	ldr	r2, [pc, #292]	@ (80045d4 <HAL_ADC_ConfigChannel+0x868>)
 80044b0:	e000      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x748>
 80044b2:	4a43      	ldr	r2, [pc, #268]	@ (80045c0 <HAL_ADC_ConfigChannel+0x854>)
 80044b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044bc:	4619      	mov	r1, r3
 80044be:	4610      	mov	r0, r2
 80044c0:	f7ff f8d5 	bl	800366e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044c4:	4b44      	ldr	r3, [pc, #272]	@ (80045d8 <HAL_ADC_ConfigChannel+0x86c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	099b      	lsrs	r3, r3, #6
 80044ca:	4a44      	ldr	r2, [pc, #272]	@ (80045dc <HAL_ADC_ConfigChannel+0x870>)
 80044cc:	fba2 2303 	umull	r2, r3, r2, r3
 80044d0:	099b      	lsrs	r3, r3, #6
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	4613      	mov	r3, r2
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	4413      	add	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80044de:	e002      	b.n	80044e6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1f9      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044ec:	e05a      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a3b      	ldr	r2, [pc, #236]	@ (80045e0 <HAL_ADC_ConfigChannel+0x874>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d125      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d11f      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a31      	ldr	r2, [pc, #196]	@ (80045d0 <HAL_ADC_ConfigChannel+0x864>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d104      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x7ac>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a34      	ldr	r2, [pc, #208]	@ (80045e4 <HAL_ADC_ConfigChannel+0x878>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d047      	beq.n	80045a8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004520:	d004      	beq.n	800452c <HAL_ADC_ConfigChannel+0x7c0>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2a      	ldr	r2, [pc, #168]	@ (80045d0 <HAL_ADC_ConfigChannel+0x864>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d101      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x7c4>
 800452c:	4a29      	ldr	r2, [pc, #164]	@ (80045d4 <HAL_ADC_ConfigChannel+0x868>)
 800452e:	e000      	b.n	8004532 <HAL_ADC_ConfigChannel+0x7c6>
 8004530:	4a23      	ldr	r2, [pc, #140]	@ (80045c0 <HAL_ADC_ConfigChannel+0x854>)
 8004532:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004536:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800453a:	4619      	mov	r1, r3
 800453c:	4610      	mov	r0, r2
 800453e:	f7ff f896 	bl	800366e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004542:	e031      	b.n	80045a8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a27      	ldr	r2, [pc, #156]	@ (80045e8 <HAL_ADC_ConfigChannel+0x87c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d12d      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800454e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d127      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a1c      	ldr	r2, [pc, #112]	@ (80045d0 <HAL_ADC_ConfigChannel+0x864>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d022      	beq.n	80045aa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800456c:	d004      	beq.n	8004578 <HAL_ADC_ConfigChannel+0x80c>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a17      	ldr	r2, [pc, #92]	@ (80045d0 <HAL_ADC_ConfigChannel+0x864>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d101      	bne.n	800457c <HAL_ADC_ConfigChannel+0x810>
 8004578:	4a16      	ldr	r2, [pc, #88]	@ (80045d4 <HAL_ADC_ConfigChannel+0x868>)
 800457a:	e000      	b.n	800457e <HAL_ADC_ConfigChannel+0x812>
 800457c:	4a10      	ldr	r2, [pc, #64]	@ (80045c0 <HAL_ADC_ConfigChannel+0x854>)
 800457e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004582:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004586:	4619      	mov	r1, r3
 8004588:	4610      	mov	r0, r2
 800458a:	f7ff f870 	bl	800366e <LL_ADC_SetCommonPathInternalCh>
 800458e:	e00c      	b.n	80045aa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004594:	f043 0220 	orr.w	r2, r3, #32
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80045a2:	e002      	b.n	80045aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045a4:	bf00      	nop
 80045a6:	e000      	b.n	80045aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80045b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	37d8      	adds	r7, #216	@ 0xd8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	50000700 	.word	0x50000700
 80045c4:	c3210000 	.word	0xc3210000
 80045c8:	90c00010 	.word	0x90c00010
 80045cc:	50000600 	.word	0x50000600
 80045d0:	50000100 	.word	0x50000100
 80045d4:	50000300 	.word	0x50000300
 80045d8:	20000004 	.word	0x20000004
 80045dc:	053e2d63 	.word	0x053e2d63
 80045e0:	c7520000 	.word	0xc7520000
 80045e4:	50000500 	.word	0x50000500
 80045e8:	cb840000 	.word	0xcb840000

080045ec <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80045f4:	4b05      	ldr	r3, [pc, #20]	@ (800460c <LL_EXTI_EnableIT_0_31+0x20>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	4904      	ldr	r1, [pc, #16]	@ (800460c <LL_EXTI_EnableIT_0_31+0x20>)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	600b      	str	r3, [r1, #0]
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	40010400 	.word	0x40010400

08004610 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004618:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <LL_EXTI_EnableIT_32_63+0x20>)
 800461a:	6a1a      	ldr	r2, [r3, #32]
 800461c:	4904      	ldr	r1, [pc, #16]	@ (8004630 <LL_EXTI_EnableIT_32_63+0x20>)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4313      	orrs	r3, r2
 8004622:	620b      	str	r3, [r1, #32]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	40010400 	.word	0x40010400

08004634 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800463c:	4b06      	ldr	r3, [pc, #24]	@ (8004658 <LL_EXTI_DisableIT_0_31+0x24>)
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	43db      	mvns	r3, r3
 8004644:	4904      	ldr	r1, [pc, #16]	@ (8004658 <LL_EXTI_DisableIT_0_31+0x24>)
 8004646:	4013      	ands	r3, r2
 8004648:	600b      	str	r3, [r1, #0]
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40010400 	.word	0x40010400

0800465c <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004664:	4b06      	ldr	r3, [pc, #24]	@ (8004680 <LL_EXTI_DisableIT_32_63+0x24>)
 8004666:	6a1a      	ldr	r2, [r3, #32]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	43db      	mvns	r3, r3
 800466c:	4904      	ldr	r1, [pc, #16]	@ (8004680 <LL_EXTI_DisableIT_32_63+0x24>)
 800466e:	4013      	ands	r3, r2
 8004670:	620b      	str	r3, [r1, #32]
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40010400 	.word	0x40010400

08004684 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800468c:	4b05      	ldr	r3, [pc, #20]	@ (80046a4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	4904      	ldr	r1, [pc, #16]	@ (80046a4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4313      	orrs	r3, r2
 8004696:	604b      	str	r3, [r1, #4]

}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	40010400 	.word	0x40010400

080046a8 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80046b0:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <LL_EXTI_EnableEvent_32_63+0x20>)
 80046b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046b4:	4904      	ldr	r1, [pc, #16]	@ (80046c8 <LL_EXTI_EnableEvent_32_63+0x20>)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	40010400 	.word	0x40010400

080046cc <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80046d4:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	43db      	mvns	r3, r3
 80046dc:	4904      	ldr	r1, [pc, #16]	@ (80046f0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80046de:	4013      	ands	r3, r2
 80046e0:	604b      	str	r3, [r1, #4]
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40010400 	.word	0x40010400

080046f4 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80046fc:	4b06      	ldr	r3, [pc, #24]	@ (8004718 <LL_EXTI_DisableEvent_32_63+0x24>)
 80046fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	43db      	mvns	r3, r3
 8004704:	4904      	ldr	r1, [pc, #16]	@ (8004718 <LL_EXTI_DisableEvent_32_63+0x24>)
 8004706:	4013      	ands	r3, r2
 8004708:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40010400 	.word	0x40010400

0800471c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004724:	4b05      	ldr	r3, [pc, #20]	@ (800473c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	4904      	ldr	r1, [pc, #16]	@ (800473c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4313      	orrs	r3, r2
 800472e:	608b      	str	r3, [r1, #8]

}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	40010400 	.word	0x40010400

08004740 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8004748:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800474a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800474c:	4904      	ldr	r1, [pc, #16]	@ (8004760 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4313      	orrs	r3, r2
 8004752:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	40010400 	.word	0x40010400

08004764 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800476c:	4b06      	ldr	r3, [pc, #24]	@ (8004788 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	43db      	mvns	r3, r3
 8004774:	4904      	ldr	r1, [pc, #16]	@ (8004788 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004776:	4013      	ands	r3, r2
 8004778:	608b      	str	r3, [r1, #8]

}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40010400 	.word	0x40010400

0800478c <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8004794:	4b06      	ldr	r3, [pc, #24]	@ (80047b0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004796:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	43db      	mvns	r3, r3
 800479c:	4904      	ldr	r1, [pc, #16]	@ (80047b0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800479e:	4013      	ands	r3, r2
 80047a0:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40010400 	.word	0x40010400

080047b4 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80047bc:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	4904      	ldr	r1, [pc, #16]	@ (80047d4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60cb      	str	r3, [r1, #12]
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	40010400 	.word	0x40010400

080047d8 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80047e0:	4b05      	ldr	r3, [pc, #20]	@ (80047f8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80047e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e4:	4904      	ldr	r1, [pc, #16]	@ (80047f8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	40010400 	.word	0x40010400

080047fc <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004804:	4b06      	ldr	r3, [pc, #24]	@ (8004820 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	43db      	mvns	r3, r3
 800480c:	4904      	ldr	r1, [pc, #16]	@ (8004820 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800480e:	4013      	ands	r3, r2
 8004810:	60cb      	str	r3, [r1, #12]
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40010400 	.word	0x40010400

08004824 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800482c:	4b06      	ldr	r3, [pc, #24]	@ (8004848 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800482e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	43db      	mvns	r3, r3
 8004834:	4904      	ldr	r1, [pc, #16]	@ (8004848 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004836:	4013      	ands	r3, r2
 8004838:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40010400 	.word	0x40010400

0800484c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004854:	4a04      	ldr	r2, [pc, #16]	@ (8004868 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6153      	str	r3, [r2, #20]
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40010400 	.word	0x40010400

0800486c <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8004874:	4a04      	ldr	r2, [pc, #16]	@ (8004888 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40010400 	.word	0x40010400

0800488c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d102      	bne.n	80048a8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	77fb      	strb	r3, [r7, #31]
 80048a6:	e181      	b.n	8004bac <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048b6:	d102      	bne.n	80048be <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	77fb      	strb	r3, [r7, #31]
 80048bc:	e176      	b.n	8004bac <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	7f5b      	ldrb	r3, [r3, #29]
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d108      	bne.n	80048da <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7fd ff91 	bl	80027fc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048e4:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	4b90      	ldr	r3, [pc, #576]	@ (8004b4c <HAL_COMP_Init+0x2c0>)
 800490c:	4013      	ands	r3, r2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6812      	ldr	r2, [r2, #0]
 8004912:	6979      	ldr	r1, [r7, #20]
 8004914:	430b      	orrs	r3, r1
 8004916:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d016      	beq.n	8004954 <HAL_COMP_Init+0xc8>
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d113      	bne.n	8004954 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800492c:	4b88      	ldr	r3, [pc, #544]	@ (8004b50 <HAL_COMP_Init+0x2c4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	099b      	lsrs	r3, r3, #6
 8004932:	4a88      	ldr	r2, [pc, #544]	@ (8004b54 <HAL_COMP_Init+0x2c8>)
 8004934:	fba2 2303 	umull	r2, r3, r2, r3
 8004938:	099b      	lsrs	r3, r3, #6
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004946:	e002      	b.n	800494e <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3b01      	subs	r3, #1
 800494c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1f9      	bne.n	8004948 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a7f      	ldr	r2, [pc, #508]	@ (8004b58 <HAL_COMP_Init+0x2cc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d028      	beq.n	80049b0 <HAL_COMP_Init+0x124>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a7e      	ldr	r2, [pc, #504]	@ (8004b5c <HAL_COMP_Init+0x2d0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d020      	beq.n	80049aa <HAL_COMP_Init+0x11e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a7c      	ldr	r2, [pc, #496]	@ (8004b60 <HAL_COMP_Init+0x2d4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d018      	beq.n	80049a4 <HAL_COMP_Init+0x118>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a7b      	ldr	r2, [pc, #492]	@ (8004b64 <HAL_COMP_Init+0x2d8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d010      	beq.n	800499e <HAL_COMP_Init+0x112>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a79      	ldr	r2, [pc, #484]	@ (8004b68 <HAL_COMP_Init+0x2dc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d008      	beq.n	8004998 <HAL_COMP_Init+0x10c>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a78      	ldr	r2, [pc, #480]	@ (8004b6c <HAL_COMP_Init+0x2e0>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d101      	bne.n	8004994 <HAL_COMP_Init+0x108>
 8004990:	2301      	movs	r3, #1
 8004992:	e00f      	b.n	80049b4 <HAL_COMP_Init+0x128>
 8004994:	2302      	movs	r3, #2
 8004996:	e00d      	b.n	80049b4 <HAL_COMP_Init+0x128>
 8004998:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800499c:	e00a      	b.n	80049b4 <HAL_COMP_Init+0x128>
 800499e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80049a2:	e007      	b.n	80049b4 <HAL_COMP_Init+0x128>
 80049a4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80049a8:	e004      	b.n	80049b4 <HAL_COMP_Init+0x128>
 80049aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80049ae:	e001      	b.n	80049b4 <HAL_COMP_Init+0x128>
 80049b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80049b4:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 80b6 	beq.w	8004b30 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	f003 0310 	and.w	r3, r3, #16
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d011      	beq.n	80049f4 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a65      	ldr	r2, [pc, #404]	@ (8004b6c <HAL_COMP_Init+0x2e0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d004      	beq.n	80049e4 <HAL_COMP_Init+0x158>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a64      	ldr	r2, [pc, #400]	@ (8004b70 <HAL_COMP_Init+0x2e4>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d103      	bne.n	80049ec <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80049e4:	6938      	ldr	r0, [r7, #16]
 80049e6:	f7ff feab 	bl	8004740 <LL_EXTI_EnableRisingTrig_32_63>
 80049ea:	e014      	b.n	8004a16 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80049ec:	6938      	ldr	r0, [r7, #16]
 80049ee:	f7ff fe95 	bl	800471c <LL_EXTI_EnableRisingTrig_0_31>
 80049f2:	e010      	b.n	8004a16 <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a5c      	ldr	r2, [pc, #368]	@ (8004b6c <HAL_COMP_Init+0x2e0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <HAL_COMP_Init+0x17c>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a5b      	ldr	r2, [pc, #364]	@ (8004b70 <HAL_COMP_Init+0x2e4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d103      	bne.n	8004a10 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8004a08:	6938      	ldr	r0, [r7, #16]
 8004a0a:	f7ff febf 	bl	800478c <LL_EXTI_DisableRisingTrig_32_63>
 8004a0e:	e002      	b.n	8004a16 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8004a10:	6938      	ldr	r0, [r7, #16]
 8004a12:	f7ff fea7 	bl	8004764 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d011      	beq.n	8004a46 <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a51      	ldr	r2, [pc, #324]	@ (8004b6c <HAL_COMP_Init+0x2e0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_COMP_Init+0x1aa>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a4f      	ldr	r2, [pc, #316]	@ (8004b70 <HAL_COMP_Init+0x2e4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d103      	bne.n	8004a3e <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8004a36:	6938      	ldr	r0, [r7, #16]
 8004a38:	f7ff fece 	bl	80047d8 <LL_EXTI_EnableFallingTrig_32_63>
 8004a3c:	e014      	b.n	8004a68 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8004a3e:	6938      	ldr	r0, [r7, #16]
 8004a40:	f7ff feb8 	bl	80047b4 <LL_EXTI_EnableFallingTrig_0_31>
 8004a44:	e010      	b.n	8004a68 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a48      	ldr	r2, [pc, #288]	@ (8004b6c <HAL_COMP_Init+0x2e0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d004      	beq.n	8004a5a <HAL_COMP_Init+0x1ce>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a46      	ldr	r2, [pc, #280]	@ (8004b70 <HAL_COMP_Init+0x2e4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d103      	bne.n	8004a62 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8004a5a:	6938      	ldr	r0, [r7, #16]
 8004a5c:	f7ff fee2 	bl	8004824 <LL_EXTI_DisableFallingTrig_32_63>
 8004a60:	e002      	b.n	8004a68 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8004a62:	6938      	ldr	r0, [r7, #16]
 8004a64:	f7ff feca 	bl	80047fc <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b6c <HAL_COMP_Init+0x2e0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d004      	beq.n	8004a7c <HAL_COMP_Init+0x1f0>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a3e      	ldr	r2, [pc, #248]	@ (8004b70 <HAL_COMP_Init+0x2e4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d103      	bne.n	8004a84 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8004a7c:	6938      	ldr	r0, [r7, #16]
 8004a7e:	f7ff fef5 	bl	800486c <LL_EXTI_ClearFlag_32_63>
 8004a82:	e002      	b.n	8004a8a <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8004a84:	6938      	ldr	r0, [r7, #16]
 8004a86:	f7ff fee1 	bl	800484c <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d011      	beq.n	8004aba <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a34      	ldr	r2, [pc, #208]	@ (8004b6c <HAL_COMP_Init+0x2e0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d004      	beq.n	8004aaa <HAL_COMP_Init+0x21e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a32      	ldr	r2, [pc, #200]	@ (8004b70 <HAL_COMP_Init+0x2e4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d103      	bne.n	8004ab2 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8004aaa:	6938      	ldr	r0, [r7, #16]
 8004aac:	f7ff fdfc 	bl	80046a8 <LL_EXTI_EnableEvent_32_63>
 8004ab0:	e014      	b.n	8004adc <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8004ab2:	6938      	ldr	r0, [r7, #16]
 8004ab4:	f7ff fde6 	bl	8004684 <LL_EXTI_EnableEvent_0_31>
 8004ab8:	e010      	b.n	8004adc <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a2b      	ldr	r2, [pc, #172]	@ (8004b6c <HAL_COMP_Init+0x2e0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d004      	beq.n	8004ace <HAL_COMP_Init+0x242>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a29      	ldr	r2, [pc, #164]	@ (8004b70 <HAL_COMP_Init+0x2e4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d103      	bne.n	8004ad6 <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8004ace:	6938      	ldr	r0, [r7, #16]
 8004ad0:	f7ff fe10 	bl	80046f4 <LL_EXTI_DisableEvent_32_63>
 8004ad4:	e002      	b.n	8004adc <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8004ad6:	6938      	ldr	r0, [r7, #16]
 8004ad8:	f7ff fdf8 	bl	80046cc <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d011      	beq.n	8004b0c <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a1f      	ldr	r2, [pc, #124]	@ (8004b6c <HAL_COMP_Init+0x2e0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d004      	beq.n	8004afc <HAL_COMP_Init+0x270>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a1e      	ldr	r2, [pc, #120]	@ (8004b70 <HAL_COMP_Init+0x2e4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d103      	bne.n	8004b04 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8004afc:	6938      	ldr	r0, [r7, #16]
 8004afe:	f7ff fd87 	bl	8004610 <LL_EXTI_EnableIT_32_63>
 8004b02:	e04b      	b.n	8004b9c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8004b04:	6938      	ldr	r0, [r7, #16]
 8004b06:	f7ff fd71 	bl	80045ec <LL_EXTI_EnableIT_0_31>
 8004b0a:	e047      	b.n	8004b9c <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a16      	ldr	r2, [pc, #88]	@ (8004b6c <HAL_COMP_Init+0x2e0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d004      	beq.n	8004b20 <HAL_COMP_Init+0x294>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a15      	ldr	r2, [pc, #84]	@ (8004b70 <HAL_COMP_Init+0x2e4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d103      	bne.n	8004b28 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8004b20:	6938      	ldr	r0, [r7, #16]
 8004b22:	f7ff fd9b 	bl	800465c <LL_EXTI_DisableIT_32_63>
 8004b26:	e039      	b.n	8004b9c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8004b28:	6938      	ldr	r0, [r7, #16]
 8004b2a:	f7ff fd83 	bl	8004634 <LL_EXTI_DisableIT_0_31>
 8004b2e:	e035      	b.n	8004b9c <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a0d      	ldr	r2, [pc, #52]	@ (8004b6c <HAL_COMP_Init+0x2e0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d004      	beq.n	8004b44 <HAL_COMP_Init+0x2b8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8004b70 <HAL_COMP_Init+0x2e4>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d117      	bne.n	8004b74 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8004b44:	6938      	ldr	r0, [r7, #16]
 8004b46:	f7ff fdd5 	bl	80046f4 <LL_EXTI_DisableEvent_32_63>
 8004b4a:	e016      	b.n	8004b7a <HAL_COMP_Init+0x2ee>
 8004b4c:	ff007e0f 	.word	0xff007e0f
 8004b50:	20000004 	.word	0x20000004
 8004b54:	053e2d63 	.word	0x053e2d63
 8004b58:	40010200 	.word	0x40010200
 8004b5c:	40010204 	.word	0x40010204
 8004b60:	40010208 	.word	0x40010208
 8004b64:	4001020c 	.word	0x4001020c
 8004b68:	40010210 	.word	0x40010210
 8004b6c:	40010214 	.word	0x40010214
 8004b70:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8004b74:	6938      	ldr	r0, [r7, #16]
 8004b76:	f7ff fda9 	bl	80046cc <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8004bb8 <HAL_COMP_Init+0x32c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d004      	beq.n	8004b8e <HAL_COMP_Init+0x302>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a0c      	ldr	r2, [pc, #48]	@ (8004bbc <HAL_COMP_Init+0x330>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d103      	bne.n	8004b96 <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8004b8e:	6938      	ldr	r0, [r7, #16]
 8004b90:	f7ff fd64 	bl	800465c <LL_EXTI_DisableIT_32_63>
 8004b94:	e002      	b.n	8004b9c <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8004b96:	6938      	ldr	r0, [r7, #16]
 8004b98:	f7ff fd4c 	bl	8004634 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	7f5b      	ldrb	r3, [r3, #29]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d102      	bne.n	8004bac <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8004bac:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40010214 	.word	0x40010214
 8004bbc:	40010218 	.word	0x40010218

08004bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c04 <__NVIC_SetPriorityGrouping+0x44>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bdc:	4013      	ands	r3, r2
 8004bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004be8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bf2:	4a04      	ldr	r2, [pc, #16]	@ (8004c04 <__NVIC_SetPriorityGrouping+0x44>)
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	60d3      	str	r3, [r2, #12]
}
 8004bf8:	bf00      	nop
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	e000ed00 	.word	0xe000ed00

08004c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c0c:	4b04      	ldr	r3, [pc, #16]	@ (8004c20 <__NVIC_GetPriorityGrouping+0x18>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	0a1b      	lsrs	r3, r3, #8
 8004c12:	f003 0307 	and.w	r3, r3, #7
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	e000ed00 	.word	0xe000ed00

08004c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	db0b      	blt.n	8004c4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	f003 021f 	and.w	r2, r3, #31
 8004c3c:	4907      	ldr	r1, [pc, #28]	@ (8004c5c <__NVIC_EnableIRQ+0x38>)
 8004c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	2001      	movs	r0, #1
 8004c46:	fa00 f202 	lsl.w	r2, r0, r2
 8004c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	e000e100 	.word	0xe000e100

08004c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	4603      	mov	r3, r0
 8004c68:	6039      	str	r1, [r7, #0]
 8004c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	db0a      	blt.n	8004c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	490c      	ldr	r1, [pc, #48]	@ (8004cac <__NVIC_SetPriority+0x4c>)
 8004c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7e:	0112      	lsls	r2, r2, #4
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	440b      	add	r3, r1
 8004c84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c88:	e00a      	b.n	8004ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	4908      	ldr	r1, [pc, #32]	@ (8004cb0 <__NVIC_SetPriority+0x50>)
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	3b04      	subs	r3, #4
 8004c98:	0112      	lsls	r2, r2, #4
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	761a      	strb	r2, [r3, #24]
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	e000e100 	.word	0xe000e100
 8004cb0:	e000ed00 	.word	0xe000ed00

08004cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b089      	sub	sp, #36	@ 0x24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f1c3 0307 	rsb	r3, r3, #7
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	bf28      	it	cs
 8004cd2:	2304      	movcs	r3, #4
 8004cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	2b06      	cmp	r3, #6
 8004cdc:	d902      	bls.n	8004ce4 <NVIC_EncodePriority+0x30>
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	3b03      	subs	r3, #3
 8004ce2:	e000      	b.n	8004ce6 <NVIC_EncodePriority+0x32>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	43da      	mvns	r2, r3
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	401a      	ands	r2, r3
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	fa01 f303 	lsl.w	r3, r1, r3
 8004d06:	43d9      	mvns	r1, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d0c:	4313      	orrs	r3, r2
         );
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3724      	adds	r7, #36	@ 0x24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d2c:	d301      	bcc.n	8004d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e00f      	b.n	8004d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d32:	4a0a      	ldr	r2, [pc, #40]	@ (8004d5c <SysTick_Config+0x40>)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d3a:	210f      	movs	r1, #15
 8004d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d40:	f7ff ff8e 	bl	8004c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d44:	4b05      	ldr	r3, [pc, #20]	@ (8004d5c <SysTick_Config+0x40>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d4a:	4b04      	ldr	r3, [pc, #16]	@ (8004d5c <SysTick_Config+0x40>)
 8004d4c:	2207      	movs	r2, #7
 8004d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	e000e010 	.word	0xe000e010

08004d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff ff29 	bl	8004bc0 <__NVIC_SetPriorityGrouping>
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b086      	sub	sp, #24
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
 8004d82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d84:	f7ff ff40 	bl	8004c08 <__NVIC_GetPriorityGrouping>
 8004d88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	68b9      	ldr	r1, [r7, #8]
 8004d8e:	6978      	ldr	r0, [r7, #20]
 8004d90:	f7ff ff90 	bl	8004cb4 <NVIC_EncodePriority>
 8004d94:	4602      	mov	r2, r0
 8004d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff ff5f 	bl	8004c60 <__NVIC_SetPriority>
}
 8004da2:	bf00      	nop
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b082      	sub	sp, #8
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	4603      	mov	r3, r0
 8004db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff ff33 	bl	8004c24 <__NVIC_EnableIRQ>
}
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff ffa4 	bl	8004d1c <SysTick_Config>
 8004dd4:	4603      	mov	r3, r0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b082      	sub	sp, #8
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e014      	b.n	8004e1a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	791b      	ldrb	r3, [r3, #4]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d105      	bne.n	8004e06 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7fd fd51 	bl	80028a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08a      	sub	sp, #40	@ 0x28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <HAL_DAC_ConfigChannel+0x1c>
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e1a1      	b.n	8005188 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	795b      	ldrb	r3, [r3, #5]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_DAC_ConfigChannel+0x32>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e198      	b.n	8005188 <HAL_DAC_ConfigChannel+0x364>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d17a      	bne.n	8004f60 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004e6a:	f7fe fb9b 	bl	80035a4 <HAL_GetTick>
 8004e6e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d13d      	bne.n	8004ef2 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e76:	e018      	b.n	8004eaa <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e78:	f7fe fb94 	bl	80035a4 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d911      	bls.n	8004eaa <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f043 0208 	orr.w	r2, r3, #8
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2203      	movs	r2, #3
 8004ea4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e16e      	b.n	8005188 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1df      	bne.n	8004e78 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ec0:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ec2:	e020      	b.n	8004f06 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ec4:	f7fe fb6e 	bl	80035a4 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d90f      	bls.n	8004ef2 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	da0a      	bge.n	8004ef2 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f043 0208 	orr.w	r2, r3, #8
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2203      	movs	r2, #3
 8004eec:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e14a      	b.n	8005188 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	dbe3      	blt.n	8004ec4 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f04:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004f16:	fa01 f303 	lsl.w	r3, r1, r3
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	ea02 0103 	and.w	r1, r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f003 0310 	and.w	r3, r3, #16
 8004f40:	21ff      	movs	r1, #255	@ 0xff
 8004f42:	fa01 f303 	lsl.w	r3, r1, r3
 8004f46:	43db      	mvns	r3, r3
 8004f48:	ea02 0103 	and.w	r1, r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	409a      	lsls	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d11d      	bne.n	8004fa4 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	221f      	movs	r2, #31
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f80:	4013      	ands	r3, r2
 8004f82:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	fa02 f303 	lsl.w	r3, r2, r3
 8004f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004faa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	2207      	movs	r2, #7
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d102      	bne.n	8004fce <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	623b      	str	r3, [r7, #32]
 8004fcc:	e00f      	b.n	8004fee <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d102      	bne.n	8004fdc <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	623b      	str	r3, [r7, #32]
 8004fda:	e008      	b.n	8004fee <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d102      	bne.n	8004fea <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	623b      	str	r3, [r7, #32]
 8004fe8:	e001      	b.n	8004fee <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	6a3a      	ldr	r2, [r7, #32]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	43db      	mvns	r3, r3
 800500e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005010:	4013      	ands	r3, r2
 8005012:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	791b      	ldrb	r3, [r3, #4]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d102      	bne.n	8005022 <HAL_DAC_ConfigChannel+0x1fe>
 800501c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005020:	e000      	b.n	8005024 <HAL_DAC_ConfigChannel+0x200>
 8005022:	2300      	movs	r3, #0
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	43db      	mvns	r3, r3
 800503a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800503c:	4013      	ands	r3, r2
 800503e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	795b      	ldrb	r3, [r3, #5]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d102      	bne.n	800504e <HAL_DAC_ConfigChannel+0x22a>
 8005048:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800504c:	e000      	b.n	8005050 <HAL_DAC_ConfigChannel+0x22c>
 800504e:	2300      	movs	r3, #0
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800505c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b02      	cmp	r3, #2
 8005064:	d114      	bne.n	8005090 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005066:	f003 fcb7 	bl	80089d8 <HAL_RCC_GetHCLKFreq>
 800506a:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	4a48      	ldr	r2, [pc, #288]	@ (8005190 <HAL_DAC_ConfigChannel+0x36c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d904      	bls.n	800507e <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800507a:	627b      	str	r3, [r7, #36]	@ 0x24
 800507c:	e00f      	b.n	800509e <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	4a44      	ldr	r2, [pc, #272]	@ (8005194 <HAL_DAC_ConfigChannel+0x370>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d90a      	bls.n	800509c <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800508c:	627b      	str	r3, [r7, #36]	@ 0x24
 800508e:	e006      	b.n	800509e <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005096:	4313      	orrs	r3, r2
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
 800509a:	e000      	b.n	800509e <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800509c:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ac:	4313      	orrs	r3, r2
 80050ae:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6819      	ldr	r1, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	43da      	mvns	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	400a      	ands	r2, r1
 80050d4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	43db      	mvns	r3, r3
 80050ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f0:	4013      	ands	r3, r2
 80050f2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f003 0310 	and.w	r3, r3, #16
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005108:	4313      	orrs	r3, r2
 800510a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005112:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6819      	ldr	r1, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f003 0310 	and.w	r3, r3, #16
 8005120:	22c0      	movs	r2, #192	@ 0xc0
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	43da      	mvns	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	400a      	ands	r2, r1
 800512e:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	089b      	lsrs	r3, r3, #2
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	089b      	lsrs	r3, r3, #2
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f003 0310 	and.w	r3, r3, #16
 800515a:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800515e:	fa01 f303 	lsl.w	r3, r1, r3
 8005162:	43db      	mvns	r3, r3
 8005164:	ea02 0103 	and.w	r1, r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f003 0310 	and.w	r3, r3, #16
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	409a      	lsls	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005186:	7ffb      	ldrb	r3, [r7, #31]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3728      	adds	r7, #40	@ 0x28
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	09896800 	.word	0x09896800
 8005194:	04c4b400 	.word	0x04c4b400

08005198 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e08d      	b.n	80052c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	4b47      	ldr	r3, [pc, #284]	@ (80052d0 <HAL_DMA_Init+0x138>)
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d80f      	bhi.n	80051d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	4b45      	ldr	r3, [pc, #276]	@ (80052d4 <HAL_DMA_Init+0x13c>)
 80051be:	4413      	add	r3, r2
 80051c0:	4a45      	ldr	r2, [pc, #276]	@ (80052d8 <HAL_DMA_Init+0x140>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	091b      	lsrs	r3, r3, #4
 80051c8:	009a      	lsls	r2, r3, #2
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a42      	ldr	r2, [pc, #264]	@ (80052dc <HAL_DMA_Init+0x144>)
 80051d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80051d4:	e00e      	b.n	80051f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	4b40      	ldr	r3, [pc, #256]	@ (80052e0 <HAL_DMA_Init+0x148>)
 80051de:	4413      	add	r3, r2
 80051e0:	4a3d      	ldr	r2, [pc, #244]	@ (80052d8 <HAL_DMA_Init+0x140>)
 80051e2:	fba2 2303 	umull	r2, r3, r2, r3
 80051e6:	091b      	lsrs	r3, r3, #4
 80051e8:	009a      	lsls	r2, r3, #2
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a3c      	ldr	r2, [pc, #240]	@ (80052e4 <HAL_DMA_Init+0x14c>)
 80051f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800520a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800520e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005218:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005224:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005230:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f9b6 	bl	80055b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005254:	d102      	bne.n	800525c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005270:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d010      	beq.n	800529c <HAL_DMA_Init+0x104>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b04      	cmp	r3, #4
 8005280:	d80c      	bhi.n	800529c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f9d6 	bl	8005634 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005298:	605a      	str	r2, [r3, #4]
 800529a:	e008      	b.n	80052ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40020407 	.word	0x40020407
 80052d4:	bffdfff8 	.word	0xbffdfff8
 80052d8:	cccccccd 	.word	0xcccccccd
 80052dc:	40020000 	.word	0x40020000
 80052e0:	bffdfbf8 	.word	0xbffdfbf8
 80052e4:	40020400 	.word	0x40020400

080052e8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_DMA_Start_IT+0x20>
 8005304:	2302      	movs	r3, #2
 8005306:	e066      	b.n	80053d6 <HAL_DMA_Start_IT+0xee>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b01      	cmp	r3, #1
 800531a:	d155      	bne.n	80053c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0201 	bic.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	68b9      	ldr	r1, [r7, #8]
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f8fb 	bl	800553c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534a:	2b00      	cmp	r3, #0
 800534c:	d008      	beq.n	8005360 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 020e 	orr.w	r2, r2, #14
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	e00f      	b.n	8005380 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0204 	bic.w	r2, r2, #4
 800536e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 020a 	orr.w	r2, r2, #10
 800537e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d007      	beq.n	800539e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005398:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800539c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d007      	beq.n	80053b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f042 0201 	orr.w	r2, r2, #1
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	e005      	b.n	80053d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
 80053d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80053d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b084      	sub	sp, #16
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053fa:	f003 031f 	and.w	r3, r3, #31
 80053fe:	2204      	movs	r2, #4
 8005400:	409a      	lsls	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4013      	ands	r3, r2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d026      	beq.n	8005458 <HAL_DMA_IRQHandler+0x7a>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d021      	beq.n	8005458 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b00      	cmp	r3, #0
 8005420:	d107      	bne.n	8005432 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0204 	bic.w	r2, r2, #4
 8005430:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005436:	f003 021f 	and.w	r2, r3, #31
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543e:	2104      	movs	r1, #4
 8005440:	fa01 f202 	lsl.w	r2, r1, r2
 8005444:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544a:	2b00      	cmp	r3, #0
 800544c:	d071      	beq.n	8005532 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005456:	e06c      	b.n	8005532 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545c:	f003 031f 	and.w	r3, r3, #31
 8005460:	2202      	movs	r2, #2
 8005462:	409a      	lsls	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4013      	ands	r3, r2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d02e      	beq.n	80054ca <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d029      	beq.n	80054ca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0320 	and.w	r3, r3, #32
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10b      	bne.n	800549c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 020a 	bic.w	r2, r2, #10
 8005492:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a0:	f003 021f 	and.w	r2, r3, #31
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a8:	2102      	movs	r1, #2
 80054aa:	fa01 f202 	lsl.w	r2, r1, r2
 80054ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d038      	beq.n	8005532 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80054c8:	e033      	b.n	8005532 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ce:	f003 031f 	and.w	r3, r3, #31
 80054d2:	2208      	movs	r2, #8
 80054d4:	409a      	lsls	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d02a      	beq.n	8005534 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d025      	beq.n	8005534 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 020e 	bic.w	r2, r2, #14
 80054f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fc:	f003 021f 	and.w	r2, r3, #31
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005504:	2101      	movs	r1, #1
 8005506:	fa01 f202 	lsl.w	r2, r1, r2
 800550a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005532:	bf00      	nop
 8005534:	bf00      	nop
}
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005552:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005558:	2b00      	cmp	r3, #0
 800555a:	d004      	beq.n	8005566 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005564:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800556a:	f003 021f 	and.w	r2, r3, #31
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005572:	2101      	movs	r1, #1
 8005574:	fa01 f202 	lsl.w	r2, r1, r2
 8005578:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	2b10      	cmp	r3, #16
 8005588:	d108      	bne.n	800559c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800559a:	e007      	b.n	80055ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	60da      	str	r2, [r3, #12]
}
 80055ac:	bf00      	nop
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	4b16      	ldr	r3, [pc, #88]	@ (8005620 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d802      	bhi.n	80055d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80055cc:	4b15      	ldr	r3, [pc, #84]	@ (8005624 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	e001      	b.n	80055d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80055d2:	4b15      	ldr	r3, [pc, #84]	@ (8005628 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80055d4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	3b08      	subs	r3, #8
 80055e2:	4a12      	ldr	r2, [pc, #72]	@ (800562c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80055e4:	fba2 2303 	umull	r2, r3, r2, r3
 80055e8:	091b      	lsrs	r3, r3, #4
 80055ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f0:	089b      	lsrs	r3, r3, #2
 80055f2:	009a      	lsls	r2, r3, #2
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	4413      	add	r3, r2
 80055f8:	461a      	mov	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a0b      	ldr	r2, [pc, #44]	@ (8005630 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005602:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f003 031f 	and.w	r3, r3, #31
 800560a:	2201      	movs	r2, #1
 800560c:	409a      	lsls	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40020407 	.word	0x40020407
 8005624:	40020800 	.word	0x40020800
 8005628:	40020820 	.word	0x40020820
 800562c:	cccccccd 	.word	0xcccccccd
 8005630:	40020880 	.word	0x40020880

08005634 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	b2db      	uxtb	r3, r3
 8005642:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4b0b      	ldr	r3, [pc, #44]	@ (8005674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005648:	4413      	add	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	461a      	mov	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a08      	ldr	r2, [pc, #32]	@ (8005678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005656:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3b01      	subs	r3, #1
 800565c:	f003 031f 	and.w	r3, r3, #31
 8005660:	2201      	movs	r2, #1
 8005662:	409a      	lsls	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005668:	bf00      	nop
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	1000823f 	.word	0x1000823f
 8005678:	40020940 	.word	0x40020940

0800567c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005686:	2300      	movs	r3, #0
 8005688:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800568a:	e15a      	b.n	8005942 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	2101      	movs	r1, #1
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	fa01 f303 	lsl.w	r3, r1, r3
 8005698:	4013      	ands	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 814c 	beq.w	800593c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d005      	beq.n	80056bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d130      	bne.n	800571e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	2203      	movs	r2, #3
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	43db      	mvns	r3, r3
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4013      	ands	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	fa02 f303 	lsl.w	r3, r2, r3
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056f2:	2201      	movs	r2, #1
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	43db      	mvns	r3, r3
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4013      	ands	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	091b      	lsrs	r3, r3, #4
 8005708:	f003 0201 	and.w	r2, r3, #1
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	fa02 f303 	lsl.w	r3, r2, r3
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	2b03      	cmp	r3, #3
 8005728:	d017      	beq.n	800575a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	2203      	movs	r2, #3
 8005736:	fa02 f303 	lsl.w	r3, r2, r3
 800573a:	43db      	mvns	r3, r3
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4013      	ands	r3, r2
 8005740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d123      	bne.n	80057ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	08da      	lsrs	r2, r3, #3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3208      	adds	r2, #8
 800576e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005772:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	220f      	movs	r2, #15
 800577e:	fa02 f303 	lsl.w	r3, r2, r3
 8005782:	43db      	mvns	r3, r3
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	4013      	ands	r3, r2
 8005788:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	fa02 f303 	lsl.w	r3, r2, r3
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	08da      	lsrs	r2, r3, #3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3208      	adds	r2, #8
 80057a8:	6939      	ldr	r1, [r7, #16]
 80057aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	2203      	movs	r2, #3
 80057ba:	fa02 f303 	lsl.w	r3, r2, r3
 80057be:	43db      	mvns	r3, r3
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4013      	ands	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f003 0203 	and.w	r2, r3, #3
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	4313      	orrs	r3, r2
 80057da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 80a6 	beq.w	800593c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057f0:	4b5b      	ldr	r3, [pc, #364]	@ (8005960 <HAL_GPIO_Init+0x2e4>)
 80057f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057f4:	4a5a      	ldr	r2, [pc, #360]	@ (8005960 <HAL_GPIO_Init+0x2e4>)
 80057f6:	f043 0301 	orr.w	r3, r3, #1
 80057fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80057fc:	4b58      	ldr	r3, [pc, #352]	@ (8005960 <HAL_GPIO_Init+0x2e4>)
 80057fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	60bb      	str	r3, [r7, #8]
 8005806:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005808:	4a56      	ldr	r2, [pc, #344]	@ (8005964 <HAL_GPIO_Init+0x2e8>)
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	089b      	lsrs	r3, r3, #2
 800580e:	3302      	adds	r3, #2
 8005810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005814:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f003 0303 	and.w	r3, r3, #3
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	220f      	movs	r2, #15
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	43db      	mvns	r3, r3
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4013      	ands	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005832:	d01f      	beq.n	8005874 <HAL_GPIO_Init+0x1f8>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a4c      	ldr	r2, [pc, #304]	@ (8005968 <HAL_GPIO_Init+0x2ec>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d019      	beq.n	8005870 <HAL_GPIO_Init+0x1f4>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a4b      	ldr	r2, [pc, #300]	@ (800596c <HAL_GPIO_Init+0x2f0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d013      	beq.n	800586c <HAL_GPIO_Init+0x1f0>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a4a      	ldr	r2, [pc, #296]	@ (8005970 <HAL_GPIO_Init+0x2f4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00d      	beq.n	8005868 <HAL_GPIO_Init+0x1ec>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a49      	ldr	r2, [pc, #292]	@ (8005974 <HAL_GPIO_Init+0x2f8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d007      	beq.n	8005864 <HAL_GPIO_Init+0x1e8>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a48      	ldr	r2, [pc, #288]	@ (8005978 <HAL_GPIO_Init+0x2fc>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d101      	bne.n	8005860 <HAL_GPIO_Init+0x1e4>
 800585c:	2305      	movs	r3, #5
 800585e:	e00a      	b.n	8005876 <HAL_GPIO_Init+0x1fa>
 8005860:	2306      	movs	r3, #6
 8005862:	e008      	b.n	8005876 <HAL_GPIO_Init+0x1fa>
 8005864:	2304      	movs	r3, #4
 8005866:	e006      	b.n	8005876 <HAL_GPIO_Init+0x1fa>
 8005868:	2303      	movs	r3, #3
 800586a:	e004      	b.n	8005876 <HAL_GPIO_Init+0x1fa>
 800586c:	2302      	movs	r3, #2
 800586e:	e002      	b.n	8005876 <HAL_GPIO_Init+0x1fa>
 8005870:	2301      	movs	r3, #1
 8005872:	e000      	b.n	8005876 <HAL_GPIO_Init+0x1fa>
 8005874:	2300      	movs	r3, #0
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	f002 0203 	and.w	r2, r2, #3
 800587c:	0092      	lsls	r2, r2, #2
 800587e:	4093      	lsls	r3, r2
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005886:	4937      	ldr	r1, [pc, #220]	@ (8005964 <HAL_GPIO_Init+0x2e8>)
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	089b      	lsrs	r3, r3, #2
 800588c:	3302      	adds	r3, #2
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005894:	4b39      	ldr	r3, [pc, #228]	@ (800597c <HAL_GPIO_Init+0x300>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	43db      	mvns	r3, r3
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	4013      	ands	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80058b8:	4a30      	ldr	r2, [pc, #192]	@ (800597c <HAL_GPIO_Init+0x300>)
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80058be:	4b2f      	ldr	r3, [pc, #188]	@ (800597c <HAL_GPIO_Init+0x300>)
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	43db      	mvns	r3, r3
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4013      	ands	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80058e2:	4a26      	ldr	r2, [pc, #152]	@ (800597c <HAL_GPIO_Init+0x300>)
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80058e8:	4b24      	ldr	r3, [pc, #144]	@ (800597c <HAL_GPIO_Init+0x300>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	43db      	mvns	r3, r3
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4013      	ands	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4313      	orrs	r3, r2
 800590a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800590c:	4a1b      	ldr	r2, [pc, #108]	@ (800597c <HAL_GPIO_Init+0x300>)
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005912:	4b1a      	ldr	r3, [pc, #104]	@ (800597c <HAL_GPIO_Init+0x300>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	43db      	mvns	r3, r3
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4013      	ands	r3, r2
 8005920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4313      	orrs	r3, r2
 8005934:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005936:	4a11      	ldr	r2, [pc, #68]	@ (800597c <HAL_GPIO_Init+0x300>)
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	3301      	adds	r3, #1
 8005940:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	fa22 f303 	lsr.w	r3, r2, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	f47f ae9d 	bne.w	800568c <HAL_GPIO_Init+0x10>
  }
}
 8005952:	bf00      	nop
 8005954:	bf00      	nop
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	40021000 	.word	0x40021000
 8005964:	40010000 	.word	0x40010000
 8005968:	48000400 	.word	0x48000400
 800596c:	48000800 	.word	0x48000800
 8005970:	48000c00 	.word	0x48000c00
 8005974:	48001000 	.word	0x48001000
 8005978:	48001400 	.word	0x48001400
 800597c:	40010400 	.word	0x40010400

08005980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	807b      	strh	r3, [r7, #2]
 800598c:	4613      	mov	r3, r2
 800598e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005990:	787b      	ldrb	r3, [r7, #1]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005996:	887a      	ldrh	r2, [r7, #2]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800599c:	e002      	b.n	80059a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800599e:	887a      	ldrh	r2, [r7, #2]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	4603      	mov	r3, r0
 80059b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80059ba:	4b08      	ldr	r3, [pc, #32]	@ (80059dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059bc:	695a      	ldr	r2, [r3, #20]
 80059be:	88fb      	ldrh	r3, [r7, #6]
 80059c0:	4013      	ands	r3, r2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d006      	beq.n	80059d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059c6:	4a05      	ldr	r2, [pc, #20]	@ (80059dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059c8:	88fb      	ldrh	r3, [r7, #6]
 80059ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059cc:	88fb      	ldrh	r3, [r7, #6]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 f806 	bl	80059e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80059d4:	bf00      	nop
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	40010400 	.word	0x40010400

080059e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	4603      	mov	r3, r0
 80059e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b082      	sub	sp, #8
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e08d      	b.n	8005b24 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d106      	bne.n	8005a22 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7fc ffc3 	bl	80029a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2224      	movs	r2, #36	@ 0x24
 8005a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0201 	bic.w	r2, r2, #1
 8005a38:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005a46:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a56:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d107      	bne.n	8005a70 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a6c:	609a      	str	r2, [r3, #8]
 8005a6e:	e006      	b.n	8005a7e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005a7c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d108      	bne.n	8005a98 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a94:	605a      	str	r2, [r3, #4]
 8005a96:	e007      	b.n	8005aa8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005aa6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6812      	ldr	r2, [r2, #0]
 8005ab2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aba:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68da      	ldr	r2, [r3, #12]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005aca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69d9      	ldr	r1, [r3, #28]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1a      	ldr	r2, [r3, #32]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 0201 	orr.w	r2, r2, #1
 8005b04:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	4608      	mov	r0, r1
 8005b36:	4611      	mov	r1, r2
 8005b38:	461a      	mov	r2, r3
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	817b      	strh	r3, [r7, #10]
 8005b3e:	460b      	mov	r3, r1
 8005b40:	813b      	strh	r3, [r7, #8]
 8005b42:	4613      	mov	r3, r2
 8005b44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b20      	cmp	r3, #32
 8005b50:	f040 80fd 	bne.w	8005d4e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_I2C_Mem_Read+0x34>
 8005b5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d105      	bne.n	8005b6c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b66:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0f1      	b.n	8005d50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <HAL_I2C_Mem_Read+0x4e>
 8005b76:	2302      	movs	r3, #2
 8005b78:	e0ea      	b.n	8005d50 <HAL_I2C_Mem_Read+0x224>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b82:	f7fd fd0f 	bl	80035a4 <HAL_GetTick>
 8005b86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	2319      	movs	r3, #25
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f95b 	bl	8005e50 <I2C_WaitOnFlagUntilTimeout>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e0d5      	b.n	8005d50 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2222      	movs	r2, #34	@ 0x22
 8005ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2240      	movs	r2, #64	@ 0x40
 8005bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6a3a      	ldr	r2, [r7, #32]
 8005bbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bcc:	88f8      	ldrh	r0, [r7, #6]
 8005bce:	893a      	ldrh	r2, [r7, #8]
 8005bd0:	8979      	ldrh	r1, [r7, #10]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	9301      	str	r3, [sp, #4]
 8005bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	4603      	mov	r3, r0
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f8bf 	bl	8005d60 <I2C_RequestMemoryRead>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e0ad      	b.n	8005d50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2bff      	cmp	r3, #255	@ 0xff
 8005bfc:	d90e      	bls.n	8005c1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	22ff      	movs	r2, #255	@ 0xff
 8005c02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	8979      	ldrh	r1, [r7, #10]
 8005c0c:	4b52      	ldr	r3, [pc, #328]	@ (8005d58 <HAL_I2C_Mem_Read+0x22c>)
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 fadf 	bl	80061d8 <I2C_TransferConfig>
 8005c1a:	e00f      	b.n	8005c3c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	8979      	ldrh	r1, [r7, #10]
 8005c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8005d58 <HAL_I2C_Mem_Read+0x22c>)
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 face 	bl	80061d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c42:	2200      	movs	r2, #0
 8005c44:	2104      	movs	r1, #4
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 f902 	bl	8005e50 <I2C_WaitOnFlagUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e07c      	b.n	8005d50 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d034      	beq.n	8005cfc <HAL_I2C_Mem_Read+0x1d0>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d130      	bne.n	8005cfc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2180      	movs	r1, #128	@ 0x80
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 f8d3 	bl	8005e50 <I2C_WaitOnFlagUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e04d      	b.n	8005d50 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2bff      	cmp	r3, #255	@ 0xff
 8005cbc:	d90e      	bls.n	8005cdc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	22ff      	movs	r2, #255	@ 0xff
 8005cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	8979      	ldrh	r1, [r7, #10]
 8005ccc:	2300      	movs	r3, #0
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 fa7f 	bl	80061d8 <I2C_TransferConfig>
 8005cda:	e00f      	b.n	8005cfc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	8979      	ldrh	r1, [r7, #10]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 fa6e 	bl	80061d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d19a      	bne.n	8005c3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f940 	bl	8005f90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e01a      	b.n	8005d50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6859      	ldr	r1, [r3, #4]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d5c <HAL_I2C_Mem_Read+0x230>)
 8005d2e:	400b      	ands	r3, r1
 8005d30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	e000      	b.n	8005d50 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005d4e:	2302      	movs	r3, #2
  }
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	80002400 	.word	0x80002400
 8005d5c:	fe00e800 	.word	0xfe00e800

08005d60 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	4608      	mov	r0, r1
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	4603      	mov	r3, r0
 8005d70:	817b      	strh	r3, [r7, #10]
 8005d72:	460b      	mov	r3, r1
 8005d74:	813b      	strh	r3, [r7, #8]
 8005d76:	4613      	mov	r3, r2
 8005d78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d7a:	88fb      	ldrh	r3, [r7, #6]
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	8979      	ldrh	r1, [r7, #10]
 8005d80:	4b20      	ldr	r3, [pc, #128]	@ (8005e04 <I2C_RequestMemoryRead+0xa4>)
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	2300      	movs	r3, #0
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 fa26 	bl	80061d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d8c:	69fa      	ldr	r2, [r7, #28]
 8005d8e:	69b9      	ldr	r1, [r7, #24]
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 f8b6 	bl	8005f02 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e02c      	b.n	8005dfa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005da0:	88fb      	ldrh	r3, [r7, #6]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d105      	bne.n	8005db2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005da6:	893b      	ldrh	r3, [r7, #8]
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	629a      	str	r2, [r3, #40]	@ 0x28
 8005db0:	e015      	b.n	8005dde <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005db2:	893b      	ldrh	r3, [r7, #8]
 8005db4:	0a1b      	lsrs	r3, r3, #8
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dc0:	69fa      	ldr	r2, [r7, #28]
 8005dc2:	69b9      	ldr	r1, [r7, #24]
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 f89c 	bl	8005f02 <I2C_WaitOnTXISFlagUntilTimeout>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e012      	b.n	8005dfa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dd4:	893b      	ldrh	r3, [r7, #8]
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	2200      	movs	r2, #0
 8005de6:	2140      	movs	r1, #64	@ 0x40
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 f831 	bl	8005e50 <I2C_WaitOnFlagUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	80002000 	.word	0x80002000

08005e08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d103      	bne.n	8005e26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2200      	movs	r2, #0
 8005e24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d007      	beq.n	8005e44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0201 	orr.w	r2, r2, #1
 8005e42:	619a      	str	r2, [r3, #24]
  }
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e60:	e03b      	b.n	8005eda <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	6839      	ldr	r1, [r7, #0]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 f8d6 	bl	8006018 <I2C_IsErrorOccurred>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e041      	b.n	8005efa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7c:	d02d      	beq.n	8005eda <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e7e:	f7fd fb91 	bl	80035a4 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d302      	bcc.n	8005e94 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d122      	bne.n	8005eda <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699a      	ldr	r2, [r3, #24]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	bf0c      	ite	eq
 8005ea4:	2301      	moveq	r3, #1
 8005ea6:	2300      	movne	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	461a      	mov	r2, r3
 8005eac:	79fb      	ldrb	r3, [r7, #7]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d113      	bne.n	8005eda <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb6:	f043 0220 	orr.w	r2, r3, #32
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e00f      	b.n	8005efa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699a      	ldr	r2, [r3, #24]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	bf0c      	ite	eq
 8005eea:	2301      	moveq	r3, #1
 8005eec:	2300      	movne	r3, #0
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	79fb      	ldrb	r3, [r7, #7]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d0b4      	beq.n	8005e62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b084      	sub	sp, #16
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	60f8      	str	r0, [r7, #12]
 8005f0a:	60b9      	str	r1, [r7, #8]
 8005f0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f0e:	e033      	b.n	8005f78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	68b9      	ldr	r1, [r7, #8]
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 f87f 	bl	8006018 <I2C_IsErrorOccurred>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e031      	b.n	8005f88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2a:	d025      	beq.n	8005f78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f2c:	f7fd fb3a 	bl	80035a4 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d302      	bcc.n	8005f42 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d11a      	bne.n	8005f78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d013      	beq.n	8005f78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f54:	f043 0220 	orr.w	r2, r3, #32
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e007      	b.n	8005f88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d1c4      	bne.n	8005f10 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f9c:	e02f      	b.n	8005ffe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	68b9      	ldr	r1, [r7, #8]
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 f838 	bl	8006018 <I2C_IsErrorOccurred>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e02d      	b.n	800600e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fb2:	f7fd faf7 	bl	80035a4 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d302      	bcc.n	8005fc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d11a      	bne.n	8005ffe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b20      	cmp	r3, #32
 8005fd4:	d013      	beq.n	8005ffe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fda:	f043 0220 	orr.w	r2, r3, #32
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e007      	b.n	800600e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b20      	cmp	r3, #32
 800600a:	d1c8      	bne.n	8005f9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
	...

08006018 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08a      	sub	sp, #40	@ 0x28
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006024:	2300      	movs	r3, #0
 8006026:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006032:	2300      	movs	r3, #0
 8006034:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	f003 0310 	and.w	r3, r3, #16
 8006040:	2b00      	cmp	r3, #0
 8006042:	d068      	beq.n	8006116 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2210      	movs	r2, #16
 800604a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800604c:	e049      	b.n	80060e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006054:	d045      	beq.n	80060e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006056:	f7fd faa5 	bl	80035a4 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	429a      	cmp	r2, r3
 8006064:	d302      	bcc.n	800606c <I2C_IsErrorOccurred+0x54>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d13a      	bne.n	80060e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006076:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800607e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800608a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800608e:	d121      	bne.n	80060d4 <I2C_IsErrorOccurred+0xbc>
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006096:	d01d      	beq.n	80060d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006098:	7cfb      	ldrb	r3, [r7, #19]
 800609a:	2b20      	cmp	r3, #32
 800609c:	d01a      	beq.n	80060d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80060ae:	f7fd fa79 	bl	80035a4 <HAL_GetTick>
 80060b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060b4:	e00e      	b.n	80060d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80060b6:	f7fd fa75 	bl	80035a4 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	2b19      	cmp	r3, #25
 80060c2:	d907      	bls.n	80060d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	f043 0320 	orr.w	r3, r3, #32
 80060ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80060d2:	e006      	b.n	80060e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b20      	cmp	r3, #32
 80060e0:	d1e9      	bne.n	80060b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d003      	beq.n	80060f8 <I2C_IsErrorOccurred+0xe0>
 80060f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0aa      	beq.n	800604e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80060f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d103      	bne.n	8006108 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2220      	movs	r2, #32
 8006106:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	f043 0304 	orr.w	r3, r3, #4
 800610e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00b      	beq.n	8006140 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006128:	6a3b      	ldr	r3, [r7, #32]
 800612a:	f043 0301 	orr.w	r3, r3, #1
 800612e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006138:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00b      	beq.n	8006162 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	f043 0308 	orr.w	r3, r3, #8
 8006150:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800615a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00b      	beq.n	8006184 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	f043 0302 	orr.w	r3, r3, #2
 8006172:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800617c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006188:	2b00      	cmp	r3, #0
 800618a:	d01c      	beq.n	80061c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f7ff fe3b 	bl	8005e08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6859      	ldr	r1, [r3, #4]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	4b0d      	ldr	r3, [pc, #52]	@ (80061d4 <I2C_IsErrorOccurred+0x1bc>)
 800619e:	400b      	ands	r3, r1
 80061a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	431a      	orrs	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80061c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3728      	adds	r7, #40	@ 0x28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	fe00e800 	.word	0xfe00e800

080061d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	607b      	str	r3, [r7, #4]
 80061e2:	460b      	mov	r3, r1
 80061e4:	817b      	strh	r3, [r7, #10]
 80061e6:	4613      	mov	r3, r2
 80061e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061ea:	897b      	ldrh	r3, [r7, #10]
 80061ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80061f0:	7a7b      	ldrb	r3, [r7, #9]
 80061f2:	041b      	lsls	r3, r3, #16
 80061f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	4313      	orrs	r3, r2
 8006202:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006206:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	0d5b      	lsrs	r3, r3, #21
 8006212:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006216:	4b08      	ldr	r3, [pc, #32]	@ (8006238 <I2C_TransferConfig+0x60>)
 8006218:	430b      	orrs	r3, r1
 800621a:	43db      	mvns	r3, r3
 800621c:	ea02 0103 	and.w	r1, r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800622a:	bf00      	nop
 800622c:	371c      	adds	r7, #28
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	03ff63ff 	.word	0x03ff63ff

0800623c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b20      	cmp	r3, #32
 8006250:	d138      	bne.n	80062c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800625c:	2302      	movs	r3, #2
 800625e:	e032      	b.n	80062c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2224      	movs	r2, #36	@ 0x24
 800626c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 0201 	bic.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800628e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6819      	ldr	r1, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0201 	orr.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	e000      	b.n	80062c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062c4:	2302      	movs	r3, #2
  }
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b085      	sub	sp, #20
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d139      	bne.n	800635c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d101      	bne.n	80062f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80062f2:	2302      	movs	r3, #2
 80062f4:	e033      	b.n	800635e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2224      	movs	r2, #36	@ 0x24
 8006302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 0201 	bic.w	r2, r2, #1
 8006314:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006324:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4313      	orrs	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0201 	orr.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2220      	movs	r2, #32
 800634c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006358:	2300      	movs	r3, #0
 800635a:	e000      	b.n	800635e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800635c:	2302      	movs	r3, #2
  }
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
	...

0800636c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e0bb      	b.n	80064fa <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b05      	cmp	r3, #5
 800638c:	d101      	bne.n	8006392 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e0b3      	b.n	80064fa <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d101      	bne.n	80063a2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e0ab      	b.n	80064fa <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063a2:	4b58      	ldr	r3, [pc, #352]	@ (8006504 <HAL_OPAMP_Init+0x198>)
 80063a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063a6:	4a57      	ldr	r2, [pc, #348]	@ (8006504 <HAL_OPAMP_Init+0x198>)
 80063a8:	f043 0301 	orr.w	r3, r3, #1
 80063ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80063ae:	4b55      	ldr	r3, [pc, #340]	@ (8006504 <HAL_OPAMP_Init+0x198>)
 80063b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	60bb      	str	r3, [r7, #8]
 80063b8:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d103      	bne.n	80063ce <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7fc fb9e 	bl	8002b10 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	2b40      	cmp	r3, #64	@ 0x40
 80063da:	d003      	beq.n	80063e4 <HAL_OPAMP_Init+0x78>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	2b60      	cmp	r3, #96	@ 0x60
 80063e2:	d133      	bne.n	800644c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f023 0110 	bic.w	r1, r3, #16
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	4b41      	ldr	r3, [pc, #260]	@ (8006508 <HAL_OPAMP_Init+0x19c>)
 8006402:	4013      	ands	r3, r2
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6851      	ldr	r1, [r2, #4]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6892      	ldr	r2, [r2, #8]
 800640c:	4311      	orrs	r1, r2
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6912      	ldr	r2, [r2, #16]
 8006412:	430a      	orrs	r2, r1
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	7d09      	ldrb	r1, [r1, #20]
 8006418:	2901      	cmp	r1, #1
 800641a:	d102      	bne.n	8006422 <HAL_OPAMP_Init+0xb6>
 800641c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006420:	e000      	b.n	8006424 <HAL_OPAMP_Init+0xb8>
 8006422:	2100      	movs	r1, #0
 8006424:	4311      	orrs	r1, r2
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800642a:	4311      	orrs	r1, r2
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006430:	4311      	orrs	r1, r2
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006436:	04d2      	lsls	r2, r2, #19
 8006438:	4311      	orrs	r1, r2
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800643e:	0612      	lsls	r2, r2, #24
 8006440:	4311      	orrs	r1, r2
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	430b      	orrs	r3, r1
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	e035      	b.n	80064b8 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f023 0110 	bic.w	r1, r3, #16
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	4b27      	ldr	r3, [pc, #156]	@ (8006508 <HAL_OPAMP_Init+0x19c>)
 800646a:	4013      	ands	r3, r2
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6851      	ldr	r1, [r2, #4]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6892      	ldr	r2, [r2, #8]
 8006474:	4311      	orrs	r1, r2
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	68d2      	ldr	r2, [r2, #12]
 800647a:	4311      	orrs	r1, r2
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	6912      	ldr	r2, [r2, #16]
 8006480:	430a      	orrs	r2, r1
 8006482:	6879      	ldr	r1, [r7, #4]
 8006484:	7d09      	ldrb	r1, [r1, #20]
 8006486:	2901      	cmp	r1, #1
 8006488:	d102      	bne.n	8006490 <HAL_OPAMP_Init+0x124>
 800648a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800648e:	e000      	b.n	8006492 <HAL_OPAMP_Init+0x126>
 8006490:	2100      	movs	r1, #0
 8006492:	4311      	orrs	r1, r2
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006498:	4311      	orrs	r1, r2
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800649e:	4311      	orrs	r1, r2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80064a4:	04d2      	lsls	r2, r2, #19
 80064a6:	4311      	orrs	r1, r2
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80064ac:	0612      	lsls	r2, r2, #24
 80064ae:	4311      	orrs	r1, r2
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	6812      	ldr	r2, [r2, #0]
 80064b4:	430b      	orrs	r3, r1
 80064b6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	db10      	blt.n	80064e4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	699a      	ldr	r2, [r3, #24]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	431a      	orrs	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	431a      	orrs	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d103      	bne.n	80064f8 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	40021000 	.word	0x40021000
 8006508:	e0003e11 	.word	0xe0003e11

0800650c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e0c0      	b.n	80066a0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f009 f846 	bl	800f5c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2203      	movs	r2, #3
 800653c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4618      	mov	r0, r3
 8006546:	f005 fbca 	bl	800bcde <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800654a:	2300      	movs	r3, #0
 800654c:	73fb      	strb	r3, [r7, #15]
 800654e:	e03e      	b.n	80065ce <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006550:	7bfa      	ldrb	r2, [r7, #15]
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	440b      	add	r3, r1
 800655e:	3311      	adds	r3, #17
 8006560:	2201      	movs	r2, #1
 8006562:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006564:	7bfa      	ldrb	r2, [r7, #15]
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	4613      	mov	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	440b      	add	r3, r1
 8006572:	3310      	adds	r3, #16
 8006574:	7bfa      	ldrb	r2, [r7, #15]
 8006576:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006578:	7bfa      	ldrb	r2, [r7, #15]
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	4613      	mov	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	440b      	add	r3, r1
 8006586:	3313      	adds	r3, #19
 8006588:	2200      	movs	r2, #0
 800658a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800658c:	7bfa      	ldrb	r2, [r7, #15]
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	4613      	mov	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	440b      	add	r3, r1
 800659a:	3320      	adds	r3, #32
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80065a0:	7bfa      	ldrb	r2, [r7, #15]
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	4613      	mov	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	440b      	add	r3, r1
 80065ae:	3324      	adds	r3, #36	@ 0x24
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	4613      	mov	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	440b      	add	r3, r1
 80065c4:	2200      	movs	r2, #0
 80065c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	3301      	adds	r3, #1
 80065cc:	73fb      	strb	r3, [r7, #15]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	791b      	ldrb	r3, [r3, #4]
 80065d2:	7bfa      	ldrb	r2, [r7, #15]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d3bb      	bcc.n	8006550 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065d8:	2300      	movs	r3, #0
 80065da:	73fb      	strb	r3, [r7, #15]
 80065dc:	e044      	b.n	8006668 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80065de:	7bfa      	ldrb	r2, [r7, #15]
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	4613      	mov	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	00db      	lsls	r3, r3, #3
 80065ea:	440b      	add	r3, r1
 80065ec:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80065f0:	2200      	movs	r2, #0
 80065f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80065f4:	7bfa      	ldrb	r2, [r7, #15]
 80065f6:	6879      	ldr	r1, [r7, #4]
 80065f8:	4613      	mov	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	440b      	add	r3, r1
 8006602:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006606:	7bfa      	ldrb	r2, [r7, #15]
 8006608:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800660a:	7bfa      	ldrb	r2, [r7, #15]
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	4613      	mov	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	440b      	add	r3, r1
 8006618:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800661c:	2200      	movs	r2, #0
 800661e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006620:	7bfa      	ldrb	r2, [r7, #15]
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	440b      	add	r3, r1
 800662e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006632:	2200      	movs	r2, #0
 8006634:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006636:	7bfa      	ldrb	r2, [r7, #15]
 8006638:	6879      	ldr	r1, [r7, #4]
 800663a:	4613      	mov	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	00db      	lsls	r3, r3, #3
 8006642:	440b      	add	r3, r1
 8006644:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800664c:	7bfa      	ldrb	r2, [r7, #15]
 800664e:	6879      	ldr	r1, [r7, #4]
 8006650:	4613      	mov	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	440b      	add	r3, r1
 800665a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006662:	7bfb      	ldrb	r3, [r7, #15]
 8006664:	3301      	adds	r3, #1
 8006666:	73fb      	strb	r3, [r7, #15]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	791b      	ldrb	r3, [r3, #4]
 800666c:	7bfa      	ldrb	r2, [r7, #15]
 800666e:	429a      	cmp	r2, r3
 8006670:	d3b5      	bcc.n	80065de <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	3304      	adds	r3, #4
 800667a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800667e:	f005 fb49 	bl	800bd14 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	7a9b      	ldrb	r3, [r3, #10]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d102      	bne.n	800669e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f001 fc0e 	bl	8007eba <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d101      	bne.n	80066be <HAL_PCD_Start+0x16>
 80066ba:	2302      	movs	r3, #2
 80066bc:	e012      	b.n	80066e4 <HAL_PCD_Start+0x3c>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f005 faf0 	bl	800bcb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f007 f8cd 	bl	800d874 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f007 f8d2 	bl	800d8a2 <USB_ReadInterrupts>
 80066fe:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fb06 	bl	8006d1c <PCD_EP_ISR_Handler>

    return;
 8006710:	e110      	b.n	8006934 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006718:	2b00      	cmp	r3, #0
 800671a:	d013      	beq.n	8006744 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006724:	b29a      	uxth	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800672e:	b292      	uxth	r2, r2
 8006730:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f008 ffd6 	bl	800f6e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800673a:	2100      	movs	r1, #0
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f8fc 	bl	800693a <HAL_PCD_SetAddress>

    return;
 8006742:	e0f7      	b.n	8006934 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00c      	beq.n	8006768 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006756:	b29a      	uxth	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006760:	b292      	uxth	r2, r2
 8006762:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006766:	e0e5      	b.n	8006934 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00c      	beq.n	800678c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800677a:	b29a      	uxth	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006784:	b292      	uxth	r2, r2
 8006786:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800678a:	e0d3      	b.n	8006934 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d034      	beq.n	8006800 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800679e:	b29a      	uxth	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0204 	bic.w	r2, r2, #4
 80067a8:	b292      	uxth	r2, r2
 80067aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0208 	bic.w	r2, r2, #8
 80067c0:	b292      	uxth	r2, r2
 80067c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d107      	bne.n	80067e0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80067d8:	2100      	movs	r1, #0
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f009 f976 	bl	800facc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f008 ffb9 	bl	800f758 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80067f8:	b292      	uxth	r2, r2
 80067fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80067fe:	e099      	b.n	8006934 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006806:	2b00      	cmp	r3, #0
 8006808:	d027      	beq.n	800685a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006812:	b29a      	uxth	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f042 0208 	orr.w	r2, r2, #8
 800681c:	b292      	uxth	r2, r2
 800681e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800682a:	b29a      	uxth	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006834:	b292      	uxth	r2, r2
 8006836:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006842:	b29a      	uxth	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f042 0204 	orr.w	r2, r2, #4
 800684c:	b292      	uxth	r2, r2
 800684e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f008 ff66 	bl	800f724 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006858:	e06c      	b.n	8006934 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006860:	2b00      	cmp	r3, #0
 8006862:	d040      	beq.n	80068e6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800686c:	b29a      	uxth	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006876:	b292      	uxth	r2, r2
 8006878:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006882:	2b00      	cmp	r3, #0
 8006884:	d12b      	bne.n	80068de <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800688e:	b29a      	uxth	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0204 	orr.w	r2, r2, #4
 8006898:	b292      	uxth	r2, r2
 800689a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f042 0208 	orr.w	r2, r2, #8
 80068b0:	b292      	uxth	r2, r2
 80068b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	089b      	lsrs	r3, r3, #2
 80068ca:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80068d4:	2101      	movs	r1, #1
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f009 f8f8 	bl	800facc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80068dc:	e02a      	b.n	8006934 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f008 ff20 	bl	800f724 <HAL_PCD_SuspendCallback>
    return;
 80068e4:	e026      	b.n	8006934 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00f      	beq.n	8006910 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006902:	b292      	uxth	r2, r2
 8006904:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f008 fede 	bl	800f6ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800690e:	e011      	b.n	8006934 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00c      	beq.n	8006934 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006922:	b29a      	uxth	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800692c:	b292      	uxth	r2, r2
 800692e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006932:	bf00      	nop
  }
}
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b082      	sub	sp, #8
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800694c:	2b01      	cmp	r3, #1
 800694e:	d101      	bne.n	8006954 <HAL_PCD_SetAddress+0x1a>
 8006950:	2302      	movs	r3, #2
 8006952:	e012      	b.n	800697a <HAL_PCD_SetAddress+0x40>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	78fa      	ldrb	r2, [r7, #3]
 8006960:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	78fa      	ldrb	r2, [r7, #3]
 8006968:	4611      	mov	r1, r2
 800696a:	4618      	mov	r0, r3
 800696c:	f006 ff6e 	bl	800d84c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b084      	sub	sp, #16
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
 800698a:	4608      	mov	r0, r1
 800698c:	4611      	mov	r1, r2
 800698e:	461a      	mov	r2, r3
 8006990:	4603      	mov	r3, r0
 8006992:	70fb      	strb	r3, [r7, #3]
 8006994:	460b      	mov	r3, r1
 8006996:	803b      	strh	r3, [r7, #0]
 8006998:	4613      	mov	r3, r2
 800699a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	da0e      	bge.n	80069c6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	f003 0207 	and.w	r2, r3, #7
 80069ae:	4613      	mov	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	00db      	lsls	r3, r3, #3
 80069b6:	3310      	adds	r3, #16
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	4413      	add	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	705a      	strb	r2, [r3, #1]
 80069c4:	e00e      	b.n	80069e4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069c6:	78fb      	ldrb	r3, [r7, #3]
 80069c8:	f003 0207 	and.w	r2, r3, #7
 80069cc:	4613      	mov	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	4413      	add	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80069f0:	883b      	ldrh	r3, [r7, #0]
 80069f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	78ba      	ldrb	r2, [r7, #2]
 80069fe:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006a00:	78bb      	ldrb	r3, [r7, #2]
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d102      	bne.n	8006a0c <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d101      	bne.n	8006a1a <HAL_PCD_EP_Open+0x98>
 8006a16:	2302      	movs	r3, #2
 8006a18:	e00e      	b.n	8006a38 <HAL_PCD_EP_Open+0xb6>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68f9      	ldr	r1, [r7, #12]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f005 f991 	bl	800bd50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8006a36:	7afb      	ldrb	r3, [r7, #11]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	da0e      	bge.n	8006a72 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	f003 0207 	and.w	r2, r3, #7
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	3310      	adds	r3, #16
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	4413      	add	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	705a      	strb	r2, [r3, #1]
 8006a70:	e00e      	b.n	8006a90 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a72:	78fb      	ldrb	r3, [r7, #3]
 8006a74:	f003 0207 	and.w	r2, r3, #7
 8006a78:	4613      	mov	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	4413      	add	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_PCD_EP_Close+0x6a>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e00e      	b.n	8006ac8 <HAL_PCD_EP_Close+0x88>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68f9      	ldr	r1, [r7, #12]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f005 fe31 	bl	800c720 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	607a      	str	r2, [r7, #4]
 8006ada:	603b      	str	r3, [r7, #0]
 8006adc:	460b      	mov	r3, r1
 8006ade:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ae0:	7afb      	ldrb	r3, [r7, #11]
 8006ae2:	f003 0207 	and.w	r2, r3, #7
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	00db      	lsls	r3, r3, #3
 8006aee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	4413      	add	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2200      	movs	r2, #0
 8006b08:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b10:	7afb      	ldrb	r3, [r7, #11]
 8006b12:	f003 0307 	and.w	r3, r3, #7
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6979      	ldr	r1, [r7, #20]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f005 ffe9 	bl	800cafa <USB_EPStartXfer>

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006b3e:	78fb      	ldrb	r3, [r7, #3]
 8006b40:	f003 0207 	and.w	r2, r3, #7
 8006b44:	6879      	ldr	r1, [r7, #4]
 8006b46:	4613      	mov	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	00db      	lsls	r3, r3, #3
 8006b4e:	440b      	add	r3, r1
 8006b50:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8006b54:	681b      	ldr	r3, [r3, #0]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b086      	sub	sp, #24
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b72:	7afb      	ldrb	r3, [r7, #11]
 8006b74:	f003 0207 	and.w	r2, r3, #7
 8006b78:	4613      	mov	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	00db      	lsls	r3, r3, #3
 8006b80:	3310      	adds	r3, #16
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4413      	add	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	2201      	movs	r2, #1
 8006bac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bae:	7afb      	ldrb	r3, [r7, #11]
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6979      	ldr	r1, [r7, #20]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f005 ff9a 	bl	800cafa <USB_EPStartXfer>

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3718      	adds	r7, #24
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006bdc:	78fb      	ldrb	r3, [r7, #3]
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	7912      	ldrb	r2, [r2, #4]
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d901      	bls.n	8006bee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e03e      	b.n	8006c6c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006bee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	da0e      	bge.n	8006c14 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	f003 0207 	and.w	r2, r3, #7
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	3310      	adds	r3, #16
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	4413      	add	r3, r2
 8006c0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	705a      	strb	r2, [r3, #1]
 8006c12:	e00c      	b.n	8006c2e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006c14:	78fa      	ldrb	r2, [r7, #3]
 8006c16:	4613      	mov	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	00db      	lsls	r3, r3, #3
 8006c1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	4413      	add	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c34:	78fb      	ldrb	r3, [r7, #3]
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d101      	bne.n	8006c4e <HAL_PCD_EP_SetStall+0x7e>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e00e      	b.n	8006c6c <HAL_PCD_EP_SetStall+0x9c>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68f9      	ldr	r1, [r7, #12]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f006 fcfb 	bl	800d658 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006c80:	78fb      	ldrb	r3, [r7, #3]
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	7912      	ldrb	r2, [r2, #4]
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d901      	bls.n	8006c92 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e040      	b.n	8006d14 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	da0e      	bge.n	8006cb8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c9a:	78fb      	ldrb	r3, [r7, #3]
 8006c9c:	f003 0207 	and.w	r2, r3, #7
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	3310      	adds	r3, #16
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	4413      	add	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	705a      	strb	r2, [r3, #1]
 8006cb6:	e00e      	b.n	8006cd6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	f003 0207 	and.w	r2, r3, #7
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	00db      	lsls	r3, r3, #3
 8006cc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	4413      	add	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cdc:	78fb      	ldrb	r3, [r7, #3]
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d101      	bne.n	8006cf6 <HAL_PCD_EP_ClrStall+0x82>
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	e00e      	b.n	8006d14 <HAL_PCD_EP_ClrStall+0xa0>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68f9      	ldr	r1, [r7, #12]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f006 fcf8 	bl	800d6fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b092      	sub	sp, #72	@ 0x48
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006d24:	e333      	b.n	800738e <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006d2e:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006d30:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	f003 030f 	and.w	r3, r3, #15
 8006d38:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8006d3c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f040 8108 	bne.w	8006f56 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006d46:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006d48:	f003 0310 	and.w	r3, r3, #16
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d14c      	bne.n	8006dea <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006d5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d60:	813b      	strh	r3, [r7, #8]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	893b      	ldrh	r3, [r7, #8]
 8006d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3310      	adds	r3, #16
 8006d78:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	461a      	mov	r2, r3
 8006d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	00db      	lsls	r3, r3, #3
 8006d8c:	4413      	add	r3, r2
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	6812      	ldr	r2, [r2, #0]
 8006d92:	4413      	add	r3, r2
 8006d94:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006d9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006da0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006da4:	695a      	ldr	r2, [r3, #20]
 8006da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	441a      	add	r2, r3
 8006dac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dae:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006db0:	2100      	movs	r1, #0
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f008 fc6f 	bl	800f696 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	7b1b      	ldrb	r3, [r3, #12]
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 82e5 	beq.w	800738e <PCD_EP_ISR_Handler+0x672>
 8006dc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f040 82e0 	bne.w	800738e <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	7b1b      	ldrb	r3, [r3, #12]
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	731a      	strb	r2, [r3, #12]
 8006de8:	e2d1      	b.n	800738e <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006df0:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006dfa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006dfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d032      	beq.n	8006e6a <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	461a      	mov	r2, r3
 8006e10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	00db      	lsls	r3, r3, #3
 8006e16:	4413      	add	r3, r2
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6812      	ldr	r2, [r2, #0]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006e28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e2a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6818      	ldr	r0, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8006e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e38:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006e3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e3c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	f006 fd81 	bl	800d946 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006e50:	4013      	ands	r3, r2
 8006e52:	817b      	strh	r3, [r7, #10]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	897a      	ldrh	r2, [r7, #10]
 8006e5a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006e5e:	b292      	uxth	r2, r2
 8006e60:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f008 fbea 	bl	800f63c <HAL_PCD_SetupStageCallback>
 8006e68:	e291      	b.n	800738e <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006e6a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f280 828d 	bge.w	800738e <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006e80:	4013      	ands	r3, r2
 8006e82:	81fb      	strh	r3, [r7, #14]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	89fa      	ldrh	r2, [r7, #14]
 8006e8a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006e8e:	b292      	uxth	r2, r2
 8006e90:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	4413      	add	r3, r2
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	6812      	ldr	r2, [r2, #0]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006eb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006eb8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d019      	beq.n	8006ef6 <PCD_EP_ISR_Handler+0x1da>
 8006ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d015      	beq.n	8006ef6 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6818      	ldr	r0, [r3, #0]
 8006ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ed0:	6959      	ldr	r1, [r3, #20]
 8006ed2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ed4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ed8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	f006 fd33 	bl	800d946 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006ee0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ee2:	695a      	ldr	r2, [r3, #20]
 8006ee4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	441a      	add	r2, r3
 8006eea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006eec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006eee:	2100      	movs	r1, #0
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f008 fbb5 	bl	800f660 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006efe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f040 8242 	bne.w	800738e <PCD_EP_ISR_Handler+0x672>
 8006f0a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f0c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006f10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f14:	f000 823b 	beq.w	800738e <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f28:	81bb      	strh	r3, [r7, #12]
 8006f2a:	89bb      	ldrh	r3, [r7, #12]
 8006f2c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006f30:	81bb      	strh	r3, [r7, #12]
 8006f32:	89bb      	ldrh	r3, [r7, #12]
 8006f34:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006f38:	81bb      	strh	r3, [r7, #12]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	89bb      	ldrh	r3, [r7, #12]
 8006f40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	8013      	strh	r3, [r2, #0]
 8006f54:	e21b      	b.n	800738e <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006f68:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f280 80f1 	bge.w	8007154 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006f88:	4013      	ands	r3, r2
 8006f8a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	461a      	mov	r2, r3
 8006f92:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006f9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006fa0:	b292      	uxth	r2, r2
 8006fa2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006fa4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006fa8:	4613      	mov	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fbc:	7b1b      	ldrb	r3, [r3, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d123      	bne.n	800700a <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	461a      	mov	r2, r3
 8006fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	4413      	add	r3, r2
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6812      	ldr	r2, [r2, #0]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fe6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8006fea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 808b 	beq.w	800710a <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6818      	ldr	r0, [r3, #0]
 8006ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ffa:	6959      	ldr	r1, [r3, #20]
 8006ffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ffe:	88da      	ldrh	r2, [r3, #6]
 8007000:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007004:	f006 fc9f 	bl	800d946 <USB_ReadPMA>
 8007008:	e07f      	b.n	800710a <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800700a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800700c:	78db      	ldrb	r3, [r3, #3]
 800700e:	2b02      	cmp	r3, #2
 8007010:	d109      	bne.n	8007026 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007012:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007014:	461a      	mov	r2, r3
 8007016:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f9c6 	bl	80073aa <HAL_PCD_EP_DB_Receive>
 800701e:	4603      	mov	r3, r0
 8007020:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007024:	e071      	b.n	800710a <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	b29b      	uxth	r3, r3
 8007038:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800703c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007040:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	441a      	add	r2, r3
 8007050:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007052:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007056:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800705a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800705e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007062:	b29b      	uxth	r3, r3
 8007064:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	b29b      	uxth	r3, r3
 8007078:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d022      	beq.n	80070c6 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007088:	b29b      	uxth	r3, r3
 800708a:	461a      	mov	r2, r3
 800708c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	4413      	add	r3, r2
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	6812      	ldr	r2, [r2, #0]
 8007098:	4413      	add	r3, r2
 800709a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070a4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80070a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d02c      	beq.n	800710a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6818      	ldr	r0, [r3, #0]
 80070b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070b6:	6959      	ldr	r1, [r3, #20]
 80070b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070ba:	891a      	ldrh	r2, [r3, #8]
 80070bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80070c0:	f006 fc41 	bl	800d946 <USB_ReadPMA>
 80070c4:	e021      	b.n	800710a <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	461a      	mov	r2, r3
 80070d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	4413      	add	r3, r2
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	6812      	ldr	r2, [r2, #0]
 80070de:	4413      	add	r3, r2
 80070e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80070ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d009      	beq.n	800710a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6818      	ldr	r0, [r3, #0]
 80070fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070fc:	6959      	ldr	r1, [r3, #20]
 80070fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007100:	895a      	ldrh	r2, [r3, #10]
 8007102:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007106:	f006 fc1e 	bl	800d946 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800710a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800710c:	69da      	ldr	r2, [r3, #28]
 800710e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007112:	441a      	add	r2, r3
 8007114:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007116:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800711a:	695a      	ldr	r2, [r3, #20]
 800711c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007120:	441a      	add	r2, r3
 8007122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007124:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <PCD_EP_ISR_Handler+0x41e>
 800712e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	429a      	cmp	r2, r3
 8007138:	d206      	bcs.n	8007148 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800713a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f008 fa8d 	bl	800f660 <HAL_PCD_DataOutStageCallback>
 8007146:	e005      	b.n	8007154 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800714e:	4618      	mov	r0, r3
 8007150:	f005 fcd3 	bl	800cafa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007154:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 8117 	beq.w	800738e <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8007160:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007164:	4613      	mov	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	3310      	adds	r3, #16
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	4413      	add	r3, r2
 8007172:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	461a      	mov	r2, r3
 800717a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	b29b      	uxth	r3, r3
 8007186:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800718a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800718e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	461a      	mov	r2, r3
 8007196:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	441a      	add	r2, r3
 800719e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80071a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80071ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071ae:	78db      	ldrb	r3, [r3, #3]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	f040 80a1 	bne.w	80072f8 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80071b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071b8:	2200      	movs	r2, #0
 80071ba:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80071bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071be:	7b1b      	ldrb	r3, [r3, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 8092 	beq.w	80072ea <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80071c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80071c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d046      	beq.n	800725e <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80071d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071d2:	785b      	ldrb	r3, [r3, #1]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d126      	bne.n	8007226 <PCD_EP_ISR_Handler+0x50a>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	617b      	str	r3, [r7, #20]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	4413      	add	r3, r2
 80071ee:	617b      	str	r3, [r7, #20]
 80071f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	00da      	lsls	r2, r3, #3
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	4413      	add	r3, r2
 80071fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80071fe:	613b      	str	r3, [r7, #16]
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	881b      	ldrh	r3, [r3, #0]
 8007204:	b29b      	uxth	r3, r3
 8007206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800720a:	b29a      	uxth	r2, r3
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	801a      	strh	r2, [r3, #0]
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	881b      	ldrh	r3, [r3, #0]
 8007214:	b29b      	uxth	r3, r3
 8007216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800721a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800721e:	b29a      	uxth	r2, r3
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	801a      	strh	r2, [r3, #0]
 8007224:	e061      	b.n	80072ea <PCD_EP_ISR_Handler+0x5ce>
 8007226:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007228:	785b      	ldrb	r3, [r3, #1]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d15d      	bne.n	80072ea <PCD_EP_ISR_Handler+0x5ce>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	61fb      	str	r3, [r7, #28]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800723c:	b29b      	uxth	r3, r3
 800723e:	461a      	mov	r2, r3
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	4413      	add	r3, r2
 8007244:	61fb      	str	r3, [r7, #28]
 8007246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	00da      	lsls	r2, r3, #3
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	4413      	add	r3, r2
 8007250:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007254:	61bb      	str	r3, [r7, #24]
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	2200      	movs	r2, #0
 800725a:	801a      	strh	r2, [r3, #0]
 800725c:	e045      	b.n	80072ea <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007264:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007266:	785b      	ldrb	r3, [r3, #1]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d126      	bne.n	80072ba <PCD_EP_ISR_Handler+0x59e>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	627b      	str	r3, [r7, #36]	@ 0x24
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800727a:	b29b      	uxth	r3, r3
 800727c:	461a      	mov	r2, r3
 800727e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007280:	4413      	add	r3, r2
 8007282:	627b      	str	r3, [r7, #36]	@ 0x24
 8007284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	00da      	lsls	r2, r3, #3
 800728a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728c:	4413      	add	r3, r2
 800728e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007292:	623b      	str	r3, [r7, #32]
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	b29b      	uxth	r3, r3
 800729a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800729e:	b29a      	uxth	r2, r3
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	801a      	strh	r2, [r3, #0]
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	801a      	strh	r2, [r3, #0]
 80072b8:	e017      	b.n	80072ea <PCD_EP_ISR_Handler+0x5ce>
 80072ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072bc:	785b      	ldrb	r3, [r3, #1]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d113      	bne.n	80072ea <PCD_EP_ISR_Handler+0x5ce>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	461a      	mov	r2, r3
 80072ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d0:	4413      	add	r3, r2
 80072d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	00da      	lsls	r2, r3, #3
 80072da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072dc:	4413      	add	r3, r2
 80072de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80072e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e6:	2200      	movs	r2, #0
 80072e8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80072ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f008 f9d0 	bl	800f696 <HAL_PCD_DataInStageCallback>
 80072f6:	e04a      	b.n	800738e <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80072f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80072fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d13f      	bne.n	8007382 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800730a:	b29b      	uxth	r3, r3
 800730c:	461a      	mov	r2, r3
 800730e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	4413      	add	r3, r2
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6812      	ldr	r2, [r2, #0]
 800731a:	4413      	add	r3, r2
 800731c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007326:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8007328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800732a:	699a      	ldr	r2, [r3, #24]
 800732c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800732e:	429a      	cmp	r2, r3
 8007330:	d906      	bls.n	8007340 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8007332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007334:	699a      	ldr	r2, [r3, #24]
 8007336:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007338:	1ad2      	subs	r2, r2, r3
 800733a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800733c:	619a      	str	r2, [r3, #24]
 800733e:	e002      	b.n	8007346 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8007340:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007342:	2200      	movs	r2, #0
 8007344:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d106      	bne.n	800735c <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800734e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f008 f99e 	bl	800f696 <HAL_PCD_DataInStageCallback>
 800735a:	e018      	b.n	800738e <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800735c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800735e:	695a      	ldr	r2, [r3, #20]
 8007360:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007362:	441a      	add	r2, r3
 8007364:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007366:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007368:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800736a:	69da      	ldr	r2, [r3, #28]
 800736c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800736e:	441a      	add	r2, r3
 8007370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007372:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800737a:	4618      	mov	r0, r3
 800737c:	f005 fbbd 	bl	800cafa <USB_EPStartXfer>
 8007380:	e005      	b.n	800738e <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007382:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007384:	461a      	mov	r2, r3
 8007386:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f917 	bl	80075bc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007396:	b29b      	uxth	r3, r3
 8007398:	b21b      	sxth	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	f6ff acc3 	blt.w	8006d26 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3748      	adds	r7, #72	@ 0x48
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b088      	sub	sp, #32
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	60f8      	str	r0, [r7, #12]
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	4613      	mov	r3, r2
 80073b6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80073b8:	88fb      	ldrh	r3, [r7, #6]
 80073ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d07c      	beq.n	80074bc <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	461a      	mov	r2, r3
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	00db      	lsls	r3, r3, #3
 80073d4:	4413      	add	r3, r2
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	6812      	ldr	r2, [r2, #0]
 80073da:	4413      	add	r3, r2
 80073dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073e6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	699a      	ldr	r2, [r3, #24]
 80073ec:	8b7b      	ldrh	r3, [r7, #26]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d306      	bcc.n	8007400 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	699a      	ldr	r2, [r3, #24]
 80073f6:	8b7b      	ldrh	r3, [r7, #26]
 80073f8:	1ad2      	subs	r2, r2, r3
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	619a      	str	r2, [r3, #24]
 80073fe:	e002      	b.n	8007406 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2200      	movs	r2, #0
 8007404:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d123      	bne.n	8007456 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	b29b      	uxth	r3, r3
 8007420:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007424:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007428:	833b      	strh	r3, [r7, #24]
 800742a:	8b3b      	ldrh	r3, [r7, #24]
 800742c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007430:	833b      	strh	r3, [r7, #24]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	441a      	add	r2, r3
 8007440:	8b3b      	ldrh	r3, [r7, #24]
 8007442:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007446:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800744a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800744e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007452:	b29b      	uxth	r3, r3
 8007454:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007456:	88fb      	ldrh	r3, [r7, #6]
 8007458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800745c:	2b00      	cmp	r3, #0
 800745e:	d01f      	beq.n	80074a0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	461a      	mov	r2, r3
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	b29b      	uxth	r3, r3
 8007472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800747a:	82fb      	strh	r3, [r7, #22]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	461a      	mov	r2, r3
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	441a      	add	r2, r3
 800748a:	8afb      	ldrh	r3, [r7, #22]
 800748c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007490:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007494:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007498:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800749c:	b29b      	uxth	r3, r3
 800749e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80074a0:	8b7b      	ldrh	r3, [r7, #26]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 8085 	beq.w	80075b2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6818      	ldr	r0, [r3, #0]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	6959      	ldr	r1, [r3, #20]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	891a      	ldrh	r2, [r3, #8]
 80074b4:	8b7b      	ldrh	r3, [r7, #26]
 80074b6:	f006 fa46 	bl	800d946 <USB_ReadPMA>
 80074ba:	e07a      	b.n	80075b2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	461a      	mov	r2, r3
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	00db      	lsls	r3, r3, #3
 80074ce:	4413      	add	r3, r2
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	6812      	ldr	r2, [r2, #0]
 80074d4:	4413      	add	r3, r2
 80074d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074e0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	699a      	ldr	r2, [r3, #24]
 80074e6:	8b7b      	ldrh	r3, [r7, #26]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d306      	bcc.n	80074fa <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	699a      	ldr	r2, [r3, #24]
 80074f0:	8b7b      	ldrh	r3, [r7, #26]
 80074f2:	1ad2      	subs	r2, r2, r3
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	619a      	str	r2, [r3, #24]
 80074f8:	e002      	b.n	8007500 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2200      	movs	r2, #0
 80074fe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d123      	bne.n	8007550 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	461a      	mov	r2, r3
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29b      	uxth	r3, r3
 800751a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800751e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007522:	83fb      	strh	r3, [r7, #30]
 8007524:	8bfb      	ldrh	r3, [r7, #30]
 8007526:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800752a:	83fb      	strh	r3, [r7, #30]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	441a      	add	r2, r3
 800753a:	8bfb      	ldrh	r3, [r7, #30]
 800753c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007540:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007544:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800754c:	b29b      	uxth	r3, r3
 800754e:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007550:	88fb      	ldrh	r3, [r7, #6]
 8007552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007556:	2b00      	cmp	r3, #0
 8007558:	d11f      	bne.n	800759a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b29b      	uxth	r3, r3
 800756c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007570:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007574:	83bb      	strh	r3, [r7, #28]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	441a      	add	r2, r3
 8007584:	8bbb      	ldrh	r3, [r7, #28]
 8007586:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800758a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800758e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007592:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007596:	b29b      	uxth	r3, r3
 8007598:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800759a:	8b7b      	ldrh	r3, [r7, #26]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d008      	beq.n	80075b2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	6959      	ldr	r1, [r3, #20]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	895a      	ldrh	r2, [r3, #10]
 80075ac:	8b7b      	ldrh	r3, [r7, #26]
 80075ae:	f006 f9ca 	bl	800d946 <USB_ReadPMA>
    }
  }

  return count;
 80075b2:	8b7b      	ldrh	r3, [r7, #26]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3720      	adds	r7, #32
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b0a6      	sub	sp, #152	@ 0x98
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	4613      	mov	r3, r2
 80075c8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80075ca:	88fb      	ldrh	r3, [r7, #6]
 80075cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 81f7 	beq.w	80079c4 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075de:	b29b      	uxth	r3, r3
 80075e0:	461a      	mov	r2, r3
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	00db      	lsls	r3, r3, #3
 80075e8:	4413      	add	r3, r2
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	6812      	ldr	r2, [r2, #0]
 80075ee:	4413      	add	r3, r2
 80075f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80075f4:	881b      	ldrh	r3, [r3, #0]
 80075f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075fa:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	699a      	ldr	r2, [r3, #24]
 8007602:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007606:	429a      	cmp	r2, r3
 8007608:	d907      	bls.n	800761a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	699a      	ldr	r2, [r3, #24]
 800760e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007612:	1ad2      	subs	r2, r2, r3
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	619a      	str	r2, [r3, #24]
 8007618:	e002      	b.n	8007620 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2200      	movs	r2, #0
 800761e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	2b00      	cmp	r3, #0
 8007626:	f040 80e1 	bne.w	80077ec <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	785b      	ldrb	r3, [r3, #1]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d126      	bne.n	8007680 <HAL_PCD_EP_DB_Transmit+0xc4>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	633b      	str	r3, [r7, #48]	@ 0x30
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007640:	b29b      	uxth	r3, r3
 8007642:	461a      	mov	r2, r3
 8007644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007646:	4413      	add	r3, r2
 8007648:	633b      	str	r3, [r7, #48]	@ 0x30
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	00da      	lsls	r2, r3, #3
 8007650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007652:	4413      	add	r3, r2
 8007654:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800765a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	b29b      	uxth	r3, r3
 8007660:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007664:	b29a      	uxth	r2, r3
 8007666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007668:	801a      	strh	r2, [r3, #0]
 800766a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007678:	b29a      	uxth	r2, r3
 800767a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767c:	801a      	strh	r2, [r3, #0]
 800767e:	e01a      	b.n	80076b6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	785b      	ldrb	r3, [r3, #1]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d116      	bne.n	80076b6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007696:	b29b      	uxth	r3, r3
 8007698:	461a      	mov	r2, r3
 800769a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769c:	4413      	add	r3, r2
 800769e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	00da      	lsls	r2, r3, #3
 80076a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a8:	4413      	add	r3, r2
 80076aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80076ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80076b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b2:	2200      	movs	r2, #0
 80076b4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	785b      	ldrb	r3, [r3, #1]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d126      	bne.n	8007712 <HAL_PCD_EP_DB_Transmit+0x156>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	623b      	str	r3, [r7, #32]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	461a      	mov	r2, r3
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	4413      	add	r3, r2
 80076da:	623b      	str	r3, [r7, #32]
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	00da      	lsls	r2, r3, #3
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	4413      	add	r3, r2
 80076e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80076ea:	61fb      	str	r3, [r7, #28]
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	801a      	strh	r2, [r3, #0]
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	b29b      	uxth	r3, r3
 8007702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800770a:	b29a      	uxth	r2, r3
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	801a      	strh	r2, [r3, #0]
 8007710:	e017      	b.n	8007742 <HAL_PCD_EP_DB_Transmit+0x186>
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	785b      	ldrb	r3, [r3, #1]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d113      	bne.n	8007742 <HAL_PCD_EP_DB_Transmit+0x186>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007722:	b29b      	uxth	r3, r3
 8007724:	461a      	mov	r2, r3
 8007726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007728:	4413      	add	r3, r2
 800772a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	00da      	lsls	r2, r3, #3
 8007732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007734:	4413      	add	r3, r2
 8007736:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800773a:	627b      	str	r3, [r7, #36]	@ 0x24
 800773c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773e:	2200      	movs	r2, #0
 8007740:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	78db      	ldrb	r3, [r3, #3]
 8007746:	2b02      	cmp	r3, #2
 8007748:	d123      	bne.n	8007792 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	461a      	mov	r2, r3
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	b29b      	uxth	r3, r3
 800775c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007760:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007764:	837b      	strh	r3, [r7, #26]
 8007766:	8b7b      	ldrh	r3, [r7, #26]
 8007768:	f083 0320 	eor.w	r3, r3, #32
 800776c:	837b      	strh	r3, [r7, #26]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	441a      	add	r2, r3
 800777c:	8b7b      	ldrh	r3, [r7, #26]
 800777e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007782:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007786:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800778a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800778e:	b29b      	uxth	r3, r3
 8007790:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	4619      	mov	r1, r3
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f007 ff7c 	bl	800f696 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800779e:	88fb      	ldrh	r3, [r7, #6]
 80077a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d01f      	beq.n	80077e8 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	461a      	mov	r2, r3
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077c2:	833b      	strh	r3, [r7, #24]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	441a      	add	r2, r3
 80077d2:	8b3b      	ldrh	r3, [r7, #24]
 80077d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	e31f      	b.n	8007e2c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80077ec:	88fb      	ldrh	r3, [r7, #6]
 80077ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d021      	beq.n	800783a <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	b29b      	uxth	r3, r3
 8007808:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800780c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007810:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	441a      	add	r2, r3
 8007822:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007826:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800782a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800782e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007836:	b29b      	uxth	r3, r3
 8007838:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007840:	2b01      	cmp	r3, #1
 8007842:	f040 82ca 	bne.w	8007dda <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	695a      	ldr	r2, [r3, #20]
 800784a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800784e:	441a      	add	r2, r3
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	69da      	ldr	r2, [r3, #28]
 8007858:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800785c:	441a      	add	r2, r3
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	6a1a      	ldr	r2, [r3, #32]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	429a      	cmp	r2, r3
 800786c:	d309      	bcc.n	8007882 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	6a1a      	ldr	r2, [r3, #32]
 8007878:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800787a:	1ad2      	subs	r2, r2, r3
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	621a      	str	r2, [r3, #32]
 8007880:	e015      	b.n	80078ae <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d107      	bne.n	800789a <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800788a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800788e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007898:	e009      	b.n	80078ae <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2200      	movs	r2, #0
 80078ac:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	785b      	ldrb	r3, [r3, #1]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d15f      	bne.n	8007976 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	461a      	mov	r2, r3
 80078c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ca:	4413      	add	r3, r2
 80078cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	00da      	lsls	r2, r3, #3
 80078d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078d6:	4413      	add	r3, r2
 80078d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80078dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078ec:	801a      	strh	r2, [r3, #0]
 80078ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10a      	bne.n	800790a <HAL_PCD_EP_DB_Transmit+0x34e>
 80078f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078f6:	881b      	ldrh	r3, [r3, #0]
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007902:	b29a      	uxth	r2, r3
 8007904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007906:	801a      	strh	r2, [r3, #0]
 8007908:	e051      	b.n	80079ae <HAL_PCD_EP_DB_Transmit+0x3f2>
 800790a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800790c:	2b3e      	cmp	r3, #62	@ 0x3e
 800790e:	d816      	bhi.n	800793e <HAL_PCD_EP_DB_Transmit+0x382>
 8007910:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007912:	085b      	lsrs	r3, r3, #1
 8007914:	653b      	str	r3, [r7, #80]	@ 0x50
 8007916:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <HAL_PCD_EP_DB_Transmit+0x36a>
 8007920:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007922:	3301      	adds	r3, #1
 8007924:	653b      	str	r3, [r7, #80]	@ 0x50
 8007926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	b29a      	uxth	r2, r3
 800792c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800792e:	b29b      	uxth	r3, r3
 8007930:	029b      	lsls	r3, r3, #10
 8007932:	b29b      	uxth	r3, r3
 8007934:	4313      	orrs	r3, r2
 8007936:	b29a      	uxth	r2, r3
 8007938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800793a:	801a      	strh	r2, [r3, #0]
 800793c:	e037      	b.n	80079ae <HAL_PCD_EP_DB_Transmit+0x3f2>
 800793e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007940:	095b      	lsrs	r3, r3, #5
 8007942:	653b      	str	r3, [r7, #80]	@ 0x50
 8007944:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007946:	f003 031f 	and.w	r3, r3, #31
 800794a:	2b00      	cmp	r3, #0
 800794c:	d102      	bne.n	8007954 <HAL_PCD_EP_DB_Transmit+0x398>
 800794e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007950:	3b01      	subs	r3, #1
 8007952:	653b      	str	r3, [r7, #80]	@ 0x50
 8007954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	b29a      	uxth	r2, r3
 800795a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800795c:	b29b      	uxth	r3, r3
 800795e:	029b      	lsls	r3, r3, #10
 8007960:	b29b      	uxth	r3, r3
 8007962:	4313      	orrs	r3, r2
 8007964:	b29b      	uxth	r3, r3
 8007966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800796a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800796e:	b29a      	uxth	r2, r3
 8007970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007972:	801a      	strh	r2, [r3, #0]
 8007974:	e01b      	b.n	80079ae <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	785b      	ldrb	r3, [r3, #1]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d117      	bne.n	80079ae <HAL_PCD_EP_DB_Transmit+0x3f2>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800798c:	b29b      	uxth	r3, r3
 800798e:	461a      	mov	r2, r3
 8007990:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007992:	4413      	add	r3, r2
 8007994:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	00da      	lsls	r2, r3, #3
 800799c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800799e:	4413      	add	r3, r2
 80079a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80079a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079ac:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6818      	ldr	r0, [r3, #0]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	6959      	ldr	r1, [r3, #20]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	891a      	ldrh	r2, [r3, #8]
 80079ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079bc:	b29b      	uxth	r3, r3
 80079be:	f005 ff80 	bl	800d8c2 <USB_WritePMA>
 80079c2:	e20a      	b.n	8007dda <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	461a      	mov	r2, r3
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	00db      	lsls	r3, r3, #3
 80079d6:	4413      	add	r3, r2
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	6812      	ldr	r2, [r2, #0]
 80079dc:	4413      	add	r3, r2
 80079de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80079e2:	881b      	ldrh	r3, [r3, #0]
 80079e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079e8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	699a      	ldr	r2, [r3, #24]
 80079f0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d307      	bcc.n	8007a08 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	699a      	ldr	r2, [r3, #24]
 80079fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a00:	1ad2      	subs	r2, r2, r3
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	619a      	str	r2, [r3, #24]
 8007a06:	e002      	b.n	8007a0e <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f040 80f6 	bne.w	8007c04 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	785b      	ldrb	r3, [r3, #1]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d126      	bne.n	8007a6e <HAL_PCD_EP_DB_Transmit+0x4b2>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	461a      	mov	r2, r3
 8007a32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a34:	4413      	add	r3, r2
 8007a36:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	00da      	lsls	r2, r3, #3
 8007a3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a40:	4413      	add	r3, r2
 8007a42:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a46:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a4a:	881b      	ldrh	r3, [r3, #0]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a56:	801a      	strh	r2, [r3, #0]
 8007a58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a6a:	801a      	strh	r2, [r3, #0]
 8007a6c:	e01a      	b.n	8007aa4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	785b      	ldrb	r3, [r3, #1]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d116      	bne.n	8007aa4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	461a      	mov	r2, r3
 8007a88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a8a:	4413      	add	r3, r2
 8007a8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	00da      	lsls	r2, r3, #3
 8007a94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a96:	4413      	add	r3, r2
 8007a98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	785b      	ldrb	r3, [r3, #1]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d12f      	bne.n	8007b14 <HAL_PCD_EP_DB_Transmit+0x558>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007acc:	4413      	add	r3, r2
 8007ace:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	00da      	lsls	r2, r3, #3
 8007ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007adc:	4413      	add	r3, r2
 8007ade:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ae2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ae6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007aea:	881b      	ldrh	r3, [r3, #0]
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007af8:	801a      	strh	r2, [r3, #0]
 8007afa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b10:	801a      	strh	r2, [r3, #0]
 8007b12:	e01c      	b.n	8007b4e <HAL_PCD_EP_DB_Transmit+0x592>
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	785b      	ldrb	r3, [r3, #1]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d118      	bne.n	8007b4e <HAL_PCD_EP_DB_Transmit+0x592>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	461a      	mov	r2, r3
 8007b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	00da      	lsls	r2, r3, #3
 8007b38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	78db      	ldrb	r3, [r3, #3]
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d127      	bne.n	8007ba6 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b70:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007b74:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007b78:	f083 0320 	eor.w	r3, r3, #32
 8007b7c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	441a      	add	r2, r3
 8007b8e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007b92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	4619      	mov	r1, r3
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f007 fd72 	bl	800f696 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007bb2:	88fb      	ldrh	r3, [r7, #6]
 8007bb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d121      	bne.n	8007c00 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bd6:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	441a      	add	r2, r3
 8007be8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007bec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bf4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	e113      	b.n	8007e2c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007c04:	88fb      	ldrh	r3, [r7, #6]
 8007c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d121      	bne.n	8007c52 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	461a      	mov	r2, r3
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4413      	add	r3, r2
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c28:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	461a      	mov	r2, r3
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	441a      	add	r2, r3
 8007c3a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007c3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	f040 80be 	bne.w	8007dda <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	695a      	ldr	r2, [r3, #20]
 8007c62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007c66:	441a      	add	r2, r3
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	69da      	ldr	r2, [r3, #28]
 8007c70:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007c74:	441a      	add	r2, r3
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	6a1a      	ldr	r2, [r3, #32]
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d309      	bcc.n	8007c9a <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	6a1a      	ldr	r2, [r3, #32]
 8007c90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c92:	1ad2      	subs	r2, r2, r3
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	621a      	str	r2, [r3, #32]
 8007c98:	e015      	b.n	8007cc6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d107      	bne.n	8007cb2 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8007ca2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007ca6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007cb0:	e009      	b.n	8007cc6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	785b      	ldrb	r3, [r3, #1]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d15f      	bne.n	8007d94 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ce8:	4413      	add	r3, r2
 8007cea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	00da      	lsls	r2, r3, #3
 8007cf2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007cfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8007cfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cfe:	881b      	ldrh	r3, [r3, #0]
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d0a:	801a      	strh	r2, [r3, #0]
 8007d0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10a      	bne.n	8007d28 <HAL_PCD_EP_DB_Transmit+0x76c>
 8007d12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d24:	801a      	strh	r2, [r3, #0]
 8007d26:	e04e      	b.n	8007dc6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007d28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d2a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d2c:	d816      	bhi.n	8007d5c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8007d2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d30:	085b      	lsrs	r3, r3, #1
 8007d32:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <HAL_PCD_EP_DB_Transmit+0x788>
 8007d3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d40:	3301      	adds	r3, #1
 8007d42:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d46:	881b      	ldrh	r3, [r3, #0]
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	029b      	lsls	r3, r3, #10
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	4313      	orrs	r3, r2
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d58:	801a      	strh	r2, [r3, #0]
 8007d5a:	e034      	b.n	8007dc6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007d5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d5e:	095b      	lsrs	r3, r3, #5
 8007d60:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d64:	f003 031f 	and.w	r3, r3, #31
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d102      	bne.n	8007d72 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8007d6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	029b      	lsls	r3, r3, #10
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	4313      	orrs	r3, r2
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d90:	801a      	strh	r2, [r3, #0]
 8007d92:	e018      	b.n	8007dc6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	785b      	ldrb	r3, [r3, #1]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d114      	bne.n	8007dc6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	461a      	mov	r2, r3
 8007da8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007daa:	4413      	add	r3, r2
 8007dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	00da      	lsls	r2, r3, #3
 8007db4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007db6:	4413      	add	r3, r2
 8007db8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007dbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007dbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dc4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	6959      	ldr	r1, [r3, #20]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	895a      	ldrh	r2, [r3, #10]
 8007dd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	f005 fd74 	bl	800d8c2 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	881b      	ldrh	r3, [r3, #0]
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007df4:	82fb      	strh	r3, [r7, #22]
 8007df6:	8afb      	ldrh	r3, [r7, #22]
 8007df8:	f083 0310 	eor.w	r3, r3, #16
 8007dfc:	82fb      	strh	r3, [r7, #22]
 8007dfe:	8afb      	ldrh	r3, [r7, #22]
 8007e00:	f083 0320 	eor.w	r3, r3, #32
 8007e04:	82fb      	strh	r3, [r7, #22]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	441a      	add	r2, r3
 8007e14:	8afb      	ldrh	r3, [r7, #22]
 8007e16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3798      	adds	r7, #152	@ 0x98
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	607b      	str	r3, [r7, #4]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	817b      	strh	r3, [r7, #10]
 8007e42:	4613      	mov	r3, r2
 8007e44:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007e46:	897b      	ldrh	r3, [r7, #10]
 8007e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00b      	beq.n	8007e6a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e52:	897b      	ldrh	r3, [r7, #10]
 8007e54:	f003 0207 	and.w	r2, r3, #7
 8007e58:	4613      	mov	r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	3310      	adds	r3, #16
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	4413      	add	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]
 8007e68:	e009      	b.n	8007e7e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007e6a:	897a      	ldrh	r2, [r7, #10]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	00db      	lsls	r3, r3, #3
 8007e74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007e7e:	893b      	ldrh	r3, [r7, #8]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d107      	bne.n	8007e94 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	2200      	movs	r2, #0
 8007e88:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	80da      	strh	r2, [r3, #6]
 8007e92:	e00b      	b.n	8007eac <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	2201      	movs	r2, #1
 8007e98:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	0c1b      	lsrs	r3, r3, #16
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	371c      	adds	r7, #28
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b085      	sub	sp, #20
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	f043 0301 	orr.w	r3, r3, #1
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	f043 0302 	orr.w	r3, r3, #2
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
	...

08007f10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d141      	bne.n	8007fa2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007f1e:	4b4b      	ldr	r3, [pc, #300]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f2a:	d131      	bne.n	8007f90 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f2c:	4b47      	ldr	r3, [pc, #284]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f32:	4a46      	ldr	r2, [pc, #280]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007f3c:	4b43      	ldr	r3, [pc, #268]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007f44:	4a41      	ldr	r2, [pc, #260]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007f4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007f4c:	4b40      	ldr	r3, [pc, #256]	@ (8008050 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2232      	movs	r2, #50	@ 0x32
 8007f52:	fb02 f303 	mul.w	r3, r2, r3
 8007f56:	4a3f      	ldr	r2, [pc, #252]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007f58:	fba2 2303 	umull	r2, r3, r2, r3
 8007f5c:	0c9b      	lsrs	r3, r3, #18
 8007f5e:	3301      	adds	r3, #1
 8007f60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f62:	e002      	b.n	8007f6a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f6a:	4b38      	ldr	r3, [pc, #224]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f76:	d102      	bne.n	8007f7e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1f2      	bne.n	8007f64 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f7e:	4b33      	ldr	r3, [pc, #204]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f8a:	d158      	bne.n	800803e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e057      	b.n	8008040 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f90:	4b2e      	ldr	r3, [pc, #184]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f96:	4a2d      	ldr	r2, [pc, #180]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007fa0:	e04d      	b.n	800803e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fa8:	d141      	bne.n	800802e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007faa:	4b28      	ldr	r3, [pc, #160]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fb6:	d131      	bne.n	800801c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007fb8:	4b24      	ldr	r3, [pc, #144]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fbe:	4a23      	ldr	r2, [pc, #140]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007fc8:	4b20      	ldr	r3, [pc, #128]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007fd0:	4a1e      	ldr	r2, [pc, #120]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007fd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8008050 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2232      	movs	r2, #50	@ 0x32
 8007fde:	fb02 f303 	mul.w	r3, r2, r3
 8007fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe8:	0c9b      	lsrs	r3, r3, #18
 8007fea:	3301      	adds	r3, #1
 8007fec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007fee:	e002      	b.n	8007ff6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ff6:	4b15      	ldr	r3, [pc, #84]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008002:	d102      	bne.n	800800a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1f2      	bne.n	8007ff0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800800a:	4b10      	ldr	r3, [pc, #64]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008016:	d112      	bne.n	800803e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e011      	b.n	8008040 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800801c:	4b0b      	ldr	r3, [pc, #44]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800801e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008022:	4a0a      	ldr	r2, [pc, #40]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008028:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800802c:	e007      	b.n	800803e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800802e:	4b07      	ldr	r3, [pc, #28]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008036:	4a05      	ldr	r2, [pc, #20]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008038:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800803c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	40007000 	.word	0x40007000
 8008050:	20000004 	.word	0x20000004
 8008054:	431bde83 	.word	0x431bde83

08008058 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008058:	b480      	push	{r7}
 800805a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800805c:	4b05      	ldr	r3, [pc, #20]	@ (8008074 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	4a04      	ldr	r2, [pc, #16]	@ (8008074 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008062:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008066:	6093      	str	r3, [r2, #8]
}
 8008068:	bf00      	nop
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	40007000 	.word	0x40007000

08008078 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b088      	sub	sp, #32
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e2fe      	b.n	8008688 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	d075      	beq.n	8008182 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008096:	4b97      	ldr	r3, [pc, #604]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f003 030c 	and.w	r3, r3, #12
 800809e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080a0:	4b94      	ldr	r3, [pc, #592]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	f003 0303 	and.w	r3, r3, #3
 80080a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	2b0c      	cmp	r3, #12
 80080ae:	d102      	bne.n	80080b6 <HAL_RCC_OscConfig+0x3e>
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	d002      	beq.n	80080bc <HAL_RCC_OscConfig+0x44>
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	2b08      	cmp	r3, #8
 80080ba:	d10b      	bne.n	80080d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080bc:	4b8d      	ldr	r3, [pc, #564]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d05b      	beq.n	8008180 <HAL_RCC_OscConfig+0x108>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d157      	bne.n	8008180 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e2d9      	b.n	8008688 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080dc:	d106      	bne.n	80080ec <HAL_RCC_OscConfig+0x74>
 80080de:	4b85      	ldr	r3, [pc, #532]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a84      	ldr	r2, [pc, #528]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 80080e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080e8:	6013      	str	r3, [r2, #0]
 80080ea:	e01d      	b.n	8008128 <HAL_RCC_OscConfig+0xb0>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80080f4:	d10c      	bne.n	8008110 <HAL_RCC_OscConfig+0x98>
 80080f6:	4b7f      	ldr	r3, [pc, #508]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a7e      	ldr	r2, [pc, #504]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 80080fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008100:	6013      	str	r3, [r2, #0]
 8008102:	4b7c      	ldr	r3, [pc, #496]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a7b      	ldr	r2, [pc, #492]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 8008108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800810c:	6013      	str	r3, [r2, #0]
 800810e:	e00b      	b.n	8008128 <HAL_RCC_OscConfig+0xb0>
 8008110:	4b78      	ldr	r3, [pc, #480]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a77      	ldr	r2, [pc, #476]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 8008116:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800811a:	6013      	str	r3, [r2, #0]
 800811c:	4b75      	ldr	r3, [pc, #468]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a74      	ldr	r2, [pc, #464]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 8008122:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d013      	beq.n	8008158 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008130:	f7fb fa38 	bl	80035a4 <HAL_GetTick>
 8008134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008136:	e008      	b.n	800814a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008138:	f7fb fa34 	bl	80035a4 <HAL_GetTick>
 800813c:	4602      	mov	r2, r0
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	2b64      	cmp	r3, #100	@ 0x64
 8008144:	d901      	bls.n	800814a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e29e      	b.n	8008688 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800814a:	4b6a      	ldr	r3, [pc, #424]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0f0      	beq.n	8008138 <HAL_RCC_OscConfig+0xc0>
 8008156:	e014      	b.n	8008182 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008158:	f7fb fa24 	bl	80035a4 <HAL_GetTick>
 800815c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800815e:	e008      	b.n	8008172 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008160:	f7fb fa20 	bl	80035a4 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	2b64      	cmp	r3, #100	@ 0x64
 800816c:	d901      	bls.n	8008172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e28a      	b.n	8008688 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008172:	4b60      	ldr	r3, [pc, #384]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1f0      	bne.n	8008160 <HAL_RCC_OscConfig+0xe8>
 800817e:	e000      	b.n	8008182 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0302 	and.w	r3, r3, #2
 800818a:	2b00      	cmp	r3, #0
 800818c:	d075      	beq.n	800827a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800818e:	4b59      	ldr	r3, [pc, #356]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	f003 030c 	and.w	r3, r3, #12
 8008196:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008198:	4b56      	ldr	r3, [pc, #344]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f003 0303 	and.w	r3, r3, #3
 80081a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	2b0c      	cmp	r3, #12
 80081a6:	d102      	bne.n	80081ae <HAL_RCC_OscConfig+0x136>
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d002      	beq.n	80081b4 <HAL_RCC_OscConfig+0x13c>
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	d11f      	bne.n	80081f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081b4:	4b4f      	ldr	r3, [pc, #316]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d005      	beq.n	80081cc <HAL_RCC_OscConfig+0x154>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d101      	bne.n	80081cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e25d      	b.n	8008688 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081cc:	4b49      	ldr	r3, [pc, #292]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	061b      	lsls	r3, r3, #24
 80081da:	4946      	ldr	r1, [pc, #280]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80081e0:	4b45      	ldr	r3, [pc, #276]	@ (80082f8 <HAL_RCC_OscConfig+0x280>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fb f991 	bl	800350c <HAL_InitTick>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d043      	beq.n	8008278 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e249      	b.n	8008688 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d023      	beq.n	8008244 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081fc:	4b3d      	ldr	r3, [pc, #244]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a3c      	ldr	r2, [pc, #240]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 8008202:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008208:	f7fb f9cc 	bl	80035a4 <HAL_GetTick>
 800820c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800820e:	e008      	b.n	8008222 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008210:	f7fb f9c8 	bl	80035a4 <HAL_GetTick>
 8008214:	4602      	mov	r2, r0
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	2b02      	cmp	r3, #2
 800821c:	d901      	bls.n	8008222 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e232      	b.n	8008688 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008222:	4b34      	ldr	r3, [pc, #208]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800822a:	2b00      	cmp	r3, #0
 800822c:	d0f0      	beq.n	8008210 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800822e:	4b31      	ldr	r3, [pc, #196]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	061b      	lsls	r3, r3, #24
 800823c:	492d      	ldr	r1, [pc, #180]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 800823e:	4313      	orrs	r3, r2
 8008240:	604b      	str	r3, [r1, #4]
 8008242:	e01a      	b.n	800827a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008244:	4b2b      	ldr	r3, [pc, #172]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a2a      	ldr	r2, [pc, #168]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 800824a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800824e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008250:	f7fb f9a8 	bl	80035a4 <HAL_GetTick>
 8008254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008256:	e008      	b.n	800826a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008258:	f7fb f9a4 	bl	80035a4 <HAL_GetTick>
 800825c:	4602      	mov	r2, r0
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	2b02      	cmp	r3, #2
 8008264:	d901      	bls.n	800826a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e20e      	b.n	8008688 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800826a:	4b22      	ldr	r3, [pc, #136]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1f0      	bne.n	8008258 <HAL_RCC_OscConfig+0x1e0>
 8008276:	e000      	b.n	800827a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008278:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0308 	and.w	r3, r3, #8
 8008282:	2b00      	cmp	r3, #0
 8008284:	d041      	beq.n	800830a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d01c      	beq.n	80082c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800828e:	4b19      	ldr	r3, [pc, #100]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 8008290:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008294:	4a17      	ldr	r2, [pc, #92]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 8008296:	f043 0301 	orr.w	r3, r3, #1
 800829a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800829e:	f7fb f981 	bl	80035a4 <HAL_GetTick>
 80082a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80082a4:	e008      	b.n	80082b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082a6:	f7fb f97d 	bl	80035a4 <HAL_GetTick>
 80082aa:	4602      	mov	r2, r0
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d901      	bls.n	80082b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e1e7      	b.n	8008688 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80082b8:	4b0e      	ldr	r3, [pc, #56]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 80082ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082be:	f003 0302 	and.w	r3, r3, #2
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0ef      	beq.n	80082a6 <HAL_RCC_OscConfig+0x22e>
 80082c6:	e020      	b.n	800830a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082c8:	4b0a      	ldr	r3, [pc, #40]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 80082ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082ce:	4a09      	ldr	r2, [pc, #36]	@ (80082f4 <HAL_RCC_OscConfig+0x27c>)
 80082d0:	f023 0301 	bic.w	r3, r3, #1
 80082d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082d8:	f7fb f964 	bl	80035a4 <HAL_GetTick>
 80082dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80082de:	e00d      	b.n	80082fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082e0:	f7fb f960 	bl	80035a4 <HAL_GetTick>
 80082e4:	4602      	mov	r2, r0
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d906      	bls.n	80082fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80082ee:	2303      	movs	r3, #3
 80082f0:	e1ca      	b.n	8008688 <HAL_RCC_OscConfig+0x610>
 80082f2:	bf00      	nop
 80082f4:	40021000 	.word	0x40021000
 80082f8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80082fc:	4b8c      	ldr	r3, [pc, #560]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 80082fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1ea      	bne.n	80082e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 0304 	and.w	r3, r3, #4
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 80a6 	beq.w	8008464 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008318:	2300      	movs	r3, #0
 800831a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800831c:	4b84      	ldr	r3, [pc, #528]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 800831e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <HAL_RCC_OscConfig+0x2b4>
 8008328:	2301      	movs	r3, #1
 800832a:	e000      	b.n	800832e <HAL_RCC_OscConfig+0x2b6>
 800832c:	2300      	movs	r3, #0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00d      	beq.n	800834e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008332:	4b7f      	ldr	r3, [pc, #508]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 8008334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008336:	4a7e      	ldr	r2, [pc, #504]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 8008338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800833c:	6593      	str	r3, [r2, #88]	@ 0x58
 800833e:	4b7c      	ldr	r3, [pc, #496]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 8008340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008346:	60fb      	str	r3, [r7, #12]
 8008348:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800834a:	2301      	movs	r3, #1
 800834c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800834e:	4b79      	ldr	r3, [pc, #484]	@ (8008534 <HAL_RCC_OscConfig+0x4bc>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008356:	2b00      	cmp	r3, #0
 8008358:	d118      	bne.n	800838c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800835a:	4b76      	ldr	r3, [pc, #472]	@ (8008534 <HAL_RCC_OscConfig+0x4bc>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a75      	ldr	r2, [pc, #468]	@ (8008534 <HAL_RCC_OscConfig+0x4bc>)
 8008360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008366:	f7fb f91d 	bl	80035a4 <HAL_GetTick>
 800836a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800836c:	e008      	b.n	8008380 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800836e:	f7fb f919 	bl	80035a4 <HAL_GetTick>
 8008372:	4602      	mov	r2, r0
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	2b02      	cmp	r3, #2
 800837a:	d901      	bls.n	8008380 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e183      	b.n	8008688 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008380:	4b6c      	ldr	r3, [pc, #432]	@ (8008534 <HAL_RCC_OscConfig+0x4bc>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008388:	2b00      	cmp	r3, #0
 800838a:	d0f0      	beq.n	800836e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d108      	bne.n	80083a6 <HAL_RCC_OscConfig+0x32e>
 8008394:	4b66      	ldr	r3, [pc, #408]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 8008396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800839a:	4a65      	ldr	r2, [pc, #404]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 800839c:	f043 0301 	orr.w	r3, r3, #1
 80083a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80083a4:	e024      	b.n	80083f0 <HAL_RCC_OscConfig+0x378>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	2b05      	cmp	r3, #5
 80083ac:	d110      	bne.n	80083d0 <HAL_RCC_OscConfig+0x358>
 80083ae:	4b60      	ldr	r3, [pc, #384]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 80083b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083b4:	4a5e      	ldr	r2, [pc, #376]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 80083b6:	f043 0304 	orr.w	r3, r3, #4
 80083ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80083be:	4b5c      	ldr	r3, [pc, #368]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 80083c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083c4:	4a5a      	ldr	r2, [pc, #360]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 80083c6:	f043 0301 	orr.w	r3, r3, #1
 80083ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80083ce:	e00f      	b.n	80083f0 <HAL_RCC_OscConfig+0x378>
 80083d0:	4b57      	ldr	r3, [pc, #348]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 80083d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083d6:	4a56      	ldr	r2, [pc, #344]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 80083d8:	f023 0301 	bic.w	r3, r3, #1
 80083dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80083e0:	4b53      	ldr	r3, [pc, #332]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 80083e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083e6:	4a52      	ldr	r2, [pc, #328]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 80083e8:	f023 0304 	bic.w	r3, r3, #4
 80083ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d016      	beq.n	8008426 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083f8:	f7fb f8d4 	bl	80035a4 <HAL_GetTick>
 80083fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083fe:	e00a      	b.n	8008416 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008400:	f7fb f8d0 	bl	80035a4 <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800840e:	4293      	cmp	r3, r2
 8008410:	d901      	bls.n	8008416 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e138      	b.n	8008688 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008416:	4b46      	ldr	r3, [pc, #280]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 8008418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800841c:	f003 0302 	and.w	r3, r3, #2
 8008420:	2b00      	cmp	r3, #0
 8008422:	d0ed      	beq.n	8008400 <HAL_RCC_OscConfig+0x388>
 8008424:	e015      	b.n	8008452 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008426:	f7fb f8bd 	bl	80035a4 <HAL_GetTick>
 800842a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800842c:	e00a      	b.n	8008444 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800842e:	f7fb f8b9 	bl	80035a4 <HAL_GetTick>
 8008432:	4602      	mov	r2, r0
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800843c:	4293      	cmp	r3, r2
 800843e:	d901      	bls.n	8008444 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e121      	b.n	8008688 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008444:	4b3a      	ldr	r3, [pc, #232]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 8008446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800844a:	f003 0302 	and.w	r3, r3, #2
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1ed      	bne.n	800842e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008452:	7ffb      	ldrb	r3, [r7, #31]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d105      	bne.n	8008464 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008458:	4b35      	ldr	r3, [pc, #212]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 800845a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800845c:	4a34      	ldr	r2, [pc, #208]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 800845e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008462:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0320 	and.w	r3, r3, #32
 800846c:	2b00      	cmp	r3, #0
 800846e:	d03c      	beq.n	80084ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d01c      	beq.n	80084b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008478:	4b2d      	ldr	r3, [pc, #180]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 800847a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800847e:	4a2c      	ldr	r2, [pc, #176]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 8008480:	f043 0301 	orr.w	r3, r3, #1
 8008484:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008488:	f7fb f88c 	bl	80035a4 <HAL_GetTick>
 800848c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800848e:	e008      	b.n	80084a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008490:	f7fb f888 	bl	80035a4 <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	2b02      	cmp	r3, #2
 800849c:	d901      	bls.n	80084a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e0f2      	b.n	8008688 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80084a2:	4b23      	ldr	r3, [pc, #140]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 80084a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80084a8:	f003 0302 	and.w	r3, r3, #2
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d0ef      	beq.n	8008490 <HAL_RCC_OscConfig+0x418>
 80084b0:	e01b      	b.n	80084ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80084b2:	4b1f      	ldr	r3, [pc, #124]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 80084b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80084b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 80084ba:	f023 0301 	bic.w	r3, r3, #1
 80084be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084c2:	f7fb f86f 	bl	80035a4 <HAL_GetTick>
 80084c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80084c8:	e008      	b.n	80084dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80084ca:	f7fb f86b 	bl	80035a4 <HAL_GetTick>
 80084ce:	4602      	mov	r2, r0
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d901      	bls.n	80084dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80084d8:	2303      	movs	r3, #3
 80084da:	e0d5      	b.n	8008688 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80084dc:	4b14      	ldr	r3, [pc, #80]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 80084de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80084e2:	f003 0302 	and.w	r3, r3, #2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1ef      	bne.n	80084ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f000 80c9 	beq.w	8008686 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80084f4:	4b0e      	ldr	r3, [pc, #56]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f003 030c 	and.w	r3, r3, #12
 80084fc:	2b0c      	cmp	r3, #12
 80084fe:	f000 8083 	beq.w	8008608 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	2b02      	cmp	r3, #2
 8008508:	d15e      	bne.n	80085c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800850a:	4b09      	ldr	r3, [pc, #36]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a08      	ldr	r2, [pc, #32]	@ (8008530 <HAL_RCC_OscConfig+0x4b8>)
 8008510:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008516:	f7fb f845 	bl	80035a4 <HAL_GetTick>
 800851a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800851c:	e00c      	b.n	8008538 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800851e:	f7fb f841 	bl	80035a4 <HAL_GetTick>
 8008522:	4602      	mov	r2, r0
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	2b02      	cmp	r3, #2
 800852a:	d905      	bls.n	8008538 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	e0ab      	b.n	8008688 <HAL_RCC_OscConfig+0x610>
 8008530:	40021000 	.word	0x40021000
 8008534:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008538:	4b55      	ldr	r3, [pc, #340]	@ (8008690 <HAL_RCC_OscConfig+0x618>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1ec      	bne.n	800851e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008544:	4b52      	ldr	r3, [pc, #328]	@ (8008690 <HAL_RCC_OscConfig+0x618>)
 8008546:	68da      	ldr	r2, [r3, #12]
 8008548:	4b52      	ldr	r3, [pc, #328]	@ (8008694 <HAL_RCC_OscConfig+0x61c>)
 800854a:	4013      	ands	r3, r2
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	6a11      	ldr	r1, [r2, #32]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008554:	3a01      	subs	r2, #1
 8008556:	0112      	lsls	r2, r2, #4
 8008558:	4311      	orrs	r1, r2
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800855e:	0212      	lsls	r2, r2, #8
 8008560:	4311      	orrs	r1, r2
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008566:	0852      	lsrs	r2, r2, #1
 8008568:	3a01      	subs	r2, #1
 800856a:	0552      	lsls	r2, r2, #21
 800856c:	4311      	orrs	r1, r2
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008572:	0852      	lsrs	r2, r2, #1
 8008574:	3a01      	subs	r2, #1
 8008576:	0652      	lsls	r2, r2, #25
 8008578:	4311      	orrs	r1, r2
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800857e:	06d2      	lsls	r2, r2, #27
 8008580:	430a      	orrs	r2, r1
 8008582:	4943      	ldr	r1, [pc, #268]	@ (8008690 <HAL_RCC_OscConfig+0x618>)
 8008584:	4313      	orrs	r3, r2
 8008586:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008588:	4b41      	ldr	r3, [pc, #260]	@ (8008690 <HAL_RCC_OscConfig+0x618>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a40      	ldr	r2, [pc, #256]	@ (8008690 <HAL_RCC_OscConfig+0x618>)
 800858e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008592:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008594:	4b3e      	ldr	r3, [pc, #248]	@ (8008690 <HAL_RCC_OscConfig+0x618>)
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	4a3d      	ldr	r2, [pc, #244]	@ (8008690 <HAL_RCC_OscConfig+0x618>)
 800859a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800859e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a0:	f7fb f800 	bl	80035a4 <HAL_GetTick>
 80085a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80085a6:	e008      	b.n	80085ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085a8:	f7fa fffc 	bl	80035a4 <HAL_GetTick>
 80085ac:	4602      	mov	r2, r0
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d901      	bls.n	80085ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e066      	b.n	8008688 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80085ba:	4b35      	ldr	r3, [pc, #212]	@ (8008690 <HAL_RCC_OscConfig+0x618>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d0f0      	beq.n	80085a8 <HAL_RCC_OscConfig+0x530>
 80085c6:	e05e      	b.n	8008686 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085c8:	4b31      	ldr	r3, [pc, #196]	@ (8008690 <HAL_RCC_OscConfig+0x618>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a30      	ldr	r2, [pc, #192]	@ (8008690 <HAL_RCC_OscConfig+0x618>)
 80085ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085d4:	f7fa ffe6 	bl	80035a4 <HAL_GetTick>
 80085d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085da:	e008      	b.n	80085ee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085dc:	f7fa ffe2 	bl	80035a4 <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d901      	bls.n	80085ee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e04c      	b.n	8008688 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085ee:	4b28      	ldr	r3, [pc, #160]	@ (8008690 <HAL_RCC_OscConfig+0x618>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1f0      	bne.n	80085dc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80085fa:	4b25      	ldr	r3, [pc, #148]	@ (8008690 <HAL_RCC_OscConfig+0x618>)
 80085fc:	68da      	ldr	r2, [r3, #12]
 80085fe:	4924      	ldr	r1, [pc, #144]	@ (8008690 <HAL_RCC_OscConfig+0x618>)
 8008600:	4b25      	ldr	r3, [pc, #148]	@ (8008698 <HAL_RCC_OscConfig+0x620>)
 8008602:	4013      	ands	r3, r2
 8008604:	60cb      	str	r3, [r1, #12]
 8008606:	e03e      	b.n	8008686 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d101      	bne.n	8008614 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e039      	b.n	8008688 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008614:	4b1e      	ldr	r3, [pc, #120]	@ (8008690 <HAL_RCC_OscConfig+0x618>)
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	f003 0203 	and.w	r2, r3, #3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a1b      	ldr	r3, [r3, #32]
 8008624:	429a      	cmp	r2, r3
 8008626:	d12c      	bne.n	8008682 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008632:	3b01      	subs	r3, #1
 8008634:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008636:	429a      	cmp	r2, r3
 8008638:	d123      	bne.n	8008682 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008644:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008646:	429a      	cmp	r2, r3
 8008648:	d11b      	bne.n	8008682 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008654:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008656:	429a      	cmp	r2, r3
 8008658:	d113      	bne.n	8008682 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008664:	085b      	lsrs	r3, r3, #1
 8008666:	3b01      	subs	r3, #1
 8008668:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800866a:	429a      	cmp	r2, r3
 800866c:	d109      	bne.n	8008682 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008678:	085b      	lsrs	r3, r3, #1
 800867a:	3b01      	subs	r3, #1
 800867c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800867e:	429a      	cmp	r2, r3
 8008680:	d001      	beq.n	8008686 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e000      	b.n	8008688 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3720      	adds	r7, #32
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	40021000 	.word	0x40021000
 8008694:	019f800c 	.word	0x019f800c
 8008698:	feeefffc 	.word	0xfeeefffc

0800869c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80086a6:	2300      	movs	r3, #0
 80086a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d101      	bne.n	80086b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e11e      	b.n	80088f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80086b4:	4b91      	ldr	r3, [pc, #580]	@ (80088fc <HAL_RCC_ClockConfig+0x260>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 030f 	and.w	r3, r3, #15
 80086bc:	683a      	ldr	r2, [r7, #0]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d910      	bls.n	80086e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086c2:	4b8e      	ldr	r3, [pc, #568]	@ (80088fc <HAL_RCC_ClockConfig+0x260>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f023 020f 	bic.w	r2, r3, #15
 80086ca:	498c      	ldr	r1, [pc, #560]	@ (80088fc <HAL_RCC_ClockConfig+0x260>)
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086d2:	4b8a      	ldr	r3, [pc, #552]	@ (80088fc <HAL_RCC_ClockConfig+0x260>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 030f 	and.w	r3, r3, #15
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d001      	beq.n	80086e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e106      	b.n	80088f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0301 	and.w	r3, r3, #1
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d073      	beq.n	80087d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d129      	bne.n	800874c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086f8:	4b81      	ldr	r3, [pc, #516]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e0f4      	b.n	80088f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008708:	f000 f9ca 	bl	8008aa0 <RCC_GetSysClockFreqFromPLLSource>
 800870c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	4a7c      	ldr	r2, [pc, #496]	@ (8008904 <HAL_RCC_ClockConfig+0x268>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d93f      	bls.n	8008796 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008716:	4b7a      	ldr	r3, [pc, #488]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d009      	beq.n	8008736 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800872a:	2b00      	cmp	r3, #0
 800872c:	d033      	beq.n	8008796 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008732:	2b00      	cmp	r3, #0
 8008734:	d12f      	bne.n	8008796 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008736:	4b72      	ldr	r3, [pc, #456]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800873e:	4a70      	ldr	r2, [pc, #448]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 8008740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008744:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008746:	2380      	movs	r3, #128	@ 0x80
 8008748:	617b      	str	r3, [r7, #20]
 800874a:	e024      	b.n	8008796 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	2b02      	cmp	r3, #2
 8008752:	d107      	bne.n	8008764 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008754:	4b6a      	ldr	r3, [pc, #424]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d109      	bne.n	8008774 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e0c6      	b.n	80088f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008764:	4b66      	ldr	r3, [pc, #408]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e0be      	b.n	80088f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008774:	f000 f8ce 	bl	8008914 <HAL_RCC_GetSysClockFreq>
 8008778:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	4a61      	ldr	r2, [pc, #388]	@ (8008904 <HAL_RCC_ClockConfig+0x268>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d909      	bls.n	8008796 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008782:	4b5f      	ldr	r3, [pc, #380]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800878a:	4a5d      	ldr	r2, [pc, #372]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 800878c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008790:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008792:	2380      	movs	r3, #128	@ 0x80
 8008794:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008796:	4b5a      	ldr	r3, [pc, #360]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	f023 0203 	bic.w	r2, r3, #3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	4957      	ldr	r1, [pc, #348]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087a8:	f7fa fefc 	bl	80035a4 <HAL_GetTick>
 80087ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087ae:	e00a      	b.n	80087c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087b0:	f7fa fef8 	bl	80035a4 <HAL_GetTick>
 80087b4:	4602      	mov	r2, r0
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087be:	4293      	cmp	r3, r2
 80087c0:	d901      	bls.n	80087c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e095      	b.n	80088f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087c6:	4b4e      	ldr	r3, [pc, #312]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f003 020c 	and.w	r2, r3, #12
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d1eb      	bne.n	80087b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0302 	and.w	r3, r3, #2
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d023      	beq.n	800882c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0304 	and.w	r3, r3, #4
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d005      	beq.n	80087fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80087f0:	4b43      	ldr	r3, [pc, #268]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	4a42      	ldr	r2, [pc, #264]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 80087f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80087fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0308 	and.w	r3, r3, #8
 8008804:	2b00      	cmp	r3, #0
 8008806:	d007      	beq.n	8008818 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008808:	4b3d      	ldr	r3, [pc, #244]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008810:	4a3b      	ldr	r2, [pc, #236]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 8008812:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008816:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008818:	4b39      	ldr	r3, [pc, #228]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	4936      	ldr	r1, [pc, #216]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 8008826:	4313      	orrs	r3, r2
 8008828:	608b      	str	r3, [r1, #8]
 800882a:	e008      	b.n	800883e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2b80      	cmp	r3, #128	@ 0x80
 8008830:	d105      	bne.n	800883e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008832:	4b33      	ldr	r3, [pc, #204]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	4a32      	ldr	r2, [pc, #200]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 8008838:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800883c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800883e:	4b2f      	ldr	r3, [pc, #188]	@ (80088fc <HAL_RCC_ClockConfig+0x260>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 030f 	and.w	r3, r3, #15
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	429a      	cmp	r2, r3
 800884a:	d21d      	bcs.n	8008888 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800884c:	4b2b      	ldr	r3, [pc, #172]	@ (80088fc <HAL_RCC_ClockConfig+0x260>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f023 020f 	bic.w	r2, r3, #15
 8008854:	4929      	ldr	r1, [pc, #164]	@ (80088fc <HAL_RCC_ClockConfig+0x260>)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	4313      	orrs	r3, r2
 800885a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800885c:	f7fa fea2 	bl	80035a4 <HAL_GetTick>
 8008860:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008862:	e00a      	b.n	800887a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008864:	f7fa fe9e 	bl	80035a4 <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008872:	4293      	cmp	r3, r2
 8008874:	d901      	bls.n	800887a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e03b      	b.n	80088f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800887a:	4b20      	ldr	r3, [pc, #128]	@ (80088fc <HAL_RCC_ClockConfig+0x260>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 030f 	and.w	r3, r3, #15
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	429a      	cmp	r2, r3
 8008886:	d1ed      	bne.n	8008864 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0304 	and.w	r3, r3, #4
 8008890:	2b00      	cmp	r3, #0
 8008892:	d008      	beq.n	80088a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008894:	4b1a      	ldr	r3, [pc, #104]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	4917      	ldr	r1, [pc, #92]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0308 	and.w	r3, r3, #8
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d009      	beq.n	80088c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80088b2:	4b13      	ldr	r3, [pc, #76]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	00db      	lsls	r3, r3, #3
 80088c0:	490f      	ldr	r1, [pc, #60]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80088c6:	f000 f825 	bl	8008914 <HAL_RCC_GetSysClockFreq>
 80088ca:	4602      	mov	r2, r0
 80088cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008900 <HAL_RCC_ClockConfig+0x264>)
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	091b      	lsrs	r3, r3, #4
 80088d2:	f003 030f 	and.w	r3, r3, #15
 80088d6:	490c      	ldr	r1, [pc, #48]	@ (8008908 <HAL_RCC_ClockConfig+0x26c>)
 80088d8:	5ccb      	ldrb	r3, [r1, r3]
 80088da:	f003 031f 	and.w	r3, r3, #31
 80088de:	fa22 f303 	lsr.w	r3, r2, r3
 80088e2:	4a0a      	ldr	r2, [pc, #40]	@ (800890c <HAL_RCC_ClockConfig+0x270>)
 80088e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80088e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008910 <HAL_RCC_ClockConfig+0x274>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fa fe0e 	bl	800350c <HAL_InitTick>
 80088f0:	4603      	mov	r3, r0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3718      	adds	r7, #24
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	40022000 	.word	0x40022000
 8008900:	40021000 	.word	0x40021000
 8008904:	04c4b400 	.word	0x04c4b400
 8008908:	08014398 	.word	0x08014398
 800890c:	20000004 	.word	0x20000004
 8008910:	20000008 	.word	0x20000008

08008914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008914:	b480      	push	{r7}
 8008916:	b087      	sub	sp, #28
 8008918:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800891a:	4b2c      	ldr	r3, [pc, #176]	@ (80089cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f003 030c 	and.w	r3, r3, #12
 8008922:	2b04      	cmp	r3, #4
 8008924:	d102      	bne.n	800892c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008926:	4b2a      	ldr	r3, [pc, #168]	@ (80089d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008928:	613b      	str	r3, [r7, #16]
 800892a:	e047      	b.n	80089bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800892c:	4b27      	ldr	r3, [pc, #156]	@ (80089cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f003 030c 	and.w	r3, r3, #12
 8008934:	2b08      	cmp	r3, #8
 8008936:	d102      	bne.n	800893e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008938:	4b26      	ldr	r3, [pc, #152]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800893a:	613b      	str	r3, [r7, #16]
 800893c:	e03e      	b.n	80089bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800893e:	4b23      	ldr	r3, [pc, #140]	@ (80089cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f003 030c 	and.w	r3, r3, #12
 8008946:	2b0c      	cmp	r3, #12
 8008948:	d136      	bne.n	80089b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800894a:	4b20      	ldr	r3, [pc, #128]	@ (80089cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	f003 0303 	and.w	r3, r3, #3
 8008952:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008954:	4b1d      	ldr	r3, [pc, #116]	@ (80089cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	091b      	lsrs	r3, r3, #4
 800895a:	f003 030f 	and.w	r3, r3, #15
 800895e:	3301      	adds	r3, #1
 8008960:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2b03      	cmp	r3, #3
 8008966:	d10c      	bne.n	8008982 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008968:	4a1a      	ldr	r2, [pc, #104]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008970:	4a16      	ldr	r2, [pc, #88]	@ (80089cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008972:	68d2      	ldr	r2, [r2, #12]
 8008974:	0a12      	lsrs	r2, r2, #8
 8008976:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800897a:	fb02 f303 	mul.w	r3, r2, r3
 800897e:	617b      	str	r3, [r7, #20]
      break;
 8008980:	e00c      	b.n	800899c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008982:	4a13      	ldr	r2, [pc, #76]	@ (80089d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	fbb2 f3f3 	udiv	r3, r2, r3
 800898a:	4a10      	ldr	r2, [pc, #64]	@ (80089cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800898c:	68d2      	ldr	r2, [r2, #12]
 800898e:	0a12      	lsrs	r2, r2, #8
 8008990:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008994:	fb02 f303 	mul.w	r3, r2, r3
 8008998:	617b      	str	r3, [r7, #20]
      break;
 800899a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800899c:	4b0b      	ldr	r3, [pc, #44]	@ (80089cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	0e5b      	lsrs	r3, r3, #25
 80089a2:	f003 0303 	and.w	r3, r3, #3
 80089a6:	3301      	adds	r3, #1
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089b4:	613b      	str	r3, [r7, #16]
 80089b6:	e001      	b.n	80089bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80089bc:	693b      	ldr	r3, [r7, #16]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	371c      	adds	r7, #28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	40021000 	.word	0x40021000
 80089d0:	00f42400 	.word	0x00f42400
 80089d4:	007a1200 	.word	0x007a1200

080089d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089d8:	b480      	push	{r7}
 80089da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80089dc:	4b03      	ldr	r3, [pc, #12]	@ (80089ec <HAL_RCC_GetHCLKFreq+0x14>)
 80089de:	681b      	ldr	r3, [r3, #0]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	20000004 	.word	0x20000004

080089f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80089f4:	f7ff fff0 	bl	80089d8 <HAL_RCC_GetHCLKFreq>
 80089f8:	4602      	mov	r2, r0
 80089fa:	4b06      	ldr	r3, [pc, #24]	@ (8008a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	0a1b      	lsrs	r3, r3, #8
 8008a00:	f003 0307 	and.w	r3, r3, #7
 8008a04:	4904      	ldr	r1, [pc, #16]	@ (8008a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a06:	5ccb      	ldrb	r3, [r1, r3]
 8008a08:	f003 031f 	and.w	r3, r3, #31
 8008a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	40021000 	.word	0x40021000
 8008a18:	080143a8 	.word	0x080143a8

08008a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008a20:	f7ff ffda 	bl	80089d8 <HAL_RCC_GetHCLKFreq>
 8008a24:	4602      	mov	r2, r0
 8008a26:	4b06      	ldr	r3, [pc, #24]	@ (8008a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	0adb      	lsrs	r3, r3, #11
 8008a2c:	f003 0307 	and.w	r3, r3, #7
 8008a30:	4904      	ldr	r1, [pc, #16]	@ (8008a44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a32:	5ccb      	ldrb	r3, [r1, r3]
 8008a34:	f003 031f 	and.w	r3, r3, #31
 8008a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	40021000 	.word	0x40021000
 8008a44:	080143a8 	.word	0x080143a8

08008a48 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8008a4c:	4b05      	ldr	r3, [pc, #20]	@ (8008a64 <HAL_RCC_EnableCSS+0x1c>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a04      	ldr	r2, [pc, #16]	@ (8008a64 <HAL_RCC_EnableCSS+0x1c>)
 8008a52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a56:	6013      	str	r3, [r2, #0]
}
 8008a58:	bf00      	nop
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	40021000 	.word	0x40021000

08008a68 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008a6c:	4b07      	ldr	r3, [pc, #28]	@ (8008a8c <HAL_RCC_NMI_IRQHandler+0x24>)
 8008a6e:	69db      	ldr	r3, [r3, #28]
 8008a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a78:	d105      	bne.n	8008a86 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008a7a:	f000 f809 	bl	8008a90 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008a7e:	4b03      	ldr	r3, [pc, #12]	@ (8008a8c <HAL_RCC_NMI_IRQHandler+0x24>)
 8008a80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a84:	621a      	str	r2, [r3, #32]
  }
}
 8008a86:	bf00      	nop
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	40021000 	.word	0x40021000

08008a90 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008a90:	b480      	push	{r7}
 8008a92:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8008a94:	bf00      	nop
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
	...

08008aa0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8008b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	f003 0303 	and.w	r3, r3, #3
 8008aae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8008b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	091b      	lsrs	r3, r3, #4
 8008ab6:	f003 030f 	and.w	r3, r3, #15
 8008aba:	3301      	adds	r3, #1
 8008abc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	d10c      	bne.n	8008ade <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008ac4:	4a17      	ldr	r2, [pc, #92]	@ (8008b24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008acc:	4a14      	ldr	r2, [pc, #80]	@ (8008b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008ace:	68d2      	ldr	r2, [r2, #12]
 8008ad0:	0a12      	lsrs	r2, r2, #8
 8008ad2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008ad6:	fb02 f303 	mul.w	r3, r2, r3
 8008ada:	617b      	str	r3, [r7, #20]
    break;
 8008adc:	e00c      	b.n	8008af8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008ade:	4a12      	ldr	r2, [pc, #72]	@ (8008b28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8008b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008ae8:	68d2      	ldr	r2, [r2, #12]
 8008aea:	0a12      	lsrs	r2, r2, #8
 8008aec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008af0:	fb02 f303 	mul.w	r3, r2, r3
 8008af4:	617b      	str	r3, [r7, #20]
    break;
 8008af6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008af8:	4b09      	ldr	r3, [pc, #36]	@ (8008b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	0e5b      	lsrs	r3, r3, #25
 8008afe:	f003 0303 	and.w	r3, r3, #3
 8008b02:	3301      	adds	r3, #1
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008b12:	687b      	ldr	r3, [r7, #4]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	371c      	adds	r7, #28
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr
 8008b20:	40021000 	.word	0x40021000
 8008b24:	007a1200 	.word	0x007a1200
 8008b28:	00f42400 	.word	0x00f42400

08008b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b34:	2300      	movs	r3, #0
 8008b36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b38:	2300      	movs	r3, #0
 8008b3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 8098 	beq.w	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b4e:	4b43      	ldr	r3, [pc, #268]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10d      	bne.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b5a:	4b40      	ldr	r3, [pc, #256]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b5e:	4a3f      	ldr	r2, [pc, #252]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b66:	4b3d      	ldr	r3, [pc, #244]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b6e:	60bb      	str	r3, [r7, #8]
 8008b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b72:	2301      	movs	r3, #1
 8008b74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b76:	4b3a      	ldr	r3, [pc, #232]	@ (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a39      	ldr	r2, [pc, #228]	@ (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b82:	f7fa fd0f 	bl	80035a4 <HAL_GetTick>
 8008b86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b88:	e009      	b.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b8a:	f7fa fd0b 	bl	80035a4 <HAL_GetTick>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	1ad3      	subs	r3, r2, r3
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d902      	bls.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	74fb      	strb	r3, [r7, #19]
        break;
 8008b9c:	e005      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b9e:	4b30      	ldr	r3, [pc, #192]	@ (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d0ef      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008baa:	7cfb      	ldrb	r3, [r7, #19]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d159      	bne.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d01e      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d019      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008bcc:	4b23      	ldr	r3, [pc, #140]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008bd8:	4b20      	ldr	r3, [pc, #128]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bde:	4a1f      	ldr	r2, [pc, #124]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008be8:	4b1c      	ldr	r3, [pc, #112]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bee:	4a1b      	ldr	r2, [pc, #108]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008bf8:	4a18      	ldr	r2, [pc, #96]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d016      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c0a:	f7fa fccb 	bl	80035a4 <HAL_GetTick>
 8008c0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c10:	e00b      	b.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c12:	f7fa fcc7 	bl	80035a4 <HAL_GetTick>
 8008c16:	4602      	mov	r2, r0
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d902      	bls.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008c24:	2303      	movs	r3, #3
 8008c26:	74fb      	strb	r3, [r7, #19]
            break;
 8008c28:	e006      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c30:	f003 0302 	and.w	r3, r3, #2
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d0ec      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008c38:	7cfb      	ldrb	r3, [r7, #19]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10b      	bne.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c3e:	4b07      	ldr	r3, [pc, #28]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c4c:	4903      	ldr	r1, [pc, #12]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008c54:	e008      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008c56:	7cfb      	ldrb	r3, [r7, #19]
 8008c58:	74bb      	strb	r3, [r7, #18]
 8008c5a:	e005      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008c5c:	40021000 	.word	0x40021000
 8008c60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c64:	7cfb      	ldrb	r3, [r7, #19]
 8008c66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008c68:	7c7b      	ldrb	r3, [r7, #17]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d105      	bne.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c6e:	4ba7      	ldr	r3, [pc, #668]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c72:	4aa6      	ldr	r2, [pc, #664]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00a      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008c86:	4ba1      	ldr	r3, [pc, #644]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c8c:	f023 0203 	bic.w	r2, r3, #3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	499d      	ldr	r1, [pc, #628]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0302 	and.w	r3, r3, #2
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00a      	beq.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008ca8:	4b98      	ldr	r3, [pc, #608]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cae:	f023 020c 	bic.w	r2, r3, #12
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	4995      	ldr	r1, [pc, #596]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0304 	and.w	r3, r3, #4
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00a      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008cca:	4b90      	ldr	r3, [pc, #576]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cd0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	498c      	ldr	r1, [pc, #560]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 0308 	and.w	r3, r3, #8
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00a      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008cec:	4b87      	ldr	r3, [pc, #540]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cf2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	4984      	ldr	r1, [pc, #528]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0310 	and.w	r3, r3, #16
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00a      	beq.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008d0e:	4b7f      	ldr	r3, [pc, #508]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	497b      	ldr	r1, [pc, #492]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 0320 	and.w	r3, r3, #32
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00a      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008d30:	4b76      	ldr	r3, [pc, #472]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d36:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	4973      	ldr	r1, [pc, #460]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d40:	4313      	orrs	r3, r2
 8008d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00a      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d52:	4b6e      	ldr	r3, [pc, #440]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d58:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	496a      	ldr	r1, [pc, #424]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d62:	4313      	orrs	r3, r2
 8008d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00a      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008d74:	4b65      	ldr	r3, [pc, #404]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d7a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	4962      	ldr	r1, [pc, #392]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d84:	4313      	orrs	r3, r2
 8008d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00a      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008d96:	4b5d      	ldr	r3, [pc, #372]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da4:	4959      	ldr	r1, [pc, #356]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008da6:	4313      	orrs	r3, r2
 8008da8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00a      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008db8:	4b54      	ldr	r3, [pc, #336]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008dbe:	f023 0203 	bic.w	r2, r3, #3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dc6:	4951      	ldr	r1, [pc, #324]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00a      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008dda:	4b4c      	ldr	r3, [pc, #304]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008de0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de8:	4948      	ldr	r1, [pc, #288]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dea:	4313      	orrs	r3, r2
 8008dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d015      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008dfc:	4b43      	ldr	r3, [pc, #268]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e0a:	4940      	ldr	r1, [pc, #256]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e1a:	d105      	bne.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	4a3a      	ldr	r2, [pc, #232]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e26:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d015      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008e34:	4b35      	ldr	r3, [pc, #212]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e3a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e42:	4932      	ldr	r1, [pc, #200]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e44:	4313      	orrs	r3, r2
 8008e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e52:	d105      	bne.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e54:	4b2d      	ldr	r3, [pc, #180]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	4a2c      	ldr	r2, [pc, #176]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e5e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d015      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008e6c:	4b27      	ldr	r3, [pc, #156]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e72:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e7a:	4924      	ldr	r1, [pc, #144]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e8a:	d105      	bne.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	4a1e      	ldr	r2, [pc, #120]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e96:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d015      	beq.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ea4:	4b19      	ldr	r3, [pc, #100]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eaa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eb2:	4916      	ldr	r1, [pc, #88]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ebe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ec2:	d105      	bne.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ec4:	4b11      	ldr	r3, [pc, #68]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	4a10      	ldr	r2, [pc, #64]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ece:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d019      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008edc:	4b0b      	ldr	r3, [pc, #44]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ee2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eea:	4908      	ldr	r1, [pc, #32]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eec:	4313      	orrs	r3, r2
 8008eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008efa:	d109      	bne.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008efc:	4b03      	ldr	r3, [pc, #12]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	4a02      	ldr	r2, [pc, #8]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f06:	60d3      	str	r3, [r2, #12]
 8008f08:	e002      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008f0a:	bf00      	nop
 8008f0c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d015      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008f1c:	4b29      	ldr	r3, [pc, #164]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f22:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f2a:	4926      	ldr	r1, [pc, #152]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f3a:	d105      	bne.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008f3c:	4b21      	ldr	r3, [pc, #132]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	4a20      	ldr	r2, [pc, #128]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f46:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d015      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008f54:	4b1b      	ldr	r3, [pc, #108]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f5a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f62:	4918      	ldr	r1, [pc, #96]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f64:	4313      	orrs	r3, r2
 8008f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f72:	d105      	bne.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008f74:	4b13      	ldr	r3, [pc, #76]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	4a12      	ldr	r2, [pc, #72]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f7e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d015      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008f92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f9a:	490a      	ldr	r1, [pc, #40]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fa6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008faa:	d105      	bne.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fac:	4b05      	ldr	r3, [pc, #20]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	4a04      	ldr	r2, [pc, #16]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008fb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fb6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008fb8:	7cbb      	ldrb	r3, [r7, #18]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3718      	adds	r7, #24
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	40021000 	.word	0x40021000

08008fc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d101      	bne.n	8008fda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e09d      	b.n	8009116 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d108      	bne.n	8008ff4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fea:	d009      	beq.n	8009000 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	61da      	str	r2, [r3, #28]
 8008ff2:	e005      	b.n	8009000 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800900c:	b2db      	uxtb	r3, r3
 800900e:	2b00      	cmp	r3, #0
 8009010:	d106      	bne.n	8009020 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7f9 fe52 	bl	8002cc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2202      	movs	r2, #2
 8009024:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009036:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009040:	d902      	bls.n	8009048 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009042:	2300      	movs	r3, #0
 8009044:	60fb      	str	r3, [r7, #12]
 8009046:	e002      	b.n	800904e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009048:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800904c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009056:	d007      	beq.n	8009068 <HAL_SPI_Init+0xa0>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009060:	d002      	beq.n	8009068 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009078:	431a      	orrs	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	f003 0302 	and.w	r3, r3, #2
 8009082:	431a      	orrs	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	f003 0301 	and.w	r3, r3, #1
 800908c:	431a      	orrs	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009096:	431a      	orrs	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090a0:	431a      	orrs	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090aa:	ea42 0103 	orr.w	r1, r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	0c1b      	lsrs	r3, r3, #16
 80090c4:	f003 0204 	and.w	r2, r3, #4
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090cc:	f003 0310 	and.w	r3, r3, #16
 80090d0:	431a      	orrs	r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090d6:	f003 0308 	and.w	r3, r3, #8
 80090da:	431a      	orrs	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80090e4:	ea42 0103 	orr.w	r1, r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	430a      	orrs	r2, r1
 80090f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	69da      	ldr	r2, [r3, #28]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009104:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b088      	sub	sp, #32
 8009122:	af00      	add	r7, sp, #0
 8009124:	60f8      	str	r0, [r7, #12]
 8009126:	60b9      	str	r1, [r7, #8]
 8009128:	603b      	str	r3, [r7, #0]
 800912a:	4613      	mov	r3, r2
 800912c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800912e:	f7fa fa39 	bl	80035a4 <HAL_GetTick>
 8009132:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009134:	88fb      	ldrh	r3, [r7, #6]
 8009136:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800913e:	b2db      	uxtb	r3, r3
 8009140:	2b01      	cmp	r3, #1
 8009142:	d001      	beq.n	8009148 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009144:	2302      	movs	r3, #2
 8009146:	e15c      	b.n	8009402 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d002      	beq.n	8009154 <HAL_SPI_Transmit+0x36>
 800914e:	88fb      	ldrh	r3, [r7, #6]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d101      	bne.n	8009158 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e154      	b.n	8009402 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800915e:	2b01      	cmp	r3, #1
 8009160:	d101      	bne.n	8009166 <HAL_SPI_Transmit+0x48>
 8009162:	2302      	movs	r3, #2
 8009164:	e14d      	b.n	8009402 <HAL_SPI_Transmit+0x2e4>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2201      	movs	r2, #1
 800916a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2203      	movs	r2, #3
 8009172:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	88fa      	ldrh	r2, [r7, #6]
 8009186:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	88fa      	ldrh	r2, [r7, #6]
 800918c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091b8:	d10f      	bne.n	80091da <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091e4:	2b40      	cmp	r3, #64	@ 0x40
 80091e6:	d007      	beq.n	80091f8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80091f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009200:	d952      	bls.n	80092a8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d002      	beq.n	8009210 <HAL_SPI_Transmit+0xf2>
 800920a:	8b7b      	ldrh	r3, [r7, #26]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d145      	bne.n	800929c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009214:	881a      	ldrh	r2, [r3, #0]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009220:	1c9a      	adds	r2, r3, #2
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800922a:	b29b      	uxth	r3, r3
 800922c:	3b01      	subs	r3, #1
 800922e:	b29a      	uxth	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009234:	e032      	b.n	800929c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	f003 0302 	and.w	r3, r3, #2
 8009240:	2b02      	cmp	r3, #2
 8009242:	d112      	bne.n	800926a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009248:	881a      	ldrh	r2, [r3, #0]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009254:	1c9a      	adds	r2, r3, #2
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800925e:	b29b      	uxth	r3, r3
 8009260:	3b01      	subs	r3, #1
 8009262:	b29a      	uxth	r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009268:	e018      	b.n	800929c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800926a:	f7fa f99b 	bl	80035a4 <HAL_GetTick>
 800926e:	4602      	mov	r2, r0
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	429a      	cmp	r2, r3
 8009278:	d803      	bhi.n	8009282 <HAL_SPI_Transmit+0x164>
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009280:	d102      	bne.n	8009288 <HAL_SPI_Transmit+0x16a>
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d109      	bne.n	800929c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009298:	2303      	movs	r3, #3
 800929a:	e0b2      	b.n	8009402 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1c7      	bne.n	8009236 <HAL_SPI_Transmit+0x118>
 80092a6:	e083      	b.n	80093b0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d002      	beq.n	80092b6 <HAL_SPI_Transmit+0x198>
 80092b0:	8b7b      	ldrh	r3, [r7, #26]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d177      	bne.n	80093a6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d912      	bls.n	80092e6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c4:	881a      	ldrh	r2, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d0:	1c9a      	adds	r2, r3, #2
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092da:	b29b      	uxth	r3, r3
 80092dc:	3b02      	subs	r3, #2
 80092de:	b29a      	uxth	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80092e4:	e05f      	b.n	80093a6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	330c      	adds	r3, #12
 80092f0:	7812      	ldrb	r2, [r2, #0]
 80092f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f8:	1c5a      	adds	r2, r3, #1
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009302:	b29b      	uxth	r3, r3
 8009304:	3b01      	subs	r3, #1
 8009306:	b29a      	uxth	r2, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800930c:	e04b      	b.n	80093a6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	f003 0302 	and.w	r3, r3, #2
 8009318:	2b02      	cmp	r3, #2
 800931a:	d12b      	bne.n	8009374 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009320:	b29b      	uxth	r3, r3
 8009322:	2b01      	cmp	r3, #1
 8009324:	d912      	bls.n	800934c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800932a:	881a      	ldrh	r2, [r3, #0]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009336:	1c9a      	adds	r2, r3, #2
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009340:	b29b      	uxth	r3, r3
 8009342:	3b02      	subs	r3, #2
 8009344:	b29a      	uxth	r2, r3
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800934a:	e02c      	b.n	80093a6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	330c      	adds	r3, #12
 8009356:	7812      	ldrb	r2, [r2, #0]
 8009358:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800935e:	1c5a      	adds	r2, r3, #1
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009368:	b29b      	uxth	r3, r3
 800936a:	3b01      	subs	r3, #1
 800936c:	b29a      	uxth	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009372:	e018      	b.n	80093a6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009374:	f7fa f916 	bl	80035a4 <HAL_GetTick>
 8009378:	4602      	mov	r2, r0
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	1ad3      	subs	r3, r2, r3
 800937e:	683a      	ldr	r2, [r7, #0]
 8009380:	429a      	cmp	r2, r3
 8009382:	d803      	bhi.n	800938c <HAL_SPI_Transmit+0x26e>
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938a:	d102      	bne.n	8009392 <HAL_SPI_Transmit+0x274>
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d109      	bne.n	80093a6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e02d      	b.n	8009402 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1ae      	bne.n	800930e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80093b0:	69fa      	ldr	r2, [r7, #28]
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f000 fad5 	bl	8009964 <SPI_EndRxTxTransaction>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d002      	beq.n	80093c6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2220      	movs	r2, #32
 80093c4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10a      	bne.n	80093e4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093ce:	2300      	movs	r3, #0
 80093d0:	617b      	str	r3, [r7, #20]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	617b      	str	r3, [r7, #20]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	617b      	str	r3, [r7, #20]
 80093e2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e000      	b.n	8009402 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8009400:	2300      	movs	r3, #0
  }
}
 8009402:	4618      	mov	r0, r3
 8009404:	3720      	adds	r7, #32
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
	...

0800940c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	4613      	mov	r3, r2
 8009418:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b01      	cmp	r3, #1
 8009424:	d001      	beq.n	800942a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8009426:	2302      	movs	r3, #2
 8009428:	e0d4      	b.n	80095d4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <HAL_SPI_Transmit_DMA+0x2a>
 8009430:	88fb      	ldrh	r3, [r7, #6]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e0cc      	b.n	80095d4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009440:	2b01      	cmp	r3, #1
 8009442:	d101      	bne.n	8009448 <HAL_SPI_Transmit_DMA+0x3c>
 8009444:	2302      	movs	r3, #2
 8009446:	e0c5      	b.n	80095d4 <HAL_SPI_Transmit_DMA+0x1c8>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2203      	movs	r2, #3
 8009454:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	88fa      	ldrh	r2, [r7, #6]
 8009468:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	88fa      	ldrh	r2, [r7, #6]
 800946e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2200      	movs	r2, #0
 8009474:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800949a:	d10f      	bne.n	80094bc <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80094ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094c0:	4a46      	ldr	r2, [pc, #280]	@ (80095dc <HAL_SPI_Transmit_DMA+0x1d0>)
 80094c2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094c8:	4a45      	ldr	r2, [pc, #276]	@ (80095e0 <HAL_SPI_Transmit_DMA+0x1d4>)
 80094ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094d0:	4a44      	ldr	r2, [pc, #272]	@ (80095e4 <HAL_SPI_Transmit_DMA+0x1d8>)
 80094d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094d8:	2200      	movs	r2, #0
 80094da:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80094ea:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80094f4:	d82d      	bhi.n	8009552 <HAL_SPI_Transmit_DMA+0x146>
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009500:	d127      	bne.n	8009552 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009506:	b29b      	uxth	r3, r3
 8009508:	f003 0301 	and.w	r3, r3, #1
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10f      	bne.n	8009530 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	685a      	ldr	r2, [r3, #4]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800951e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009524:	b29b      	uxth	r3, r3
 8009526:	085b      	lsrs	r3, r3, #1
 8009528:	b29a      	uxth	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800952e:	e010      	b.n	8009552 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	685a      	ldr	r2, [r3, #4]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800953e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009544:	b29b      	uxth	r3, r3
 8009546:	085b      	lsrs	r3, r3, #1
 8009548:	b29b      	uxth	r3, r3
 800954a:	3301      	adds	r3, #1
 800954c:	b29a      	uxth	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800955a:	4619      	mov	r1, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	330c      	adds	r3, #12
 8009562:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009568:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800956a:	f7fb febd 	bl	80052e8 <HAL_DMA_Start_IT>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00b      	beq.n	800958c <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009578:	f043 0210 	orr.w	r2, r3, #16
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e023      	b.n	80095d4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009596:	2b40      	cmp	r3, #64	@ 0x40
 8009598:	d007      	beq.n	80095aa <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095a8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	685a      	ldr	r2, [r3, #4]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f042 0220 	orr.w	r2, r2, #32
 80095c0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	685a      	ldr	r2, [r3, #4]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f042 0202 	orr.w	r2, r2, #2
 80095d0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	080096cb 	.word	0x080096cb
 80095e0:	08009625 	.word	0x08009625
 80095e4:	080096e7 	.word	0x080096e7

080095e8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009630:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009632:	f7f9 ffb7 	bl	80035a4 <HAL_GetTick>
 8009636:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 0320 	and.w	r3, r3, #32
 8009642:	2b20      	cmp	r3, #32
 8009644:	d03b      	beq.n	80096be <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f022 0220 	bic.w	r2, r2, #32
 8009654:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f022 0202 	bic.w	r2, r2, #2
 8009664:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009666:	693a      	ldr	r2, [r7, #16]
 8009668:	2164      	movs	r1, #100	@ 0x64
 800966a:	6978      	ldr	r0, [r7, #20]
 800966c:	f000 f97a 	bl	8009964 <SPI_EndRxTxTransaction>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d005      	beq.n	8009682 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800967a:	f043 0220 	orr.w	r2, r3, #32
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10a      	bne.n	80096a0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800968a:	2300      	movs	r3, #0
 800968c:	60fb      	str	r3, [r7, #12]
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	60fb      	str	r3, [r7, #12]
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	60fb      	str	r3, [r7, #12]
 800969e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	2200      	movs	r2, #0
 80096a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d003      	beq.n	80096be <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80096b6:	6978      	ldr	r0, [r7, #20]
 80096b8:	f7ff ffaa 	bl	8009610 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80096bc:	e002      	b.n	80096c4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80096be:	6978      	ldr	r0, [r7, #20]
 80096c0:	f7ff ff92 	bl	80095e8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80096c4:	3718      	adds	r7, #24
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b084      	sub	sp, #16
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f7ff ff8f 	bl	80095fc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80096de:	bf00      	nop
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b084      	sub	sp, #16
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096f2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f022 0203 	bic.w	r2, r2, #3
 8009702:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009708:	f043 0210 	orr.w	r2, r3, #16
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009718:	68f8      	ldr	r0, [r7, #12]
 800971a:	f7ff ff79 	bl	8009610 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800971e:	bf00      	nop
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
	...

08009728 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b088      	sub	sp, #32
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	603b      	str	r3, [r7, #0]
 8009734:	4613      	mov	r3, r2
 8009736:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009738:	f7f9 ff34 	bl	80035a4 <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009740:	1a9b      	subs	r3, r3, r2
 8009742:	683a      	ldr	r2, [r7, #0]
 8009744:	4413      	add	r3, r2
 8009746:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009748:	f7f9 ff2c 	bl	80035a4 <HAL_GetTick>
 800974c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800974e:	4b39      	ldr	r3, [pc, #228]	@ (8009834 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	015b      	lsls	r3, r3, #5
 8009754:	0d1b      	lsrs	r3, r3, #20
 8009756:	69fa      	ldr	r2, [r7, #28]
 8009758:	fb02 f303 	mul.w	r3, r2, r3
 800975c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800975e:	e054      	b.n	800980a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009766:	d050      	beq.n	800980a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009768:	f7f9 ff1c 	bl	80035a4 <HAL_GetTick>
 800976c:	4602      	mov	r2, r0
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	69fa      	ldr	r2, [r7, #28]
 8009774:	429a      	cmp	r2, r3
 8009776:	d902      	bls.n	800977e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d13d      	bne.n	80097fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800978c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009796:	d111      	bne.n	80097bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097a0:	d004      	beq.n	80097ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097aa:	d107      	bne.n	80097bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097c4:	d10f      	bne.n	80097e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80097d4:	601a      	str	r2, [r3, #0]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80097e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80097f6:	2303      	movs	r3, #3
 80097f8:	e017      	b.n	800982a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d101      	bne.n	8009804 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009800:	2300      	movs	r3, #0
 8009802:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	3b01      	subs	r3, #1
 8009808:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	689a      	ldr	r2, [r3, #8]
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	4013      	ands	r3, r2
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	429a      	cmp	r2, r3
 8009818:	bf0c      	ite	eq
 800981a:	2301      	moveq	r3, #1
 800981c:	2300      	movne	r3, #0
 800981e:	b2db      	uxtb	r3, r3
 8009820:	461a      	mov	r2, r3
 8009822:	79fb      	ldrb	r3, [r7, #7]
 8009824:	429a      	cmp	r2, r3
 8009826:	d19b      	bne.n	8009760 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3720      	adds	r7, #32
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	20000004 	.word	0x20000004

08009838 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b08a      	sub	sp, #40	@ 0x28
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
 8009844:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800984a:	f7f9 feab 	bl	80035a4 <HAL_GetTick>
 800984e:	4602      	mov	r2, r0
 8009850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009852:	1a9b      	subs	r3, r3, r2
 8009854:	683a      	ldr	r2, [r7, #0]
 8009856:	4413      	add	r3, r2
 8009858:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800985a:	f7f9 fea3 	bl	80035a4 <HAL_GetTick>
 800985e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	330c      	adds	r3, #12
 8009866:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009868:	4b3d      	ldr	r3, [pc, #244]	@ (8009960 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	4613      	mov	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4413      	add	r3, r2
 8009872:	00da      	lsls	r2, r3, #3
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	0d1b      	lsrs	r3, r3, #20
 8009878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800987a:	fb02 f303 	mul.w	r3, r2, r3
 800987e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009880:	e060      	b.n	8009944 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009888:	d107      	bne.n	800989a <SPI_WaitFifoStateUntilTimeout+0x62>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d104      	bne.n	800989a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	b2db      	uxtb	r3, r3
 8009896:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009898:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a0:	d050      	beq.n	8009944 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80098a2:	f7f9 fe7f 	bl	80035a4 <HAL_GetTick>
 80098a6:	4602      	mov	r2, r0
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d902      	bls.n	80098b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80098b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d13d      	bne.n	8009934 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	685a      	ldr	r2, [r3, #4]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80098c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80098d0:	d111      	bne.n	80098f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098da:	d004      	beq.n	80098e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098e4:	d107      	bne.n	80098f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80098f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098fe:	d10f      	bne.n	8009920 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800990e:	601a      	str	r2, [r3, #0]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800991e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2200      	movs	r2, #0
 800992c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009930:	2303      	movs	r3, #3
 8009932:	e010      	b.n	8009956 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800993a:	2300      	movs	r3, #0
 800993c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	3b01      	subs	r3, #1
 8009942:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	689a      	ldr	r2, [r3, #8]
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	4013      	ands	r3, r2
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	429a      	cmp	r2, r3
 8009952:	d196      	bne.n	8009882 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3728      	adds	r7, #40	@ 0x28
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	20000004 	.word	0x20000004

08009964 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af02      	add	r7, sp, #8
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	2200      	movs	r2, #0
 8009978:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f7ff ff5b 	bl	8009838 <SPI_WaitFifoStateUntilTimeout>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d007      	beq.n	8009998 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800998c:	f043 0220 	orr.w	r2, r3, #32
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009994:	2303      	movs	r3, #3
 8009996:	e027      	b.n	80099e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	9300      	str	r3, [sp, #0]
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	2200      	movs	r2, #0
 80099a0:	2180      	movs	r1, #128	@ 0x80
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	f7ff fec0 	bl	8009728 <SPI_WaitFlagStateUntilTimeout>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d007      	beq.n	80099be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099b2:	f043 0220 	orr.w	r2, r3, #32
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e014      	b.n	80099e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f7ff ff34 	bl	8009838 <SPI_WaitFifoStateUntilTimeout>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d007      	beq.n	80099e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099da:	f043 0220 	orr.w	r2, r3, #32
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e000      	b.n	80099e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d101      	bne.n	8009a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e049      	b.n	8009a96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d106      	bne.n	8009a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7f9 fab8 	bl	8002f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2202      	movs	r2, #2
 8009a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	3304      	adds	r3, #4
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	4610      	mov	r0, r2
 8009a30:	f000 fd06 	bl	800a440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d101      	bne.n	8009ab0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e049      	b.n	8009b44 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d106      	bne.n	8009aca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f841 	bl	8009b4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2202      	movs	r2, #2
 8009ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	3304      	adds	r3, #4
 8009ada:	4619      	mov	r1, r3
 8009adc:	4610      	mov	r0, r2
 8009ade:	f000 fcaf 	bl	800a440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2201      	movs	r2, #1
 8009af6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2201      	movs	r2, #1
 8009afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2201      	movs	r2, #1
 8009b36:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d109      	bne.n	8009b84 <HAL_TIM_PWM_Start+0x24>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	bf14      	ite	ne
 8009b7c:	2301      	movne	r3, #1
 8009b7e:	2300      	moveq	r3, #0
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	e03c      	b.n	8009bfe <HAL_TIM_PWM_Start+0x9e>
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2b04      	cmp	r3, #4
 8009b88:	d109      	bne.n	8009b9e <HAL_TIM_PWM_Start+0x3e>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	bf14      	ite	ne
 8009b96:	2301      	movne	r3, #1
 8009b98:	2300      	moveq	r3, #0
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	e02f      	b.n	8009bfe <HAL_TIM_PWM_Start+0x9e>
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	2b08      	cmp	r3, #8
 8009ba2:	d109      	bne.n	8009bb8 <HAL_TIM_PWM_Start+0x58>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	bf14      	ite	ne
 8009bb0:	2301      	movne	r3, #1
 8009bb2:	2300      	moveq	r3, #0
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	e022      	b.n	8009bfe <HAL_TIM_PWM_Start+0x9e>
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	2b0c      	cmp	r3, #12
 8009bbc:	d109      	bne.n	8009bd2 <HAL_TIM_PWM_Start+0x72>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	bf14      	ite	ne
 8009bca:	2301      	movne	r3, #1
 8009bcc:	2300      	moveq	r3, #0
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	e015      	b.n	8009bfe <HAL_TIM_PWM_Start+0x9e>
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b10      	cmp	r3, #16
 8009bd6:	d109      	bne.n	8009bec <HAL_TIM_PWM_Start+0x8c>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	bf14      	ite	ne
 8009be4:	2301      	movne	r3, #1
 8009be6:	2300      	moveq	r3, #0
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	e008      	b.n	8009bfe <HAL_TIM_PWM_Start+0x9e>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	bf14      	ite	ne
 8009bf8:	2301      	movne	r3, #1
 8009bfa:	2300      	moveq	r3, #0
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d001      	beq.n	8009c06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e0a6      	b.n	8009d54 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d104      	bne.n	8009c16 <HAL_TIM_PWM_Start+0xb6>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c14:	e023      	b.n	8009c5e <HAL_TIM_PWM_Start+0xfe>
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	2b04      	cmp	r3, #4
 8009c1a:	d104      	bne.n	8009c26 <HAL_TIM_PWM_Start+0xc6>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2202      	movs	r2, #2
 8009c20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c24:	e01b      	b.n	8009c5e <HAL_TIM_PWM_Start+0xfe>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	2b08      	cmp	r3, #8
 8009c2a:	d104      	bne.n	8009c36 <HAL_TIM_PWM_Start+0xd6>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2202      	movs	r2, #2
 8009c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c34:	e013      	b.n	8009c5e <HAL_TIM_PWM_Start+0xfe>
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b0c      	cmp	r3, #12
 8009c3a:	d104      	bne.n	8009c46 <HAL_TIM_PWM_Start+0xe6>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2202      	movs	r2, #2
 8009c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c44:	e00b      	b.n	8009c5e <HAL_TIM_PWM_Start+0xfe>
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	2b10      	cmp	r3, #16
 8009c4a:	d104      	bne.n	8009c56 <HAL_TIM_PWM_Start+0xf6>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c54:	e003      	b.n	8009c5e <HAL_TIM_PWM_Start+0xfe>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2202      	movs	r2, #2
 8009c5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2201      	movs	r2, #1
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f001 f864 	bl	800ad34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a3a      	ldr	r2, [pc, #232]	@ (8009d5c <HAL_TIM_PWM_Start+0x1fc>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d018      	beq.n	8009ca8 <HAL_TIM_PWM_Start+0x148>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a39      	ldr	r2, [pc, #228]	@ (8009d60 <HAL_TIM_PWM_Start+0x200>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d013      	beq.n	8009ca8 <HAL_TIM_PWM_Start+0x148>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a37      	ldr	r2, [pc, #220]	@ (8009d64 <HAL_TIM_PWM_Start+0x204>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d00e      	beq.n	8009ca8 <HAL_TIM_PWM_Start+0x148>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a36      	ldr	r2, [pc, #216]	@ (8009d68 <HAL_TIM_PWM_Start+0x208>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d009      	beq.n	8009ca8 <HAL_TIM_PWM_Start+0x148>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a34      	ldr	r2, [pc, #208]	@ (8009d6c <HAL_TIM_PWM_Start+0x20c>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d004      	beq.n	8009ca8 <HAL_TIM_PWM_Start+0x148>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a33      	ldr	r2, [pc, #204]	@ (8009d70 <HAL_TIM_PWM_Start+0x210>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d101      	bne.n	8009cac <HAL_TIM_PWM_Start+0x14c>
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e000      	b.n	8009cae <HAL_TIM_PWM_Start+0x14e>
 8009cac:	2300      	movs	r3, #0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d007      	beq.n	8009cc2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009cc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a25      	ldr	r2, [pc, #148]	@ (8009d5c <HAL_TIM_PWM_Start+0x1fc>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d022      	beq.n	8009d12 <HAL_TIM_PWM_Start+0x1b2>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cd4:	d01d      	beq.n	8009d12 <HAL_TIM_PWM_Start+0x1b2>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a26      	ldr	r2, [pc, #152]	@ (8009d74 <HAL_TIM_PWM_Start+0x214>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d018      	beq.n	8009d12 <HAL_TIM_PWM_Start+0x1b2>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a24      	ldr	r2, [pc, #144]	@ (8009d78 <HAL_TIM_PWM_Start+0x218>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d013      	beq.n	8009d12 <HAL_TIM_PWM_Start+0x1b2>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a23      	ldr	r2, [pc, #140]	@ (8009d7c <HAL_TIM_PWM_Start+0x21c>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d00e      	beq.n	8009d12 <HAL_TIM_PWM_Start+0x1b2>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a19      	ldr	r2, [pc, #100]	@ (8009d60 <HAL_TIM_PWM_Start+0x200>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d009      	beq.n	8009d12 <HAL_TIM_PWM_Start+0x1b2>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a18      	ldr	r2, [pc, #96]	@ (8009d64 <HAL_TIM_PWM_Start+0x204>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d004      	beq.n	8009d12 <HAL_TIM_PWM_Start+0x1b2>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a18      	ldr	r2, [pc, #96]	@ (8009d70 <HAL_TIM_PWM_Start+0x210>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d115      	bne.n	8009d3e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	689a      	ldr	r2, [r3, #8]
 8009d18:	4b19      	ldr	r3, [pc, #100]	@ (8009d80 <HAL_TIM_PWM_Start+0x220>)
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2b06      	cmp	r3, #6
 8009d22:	d015      	beq.n	8009d50 <HAL_TIM_PWM_Start+0x1f0>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d2a:	d011      	beq.n	8009d50 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f042 0201 	orr.w	r2, r2, #1
 8009d3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d3c:	e008      	b.n	8009d50 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f042 0201 	orr.w	r2, r2, #1
 8009d4c:	601a      	str	r2, [r3, #0]
 8009d4e:	e000      	b.n	8009d52 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	40012c00 	.word	0x40012c00
 8009d60:	40013400 	.word	0x40013400
 8009d64:	40014000 	.word	0x40014000
 8009d68:	40014400 	.word	0x40014400
 8009d6c:	40014800 	.word	0x40014800
 8009d70:	40015000 	.word	0x40015000
 8009d74:	40000400 	.word	0x40000400
 8009d78:	40000800 	.word	0x40000800
 8009d7c:	40000c00 	.word	0x40000c00
 8009d80:	00010007 	.word	0x00010007

08009d84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b086      	sub	sp, #24
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d101      	bne.n	8009d98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009d94:	2301      	movs	r3, #1
 8009d96:	e097      	b.n	8009ec8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d106      	bne.n	8009db2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f7f8 fffb 	bl	8002da8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2202      	movs	r2, #2
 8009db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	6812      	ldr	r2, [r2, #0]
 8009dc4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8009dc8:	f023 0307 	bic.w	r3, r3, #7
 8009dcc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	3304      	adds	r3, #4
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	4610      	mov	r0, r2
 8009dda:	f000 fb31 	bl	800a440 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6a1b      	ldr	r3, [r3, #32]
 8009df4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e06:	f023 0303 	bic.w	r3, r3, #3
 8009e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	689a      	ldr	r2, [r3, #8]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	021b      	lsls	r3, r3, #8
 8009e16:	4313      	orrs	r3, r2
 8009e18:	693a      	ldr	r2, [r7, #16]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009e24:	f023 030c 	bic.w	r3, r3, #12
 8009e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009e30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	68da      	ldr	r2, [r3, #12]
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	69db      	ldr	r3, [r3, #28]
 8009e3e:	021b      	lsls	r3, r3, #8
 8009e40:	4313      	orrs	r3, r2
 8009e42:	693a      	ldr	r2, [r7, #16]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	011a      	lsls	r2, r3, #4
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	6a1b      	ldr	r3, [r3, #32]
 8009e52:	031b      	lsls	r3, r3, #12
 8009e54:	4313      	orrs	r3, r2
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009e62:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009e6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	685a      	ldr	r2, [r3, #4]
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	695b      	ldr	r3, [r3, #20]
 8009e74:	011b      	lsls	r3, r3, #4
 8009e76:	4313      	orrs	r3, r2
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	693a      	ldr	r2, [r7, #16]
 8009e8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3718      	adds	r7, #24
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009ee0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009ee8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ef0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ef8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d110      	bne.n	8009f22 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f00:	7bfb      	ldrb	r3, [r7, #15]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d102      	bne.n	8009f0c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009f06:	7b7b      	ldrb	r3, [r7, #13]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d001      	beq.n	8009f10 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e069      	b.n	8009fe4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2202      	movs	r2, #2
 8009f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2202      	movs	r2, #2
 8009f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f20:	e031      	b.n	8009f86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d110      	bne.n	8009f4a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f28:	7bbb      	ldrb	r3, [r7, #14]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d102      	bne.n	8009f34 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009f2e:	7b3b      	ldrb	r3, [r7, #12]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d001      	beq.n	8009f38 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009f34:	2301      	movs	r3, #1
 8009f36:	e055      	b.n	8009fe4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2202      	movs	r2, #2
 8009f44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f48:	e01d      	b.n	8009f86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f4a:	7bfb      	ldrb	r3, [r7, #15]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d108      	bne.n	8009f62 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f50:	7bbb      	ldrb	r3, [r7, #14]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d105      	bne.n	8009f62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f56:	7b7b      	ldrb	r3, [r7, #13]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d102      	bne.n	8009f62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009f5c:	7b3b      	ldrb	r3, [r7, #12]
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d001      	beq.n	8009f66 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e03e      	b.n	8009fe4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2202      	movs	r2, #2
 8009f6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2202      	movs	r2, #2
 8009f72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2202      	movs	r2, #2
 8009f7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2202      	movs	r2, #2
 8009f82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d003      	beq.n	8009f94 <HAL_TIM_Encoder_Start+0xc4>
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	d008      	beq.n	8009fa4 <HAL_TIM_Encoder_Start+0xd4>
 8009f92:	e00f      	b.n	8009fb4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f000 fec9 	bl	800ad34 <TIM_CCxChannelCmd>
      break;
 8009fa2:	e016      	b.n	8009fd2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	2104      	movs	r1, #4
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 fec1 	bl	800ad34 <TIM_CCxChannelCmd>
      break;
 8009fb2:	e00e      	b.n	8009fd2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	2100      	movs	r1, #0
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f000 feb9 	bl	800ad34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	2104      	movs	r1, #4
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f000 feb2 	bl	800ad34 <TIM_CCxChannelCmd>
      break;
 8009fd0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f042 0201 	orr.w	r2, r2, #1
 8009fe0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009fe2:	2300      	movs	r3, #0
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a002:	2b01      	cmp	r3, #1
 800a004:	d101      	bne.n	800a00a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a006:	2302      	movs	r3, #2
 800a008:	e0ff      	b.n	800a20a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2b14      	cmp	r3, #20
 800a016:	f200 80f0 	bhi.w	800a1fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a01a:	a201      	add	r2, pc, #4	@ (adr r2, 800a020 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a020:	0800a075 	.word	0x0800a075
 800a024:	0800a1fb 	.word	0x0800a1fb
 800a028:	0800a1fb 	.word	0x0800a1fb
 800a02c:	0800a1fb 	.word	0x0800a1fb
 800a030:	0800a0b5 	.word	0x0800a0b5
 800a034:	0800a1fb 	.word	0x0800a1fb
 800a038:	0800a1fb 	.word	0x0800a1fb
 800a03c:	0800a1fb 	.word	0x0800a1fb
 800a040:	0800a0f7 	.word	0x0800a0f7
 800a044:	0800a1fb 	.word	0x0800a1fb
 800a048:	0800a1fb 	.word	0x0800a1fb
 800a04c:	0800a1fb 	.word	0x0800a1fb
 800a050:	0800a137 	.word	0x0800a137
 800a054:	0800a1fb 	.word	0x0800a1fb
 800a058:	0800a1fb 	.word	0x0800a1fb
 800a05c:	0800a1fb 	.word	0x0800a1fb
 800a060:	0800a179 	.word	0x0800a179
 800a064:	0800a1fb 	.word	0x0800a1fb
 800a068:	0800a1fb 	.word	0x0800a1fb
 800a06c:	0800a1fb 	.word	0x0800a1fb
 800a070:	0800a1b9 	.word	0x0800a1b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68b9      	ldr	r1, [r7, #8]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f000 fa94 	bl	800a5a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	699a      	ldr	r2, [r3, #24]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f042 0208 	orr.w	r2, r2, #8
 800a08e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	699a      	ldr	r2, [r3, #24]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f022 0204 	bic.w	r2, r2, #4
 800a09e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6999      	ldr	r1, [r3, #24]
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	691a      	ldr	r2, [r3, #16]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	430a      	orrs	r2, r1
 800a0b0:	619a      	str	r2, [r3, #24]
      break;
 800a0b2:	e0a5      	b.n	800a200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	68b9      	ldr	r1, [r7, #8]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 fb0e 	bl	800a6dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	699a      	ldr	r2, [r3, #24]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a0ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	699a      	ldr	r2, [r3, #24]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	6999      	ldr	r1, [r3, #24]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	021a      	lsls	r2, r3, #8
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	430a      	orrs	r2, r1
 800a0f2:	619a      	str	r2, [r3, #24]
      break;
 800a0f4:	e084      	b.n	800a200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	68b9      	ldr	r1, [r7, #8]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f000 fb81 	bl	800a804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	69da      	ldr	r2, [r3, #28]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f042 0208 	orr.w	r2, r2, #8
 800a110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	69da      	ldr	r2, [r3, #28]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f022 0204 	bic.w	r2, r2, #4
 800a120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	69d9      	ldr	r1, [r3, #28]
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	691a      	ldr	r2, [r3, #16]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	430a      	orrs	r2, r1
 800a132:	61da      	str	r2, [r3, #28]
      break;
 800a134:	e064      	b.n	800a200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68b9      	ldr	r1, [r7, #8]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 fbf3 	bl	800a928 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	69da      	ldr	r2, [r3, #28]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	69da      	ldr	r2, [r3, #28]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	69d9      	ldr	r1, [r3, #28]
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	021a      	lsls	r2, r3, #8
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	430a      	orrs	r2, r1
 800a174:	61da      	str	r2, [r3, #28]
      break;
 800a176:	e043      	b.n	800a200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68b9      	ldr	r1, [r7, #8]
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 fc66 	bl	800aa50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f042 0208 	orr.w	r2, r2, #8
 800a192:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f022 0204 	bic.w	r2, r2, #4
 800a1a2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	691a      	ldr	r2, [r3, #16]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	430a      	orrs	r2, r1
 800a1b4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a1b6:	e023      	b.n	800a200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68b9      	ldr	r1, [r7, #8]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 fcb0 	bl	800ab24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a1d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1e2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	021a      	lsls	r2, r3, #8
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	430a      	orrs	r2, r1
 800a1f6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a1f8:	e002      	b.n	800a200 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	75fb      	strb	r3, [r7, #23]
      break;
 800a1fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a208:	7dfb      	ldrb	r3, [r7, #23]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop

0800a214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a21e:	2300      	movs	r3, #0
 800a220:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d101      	bne.n	800a230 <HAL_TIM_ConfigClockSource+0x1c>
 800a22c:	2302      	movs	r3, #2
 800a22e:	e0f6      	b.n	800a41e <HAL_TIM_ConfigClockSource+0x20a>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2202      	movs	r2, #2
 800a23c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a24e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a25a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a6f      	ldr	r2, [pc, #444]	@ (800a428 <HAL_TIM_ConfigClockSource+0x214>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	f000 80c1 	beq.w	800a3f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a270:	4a6d      	ldr	r2, [pc, #436]	@ (800a428 <HAL_TIM_ConfigClockSource+0x214>)
 800a272:	4293      	cmp	r3, r2
 800a274:	f200 80c6 	bhi.w	800a404 <HAL_TIM_ConfigClockSource+0x1f0>
 800a278:	4a6c      	ldr	r2, [pc, #432]	@ (800a42c <HAL_TIM_ConfigClockSource+0x218>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	f000 80b9 	beq.w	800a3f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a280:	4a6a      	ldr	r2, [pc, #424]	@ (800a42c <HAL_TIM_ConfigClockSource+0x218>)
 800a282:	4293      	cmp	r3, r2
 800a284:	f200 80be 	bhi.w	800a404 <HAL_TIM_ConfigClockSource+0x1f0>
 800a288:	4a69      	ldr	r2, [pc, #420]	@ (800a430 <HAL_TIM_ConfigClockSource+0x21c>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	f000 80b1 	beq.w	800a3f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a290:	4a67      	ldr	r2, [pc, #412]	@ (800a430 <HAL_TIM_ConfigClockSource+0x21c>)
 800a292:	4293      	cmp	r3, r2
 800a294:	f200 80b6 	bhi.w	800a404 <HAL_TIM_ConfigClockSource+0x1f0>
 800a298:	4a66      	ldr	r2, [pc, #408]	@ (800a434 <HAL_TIM_ConfigClockSource+0x220>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	f000 80a9 	beq.w	800a3f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a2a0:	4a64      	ldr	r2, [pc, #400]	@ (800a434 <HAL_TIM_ConfigClockSource+0x220>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	f200 80ae 	bhi.w	800a404 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2a8:	4a63      	ldr	r2, [pc, #396]	@ (800a438 <HAL_TIM_ConfigClockSource+0x224>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	f000 80a1 	beq.w	800a3f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a2b0:	4a61      	ldr	r2, [pc, #388]	@ (800a438 <HAL_TIM_ConfigClockSource+0x224>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	f200 80a6 	bhi.w	800a404 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2b8:	4a60      	ldr	r2, [pc, #384]	@ (800a43c <HAL_TIM_ConfigClockSource+0x228>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	f000 8099 	beq.w	800a3f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a2c0:	4a5e      	ldr	r2, [pc, #376]	@ (800a43c <HAL_TIM_ConfigClockSource+0x228>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	f200 809e 	bhi.w	800a404 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a2cc:	f000 8091 	beq.w	800a3f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a2d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a2d4:	f200 8096 	bhi.w	800a404 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2dc:	f000 8089 	beq.w	800a3f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a2e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2e4:	f200 808e 	bhi.w	800a404 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2ec:	d03e      	beq.n	800a36c <HAL_TIM_ConfigClockSource+0x158>
 800a2ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2f2:	f200 8087 	bhi.w	800a404 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2fa:	f000 8086 	beq.w	800a40a <HAL_TIM_ConfigClockSource+0x1f6>
 800a2fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a302:	d87f      	bhi.n	800a404 <HAL_TIM_ConfigClockSource+0x1f0>
 800a304:	2b70      	cmp	r3, #112	@ 0x70
 800a306:	d01a      	beq.n	800a33e <HAL_TIM_ConfigClockSource+0x12a>
 800a308:	2b70      	cmp	r3, #112	@ 0x70
 800a30a:	d87b      	bhi.n	800a404 <HAL_TIM_ConfigClockSource+0x1f0>
 800a30c:	2b60      	cmp	r3, #96	@ 0x60
 800a30e:	d050      	beq.n	800a3b2 <HAL_TIM_ConfigClockSource+0x19e>
 800a310:	2b60      	cmp	r3, #96	@ 0x60
 800a312:	d877      	bhi.n	800a404 <HAL_TIM_ConfigClockSource+0x1f0>
 800a314:	2b50      	cmp	r3, #80	@ 0x50
 800a316:	d03c      	beq.n	800a392 <HAL_TIM_ConfigClockSource+0x17e>
 800a318:	2b50      	cmp	r3, #80	@ 0x50
 800a31a:	d873      	bhi.n	800a404 <HAL_TIM_ConfigClockSource+0x1f0>
 800a31c:	2b40      	cmp	r3, #64	@ 0x40
 800a31e:	d058      	beq.n	800a3d2 <HAL_TIM_ConfigClockSource+0x1be>
 800a320:	2b40      	cmp	r3, #64	@ 0x40
 800a322:	d86f      	bhi.n	800a404 <HAL_TIM_ConfigClockSource+0x1f0>
 800a324:	2b30      	cmp	r3, #48	@ 0x30
 800a326:	d064      	beq.n	800a3f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a328:	2b30      	cmp	r3, #48	@ 0x30
 800a32a:	d86b      	bhi.n	800a404 <HAL_TIM_ConfigClockSource+0x1f0>
 800a32c:	2b20      	cmp	r3, #32
 800a32e:	d060      	beq.n	800a3f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a330:	2b20      	cmp	r3, #32
 800a332:	d867      	bhi.n	800a404 <HAL_TIM_ConfigClockSource+0x1f0>
 800a334:	2b00      	cmp	r3, #0
 800a336:	d05c      	beq.n	800a3f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a338:	2b10      	cmp	r3, #16
 800a33a:	d05a      	beq.n	800a3f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a33c:	e062      	b.n	800a404 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a34e:	f000 fcd1 	bl	800acf4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a360:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	609a      	str	r2, [r3, #8]
      break;
 800a36a:	e04f      	b.n	800a40c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a37c:	f000 fcba 	bl	800acf4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	689a      	ldr	r2, [r3, #8]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a38e:	609a      	str	r2, [r3, #8]
      break;
 800a390:	e03c      	b.n	800a40c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a39e:	461a      	mov	r2, r3
 800a3a0:	f000 fc2c 	bl	800abfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2150      	movs	r1, #80	@ 0x50
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f000 fc85 	bl	800acba <TIM_ITRx_SetConfig>
      break;
 800a3b0:	e02c      	b.n	800a40c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3be:	461a      	mov	r2, r3
 800a3c0:	f000 fc4b 	bl	800ac5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2160      	movs	r1, #96	@ 0x60
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f000 fc75 	bl	800acba <TIM_ITRx_SetConfig>
      break;
 800a3d0:	e01c      	b.n	800a40c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3de:	461a      	mov	r2, r3
 800a3e0:	f000 fc0c 	bl	800abfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2140      	movs	r1, #64	@ 0x40
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f000 fc65 	bl	800acba <TIM_ITRx_SetConfig>
      break;
 800a3f0:	e00c      	b.n	800a40c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	4610      	mov	r0, r2
 800a3fe:	f000 fc5c 	bl	800acba <TIM_ITRx_SetConfig>
      break;
 800a402:	e003      	b.n	800a40c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	73fb      	strb	r3, [r7, #15]
      break;
 800a408:	e000      	b.n	800a40c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a40a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a41c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	00100070 	.word	0x00100070
 800a42c:	00100060 	.word	0x00100060
 800a430:	00100050 	.word	0x00100050
 800a434:	00100040 	.word	0x00100040
 800a438:	00100030 	.word	0x00100030
 800a43c:	00100020 	.word	0x00100020

0800a440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4a4c      	ldr	r2, [pc, #304]	@ (800a584 <TIM_Base_SetConfig+0x144>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d017      	beq.n	800a488 <TIM_Base_SetConfig+0x48>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a45e:	d013      	beq.n	800a488 <TIM_Base_SetConfig+0x48>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a49      	ldr	r2, [pc, #292]	@ (800a588 <TIM_Base_SetConfig+0x148>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d00f      	beq.n	800a488 <TIM_Base_SetConfig+0x48>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a48      	ldr	r2, [pc, #288]	@ (800a58c <TIM_Base_SetConfig+0x14c>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d00b      	beq.n	800a488 <TIM_Base_SetConfig+0x48>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4a47      	ldr	r2, [pc, #284]	@ (800a590 <TIM_Base_SetConfig+0x150>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d007      	beq.n	800a488 <TIM_Base_SetConfig+0x48>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4a46      	ldr	r2, [pc, #280]	@ (800a594 <TIM_Base_SetConfig+0x154>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d003      	beq.n	800a488 <TIM_Base_SetConfig+0x48>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a45      	ldr	r2, [pc, #276]	@ (800a598 <TIM_Base_SetConfig+0x158>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d108      	bne.n	800a49a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a48e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	4313      	orrs	r3, r2
 800a498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4a39      	ldr	r2, [pc, #228]	@ (800a584 <TIM_Base_SetConfig+0x144>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d023      	beq.n	800a4ea <TIM_Base_SetConfig+0xaa>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4a8:	d01f      	beq.n	800a4ea <TIM_Base_SetConfig+0xaa>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	4a36      	ldr	r2, [pc, #216]	@ (800a588 <TIM_Base_SetConfig+0x148>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d01b      	beq.n	800a4ea <TIM_Base_SetConfig+0xaa>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a35      	ldr	r2, [pc, #212]	@ (800a58c <TIM_Base_SetConfig+0x14c>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d017      	beq.n	800a4ea <TIM_Base_SetConfig+0xaa>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a34      	ldr	r2, [pc, #208]	@ (800a590 <TIM_Base_SetConfig+0x150>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d013      	beq.n	800a4ea <TIM_Base_SetConfig+0xaa>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a33      	ldr	r2, [pc, #204]	@ (800a594 <TIM_Base_SetConfig+0x154>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d00f      	beq.n	800a4ea <TIM_Base_SetConfig+0xaa>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4a33      	ldr	r2, [pc, #204]	@ (800a59c <TIM_Base_SetConfig+0x15c>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d00b      	beq.n	800a4ea <TIM_Base_SetConfig+0xaa>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4a32      	ldr	r2, [pc, #200]	@ (800a5a0 <TIM_Base_SetConfig+0x160>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d007      	beq.n	800a4ea <TIM_Base_SetConfig+0xaa>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a31      	ldr	r2, [pc, #196]	@ (800a5a4 <TIM_Base_SetConfig+0x164>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d003      	beq.n	800a4ea <TIM_Base_SetConfig+0xaa>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a2c      	ldr	r2, [pc, #176]	@ (800a598 <TIM_Base_SetConfig+0x158>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d108      	bne.n	800a4fc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	695b      	ldr	r3, [r3, #20]
 800a506:	4313      	orrs	r3, r2
 800a508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	689a      	ldr	r2, [r3, #8]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a18      	ldr	r2, [pc, #96]	@ (800a584 <TIM_Base_SetConfig+0x144>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d013      	beq.n	800a550 <TIM_Base_SetConfig+0x110>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	4a1a      	ldr	r2, [pc, #104]	@ (800a594 <TIM_Base_SetConfig+0x154>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d00f      	beq.n	800a550 <TIM_Base_SetConfig+0x110>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	4a1a      	ldr	r2, [pc, #104]	@ (800a59c <TIM_Base_SetConfig+0x15c>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d00b      	beq.n	800a550 <TIM_Base_SetConfig+0x110>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	4a19      	ldr	r2, [pc, #100]	@ (800a5a0 <TIM_Base_SetConfig+0x160>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d007      	beq.n	800a550 <TIM_Base_SetConfig+0x110>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	4a18      	ldr	r2, [pc, #96]	@ (800a5a4 <TIM_Base_SetConfig+0x164>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d003      	beq.n	800a550 <TIM_Base_SetConfig+0x110>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a13      	ldr	r2, [pc, #76]	@ (800a598 <TIM_Base_SetConfig+0x158>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d103      	bne.n	800a558 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	691a      	ldr	r2, [r3, #16]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	f003 0301 	and.w	r3, r3, #1
 800a566:	2b01      	cmp	r3, #1
 800a568:	d105      	bne.n	800a576 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	f023 0201 	bic.w	r2, r3, #1
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	611a      	str	r2, [r3, #16]
  }
}
 800a576:	bf00      	nop
 800a578:	3714      	adds	r7, #20
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	40012c00 	.word	0x40012c00
 800a588:	40000400 	.word	0x40000400
 800a58c:	40000800 	.word	0x40000800
 800a590:	40000c00 	.word	0x40000c00
 800a594:	40013400 	.word	0x40013400
 800a598:	40015000 	.word	0x40015000
 800a59c:	40014000 	.word	0x40014000
 800a5a0:	40014400 	.word	0x40014400
 800a5a4:	40014800 	.word	0x40014800

0800a5a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b087      	sub	sp, #28
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a1b      	ldr	r3, [r3, #32]
 800a5b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a1b      	ldr	r3, [r3, #32]
 800a5bc:	f023 0201 	bic.w	r2, r3, #1
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	699b      	ldr	r3, [r3, #24]
 800a5ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f023 0303 	bic.w	r3, r3, #3
 800a5e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	f023 0302 	bic.w	r3, r3, #2
 800a5f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	4a30      	ldr	r2, [pc, #192]	@ (800a6c4 <TIM_OC1_SetConfig+0x11c>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d013      	beq.n	800a630 <TIM_OC1_SetConfig+0x88>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a2f      	ldr	r2, [pc, #188]	@ (800a6c8 <TIM_OC1_SetConfig+0x120>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d00f      	beq.n	800a630 <TIM_OC1_SetConfig+0x88>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a2e      	ldr	r2, [pc, #184]	@ (800a6cc <TIM_OC1_SetConfig+0x124>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d00b      	beq.n	800a630 <TIM_OC1_SetConfig+0x88>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a2d      	ldr	r2, [pc, #180]	@ (800a6d0 <TIM_OC1_SetConfig+0x128>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d007      	beq.n	800a630 <TIM_OC1_SetConfig+0x88>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a2c      	ldr	r2, [pc, #176]	@ (800a6d4 <TIM_OC1_SetConfig+0x12c>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d003      	beq.n	800a630 <TIM_OC1_SetConfig+0x88>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a2b      	ldr	r2, [pc, #172]	@ (800a6d8 <TIM_OC1_SetConfig+0x130>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d10c      	bne.n	800a64a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	f023 0308 	bic.w	r3, r3, #8
 800a636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	697a      	ldr	r2, [r7, #20]
 800a63e:	4313      	orrs	r3, r2
 800a640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	f023 0304 	bic.w	r3, r3, #4
 800a648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4a1d      	ldr	r2, [pc, #116]	@ (800a6c4 <TIM_OC1_SetConfig+0x11c>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d013      	beq.n	800a67a <TIM_OC1_SetConfig+0xd2>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4a1c      	ldr	r2, [pc, #112]	@ (800a6c8 <TIM_OC1_SetConfig+0x120>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d00f      	beq.n	800a67a <TIM_OC1_SetConfig+0xd2>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4a1b      	ldr	r2, [pc, #108]	@ (800a6cc <TIM_OC1_SetConfig+0x124>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d00b      	beq.n	800a67a <TIM_OC1_SetConfig+0xd2>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a1a      	ldr	r2, [pc, #104]	@ (800a6d0 <TIM_OC1_SetConfig+0x128>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d007      	beq.n	800a67a <TIM_OC1_SetConfig+0xd2>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4a19      	ldr	r2, [pc, #100]	@ (800a6d4 <TIM_OC1_SetConfig+0x12c>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d003      	beq.n	800a67a <TIM_OC1_SetConfig+0xd2>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4a18      	ldr	r2, [pc, #96]	@ (800a6d8 <TIM_OC1_SetConfig+0x130>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d111      	bne.n	800a69e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	695b      	ldr	r3, [r3, #20]
 800a68e:	693a      	ldr	r2, [r7, #16]
 800a690:	4313      	orrs	r3, r2
 800a692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	693a      	ldr	r2, [r7, #16]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	693a      	ldr	r2, [r7, #16]
 800a6a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	697a      	ldr	r2, [r7, #20]
 800a6b6:	621a      	str	r2, [r3, #32]
}
 800a6b8:	bf00      	nop
 800a6ba:	371c      	adds	r7, #28
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr
 800a6c4:	40012c00 	.word	0x40012c00
 800a6c8:	40013400 	.word	0x40013400
 800a6cc:	40014000 	.word	0x40014000
 800a6d0:	40014400 	.word	0x40014400
 800a6d4:	40014800 	.word	0x40014800
 800a6d8:	40015000 	.word	0x40015000

0800a6dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b087      	sub	sp, #28
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a1b      	ldr	r3, [r3, #32]
 800a6ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a1b      	ldr	r3, [r3, #32]
 800a6f0:	f023 0210 	bic.w	r2, r3, #16
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	699b      	ldr	r3, [r3, #24]
 800a702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a70a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a70e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	021b      	lsls	r3, r3, #8
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	4313      	orrs	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	f023 0320 	bic.w	r3, r3, #32
 800a72a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	011b      	lsls	r3, r3, #4
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	4313      	orrs	r3, r2
 800a736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a2c      	ldr	r2, [pc, #176]	@ (800a7ec <TIM_OC2_SetConfig+0x110>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d007      	beq.n	800a750 <TIM_OC2_SetConfig+0x74>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a2b      	ldr	r2, [pc, #172]	@ (800a7f0 <TIM_OC2_SetConfig+0x114>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d003      	beq.n	800a750 <TIM_OC2_SetConfig+0x74>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a2a      	ldr	r2, [pc, #168]	@ (800a7f4 <TIM_OC2_SetConfig+0x118>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d10d      	bne.n	800a76c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	011b      	lsls	r3, r3, #4
 800a75e:	697a      	ldr	r2, [r7, #20]
 800a760:	4313      	orrs	r3, r2
 800a762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a76a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a1f      	ldr	r2, [pc, #124]	@ (800a7ec <TIM_OC2_SetConfig+0x110>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d013      	beq.n	800a79c <TIM_OC2_SetConfig+0xc0>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a1e      	ldr	r2, [pc, #120]	@ (800a7f0 <TIM_OC2_SetConfig+0x114>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d00f      	beq.n	800a79c <TIM_OC2_SetConfig+0xc0>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a1e      	ldr	r2, [pc, #120]	@ (800a7f8 <TIM_OC2_SetConfig+0x11c>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d00b      	beq.n	800a79c <TIM_OC2_SetConfig+0xc0>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4a1d      	ldr	r2, [pc, #116]	@ (800a7fc <TIM_OC2_SetConfig+0x120>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d007      	beq.n	800a79c <TIM_OC2_SetConfig+0xc0>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a1c      	ldr	r2, [pc, #112]	@ (800a800 <TIM_OC2_SetConfig+0x124>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d003      	beq.n	800a79c <TIM_OC2_SetConfig+0xc0>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a17      	ldr	r2, [pc, #92]	@ (800a7f4 <TIM_OC2_SetConfig+0x118>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d113      	bne.n	800a7c4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a7a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a7aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	695b      	ldr	r3, [r3, #20]
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	693a      	ldr	r2, [r7, #16]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	699b      	ldr	r3, [r3, #24]
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	693a      	ldr	r2, [r7, #16]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	693a      	ldr	r2, [r7, #16]
 800a7c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	685a      	ldr	r2, [r3, #4]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	697a      	ldr	r2, [r7, #20]
 800a7dc:	621a      	str	r2, [r3, #32]
}
 800a7de:	bf00      	nop
 800a7e0:	371c      	adds	r7, #28
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	40012c00 	.word	0x40012c00
 800a7f0:	40013400 	.word	0x40013400
 800a7f4:	40015000 	.word	0x40015000
 800a7f8:	40014000 	.word	0x40014000
 800a7fc:	40014400 	.word	0x40014400
 800a800:	40014800 	.word	0x40014800

0800a804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a804:	b480      	push	{r7}
 800a806:	b087      	sub	sp, #28
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a1b      	ldr	r3, [r3, #32]
 800a812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a1b      	ldr	r3, [r3, #32]
 800a818:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	69db      	ldr	r3, [r3, #28]
 800a82a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f023 0303 	bic.w	r3, r3, #3
 800a83e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	4313      	orrs	r3, r2
 800a848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	021b      	lsls	r3, r3, #8
 800a858:	697a      	ldr	r2, [r7, #20]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a2b      	ldr	r2, [pc, #172]	@ (800a910 <TIM_OC3_SetConfig+0x10c>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d007      	beq.n	800a876 <TIM_OC3_SetConfig+0x72>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a2a      	ldr	r2, [pc, #168]	@ (800a914 <TIM_OC3_SetConfig+0x110>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d003      	beq.n	800a876 <TIM_OC3_SetConfig+0x72>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4a29      	ldr	r2, [pc, #164]	@ (800a918 <TIM_OC3_SetConfig+0x114>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d10d      	bne.n	800a892 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a87c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	021b      	lsls	r3, r3, #8
 800a884:	697a      	ldr	r2, [r7, #20]
 800a886:	4313      	orrs	r3, r2
 800a888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a1e      	ldr	r2, [pc, #120]	@ (800a910 <TIM_OC3_SetConfig+0x10c>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d013      	beq.n	800a8c2 <TIM_OC3_SetConfig+0xbe>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a1d      	ldr	r2, [pc, #116]	@ (800a914 <TIM_OC3_SetConfig+0x110>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d00f      	beq.n	800a8c2 <TIM_OC3_SetConfig+0xbe>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4a1d      	ldr	r2, [pc, #116]	@ (800a91c <TIM_OC3_SetConfig+0x118>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d00b      	beq.n	800a8c2 <TIM_OC3_SetConfig+0xbe>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4a1c      	ldr	r2, [pc, #112]	@ (800a920 <TIM_OC3_SetConfig+0x11c>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d007      	beq.n	800a8c2 <TIM_OC3_SetConfig+0xbe>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4a1b      	ldr	r2, [pc, #108]	@ (800a924 <TIM_OC3_SetConfig+0x120>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d003      	beq.n	800a8c2 <TIM_OC3_SetConfig+0xbe>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4a16      	ldr	r2, [pc, #88]	@ (800a918 <TIM_OC3_SetConfig+0x114>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d113      	bne.n	800a8ea <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a8c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a8d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	011b      	lsls	r3, r3, #4
 800a8d8:	693a      	ldr	r2, [r7, #16]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	699b      	ldr	r3, [r3, #24]
 800a8e2:	011b      	lsls	r3, r3, #4
 800a8e4:	693a      	ldr	r2, [r7, #16]
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	685a      	ldr	r2, [r3, #4]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	697a      	ldr	r2, [r7, #20]
 800a902:	621a      	str	r2, [r3, #32]
}
 800a904:	bf00      	nop
 800a906:	371c      	adds	r7, #28
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr
 800a910:	40012c00 	.word	0x40012c00
 800a914:	40013400 	.word	0x40013400
 800a918:	40015000 	.word	0x40015000
 800a91c:	40014000 	.word	0x40014000
 800a920:	40014400 	.word	0x40014400
 800a924:	40014800 	.word	0x40014800

0800a928 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a928:	b480      	push	{r7}
 800a92a:	b087      	sub	sp, #28
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a1b      	ldr	r3, [r3, #32]
 800a93c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a95a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	021b      	lsls	r3, r3, #8
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	031b      	lsls	r3, r3, #12
 800a97e:	697a      	ldr	r2, [r7, #20]
 800a980:	4313      	orrs	r3, r2
 800a982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a2c      	ldr	r2, [pc, #176]	@ (800aa38 <TIM_OC4_SetConfig+0x110>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d007      	beq.n	800a99c <TIM_OC4_SetConfig+0x74>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a2b      	ldr	r2, [pc, #172]	@ (800aa3c <TIM_OC4_SetConfig+0x114>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d003      	beq.n	800a99c <TIM_OC4_SetConfig+0x74>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a2a      	ldr	r2, [pc, #168]	@ (800aa40 <TIM_OC4_SetConfig+0x118>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d10d      	bne.n	800a9b8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a9a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	031b      	lsls	r3, r3, #12
 800a9aa:	697a      	ldr	r2, [r7, #20]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a9b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a1f      	ldr	r2, [pc, #124]	@ (800aa38 <TIM_OC4_SetConfig+0x110>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d013      	beq.n	800a9e8 <TIM_OC4_SetConfig+0xc0>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4a1e      	ldr	r2, [pc, #120]	@ (800aa3c <TIM_OC4_SetConfig+0x114>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d00f      	beq.n	800a9e8 <TIM_OC4_SetConfig+0xc0>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	4a1e      	ldr	r2, [pc, #120]	@ (800aa44 <TIM_OC4_SetConfig+0x11c>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d00b      	beq.n	800a9e8 <TIM_OC4_SetConfig+0xc0>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4a1d      	ldr	r2, [pc, #116]	@ (800aa48 <TIM_OC4_SetConfig+0x120>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d007      	beq.n	800a9e8 <TIM_OC4_SetConfig+0xc0>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4a1c      	ldr	r2, [pc, #112]	@ (800aa4c <TIM_OC4_SetConfig+0x124>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d003      	beq.n	800a9e8 <TIM_OC4_SetConfig+0xc0>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	4a17      	ldr	r2, [pc, #92]	@ (800aa40 <TIM_OC4_SetConfig+0x118>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d113      	bne.n	800aa10 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a9ee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a9f6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	695b      	ldr	r3, [r3, #20]
 800a9fc:	019b      	lsls	r3, r3, #6
 800a9fe:	693a      	ldr	r2, [r7, #16]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	699b      	ldr	r3, [r3, #24]
 800aa08:	019b      	lsls	r3, r3, #6
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	693a      	ldr	r2, [r7, #16]
 800aa14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	685a      	ldr	r2, [r3, #4]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	697a      	ldr	r2, [r7, #20]
 800aa28:	621a      	str	r2, [r3, #32]
}
 800aa2a:	bf00      	nop
 800aa2c:	371c      	adds	r7, #28
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	40012c00 	.word	0x40012c00
 800aa3c:	40013400 	.word	0x40013400
 800aa40:	40015000 	.word	0x40015000
 800aa44:	40014000 	.word	0x40014000
 800aa48:	40014400 	.word	0x40014400
 800aa4c:	40014800 	.word	0x40014800

0800aa50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b087      	sub	sp, #28
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6a1b      	ldr	r3, [r3, #32]
 800aa64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800aa94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	041b      	lsls	r3, r3, #16
 800aa9c:	693a      	ldr	r2, [r7, #16]
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a19      	ldr	r2, [pc, #100]	@ (800ab0c <TIM_OC5_SetConfig+0xbc>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d013      	beq.n	800aad2 <TIM_OC5_SetConfig+0x82>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a18      	ldr	r2, [pc, #96]	@ (800ab10 <TIM_OC5_SetConfig+0xc0>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d00f      	beq.n	800aad2 <TIM_OC5_SetConfig+0x82>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a17      	ldr	r2, [pc, #92]	@ (800ab14 <TIM_OC5_SetConfig+0xc4>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d00b      	beq.n	800aad2 <TIM_OC5_SetConfig+0x82>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a16      	ldr	r2, [pc, #88]	@ (800ab18 <TIM_OC5_SetConfig+0xc8>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d007      	beq.n	800aad2 <TIM_OC5_SetConfig+0x82>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4a15      	ldr	r2, [pc, #84]	@ (800ab1c <TIM_OC5_SetConfig+0xcc>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d003      	beq.n	800aad2 <TIM_OC5_SetConfig+0x82>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a14      	ldr	r2, [pc, #80]	@ (800ab20 <TIM_OC5_SetConfig+0xd0>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d109      	bne.n	800aae6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aad8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	695b      	ldr	r3, [r3, #20]
 800aade:	021b      	lsls	r3, r3, #8
 800aae0:	697a      	ldr	r2, [r7, #20]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	697a      	ldr	r2, [r7, #20]
 800aaea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	685a      	ldr	r2, [r3, #4]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	693a      	ldr	r2, [r7, #16]
 800aafe:	621a      	str	r2, [r3, #32]
}
 800ab00:	bf00      	nop
 800ab02:	371c      	adds	r7, #28
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr
 800ab0c:	40012c00 	.word	0x40012c00
 800ab10:	40013400 	.word	0x40013400
 800ab14:	40014000 	.word	0x40014000
 800ab18:	40014400 	.word	0x40014400
 800ab1c:	40014800 	.word	0x40014800
 800ab20:	40015000 	.word	0x40015000

0800ab24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b087      	sub	sp, #28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a1b      	ldr	r3, [r3, #32]
 800ab32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a1b      	ldr	r3, [r3, #32]
 800ab38:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	021b      	lsls	r3, r3, #8
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	051b      	lsls	r3, r3, #20
 800ab72:	693a      	ldr	r2, [r7, #16]
 800ab74:	4313      	orrs	r3, r2
 800ab76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a1a      	ldr	r2, [pc, #104]	@ (800abe4 <TIM_OC6_SetConfig+0xc0>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d013      	beq.n	800aba8 <TIM_OC6_SetConfig+0x84>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a19      	ldr	r2, [pc, #100]	@ (800abe8 <TIM_OC6_SetConfig+0xc4>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d00f      	beq.n	800aba8 <TIM_OC6_SetConfig+0x84>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4a18      	ldr	r2, [pc, #96]	@ (800abec <TIM_OC6_SetConfig+0xc8>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d00b      	beq.n	800aba8 <TIM_OC6_SetConfig+0x84>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4a17      	ldr	r2, [pc, #92]	@ (800abf0 <TIM_OC6_SetConfig+0xcc>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d007      	beq.n	800aba8 <TIM_OC6_SetConfig+0x84>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4a16      	ldr	r2, [pc, #88]	@ (800abf4 <TIM_OC6_SetConfig+0xd0>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d003      	beq.n	800aba8 <TIM_OC6_SetConfig+0x84>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a15      	ldr	r2, [pc, #84]	@ (800abf8 <TIM_OC6_SetConfig+0xd4>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d109      	bne.n	800abbc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800abae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	695b      	ldr	r3, [r3, #20]
 800abb4:	029b      	lsls	r3, r3, #10
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	4313      	orrs	r3, r2
 800abba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	693a      	ldr	r2, [r7, #16]
 800abd4:	621a      	str	r2, [r3, #32]
}
 800abd6:	bf00      	nop
 800abd8:	371c      	adds	r7, #28
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	40012c00 	.word	0x40012c00
 800abe8:	40013400 	.word	0x40013400
 800abec:	40014000 	.word	0x40014000
 800abf0:	40014400 	.word	0x40014400
 800abf4:	40014800 	.word	0x40014800
 800abf8:	40015000 	.word	0x40015000

0800abfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b087      	sub	sp, #28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6a1b      	ldr	r3, [r3, #32]
 800ac0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	f023 0201 	bic.w	r2, r3, #1
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	699b      	ldr	r3, [r3, #24]
 800ac1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	011b      	lsls	r3, r3, #4
 800ac2c:	693a      	ldr	r2, [r7, #16]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	f023 030a 	bic.w	r3, r3, #10
 800ac38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac3a:	697a      	ldr	r2, [r7, #20]
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	693a      	ldr	r2, [r7, #16]
 800ac46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	697a      	ldr	r2, [r7, #20]
 800ac4c:	621a      	str	r2, [r3, #32]
}
 800ac4e:	bf00      	nop
 800ac50:	371c      	adds	r7, #28
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b087      	sub	sp, #28
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	60f8      	str	r0, [r7, #12]
 800ac62:	60b9      	str	r1, [r7, #8]
 800ac64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6a1b      	ldr	r3, [r3, #32]
 800ac6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6a1b      	ldr	r3, [r3, #32]
 800ac70:	f023 0210 	bic.w	r2, r3, #16
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	699b      	ldr	r3, [r3, #24]
 800ac7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ac84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	031b      	lsls	r3, r3, #12
 800ac8a:	693a      	ldr	r2, [r7, #16]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ac96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	011b      	lsls	r3, r3, #4
 800ac9c:	697a      	ldr	r2, [r7, #20]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	693a      	ldr	r2, [r7, #16]
 800aca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	697a      	ldr	r2, [r7, #20]
 800acac:	621a      	str	r2, [r3, #32]
}
 800acae:	bf00      	nop
 800acb0:	371c      	adds	r7, #28
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr

0800acba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800acba:	b480      	push	{r7}
 800acbc:	b085      	sub	sp, #20
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
 800acc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800acd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acd6:	683a      	ldr	r2, [r7, #0]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	4313      	orrs	r3, r2
 800acdc:	f043 0307 	orr.w	r3, r3, #7
 800ace0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	609a      	str	r2, [r3, #8]
}
 800ace8:	bf00      	nop
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b087      	sub	sp, #28
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
 800ad00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	021a      	lsls	r2, r3, #8
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	431a      	orrs	r2, r3
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	697a      	ldr	r2, [r7, #20]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	697a      	ldr	r2, [r7, #20]
 800ad26:	609a      	str	r2, [r3, #8]
}
 800ad28:	bf00      	nop
 800ad2a:	371c      	adds	r7, #28
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b087      	sub	sp, #28
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	f003 031f 	and.w	r3, r3, #31
 800ad46:	2201      	movs	r2, #1
 800ad48:	fa02 f303 	lsl.w	r3, r2, r3
 800ad4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6a1a      	ldr	r2, [r3, #32]
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	43db      	mvns	r3, r3
 800ad56:	401a      	ands	r2, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6a1a      	ldr	r2, [r3, #32]
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	f003 031f 	and.w	r3, r3, #31
 800ad66:	6879      	ldr	r1, [r7, #4]
 800ad68:	fa01 f303 	lsl.w	r3, r1, r3
 800ad6c:	431a      	orrs	r2, r3
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	621a      	str	r2, [r3, #32]
}
 800ad72:	bf00      	nop
 800ad74:	371c      	adds	r7, #28
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
	...

0800ad80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d101      	bne.n	800ad98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad94:	2302      	movs	r3, #2
 800ad96:	e074      	b.n	800ae82 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2202      	movs	r2, #2
 800ada4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a34      	ldr	r2, [pc, #208]	@ (800ae90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d009      	beq.n	800add6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a33      	ldr	r2, [pc, #204]	@ (800ae94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d004      	beq.n	800add6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a31      	ldr	r2, [pc, #196]	@ (800ae98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d108      	bne.n	800ade8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800addc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	4313      	orrs	r3, r2
 800ade6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800adee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a21      	ldr	r2, [pc, #132]	@ (800ae90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d022      	beq.n	800ae56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae18:	d01d      	beq.n	800ae56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a1f      	ldr	r2, [pc, #124]	@ (800ae9c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d018      	beq.n	800ae56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a1d      	ldr	r2, [pc, #116]	@ (800aea0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d013      	beq.n	800ae56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a1c      	ldr	r2, [pc, #112]	@ (800aea4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d00e      	beq.n	800ae56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a15      	ldr	r2, [pc, #84]	@ (800ae94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d009      	beq.n	800ae56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a18      	ldr	r2, [pc, #96]	@ (800aea8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d004      	beq.n	800ae56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a11      	ldr	r2, [pc, #68]	@ (800ae98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d10c      	bne.n	800ae70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	68ba      	ldr	r2, [r7, #8]
 800ae6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3714      	adds	r7, #20
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	40012c00 	.word	0x40012c00
 800ae94:	40013400 	.word	0x40013400
 800ae98:	40015000 	.word	0x40015000
 800ae9c:	40000400 	.word	0x40000400
 800aea0:	40000800 	.word	0x40000800
 800aea4:	40000c00 	.word	0x40000c00
 800aea8:	40014000 	.word	0x40014000

0800aeac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d101      	bne.n	800aec8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aec4:	2302      	movs	r3, #2
 800aec6:	e078      	b.n	800afba <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	4313      	orrs	r3, r2
 800aeea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	4313      	orrs	r3, r2
 800aef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4313      	orrs	r3, r2
 800af06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	4313      	orrs	r3, r2
 800af14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	695b      	ldr	r3, [r3, #20]
 800af20:	4313      	orrs	r3, r2
 800af22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af2e:	4313      	orrs	r3, r2
 800af30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	699b      	ldr	r3, [r3, #24]
 800af3c:	041b      	lsls	r3, r3, #16
 800af3e:	4313      	orrs	r3, r2
 800af40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	69db      	ldr	r3, [r3, #28]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a1c      	ldr	r2, [pc, #112]	@ (800afc8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d009      	beq.n	800af6e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a1b      	ldr	r2, [pc, #108]	@ (800afcc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d004      	beq.n	800af6e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a19      	ldr	r2, [pc, #100]	@ (800afd0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d11c      	bne.n	800afa8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af78:	051b      	lsls	r3, r3, #20
 800af7a:	4313      	orrs	r3, r2
 800af7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	6a1b      	ldr	r3, [r3, #32]
 800af88:	4313      	orrs	r3, r2
 800af8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af96:	4313      	orrs	r3, r2
 800af98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afa4:	4313      	orrs	r3, r2
 800afa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3714      	adds	r7, #20
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	40012c00 	.word	0x40012c00
 800afcc:	40013400 	.word	0x40013400
 800afd0:	40015000 	.word	0x40015000

0800afd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d101      	bne.n	800afe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	e042      	b.n	800b06c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afec:	2b00      	cmp	r3, #0
 800afee:	d106      	bne.n	800affe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f7f7 fd2f 	bl	8002a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2224      	movs	r2, #36	@ 0x24
 800b002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f022 0201 	bic.w	r2, r2, #1
 800b014:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d002      	beq.n	800b024 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fb24 	bl	800b66c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f825 	bl	800b074 <UART_SetConfig>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d101      	bne.n	800b034 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b030:	2301      	movs	r3, #1
 800b032:	e01b      	b.n	800b06c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	685a      	ldr	r2, [r3, #4]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	689a      	ldr	r2, [r3, #8]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f042 0201 	orr.w	r2, r2, #1
 800b062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 fba3 	bl	800b7b0 <UART_CheckIdleState>
 800b06a:	4603      	mov	r3, r0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b078:	b08c      	sub	sp, #48	@ 0x30
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b07e:	2300      	movs	r3, #0
 800b080:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	689a      	ldr	r2, [r3, #8]
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	431a      	orrs	r2, r3
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	695b      	ldr	r3, [r3, #20]
 800b092:	431a      	orrs	r2, r3
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	69db      	ldr	r3, [r3, #28]
 800b098:	4313      	orrs	r3, r2
 800b09a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	4baa      	ldr	r3, [pc, #680]	@ (800b34c <UART_SetConfig+0x2d8>)
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	6812      	ldr	r2, [r2, #0]
 800b0aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0ac:	430b      	orrs	r3, r1
 800b0ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	68da      	ldr	r2, [r3, #12]
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	430a      	orrs	r2, r1
 800b0c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	699b      	ldr	r3, [r3, #24]
 800b0ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a9f      	ldr	r2, [pc, #636]	@ (800b350 <UART_SetConfig+0x2dc>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d004      	beq.n	800b0e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	6a1b      	ldr	r3, [r3, #32]
 800b0da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b0ea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b0ee:	697a      	ldr	r2, [r7, #20]
 800b0f0:	6812      	ldr	r2, [r2, #0]
 800b0f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0f4:	430b      	orrs	r3, r1
 800b0f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0fe:	f023 010f 	bic.w	r1, r3, #15
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	430a      	orrs	r2, r1
 800b10c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a90      	ldr	r2, [pc, #576]	@ (800b354 <UART_SetConfig+0x2e0>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d125      	bne.n	800b164 <UART_SetConfig+0xf0>
 800b118:	4b8f      	ldr	r3, [pc, #572]	@ (800b358 <UART_SetConfig+0x2e4>)
 800b11a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b11e:	f003 0303 	and.w	r3, r3, #3
 800b122:	2b03      	cmp	r3, #3
 800b124:	d81a      	bhi.n	800b15c <UART_SetConfig+0xe8>
 800b126:	a201      	add	r2, pc, #4	@ (adr r2, 800b12c <UART_SetConfig+0xb8>)
 800b128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b12c:	0800b13d 	.word	0x0800b13d
 800b130:	0800b14d 	.word	0x0800b14d
 800b134:	0800b145 	.word	0x0800b145
 800b138:	0800b155 	.word	0x0800b155
 800b13c:	2301      	movs	r3, #1
 800b13e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b142:	e116      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b144:	2302      	movs	r3, #2
 800b146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b14a:	e112      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b14c:	2304      	movs	r3, #4
 800b14e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b152:	e10e      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b154:	2308      	movs	r3, #8
 800b156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b15a:	e10a      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b15c:	2310      	movs	r3, #16
 800b15e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b162:	e106      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a7c      	ldr	r2, [pc, #496]	@ (800b35c <UART_SetConfig+0x2e8>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d138      	bne.n	800b1e0 <UART_SetConfig+0x16c>
 800b16e:	4b7a      	ldr	r3, [pc, #488]	@ (800b358 <UART_SetConfig+0x2e4>)
 800b170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b174:	f003 030c 	and.w	r3, r3, #12
 800b178:	2b0c      	cmp	r3, #12
 800b17a:	d82d      	bhi.n	800b1d8 <UART_SetConfig+0x164>
 800b17c:	a201      	add	r2, pc, #4	@ (adr r2, 800b184 <UART_SetConfig+0x110>)
 800b17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b182:	bf00      	nop
 800b184:	0800b1b9 	.word	0x0800b1b9
 800b188:	0800b1d9 	.word	0x0800b1d9
 800b18c:	0800b1d9 	.word	0x0800b1d9
 800b190:	0800b1d9 	.word	0x0800b1d9
 800b194:	0800b1c9 	.word	0x0800b1c9
 800b198:	0800b1d9 	.word	0x0800b1d9
 800b19c:	0800b1d9 	.word	0x0800b1d9
 800b1a0:	0800b1d9 	.word	0x0800b1d9
 800b1a4:	0800b1c1 	.word	0x0800b1c1
 800b1a8:	0800b1d9 	.word	0x0800b1d9
 800b1ac:	0800b1d9 	.word	0x0800b1d9
 800b1b0:	0800b1d9 	.word	0x0800b1d9
 800b1b4:	0800b1d1 	.word	0x0800b1d1
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1be:	e0d8      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1c6:	e0d4      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b1c8:	2304      	movs	r3, #4
 800b1ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1ce:	e0d0      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b1d0:	2308      	movs	r3, #8
 800b1d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1d6:	e0cc      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b1d8:	2310      	movs	r3, #16
 800b1da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1de:	e0c8      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a5e      	ldr	r2, [pc, #376]	@ (800b360 <UART_SetConfig+0x2ec>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d125      	bne.n	800b236 <UART_SetConfig+0x1c2>
 800b1ea:	4b5b      	ldr	r3, [pc, #364]	@ (800b358 <UART_SetConfig+0x2e4>)
 800b1ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b1f4:	2b30      	cmp	r3, #48	@ 0x30
 800b1f6:	d016      	beq.n	800b226 <UART_SetConfig+0x1b2>
 800b1f8:	2b30      	cmp	r3, #48	@ 0x30
 800b1fa:	d818      	bhi.n	800b22e <UART_SetConfig+0x1ba>
 800b1fc:	2b20      	cmp	r3, #32
 800b1fe:	d00a      	beq.n	800b216 <UART_SetConfig+0x1a2>
 800b200:	2b20      	cmp	r3, #32
 800b202:	d814      	bhi.n	800b22e <UART_SetConfig+0x1ba>
 800b204:	2b00      	cmp	r3, #0
 800b206:	d002      	beq.n	800b20e <UART_SetConfig+0x19a>
 800b208:	2b10      	cmp	r3, #16
 800b20a:	d008      	beq.n	800b21e <UART_SetConfig+0x1aa>
 800b20c:	e00f      	b.n	800b22e <UART_SetConfig+0x1ba>
 800b20e:	2300      	movs	r3, #0
 800b210:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b214:	e0ad      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b216:	2302      	movs	r3, #2
 800b218:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b21c:	e0a9      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b21e:	2304      	movs	r3, #4
 800b220:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b224:	e0a5      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b226:	2308      	movs	r3, #8
 800b228:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b22c:	e0a1      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b22e:	2310      	movs	r3, #16
 800b230:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b234:	e09d      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4a4a      	ldr	r2, [pc, #296]	@ (800b364 <UART_SetConfig+0x2f0>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d125      	bne.n	800b28c <UART_SetConfig+0x218>
 800b240:	4b45      	ldr	r3, [pc, #276]	@ (800b358 <UART_SetConfig+0x2e4>)
 800b242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b246:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b24a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b24c:	d016      	beq.n	800b27c <UART_SetConfig+0x208>
 800b24e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b250:	d818      	bhi.n	800b284 <UART_SetConfig+0x210>
 800b252:	2b80      	cmp	r3, #128	@ 0x80
 800b254:	d00a      	beq.n	800b26c <UART_SetConfig+0x1f8>
 800b256:	2b80      	cmp	r3, #128	@ 0x80
 800b258:	d814      	bhi.n	800b284 <UART_SetConfig+0x210>
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d002      	beq.n	800b264 <UART_SetConfig+0x1f0>
 800b25e:	2b40      	cmp	r3, #64	@ 0x40
 800b260:	d008      	beq.n	800b274 <UART_SetConfig+0x200>
 800b262:	e00f      	b.n	800b284 <UART_SetConfig+0x210>
 800b264:	2300      	movs	r3, #0
 800b266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b26a:	e082      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b26c:	2302      	movs	r3, #2
 800b26e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b272:	e07e      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b274:	2304      	movs	r3, #4
 800b276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b27a:	e07a      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b27c:	2308      	movs	r3, #8
 800b27e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b282:	e076      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b284:	2310      	movs	r3, #16
 800b286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b28a:	e072      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a35      	ldr	r2, [pc, #212]	@ (800b368 <UART_SetConfig+0x2f4>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d12a      	bne.n	800b2ec <UART_SetConfig+0x278>
 800b296:	4b30      	ldr	r3, [pc, #192]	@ (800b358 <UART_SetConfig+0x2e4>)
 800b298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b29c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b2a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2a4:	d01a      	beq.n	800b2dc <UART_SetConfig+0x268>
 800b2a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2aa:	d81b      	bhi.n	800b2e4 <UART_SetConfig+0x270>
 800b2ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2b0:	d00c      	beq.n	800b2cc <UART_SetConfig+0x258>
 800b2b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2b6:	d815      	bhi.n	800b2e4 <UART_SetConfig+0x270>
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d003      	beq.n	800b2c4 <UART_SetConfig+0x250>
 800b2bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2c0:	d008      	beq.n	800b2d4 <UART_SetConfig+0x260>
 800b2c2:	e00f      	b.n	800b2e4 <UART_SetConfig+0x270>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2ca:	e052      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b2cc:	2302      	movs	r3, #2
 800b2ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2d2:	e04e      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b2d4:	2304      	movs	r3, #4
 800b2d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2da:	e04a      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b2dc:	2308      	movs	r3, #8
 800b2de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2e2:	e046      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b2e4:	2310      	movs	r3, #16
 800b2e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2ea:	e042      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a17      	ldr	r2, [pc, #92]	@ (800b350 <UART_SetConfig+0x2dc>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d13a      	bne.n	800b36c <UART_SetConfig+0x2f8>
 800b2f6:	4b18      	ldr	r3, [pc, #96]	@ (800b358 <UART_SetConfig+0x2e4>)
 800b2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b300:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b304:	d01a      	beq.n	800b33c <UART_SetConfig+0x2c8>
 800b306:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b30a:	d81b      	bhi.n	800b344 <UART_SetConfig+0x2d0>
 800b30c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b310:	d00c      	beq.n	800b32c <UART_SetConfig+0x2b8>
 800b312:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b316:	d815      	bhi.n	800b344 <UART_SetConfig+0x2d0>
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d003      	beq.n	800b324 <UART_SetConfig+0x2b0>
 800b31c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b320:	d008      	beq.n	800b334 <UART_SetConfig+0x2c0>
 800b322:	e00f      	b.n	800b344 <UART_SetConfig+0x2d0>
 800b324:	2300      	movs	r3, #0
 800b326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b32a:	e022      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b32c:	2302      	movs	r3, #2
 800b32e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b332:	e01e      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b334:	2304      	movs	r3, #4
 800b336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b33a:	e01a      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b33c:	2308      	movs	r3, #8
 800b33e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b342:	e016      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b344:	2310      	movs	r3, #16
 800b346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b34a:	e012      	b.n	800b372 <UART_SetConfig+0x2fe>
 800b34c:	cfff69f3 	.word	0xcfff69f3
 800b350:	40008000 	.word	0x40008000
 800b354:	40013800 	.word	0x40013800
 800b358:	40021000 	.word	0x40021000
 800b35c:	40004400 	.word	0x40004400
 800b360:	40004800 	.word	0x40004800
 800b364:	40004c00 	.word	0x40004c00
 800b368:	40005000 	.word	0x40005000
 800b36c:	2310      	movs	r3, #16
 800b36e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4aae      	ldr	r2, [pc, #696]	@ (800b630 <UART_SetConfig+0x5bc>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	f040 8097 	bne.w	800b4ac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b37e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b382:	2b08      	cmp	r3, #8
 800b384:	d823      	bhi.n	800b3ce <UART_SetConfig+0x35a>
 800b386:	a201      	add	r2, pc, #4	@ (adr r2, 800b38c <UART_SetConfig+0x318>)
 800b388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38c:	0800b3b1 	.word	0x0800b3b1
 800b390:	0800b3cf 	.word	0x0800b3cf
 800b394:	0800b3b9 	.word	0x0800b3b9
 800b398:	0800b3cf 	.word	0x0800b3cf
 800b39c:	0800b3bf 	.word	0x0800b3bf
 800b3a0:	0800b3cf 	.word	0x0800b3cf
 800b3a4:	0800b3cf 	.word	0x0800b3cf
 800b3a8:	0800b3cf 	.word	0x0800b3cf
 800b3ac:	0800b3c7 	.word	0x0800b3c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3b0:	f7fd fb1e 	bl	80089f0 <HAL_RCC_GetPCLK1Freq>
 800b3b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b3b6:	e010      	b.n	800b3da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b3b8:	4b9e      	ldr	r3, [pc, #632]	@ (800b634 <UART_SetConfig+0x5c0>)
 800b3ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b3bc:	e00d      	b.n	800b3da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3be:	f7fd faa9 	bl	8008914 <HAL_RCC_GetSysClockFreq>
 800b3c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b3c4:	e009      	b.n	800b3da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b3cc:	e005      	b.n	800b3da <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b3d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f000 8130 	beq.w	800b642 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3e6:	4a94      	ldr	r2, [pc, #592]	@ (800b638 <UART_SetConfig+0x5c4>)
 800b3e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	685a      	ldr	r2, [r3, #4]
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	005b      	lsls	r3, r3, #1
 800b3fe:	4413      	add	r3, r2
 800b400:	69ba      	ldr	r2, [r7, #24]
 800b402:	429a      	cmp	r2, r3
 800b404:	d305      	bcc.n	800b412 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b40c:	69ba      	ldr	r2, [r7, #24]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d903      	bls.n	800b41a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b418:	e113      	b.n	800b642 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b41c:	2200      	movs	r2, #0
 800b41e:	60bb      	str	r3, [r7, #8]
 800b420:	60fa      	str	r2, [r7, #12]
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b426:	4a84      	ldr	r2, [pc, #528]	@ (800b638 <UART_SetConfig+0x5c4>)
 800b428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	2200      	movs	r2, #0
 800b430:	603b      	str	r3, [r7, #0]
 800b432:	607a      	str	r2, [r7, #4]
 800b434:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b438:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b43c:	f7f5 fc4c 	bl	8000cd8 <__aeabi_uldivmod>
 800b440:	4602      	mov	r2, r0
 800b442:	460b      	mov	r3, r1
 800b444:	4610      	mov	r0, r2
 800b446:	4619      	mov	r1, r3
 800b448:	f04f 0200 	mov.w	r2, #0
 800b44c:	f04f 0300 	mov.w	r3, #0
 800b450:	020b      	lsls	r3, r1, #8
 800b452:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b456:	0202      	lsls	r2, r0, #8
 800b458:	6979      	ldr	r1, [r7, #20]
 800b45a:	6849      	ldr	r1, [r1, #4]
 800b45c:	0849      	lsrs	r1, r1, #1
 800b45e:	2000      	movs	r0, #0
 800b460:	460c      	mov	r4, r1
 800b462:	4605      	mov	r5, r0
 800b464:	eb12 0804 	adds.w	r8, r2, r4
 800b468:	eb43 0905 	adc.w	r9, r3, r5
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	469a      	mov	sl, r3
 800b474:	4693      	mov	fp, r2
 800b476:	4652      	mov	r2, sl
 800b478:	465b      	mov	r3, fp
 800b47a:	4640      	mov	r0, r8
 800b47c:	4649      	mov	r1, r9
 800b47e:	f7f5 fc2b 	bl	8000cd8 <__aeabi_uldivmod>
 800b482:	4602      	mov	r2, r0
 800b484:	460b      	mov	r3, r1
 800b486:	4613      	mov	r3, r2
 800b488:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b48a:	6a3b      	ldr	r3, [r7, #32]
 800b48c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b490:	d308      	bcc.n	800b4a4 <UART_SetConfig+0x430>
 800b492:	6a3b      	ldr	r3, [r7, #32]
 800b494:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b498:	d204      	bcs.n	800b4a4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	6a3a      	ldr	r2, [r7, #32]
 800b4a0:	60da      	str	r2, [r3, #12]
 800b4a2:	e0ce      	b.n	800b642 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b4aa:	e0ca      	b.n	800b642 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	69db      	ldr	r3, [r3, #28]
 800b4b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b4b4:	d166      	bne.n	800b584 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b4b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b4ba:	2b08      	cmp	r3, #8
 800b4bc:	d827      	bhi.n	800b50e <UART_SetConfig+0x49a>
 800b4be:	a201      	add	r2, pc, #4	@ (adr r2, 800b4c4 <UART_SetConfig+0x450>)
 800b4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c4:	0800b4e9 	.word	0x0800b4e9
 800b4c8:	0800b4f1 	.word	0x0800b4f1
 800b4cc:	0800b4f9 	.word	0x0800b4f9
 800b4d0:	0800b50f 	.word	0x0800b50f
 800b4d4:	0800b4ff 	.word	0x0800b4ff
 800b4d8:	0800b50f 	.word	0x0800b50f
 800b4dc:	0800b50f 	.word	0x0800b50f
 800b4e0:	0800b50f 	.word	0x0800b50f
 800b4e4:	0800b507 	.word	0x0800b507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4e8:	f7fd fa82 	bl	80089f0 <HAL_RCC_GetPCLK1Freq>
 800b4ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4ee:	e014      	b.n	800b51a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4f0:	f7fd fa94 	bl	8008a1c <HAL_RCC_GetPCLK2Freq>
 800b4f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4f6:	e010      	b.n	800b51a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b4f8:	4b4e      	ldr	r3, [pc, #312]	@ (800b634 <UART_SetConfig+0x5c0>)
 800b4fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b4fc:	e00d      	b.n	800b51a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b4fe:	f7fd fa09 	bl	8008914 <HAL_RCC_GetSysClockFreq>
 800b502:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b504:	e009      	b.n	800b51a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b50a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b50c:	e005      	b.n	800b51a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b50e:	2300      	movs	r3, #0
 800b510:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b518:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	f000 8090 	beq.w	800b642 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b526:	4a44      	ldr	r2, [pc, #272]	@ (800b638 <UART_SetConfig+0x5c4>)
 800b528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b52c:	461a      	mov	r2, r3
 800b52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b530:	fbb3 f3f2 	udiv	r3, r3, r2
 800b534:	005a      	lsls	r2, r3, #1
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	085b      	lsrs	r3, r3, #1
 800b53c:	441a      	add	r2, r3
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	fbb2 f3f3 	udiv	r3, r2, r3
 800b546:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b548:	6a3b      	ldr	r3, [r7, #32]
 800b54a:	2b0f      	cmp	r3, #15
 800b54c:	d916      	bls.n	800b57c <UART_SetConfig+0x508>
 800b54e:	6a3b      	ldr	r3, [r7, #32]
 800b550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b554:	d212      	bcs.n	800b57c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b556:	6a3b      	ldr	r3, [r7, #32]
 800b558:	b29b      	uxth	r3, r3
 800b55a:	f023 030f 	bic.w	r3, r3, #15
 800b55e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b560:	6a3b      	ldr	r3, [r7, #32]
 800b562:	085b      	lsrs	r3, r3, #1
 800b564:	b29b      	uxth	r3, r3
 800b566:	f003 0307 	and.w	r3, r3, #7
 800b56a:	b29a      	uxth	r2, r3
 800b56c:	8bfb      	ldrh	r3, [r7, #30]
 800b56e:	4313      	orrs	r3, r2
 800b570:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	8bfa      	ldrh	r2, [r7, #30]
 800b578:	60da      	str	r2, [r3, #12]
 800b57a:	e062      	b.n	800b642 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b582:	e05e      	b.n	800b642 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b584:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b588:	2b08      	cmp	r3, #8
 800b58a:	d828      	bhi.n	800b5de <UART_SetConfig+0x56a>
 800b58c:	a201      	add	r2, pc, #4	@ (adr r2, 800b594 <UART_SetConfig+0x520>)
 800b58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b592:	bf00      	nop
 800b594:	0800b5b9 	.word	0x0800b5b9
 800b598:	0800b5c1 	.word	0x0800b5c1
 800b59c:	0800b5c9 	.word	0x0800b5c9
 800b5a0:	0800b5df 	.word	0x0800b5df
 800b5a4:	0800b5cf 	.word	0x0800b5cf
 800b5a8:	0800b5df 	.word	0x0800b5df
 800b5ac:	0800b5df 	.word	0x0800b5df
 800b5b0:	0800b5df 	.word	0x0800b5df
 800b5b4:	0800b5d7 	.word	0x0800b5d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5b8:	f7fd fa1a 	bl	80089f0 <HAL_RCC_GetPCLK1Freq>
 800b5bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b5be:	e014      	b.n	800b5ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5c0:	f7fd fa2c 	bl	8008a1c <HAL_RCC_GetPCLK2Freq>
 800b5c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b5c6:	e010      	b.n	800b5ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b5c8:	4b1a      	ldr	r3, [pc, #104]	@ (800b634 <UART_SetConfig+0x5c0>)
 800b5ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b5cc:	e00d      	b.n	800b5ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b5ce:	f7fd f9a1 	bl	8008914 <HAL_RCC_GetSysClockFreq>
 800b5d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b5d4:	e009      	b.n	800b5ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b5dc:	e005      	b.n	800b5ea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b5e8:	bf00      	nop
    }

    if (pclk != 0U)
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d028      	beq.n	800b642 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5f4:	4a10      	ldr	r2, [pc, #64]	@ (800b638 <UART_SetConfig+0x5c4>)
 800b5f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fe:	fbb3 f2f2 	udiv	r2, r3, r2
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	085b      	lsrs	r3, r3, #1
 800b608:	441a      	add	r2, r3
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b612:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b614:	6a3b      	ldr	r3, [r7, #32]
 800b616:	2b0f      	cmp	r3, #15
 800b618:	d910      	bls.n	800b63c <UART_SetConfig+0x5c8>
 800b61a:	6a3b      	ldr	r3, [r7, #32]
 800b61c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b620:	d20c      	bcs.n	800b63c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b622:	6a3b      	ldr	r3, [r7, #32]
 800b624:	b29a      	uxth	r2, r3
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	60da      	str	r2, [r3, #12]
 800b62c:	e009      	b.n	800b642 <UART_SetConfig+0x5ce>
 800b62e:	bf00      	nop
 800b630:	40008000 	.word	0x40008000
 800b634:	00f42400 	.word	0x00f42400
 800b638:	080143b0 	.word	0x080143b0
      }
      else
      {
        ret = HAL_ERROR;
 800b63c:	2301      	movs	r3, #1
 800b63e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	2201      	movs	r2, #1
 800b646:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	2201      	movs	r2, #1
 800b64e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	2200      	movs	r2, #0
 800b656:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	2200      	movs	r2, #0
 800b65c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b65e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b662:	4618      	mov	r0, r3
 800b664:	3730      	adds	r7, #48	@ 0x30
 800b666:	46bd      	mov	sp, r7
 800b668:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b66c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b678:	f003 0308 	and.w	r3, r3, #8
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d00a      	beq.n	800b696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	430a      	orrs	r2, r1
 800b694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b69a:	f003 0301 	and.w	r3, r3, #1
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00a      	beq.n	800b6b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	430a      	orrs	r2, r1
 800b6b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6bc:	f003 0302 	and.w	r3, r3, #2
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d00a      	beq.n	800b6da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	430a      	orrs	r2, r1
 800b6d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6de:	f003 0304 	and.w	r3, r3, #4
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00a      	beq.n	800b6fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	430a      	orrs	r2, r1
 800b6fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b700:	f003 0310 	and.w	r3, r3, #16
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00a      	beq.n	800b71e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	430a      	orrs	r2, r1
 800b71c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b722:	f003 0320 	and.w	r3, r3, #32
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00a      	beq.n	800b740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	430a      	orrs	r2, r1
 800b73e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d01a      	beq.n	800b782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	430a      	orrs	r2, r1
 800b760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b766:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b76a:	d10a      	bne.n	800b782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	430a      	orrs	r2, r1
 800b780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d00a      	beq.n	800b7a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	430a      	orrs	r2, r1
 800b7a2:	605a      	str	r2, [r3, #4]
  }
}
 800b7a4:	bf00      	nop
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b098      	sub	sp, #96	@ 0x60
 800b7b4:	af02      	add	r7, sp, #8
 800b7b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b7c0:	f7f7 fef0 	bl	80035a4 <HAL_GetTick>
 800b7c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f003 0308 	and.w	r3, r3, #8
 800b7d0:	2b08      	cmp	r3, #8
 800b7d2:	d12f      	bne.n	800b834 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7dc:	2200      	movs	r2, #0
 800b7de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 f88e 	bl	800b904 <UART_WaitOnFlagUntilTimeout>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d022      	beq.n	800b834 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f6:	e853 3f00 	ldrex	r3, [r3]
 800b7fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b802:	653b      	str	r3, [r7, #80]	@ 0x50
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	461a      	mov	r2, r3
 800b80a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b80c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b80e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b810:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b814:	e841 2300 	strex	r3, r2, [r1]
 800b818:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b81a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d1e6      	bne.n	800b7ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2220      	movs	r2, #32
 800b824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b830:	2303      	movs	r3, #3
 800b832:	e063      	b.n	800b8fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f003 0304 	and.w	r3, r3, #4
 800b83e:	2b04      	cmp	r3, #4
 800b840:	d149      	bne.n	800b8d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b842:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b84a:	2200      	movs	r2, #0
 800b84c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 f857 	bl	800b904 <UART_WaitOnFlagUntilTimeout>
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d03c      	beq.n	800b8d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b864:	e853 3f00 	ldrex	r3, [r3]
 800b868:	623b      	str	r3, [r7, #32]
   return(result);
 800b86a:	6a3b      	ldr	r3, [r7, #32]
 800b86c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b870:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	461a      	mov	r2, r3
 800b878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b87a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b87c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b880:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b882:	e841 2300 	strex	r3, r2, [r1]
 800b886:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1e6      	bne.n	800b85c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	3308      	adds	r3, #8
 800b894:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	e853 3f00 	ldrex	r3, [r3]
 800b89c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f023 0301 	bic.w	r3, r3, #1
 800b8a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	3308      	adds	r3, #8
 800b8ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8ae:	61fa      	str	r2, [r7, #28]
 800b8b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b2:	69b9      	ldr	r1, [r7, #24]
 800b8b4:	69fa      	ldr	r2, [r7, #28]
 800b8b6:	e841 2300 	strex	r3, r2, [r1]
 800b8ba:	617b      	str	r3, [r7, #20]
   return(result);
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d1e5      	bne.n	800b88e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2220      	movs	r2, #32
 800b8c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8d2:	2303      	movs	r3, #3
 800b8d4:	e012      	b.n	800b8fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2220      	movs	r2, #32
 800b8da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2220      	movs	r2, #32
 800b8e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3758      	adds	r7, #88	@ 0x58
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	603b      	str	r3, [r7, #0]
 800b910:	4613      	mov	r3, r2
 800b912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b914:	e04f      	b.n	800b9b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b91c:	d04b      	beq.n	800b9b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b91e:	f7f7 fe41 	bl	80035a4 <HAL_GetTick>
 800b922:	4602      	mov	r2, r0
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	69ba      	ldr	r2, [r7, #24]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d302      	bcc.n	800b934 <UART_WaitOnFlagUntilTimeout+0x30>
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d101      	bne.n	800b938 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b934:	2303      	movs	r3, #3
 800b936:	e04e      	b.n	800b9d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f003 0304 	and.w	r3, r3, #4
 800b942:	2b00      	cmp	r3, #0
 800b944:	d037      	beq.n	800b9b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	2b80      	cmp	r3, #128	@ 0x80
 800b94a:	d034      	beq.n	800b9b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	2b40      	cmp	r3, #64	@ 0x40
 800b950:	d031      	beq.n	800b9b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	69db      	ldr	r3, [r3, #28]
 800b958:	f003 0308 	and.w	r3, r3, #8
 800b95c:	2b08      	cmp	r3, #8
 800b95e:	d110      	bne.n	800b982 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2208      	movs	r2, #8
 800b966:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f000 f838 	bl	800b9de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2208      	movs	r2, #8
 800b972:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b97e:	2301      	movs	r3, #1
 800b980:	e029      	b.n	800b9d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	69db      	ldr	r3, [r3, #28]
 800b988:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b98c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b990:	d111      	bne.n	800b9b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b99a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b99c:	68f8      	ldr	r0, [r7, #12]
 800b99e:	f000 f81e 	bl	800b9de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2220      	movs	r2, #32
 800b9a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b9b2:	2303      	movs	r3, #3
 800b9b4:	e00f      	b.n	800b9d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	69da      	ldr	r2, [r3, #28]
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	4013      	ands	r3, r2
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	bf0c      	ite	eq
 800b9c6:	2301      	moveq	r3, #1
 800b9c8:	2300      	movne	r3, #0
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	79fb      	ldrb	r3, [r7, #7]
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d0a0      	beq.n	800b916 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9d4:	2300      	movs	r3, #0
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3710      	adds	r7, #16
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9de:	b480      	push	{r7}
 800b9e0:	b095      	sub	sp, #84	@ 0x54
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9ee:	e853 3f00 	ldrex	r3, [r3]
 800b9f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	461a      	mov	r2, r3
 800ba02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba04:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba06:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba0c:	e841 2300 	strex	r3, r2, [r1]
 800ba10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d1e6      	bne.n	800b9e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	3308      	adds	r3, #8
 800ba1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba20:	6a3b      	ldr	r3, [r7, #32]
 800ba22:	e853 3f00 	ldrex	r3, [r3]
 800ba26:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba2e:	f023 0301 	bic.w	r3, r3, #1
 800ba32:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	3308      	adds	r3, #8
 800ba3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba44:	e841 2300 	strex	r3, r2, [r1]
 800ba48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d1e3      	bne.n	800ba18 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d118      	bne.n	800ba8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	e853 3f00 	ldrex	r3, [r3]
 800ba64:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	f023 0310 	bic.w	r3, r3, #16
 800ba6c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	461a      	mov	r2, r3
 800ba74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba76:	61bb      	str	r3, [r7, #24]
 800ba78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7a:	6979      	ldr	r1, [r7, #20]
 800ba7c:	69ba      	ldr	r2, [r7, #24]
 800ba7e:	e841 2300 	strex	r3, r2, [r1]
 800ba82:	613b      	str	r3, [r7, #16]
   return(result);
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1e6      	bne.n	800ba58 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2220      	movs	r2, #32
 800ba8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ba9e:	bf00      	nop
 800baa0:	3754      	adds	r7, #84	@ 0x54
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr

0800baaa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800baaa:	b480      	push	{r7}
 800baac:	b085      	sub	sp, #20
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d101      	bne.n	800bac0 <HAL_UARTEx_DisableFifoMode+0x16>
 800babc:	2302      	movs	r3, #2
 800babe:	e027      	b.n	800bb10 <HAL_UARTEx_DisableFifoMode+0x66>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2201      	movs	r2, #1
 800bac4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2224      	movs	r2, #36	@ 0x24
 800bacc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f022 0201 	bic.w	r2, r2, #1
 800bae6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800baee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2220      	movs	r2, #32
 800bb02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3714      	adds	r7, #20
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d101      	bne.n	800bb34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb30:	2302      	movs	r3, #2
 800bb32:	e02d      	b.n	800bb90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2201      	movs	r2, #1
 800bb38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2224      	movs	r2, #36	@ 0x24
 800bb40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f022 0201 	bic.w	r2, r2, #1
 800bb5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	683a      	ldr	r2, [r7, #0]
 800bb6c:	430a      	orrs	r2, r1
 800bb6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 f84f 	bl	800bc14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	68fa      	ldr	r2, [r7, #12]
 800bb7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2220      	movs	r2, #32
 800bb82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d101      	bne.n	800bbb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bbac:	2302      	movs	r3, #2
 800bbae:	e02d      	b.n	800bc0c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2224      	movs	r2, #36	@ 0x24
 800bbbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f022 0201 	bic.w	r2, r2, #1
 800bbd6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	430a      	orrs	r2, r1
 800bbea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 f811 	bl	800bc14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2220      	movs	r2, #32
 800bbfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc0a:	2300      	movs	r3, #0
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3710      	adds	r7, #16
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d108      	bne.n	800bc36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2201      	movs	r2, #1
 800bc28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2201      	movs	r2, #1
 800bc30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc34:	e031      	b.n	800bc9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc36:	2308      	movs	r3, #8
 800bc38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc3a:	2308      	movs	r3, #8
 800bc3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	689b      	ldr	r3, [r3, #8]
 800bc44:	0e5b      	lsrs	r3, r3, #25
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	f003 0307 	and.w	r3, r3, #7
 800bc4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	0f5b      	lsrs	r3, r3, #29
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	f003 0307 	and.w	r3, r3, #7
 800bc5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc5e:	7bbb      	ldrb	r3, [r7, #14]
 800bc60:	7b3a      	ldrb	r2, [r7, #12]
 800bc62:	4911      	ldr	r1, [pc, #68]	@ (800bca8 <UARTEx_SetNbDataToProcess+0x94>)
 800bc64:	5c8a      	ldrb	r2, [r1, r2]
 800bc66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc6a:	7b3a      	ldrb	r2, [r7, #12]
 800bc6c:	490f      	ldr	r1, [pc, #60]	@ (800bcac <UARTEx_SetNbDataToProcess+0x98>)
 800bc6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc70:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc74:	b29a      	uxth	r2, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc7c:	7bfb      	ldrb	r3, [r7, #15]
 800bc7e:	7b7a      	ldrb	r2, [r7, #13]
 800bc80:	4909      	ldr	r1, [pc, #36]	@ (800bca8 <UARTEx_SetNbDataToProcess+0x94>)
 800bc82:	5c8a      	ldrb	r2, [r1, r2]
 800bc84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc88:	7b7a      	ldrb	r2, [r7, #13]
 800bc8a:	4908      	ldr	r1, [pc, #32]	@ (800bcac <UARTEx_SetNbDataToProcess+0x98>)
 800bc8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc8e:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bc9a:	bf00      	nop
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	080143c8 	.word	0x080143c8
 800bcac:	080143d0 	.word	0x080143d0

0800bcb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b085      	sub	sp, #20
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bcc0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bcc4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	b29a      	uxth	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3714      	adds	r7, #20
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr

0800bcde <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bcde:	b480      	push	{r7}
 800bce0:	b085      	sub	sp, #20
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bce6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bcea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800bcf2:	b29a      	uxth	r2, r3
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	43db      	mvns	r3, r3
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	4013      	ands	r3, r2
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3714      	adds	r7, #20
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	1d3b      	adds	r3, r7, #4
 800bd1e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2201      	movs	r2, #1
 800bd26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3714      	adds	r7, #20
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b0a7      	sub	sp, #156	@ 0x9c
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	4413      	add	r3, r2
 800bd6a:	881b      	ldrh	r3, [r3, #0]
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800bd72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd76:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	78db      	ldrb	r3, [r3, #3]
 800bd7e:	2b03      	cmp	r3, #3
 800bd80:	d81f      	bhi.n	800bdc2 <USB_ActivateEndpoint+0x72>
 800bd82:	a201      	add	r2, pc, #4	@ (adr r2, 800bd88 <USB_ActivateEndpoint+0x38>)
 800bd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd88:	0800bd99 	.word	0x0800bd99
 800bd8c:	0800bdb5 	.word	0x0800bdb5
 800bd90:	0800bdcb 	.word	0x0800bdcb
 800bd94:	0800bda7 	.word	0x0800bda7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bd98:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bd9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bda0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800bda4:	e012      	b.n	800bdcc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bda6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bdaa:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800bdae:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800bdb2:	e00b      	b.n	800bdcc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bdb4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bdb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bdbc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800bdc0:	e004      	b.n	800bdcc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800bdc8:	e000      	b.n	800bdcc <USB_ActivateEndpoint+0x7c>
      break;
 800bdca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	441a      	add	r2, r3
 800bdd6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bdda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bdde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bde2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bde6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	4413      	add	r3, r2
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	b21b      	sxth	r3, r3
 800bdfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be06:	b21a      	sxth	r2, r3
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	b21b      	sxth	r3, r3
 800be0e:	4313      	orrs	r3, r2
 800be10:	b21b      	sxth	r3, r3
 800be12:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	441a      	add	r2, r3
 800be20:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800be24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be34:	b29b      	uxth	r3, r3
 800be36:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	7b1b      	ldrb	r3, [r3, #12]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f040 8180 	bne.w	800c142 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	785b      	ldrb	r3, [r3, #1]
 800be46:	2b00      	cmp	r3, #0
 800be48:	f000 8084 	beq.w	800bf54 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	61bb      	str	r3, [r7, #24]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be56:	b29b      	uxth	r3, r3
 800be58:	461a      	mov	r2, r3
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	4413      	add	r3, r2
 800be5e:	61bb      	str	r3, [r7, #24]
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	00da      	lsls	r2, r3, #3
 800be66:	69bb      	ldr	r3, [r7, #24]
 800be68:	4413      	add	r3, r2
 800be6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800be6e:	617b      	str	r3, [r7, #20]
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	88db      	ldrh	r3, [r3, #6]
 800be74:	085b      	lsrs	r3, r3, #1
 800be76:	b29b      	uxth	r3, r3
 800be78:	005b      	lsls	r3, r3, #1
 800be7a:	b29a      	uxth	r2, r3
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4413      	add	r3, r2
 800be8a:	881b      	ldrh	r3, [r3, #0]
 800be8c:	827b      	strh	r3, [r7, #18]
 800be8e:	8a7b      	ldrh	r3, [r7, #18]
 800be90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be94:	2b00      	cmp	r3, #0
 800be96:	d01b      	beq.n	800bed0 <USB_ActivateEndpoint+0x180>
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	4413      	add	r3, r2
 800bea2:	881b      	ldrh	r3, [r3, #0]
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800beaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800beae:	823b      	strh	r3, [r7, #16]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	441a      	add	r2, r3
 800beba:	8a3b      	ldrh	r3, [r7, #16]
 800bebc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bec0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bec4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bec8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800becc:	b29b      	uxth	r3, r3
 800bece:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	78db      	ldrb	r3, [r3, #3]
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d020      	beq.n	800bf1a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	4413      	add	r3, r2
 800bee2:	881b      	ldrh	r3, [r3, #0]
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800beea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800beee:	81bb      	strh	r3, [r7, #12]
 800bef0:	89bb      	ldrh	r3, [r7, #12]
 800bef2:	f083 0320 	eor.w	r3, r3, #32
 800bef6:	81bb      	strh	r3, [r7, #12]
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	441a      	add	r2, r3
 800bf02:	89bb      	ldrh	r3, [r7, #12]
 800bf04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	8013      	strh	r3, [r2, #0]
 800bf18:	e3f9      	b.n	800c70e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	4413      	add	r3, r2
 800bf24:	881b      	ldrh	r3, [r3, #0]
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf30:	81fb      	strh	r3, [r7, #14]
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	441a      	add	r2, r3
 800bf3c:	89fb      	ldrh	r3, [r7, #14]
 800bf3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	8013      	strh	r3, [r2, #0]
 800bf52:	e3dc      	b.n	800c70e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	461a      	mov	r2, r3
 800bf62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf64:	4413      	add	r3, r2
 800bf66:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	00da      	lsls	r2, r3, #3
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf70:	4413      	add	r3, r2
 800bf72:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bf76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	88db      	ldrh	r3, [r3, #6]
 800bf7c:	085b      	lsrs	r3, r3, #1
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	005b      	lsls	r3, r3, #1
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf86:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	461a      	mov	r2, r3
 800bf96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf98:	4413      	add	r3, r2
 800bf9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	00da      	lsls	r2, r3, #3
 800bfa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa4:	4413      	add	r3, r2
 800bfa6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bfaa:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfae:	881b      	ldrh	r3, [r3, #0]
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bfb6:	b29a      	uxth	r2, r3
 800bfb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfba:	801a      	strh	r2, [r3, #0]
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	691b      	ldr	r3, [r3, #16]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d10a      	bne.n	800bfda <USB_ActivateEndpoint+0x28a>
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc6:	881b      	ldrh	r3, [r3, #0]
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd6:	801a      	strh	r2, [r3, #0]
 800bfd8:	e041      	b.n	800c05e <USB_ActivateEndpoint+0x30e>
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	691b      	ldr	r3, [r3, #16]
 800bfde:	2b3e      	cmp	r3, #62	@ 0x3e
 800bfe0:	d81c      	bhi.n	800c01c <USB_ActivateEndpoint+0x2cc>
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	691b      	ldr	r3, [r3, #16]
 800bfe6:	085b      	lsrs	r3, r3, #1
 800bfe8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	f003 0301 	and.w	r3, r3, #1
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d004      	beq.n	800c002 <USB_ActivateEndpoint+0x2b2>
 800bff8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bffc:	3301      	adds	r3, #1
 800bffe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c004:	881b      	ldrh	r3, [r3, #0]
 800c006:	b29a      	uxth	r2, r3
 800c008:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	029b      	lsls	r3, r3, #10
 800c010:	b29b      	uxth	r3, r3
 800c012:	4313      	orrs	r3, r2
 800c014:	b29a      	uxth	r2, r3
 800c016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c018:	801a      	strh	r2, [r3, #0]
 800c01a:	e020      	b.n	800c05e <USB_ActivateEndpoint+0x30e>
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	691b      	ldr	r3, [r3, #16]
 800c020:	095b      	lsrs	r3, r3, #5
 800c022:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	f003 031f 	and.w	r3, r3, #31
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d104      	bne.n	800c03c <USB_ActivateEndpoint+0x2ec>
 800c032:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c036:	3b01      	subs	r3, #1
 800c038:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c03e:	881b      	ldrh	r3, [r3, #0]
 800c040:	b29a      	uxth	r2, r3
 800c042:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c046:	b29b      	uxth	r3, r3
 800c048:	029b      	lsls	r3, r3, #10
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	4313      	orrs	r3, r2
 800c04e:	b29b      	uxth	r3, r3
 800c050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c058:	b29a      	uxth	r2, r3
 800c05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c05c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4413      	add	r3, r2
 800c068:	881b      	ldrh	r3, [r3, #0]
 800c06a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c06c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c06e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c072:	2b00      	cmp	r3, #0
 800c074:	d01b      	beq.n	800c0ae <USB_ActivateEndpoint+0x35e>
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	4413      	add	r3, r2
 800c080:	881b      	ldrh	r3, [r3, #0]
 800c082:	b29b      	uxth	r3, r3
 800c084:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c08c:	843b      	strh	r3, [r7, #32]
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	441a      	add	r2, r3
 800c098:	8c3b      	ldrh	r3, [r7, #32]
 800c09a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c09e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c0a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d124      	bne.n	800c100 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	4413      	add	r3, r2
 800c0c0:	881b      	ldrh	r3, [r3, #0]
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c0c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0cc:	83bb      	strh	r3, [r7, #28]
 800c0ce:	8bbb      	ldrh	r3, [r7, #28]
 800c0d0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c0d4:	83bb      	strh	r3, [r7, #28]
 800c0d6:	8bbb      	ldrh	r3, [r7, #28]
 800c0d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c0dc:	83bb      	strh	r3, [r7, #28]
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	441a      	add	r2, r3
 800c0e8:	8bbb      	ldrh	r3, [r7, #28]
 800c0ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	8013      	strh	r3, [r2, #0]
 800c0fe:	e306      	b.n	800c70e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	4413      	add	r3, r2
 800c10a:	881b      	ldrh	r3, [r3, #0]
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c116:	83fb      	strh	r3, [r7, #30]
 800c118:	8bfb      	ldrh	r3, [r7, #30]
 800c11a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c11e:	83fb      	strh	r3, [r7, #30]
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	441a      	add	r2, r3
 800c12a:	8bfb      	ldrh	r3, [r7, #30]
 800c12c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c130:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c134:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	8013      	strh	r3, [r2, #0]
 800c140:	e2e5      	b.n	800c70e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	78db      	ldrb	r3, [r3, #3]
 800c146:	2b02      	cmp	r3, #2
 800c148:	d11e      	bne.n	800c188 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c14a:	687a      	ldr	r2, [r7, #4]
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	4413      	add	r3, r2
 800c154:	881b      	ldrh	r3, [r3, #0]
 800c156:	b29b      	uxth	r3, r3
 800c158:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c15c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c160:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	441a      	add	r2, r3
 800c16e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800c172:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c176:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c17a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c17e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c182:	b29b      	uxth	r3, r3
 800c184:	8013      	strh	r3, [r2, #0]
 800c186:	e01d      	b.n	800c1c4 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	4413      	add	r3, r2
 800c192:	881b      	ldrh	r3, [r3, #0]
 800c194:	b29b      	uxth	r3, r3
 800c196:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c19a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c19e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	441a      	add	r2, r3
 800c1ac:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800c1b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c1d4:	4413      	add	r3, r2
 800c1d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	00da      	lsls	r2, r3, #3
 800c1de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c1e0:	4413      	add	r3, r2
 800c1e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c1e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	891b      	ldrh	r3, [r3, #8]
 800c1ec:	085b      	lsrs	r3, r3, #1
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	005b      	lsls	r3, r3, #1
 800c1f2:	b29a      	uxth	r2, r3
 800c1f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1f6:	801a      	strh	r2, [r3, #0]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	677b      	str	r3, [r7, #116]	@ 0x74
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c202:	b29b      	uxth	r3, r3
 800c204:	461a      	mov	r2, r3
 800c206:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c208:	4413      	add	r3, r2
 800c20a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	00da      	lsls	r2, r3, #3
 800c212:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c214:	4413      	add	r3, r2
 800c216:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c21a:	673b      	str	r3, [r7, #112]	@ 0x70
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	895b      	ldrh	r3, [r3, #10]
 800c220:	085b      	lsrs	r3, r3, #1
 800c222:	b29b      	uxth	r3, r3
 800c224:	005b      	lsls	r3, r3, #1
 800c226:	b29a      	uxth	r2, r3
 800c228:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c22a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	785b      	ldrb	r3, [r3, #1]
 800c230:	2b00      	cmp	r3, #0
 800c232:	f040 81af 	bne.w	800c594 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	4413      	add	r3, r2
 800c240:	881b      	ldrh	r3, [r3, #0]
 800c242:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800c246:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800c24a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d01d      	beq.n	800c28e <USB_ActivateEndpoint+0x53e>
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	4413      	add	r3, r2
 800c25c:	881b      	ldrh	r3, [r3, #0]
 800c25e:	b29b      	uxth	r3, r3
 800c260:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c268:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	441a      	add	r2, r3
 800c276:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c27a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c27e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c282:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	4413      	add	r3, r2
 800c298:	881b      	ldrh	r3, [r3, #0]
 800c29a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800c29e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800c2a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d01d      	beq.n	800c2e6 <USB_ActivateEndpoint+0x596>
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	4413      	add	r3, r2
 800c2b4:	881b      	ldrh	r3, [r3, #0]
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2c0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	441a      	add	r2, r3
 800c2ce:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800c2d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	785b      	ldrb	r3, [r3, #1]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d16b      	bne.n	800c3c6 <USB_ActivateEndpoint+0x676>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2fe:	4413      	add	r3, r2
 800c300:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	00da      	lsls	r2, r3, #3
 800c308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c30a:	4413      	add	r3, r2
 800c30c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c310:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c314:	881b      	ldrh	r3, [r3, #0]
 800c316:	b29b      	uxth	r3, r3
 800c318:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c31c:	b29a      	uxth	r2, r3
 800c31e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c320:	801a      	strh	r2, [r3, #0]
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	691b      	ldr	r3, [r3, #16]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d10a      	bne.n	800c340 <USB_ActivateEndpoint+0x5f0>
 800c32a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c32c:	881b      	ldrh	r3, [r3, #0]
 800c32e:	b29b      	uxth	r3, r3
 800c330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c338:	b29a      	uxth	r2, r3
 800c33a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c33c:	801a      	strh	r2, [r3, #0]
 800c33e:	e05d      	b.n	800c3fc <USB_ActivateEndpoint+0x6ac>
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	2b3e      	cmp	r3, #62	@ 0x3e
 800c346:	d81c      	bhi.n	800c382 <USB_ActivateEndpoint+0x632>
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	691b      	ldr	r3, [r3, #16]
 800c34c:	085b      	lsrs	r3, r3, #1
 800c34e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	691b      	ldr	r3, [r3, #16]
 800c356:	f003 0301 	and.w	r3, r3, #1
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d004      	beq.n	800c368 <USB_ActivateEndpoint+0x618>
 800c35e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c362:	3301      	adds	r3, #1
 800c364:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c368:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c36a:	881b      	ldrh	r3, [r3, #0]
 800c36c:	b29a      	uxth	r2, r3
 800c36e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c372:	b29b      	uxth	r3, r3
 800c374:	029b      	lsls	r3, r3, #10
 800c376:	b29b      	uxth	r3, r3
 800c378:	4313      	orrs	r3, r2
 800c37a:	b29a      	uxth	r2, r3
 800c37c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c37e:	801a      	strh	r2, [r3, #0]
 800c380:	e03c      	b.n	800c3fc <USB_ActivateEndpoint+0x6ac>
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	691b      	ldr	r3, [r3, #16]
 800c386:	095b      	lsrs	r3, r3, #5
 800c388:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	691b      	ldr	r3, [r3, #16]
 800c390:	f003 031f 	and.w	r3, r3, #31
 800c394:	2b00      	cmp	r3, #0
 800c396:	d104      	bne.n	800c3a2 <USB_ActivateEndpoint+0x652>
 800c398:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c39c:	3b01      	subs	r3, #1
 800c39e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c3a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3a4:	881b      	ldrh	r3, [r3, #0]
 800c3a6:	b29a      	uxth	r2, r3
 800c3a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	029b      	lsls	r3, r3, #10
 800c3b0:	b29b      	uxth	r3, r3
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3be:	b29a      	uxth	r2, r3
 800c3c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3c2:	801a      	strh	r2, [r3, #0]
 800c3c4:	e01a      	b.n	800c3fc <USB_ActivateEndpoint+0x6ac>
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	785b      	ldrb	r3, [r3, #1]
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d116      	bne.n	800c3fc <USB_ActivateEndpoint+0x6ac>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	657b      	str	r3, [r7, #84]	@ 0x54
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	461a      	mov	r2, r3
 800c3dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3de:	4413      	add	r3, r2
 800c3e0:	657b      	str	r3, [r7, #84]	@ 0x54
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	00da      	lsls	r2, r3, #3
 800c3e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3ea:	4413      	add	r3, r2
 800c3ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c3f0:	653b      	str	r3, [r7, #80]	@ 0x50
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	691b      	ldr	r3, [r3, #16]
 800c3f6:	b29a      	uxth	r2, r3
 800c3f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3fa:	801a      	strh	r2, [r3, #0]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	785b      	ldrb	r3, [r3, #1]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d16b      	bne.n	800c4e0 <USB_ActivateEndpoint+0x790>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c412:	b29b      	uxth	r3, r3
 800c414:	461a      	mov	r2, r3
 800c416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c418:	4413      	add	r3, r2
 800c41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	00da      	lsls	r2, r3, #3
 800c422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c424:	4413      	add	r3, r2
 800c426:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c42a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c42e:	881b      	ldrh	r3, [r3, #0]
 800c430:	b29b      	uxth	r3, r3
 800c432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c436:	b29a      	uxth	r2, r3
 800c438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c43a:	801a      	strh	r2, [r3, #0]
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	691b      	ldr	r3, [r3, #16]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d10a      	bne.n	800c45a <USB_ActivateEndpoint+0x70a>
 800c444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c446:	881b      	ldrh	r3, [r3, #0]
 800c448:	b29b      	uxth	r3, r3
 800c44a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c44e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c452:	b29a      	uxth	r2, r3
 800c454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c456:	801a      	strh	r2, [r3, #0]
 800c458:	e05b      	b.n	800c512 <USB_ActivateEndpoint+0x7c2>
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	691b      	ldr	r3, [r3, #16]
 800c45e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c460:	d81c      	bhi.n	800c49c <USB_ActivateEndpoint+0x74c>
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	085b      	lsrs	r3, r3, #1
 800c468:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	691b      	ldr	r3, [r3, #16]
 800c470:	f003 0301 	and.w	r3, r3, #1
 800c474:	2b00      	cmp	r3, #0
 800c476:	d004      	beq.n	800c482 <USB_ActivateEndpoint+0x732>
 800c478:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c47c:	3301      	adds	r3, #1
 800c47e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c484:	881b      	ldrh	r3, [r3, #0]
 800c486:	b29a      	uxth	r2, r3
 800c488:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	029b      	lsls	r3, r3, #10
 800c490:	b29b      	uxth	r3, r3
 800c492:	4313      	orrs	r3, r2
 800c494:	b29a      	uxth	r2, r3
 800c496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c498:	801a      	strh	r2, [r3, #0]
 800c49a:	e03a      	b.n	800c512 <USB_ActivateEndpoint+0x7c2>
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	691b      	ldr	r3, [r3, #16]
 800c4a0:	095b      	lsrs	r3, r3, #5
 800c4a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	691b      	ldr	r3, [r3, #16]
 800c4aa:	f003 031f 	and.w	r3, r3, #31
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d104      	bne.n	800c4bc <USB_ActivateEndpoint+0x76c>
 800c4b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c4b6:	3b01      	subs	r3, #1
 800c4b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4be:	881b      	ldrh	r3, [r3, #0]
 800c4c0:	b29a      	uxth	r2, r3
 800c4c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	029b      	lsls	r3, r3, #10
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4d8:	b29a      	uxth	r2, r3
 800c4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4dc:	801a      	strh	r2, [r3, #0]
 800c4de:	e018      	b.n	800c512 <USB_ActivateEndpoint+0x7c2>
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	785b      	ldrb	r3, [r3, #1]
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d114      	bne.n	800c512 <USB_ActivateEndpoint+0x7c2>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4f4:	4413      	add	r3, r2
 800c4f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	00da      	lsls	r2, r3, #3
 800c4fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c500:	4413      	add	r3, r2
 800c502:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c506:	643b      	str	r3, [r7, #64]	@ 0x40
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c510:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	4413      	add	r3, r2
 800c51c:	881b      	ldrh	r3, [r3, #0]
 800c51e:	b29b      	uxth	r3, r3
 800c520:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c528:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c52a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c52c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c530:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c532:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c534:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c538:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	441a      	add	r2, r3
 800c544:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c546:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c54a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c54e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c556:	b29b      	uxth	r3, r3
 800c558:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	4413      	add	r3, r2
 800c564:	881b      	ldrh	r3, [r3, #0]
 800c566:	b29b      	uxth	r3, r3
 800c568:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c56c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c570:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	009b      	lsls	r3, r3, #2
 800c57a:	441a      	add	r2, r3
 800c57c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c57e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c582:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c58a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c58e:	b29b      	uxth	r3, r3
 800c590:	8013      	strh	r3, [r2, #0]
 800c592:	e0bc      	b.n	800c70e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	4413      	add	r3, r2
 800c59e:	881b      	ldrh	r3, [r3, #0]
 800c5a0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800c5a4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c5a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d01d      	beq.n	800c5ec <USB_ActivateEndpoint+0x89c>
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	4413      	add	r3, r2
 800c5ba:	881b      	ldrh	r3, [r3, #0]
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5c6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	441a      	add	r2, r3
 800c5d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c5d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c5e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	4413      	add	r3, r2
 800c5f6:	881b      	ldrh	r3, [r3, #0]
 800c5f8:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800c5fc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800c600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c604:	2b00      	cmp	r3, #0
 800c606:	d01d      	beq.n	800c644 <USB_ActivateEndpoint+0x8f4>
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	4413      	add	r3, r2
 800c612:	881b      	ldrh	r3, [r3, #0]
 800c614:	b29b      	uxth	r3, r3
 800c616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c61a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c61e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	441a      	add	r2, r3
 800c62c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800c630:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c634:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c638:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c63c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c640:	b29b      	uxth	r3, r3
 800c642:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	78db      	ldrb	r3, [r3, #3]
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d024      	beq.n	800c696 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	4413      	add	r3, r2
 800c656:	881b      	ldrh	r3, [r3, #0]
 800c658:	b29b      	uxth	r3, r3
 800c65a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c65e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c662:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c666:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c66a:	f083 0320 	eor.w	r3, r3, #32
 800c66e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	441a      	add	r2, r3
 800c67c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c680:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c684:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c688:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c68c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c690:	b29b      	uxth	r3, r3
 800c692:	8013      	strh	r3, [r2, #0]
 800c694:	e01d      	b.n	800c6d2 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	009b      	lsls	r3, r3, #2
 800c69e:	4413      	add	r3, r2
 800c6a0:	881b      	ldrh	r3, [r3, #0]
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6ac:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	441a      	add	r2, r3
 800c6ba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c6be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	4413      	add	r3, r2
 800c6dc:	881b      	ldrh	r3, [r3, #0]
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c6e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6e8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	441a      	add	r2, r3
 800c6f6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c6fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c70e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800c712:	4618      	mov	r0, r3
 800c714:	379c      	adds	r7, #156	@ 0x9c
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop

0800c720 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c720:	b480      	push	{r7}
 800c722:	b08d      	sub	sp, #52	@ 0x34
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	7b1b      	ldrb	r3, [r3, #12]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	f040 808e 	bne.w	800c850 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	785b      	ldrb	r3, [r3, #1]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d044      	beq.n	800c7c6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	4413      	add	r3, r2
 800c746:	881b      	ldrh	r3, [r3, #0]
 800c748:	81bb      	strh	r3, [r7, #12]
 800c74a:	89bb      	ldrh	r3, [r7, #12]
 800c74c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c750:	2b00      	cmp	r3, #0
 800c752:	d01b      	beq.n	800c78c <USB_DeactivateEndpoint+0x6c>
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	4413      	add	r3, r2
 800c75e:	881b      	ldrh	r3, [r3, #0]
 800c760:	b29b      	uxth	r3, r3
 800c762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c76a:	817b      	strh	r3, [r7, #10]
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	441a      	add	r2, r3
 800c776:	897b      	ldrh	r3, [r7, #10]
 800c778:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c77c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c780:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c784:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c788:	b29b      	uxth	r3, r3
 800c78a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	4413      	add	r3, r2
 800c796:	881b      	ldrh	r3, [r3, #0]
 800c798:	b29b      	uxth	r3, r3
 800c79a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c79e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7a2:	813b      	strh	r3, [r7, #8]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	441a      	add	r2, r3
 800c7ae:	893b      	ldrh	r3, [r7, #8]
 800c7b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	8013      	strh	r3, [r2, #0]
 800c7c4:	e192      	b.n	800caec <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	4413      	add	r3, r2
 800c7d0:	881b      	ldrh	r3, [r3, #0]
 800c7d2:	827b      	strh	r3, [r7, #18]
 800c7d4:	8a7b      	ldrh	r3, [r7, #18]
 800c7d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d01b      	beq.n	800c816 <USB_DeactivateEndpoint+0xf6>
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	4413      	add	r3, r2
 800c7e8:	881b      	ldrh	r3, [r3, #0]
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7f4:	823b      	strh	r3, [r7, #16]
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	441a      	add	r2, r3
 800c800:	8a3b      	ldrh	r3, [r7, #16]
 800c802:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c806:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c80a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c80e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c812:	b29b      	uxth	r3, r3
 800c814:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	009b      	lsls	r3, r3, #2
 800c81e:	4413      	add	r3, r2
 800c820:	881b      	ldrh	r3, [r3, #0]
 800c822:	b29b      	uxth	r3, r3
 800c824:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c828:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c82c:	81fb      	strh	r3, [r7, #14]
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	009b      	lsls	r3, r3, #2
 800c836:	441a      	add	r2, r3
 800c838:	89fb      	ldrh	r3, [r7, #14]
 800c83a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c83e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	8013      	strh	r3, [r2, #0]
 800c84e:	e14d      	b.n	800caec <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	785b      	ldrb	r3, [r3, #1]
 800c854:	2b00      	cmp	r3, #0
 800c856:	f040 80a5 	bne.w	800c9a4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c85a:	687a      	ldr	r2, [r7, #4]
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	4413      	add	r3, r2
 800c864:	881b      	ldrh	r3, [r3, #0]
 800c866:	843b      	strh	r3, [r7, #32]
 800c868:	8c3b      	ldrh	r3, [r7, #32]
 800c86a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d01b      	beq.n	800c8aa <USB_DeactivateEndpoint+0x18a>
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	4413      	add	r3, r2
 800c87c:	881b      	ldrh	r3, [r3, #0]
 800c87e:	b29b      	uxth	r3, r3
 800c880:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c888:	83fb      	strh	r3, [r7, #30]
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	441a      	add	r2, r3
 800c894:	8bfb      	ldrh	r3, [r7, #30]
 800c896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c89a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c89e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c8a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	4413      	add	r3, r2
 800c8b4:	881b      	ldrh	r3, [r3, #0]
 800c8b6:	83bb      	strh	r3, [r7, #28]
 800c8b8:	8bbb      	ldrh	r3, [r7, #28]
 800c8ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d01b      	beq.n	800c8fa <USB_DeactivateEndpoint+0x1da>
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	4413      	add	r3, r2
 800c8cc:	881b      	ldrh	r3, [r3, #0]
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8d8:	837b      	strh	r3, [r7, #26]
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	441a      	add	r2, r3
 800c8e4:	8b7b      	ldrh	r3, [r7, #26]
 800c8e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	4413      	add	r3, r2
 800c904:	881b      	ldrh	r3, [r3, #0]
 800c906:	b29b      	uxth	r3, r3
 800c908:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c90c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c910:	833b      	strh	r3, [r7, #24]
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	441a      	add	r2, r3
 800c91c:	8b3b      	ldrh	r3, [r7, #24]
 800c91e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c922:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c92a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c92e:	b29b      	uxth	r3, r3
 800c930:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	4413      	add	r3, r2
 800c93c:	881b      	ldrh	r3, [r3, #0]
 800c93e:	b29b      	uxth	r3, r3
 800c940:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c944:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c948:	82fb      	strh	r3, [r7, #22]
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	009b      	lsls	r3, r3, #2
 800c952:	441a      	add	r2, r3
 800c954:	8afb      	ldrh	r3, [r7, #22]
 800c956:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c95a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c95e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c966:	b29b      	uxth	r3, r3
 800c968:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c96a:	687a      	ldr	r2, [r7, #4]
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	4413      	add	r3, r2
 800c974:	881b      	ldrh	r3, [r3, #0]
 800c976:	b29b      	uxth	r3, r3
 800c978:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c97c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c980:	82bb      	strh	r3, [r7, #20]
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	441a      	add	r2, r3
 800c98c:	8abb      	ldrh	r3, [r7, #20]
 800c98e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c992:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c99a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	8013      	strh	r3, [r2, #0]
 800c9a2:	e0a3      	b.n	800caec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	4413      	add	r3, r2
 800c9ae:	881b      	ldrh	r3, [r3, #0]
 800c9b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c9b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c9b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d01b      	beq.n	800c9f4 <USB_DeactivateEndpoint+0x2d4>
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	009b      	lsls	r3, r3, #2
 800c9c4:	4413      	add	r3, r2
 800c9c6:	881b      	ldrh	r3, [r3, #0]
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9d2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	009b      	lsls	r3, r3, #2
 800c9dc:	441a      	add	r2, r3
 800c9de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c9e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c9ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	4413      	add	r3, r2
 800c9fe:	881b      	ldrh	r3, [r3, #0]
 800ca00:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800ca02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ca04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d01b      	beq.n	800ca44 <USB_DeactivateEndpoint+0x324>
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	4413      	add	r3, r2
 800ca16:	881b      	ldrh	r3, [r3, #0]
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca22:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	441a      	add	r2, r3
 800ca2e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ca30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	4413      	add	r3, r2
 800ca4e:	881b      	ldrh	r3, [r3, #0]
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca5a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	441a      	add	r2, r3
 800ca66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ca68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ca74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	4413      	add	r3, r2
 800ca86:	881b      	ldrh	r3, [r3, #0]
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca92:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	441a      	add	r2, r3
 800ca9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800caa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800caa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800caa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800caac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	009b      	lsls	r3, r3, #2
 800cabc:	4413      	add	r3, r2
 800cabe:	881b      	ldrh	r3, [r3, #0]
 800cac0:	b29b      	uxth	r3, r3
 800cac2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caca:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	441a      	add	r2, r3
 800cad6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cad8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cadc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cae0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cae4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cae8:	b29b      	uxth	r3, r3
 800caea:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3734      	adds	r7, #52	@ 0x34
 800caf2:	46bd      	mov	sp, r7
 800caf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf8:	4770      	bx	lr

0800cafa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b0ac      	sub	sp, #176	@ 0xb0
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
 800cb02:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	785b      	ldrb	r3, [r3, #1]
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	f040 84ca 	bne.w	800d4a2 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	699a      	ldr	r2, [r3, #24]
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	691b      	ldr	r3, [r3, #16]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d904      	bls.n	800cb24 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	691b      	ldr	r3, [r3, #16]
 800cb1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cb22:	e003      	b.n	800cb2c <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	699b      	ldr	r3, [r3, #24]
 800cb28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	7b1b      	ldrb	r3, [r3, #12]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d122      	bne.n	800cb7a <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	6959      	ldr	r1, [r3, #20]
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	88da      	ldrh	r2, [r3, #6]
 800cb3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 febd 	bl	800d8c2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	613b      	str	r3, [r7, #16]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	461a      	mov	r2, r3
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	4413      	add	r3, r2
 800cb5a:	613b      	str	r3, [r7, #16]
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	00da      	lsls	r2, r3, #3
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	4413      	add	r3, r2
 800cb66:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cb6a:	60fb      	str	r3, [r7, #12]
 800cb6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb70:	b29a      	uxth	r2, r3
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	801a      	strh	r2, [r3, #0]
 800cb76:	f000 bc6f 	b.w	800d458 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	78db      	ldrb	r3, [r3, #3]
 800cb7e:	2b02      	cmp	r3, #2
 800cb80:	f040 831e 	bne.w	800d1c0 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	6a1a      	ldr	r2, [r3, #32]
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	691b      	ldr	r3, [r3, #16]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	f240 82cf 	bls.w	800d130 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	4413      	add	r3, r2
 800cb9c:	881b      	ldrh	r3, [r3, #0]
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cba8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	441a      	add	r2, r3
 800cbb6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800cbba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbc2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cbc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	6a1a      	ldr	r2, [r3, #32]
 800cbd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbd6:	1ad2      	subs	r2, r2, r3
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	4413      	add	r3, r2
 800cbe6:	881b      	ldrh	r3, [r3, #0]
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	f000 814f 	beq.w	800ce92 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	785b      	ldrb	r3, [r3, #1]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d16b      	bne.n	800ccd8 <USB_EPStartXfer+0x1de>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc10:	4413      	add	r3, r2
 800cc12:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	00da      	lsls	r2, r3, #3
 800cc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc1c:	4413      	add	r3, r2
 800cc1e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cc22:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc26:	881b      	ldrh	r3, [r3, #0]
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cc2e:	b29a      	uxth	r2, r3
 800cc30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc32:	801a      	strh	r2, [r3, #0]
 800cc34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d10a      	bne.n	800cc52 <USB_EPStartXfer+0x158>
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc3e:	881b      	ldrh	r3, [r3, #0]
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc4a:	b29a      	uxth	r2, r3
 800cc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4e:	801a      	strh	r2, [r3, #0]
 800cc50:	e05b      	b.n	800cd0a <USB_EPStartXfer+0x210>
 800cc52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc56:	2b3e      	cmp	r3, #62	@ 0x3e
 800cc58:	d81c      	bhi.n	800cc94 <USB_EPStartXfer+0x19a>
 800cc5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc5e:	085b      	lsrs	r3, r3, #1
 800cc60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cc64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc68:	f003 0301 	and.w	r3, r3, #1
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d004      	beq.n	800cc7a <USB_EPStartXfer+0x180>
 800cc70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cc74:	3301      	adds	r3, #1
 800cc76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cc7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc7c:	881b      	ldrh	r3, [r3, #0]
 800cc7e:	b29a      	uxth	r2, r3
 800cc80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	029b      	lsls	r3, r3, #10
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	b29a      	uxth	r2, r3
 800cc8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc90:	801a      	strh	r2, [r3, #0]
 800cc92:	e03a      	b.n	800cd0a <USB_EPStartXfer+0x210>
 800cc94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc98:	095b      	lsrs	r3, r3, #5
 800cc9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cc9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cca2:	f003 031f 	and.w	r3, r3, #31
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d104      	bne.n	800ccb4 <USB_EPStartXfer+0x1ba>
 800ccaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ccae:	3b01      	subs	r3, #1
 800ccb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ccb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb6:	881b      	ldrh	r3, [r3, #0]
 800ccb8:	b29a      	uxth	r2, r3
 800ccba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	029b      	lsls	r3, r3, #10
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccd0:	b29a      	uxth	r2, r3
 800ccd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd4:	801a      	strh	r2, [r3, #0]
 800ccd6:	e018      	b.n	800cd0a <USB_EPStartXfer+0x210>
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	785b      	ldrb	r3, [r3, #1]
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d114      	bne.n	800cd0a <USB_EPStartXfer+0x210>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	461a      	mov	r2, r3
 800ccea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccec:	4413      	add	r3, r2
 800ccee:	633b      	str	r3, [r7, #48]	@ 0x30
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	00da      	lsls	r2, r3, #3
 800ccf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf8:	4413      	add	r3, r2
 800ccfa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ccfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd04:	b29a      	uxth	r2, r3
 800cd06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd08:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	895b      	ldrh	r3, [r3, #10]
 800cd0e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	6959      	ldr	r1, [r3, #20]
 800cd16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 fdce 	bl	800d8c2 <USB_WritePMA>
            ep->xfer_buff += len;
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	695a      	ldr	r2, [r3, #20]
 800cd2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd2e:	441a      	add	r2, r3
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	6a1a      	ldr	r2, [r3, #32]
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	691b      	ldr	r3, [r3, #16]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d907      	bls.n	800cd50 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	6a1a      	ldr	r2, [r3, #32]
 800cd44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd48:	1ad2      	subs	r2, r2, r3
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	621a      	str	r2, [r3, #32]
 800cd4e:	e006      	b.n	800cd5e <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	6a1b      	ldr	r3, [r3, #32]
 800cd54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	785b      	ldrb	r3, [r3, #1]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d16b      	bne.n	800ce3e <USB_EPStartXfer+0x344>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	61bb      	str	r3, [r7, #24]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	461a      	mov	r2, r3
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	4413      	add	r3, r2
 800cd78:	61bb      	str	r3, [r7, #24]
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	00da      	lsls	r2, r3, #3
 800cd80:	69bb      	ldr	r3, [r7, #24]
 800cd82:	4413      	add	r3, r2
 800cd84:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd88:	617b      	str	r3, [r7, #20]
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	881b      	ldrh	r3, [r3, #0]
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd94:	b29a      	uxth	r2, r3
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	801a      	strh	r2, [r3, #0]
 800cd9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d10a      	bne.n	800cdb8 <USB_EPStartXfer+0x2be>
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	881b      	ldrh	r3, [r3, #0]
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdb0:	b29a      	uxth	r2, r3
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	801a      	strh	r2, [r3, #0]
 800cdb6:	e05d      	b.n	800ce74 <USB_EPStartXfer+0x37a>
 800cdb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cdbc:	2b3e      	cmp	r3, #62	@ 0x3e
 800cdbe:	d81c      	bhi.n	800cdfa <USB_EPStartXfer+0x300>
 800cdc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cdc4:	085b      	lsrs	r3, r3, #1
 800cdc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cdca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cdce:	f003 0301 	and.w	r3, r3, #1
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d004      	beq.n	800cde0 <USB_EPStartXfer+0x2e6>
 800cdd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cdda:	3301      	adds	r3, #1
 800cddc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	881b      	ldrh	r3, [r3, #0]
 800cde4:	b29a      	uxth	r2, r3
 800cde6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	029b      	lsls	r3, r3, #10
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	4313      	orrs	r3, r2
 800cdf2:	b29a      	uxth	r2, r3
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	801a      	strh	r2, [r3, #0]
 800cdf8:	e03c      	b.n	800ce74 <USB_EPStartXfer+0x37a>
 800cdfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cdfe:	095b      	lsrs	r3, r3, #5
 800ce00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ce04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce08:	f003 031f 	and.w	r3, r3, #31
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d104      	bne.n	800ce1a <USB_EPStartXfer+0x320>
 800ce10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ce14:	3b01      	subs	r3, #1
 800ce16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	881b      	ldrh	r3, [r3, #0]
 800ce1e:	b29a      	uxth	r2, r3
 800ce20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	029b      	lsls	r3, r3, #10
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	801a      	strh	r2, [r3, #0]
 800ce3c:	e01a      	b.n	800ce74 <USB_EPStartXfer+0x37a>
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	785b      	ldrb	r3, [r3, #1]
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d116      	bne.n	800ce74 <USB_EPStartXfer+0x37a>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	623b      	str	r3, [r7, #32]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	461a      	mov	r2, r3
 800ce54:	6a3b      	ldr	r3, [r7, #32]
 800ce56:	4413      	add	r3, r2
 800ce58:	623b      	str	r3, [r7, #32]
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	00da      	lsls	r2, r3, #3
 800ce60:	6a3b      	ldr	r3, [r7, #32]
 800ce62:	4413      	add	r3, r2
 800ce64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce68:	61fb      	str	r3, [r7, #28]
 800ce6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce6e:	b29a      	uxth	r2, r3
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	891b      	ldrh	r3, [r3, #8]
 800ce78:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	6959      	ldr	r1, [r3, #20]
 800ce80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 fd19 	bl	800d8c2 <USB_WritePMA>
 800ce90:	e2e2      	b.n	800d458 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	785b      	ldrb	r3, [r3, #1]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d16b      	bne.n	800cf72 <USB_EPStartXfer+0x478>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	461a      	mov	r2, r3
 800cea8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ceaa:	4413      	add	r3, r2
 800ceac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	00da      	lsls	r2, r3, #3
 800ceb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ceb6:	4413      	add	r3, r2
 800ceb8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cebc:	647b      	str	r3, [r7, #68]	@ 0x44
 800cebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cec0:	881b      	ldrh	r3, [r3, #0]
 800cec2:	b29b      	uxth	r3, r3
 800cec4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cec8:	b29a      	uxth	r2, r3
 800ceca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cecc:	801a      	strh	r2, [r3, #0]
 800cece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10a      	bne.n	800ceec <USB_EPStartXfer+0x3f2>
 800ced6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ced8:	881b      	ldrh	r3, [r3, #0]
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cee4:	b29a      	uxth	r2, r3
 800cee6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cee8:	801a      	strh	r2, [r3, #0]
 800ceea:	e05d      	b.n	800cfa8 <USB_EPStartXfer+0x4ae>
 800ceec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cef0:	2b3e      	cmp	r3, #62	@ 0x3e
 800cef2:	d81c      	bhi.n	800cf2e <USB_EPStartXfer+0x434>
 800cef4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cef8:	085b      	lsrs	r3, r3, #1
 800cefa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cefe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf02:	f003 0301 	and.w	r3, r3, #1
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d004      	beq.n	800cf14 <USB_EPStartXfer+0x41a>
 800cf0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cf0e:	3301      	adds	r3, #1
 800cf10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cf14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf16:	881b      	ldrh	r3, [r3, #0]
 800cf18:	b29a      	uxth	r2, r3
 800cf1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	029b      	lsls	r3, r3, #10
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	4313      	orrs	r3, r2
 800cf26:	b29a      	uxth	r2, r3
 800cf28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf2a:	801a      	strh	r2, [r3, #0]
 800cf2c:	e03c      	b.n	800cfa8 <USB_EPStartXfer+0x4ae>
 800cf2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf32:	095b      	lsrs	r3, r3, #5
 800cf34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cf38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf3c:	f003 031f 	and.w	r3, r3, #31
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d104      	bne.n	800cf4e <USB_EPStartXfer+0x454>
 800cf44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cf48:	3b01      	subs	r3, #1
 800cf4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cf4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf50:	881b      	ldrh	r3, [r3, #0]
 800cf52:	b29a      	uxth	r2, r3
 800cf54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cf58:	b29b      	uxth	r3, r3
 800cf5a:	029b      	lsls	r3, r3, #10
 800cf5c:	b29b      	uxth	r3, r3
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	b29b      	uxth	r3, r3
 800cf62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf6a:	b29a      	uxth	r2, r3
 800cf6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf6e:	801a      	strh	r2, [r3, #0]
 800cf70:	e01a      	b.n	800cfa8 <USB_EPStartXfer+0x4ae>
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	785b      	ldrb	r3, [r3, #1]
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d116      	bne.n	800cfa8 <USB_EPStartXfer+0x4ae>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	461a      	mov	r2, r3
 800cf88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf8a:	4413      	add	r3, r2
 800cf8c:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	00da      	lsls	r2, r3, #3
 800cf94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf96:	4413      	add	r3, r2
 800cf98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cf9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cfa2:	b29a      	uxth	r2, r3
 800cfa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfa6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	891b      	ldrh	r3, [r3, #8]
 800cfac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	6959      	ldr	r1, [r3, #20]
 800cfb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cfb8:	b29b      	uxth	r3, r3
 800cfba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 fc7f 	bl	800d8c2 <USB_WritePMA>
            ep->xfer_buff += len;
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	695a      	ldr	r2, [r3, #20]
 800cfc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cfcc:	441a      	add	r2, r3
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	6a1a      	ldr	r2, [r3, #32]
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	691b      	ldr	r3, [r3, #16]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d907      	bls.n	800cfee <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	6a1a      	ldr	r2, [r3, #32]
 800cfe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cfe6:	1ad2      	subs	r2, r2, r3
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	621a      	str	r2, [r3, #32]
 800cfec:	e006      	b.n	800cffc <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	6a1b      	ldr	r3, [r3, #32]
 800cff2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	2200      	movs	r2, #0
 800cffa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	643b      	str	r3, [r7, #64]	@ 0x40
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	785b      	ldrb	r3, [r3, #1]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d16b      	bne.n	800d0e0 <USB_EPStartXfer+0x5e6>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d012:	b29b      	uxth	r3, r3
 800d014:	461a      	mov	r2, r3
 800d016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d018:	4413      	add	r3, r2
 800d01a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	00da      	lsls	r2, r3, #3
 800d022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d024:	4413      	add	r3, r2
 800d026:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d02a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d02e:	881b      	ldrh	r3, [r3, #0]
 800d030:	b29b      	uxth	r3, r3
 800d032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d036:	b29a      	uxth	r2, r3
 800d038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d03a:	801a      	strh	r2, [r3, #0]
 800d03c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d040:	2b00      	cmp	r3, #0
 800d042:	d10a      	bne.n	800d05a <USB_EPStartXfer+0x560>
 800d044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d046:	881b      	ldrh	r3, [r3, #0]
 800d048:	b29b      	uxth	r3, r3
 800d04a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d04e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d052:	b29a      	uxth	r2, r3
 800d054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d056:	801a      	strh	r2, [r3, #0]
 800d058:	e05b      	b.n	800d112 <USB_EPStartXfer+0x618>
 800d05a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d05e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d060:	d81c      	bhi.n	800d09c <USB_EPStartXfer+0x5a2>
 800d062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d066:	085b      	lsrs	r3, r3, #1
 800d068:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d06c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d070:	f003 0301 	and.w	r3, r3, #1
 800d074:	2b00      	cmp	r3, #0
 800d076:	d004      	beq.n	800d082 <USB_EPStartXfer+0x588>
 800d078:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d07c:	3301      	adds	r3, #1
 800d07e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d084:	881b      	ldrh	r3, [r3, #0]
 800d086:	b29a      	uxth	r2, r3
 800d088:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	029b      	lsls	r3, r3, #10
 800d090:	b29b      	uxth	r3, r3
 800d092:	4313      	orrs	r3, r2
 800d094:	b29a      	uxth	r2, r3
 800d096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d098:	801a      	strh	r2, [r3, #0]
 800d09a:	e03a      	b.n	800d112 <USB_EPStartXfer+0x618>
 800d09c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0a0:	095b      	lsrs	r3, r3, #5
 800d0a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d0a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0aa:	f003 031f 	and.w	r3, r3, #31
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d104      	bne.n	800d0bc <USB_EPStartXfer+0x5c2>
 800d0b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d0b6:	3b01      	subs	r3, #1
 800d0b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d0bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0be:	881b      	ldrh	r3, [r3, #0]
 800d0c0:	b29a      	uxth	r2, r3
 800d0c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	029b      	lsls	r3, r3, #10
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0d8:	b29a      	uxth	r2, r3
 800d0da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0dc:	801a      	strh	r2, [r3, #0]
 800d0de:	e018      	b.n	800d112 <USB_EPStartXfer+0x618>
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	785b      	ldrb	r3, [r3, #1]
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d114      	bne.n	800d112 <USB_EPStartXfer+0x618>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0f4:	4413      	add	r3, r2
 800d0f6:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	00da      	lsls	r2, r3, #3
 800d0fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d100:	4413      	add	r3, r2
 800d102:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d106:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d108:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d10c:	b29a      	uxth	r2, r3
 800d10e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d110:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	895b      	ldrh	r3, [r3, #10]
 800d116:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	6959      	ldr	r1, [r3, #20]
 800d11e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d122:	b29b      	uxth	r3, r3
 800d124:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f000 fbca 	bl	800d8c2 <USB_WritePMA>
 800d12e:	e193      	b.n	800d458 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	6a1b      	ldr	r3, [r3, #32]
 800d134:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	4413      	add	r3, r2
 800d142:	881b      	ldrh	r3, [r3, #0]
 800d144:	b29b      	uxth	r3, r3
 800d146:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d14a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d14e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	441a      	add	r2, r3
 800d15c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d160:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d164:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d168:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d16c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d170:	b29b      	uxth	r3, r3
 800d172:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d17e:	b29b      	uxth	r3, r3
 800d180:	461a      	mov	r2, r3
 800d182:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d184:	4413      	add	r3, r2
 800d186:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	00da      	lsls	r2, r3, #3
 800d18e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d190:	4413      	add	r3, r2
 800d192:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d196:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d198:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d19c:	b29a      	uxth	r2, r3
 800d19e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d1a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	891b      	ldrh	r3, [r3, #8]
 800d1a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	6959      	ldr	r1, [r3, #20]
 800d1ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1b2:	b29b      	uxth	r3, r3
 800d1b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 fb82 	bl	800d8c2 <USB_WritePMA>
 800d1be:	e14b      	b.n	800d458 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	6a1a      	ldr	r2, [r3, #32]
 800d1c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1c8:	1ad2      	subs	r2, r2, r3
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	4413      	add	r3, r2
 800d1d8:	881b      	ldrh	r3, [r3, #0]
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	f000 809a 	beq.w	800d31a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	673b      	str	r3, [r7, #112]	@ 0x70
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	785b      	ldrb	r3, [r3, #1]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d16b      	bne.n	800d2ca <USB_EPStartXfer+0x7d0>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	461a      	mov	r2, r3
 800d200:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d202:	4413      	add	r3, r2
 800d204:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	00da      	lsls	r2, r3, #3
 800d20c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d20e:	4413      	add	r3, r2
 800d210:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d214:	667b      	str	r3, [r7, #100]	@ 0x64
 800d216:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d218:	881b      	ldrh	r3, [r3, #0]
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d220:	b29a      	uxth	r2, r3
 800d222:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d224:	801a      	strh	r2, [r3, #0]
 800d226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d10a      	bne.n	800d244 <USB_EPStartXfer+0x74a>
 800d22e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d230:	881b      	ldrh	r3, [r3, #0]
 800d232:	b29b      	uxth	r3, r3
 800d234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d240:	801a      	strh	r2, [r3, #0]
 800d242:	e05b      	b.n	800d2fc <USB_EPStartXfer+0x802>
 800d244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d248:	2b3e      	cmp	r3, #62	@ 0x3e
 800d24a:	d81c      	bhi.n	800d286 <USB_EPStartXfer+0x78c>
 800d24c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d250:	085b      	lsrs	r3, r3, #1
 800d252:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d25a:	f003 0301 	and.w	r3, r3, #1
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d004      	beq.n	800d26c <USB_EPStartXfer+0x772>
 800d262:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d266:	3301      	adds	r3, #1
 800d268:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d26c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d26e:	881b      	ldrh	r3, [r3, #0]
 800d270:	b29a      	uxth	r2, r3
 800d272:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d276:	b29b      	uxth	r3, r3
 800d278:	029b      	lsls	r3, r3, #10
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	4313      	orrs	r3, r2
 800d27e:	b29a      	uxth	r2, r3
 800d280:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d282:	801a      	strh	r2, [r3, #0]
 800d284:	e03a      	b.n	800d2fc <USB_EPStartXfer+0x802>
 800d286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d28a:	095b      	lsrs	r3, r3, #5
 800d28c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d290:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d294:	f003 031f 	and.w	r3, r3, #31
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d104      	bne.n	800d2a6 <USB_EPStartXfer+0x7ac>
 800d29c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d2a0:	3b01      	subs	r3, #1
 800d2a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d2a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d2a8:	881b      	ldrh	r3, [r3, #0]
 800d2aa:	b29a      	uxth	r2, r3
 800d2ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	029b      	lsls	r3, r3, #10
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2c2:	b29a      	uxth	r2, r3
 800d2c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d2c6:	801a      	strh	r2, [r3, #0]
 800d2c8:	e018      	b.n	800d2fc <USB_EPStartXfer+0x802>
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	785b      	ldrb	r3, [r3, #1]
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d114      	bne.n	800d2fc <USB_EPStartXfer+0x802>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	461a      	mov	r2, r3
 800d2dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d2de:	4413      	add	r3, r2
 800d2e0:	673b      	str	r3, [r7, #112]	@ 0x70
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	00da      	lsls	r2, r3, #3
 800d2e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d2ea:	4413      	add	r3, r2
 800d2ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d2f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d2f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2f6:	b29a      	uxth	r2, r3
 800d2f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d2fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	895b      	ldrh	r3, [r3, #10]
 800d300:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	6959      	ldr	r1, [r3, #20]
 800d308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 fad5 	bl	800d8c2 <USB_WritePMA>
 800d318:	e09e      	b.n	800d458 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	785b      	ldrb	r3, [r3, #1]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d16b      	bne.n	800d3fa <USB_EPStartXfer+0x900>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d32c:	b29b      	uxth	r3, r3
 800d32e:	461a      	mov	r2, r3
 800d330:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d332:	4413      	add	r3, r2
 800d334:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	781b      	ldrb	r3, [r3, #0]
 800d33a:	00da      	lsls	r2, r3, #3
 800d33c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d33e:	4413      	add	r3, r2
 800d340:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d344:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d346:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d348:	881b      	ldrh	r3, [r3, #0]
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d350:	b29a      	uxth	r2, r3
 800d352:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d354:	801a      	strh	r2, [r3, #0]
 800d356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d10a      	bne.n	800d374 <USB_EPStartXfer+0x87a>
 800d35e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d360:	881b      	ldrh	r3, [r3, #0]
 800d362:	b29b      	uxth	r3, r3
 800d364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d36c:	b29a      	uxth	r2, r3
 800d36e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d370:	801a      	strh	r2, [r3, #0]
 800d372:	e063      	b.n	800d43c <USB_EPStartXfer+0x942>
 800d374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d378:	2b3e      	cmp	r3, #62	@ 0x3e
 800d37a:	d81c      	bhi.n	800d3b6 <USB_EPStartXfer+0x8bc>
 800d37c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d380:	085b      	lsrs	r3, r3, #1
 800d382:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d38a:	f003 0301 	and.w	r3, r3, #1
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d004      	beq.n	800d39c <USB_EPStartXfer+0x8a2>
 800d392:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d396:	3301      	adds	r3, #1
 800d398:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d39c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d39e:	881b      	ldrh	r3, [r3, #0]
 800d3a0:	b29a      	uxth	r2, r3
 800d3a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	029b      	lsls	r3, r3, #10
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	b29a      	uxth	r2, r3
 800d3b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d3b2:	801a      	strh	r2, [r3, #0]
 800d3b4:	e042      	b.n	800d43c <USB_EPStartXfer+0x942>
 800d3b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3ba:	095b      	lsrs	r3, r3, #5
 800d3bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d3c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3c4:	f003 031f 	and.w	r3, r3, #31
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d104      	bne.n	800d3d6 <USB_EPStartXfer+0x8dc>
 800d3cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d3d0:	3b01      	subs	r3, #1
 800d3d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d3d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d3d8:	881b      	ldrh	r3, [r3, #0]
 800d3da:	b29a      	uxth	r2, r3
 800d3dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	029b      	lsls	r3, r3, #10
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3f2:	b29a      	uxth	r2, r3
 800d3f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d3f6:	801a      	strh	r2, [r3, #0]
 800d3f8:	e020      	b.n	800d43c <USB_EPStartXfer+0x942>
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	785b      	ldrb	r3, [r3, #1]
 800d3fe:	2b01      	cmp	r3, #1
 800d400:	d11c      	bne.n	800d43c <USB_EPStartXfer+0x942>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d40e:	b29b      	uxth	r3, r3
 800d410:	461a      	mov	r2, r3
 800d412:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d416:	4413      	add	r3, r2
 800d418:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	00da      	lsls	r2, r3, #3
 800d422:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d426:	4413      	add	r3, r2
 800d428:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d42c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d434:	b29a      	uxth	r2, r3
 800d436:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d43a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	891b      	ldrh	r3, [r3, #8]
 800d440:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	6959      	ldr	r1, [r3, #20]
 800d448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 fa35 	bl	800d8c2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	009b      	lsls	r3, r3, #2
 800d460:	4413      	add	r3, r2
 800d462:	881b      	ldrh	r3, [r3, #0]
 800d464:	b29b      	uxth	r3, r3
 800d466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d46a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d46e:	817b      	strh	r3, [r7, #10]
 800d470:	897b      	ldrh	r3, [r7, #10]
 800d472:	f083 0310 	eor.w	r3, r3, #16
 800d476:	817b      	strh	r3, [r7, #10]
 800d478:	897b      	ldrh	r3, [r7, #10]
 800d47a:	f083 0320 	eor.w	r3, r3, #32
 800d47e:	817b      	strh	r3, [r7, #10]
 800d480:	687a      	ldr	r2, [r7, #4]
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	441a      	add	r2, r3
 800d48a:	897b      	ldrh	r3, [r7, #10]
 800d48c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d490:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d494:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d49c:	b29b      	uxth	r3, r3
 800d49e:	8013      	strh	r3, [r2, #0]
 800d4a0:	e0d5      	b.n	800d64e <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	7b1b      	ldrb	r3, [r3, #12]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d156      	bne.n	800d558 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	699b      	ldr	r3, [r3, #24]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d122      	bne.n	800d4f8 <USB_EPStartXfer+0x9fe>
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	78db      	ldrb	r3, [r3, #3]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d11e      	bne.n	800d4f8 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	4413      	add	r3, r2
 800d4c4:	881b      	ldrh	r3, [r3, #0]
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d4cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4d0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	441a      	add	r2, r3
 800d4de:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d4e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d4e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d4ea:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d4ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	8013      	strh	r3, [r2, #0]
 800d4f6:	e01d      	b.n	800d534 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800d4f8:	687a      	ldr	r2, [r7, #4]
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	009b      	lsls	r3, r3, #2
 800d500:	4413      	add	r3, r2
 800d502:	881b      	ldrh	r3, [r3, #0]
 800d504:	b29b      	uxth	r3, r3
 800d506:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d50a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d50e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	441a      	add	r2, r3
 800d51c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800d520:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d524:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d528:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d52c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d530:	b29b      	uxth	r3, r3
 800d532:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	699a      	ldr	r2, [r3, #24]
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	691b      	ldr	r3, [r3, #16]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d907      	bls.n	800d550 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	699a      	ldr	r2, [r3, #24]
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	691b      	ldr	r3, [r3, #16]
 800d548:	1ad2      	subs	r2, r2, r3
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	619a      	str	r2, [r3, #24]
 800d54e:	e054      	b.n	800d5fa <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	2200      	movs	r2, #0
 800d554:	619a      	str	r2, [r3, #24]
 800d556:	e050      	b.n	800d5fa <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	78db      	ldrb	r3, [r3, #3]
 800d55c:	2b02      	cmp	r3, #2
 800d55e:	d142      	bne.n	800d5e6 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	69db      	ldr	r3, [r3, #28]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d048      	beq.n	800d5fa <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	009b      	lsls	r3, r3, #2
 800d570:	4413      	add	r3, r2
 800d572:	881b      	ldrh	r3, [r3, #0]
 800d574:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d578:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d57c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d580:	2b00      	cmp	r3, #0
 800d582:	d005      	beq.n	800d590 <USB_EPStartXfer+0xa96>
 800d584:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d10b      	bne.n	800d5a8 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d590:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d594:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d12e      	bne.n	800d5fa <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d59c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d5a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d128      	bne.n	800d5fa <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d5a8:	687a      	ldr	r2, [r7, #4]
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	009b      	lsls	r3, r3, #2
 800d5b0:	4413      	add	r3, r2
 800d5b2:	881b      	ldrh	r3, [r3, #0]
 800d5b4:	b29b      	uxth	r3, r3
 800d5b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d5ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d5be:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	009b      	lsls	r3, r3, #2
 800d5ca:	441a      	add	r2, r3
 800d5cc:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800d5d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d5d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d5d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d5dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	8013      	strh	r3, [r2, #0]
 800d5e4:	e009      	b.n	800d5fa <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	78db      	ldrb	r3, [r3, #3]
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	d103      	bne.n	800d5f6 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	619a      	str	r2, [r3, #24]
 800d5f4:	e001      	b.n	800d5fa <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	e02a      	b.n	800d650 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	4413      	add	r3, r2
 800d604:	881b      	ldrh	r3, [r3, #0]
 800d606:	b29b      	uxth	r3, r3
 800d608:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d60c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d610:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d614:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d618:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d61c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d620:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d624:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d628:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d62c:	687a      	ldr	r2, [r7, #4]
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	441a      	add	r2, r3
 800d636:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d63a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d63e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d642:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d64e:	2300      	movs	r3, #0
}
 800d650:	4618      	mov	r0, r3
 800d652:	37b0      	adds	r7, #176	@ 0xb0
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	785b      	ldrb	r3, [r3, #1]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d020      	beq.n	800d6ac <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d66a:	687a      	ldr	r2, [r7, #4]
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	4413      	add	r3, r2
 800d674:	881b      	ldrh	r3, [r3, #0]
 800d676:	b29b      	uxth	r3, r3
 800d678:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d67c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d680:	81bb      	strh	r3, [r7, #12]
 800d682:	89bb      	ldrh	r3, [r7, #12]
 800d684:	f083 0310 	eor.w	r3, r3, #16
 800d688:	81bb      	strh	r3, [r7, #12]
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	009b      	lsls	r3, r3, #2
 800d692:	441a      	add	r2, r3
 800d694:	89bb      	ldrh	r3, [r7, #12]
 800d696:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d69a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d69e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	8013      	strh	r3, [r2, #0]
 800d6aa:	e01f      	b.n	800d6ec <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	009b      	lsls	r3, r3, #2
 800d6b4:	4413      	add	r3, r2
 800d6b6:	881b      	ldrh	r3, [r3, #0]
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d6be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6c2:	81fb      	strh	r3, [r7, #14]
 800d6c4:	89fb      	ldrh	r3, [r7, #14]
 800d6c6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d6ca:	81fb      	strh	r3, [r7, #14]
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	441a      	add	r2, r3
 800d6d6:	89fb      	ldrh	r3, [r7, #14]
 800d6d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d6ec:	2300      	movs	r3, #0
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3714      	adds	r7, #20
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr

0800d6fa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d6fa:	b480      	push	{r7}
 800d6fc:	b087      	sub	sp, #28
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
 800d702:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	785b      	ldrb	r3, [r3, #1]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d04c      	beq.n	800d7a6 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	4413      	add	r3, r2
 800d716:	881b      	ldrh	r3, [r3, #0]
 800d718:	823b      	strh	r3, [r7, #16]
 800d71a:	8a3b      	ldrh	r3, [r7, #16]
 800d71c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d720:	2b00      	cmp	r3, #0
 800d722:	d01b      	beq.n	800d75c <USB_EPClearStall+0x62>
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	4413      	add	r3, r2
 800d72e:	881b      	ldrh	r3, [r3, #0]
 800d730:	b29b      	uxth	r3, r3
 800d732:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d73a:	81fb      	strh	r3, [r7, #14]
 800d73c:	687a      	ldr	r2, [r7, #4]
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	441a      	add	r2, r3
 800d746:	89fb      	ldrh	r3, [r7, #14]
 800d748:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d74c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d750:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d754:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d758:	b29b      	uxth	r3, r3
 800d75a:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	78db      	ldrb	r3, [r3, #3]
 800d760:	2b01      	cmp	r3, #1
 800d762:	d06c      	beq.n	800d83e <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d764:	687a      	ldr	r2, [r7, #4]
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	4413      	add	r3, r2
 800d76e:	881b      	ldrh	r3, [r3, #0]
 800d770:	b29b      	uxth	r3, r3
 800d772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d776:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d77a:	81bb      	strh	r3, [r7, #12]
 800d77c:	89bb      	ldrh	r3, [r7, #12]
 800d77e:	f083 0320 	eor.w	r3, r3, #32
 800d782:	81bb      	strh	r3, [r7, #12]
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	009b      	lsls	r3, r3, #2
 800d78c:	441a      	add	r2, r3
 800d78e:	89bb      	ldrh	r3, [r7, #12]
 800d790:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d794:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d798:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d79c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	8013      	strh	r3, [r2, #0]
 800d7a4:	e04b      	b.n	800d83e <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	4413      	add	r3, r2
 800d7b0:	881b      	ldrh	r3, [r3, #0]
 800d7b2:	82fb      	strh	r3, [r7, #22]
 800d7b4:	8afb      	ldrh	r3, [r7, #22]
 800d7b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d01b      	beq.n	800d7f6 <USB_EPClearStall+0xfc>
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	009b      	lsls	r3, r3, #2
 800d7c6:	4413      	add	r3, r2
 800d7c8:	881b      	ldrh	r3, [r3, #0]
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d7d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7d4:	82bb      	strh	r3, [r7, #20]
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	009b      	lsls	r3, r3, #2
 800d7de:	441a      	add	r2, r3
 800d7e0:	8abb      	ldrh	r3, [r7, #20]
 800d7e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d7ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d7f6:	687a      	ldr	r2, [r7, #4]
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	4413      	add	r3, r2
 800d800:	881b      	ldrh	r3, [r3, #0]
 800d802:	b29b      	uxth	r3, r3
 800d804:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d80c:	827b      	strh	r3, [r7, #18]
 800d80e:	8a7b      	ldrh	r3, [r7, #18]
 800d810:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d814:	827b      	strh	r3, [r7, #18]
 800d816:	8a7b      	ldrh	r3, [r7, #18]
 800d818:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d81c:	827b      	strh	r3, [r7, #18]
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	441a      	add	r2, r3
 800d828:	8a7b      	ldrh	r3, [r7, #18]
 800d82a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d82e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d83e:	2300      	movs	r3, #0
}
 800d840:	4618      	mov	r0, r3
 800d842:	371c      	adds	r7, #28
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr

0800d84c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	460b      	mov	r3, r1
 800d856:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d858:	78fb      	ldrb	r3, [r7, #3]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d103      	bne.n	800d866 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2280      	movs	r2, #128	@ 0x80
 800d862:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d866:	2300      	movs	r3, #0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	370c      	adds	r7, #12
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr

0800d874 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d882:	b29b      	uxth	r3, r3
 800d884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d894:	2300      	movs	r3, #0
}
 800d896:	4618      	mov	r0, r3
 800d898:	370c      	adds	r7, #12
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr

0800d8a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800d8a2:	b480      	push	{r7}
 800d8a4:	b085      	sub	sp, #20
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3714      	adds	r7, #20
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr

0800d8c2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d8c2:	b480      	push	{r7}
 800d8c4:	b08b      	sub	sp, #44	@ 0x2c
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	60f8      	str	r0, [r7, #12]
 800d8ca:	60b9      	str	r1, [r7, #8]
 800d8cc:	4611      	mov	r1, r2
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	460b      	mov	r3, r1
 800d8d2:	80fb      	strh	r3, [r7, #6]
 800d8d4:	4613      	mov	r3, r2
 800d8d6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d8d8:	88bb      	ldrh	r3, [r7, #4]
 800d8da:	3301      	adds	r3, #1
 800d8dc:	085b      	lsrs	r3, r3, #1
 800d8de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d8e8:	88fa      	ldrh	r2, [r7, #6]
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d8f2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d8f4:	69bb      	ldr	r3, [r7, #24]
 800d8f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8f8:	e01b      	b.n	800d932 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	3301      	adds	r3, #1
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	021b      	lsls	r3, r3, #8
 800d908:	b21a      	sxth	r2, r3
 800d90a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d90e:	4313      	orrs	r3, r2
 800d910:	b21b      	sxth	r3, r3
 800d912:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d914:	6a3b      	ldr	r3, [r7, #32]
 800d916:	8a7a      	ldrh	r2, [r7, #18]
 800d918:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d91a:	6a3b      	ldr	r3, [r7, #32]
 800d91c:	3302      	adds	r3, #2
 800d91e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d920:	69fb      	ldr	r3, [r7, #28]
 800d922:	3301      	adds	r3, #1
 800d924:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d926:	69fb      	ldr	r3, [r7, #28]
 800d928:	3301      	adds	r3, #1
 800d92a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d92e:	3b01      	subs	r3, #1
 800d930:	627b      	str	r3, [r7, #36]	@ 0x24
 800d932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d934:	2b00      	cmp	r3, #0
 800d936:	d1e0      	bne.n	800d8fa <USB_WritePMA+0x38>
  }
}
 800d938:	bf00      	nop
 800d93a:	bf00      	nop
 800d93c:	372c      	adds	r7, #44	@ 0x2c
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr

0800d946 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d946:	b480      	push	{r7}
 800d948:	b08b      	sub	sp, #44	@ 0x2c
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	60f8      	str	r0, [r7, #12]
 800d94e:	60b9      	str	r1, [r7, #8]
 800d950:	4611      	mov	r1, r2
 800d952:	461a      	mov	r2, r3
 800d954:	460b      	mov	r3, r1
 800d956:	80fb      	strh	r3, [r7, #6]
 800d958:	4613      	mov	r3, r2
 800d95a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d95c:	88bb      	ldrh	r3, [r7, #4]
 800d95e:	085b      	lsrs	r3, r3, #1
 800d960:	b29b      	uxth	r3, r3
 800d962:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d96c:	88fa      	ldrh	r2, [r7, #6]
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	4413      	add	r3, r2
 800d972:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d976:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d978:	69bb      	ldr	r3, [r7, #24]
 800d97a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d97c:	e018      	b.n	800d9b0 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d97e:	6a3b      	ldr	r3, [r7, #32]
 800d980:	881b      	ldrh	r3, [r3, #0]
 800d982:	b29b      	uxth	r3, r3
 800d984:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d986:	6a3b      	ldr	r3, [r7, #32]
 800d988:	3302      	adds	r3, #2
 800d98a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	b2da      	uxtb	r2, r3
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d994:	69fb      	ldr	r3, [r7, #28]
 800d996:	3301      	adds	r3, #1
 800d998:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	0a1b      	lsrs	r3, r3, #8
 800d99e:	b2da      	uxtb	r2, r3
 800d9a0:	69fb      	ldr	r3, [r7, #28]
 800d9a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d9a4:	69fb      	ldr	r3, [r7, #28]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ac:	3b01      	subs	r3, #1
 800d9ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d1e3      	bne.n	800d97e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d9b6:	88bb      	ldrh	r3, [r7, #4]
 800d9b8:	f003 0301 	and.w	r3, r3, #1
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d007      	beq.n	800d9d2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d9c2:	6a3b      	ldr	r3, [r7, #32]
 800d9c4:	881b      	ldrh	r3, [r3, #0]
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	b2da      	uxtb	r2, r3
 800d9ce:	69fb      	ldr	r3, [r7, #28]
 800d9d0:	701a      	strb	r2, [r3, #0]
  }
}
 800d9d2:	bf00      	nop
 800d9d4:	372c      	adds	r7, #44	@ 0x2c
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr

0800d9de <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d9de:	b580      	push	{r7, lr}
 800d9e0:	b084      	sub	sp, #16
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d9ea:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d9ee:	f002 f8a3 	bl	800fb38 <USBD_static_malloc>
 800d9f2:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d105      	bne.n	800da06 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800da02:	2302      	movs	r3, #2
 800da04:	e066      	b.n	800dad4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	68fa      	ldr	r2, [r7, #12]
 800da0a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	7c1b      	ldrb	r3, [r3, #16]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d119      	bne.n	800da4a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800da16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800da1a:	2202      	movs	r2, #2
 800da1c:	2181      	movs	r1, #129	@ 0x81
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f001 ff31 	bl	800f886 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2201      	movs	r2, #1
 800da28:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800da2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800da2e:	2202      	movs	r2, #2
 800da30:	2101      	movs	r1, #1
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f001 ff27 	bl	800f886 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2201      	movs	r2, #1
 800da3c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2210      	movs	r2, #16
 800da44:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800da48:	e016      	b.n	800da78 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800da4a:	2340      	movs	r3, #64	@ 0x40
 800da4c:	2202      	movs	r2, #2
 800da4e:	2181      	movs	r1, #129	@ 0x81
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f001 ff18 	bl	800f886 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2201      	movs	r2, #1
 800da5a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800da5c:	2340      	movs	r3, #64	@ 0x40
 800da5e:	2202      	movs	r2, #2
 800da60:	2101      	movs	r1, #1
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f001 ff0f 	bl	800f886 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2201      	movs	r2, #1
 800da6c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2210      	movs	r2, #16
 800da74:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800da78:	2308      	movs	r3, #8
 800da7a:	2203      	movs	r2, #3
 800da7c:	2182      	movs	r1, #130	@ 0x82
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f001 ff01 	bl	800f886 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2201      	movs	r2, #1
 800da88:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2200      	movs	r2, #0
 800da9a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2200      	movs	r2, #0
 800daa2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	7c1b      	ldrb	r3, [r3, #16]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d109      	bne.n	800dac2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dab4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dab8:	2101      	movs	r1, #1
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f001 ffd2 	bl	800fa64 <USBD_LL_PrepareReceive>
 800dac0:	e007      	b.n	800dad2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dac8:	2340      	movs	r3, #64	@ 0x40
 800daca:	2101      	movs	r1, #1
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f001 ffc9 	bl	800fa64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dad2:	2300      	movs	r3, #0
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3710      	adds	r7, #16
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	460b      	mov	r3, r1
 800dae6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800dae8:	2181      	movs	r1, #129	@ 0x81
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f001 fef1 	bl	800f8d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2200      	movs	r2, #0
 800daf4:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800daf6:	2101      	movs	r1, #1
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f001 feea 	bl	800f8d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800db06:	2182      	movs	r1, #130	@ 0x82
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f001 fee2 	bl	800f8d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2200      	movs	r2, #0
 800db12:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2200      	movs	r2, #0
 800db1a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800db24:	2b00      	cmp	r3, #0
 800db26:	d00e      	beq.n	800db46 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800db38:	4618      	mov	r0, r3
 800db3a:	f002 f80b 	bl	800fb54 <USBD_static_free>
    pdev->pClassData = NULL;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2200      	movs	r2, #0
 800db42:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800db46:	2300      	movs	r3, #0
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3708      	adds	r7, #8
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b086      	sub	sp, #24
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800db60:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800db62:	2300      	movs	r3, #0
 800db64:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800db66:	2300      	movs	r3, #0
 800db68:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800db6a:	2300      	movs	r3, #0
 800db6c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d101      	bne.n	800db78 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800db74:	2303      	movs	r3, #3
 800db76:	e0af      	b.n	800dcd8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800db80:	2b00      	cmp	r3, #0
 800db82:	d03f      	beq.n	800dc04 <USBD_CDC_Setup+0xb4>
 800db84:	2b20      	cmp	r3, #32
 800db86:	f040 809f 	bne.w	800dcc8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	88db      	ldrh	r3, [r3, #6]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d02e      	beq.n	800dbf0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	b25b      	sxtb	r3, r3
 800db98:	2b00      	cmp	r3, #0
 800db9a:	da16      	bge.n	800dbca <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dba2:	689b      	ldr	r3, [r3, #8]
 800dba4:	683a      	ldr	r2, [r7, #0]
 800dba6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800dba8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dbaa:	683a      	ldr	r2, [r7, #0]
 800dbac:	88d2      	ldrh	r2, [r2, #6]
 800dbae:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	88db      	ldrh	r3, [r3, #6]
 800dbb4:	2b07      	cmp	r3, #7
 800dbb6:	bf28      	it	cs
 800dbb8:	2307      	movcs	r3, #7
 800dbba:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	89fa      	ldrh	r2, [r7, #14]
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f001 fa9d 	bl	800f102 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800dbc8:	e085      	b.n	800dcd6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	785a      	ldrb	r2, [r3, #1]
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	88db      	ldrh	r3, [r3, #6]
 800dbd8:	b2da      	uxtb	r2, r3
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800dbe0:	6939      	ldr	r1, [r7, #16]
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	88db      	ldrh	r3, [r3, #6]
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f001 fab6 	bl	800f15a <USBD_CtlPrepareRx>
      break;
 800dbee:	e072      	b.n	800dcd6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	683a      	ldr	r2, [r7, #0]
 800dbfa:	7850      	ldrb	r0, [r2, #1]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	6839      	ldr	r1, [r7, #0]
 800dc00:	4798      	blx	r3
      break;
 800dc02:	e068      	b.n	800dcd6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	785b      	ldrb	r3, [r3, #1]
 800dc08:	2b0b      	cmp	r3, #11
 800dc0a:	d852      	bhi.n	800dcb2 <USBD_CDC_Setup+0x162>
 800dc0c:	a201      	add	r2, pc, #4	@ (adr r2, 800dc14 <USBD_CDC_Setup+0xc4>)
 800dc0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc12:	bf00      	nop
 800dc14:	0800dc45 	.word	0x0800dc45
 800dc18:	0800dcc1 	.word	0x0800dcc1
 800dc1c:	0800dcb3 	.word	0x0800dcb3
 800dc20:	0800dcb3 	.word	0x0800dcb3
 800dc24:	0800dcb3 	.word	0x0800dcb3
 800dc28:	0800dcb3 	.word	0x0800dcb3
 800dc2c:	0800dcb3 	.word	0x0800dcb3
 800dc30:	0800dcb3 	.word	0x0800dcb3
 800dc34:	0800dcb3 	.word	0x0800dcb3
 800dc38:	0800dcb3 	.word	0x0800dcb3
 800dc3c:	0800dc6f 	.word	0x0800dc6f
 800dc40:	0800dc99 	.word	0x0800dc99
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	2b03      	cmp	r3, #3
 800dc4e:	d107      	bne.n	800dc60 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dc50:	f107 030a 	add.w	r3, r7, #10
 800dc54:	2202      	movs	r2, #2
 800dc56:	4619      	mov	r1, r3
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f001 fa52 	bl	800f102 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dc5e:	e032      	b.n	800dcc6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800dc60:	6839      	ldr	r1, [r7, #0]
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f001 f9dc 	bl	800f020 <USBD_CtlError>
            ret = USBD_FAIL;
 800dc68:	2303      	movs	r3, #3
 800dc6a:	75fb      	strb	r3, [r7, #23]
          break;
 800dc6c:	e02b      	b.n	800dcc6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	2b03      	cmp	r3, #3
 800dc78:	d107      	bne.n	800dc8a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800dc7a:	f107 030d 	add.w	r3, r7, #13
 800dc7e:	2201      	movs	r2, #1
 800dc80:	4619      	mov	r1, r3
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f001 fa3d 	bl	800f102 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dc88:	e01d      	b.n	800dcc6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800dc8a:	6839      	ldr	r1, [r7, #0]
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f001 f9c7 	bl	800f020 <USBD_CtlError>
            ret = USBD_FAIL;
 800dc92:	2303      	movs	r3, #3
 800dc94:	75fb      	strb	r3, [r7, #23]
          break;
 800dc96:	e016      	b.n	800dcc6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	2b03      	cmp	r3, #3
 800dca2:	d00f      	beq.n	800dcc4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800dca4:	6839      	ldr	r1, [r7, #0]
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f001 f9ba 	bl	800f020 <USBD_CtlError>
            ret = USBD_FAIL;
 800dcac:	2303      	movs	r3, #3
 800dcae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dcb0:	e008      	b.n	800dcc4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800dcb2:	6839      	ldr	r1, [r7, #0]
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f001 f9b3 	bl	800f020 <USBD_CtlError>
          ret = USBD_FAIL;
 800dcba:	2303      	movs	r3, #3
 800dcbc:	75fb      	strb	r3, [r7, #23]
          break;
 800dcbe:	e002      	b.n	800dcc6 <USBD_CDC_Setup+0x176>
          break;
 800dcc0:	bf00      	nop
 800dcc2:	e008      	b.n	800dcd6 <USBD_CDC_Setup+0x186>
          break;
 800dcc4:	bf00      	nop
      }
      break;
 800dcc6:	e006      	b.n	800dcd6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800dcc8:	6839      	ldr	r1, [r7, #0]
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f001 f9a8 	bl	800f020 <USBD_CtlError>
      ret = USBD_FAIL;
 800dcd0:	2303      	movs	r3, #3
 800dcd2:	75fb      	strb	r3, [r7, #23]
      break;
 800dcd4:	bf00      	nop
  }

  return (uint8_t)ret;
 800dcd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3718      	adds	r7, #24
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	460b      	mov	r3, r1
 800dcea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dcf2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d101      	bne.n	800dd02 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dcfe:	2303      	movs	r3, #3
 800dd00:	e04f      	b.n	800dda2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dd08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dd0a:	78fa      	ldrb	r2, [r7, #3]
 800dd0c:	6879      	ldr	r1, [r7, #4]
 800dd0e:	4613      	mov	r3, r2
 800dd10:	009b      	lsls	r3, r3, #2
 800dd12:	4413      	add	r3, r2
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	440b      	add	r3, r1
 800dd18:	3318      	adds	r3, #24
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d029      	beq.n	800dd74 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800dd20:	78fa      	ldrb	r2, [r7, #3]
 800dd22:	6879      	ldr	r1, [r7, #4]
 800dd24:	4613      	mov	r3, r2
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	4413      	add	r3, r2
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	440b      	add	r3, r1
 800dd2e:	3318      	adds	r3, #24
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	78f9      	ldrb	r1, [r7, #3]
 800dd34:	68f8      	ldr	r0, [r7, #12]
 800dd36:	460b      	mov	r3, r1
 800dd38:	009b      	lsls	r3, r3, #2
 800dd3a:	440b      	add	r3, r1
 800dd3c:	00db      	lsls	r3, r3, #3
 800dd3e:	4403      	add	r3, r0
 800dd40:	3320      	adds	r3, #32
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	fbb2 f1f3 	udiv	r1, r2, r3
 800dd48:	fb01 f303 	mul.w	r3, r1, r3
 800dd4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d110      	bne.n	800dd74 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800dd52:	78fa      	ldrb	r2, [r7, #3]
 800dd54:	6879      	ldr	r1, [r7, #4]
 800dd56:	4613      	mov	r3, r2
 800dd58:	009b      	lsls	r3, r3, #2
 800dd5a:	4413      	add	r3, r2
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	440b      	add	r3, r1
 800dd60:	3318      	adds	r3, #24
 800dd62:	2200      	movs	r2, #0
 800dd64:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dd66:	78f9      	ldrb	r1, [r7, #3]
 800dd68:	2300      	movs	r3, #0
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f001 fe58 	bl	800fa22 <USBD_LL_Transmit>
 800dd72:	e015      	b.n	800dda0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	2200      	movs	r2, #0
 800dd78:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dd82:	691b      	ldr	r3, [r3, #16]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d00b      	beq.n	800dda0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dd8e:	691b      	ldr	r3, [r3, #16]
 800dd90:	68ba      	ldr	r2, [r7, #8]
 800dd92:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800dd96:	68ba      	ldr	r2, [r7, #8]
 800dd98:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800dd9c:	78fa      	ldrb	r2, [r7, #3]
 800dd9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800dda0:	2300      	movs	r3, #0
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3710      	adds	r7, #16
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}

0800ddaa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ddaa:	b580      	push	{r7, lr}
 800ddac:	b084      	sub	sp, #16
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	6078      	str	r0, [r7, #4]
 800ddb2:	460b      	mov	r3, r1
 800ddb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ddbc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d101      	bne.n	800ddcc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ddc8:	2303      	movs	r3, #3
 800ddca:	e015      	b.n	800ddf8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ddcc:	78fb      	ldrb	r3, [r7, #3]
 800ddce:	4619      	mov	r1, r3
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f001 fe68 	bl	800faa6 <USBD_LL_GetRxDataSize>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	68fa      	ldr	r2, [r7, #12]
 800dde8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ddec:	68fa      	ldr	r2, [r7, #12]
 800ddee:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ddf2:	4611      	mov	r1, r2
 800ddf4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ddf6:	2300      	movs	r3, #0
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3710      	adds	r7, #16
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b084      	sub	sp, #16
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800de0e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d101      	bne.n	800de1a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800de16:	2303      	movs	r3, #3
 800de18:	e01a      	b.n	800de50 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800de20:	2b00      	cmp	r3, #0
 800de22:	d014      	beq.n	800de4e <USBD_CDC_EP0_RxReady+0x4e>
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800de2a:	2bff      	cmp	r3, #255	@ 0xff
 800de2c:	d00f      	beq.n	800de4e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800de34:	689b      	ldr	r3, [r3, #8]
 800de36:	68fa      	ldr	r2, [r7, #12]
 800de38:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800de3c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800de3e:	68fa      	ldr	r2, [r7, #12]
 800de40:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800de44:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	22ff      	movs	r2, #255	@ 0xff
 800de4a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800de4e:	2300      	movs	r3, #0
}
 800de50:	4618      	mov	r0, r3
 800de52:	3710      	adds	r7, #16
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800de58:	b480      	push	{r7}
 800de5a:	b083      	sub	sp, #12
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2243      	movs	r2, #67	@ 0x43
 800de64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800de66:	4b03      	ldr	r3, [pc, #12]	@ (800de74 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800de68:	4618      	mov	r0, r3
 800de6a:	370c      	adds	r7, #12
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr
 800de74:	20000098 	.word	0x20000098

0800de78 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800de78:	b480      	push	{r7}
 800de7a:	b083      	sub	sp, #12
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2243      	movs	r2, #67	@ 0x43
 800de84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800de86:	4b03      	ldr	r3, [pc, #12]	@ (800de94 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800de88:	4618      	mov	r0, r3
 800de8a:	370c      	adds	r7, #12
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr
 800de94:	20000054 	.word	0x20000054

0800de98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2243      	movs	r2, #67	@ 0x43
 800dea4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800dea6:	4b03      	ldr	r3, [pc, #12]	@ (800deb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	370c      	adds	r7, #12
 800deac:	46bd      	mov	sp, r7
 800deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb2:	4770      	bx	lr
 800deb4:	200000dc 	.word	0x200000dc

0800deb8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800deb8:	b480      	push	{r7}
 800deba:	b083      	sub	sp, #12
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	220a      	movs	r2, #10
 800dec4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800dec6:	4b03      	ldr	r3, [pc, #12]	@ (800ded4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dec8:	4618      	mov	r0, r3
 800deca:	370c      	adds	r7, #12
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr
 800ded4:	20000010 	.word	0x20000010

0800ded8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ded8:	b480      	push	{r7}
 800deda:	b083      	sub	sp, #12
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d101      	bne.n	800deec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dee8:	2303      	movs	r3, #3
 800deea:	e004      	b.n	800def6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	683a      	ldr	r2, [r7, #0]
 800def0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800def4:	2300      	movs	r3, #0
}
 800def6:	4618      	mov	r0, r3
 800def8:	370c      	adds	r7, #12
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr

0800df02 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800df02:	b480      	push	{r7}
 800df04:	b087      	sub	sp, #28
 800df06:	af00      	add	r7, sp, #0
 800df08:	60f8      	str	r0, [r7, #12]
 800df0a:	60b9      	str	r1, [r7, #8]
 800df0c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800df14:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d101      	bne.n	800df20 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800df1c:	2303      	movs	r3, #3
 800df1e:	e008      	b.n	800df32 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	68ba      	ldr	r2, [r7, #8]
 800df24:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800df30:	2300      	movs	r3, #0
}
 800df32:	4618      	mov	r0, r3
 800df34:	371c      	adds	r7, #28
 800df36:	46bd      	mov	sp, r7
 800df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3c:	4770      	bx	lr

0800df3e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800df3e:	b480      	push	{r7}
 800df40:	b085      	sub	sp, #20
 800df42:	af00      	add	r7, sp, #0
 800df44:	6078      	str	r0, [r7, #4]
 800df46:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800df4e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d101      	bne.n	800df5a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800df56:	2303      	movs	r3, #3
 800df58:	e004      	b.n	800df64 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	683a      	ldr	r2, [r7, #0]
 800df5e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800df62:	2300      	movs	r3, #0
}
 800df64:	4618      	mov	r0, r3
 800df66:	3714      	adds	r7, #20
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr

0800df70 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800df7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800df86:	2b00      	cmp	r3, #0
 800df88:	d101      	bne.n	800df8e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800df8a:	2303      	movs	r3, #3
 800df8c:	e016      	b.n	800dfbc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	7c1b      	ldrb	r3, [r3, #16]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d109      	bne.n	800dfaa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800df9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dfa0:	2101      	movs	r1, #1
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f001 fd5e 	bl	800fa64 <USBD_LL_PrepareReceive>
 800dfa8:	e007      	b.n	800dfba <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dfb0:	2340      	movs	r3, #64	@ 0x40
 800dfb2:	2101      	movs	r1, #1
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f001 fd55 	bl	800fa64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dfba:	2300      	movs	r3, #0
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3710      	adds	r7, #16
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b086      	sub	sp, #24
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	4613      	mov	r3, r2
 800dfd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d101      	bne.n	800dfdc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800dfd8:	2303      	movs	r3, #3
 800dfda:	e01f      	b.n	800e01c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	2200      	movs	r2, #0
 800dff0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d003      	beq.n	800e002 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	68ba      	ldr	r2, [r7, #8]
 800dffe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2201      	movs	r2, #1
 800e006:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	79fa      	ldrb	r2, [r7, #7]
 800e00e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e010:	68f8      	ldr	r0, [r7, #12]
 800e012:	f001 fbbd 	bl	800f790 <USBD_LL_Init>
 800e016:	4603      	mov	r3, r0
 800e018:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e01a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3718      	adds	r7, #24
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e02e:	2300      	movs	r3, #0
 800e030:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d101      	bne.n	800e03c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e038:	2303      	movs	r3, #3
 800e03a:	e016      	b.n	800e06a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	683a      	ldr	r2, [r7, #0]
 800e040:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e04a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d00b      	beq.n	800e068 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e058:	f107 020e 	add.w	r2, r7, #14
 800e05c:	4610      	mov	r0, r2
 800e05e:	4798      	blx	r3
 800e060:	4602      	mov	r2, r0
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e068:	2300      	movs	r3, #0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3710      	adds	r7, #16
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e072:	b580      	push	{r7, lr}
 800e074:	b082      	sub	sp, #8
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f001 fbe8 	bl	800f850 <USBD_LL_Start>
 800e080:	4603      	mov	r3, r0
}
 800e082:	4618      	mov	r0, r3
 800e084:	3708      	adds	r7, #8
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}

0800e08a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e08a:	b480      	push	{r7}
 800e08c:	b083      	sub	sp, #12
 800e08e:	af00      	add	r7, sp, #0
 800e090:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e092:	2300      	movs	r3, #0
}
 800e094:	4618      	mov	r0, r3
 800e096:	370c      	adds	r7, #12
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr

0800e0a0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e0ac:	2303      	movs	r3, #3
 800e0ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d009      	beq.n	800e0ce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	78fa      	ldrb	r2, [r7, #3]
 800e0c4:	4611      	mov	r1, r2
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	4798      	blx	r3
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e0ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3710      	adds	r7, #16
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}

0800e0d8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	460b      	mov	r3, r1
 800e0e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d007      	beq.n	800e0fe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	78fa      	ldrb	r2, [r7, #3]
 800e0f8:	4611      	mov	r1, r2
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	4798      	blx	r3
  }

  return USBD_OK;
 800e0fe:	2300      	movs	r3, #0
}
 800e100:	4618      	mov	r0, r3
 800e102:	3708      	adds	r7, #8
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e118:	6839      	ldr	r1, [r7, #0]
 800e11a:	4618      	mov	r0, r3
 800e11c:	f000 ff46 	bl	800efac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2201      	movs	r2, #1
 800e124:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e12e:	461a      	mov	r2, r3
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e13c:	f003 031f 	and.w	r3, r3, #31
 800e140:	2b02      	cmp	r3, #2
 800e142:	d01a      	beq.n	800e17a <USBD_LL_SetupStage+0x72>
 800e144:	2b02      	cmp	r3, #2
 800e146:	d822      	bhi.n	800e18e <USBD_LL_SetupStage+0x86>
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d002      	beq.n	800e152 <USBD_LL_SetupStage+0x4a>
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	d00a      	beq.n	800e166 <USBD_LL_SetupStage+0x5e>
 800e150:	e01d      	b.n	800e18e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e158:	4619      	mov	r1, r3
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f000 f9ee 	bl	800e53c <USBD_StdDevReq>
 800e160:	4603      	mov	r3, r0
 800e162:	73fb      	strb	r3, [r7, #15]
      break;
 800e164:	e020      	b.n	800e1a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e16c:	4619      	mov	r1, r3
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f000 fa52 	bl	800e618 <USBD_StdItfReq>
 800e174:	4603      	mov	r3, r0
 800e176:	73fb      	strb	r3, [r7, #15]
      break;
 800e178:	e016      	b.n	800e1a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e180:	4619      	mov	r1, r3
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f000 fa91 	bl	800e6aa <USBD_StdEPReq>
 800e188:	4603      	mov	r3, r0
 800e18a:	73fb      	strb	r3, [r7, #15]
      break;
 800e18c:	e00c      	b.n	800e1a8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e194:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	4619      	mov	r1, r3
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f001 fbb7 	bl	800f910 <USBD_LL_StallEP>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	73fb      	strb	r3, [r7, #15]
      break;
 800e1a6:	bf00      	nop
  }

  return ret;
 800e1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3710      	adds	r7, #16
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}

0800e1b2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e1b2:	b580      	push	{r7, lr}
 800e1b4:	b086      	sub	sp, #24
 800e1b6:	af00      	add	r7, sp, #0
 800e1b8:	60f8      	str	r0, [r7, #12]
 800e1ba:	460b      	mov	r3, r1
 800e1bc:	607a      	str	r2, [r7, #4]
 800e1be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e1c0:	7afb      	ldrb	r3, [r7, #11]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d138      	bne.n	800e238 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e1cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e1d4:	2b03      	cmp	r3, #3
 800e1d6:	d14a      	bne.n	800e26e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	689a      	ldr	r2, [r3, #8]
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	68db      	ldr	r3, [r3, #12]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d913      	bls.n	800e20c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	689a      	ldr	r2, [r3, #8]
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	1ad2      	subs	r2, r2, r3
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	68da      	ldr	r2, [r3, #12]
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	689b      	ldr	r3, [r3, #8]
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	bf28      	it	cs
 800e1fe:	4613      	movcs	r3, r2
 800e200:	461a      	mov	r2, r3
 800e202:	6879      	ldr	r1, [r7, #4]
 800e204:	68f8      	ldr	r0, [r7, #12]
 800e206:	f000 ffc5 	bl	800f194 <USBD_CtlContinueRx>
 800e20a:	e030      	b.n	800e26e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e212:	b2db      	uxtb	r3, r3
 800e214:	2b03      	cmp	r3, #3
 800e216:	d10b      	bne.n	800e230 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e21e:	691b      	ldr	r3, [r3, #16]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d005      	beq.n	800e230 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e22a:	691b      	ldr	r3, [r3, #16]
 800e22c:	68f8      	ldr	r0, [r7, #12]
 800e22e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e230:	68f8      	ldr	r0, [r7, #12]
 800e232:	f000 ffc0 	bl	800f1b6 <USBD_CtlSendStatus>
 800e236:	e01a      	b.n	800e26e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	2b03      	cmp	r3, #3
 800e242:	d114      	bne.n	800e26e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e24a:	699b      	ldr	r3, [r3, #24]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d00e      	beq.n	800e26e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e256:	699b      	ldr	r3, [r3, #24]
 800e258:	7afa      	ldrb	r2, [r7, #11]
 800e25a:	4611      	mov	r1, r2
 800e25c:	68f8      	ldr	r0, [r7, #12]
 800e25e:	4798      	blx	r3
 800e260:	4603      	mov	r3, r0
 800e262:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e264:	7dfb      	ldrb	r3, [r7, #23]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d001      	beq.n	800e26e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e26a:	7dfb      	ldrb	r3, [r7, #23]
 800e26c:	e000      	b.n	800e270 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e26e:	2300      	movs	r3, #0
}
 800e270:	4618      	mov	r0, r3
 800e272:	3718      	adds	r7, #24
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b086      	sub	sp, #24
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	460b      	mov	r3, r1
 800e282:	607a      	str	r2, [r7, #4]
 800e284:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e286:	7afb      	ldrb	r3, [r7, #11]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d16b      	bne.n	800e364 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	3314      	adds	r3, #20
 800e290:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e298:	2b02      	cmp	r3, #2
 800e29a:	d156      	bne.n	800e34a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	689a      	ldr	r2, [r3, #8]
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d914      	bls.n	800e2d2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	689a      	ldr	r2, [r3, #8]
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	1ad2      	subs	r2, r2, r3
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	689b      	ldr	r3, [r3, #8]
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	6879      	ldr	r1, [r7, #4]
 800e2be:	68f8      	ldr	r0, [r7, #12]
 800e2c0:	f000 ff3a 	bl	800f138 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	2100      	movs	r1, #0
 800e2ca:	68f8      	ldr	r0, [r7, #12]
 800e2cc:	f001 fbca 	bl	800fa64 <USBD_LL_PrepareReceive>
 800e2d0:	e03b      	b.n	800e34a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	68da      	ldr	r2, [r3, #12]
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	689b      	ldr	r3, [r3, #8]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d11c      	bne.n	800e318 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	685a      	ldr	r2, [r3, #4]
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d316      	bcc.n	800e318 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	685a      	ldr	r2, [r3, #4]
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d20f      	bcs.n	800e318 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	2100      	movs	r1, #0
 800e2fc:	68f8      	ldr	r0, [r7, #12]
 800e2fe:	f000 ff1b 	bl	800f138 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2200      	movs	r2, #0
 800e306:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e30a:	2300      	movs	r3, #0
 800e30c:	2200      	movs	r2, #0
 800e30e:	2100      	movs	r1, #0
 800e310:	68f8      	ldr	r0, [r7, #12]
 800e312:	f001 fba7 	bl	800fa64 <USBD_LL_PrepareReceive>
 800e316:	e018      	b.n	800e34a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e31e:	b2db      	uxtb	r3, r3
 800e320:	2b03      	cmp	r3, #3
 800e322:	d10b      	bne.n	800e33c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e32a:	68db      	ldr	r3, [r3, #12]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d005      	beq.n	800e33c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e336:	68db      	ldr	r3, [r3, #12]
 800e338:	68f8      	ldr	r0, [r7, #12]
 800e33a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e33c:	2180      	movs	r1, #128	@ 0x80
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	f001 fae6 	bl	800f910 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e344:	68f8      	ldr	r0, [r7, #12]
 800e346:	f000 ff49 	bl	800f1dc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e350:	2b01      	cmp	r3, #1
 800e352:	d122      	bne.n	800e39a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	f7ff fe98 	bl	800e08a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2200      	movs	r2, #0
 800e35e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e362:	e01a      	b.n	800e39a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e36a:	b2db      	uxtb	r3, r3
 800e36c:	2b03      	cmp	r3, #3
 800e36e:	d114      	bne.n	800e39a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e376:	695b      	ldr	r3, [r3, #20]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d00e      	beq.n	800e39a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e382:	695b      	ldr	r3, [r3, #20]
 800e384:	7afa      	ldrb	r2, [r7, #11]
 800e386:	4611      	mov	r1, r2
 800e388:	68f8      	ldr	r0, [r7, #12]
 800e38a:	4798      	blx	r3
 800e38c:	4603      	mov	r3, r0
 800e38e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e390:	7dfb      	ldrb	r3, [r7, #23]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d001      	beq.n	800e39a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e396:	7dfb      	ldrb	r3, [r7, #23]
 800e398:	e000      	b.n	800e39c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e39a:	2300      	movs	r3, #0
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3718      	adds	r7, #24
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2200      	movs	r2, #0
 800e3c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d101      	bne.n	800e3d8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e3d4:	2303      	movs	r3, #3
 800e3d6:	e02f      	b.n	800e438 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d00f      	beq.n	800e402 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3e8:	685b      	ldr	r3, [r3, #4]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d009      	beq.n	800e402 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	687a      	ldr	r2, [r7, #4]
 800e3f8:	6852      	ldr	r2, [r2, #4]
 800e3fa:	b2d2      	uxtb	r2, r2
 800e3fc:	4611      	mov	r1, r2
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e402:	2340      	movs	r3, #64	@ 0x40
 800e404:	2200      	movs	r2, #0
 800e406:	2100      	movs	r1, #0
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f001 fa3c 	bl	800f886 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2201      	movs	r2, #1
 800e412:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2240      	movs	r2, #64	@ 0x40
 800e41a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e41e:	2340      	movs	r3, #64	@ 0x40
 800e420:	2200      	movs	r2, #0
 800e422:	2180      	movs	r1, #128	@ 0x80
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f001 fa2e 	bl	800f886 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2201      	movs	r2, #1
 800e42e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2240      	movs	r2, #64	@ 0x40
 800e434:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e436:	2300      	movs	r3, #0
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3708      	adds	r7, #8
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e440:	b480      	push	{r7}
 800e442:	b083      	sub	sp, #12
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	460b      	mov	r3, r1
 800e44a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	78fa      	ldrb	r2, [r7, #3]
 800e450:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e452:	2300      	movs	r3, #0
}
 800e454:	4618      	mov	r0, r3
 800e456:	370c      	adds	r7, #12
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e460:	b480      	push	{r7}
 800e462:	b083      	sub	sp, #12
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e46e:	b2da      	uxtb	r2, r3
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2204      	movs	r2, #4
 800e47a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e47e:	2300      	movs	r3, #0
}
 800e480:	4618      	mov	r0, r3
 800e482:	370c      	adds	r7, #12
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr

0800e48c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b083      	sub	sp, #12
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e49a:	b2db      	uxtb	r3, r3
 800e49c:	2b04      	cmp	r3, #4
 800e49e:	d106      	bne.n	800e4ae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e4a6:	b2da      	uxtb	r2, r3
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e4ae:	2300      	movs	r3, #0
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	370c      	adds	r7, #12
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr

0800e4bc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d101      	bne.n	800e4d2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e4ce:	2303      	movs	r3, #3
 800e4d0:	e012      	b.n	800e4f8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e4d8:	b2db      	uxtb	r3, r3
 800e4da:	2b03      	cmp	r3, #3
 800e4dc:	d10b      	bne.n	800e4f6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4e4:	69db      	ldr	r3, [r3, #28]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d005      	beq.n	800e4f6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4f0:	69db      	ldr	r3, [r3, #28]
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e4f6:	2300      	movs	r3, #0
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3708      	adds	r7, #8
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e500:	b480      	push	{r7}
 800e502:	b087      	sub	sp, #28
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	3301      	adds	r3, #1
 800e516:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e51e:	8a3b      	ldrh	r3, [r7, #16]
 800e520:	021b      	lsls	r3, r3, #8
 800e522:	b21a      	sxth	r2, r3
 800e524:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e528:	4313      	orrs	r3, r2
 800e52a:	b21b      	sxth	r3, r3
 800e52c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e52e:	89fb      	ldrh	r3, [r7, #14]
}
 800e530:	4618      	mov	r0, r3
 800e532:	371c      	adds	r7, #28
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr

0800e53c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b084      	sub	sp, #16
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e546:	2300      	movs	r3, #0
 800e548:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e552:	2b40      	cmp	r3, #64	@ 0x40
 800e554:	d005      	beq.n	800e562 <USBD_StdDevReq+0x26>
 800e556:	2b40      	cmp	r3, #64	@ 0x40
 800e558:	d853      	bhi.n	800e602 <USBD_StdDevReq+0xc6>
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d00b      	beq.n	800e576 <USBD_StdDevReq+0x3a>
 800e55e:	2b20      	cmp	r3, #32
 800e560:	d14f      	bne.n	800e602 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e568:	689b      	ldr	r3, [r3, #8]
 800e56a:	6839      	ldr	r1, [r7, #0]
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	4798      	blx	r3
 800e570:	4603      	mov	r3, r0
 800e572:	73fb      	strb	r3, [r7, #15]
      break;
 800e574:	e04a      	b.n	800e60c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	785b      	ldrb	r3, [r3, #1]
 800e57a:	2b09      	cmp	r3, #9
 800e57c:	d83b      	bhi.n	800e5f6 <USBD_StdDevReq+0xba>
 800e57e:	a201      	add	r2, pc, #4	@ (adr r2, 800e584 <USBD_StdDevReq+0x48>)
 800e580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e584:	0800e5d9 	.word	0x0800e5d9
 800e588:	0800e5ed 	.word	0x0800e5ed
 800e58c:	0800e5f7 	.word	0x0800e5f7
 800e590:	0800e5e3 	.word	0x0800e5e3
 800e594:	0800e5f7 	.word	0x0800e5f7
 800e598:	0800e5b7 	.word	0x0800e5b7
 800e59c:	0800e5ad 	.word	0x0800e5ad
 800e5a0:	0800e5f7 	.word	0x0800e5f7
 800e5a4:	0800e5cf 	.word	0x0800e5cf
 800e5a8:	0800e5c1 	.word	0x0800e5c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e5ac:	6839      	ldr	r1, [r7, #0]
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f000 f9de 	bl	800e970 <USBD_GetDescriptor>
          break;
 800e5b4:	e024      	b.n	800e600 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e5b6:	6839      	ldr	r1, [r7, #0]
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f000 fb6d 	bl	800ec98 <USBD_SetAddress>
          break;
 800e5be:	e01f      	b.n	800e600 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e5c0:	6839      	ldr	r1, [r7, #0]
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f000 fbac 	bl	800ed20 <USBD_SetConfig>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	73fb      	strb	r3, [r7, #15]
          break;
 800e5cc:	e018      	b.n	800e600 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e5ce:	6839      	ldr	r1, [r7, #0]
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f000 fc4b 	bl	800ee6c <USBD_GetConfig>
          break;
 800e5d6:	e013      	b.n	800e600 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e5d8:	6839      	ldr	r1, [r7, #0]
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f000 fc7c 	bl	800eed8 <USBD_GetStatus>
          break;
 800e5e0:	e00e      	b.n	800e600 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e5e2:	6839      	ldr	r1, [r7, #0]
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 fcab 	bl	800ef40 <USBD_SetFeature>
          break;
 800e5ea:	e009      	b.n	800e600 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e5ec:	6839      	ldr	r1, [r7, #0]
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f000 fcba 	bl	800ef68 <USBD_ClrFeature>
          break;
 800e5f4:	e004      	b.n	800e600 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e5f6:	6839      	ldr	r1, [r7, #0]
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f000 fd11 	bl	800f020 <USBD_CtlError>
          break;
 800e5fe:	bf00      	nop
      }
      break;
 800e600:	e004      	b.n	800e60c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e602:	6839      	ldr	r1, [r7, #0]
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f000 fd0b 	bl	800f020 <USBD_CtlError>
      break;
 800e60a:	bf00      	nop
  }

  return ret;
 800e60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3710      	adds	r7, #16
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop

0800e618 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b084      	sub	sp, #16
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e622:	2300      	movs	r3, #0
 800e624:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e62e:	2b40      	cmp	r3, #64	@ 0x40
 800e630:	d005      	beq.n	800e63e <USBD_StdItfReq+0x26>
 800e632:	2b40      	cmp	r3, #64	@ 0x40
 800e634:	d82f      	bhi.n	800e696 <USBD_StdItfReq+0x7e>
 800e636:	2b00      	cmp	r3, #0
 800e638:	d001      	beq.n	800e63e <USBD_StdItfReq+0x26>
 800e63a:	2b20      	cmp	r3, #32
 800e63c:	d12b      	bne.n	800e696 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e644:	b2db      	uxtb	r3, r3
 800e646:	3b01      	subs	r3, #1
 800e648:	2b02      	cmp	r3, #2
 800e64a:	d81d      	bhi.n	800e688 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	889b      	ldrh	r3, [r3, #4]
 800e650:	b2db      	uxtb	r3, r3
 800e652:	2b01      	cmp	r3, #1
 800e654:	d813      	bhi.n	800e67e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e65c:	689b      	ldr	r3, [r3, #8]
 800e65e:	6839      	ldr	r1, [r7, #0]
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	4798      	blx	r3
 800e664:	4603      	mov	r3, r0
 800e666:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	88db      	ldrh	r3, [r3, #6]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d110      	bne.n	800e692 <USBD_StdItfReq+0x7a>
 800e670:	7bfb      	ldrb	r3, [r7, #15]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d10d      	bne.n	800e692 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f000 fd9d 	bl	800f1b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e67c:	e009      	b.n	800e692 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e67e:	6839      	ldr	r1, [r7, #0]
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f000 fccd 	bl	800f020 <USBD_CtlError>
          break;
 800e686:	e004      	b.n	800e692 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e688:	6839      	ldr	r1, [r7, #0]
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f000 fcc8 	bl	800f020 <USBD_CtlError>
          break;
 800e690:	e000      	b.n	800e694 <USBD_StdItfReq+0x7c>
          break;
 800e692:	bf00      	nop
      }
      break;
 800e694:	e004      	b.n	800e6a0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e696:	6839      	ldr	r1, [r7, #0]
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f000 fcc1 	bl	800f020 <USBD_CtlError>
      break;
 800e69e:	bf00      	nop
  }

  return ret;
 800e6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3710      	adds	r7, #16
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}

0800e6aa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6aa:	b580      	push	{r7, lr}
 800e6ac:	b084      	sub	sp, #16
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	6078      	str	r0, [r7, #4]
 800e6b2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	889b      	ldrh	r3, [r3, #4]
 800e6bc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e6c6:	2b40      	cmp	r3, #64	@ 0x40
 800e6c8:	d007      	beq.n	800e6da <USBD_StdEPReq+0x30>
 800e6ca:	2b40      	cmp	r3, #64	@ 0x40
 800e6cc:	f200 8145 	bhi.w	800e95a <USBD_StdEPReq+0x2b0>
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d00c      	beq.n	800e6ee <USBD_StdEPReq+0x44>
 800e6d4:	2b20      	cmp	r3, #32
 800e6d6:	f040 8140 	bne.w	800e95a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6e0:	689b      	ldr	r3, [r3, #8]
 800e6e2:	6839      	ldr	r1, [r7, #0]
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	4798      	blx	r3
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	73fb      	strb	r3, [r7, #15]
      break;
 800e6ec:	e13a      	b.n	800e964 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	785b      	ldrb	r3, [r3, #1]
 800e6f2:	2b03      	cmp	r3, #3
 800e6f4:	d007      	beq.n	800e706 <USBD_StdEPReq+0x5c>
 800e6f6:	2b03      	cmp	r3, #3
 800e6f8:	f300 8129 	bgt.w	800e94e <USBD_StdEPReq+0x2a4>
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d07f      	beq.n	800e800 <USBD_StdEPReq+0x156>
 800e700:	2b01      	cmp	r3, #1
 800e702:	d03c      	beq.n	800e77e <USBD_StdEPReq+0xd4>
 800e704:	e123      	b.n	800e94e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	2b02      	cmp	r3, #2
 800e710:	d002      	beq.n	800e718 <USBD_StdEPReq+0x6e>
 800e712:	2b03      	cmp	r3, #3
 800e714:	d016      	beq.n	800e744 <USBD_StdEPReq+0x9a>
 800e716:	e02c      	b.n	800e772 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e718:	7bbb      	ldrb	r3, [r7, #14]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d00d      	beq.n	800e73a <USBD_StdEPReq+0x90>
 800e71e:	7bbb      	ldrb	r3, [r7, #14]
 800e720:	2b80      	cmp	r3, #128	@ 0x80
 800e722:	d00a      	beq.n	800e73a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e724:	7bbb      	ldrb	r3, [r7, #14]
 800e726:	4619      	mov	r1, r3
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f001 f8f1 	bl	800f910 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e72e:	2180      	movs	r1, #128	@ 0x80
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f001 f8ed 	bl	800f910 <USBD_LL_StallEP>
 800e736:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e738:	e020      	b.n	800e77c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e73a:	6839      	ldr	r1, [r7, #0]
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 fc6f 	bl	800f020 <USBD_CtlError>
              break;
 800e742:	e01b      	b.n	800e77c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	885b      	ldrh	r3, [r3, #2]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d10e      	bne.n	800e76a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e74c:	7bbb      	ldrb	r3, [r7, #14]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d00b      	beq.n	800e76a <USBD_StdEPReq+0xc0>
 800e752:	7bbb      	ldrb	r3, [r7, #14]
 800e754:	2b80      	cmp	r3, #128	@ 0x80
 800e756:	d008      	beq.n	800e76a <USBD_StdEPReq+0xc0>
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	88db      	ldrh	r3, [r3, #6]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d104      	bne.n	800e76a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e760:	7bbb      	ldrb	r3, [r7, #14]
 800e762:	4619      	mov	r1, r3
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f001 f8d3 	bl	800f910 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 fd23 	bl	800f1b6 <USBD_CtlSendStatus>

              break;
 800e770:	e004      	b.n	800e77c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e772:	6839      	ldr	r1, [r7, #0]
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f000 fc53 	bl	800f020 <USBD_CtlError>
              break;
 800e77a:	bf00      	nop
          }
          break;
 800e77c:	e0ec      	b.n	800e958 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e784:	b2db      	uxtb	r3, r3
 800e786:	2b02      	cmp	r3, #2
 800e788:	d002      	beq.n	800e790 <USBD_StdEPReq+0xe6>
 800e78a:	2b03      	cmp	r3, #3
 800e78c:	d016      	beq.n	800e7bc <USBD_StdEPReq+0x112>
 800e78e:	e030      	b.n	800e7f2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e790:	7bbb      	ldrb	r3, [r7, #14]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d00d      	beq.n	800e7b2 <USBD_StdEPReq+0x108>
 800e796:	7bbb      	ldrb	r3, [r7, #14]
 800e798:	2b80      	cmp	r3, #128	@ 0x80
 800e79a:	d00a      	beq.n	800e7b2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e79c:	7bbb      	ldrb	r3, [r7, #14]
 800e79e:	4619      	mov	r1, r3
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f001 f8b5 	bl	800f910 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7a6:	2180      	movs	r1, #128	@ 0x80
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f001 f8b1 	bl	800f910 <USBD_LL_StallEP>
 800e7ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e7b0:	e025      	b.n	800e7fe <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e7b2:	6839      	ldr	r1, [r7, #0]
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f000 fc33 	bl	800f020 <USBD_CtlError>
              break;
 800e7ba:	e020      	b.n	800e7fe <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	885b      	ldrh	r3, [r3, #2]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d11b      	bne.n	800e7fc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e7c4:	7bbb      	ldrb	r3, [r7, #14]
 800e7c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d004      	beq.n	800e7d8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e7ce:	7bbb      	ldrb	r3, [r7, #14]
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f001 f8bb 	bl	800f94e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f000 fcec 	bl	800f1b6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e7e4:	689b      	ldr	r3, [r3, #8]
 800e7e6:	6839      	ldr	r1, [r7, #0]
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	4798      	blx	r3
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e7f0:	e004      	b.n	800e7fc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e7f2:	6839      	ldr	r1, [r7, #0]
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f000 fc13 	bl	800f020 <USBD_CtlError>
              break;
 800e7fa:	e000      	b.n	800e7fe <USBD_StdEPReq+0x154>
              break;
 800e7fc:	bf00      	nop
          }
          break;
 800e7fe:	e0ab      	b.n	800e958 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e806:	b2db      	uxtb	r3, r3
 800e808:	2b02      	cmp	r3, #2
 800e80a:	d002      	beq.n	800e812 <USBD_StdEPReq+0x168>
 800e80c:	2b03      	cmp	r3, #3
 800e80e:	d032      	beq.n	800e876 <USBD_StdEPReq+0x1cc>
 800e810:	e097      	b.n	800e942 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e812:	7bbb      	ldrb	r3, [r7, #14]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d007      	beq.n	800e828 <USBD_StdEPReq+0x17e>
 800e818:	7bbb      	ldrb	r3, [r7, #14]
 800e81a:	2b80      	cmp	r3, #128	@ 0x80
 800e81c:	d004      	beq.n	800e828 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e81e:	6839      	ldr	r1, [r7, #0]
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f000 fbfd 	bl	800f020 <USBD_CtlError>
                break;
 800e826:	e091      	b.n	800e94c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e828:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	da0b      	bge.n	800e848 <USBD_StdEPReq+0x19e>
 800e830:	7bbb      	ldrb	r3, [r7, #14]
 800e832:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e836:	4613      	mov	r3, r2
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	4413      	add	r3, r2
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	3310      	adds	r3, #16
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	4413      	add	r3, r2
 800e844:	3304      	adds	r3, #4
 800e846:	e00b      	b.n	800e860 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e848:	7bbb      	ldrb	r3, [r7, #14]
 800e84a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e84e:	4613      	mov	r3, r2
 800e850:	009b      	lsls	r3, r3, #2
 800e852:	4413      	add	r3, r2
 800e854:	009b      	lsls	r3, r3, #2
 800e856:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e85a:	687a      	ldr	r2, [r7, #4]
 800e85c:	4413      	add	r3, r2
 800e85e:	3304      	adds	r3, #4
 800e860:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	2200      	movs	r2, #0
 800e866:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	2202      	movs	r2, #2
 800e86c:	4619      	mov	r1, r3
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f000 fc47 	bl	800f102 <USBD_CtlSendData>
              break;
 800e874:	e06a      	b.n	800e94c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e876:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	da11      	bge.n	800e8a2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e87e:	7bbb      	ldrb	r3, [r7, #14]
 800e880:	f003 020f 	and.w	r2, r3, #15
 800e884:	6879      	ldr	r1, [r7, #4]
 800e886:	4613      	mov	r3, r2
 800e888:	009b      	lsls	r3, r3, #2
 800e88a:	4413      	add	r3, r2
 800e88c:	009b      	lsls	r3, r3, #2
 800e88e:	440b      	add	r3, r1
 800e890:	3324      	adds	r3, #36	@ 0x24
 800e892:	881b      	ldrh	r3, [r3, #0]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d117      	bne.n	800e8c8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e898:	6839      	ldr	r1, [r7, #0]
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f000 fbc0 	bl	800f020 <USBD_CtlError>
                  break;
 800e8a0:	e054      	b.n	800e94c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e8a2:	7bbb      	ldrb	r3, [r7, #14]
 800e8a4:	f003 020f 	and.w	r2, r3, #15
 800e8a8:	6879      	ldr	r1, [r7, #4]
 800e8aa:	4613      	mov	r3, r2
 800e8ac:	009b      	lsls	r3, r3, #2
 800e8ae:	4413      	add	r3, r2
 800e8b0:	009b      	lsls	r3, r3, #2
 800e8b2:	440b      	add	r3, r1
 800e8b4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e8b8:	881b      	ldrh	r3, [r3, #0]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d104      	bne.n	800e8c8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e8be:	6839      	ldr	r1, [r7, #0]
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f000 fbad 	bl	800f020 <USBD_CtlError>
                  break;
 800e8c6:	e041      	b.n	800e94c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	da0b      	bge.n	800e8e8 <USBD_StdEPReq+0x23e>
 800e8d0:	7bbb      	ldrb	r3, [r7, #14]
 800e8d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e8d6:	4613      	mov	r3, r2
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	4413      	add	r3, r2
 800e8dc:	009b      	lsls	r3, r3, #2
 800e8de:	3310      	adds	r3, #16
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	4413      	add	r3, r2
 800e8e4:	3304      	adds	r3, #4
 800e8e6:	e00b      	b.n	800e900 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e8e8:	7bbb      	ldrb	r3, [r7, #14]
 800e8ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8ee:	4613      	mov	r3, r2
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	4413      	add	r3, r2
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e8fa:	687a      	ldr	r2, [r7, #4]
 800e8fc:	4413      	add	r3, r2
 800e8fe:	3304      	adds	r3, #4
 800e900:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e902:	7bbb      	ldrb	r3, [r7, #14]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d002      	beq.n	800e90e <USBD_StdEPReq+0x264>
 800e908:	7bbb      	ldrb	r3, [r7, #14]
 800e90a:	2b80      	cmp	r3, #128	@ 0x80
 800e90c:	d103      	bne.n	800e916 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	2200      	movs	r2, #0
 800e912:	601a      	str	r2, [r3, #0]
 800e914:	e00e      	b.n	800e934 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e916:	7bbb      	ldrb	r3, [r7, #14]
 800e918:	4619      	mov	r1, r3
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f001 f836 	bl	800f98c <USBD_LL_IsStallEP>
 800e920:	4603      	mov	r3, r0
 800e922:	2b00      	cmp	r3, #0
 800e924:	d003      	beq.n	800e92e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	2201      	movs	r2, #1
 800e92a:	601a      	str	r2, [r3, #0]
 800e92c:	e002      	b.n	800e934 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	2200      	movs	r2, #0
 800e932:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	2202      	movs	r2, #2
 800e938:	4619      	mov	r1, r3
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f000 fbe1 	bl	800f102 <USBD_CtlSendData>
              break;
 800e940:	e004      	b.n	800e94c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e942:	6839      	ldr	r1, [r7, #0]
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f000 fb6b 	bl	800f020 <USBD_CtlError>
              break;
 800e94a:	bf00      	nop
          }
          break;
 800e94c:	e004      	b.n	800e958 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e94e:	6839      	ldr	r1, [r7, #0]
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f000 fb65 	bl	800f020 <USBD_CtlError>
          break;
 800e956:	bf00      	nop
      }
      break;
 800e958:	e004      	b.n	800e964 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e95a:	6839      	ldr	r1, [r7, #0]
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 fb5f 	bl	800f020 <USBD_CtlError>
      break;
 800e962:	bf00      	nop
  }

  return ret;
 800e964:	7bfb      	ldrb	r3, [r7, #15]
}
 800e966:	4618      	mov	r0, r3
 800e968:	3710      	adds	r7, #16
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
	...

0800e970 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e97a:	2300      	movs	r3, #0
 800e97c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e97e:	2300      	movs	r3, #0
 800e980:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e982:	2300      	movs	r3, #0
 800e984:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	885b      	ldrh	r3, [r3, #2]
 800e98a:	0a1b      	lsrs	r3, r3, #8
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	3b01      	subs	r3, #1
 800e990:	2b0e      	cmp	r3, #14
 800e992:	f200 8152 	bhi.w	800ec3a <USBD_GetDescriptor+0x2ca>
 800e996:	a201      	add	r2, pc, #4	@ (adr r2, 800e99c <USBD_GetDescriptor+0x2c>)
 800e998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e99c:	0800ea0d 	.word	0x0800ea0d
 800e9a0:	0800ea25 	.word	0x0800ea25
 800e9a4:	0800ea65 	.word	0x0800ea65
 800e9a8:	0800ec3b 	.word	0x0800ec3b
 800e9ac:	0800ec3b 	.word	0x0800ec3b
 800e9b0:	0800ebdb 	.word	0x0800ebdb
 800e9b4:	0800ec07 	.word	0x0800ec07
 800e9b8:	0800ec3b 	.word	0x0800ec3b
 800e9bc:	0800ec3b 	.word	0x0800ec3b
 800e9c0:	0800ec3b 	.word	0x0800ec3b
 800e9c4:	0800ec3b 	.word	0x0800ec3b
 800e9c8:	0800ec3b 	.word	0x0800ec3b
 800e9cc:	0800ec3b 	.word	0x0800ec3b
 800e9d0:	0800ec3b 	.word	0x0800ec3b
 800e9d4:	0800e9d9 	.word	0x0800e9d9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e9de:	69db      	ldr	r3, [r3, #28]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d00b      	beq.n	800e9fc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e9ea:	69db      	ldr	r3, [r3, #28]
 800e9ec:	687a      	ldr	r2, [r7, #4]
 800e9ee:	7c12      	ldrb	r2, [r2, #16]
 800e9f0:	f107 0108 	add.w	r1, r7, #8
 800e9f4:	4610      	mov	r0, r2
 800e9f6:	4798      	blx	r3
 800e9f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e9fa:	e126      	b.n	800ec4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e9fc:	6839      	ldr	r1, [r7, #0]
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f000 fb0e 	bl	800f020 <USBD_CtlError>
        err++;
 800ea04:	7afb      	ldrb	r3, [r7, #11]
 800ea06:	3301      	adds	r3, #1
 800ea08:	72fb      	strb	r3, [r7, #11]
      break;
 800ea0a:	e11e      	b.n	800ec4a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	687a      	ldr	r2, [r7, #4]
 800ea16:	7c12      	ldrb	r2, [r2, #16]
 800ea18:	f107 0108 	add.w	r1, r7, #8
 800ea1c:	4610      	mov	r0, r2
 800ea1e:	4798      	blx	r3
 800ea20:	60f8      	str	r0, [r7, #12]
      break;
 800ea22:	e112      	b.n	800ec4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	7c1b      	ldrb	r3, [r3, #16]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d10d      	bne.n	800ea48 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea34:	f107 0208 	add.w	r2, r7, #8
 800ea38:	4610      	mov	r0, r2
 800ea3a:	4798      	blx	r3
 800ea3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	3301      	adds	r3, #1
 800ea42:	2202      	movs	r2, #2
 800ea44:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ea46:	e100      	b.n	800ec4a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea50:	f107 0208 	add.w	r2, r7, #8
 800ea54:	4610      	mov	r0, r2
 800ea56:	4798      	blx	r3
 800ea58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	2202      	movs	r2, #2
 800ea60:	701a      	strb	r2, [r3, #0]
      break;
 800ea62:	e0f2      	b.n	800ec4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	885b      	ldrh	r3, [r3, #2]
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	2b05      	cmp	r3, #5
 800ea6c:	f200 80ac 	bhi.w	800ebc8 <USBD_GetDescriptor+0x258>
 800ea70:	a201      	add	r2, pc, #4	@ (adr r2, 800ea78 <USBD_GetDescriptor+0x108>)
 800ea72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea76:	bf00      	nop
 800ea78:	0800ea91 	.word	0x0800ea91
 800ea7c:	0800eac5 	.word	0x0800eac5
 800ea80:	0800eaf9 	.word	0x0800eaf9
 800ea84:	0800eb2d 	.word	0x0800eb2d
 800ea88:	0800eb61 	.word	0x0800eb61
 800ea8c:	0800eb95 	.word	0x0800eb95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d00b      	beq.n	800eab4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	7c12      	ldrb	r2, [r2, #16]
 800eaa8:	f107 0108 	add.w	r1, r7, #8
 800eaac:	4610      	mov	r0, r2
 800eaae:	4798      	blx	r3
 800eab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eab2:	e091      	b.n	800ebd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eab4:	6839      	ldr	r1, [r7, #0]
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 fab2 	bl	800f020 <USBD_CtlError>
            err++;
 800eabc:	7afb      	ldrb	r3, [r7, #11]
 800eabe:	3301      	adds	r3, #1
 800eac0:	72fb      	strb	r3, [r7, #11]
          break;
 800eac2:	e089      	b.n	800ebd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eaca:	689b      	ldr	r3, [r3, #8]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00b      	beq.n	800eae8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ead6:	689b      	ldr	r3, [r3, #8]
 800ead8:	687a      	ldr	r2, [r7, #4]
 800eada:	7c12      	ldrb	r2, [r2, #16]
 800eadc:	f107 0108 	add.w	r1, r7, #8
 800eae0:	4610      	mov	r0, r2
 800eae2:	4798      	blx	r3
 800eae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eae6:	e077      	b.n	800ebd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eae8:	6839      	ldr	r1, [r7, #0]
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f000 fa98 	bl	800f020 <USBD_CtlError>
            err++;
 800eaf0:	7afb      	ldrb	r3, [r7, #11]
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	72fb      	strb	r3, [r7, #11]
          break;
 800eaf6:	e06f      	b.n	800ebd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eafe:	68db      	ldr	r3, [r3, #12]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d00b      	beq.n	800eb1c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb0a:	68db      	ldr	r3, [r3, #12]
 800eb0c:	687a      	ldr	r2, [r7, #4]
 800eb0e:	7c12      	ldrb	r2, [r2, #16]
 800eb10:	f107 0108 	add.w	r1, r7, #8
 800eb14:	4610      	mov	r0, r2
 800eb16:	4798      	blx	r3
 800eb18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb1a:	e05d      	b.n	800ebd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb1c:	6839      	ldr	r1, [r7, #0]
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 fa7e 	bl	800f020 <USBD_CtlError>
            err++;
 800eb24:	7afb      	ldrb	r3, [r7, #11]
 800eb26:	3301      	adds	r3, #1
 800eb28:	72fb      	strb	r3, [r7, #11]
          break;
 800eb2a:	e055      	b.n	800ebd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb32:	691b      	ldr	r3, [r3, #16]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d00b      	beq.n	800eb50 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb3e:	691b      	ldr	r3, [r3, #16]
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	7c12      	ldrb	r2, [r2, #16]
 800eb44:	f107 0108 	add.w	r1, r7, #8
 800eb48:	4610      	mov	r0, r2
 800eb4a:	4798      	blx	r3
 800eb4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb4e:	e043      	b.n	800ebd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb50:	6839      	ldr	r1, [r7, #0]
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 fa64 	bl	800f020 <USBD_CtlError>
            err++;
 800eb58:	7afb      	ldrb	r3, [r7, #11]
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	72fb      	strb	r3, [r7, #11]
          break;
 800eb5e:	e03b      	b.n	800ebd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb66:	695b      	ldr	r3, [r3, #20]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00b      	beq.n	800eb84 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb72:	695b      	ldr	r3, [r3, #20]
 800eb74:	687a      	ldr	r2, [r7, #4]
 800eb76:	7c12      	ldrb	r2, [r2, #16]
 800eb78:	f107 0108 	add.w	r1, r7, #8
 800eb7c:	4610      	mov	r0, r2
 800eb7e:	4798      	blx	r3
 800eb80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb82:	e029      	b.n	800ebd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb84:	6839      	ldr	r1, [r7, #0]
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f000 fa4a 	bl	800f020 <USBD_CtlError>
            err++;
 800eb8c:	7afb      	ldrb	r3, [r7, #11]
 800eb8e:	3301      	adds	r3, #1
 800eb90:	72fb      	strb	r3, [r7, #11]
          break;
 800eb92:	e021      	b.n	800ebd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb9a:	699b      	ldr	r3, [r3, #24]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d00b      	beq.n	800ebb8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eba6:	699b      	ldr	r3, [r3, #24]
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	7c12      	ldrb	r2, [r2, #16]
 800ebac:	f107 0108 	add.w	r1, r7, #8
 800ebb0:	4610      	mov	r0, r2
 800ebb2:	4798      	blx	r3
 800ebb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ebb6:	e00f      	b.n	800ebd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ebb8:	6839      	ldr	r1, [r7, #0]
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f000 fa30 	bl	800f020 <USBD_CtlError>
            err++;
 800ebc0:	7afb      	ldrb	r3, [r7, #11]
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	72fb      	strb	r3, [r7, #11]
          break;
 800ebc6:	e007      	b.n	800ebd8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ebc8:	6839      	ldr	r1, [r7, #0]
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f000 fa28 	bl	800f020 <USBD_CtlError>
          err++;
 800ebd0:	7afb      	ldrb	r3, [r7, #11]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ebd6:	bf00      	nop
      }
      break;
 800ebd8:	e037      	b.n	800ec4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	7c1b      	ldrb	r3, [r3, #16]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d109      	bne.n	800ebf6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ebe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebea:	f107 0208 	add.w	r2, r7, #8
 800ebee:	4610      	mov	r0, r2
 800ebf0:	4798      	blx	r3
 800ebf2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ebf4:	e029      	b.n	800ec4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ebf6:	6839      	ldr	r1, [r7, #0]
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f000 fa11 	bl	800f020 <USBD_CtlError>
        err++;
 800ebfe:	7afb      	ldrb	r3, [r7, #11]
 800ec00:	3301      	adds	r3, #1
 800ec02:	72fb      	strb	r3, [r7, #11]
      break;
 800ec04:	e021      	b.n	800ec4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	7c1b      	ldrb	r3, [r3, #16]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d10d      	bne.n	800ec2a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec16:	f107 0208 	add.w	r2, r7, #8
 800ec1a:	4610      	mov	r0, r2
 800ec1c:	4798      	blx	r3
 800ec1e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	3301      	adds	r3, #1
 800ec24:	2207      	movs	r2, #7
 800ec26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec28:	e00f      	b.n	800ec4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ec2a:	6839      	ldr	r1, [r7, #0]
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f000 f9f7 	bl	800f020 <USBD_CtlError>
        err++;
 800ec32:	7afb      	ldrb	r3, [r7, #11]
 800ec34:	3301      	adds	r3, #1
 800ec36:	72fb      	strb	r3, [r7, #11]
      break;
 800ec38:	e007      	b.n	800ec4a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ec3a:	6839      	ldr	r1, [r7, #0]
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f000 f9ef 	bl	800f020 <USBD_CtlError>
      err++;
 800ec42:	7afb      	ldrb	r3, [r7, #11]
 800ec44:	3301      	adds	r3, #1
 800ec46:	72fb      	strb	r3, [r7, #11]
      break;
 800ec48:	bf00      	nop
  }

  if (err != 0U)
 800ec4a:	7afb      	ldrb	r3, [r7, #11]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d11e      	bne.n	800ec8e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	88db      	ldrh	r3, [r3, #6]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d016      	beq.n	800ec86 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ec58:	893b      	ldrh	r3, [r7, #8]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d00e      	beq.n	800ec7c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	88da      	ldrh	r2, [r3, #6]
 800ec62:	893b      	ldrh	r3, [r7, #8]
 800ec64:	4293      	cmp	r3, r2
 800ec66:	bf28      	it	cs
 800ec68:	4613      	movcs	r3, r2
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ec6e:	893b      	ldrh	r3, [r7, #8]
 800ec70:	461a      	mov	r2, r3
 800ec72:	68f9      	ldr	r1, [r7, #12]
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f000 fa44 	bl	800f102 <USBD_CtlSendData>
 800ec7a:	e009      	b.n	800ec90 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ec7c:	6839      	ldr	r1, [r7, #0]
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f000 f9ce 	bl	800f020 <USBD_CtlError>
 800ec84:	e004      	b.n	800ec90 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f000 fa95 	bl	800f1b6 <USBD_CtlSendStatus>
 800ec8c:	e000      	b.n	800ec90 <USBD_GetDescriptor+0x320>
    return;
 800ec8e:	bf00      	nop
  }
}
 800ec90:	3710      	adds	r7, #16
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop

0800ec98 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	889b      	ldrh	r3, [r3, #4]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d131      	bne.n	800ed0e <USBD_SetAddress+0x76>
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	88db      	ldrh	r3, [r3, #6]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d12d      	bne.n	800ed0e <USBD_SetAddress+0x76>
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	885b      	ldrh	r3, [r3, #2]
 800ecb6:	2b7f      	cmp	r3, #127	@ 0x7f
 800ecb8:	d829      	bhi.n	800ed0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	885b      	ldrh	r3, [r3, #2]
 800ecbe:	b2db      	uxtb	r3, r3
 800ecc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ecc4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	2b03      	cmp	r3, #3
 800ecd0:	d104      	bne.n	800ecdc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ecd2:	6839      	ldr	r1, [r7, #0]
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f000 f9a3 	bl	800f020 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecda:	e01d      	b.n	800ed18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	7bfa      	ldrb	r2, [r7, #15]
 800ece0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ece4:	7bfb      	ldrb	r3, [r7, #15]
 800ece6:	4619      	mov	r1, r3
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f000 fe7b 	bl	800f9e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f000 fa61 	bl	800f1b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ecf4:	7bfb      	ldrb	r3, [r7, #15]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d004      	beq.n	800ed04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2202      	movs	r2, #2
 800ecfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed02:	e009      	b.n	800ed18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2201      	movs	r2, #1
 800ed08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed0c:	e004      	b.n	800ed18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ed0e:	6839      	ldr	r1, [r7, #0]
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f000 f985 	bl	800f020 <USBD_CtlError>
  }
}
 800ed16:	bf00      	nop
 800ed18:	bf00      	nop
 800ed1a:	3710      	adds	r7, #16
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	885b      	ldrh	r3, [r3, #2]
 800ed32:	b2da      	uxtb	r2, r3
 800ed34:	4b4c      	ldr	r3, [pc, #304]	@ (800ee68 <USBD_SetConfig+0x148>)
 800ed36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ed38:	4b4b      	ldr	r3, [pc, #300]	@ (800ee68 <USBD_SetConfig+0x148>)
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	2b01      	cmp	r3, #1
 800ed3e:	d905      	bls.n	800ed4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ed40:	6839      	ldr	r1, [r7, #0]
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f000 f96c 	bl	800f020 <USBD_CtlError>
    return USBD_FAIL;
 800ed48:	2303      	movs	r3, #3
 800ed4a:	e088      	b.n	800ee5e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed52:	b2db      	uxtb	r3, r3
 800ed54:	2b02      	cmp	r3, #2
 800ed56:	d002      	beq.n	800ed5e <USBD_SetConfig+0x3e>
 800ed58:	2b03      	cmp	r3, #3
 800ed5a:	d025      	beq.n	800eda8 <USBD_SetConfig+0x88>
 800ed5c:	e071      	b.n	800ee42 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ed5e:	4b42      	ldr	r3, [pc, #264]	@ (800ee68 <USBD_SetConfig+0x148>)
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d01c      	beq.n	800eda0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ed66:	4b40      	ldr	r3, [pc, #256]	@ (800ee68 <USBD_SetConfig+0x148>)
 800ed68:	781b      	ldrb	r3, [r3, #0]
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ed70:	4b3d      	ldr	r3, [pc, #244]	@ (800ee68 <USBD_SetConfig+0x148>)
 800ed72:	781b      	ldrb	r3, [r3, #0]
 800ed74:	4619      	mov	r1, r3
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f7ff f992 	bl	800e0a0 <USBD_SetClassConfig>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ed80:	7bfb      	ldrb	r3, [r7, #15]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d004      	beq.n	800ed90 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ed86:	6839      	ldr	r1, [r7, #0]
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f000 f949 	bl	800f020 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ed8e:	e065      	b.n	800ee5c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f000 fa10 	bl	800f1b6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2203      	movs	r2, #3
 800ed9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ed9e:	e05d      	b.n	800ee5c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f000 fa08 	bl	800f1b6 <USBD_CtlSendStatus>
      break;
 800eda6:	e059      	b.n	800ee5c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800eda8:	4b2f      	ldr	r3, [pc, #188]	@ (800ee68 <USBD_SetConfig+0x148>)
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d112      	bne.n	800edd6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2202      	movs	r2, #2
 800edb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800edb8:	4b2b      	ldr	r3, [pc, #172]	@ (800ee68 <USBD_SetConfig+0x148>)
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	461a      	mov	r2, r3
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800edc2:	4b29      	ldr	r3, [pc, #164]	@ (800ee68 <USBD_SetConfig+0x148>)
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	4619      	mov	r1, r3
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f7ff f985 	bl	800e0d8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f000 f9f1 	bl	800f1b6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800edd4:	e042      	b.n	800ee5c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800edd6:	4b24      	ldr	r3, [pc, #144]	@ (800ee68 <USBD_SetConfig+0x148>)
 800edd8:	781b      	ldrb	r3, [r3, #0]
 800edda:	461a      	mov	r2, r3
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	685b      	ldr	r3, [r3, #4]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d02a      	beq.n	800ee3a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	4619      	mov	r1, r3
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f7ff f973 	bl	800e0d8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800edf2:	4b1d      	ldr	r3, [pc, #116]	@ (800ee68 <USBD_SetConfig+0x148>)
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	461a      	mov	r2, r3
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800edfc:	4b1a      	ldr	r3, [pc, #104]	@ (800ee68 <USBD_SetConfig+0x148>)
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	4619      	mov	r1, r3
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f7ff f94c 	bl	800e0a0 <USBD_SetClassConfig>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ee0c:	7bfb      	ldrb	r3, [r7, #15]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d00f      	beq.n	800ee32 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ee12:	6839      	ldr	r1, [r7, #0]
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f000 f903 	bl	800f020 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	4619      	mov	r1, r3
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f7ff f958 	bl	800e0d8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2202      	movs	r2, #2
 800ee2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ee30:	e014      	b.n	800ee5c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f000 f9bf 	bl	800f1b6 <USBD_CtlSendStatus>
      break;
 800ee38:	e010      	b.n	800ee5c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f000 f9bb 	bl	800f1b6 <USBD_CtlSendStatus>
      break;
 800ee40:	e00c      	b.n	800ee5c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ee42:	6839      	ldr	r1, [r7, #0]
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f000 f8eb 	bl	800f020 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee4a:	4b07      	ldr	r3, [pc, #28]	@ (800ee68 <USBD_SetConfig+0x148>)
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	4619      	mov	r1, r3
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f7ff f941 	bl	800e0d8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ee56:	2303      	movs	r3, #3
 800ee58:	73fb      	strb	r3, [r7, #15]
      break;
 800ee5a:	bf00      	nop
  }

  return ret;
 800ee5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3710      	adds	r7, #16
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop
 800ee68:	20001690 	.word	0x20001690

0800ee6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b082      	sub	sp, #8
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	88db      	ldrh	r3, [r3, #6]
 800ee7a:	2b01      	cmp	r3, #1
 800ee7c:	d004      	beq.n	800ee88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ee7e:	6839      	ldr	r1, [r7, #0]
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f000 f8cd 	bl	800f020 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ee86:	e023      	b.n	800eed0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	2b02      	cmp	r3, #2
 800ee92:	dc02      	bgt.n	800ee9a <USBD_GetConfig+0x2e>
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	dc03      	bgt.n	800eea0 <USBD_GetConfig+0x34>
 800ee98:	e015      	b.n	800eec6 <USBD_GetConfig+0x5a>
 800ee9a:	2b03      	cmp	r3, #3
 800ee9c:	d00b      	beq.n	800eeb6 <USBD_GetConfig+0x4a>
 800ee9e:	e012      	b.n	800eec6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2200      	movs	r2, #0
 800eea4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	3308      	adds	r3, #8
 800eeaa:	2201      	movs	r2, #1
 800eeac:	4619      	mov	r1, r3
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f000 f927 	bl	800f102 <USBD_CtlSendData>
        break;
 800eeb4:	e00c      	b.n	800eed0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	3304      	adds	r3, #4
 800eeba:	2201      	movs	r2, #1
 800eebc:	4619      	mov	r1, r3
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 f91f 	bl	800f102 <USBD_CtlSendData>
        break;
 800eec4:	e004      	b.n	800eed0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800eec6:	6839      	ldr	r1, [r7, #0]
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f000 f8a9 	bl	800f020 <USBD_CtlError>
        break;
 800eece:	bf00      	nop
}
 800eed0:	bf00      	nop
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	3b01      	subs	r3, #1
 800eeec:	2b02      	cmp	r3, #2
 800eeee:	d81e      	bhi.n	800ef2e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	88db      	ldrh	r3, [r3, #6]
 800eef4:	2b02      	cmp	r3, #2
 800eef6:	d004      	beq.n	800ef02 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800eef8:	6839      	ldr	r1, [r7, #0]
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f000 f890 	bl	800f020 <USBD_CtlError>
        break;
 800ef00:	e01a      	b.n	800ef38 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2201      	movs	r2, #1
 800ef06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d005      	beq.n	800ef1e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	f043 0202 	orr.w	r2, r3, #2
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	330c      	adds	r3, #12
 800ef22:	2202      	movs	r2, #2
 800ef24:	4619      	mov	r1, r3
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f000 f8eb 	bl	800f102 <USBD_CtlSendData>
      break;
 800ef2c:	e004      	b.n	800ef38 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ef2e:	6839      	ldr	r1, [r7, #0]
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f000 f875 	bl	800f020 <USBD_CtlError>
      break;
 800ef36:	bf00      	nop
  }
}
 800ef38:	bf00      	nop
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	885b      	ldrh	r3, [r3, #2]
 800ef4e:	2b01      	cmp	r3, #1
 800ef50:	d106      	bne.n	800ef60 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2201      	movs	r2, #1
 800ef56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 f92b 	bl	800f1b6 <USBD_CtlSendStatus>
  }
}
 800ef60:	bf00      	nop
 800ef62:	3708      	adds	r7, #8
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef78:	b2db      	uxtb	r3, r3
 800ef7a:	3b01      	subs	r3, #1
 800ef7c:	2b02      	cmp	r3, #2
 800ef7e:	d80b      	bhi.n	800ef98 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	885b      	ldrh	r3, [r3, #2]
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d10c      	bne.n	800efa2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f000 f910 	bl	800f1b6 <USBD_CtlSendStatus>
      }
      break;
 800ef96:	e004      	b.n	800efa2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ef98:	6839      	ldr	r1, [r7, #0]
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f000 f840 	bl	800f020 <USBD_CtlError>
      break;
 800efa0:	e000      	b.n	800efa4 <USBD_ClrFeature+0x3c>
      break;
 800efa2:	bf00      	nop
  }
}
 800efa4:	bf00      	nop
 800efa6:	3708      	adds	r7, #8
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}

0800efac <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b084      	sub	sp, #16
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	781a      	ldrb	r2, [r3, #0]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	3301      	adds	r3, #1
 800efc6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	781a      	ldrb	r2, [r3, #0]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	3301      	adds	r3, #1
 800efd4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800efd6:	68f8      	ldr	r0, [r7, #12]
 800efd8:	f7ff fa92 	bl	800e500 <SWAPBYTE>
 800efdc:	4603      	mov	r3, r0
 800efde:	461a      	mov	r2, r3
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	3301      	adds	r3, #1
 800efe8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	3301      	adds	r3, #1
 800efee:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800eff0:	68f8      	ldr	r0, [r7, #12]
 800eff2:	f7ff fa85 	bl	800e500 <SWAPBYTE>
 800eff6:	4603      	mov	r3, r0
 800eff8:	461a      	mov	r2, r3
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	3301      	adds	r3, #1
 800f002:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	3301      	adds	r3, #1
 800f008:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f00a:	68f8      	ldr	r0, [r7, #12]
 800f00c:	f7ff fa78 	bl	800e500 <SWAPBYTE>
 800f010:	4603      	mov	r3, r0
 800f012:	461a      	mov	r2, r3
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	80da      	strh	r2, [r3, #6]
}
 800f018:	bf00      	nop
 800f01a:	3710      	adds	r7, #16
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b082      	sub	sp, #8
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f02a:	2180      	movs	r1, #128	@ 0x80
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f000 fc6f 	bl	800f910 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f032:	2100      	movs	r1, #0
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f000 fc6b 	bl	800f910 <USBD_LL_StallEP>
}
 800f03a:	bf00      	nop
 800f03c:	3708      	adds	r7, #8
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}

0800f042 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f042:	b580      	push	{r7, lr}
 800f044:	b086      	sub	sp, #24
 800f046:	af00      	add	r7, sp, #0
 800f048:	60f8      	str	r0, [r7, #12]
 800f04a:	60b9      	str	r1, [r7, #8]
 800f04c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f04e:	2300      	movs	r3, #0
 800f050:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d036      	beq.n	800f0c6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f05c:	6938      	ldr	r0, [r7, #16]
 800f05e:	f000 f836 	bl	800f0ce <USBD_GetLen>
 800f062:	4603      	mov	r3, r0
 800f064:	3301      	adds	r3, #1
 800f066:	b29b      	uxth	r3, r3
 800f068:	005b      	lsls	r3, r3, #1
 800f06a:	b29a      	uxth	r2, r3
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f070:	7dfb      	ldrb	r3, [r7, #23]
 800f072:	68ba      	ldr	r2, [r7, #8]
 800f074:	4413      	add	r3, r2
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	7812      	ldrb	r2, [r2, #0]
 800f07a:	701a      	strb	r2, [r3, #0]
  idx++;
 800f07c:	7dfb      	ldrb	r3, [r7, #23]
 800f07e:	3301      	adds	r3, #1
 800f080:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f082:	7dfb      	ldrb	r3, [r7, #23]
 800f084:	68ba      	ldr	r2, [r7, #8]
 800f086:	4413      	add	r3, r2
 800f088:	2203      	movs	r2, #3
 800f08a:	701a      	strb	r2, [r3, #0]
  idx++;
 800f08c:	7dfb      	ldrb	r3, [r7, #23]
 800f08e:	3301      	adds	r3, #1
 800f090:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f092:	e013      	b.n	800f0bc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f094:	7dfb      	ldrb	r3, [r7, #23]
 800f096:	68ba      	ldr	r2, [r7, #8]
 800f098:	4413      	add	r3, r2
 800f09a:	693a      	ldr	r2, [r7, #16]
 800f09c:	7812      	ldrb	r2, [r2, #0]
 800f09e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	613b      	str	r3, [r7, #16]
    idx++;
 800f0a6:	7dfb      	ldrb	r3, [r7, #23]
 800f0a8:	3301      	adds	r3, #1
 800f0aa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f0ac:	7dfb      	ldrb	r3, [r7, #23]
 800f0ae:	68ba      	ldr	r2, [r7, #8]
 800f0b0:	4413      	add	r3, r2
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	701a      	strb	r2, [r3, #0]
    idx++;
 800f0b6:	7dfb      	ldrb	r3, [r7, #23]
 800f0b8:	3301      	adds	r3, #1
 800f0ba:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d1e7      	bne.n	800f094 <USBD_GetString+0x52>
 800f0c4:	e000      	b.n	800f0c8 <USBD_GetString+0x86>
    return;
 800f0c6:	bf00      	nop
  }
}
 800f0c8:	3718      	adds	r7, #24
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}

0800f0ce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f0ce:	b480      	push	{r7}
 800f0d0:	b085      	sub	sp, #20
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f0de:	e005      	b.n	800f0ec <USBD_GetLen+0x1e>
  {
    len++;
 800f0e0:	7bfb      	ldrb	r3, [r7, #15]
 800f0e2:	3301      	adds	r3, #1
 800f0e4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d1f5      	bne.n	800f0e0 <USBD_GetLen+0x12>
  }

  return len;
 800f0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3714      	adds	r7, #20
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f100:	4770      	bx	lr

0800f102 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f102:	b580      	push	{r7, lr}
 800f104:	b084      	sub	sp, #16
 800f106:	af00      	add	r7, sp, #0
 800f108:	60f8      	str	r0, [r7, #12]
 800f10a:	60b9      	str	r1, [r7, #8]
 800f10c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	2202      	movs	r2, #2
 800f112:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	687a      	ldr	r2, [r7, #4]
 800f120:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	68ba      	ldr	r2, [r7, #8]
 800f126:	2100      	movs	r1, #0
 800f128:	68f8      	ldr	r0, [r7, #12]
 800f12a:	f000 fc7a 	bl	800fa22 <USBD_LL_Transmit>

  return USBD_OK;
 800f12e:	2300      	movs	r3, #0
}
 800f130:	4618      	mov	r0, r3
 800f132:	3710      	adds	r7, #16
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b084      	sub	sp, #16
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	60b9      	str	r1, [r7, #8]
 800f142:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	68ba      	ldr	r2, [r7, #8]
 800f148:	2100      	movs	r1, #0
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	f000 fc69 	bl	800fa22 <USBD_LL_Transmit>

  return USBD_OK;
 800f150:	2300      	movs	r3, #0
}
 800f152:	4618      	mov	r0, r3
 800f154:	3710      	adds	r7, #16
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}

0800f15a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f15a:	b580      	push	{r7, lr}
 800f15c:	b084      	sub	sp, #16
 800f15e:	af00      	add	r7, sp, #0
 800f160:	60f8      	str	r0, [r7, #12]
 800f162:	60b9      	str	r1, [r7, #8]
 800f164:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2203      	movs	r2, #3
 800f16a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	687a      	ldr	r2, [r7, #4]
 800f17a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	68ba      	ldr	r2, [r7, #8]
 800f182:	2100      	movs	r1, #0
 800f184:	68f8      	ldr	r0, [r7, #12]
 800f186:	f000 fc6d 	bl	800fa64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f18a:	2300      	movs	r3, #0
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3710      	adds	r7, #16
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	60b9      	str	r1, [r7, #8]
 800f19e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	68ba      	ldr	r2, [r7, #8]
 800f1a4:	2100      	movs	r1, #0
 800f1a6:	68f8      	ldr	r0, [r7, #12]
 800f1a8:	f000 fc5c 	bl	800fa64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f1ac:	2300      	movs	r3, #0
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3710      	adds	r7, #16
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}

0800f1b6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f1b6:	b580      	push	{r7, lr}
 800f1b8:	b082      	sub	sp, #8
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2204      	movs	r2, #4
 800f1c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	2100      	movs	r1, #0
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f000 fc28 	bl	800fa22 <USBD_LL_Transmit>

  return USBD_OK;
 800f1d2:	2300      	movs	r3, #0
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3708      	adds	r7, #8
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b082      	sub	sp, #8
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2205      	movs	r2, #5
 800f1e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	2100      	movs	r1, #0
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f000 fc36 	bl	800fa64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f1f8:	2300      	movs	r3, #0
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3708      	adds	r7, #8
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
	...

0800f204 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800f208:	2200      	movs	r2, #0
 800f20a:	4912      	ldr	r1, [pc, #72]	@ (800f254 <MX_USB_Device_Init+0x50>)
 800f20c:	4812      	ldr	r0, [pc, #72]	@ (800f258 <MX_USB_Device_Init+0x54>)
 800f20e:	f7fe fed9 	bl	800dfc4 <USBD_Init>
 800f212:	4603      	mov	r3, r0
 800f214:	2b00      	cmp	r3, #0
 800f216:	d001      	beq.n	800f21c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800f218:	f7f3 f874 	bl	8002304 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800f21c:	490f      	ldr	r1, [pc, #60]	@ (800f25c <MX_USB_Device_Init+0x58>)
 800f21e:	480e      	ldr	r0, [pc, #56]	@ (800f258 <MX_USB_Device_Init+0x54>)
 800f220:	f7fe ff00 	bl	800e024 <USBD_RegisterClass>
 800f224:	4603      	mov	r3, r0
 800f226:	2b00      	cmp	r3, #0
 800f228:	d001      	beq.n	800f22e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800f22a:	f7f3 f86b 	bl	8002304 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800f22e:	490c      	ldr	r1, [pc, #48]	@ (800f260 <MX_USB_Device_Init+0x5c>)
 800f230:	4809      	ldr	r0, [pc, #36]	@ (800f258 <MX_USB_Device_Init+0x54>)
 800f232:	f7fe fe51 	bl	800ded8 <USBD_CDC_RegisterInterface>
 800f236:	4603      	mov	r3, r0
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d001      	beq.n	800f240 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800f23c:	f7f3 f862 	bl	8002304 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800f240:	4805      	ldr	r0, [pc, #20]	@ (800f258 <MX_USB_Device_Init+0x54>)
 800f242:	f7fe ff16 	bl	800e072 <USBD_Start>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d001      	beq.n	800f250 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800f24c:	f7f3 f85a 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800f250:	bf00      	nop
 800f252:	bd80      	pop	{r7, pc}
 800f254:	20000134 	.word	0x20000134
 800f258:	20001694 	.word	0x20001694
 800f25c:	2000001c 	.word	0x2000001c
 800f260:	20000120 	.word	0x20000120

0800f264 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f268:	2200      	movs	r2, #0
 800f26a:	4905      	ldr	r1, [pc, #20]	@ (800f280 <CDC_Init_FS+0x1c>)
 800f26c:	4805      	ldr	r0, [pc, #20]	@ (800f284 <CDC_Init_FS+0x20>)
 800f26e:	f7fe fe48 	bl	800df02 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f272:	4905      	ldr	r1, [pc, #20]	@ (800f288 <CDC_Init_FS+0x24>)
 800f274:	4803      	ldr	r0, [pc, #12]	@ (800f284 <CDC_Init_FS+0x20>)
 800f276:	f7fe fe62 	bl	800df3e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f27a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	20001d64 	.word	0x20001d64
 800f284:	20001694 	.word	0x20001694
 800f288:	20001964 	.word	0x20001964

0800f28c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f28c:	b480      	push	{r7}
 800f28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f290:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f292:	4618      	mov	r0, r3
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr

0800f29c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f29c:	b480      	push	{r7}
 800f29e:	b083      	sub	sp, #12
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	6039      	str	r1, [r7, #0]
 800f2a6:	71fb      	strb	r3, [r7, #7]
 800f2a8:	4613      	mov	r3, r2
 800f2aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f2ac:	79fb      	ldrb	r3, [r7, #7]
 800f2ae:	2b23      	cmp	r3, #35	@ 0x23
 800f2b0:	d84a      	bhi.n	800f348 <CDC_Control_FS+0xac>
 800f2b2:	a201      	add	r2, pc, #4	@ (adr r2, 800f2b8 <CDC_Control_FS+0x1c>)
 800f2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b8:	0800f349 	.word	0x0800f349
 800f2bc:	0800f349 	.word	0x0800f349
 800f2c0:	0800f349 	.word	0x0800f349
 800f2c4:	0800f349 	.word	0x0800f349
 800f2c8:	0800f349 	.word	0x0800f349
 800f2cc:	0800f349 	.word	0x0800f349
 800f2d0:	0800f349 	.word	0x0800f349
 800f2d4:	0800f349 	.word	0x0800f349
 800f2d8:	0800f349 	.word	0x0800f349
 800f2dc:	0800f349 	.word	0x0800f349
 800f2e0:	0800f349 	.word	0x0800f349
 800f2e4:	0800f349 	.word	0x0800f349
 800f2e8:	0800f349 	.word	0x0800f349
 800f2ec:	0800f349 	.word	0x0800f349
 800f2f0:	0800f349 	.word	0x0800f349
 800f2f4:	0800f349 	.word	0x0800f349
 800f2f8:	0800f349 	.word	0x0800f349
 800f2fc:	0800f349 	.word	0x0800f349
 800f300:	0800f349 	.word	0x0800f349
 800f304:	0800f349 	.word	0x0800f349
 800f308:	0800f349 	.word	0x0800f349
 800f30c:	0800f349 	.word	0x0800f349
 800f310:	0800f349 	.word	0x0800f349
 800f314:	0800f349 	.word	0x0800f349
 800f318:	0800f349 	.word	0x0800f349
 800f31c:	0800f349 	.word	0x0800f349
 800f320:	0800f349 	.word	0x0800f349
 800f324:	0800f349 	.word	0x0800f349
 800f328:	0800f349 	.word	0x0800f349
 800f32c:	0800f349 	.word	0x0800f349
 800f330:	0800f349 	.word	0x0800f349
 800f334:	0800f349 	.word	0x0800f349
 800f338:	0800f349 	.word	0x0800f349
 800f33c:	0800f349 	.word	0x0800f349
 800f340:	0800f349 	.word	0x0800f349
 800f344:	0800f349 	.word	0x0800f349
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f348:	bf00      	nop
  }

  return (USBD_OK);
 800f34a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	370c      	adds	r7, #12
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr

0800f358 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f362:	6879      	ldr	r1, [r7, #4]
 800f364:	4805      	ldr	r0, [pc, #20]	@ (800f37c <CDC_Receive_FS+0x24>)
 800f366:	f7fe fdea 	bl	800df3e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f36a:	4804      	ldr	r0, [pc, #16]	@ (800f37c <CDC_Receive_FS+0x24>)
 800f36c:	f7fe fe00 	bl	800df70 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f370:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f372:	4618      	mov	r0, r3
 800f374:	3708      	adds	r7, #8
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	bf00      	nop
 800f37c:	20001694 	.word	0x20001694

0800f380 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f380:	b480      	push	{r7}
 800f382:	b087      	sub	sp, #28
 800f384:	af00      	add	r7, sp, #0
 800f386:	60f8      	str	r0, [r7, #12]
 800f388:	60b9      	str	r1, [r7, #8]
 800f38a:	4613      	mov	r3, r2
 800f38c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f38e:	2300      	movs	r3, #0
 800f390:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f392:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f396:	4618      	mov	r0, r3
 800f398:	371c      	adds	r7, #28
 800f39a:	46bd      	mov	sp, r7
 800f39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a0:	4770      	bx	lr
	...

0800f3a4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	b083      	sub	sp, #12
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	6039      	str	r1, [r7, #0]
 800f3ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	2212      	movs	r2, #18
 800f3b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800f3b6:	4b03      	ldr	r3, [pc, #12]	@ (800f3c4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr
 800f3c4:	20000154 	.word	0x20000154

0800f3c8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b083      	sub	sp, #12
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	6039      	str	r1, [r7, #0]
 800f3d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	2204      	movs	r2, #4
 800f3d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f3da:	4b03      	ldr	r3, [pc, #12]	@ (800f3e8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	370c      	adds	r7, #12
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e6:	4770      	bx	lr
 800f3e8:	20000168 	.word	0x20000168

0800f3ec <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	6039      	str	r1, [r7, #0]
 800f3f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f3f8:	79fb      	ldrb	r3, [r7, #7]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d105      	bne.n	800f40a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f3fe:	683a      	ldr	r2, [r7, #0]
 800f400:	4907      	ldr	r1, [pc, #28]	@ (800f420 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f402:	4808      	ldr	r0, [pc, #32]	@ (800f424 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f404:	f7ff fe1d 	bl	800f042 <USBD_GetString>
 800f408:	e004      	b.n	800f414 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f40a:	683a      	ldr	r2, [r7, #0]
 800f40c:	4904      	ldr	r1, [pc, #16]	@ (800f420 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f40e:	4805      	ldr	r0, [pc, #20]	@ (800f424 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f410:	f7ff fe17 	bl	800f042 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f414:	4b02      	ldr	r3, [pc, #8]	@ (800f420 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800f416:	4618      	mov	r0, r3
 800f418:	3708      	adds	r7, #8
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
 800f41e:	bf00      	nop
 800f420:	20002164 	.word	0x20002164
 800f424:	08014350 	.word	0x08014350

0800f428 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b082      	sub	sp, #8
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	4603      	mov	r3, r0
 800f430:	6039      	str	r1, [r7, #0]
 800f432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f434:	683a      	ldr	r2, [r7, #0]
 800f436:	4904      	ldr	r1, [pc, #16]	@ (800f448 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800f438:	4804      	ldr	r0, [pc, #16]	@ (800f44c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800f43a:	f7ff fe02 	bl	800f042 <USBD_GetString>
  return USBD_StrDesc;
 800f43e:	4b02      	ldr	r3, [pc, #8]	@ (800f448 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800f440:	4618      	mov	r0, r3
 800f442:	3708      	adds	r7, #8
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}
 800f448:	20002164 	.word	0x20002164
 800f44c:	08014368 	.word	0x08014368

0800f450 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	4603      	mov	r3, r0
 800f458:	6039      	str	r1, [r7, #0]
 800f45a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	221a      	movs	r2, #26
 800f460:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f462:	f000 f843 	bl	800f4ec <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f466:	4b02      	ldr	r3, [pc, #8]	@ (800f470 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3708      	adds	r7, #8
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}
 800f470:	2000016c 	.word	0x2000016c

0800f474 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
 800f47a:	4603      	mov	r3, r0
 800f47c:	6039      	str	r1, [r7, #0]
 800f47e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f480:	79fb      	ldrb	r3, [r7, #7]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d105      	bne.n	800f492 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f486:	683a      	ldr	r2, [r7, #0]
 800f488:	4907      	ldr	r1, [pc, #28]	@ (800f4a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f48a:	4808      	ldr	r0, [pc, #32]	@ (800f4ac <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f48c:	f7ff fdd9 	bl	800f042 <USBD_GetString>
 800f490:	e004      	b.n	800f49c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f492:	683a      	ldr	r2, [r7, #0]
 800f494:	4904      	ldr	r1, [pc, #16]	@ (800f4a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f496:	4805      	ldr	r0, [pc, #20]	@ (800f4ac <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f498:	f7ff fdd3 	bl	800f042 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f49c:	4b02      	ldr	r3, [pc, #8]	@ (800f4a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3708      	adds	r7, #8
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
 800f4a6:	bf00      	nop
 800f4a8:	20002164 	.word	0x20002164
 800f4ac:	0801437c 	.word	0x0801437c

0800f4b0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b082      	sub	sp, #8
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	6039      	str	r1, [r7, #0]
 800f4ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f4bc:	79fb      	ldrb	r3, [r7, #7]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d105      	bne.n	800f4ce <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f4c2:	683a      	ldr	r2, [r7, #0]
 800f4c4:	4907      	ldr	r1, [pc, #28]	@ (800f4e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f4c6:	4808      	ldr	r0, [pc, #32]	@ (800f4e8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f4c8:	f7ff fdbb 	bl	800f042 <USBD_GetString>
 800f4cc:	e004      	b.n	800f4d8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f4ce:	683a      	ldr	r2, [r7, #0]
 800f4d0:	4904      	ldr	r1, [pc, #16]	@ (800f4e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f4d2:	4805      	ldr	r0, [pc, #20]	@ (800f4e8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f4d4:	f7ff fdb5 	bl	800f042 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f4d8:	4b02      	ldr	r3, [pc, #8]	@ (800f4e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3708      	adds	r7, #8
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	20002164 	.word	0x20002164
 800f4e8:	08014388 	.word	0x08014388

0800f4ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b084      	sub	sp, #16
 800f4f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f4f2:	4b0f      	ldr	r3, [pc, #60]	@ (800f530 <Get_SerialNum+0x44>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f4f8:	4b0e      	ldr	r3, [pc, #56]	@ (800f534 <Get_SerialNum+0x48>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f4fe:	4b0e      	ldr	r3, [pc, #56]	@ (800f538 <Get_SerialNum+0x4c>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f504:	68fa      	ldr	r2, [r7, #12]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	4413      	add	r3, r2
 800f50a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d009      	beq.n	800f526 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f512:	2208      	movs	r2, #8
 800f514:	4909      	ldr	r1, [pc, #36]	@ (800f53c <Get_SerialNum+0x50>)
 800f516:	68f8      	ldr	r0, [r7, #12]
 800f518:	f000 f814 	bl	800f544 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f51c:	2204      	movs	r2, #4
 800f51e:	4908      	ldr	r1, [pc, #32]	@ (800f540 <Get_SerialNum+0x54>)
 800f520:	68b8      	ldr	r0, [r7, #8]
 800f522:	f000 f80f 	bl	800f544 <IntToUnicode>
  }
}
 800f526:	bf00      	nop
 800f528:	3710      	adds	r7, #16
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}
 800f52e:	bf00      	nop
 800f530:	1fff7590 	.word	0x1fff7590
 800f534:	1fff7594 	.word	0x1fff7594
 800f538:	1fff7598 	.word	0x1fff7598
 800f53c:	2000016e 	.word	0x2000016e
 800f540:	2000017e 	.word	0x2000017e

0800f544 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f544:	b480      	push	{r7}
 800f546:	b087      	sub	sp, #28
 800f548:	af00      	add	r7, sp, #0
 800f54a:	60f8      	str	r0, [r7, #12]
 800f54c:	60b9      	str	r1, [r7, #8]
 800f54e:	4613      	mov	r3, r2
 800f550:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f552:	2300      	movs	r3, #0
 800f554:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f556:	2300      	movs	r3, #0
 800f558:	75fb      	strb	r3, [r7, #23]
 800f55a:	e027      	b.n	800f5ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	0f1b      	lsrs	r3, r3, #28
 800f560:	2b09      	cmp	r3, #9
 800f562:	d80b      	bhi.n	800f57c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	0f1b      	lsrs	r3, r3, #28
 800f568:	b2da      	uxtb	r2, r3
 800f56a:	7dfb      	ldrb	r3, [r7, #23]
 800f56c:	005b      	lsls	r3, r3, #1
 800f56e:	4619      	mov	r1, r3
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	440b      	add	r3, r1
 800f574:	3230      	adds	r2, #48	@ 0x30
 800f576:	b2d2      	uxtb	r2, r2
 800f578:	701a      	strb	r2, [r3, #0]
 800f57a:	e00a      	b.n	800f592 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	0f1b      	lsrs	r3, r3, #28
 800f580:	b2da      	uxtb	r2, r3
 800f582:	7dfb      	ldrb	r3, [r7, #23]
 800f584:	005b      	lsls	r3, r3, #1
 800f586:	4619      	mov	r1, r3
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	440b      	add	r3, r1
 800f58c:	3237      	adds	r2, #55	@ 0x37
 800f58e:	b2d2      	uxtb	r2, r2
 800f590:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	011b      	lsls	r3, r3, #4
 800f596:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f598:	7dfb      	ldrb	r3, [r7, #23]
 800f59a:	005b      	lsls	r3, r3, #1
 800f59c:	3301      	adds	r3, #1
 800f59e:	68ba      	ldr	r2, [r7, #8]
 800f5a0:	4413      	add	r3, r2
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f5a6:	7dfb      	ldrb	r3, [r7, #23]
 800f5a8:	3301      	adds	r3, #1
 800f5aa:	75fb      	strb	r3, [r7, #23]
 800f5ac:	7dfa      	ldrb	r2, [r7, #23]
 800f5ae:	79fb      	ldrb	r3, [r7, #7]
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d3d3      	bcc.n	800f55c <IntToUnicode+0x18>
  }
}
 800f5b4:	bf00      	nop
 800f5b6:	bf00      	nop
 800f5b8:	371c      	adds	r7, #28
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr
	...

0800f5c4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b098      	sub	sp, #96	@ 0x60
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f5cc:	f107 030c 	add.w	r3, r7, #12
 800f5d0:	2254      	movs	r2, #84	@ 0x54
 800f5d2:	2100      	movs	r1, #0
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f001 fa8a 	bl	8010aee <memset>
  if(pcdHandle->Instance==USB)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	4a15      	ldr	r2, [pc, #84]	@ (800f634 <HAL_PCD_MspInit+0x70>)
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	d122      	bne.n	800f62a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f5e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f5e8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f5ee:	f107 030c 	add.w	r3, r7, #12
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7f9 fa9a 	bl	8008b2c <HAL_RCCEx_PeriphCLKConfig>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d001      	beq.n	800f602 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800f5fe:	f7f2 fe81 	bl	8002304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f602:	4b0d      	ldr	r3, [pc, #52]	@ (800f638 <HAL_PCD_MspInit+0x74>)
 800f604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f606:	4a0c      	ldr	r2, [pc, #48]	@ (800f638 <HAL_PCD_MspInit+0x74>)
 800f608:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f60c:	6593      	str	r3, [r2, #88]	@ 0x58
 800f60e:	4b0a      	ldr	r3, [pc, #40]	@ (800f638 <HAL_PCD_MspInit+0x74>)
 800f610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f612:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f616:	60bb      	str	r3, [r7, #8]
 800f618:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800f61a:	2200      	movs	r2, #0
 800f61c:	2100      	movs	r1, #0
 800f61e:	2014      	movs	r0, #20
 800f620:	f7f5 fba9 	bl	8004d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800f624:	2014      	movs	r0, #20
 800f626:	f7f5 fbc0 	bl	8004daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800f62a:	bf00      	nop
 800f62c:	3760      	adds	r7, #96	@ 0x60
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	40005c00 	.word	0x40005c00
 800f638:	40021000 	.word	0x40021000

0800f63c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b082      	sub	sp, #8
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800f650:	4619      	mov	r1, r3
 800f652:	4610      	mov	r0, r2
 800f654:	f7fe fd58 	bl	800e108 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800f658:	bf00      	nop
 800f65a:	3708      	adds	r7, #8
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b082      	sub	sp, #8
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	460b      	mov	r3, r1
 800f66a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f672:	78fa      	ldrb	r2, [r7, #3]
 800f674:	6879      	ldr	r1, [r7, #4]
 800f676:	4613      	mov	r3, r2
 800f678:	009b      	lsls	r3, r3, #2
 800f67a:	4413      	add	r3, r2
 800f67c:	00db      	lsls	r3, r3, #3
 800f67e:	440b      	add	r3, r1
 800f680:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	78fb      	ldrb	r3, [r7, #3]
 800f688:	4619      	mov	r1, r3
 800f68a:	f7fe fd92 	bl	800e1b2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800f68e:	bf00      	nop
 800f690:	3708      	adds	r7, #8
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}

0800f696 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f696:	b580      	push	{r7, lr}
 800f698:	b082      	sub	sp, #8
 800f69a:	af00      	add	r7, sp, #0
 800f69c:	6078      	str	r0, [r7, #4]
 800f69e:	460b      	mov	r3, r1
 800f6a0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f6a8:	78fa      	ldrb	r2, [r7, #3]
 800f6aa:	6879      	ldr	r1, [r7, #4]
 800f6ac:	4613      	mov	r3, r2
 800f6ae:	009b      	lsls	r3, r3, #2
 800f6b0:	4413      	add	r3, r2
 800f6b2:	00db      	lsls	r3, r3, #3
 800f6b4:	440b      	add	r3, r1
 800f6b6:	3324      	adds	r3, #36	@ 0x24
 800f6b8:	681a      	ldr	r2, [r3, #0]
 800f6ba:	78fb      	ldrb	r3, [r7, #3]
 800f6bc:	4619      	mov	r1, r3
 800f6be:	f7fe fddb 	bl	800e278 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800f6c2:	bf00      	nop
 800f6c4:	3708      	adds	r7, #8
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}

0800f6ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6ca:	b580      	push	{r7, lr}
 800f6cc:	b082      	sub	sp, #8
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7fe feef 	bl	800e4bc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800f6de:	bf00      	nop
 800f6e0:	3708      	adds	r7, #8
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b084      	sub	sp, #16
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	795b      	ldrb	r3, [r3, #5]
 800f6f6:	2b02      	cmp	r3, #2
 800f6f8:	d001      	beq.n	800f6fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f6fa:	f7f2 fe03 	bl	8002304 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f704:	7bfa      	ldrb	r2, [r7, #15]
 800f706:	4611      	mov	r1, r2
 800f708:	4618      	mov	r0, r3
 800f70a:	f7fe fe99 	bl	800e440 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f714:	4618      	mov	r0, r3
 800f716:	f7fe fe45 	bl	800e3a4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800f71a:	bf00      	nop
 800f71c:	3710      	adds	r7, #16
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}
	...

0800f724 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f732:	4618      	mov	r0, r3
 800f734:	f7fe fe94 	bl	800e460 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	7a5b      	ldrb	r3, [r3, #9]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d005      	beq.n	800f74c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f740:	4b04      	ldr	r3, [pc, #16]	@ (800f754 <HAL_PCD_SuspendCallback+0x30>)
 800f742:	691b      	ldr	r3, [r3, #16]
 800f744:	4a03      	ldr	r2, [pc, #12]	@ (800f754 <HAL_PCD_SuspendCallback+0x30>)
 800f746:	f043 0306 	orr.w	r3, r3, #6
 800f74a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800f74c:	bf00      	nop
 800f74e:	3708      	adds	r7, #8
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}
 800f754:	e000ed00 	.word	0xe000ed00

0800f758 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	7a5b      	ldrb	r3, [r3, #9]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d007      	beq.n	800f778 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f768:	4b08      	ldr	r3, [pc, #32]	@ (800f78c <HAL_PCD_ResumeCallback+0x34>)
 800f76a:	691b      	ldr	r3, [r3, #16]
 800f76c:	4a07      	ldr	r2, [pc, #28]	@ (800f78c <HAL_PCD_ResumeCallback+0x34>)
 800f76e:	f023 0306 	bic.w	r3, r3, #6
 800f772:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f774:	f000 f9f8 	bl	800fb68 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f77e:	4618      	mov	r0, r3
 800f780:	f7fe fe84 	bl	800e48c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800f784:	bf00      	nop
 800f786:	3708      	adds	r7, #8
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}
 800f78c:	e000ed00 	.word	0xe000ed00

0800f790 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800f798:	4a2b      	ldr	r2, [pc, #172]	@ (800f848 <USBD_LL_Init+0xb8>)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	4a29      	ldr	r2, [pc, #164]	@ (800f848 <USBD_LL_Init+0xb8>)
 800f7a4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800f7a8:	4b27      	ldr	r3, [pc, #156]	@ (800f848 <USBD_LL_Init+0xb8>)
 800f7aa:	4a28      	ldr	r2, [pc, #160]	@ (800f84c <USBD_LL_Init+0xbc>)
 800f7ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800f7ae:	4b26      	ldr	r3, [pc, #152]	@ (800f848 <USBD_LL_Init+0xb8>)
 800f7b0:	2208      	movs	r2, #8
 800f7b2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800f7b4:	4b24      	ldr	r3, [pc, #144]	@ (800f848 <USBD_LL_Init+0xb8>)
 800f7b6:	2202      	movs	r2, #2
 800f7b8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f7ba:	4b23      	ldr	r3, [pc, #140]	@ (800f848 <USBD_LL_Init+0xb8>)
 800f7bc:	2202      	movs	r2, #2
 800f7be:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800f7c0:	4b21      	ldr	r3, [pc, #132]	@ (800f848 <USBD_LL_Init+0xb8>)
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800f7c6:	4b20      	ldr	r3, [pc, #128]	@ (800f848 <USBD_LL_Init+0xb8>)
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800f7cc:	4b1e      	ldr	r3, [pc, #120]	@ (800f848 <USBD_LL_Init+0xb8>)
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800f7d2:	4b1d      	ldr	r3, [pc, #116]	@ (800f848 <USBD_LL_Init+0xb8>)
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800f7d8:	481b      	ldr	r0, [pc, #108]	@ (800f848 <USBD_LL_Init+0xb8>)
 800f7da:	f7f6 fe97 	bl	800650c <HAL_PCD_Init>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d001      	beq.n	800f7e8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800f7e4:	f7f2 fd8e 	bl	8002304 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f7ee:	2318      	movs	r3, #24
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	2100      	movs	r1, #0
 800f7f4:	f7f8 fb1e 	bl	8007e34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f7fe:	2358      	movs	r3, #88	@ 0x58
 800f800:	2200      	movs	r2, #0
 800f802:	2180      	movs	r1, #128	@ 0x80
 800f804:	f7f8 fb16 	bl	8007e34 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f80e:	23c0      	movs	r3, #192	@ 0xc0
 800f810:	2200      	movs	r2, #0
 800f812:	2181      	movs	r1, #129	@ 0x81
 800f814:	f7f8 fb0e 	bl	8007e34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f81e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800f822:	2200      	movs	r2, #0
 800f824:	2101      	movs	r1, #1
 800f826:	f7f8 fb05 	bl	8007e34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f830:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f834:	2200      	movs	r2, #0
 800f836:	2182      	movs	r1, #130	@ 0x82
 800f838:	f7f8 fafc 	bl	8007e34 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800f83c:	2300      	movs	r3, #0
}
 800f83e:	4618      	mov	r0, r3
 800f840:	3708      	adds	r7, #8
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
 800f846:	bf00      	nop
 800f848:	20002364 	.word	0x20002364
 800f84c:	40005c00 	.word	0x40005c00

0800f850 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b084      	sub	sp, #16
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f858:	2300      	movs	r3, #0
 800f85a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f85c:	2300      	movs	r3, #0
 800f85e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f866:	4618      	mov	r0, r3
 800f868:	f7f6 ff1e 	bl	80066a8 <HAL_PCD_Start>
 800f86c:	4603      	mov	r3, r0
 800f86e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f870:	7bfb      	ldrb	r3, [r7, #15]
 800f872:	4618      	mov	r0, r3
 800f874:	f000 f97e 	bl	800fb74 <USBD_Get_USB_Status>
 800f878:	4603      	mov	r3, r0
 800f87a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f87c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3710      	adds	r7, #16
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}

0800f886 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f886:	b580      	push	{r7, lr}
 800f888:	b084      	sub	sp, #16
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	6078      	str	r0, [r7, #4]
 800f88e:	4608      	mov	r0, r1
 800f890:	4611      	mov	r1, r2
 800f892:	461a      	mov	r2, r3
 800f894:	4603      	mov	r3, r0
 800f896:	70fb      	strb	r3, [r7, #3]
 800f898:	460b      	mov	r3, r1
 800f89a:	70bb      	strb	r3, [r7, #2]
 800f89c:	4613      	mov	r3, r2
 800f89e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f8ae:	78bb      	ldrb	r3, [r7, #2]
 800f8b0:	883a      	ldrh	r2, [r7, #0]
 800f8b2:	78f9      	ldrb	r1, [r7, #3]
 800f8b4:	f7f7 f865 	bl	8006982 <HAL_PCD_EP_Open>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8bc:	7bfb      	ldrb	r3, [r7, #15]
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f000 f958 	bl	800fb74 <USBD_Get_USB_Status>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3710      	adds	r7, #16
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}

0800f8d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8d2:	b580      	push	{r7, lr}
 800f8d4:	b084      	sub	sp, #16
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	6078      	str	r0, [r7, #4]
 800f8da:	460b      	mov	r3, r1
 800f8dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f8ec:	78fa      	ldrb	r2, [r7, #3]
 800f8ee:	4611      	mov	r1, r2
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7f7 f8a5 	bl	8006a40 <HAL_PCD_EP_Close>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8fa:	7bfb      	ldrb	r3, [r7, #15]
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f000 f939 	bl	800fb74 <USBD_Get_USB_Status>
 800f902:	4603      	mov	r3, r0
 800f904:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f906:	7bbb      	ldrb	r3, [r7, #14]
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3710      	adds	r7, #16
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	460b      	mov	r3, r1
 800f91a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f91c:	2300      	movs	r3, #0
 800f91e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f920:	2300      	movs	r3, #0
 800f922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f92a:	78fa      	ldrb	r2, [r7, #3]
 800f92c:	4611      	mov	r1, r2
 800f92e:	4618      	mov	r0, r3
 800f930:	f7f7 f94e 	bl	8006bd0 <HAL_PCD_EP_SetStall>
 800f934:	4603      	mov	r3, r0
 800f936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f938:	7bfb      	ldrb	r3, [r7, #15]
 800f93a:	4618      	mov	r0, r3
 800f93c:	f000 f91a 	bl	800fb74 <USBD_Get_USB_Status>
 800f940:	4603      	mov	r3, r0
 800f942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f944:	7bbb      	ldrb	r3, [r7, #14]
}
 800f946:	4618      	mov	r0, r3
 800f948:	3710      	adds	r7, #16
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}

0800f94e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f94e:	b580      	push	{r7, lr}
 800f950:	b084      	sub	sp, #16
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
 800f956:	460b      	mov	r3, r1
 800f958:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f95a:	2300      	movs	r3, #0
 800f95c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f95e:	2300      	movs	r3, #0
 800f960:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f968:	78fa      	ldrb	r2, [r7, #3]
 800f96a:	4611      	mov	r1, r2
 800f96c:	4618      	mov	r0, r3
 800f96e:	f7f7 f981 	bl	8006c74 <HAL_PCD_EP_ClrStall>
 800f972:	4603      	mov	r3, r0
 800f974:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f976:	7bfb      	ldrb	r3, [r7, #15]
 800f978:	4618      	mov	r0, r3
 800f97a:	f000 f8fb 	bl	800fb74 <USBD_Get_USB_Status>
 800f97e:	4603      	mov	r3, r0
 800f980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f982:	7bbb      	ldrb	r3, [r7, #14]
}
 800f984:	4618      	mov	r0, r3
 800f986:	3710      	adds	r7, #16
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f98c:	b480      	push	{r7}
 800f98e:	b085      	sub	sp, #20
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	460b      	mov	r3, r1
 800f996:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f99e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f9a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	da0b      	bge.n	800f9c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f9a8:	78fb      	ldrb	r3, [r7, #3]
 800f9aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f9ae:	68f9      	ldr	r1, [r7, #12]
 800f9b0:	4613      	mov	r3, r2
 800f9b2:	009b      	lsls	r3, r3, #2
 800f9b4:	4413      	add	r3, r2
 800f9b6:	00db      	lsls	r3, r3, #3
 800f9b8:	440b      	add	r3, r1
 800f9ba:	3312      	adds	r3, #18
 800f9bc:	781b      	ldrb	r3, [r3, #0]
 800f9be:	e00b      	b.n	800f9d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f9c0:	78fb      	ldrb	r3, [r7, #3]
 800f9c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f9c6:	68f9      	ldr	r1, [r7, #12]
 800f9c8:	4613      	mov	r3, r2
 800f9ca:	009b      	lsls	r3, r3, #2
 800f9cc:	4413      	add	r3, r2
 800f9ce:	00db      	lsls	r3, r3, #3
 800f9d0:	440b      	add	r3, r1
 800f9d2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800f9d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3714      	adds	r7, #20
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b084      	sub	sp, #16
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	460b      	mov	r3, r1
 800f9ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f9fe:	78fa      	ldrb	r2, [r7, #3]
 800fa00:	4611      	mov	r1, r2
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7f6 ff99 	bl	800693a <HAL_PCD_SetAddress>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa0c:	7bfb      	ldrb	r3, [r7, #15]
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f000 f8b0 	bl	800fb74 <USBD_Get_USB_Status>
 800fa14:	4603      	mov	r3, r0
 800fa16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa18:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3710      	adds	r7, #16
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}

0800fa22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fa22:	b580      	push	{r7, lr}
 800fa24:	b086      	sub	sp, #24
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	60f8      	str	r0, [r7, #12]
 800fa2a:	607a      	str	r2, [r7, #4]
 800fa2c:	603b      	str	r3, [r7, #0]
 800fa2e:	460b      	mov	r3, r1
 800fa30:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa32:	2300      	movs	r3, #0
 800fa34:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa36:	2300      	movs	r3, #0
 800fa38:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fa40:	7af9      	ldrb	r1, [r7, #11]
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	687a      	ldr	r2, [r7, #4]
 800fa46:	f7f7 f88c 	bl	8006b62 <HAL_PCD_EP_Transmit>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa4e:	7dfb      	ldrb	r3, [r7, #23]
 800fa50:	4618      	mov	r0, r3
 800fa52:	f000 f88f 	bl	800fb74 <USBD_Get_USB_Status>
 800fa56:	4603      	mov	r3, r0
 800fa58:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fa5a:	7dbb      	ldrb	r3, [r7, #22]
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3718      	adds	r7, #24
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}

0800fa64 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b086      	sub	sp, #24
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	60f8      	str	r0, [r7, #12]
 800fa6c:	607a      	str	r2, [r7, #4]
 800fa6e:	603b      	str	r3, [r7, #0]
 800fa70:	460b      	mov	r3, r1
 800fa72:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa74:	2300      	movs	r3, #0
 800fa76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fa82:	7af9      	ldrb	r1, [r7, #11]
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	687a      	ldr	r2, [r7, #4]
 800fa88:	f7f7 f822 	bl	8006ad0 <HAL_PCD_EP_Receive>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa90:	7dfb      	ldrb	r3, [r7, #23]
 800fa92:	4618      	mov	r0, r3
 800fa94:	f000 f86e 	bl	800fb74 <USBD_Get_USB_Status>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fa9c:	7dbb      	ldrb	r3, [r7, #22]
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3718      	adds	r7, #24
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}

0800faa6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800faa6:	b580      	push	{r7, lr}
 800faa8:	b082      	sub	sp, #8
 800faaa:	af00      	add	r7, sp, #0
 800faac:	6078      	str	r0, [r7, #4]
 800faae:	460b      	mov	r3, r1
 800fab0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fab8:	78fa      	ldrb	r2, [r7, #3]
 800faba:	4611      	mov	r1, r2
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7f7 f838 	bl	8006b32 <HAL_PCD_EP_GetRxCount>
 800fac2:	4603      	mov	r3, r0
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3708      	adds	r7, #8
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	460b      	mov	r3, r1
 800fad6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800fad8:	78fb      	ldrb	r3, [r7, #3]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d002      	beq.n	800fae4 <HAL_PCDEx_LPM_Callback+0x18>
 800fade:	2b01      	cmp	r3, #1
 800fae0:	d013      	beq.n	800fb0a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800fae2:	e023      	b.n	800fb2c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	7a5b      	ldrb	r3, [r3, #9]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d007      	beq.n	800fafc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800faec:	f000 f83c 	bl	800fb68 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800faf0:	4b10      	ldr	r3, [pc, #64]	@ (800fb34 <HAL_PCDEx_LPM_Callback+0x68>)
 800faf2:	691b      	ldr	r3, [r3, #16]
 800faf4:	4a0f      	ldr	r2, [pc, #60]	@ (800fb34 <HAL_PCDEx_LPM_Callback+0x68>)
 800faf6:	f023 0306 	bic.w	r3, r3, #6
 800fafa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7fe fcc2 	bl	800e48c <USBD_LL_Resume>
    break;
 800fb08:	e010      	b.n	800fb2c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7fe fca5 	bl	800e460 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	7a5b      	ldrb	r3, [r3, #9]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d005      	beq.n	800fb2a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fb1e:	4b05      	ldr	r3, [pc, #20]	@ (800fb34 <HAL_PCDEx_LPM_Callback+0x68>)
 800fb20:	691b      	ldr	r3, [r3, #16]
 800fb22:	4a04      	ldr	r2, [pc, #16]	@ (800fb34 <HAL_PCDEx_LPM_Callback+0x68>)
 800fb24:	f043 0306 	orr.w	r3, r3, #6
 800fb28:	6113      	str	r3, [r2, #16]
    break;
 800fb2a:	bf00      	nop
}
 800fb2c:	bf00      	nop
 800fb2e:	3708      	adds	r7, #8
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}
 800fb34:	e000ed00 	.word	0xe000ed00

0800fb38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b083      	sub	sp, #12
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fb40:	4b03      	ldr	r3, [pc, #12]	@ (800fb50 <USBD_static_malloc+0x18>)
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	370c      	adds	r7, #12
 800fb46:	46bd      	mov	sp, r7
 800fb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4c:	4770      	bx	lr
 800fb4e:	bf00      	nop
 800fb50:	20002640 	.word	0x20002640

0800fb54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fb54:	b480      	push	{r7}
 800fb56:	b083      	sub	sp, #12
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]

}
 800fb5c:	bf00      	nop
 800fb5e:	370c      	adds	r7, #12
 800fb60:	46bd      	mov	sp, r7
 800fb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb66:	4770      	bx	lr

0800fb68 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800fb6c:	f7f1 fc42 	bl	80013f4 <SystemClock_Config>
}
 800fb70:	bf00      	nop
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fb74:	b480      	push	{r7}
 800fb76:	b085      	sub	sp, #20
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fb82:	79fb      	ldrb	r3, [r7, #7]
 800fb84:	2b03      	cmp	r3, #3
 800fb86:	d817      	bhi.n	800fbb8 <USBD_Get_USB_Status+0x44>
 800fb88:	a201      	add	r2, pc, #4	@ (adr r2, 800fb90 <USBD_Get_USB_Status+0x1c>)
 800fb8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb8e:	bf00      	nop
 800fb90:	0800fba1 	.word	0x0800fba1
 800fb94:	0800fba7 	.word	0x0800fba7
 800fb98:	0800fbad 	.word	0x0800fbad
 800fb9c:	0800fbb3 	.word	0x0800fbb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fba0:	2300      	movs	r3, #0
 800fba2:	73fb      	strb	r3, [r7, #15]
    break;
 800fba4:	e00b      	b.n	800fbbe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fba6:	2303      	movs	r3, #3
 800fba8:	73fb      	strb	r3, [r7, #15]
    break;
 800fbaa:	e008      	b.n	800fbbe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fbac:	2301      	movs	r3, #1
 800fbae:	73fb      	strb	r3, [r7, #15]
    break;
 800fbb0:	e005      	b.n	800fbbe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fbb2:	2303      	movs	r3, #3
 800fbb4:	73fb      	strb	r3, [r7, #15]
    break;
 800fbb6:	e002      	b.n	800fbbe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fbb8:	2303      	movs	r3, #3
 800fbba:	73fb      	strb	r3, [r7, #15]
    break;
 800fbbc:	bf00      	nop
  }
  return usb_status;
 800fbbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3714      	adds	r7, #20
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbca:	4770      	bx	lr

0800fbcc <__cvt>:
 800fbcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fbd0:	ec57 6b10 	vmov	r6, r7, d0
 800fbd4:	2f00      	cmp	r7, #0
 800fbd6:	460c      	mov	r4, r1
 800fbd8:	4619      	mov	r1, r3
 800fbda:	463b      	mov	r3, r7
 800fbdc:	bfbb      	ittet	lt
 800fbde:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fbe2:	461f      	movlt	r7, r3
 800fbe4:	2300      	movge	r3, #0
 800fbe6:	232d      	movlt	r3, #45	@ 0x2d
 800fbe8:	700b      	strb	r3, [r1, #0]
 800fbea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fbec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fbf0:	4691      	mov	r9, r2
 800fbf2:	f023 0820 	bic.w	r8, r3, #32
 800fbf6:	bfbc      	itt	lt
 800fbf8:	4632      	movlt	r2, r6
 800fbfa:	4616      	movlt	r6, r2
 800fbfc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fc00:	d005      	beq.n	800fc0e <__cvt+0x42>
 800fc02:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800fc06:	d100      	bne.n	800fc0a <__cvt+0x3e>
 800fc08:	3401      	adds	r4, #1
 800fc0a:	2102      	movs	r1, #2
 800fc0c:	e000      	b.n	800fc10 <__cvt+0x44>
 800fc0e:	2103      	movs	r1, #3
 800fc10:	ab03      	add	r3, sp, #12
 800fc12:	9301      	str	r3, [sp, #4]
 800fc14:	ab02      	add	r3, sp, #8
 800fc16:	9300      	str	r3, [sp, #0]
 800fc18:	ec47 6b10 	vmov	d0, r6, r7
 800fc1c:	4653      	mov	r3, sl
 800fc1e:	4622      	mov	r2, r4
 800fc20:	f001 f876 	bl	8010d10 <_dtoa_r>
 800fc24:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fc28:	4605      	mov	r5, r0
 800fc2a:	d119      	bne.n	800fc60 <__cvt+0x94>
 800fc2c:	f019 0f01 	tst.w	r9, #1
 800fc30:	d00e      	beq.n	800fc50 <__cvt+0x84>
 800fc32:	eb00 0904 	add.w	r9, r0, r4
 800fc36:	2200      	movs	r2, #0
 800fc38:	2300      	movs	r3, #0
 800fc3a:	4630      	mov	r0, r6
 800fc3c:	4639      	mov	r1, r7
 800fc3e:	f7f0 ff6b 	bl	8000b18 <__aeabi_dcmpeq>
 800fc42:	b108      	cbz	r0, 800fc48 <__cvt+0x7c>
 800fc44:	f8cd 900c 	str.w	r9, [sp, #12]
 800fc48:	2230      	movs	r2, #48	@ 0x30
 800fc4a:	9b03      	ldr	r3, [sp, #12]
 800fc4c:	454b      	cmp	r3, r9
 800fc4e:	d31e      	bcc.n	800fc8e <__cvt+0xc2>
 800fc50:	9b03      	ldr	r3, [sp, #12]
 800fc52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc54:	1b5b      	subs	r3, r3, r5
 800fc56:	4628      	mov	r0, r5
 800fc58:	6013      	str	r3, [r2, #0]
 800fc5a:	b004      	add	sp, #16
 800fc5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fc64:	eb00 0904 	add.w	r9, r0, r4
 800fc68:	d1e5      	bne.n	800fc36 <__cvt+0x6a>
 800fc6a:	7803      	ldrb	r3, [r0, #0]
 800fc6c:	2b30      	cmp	r3, #48	@ 0x30
 800fc6e:	d10a      	bne.n	800fc86 <__cvt+0xba>
 800fc70:	2200      	movs	r2, #0
 800fc72:	2300      	movs	r3, #0
 800fc74:	4630      	mov	r0, r6
 800fc76:	4639      	mov	r1, r7
 800fc78:	f7f0 ff4e 	bl	8000b18 <__aeabi_dcmpeq>
 800fc7c:	b918      	cbnz	r0, 800fc86 <__cvt+0xba>
 800fc7e:	f1c4 0401 	rsb	r4, r4, #1
 800fc82:	f8ca 4000 	str.w	r4, [sl]
 800fc86:	f8da 3000 	ldr.w	r3, [sl]
 800fc8a:	4499      	add	r9, r3
 800fc8c:	e7d3      	b.n	800fc36 <__cvt+0x6a>
 800fc8e:	1c59      	adds	r1, r3, #1
 800fc90:	9103      	str	r1, [sp, #12]
 800fc92:	701a      	strb	r2, [r3, #0]
 800fc94:	e7d9      	b.n	800fc4a <__cvt+0x7e>

0800fc96 <__exponent>:
 800fc96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc98:	2900      	cmp	r1, #0
 800fc9a:	bfba      	itte	lt
 800fc9c:	4249      	neglt	r1, r1
 800fc9e:	232d      	movlt	r3, #45	@ 0x2d
 800fca0:	232b      	movge	r3, #43	@ 0x2b
 800fca2:	2909      	cmp	r1, #9
 800fca4:	7002      	strb	r2, [r0, #0]
 800fca6:	7043      	strb	r3, [r0, #1]
 800fca8:	dd29      	ble.n	800fcfe <__exponent+0x68>
 800fcaa:	f10d 0307 	add.w	r3, sp, #7
 800fcae:	461d      	mov	r5, r3
 800fcb0:	270a      	movs	r7, #10
 800fcb2:	461a      	mov	r2, r3
 800fcb4:	fbb1 f6f7 	udiv	r6, r1, r7
 800fcb8:	fb07 1416 	mls	r4, r7, r6, r1
 800fcbc:	3430      	adds	r4, #48	@ 0x30
 800fcbe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fcc2:	460c      	mov	r4, r1
 800fcc4:	2c63      	cmp	r4, #99	@ 0x63
 800fcc6:	f103 33ff 	add.w	r3, r3, #4294967295
 800fcca:	4631      	mov	r1, r6
 800fccc:	dcf1      	bgt.n	800fcb2 <__exponent+0x1c>
 800fcce:	3130      	adds	r1, #48	@ 0x30
 800fcd0:	1e94      	subs	r4, r2, #2
 800fcd2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fcd6:	1c41      	adds	r1, r0, #1
 800fcd8:	4623      	mov	r3, r4
 800fcda:	42ab      	cmp	r3, r5
 800fcdc:	d30a      	bcc.n	800fcf4 <__exponent+0x5e>
 800fcde:	f10d 0309 	add.w	r3, sp, #9
 800fce2:	1a9b      	subs	r3, r3, r2
 800fce4:	42ac      	cmp	r4, r5
 800fce6:	bf88      	it	hi
 800fce8:	2300      	movhi	r3, #0
 800fcea:	3302      	adds	r3, #2
 800fcec:	4403      	add	r3, r0
 800fcee:	1a18      	subs	r0, r3, r0
 800fcf0:	b003      	add	sp, #12
 800fcf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcf4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fcf8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fcfc:	e7ed      	b.n	800fcda <__exponent+0x44>
 800fcfe:	2330      	movs	r3, #48	@ 0x30
 800fd00:	3130      	adds	r1, #48	@ 0x30
 800fd02:	7083      	strb	r3, [r0, #2]
 800fd04:	70c1      	strb	r1, [r0, #3]
 800fd06:	1d03      	adds	r3, r0, #4
 800fd08:	e7f1      	b.n	800fcee <__exponent+0x58>
	...

0800fd0c <_printf_float>:
 800fd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd10:	b08d      	sub	sp, #52	@ 0x34
 800fd12:	460c      	mov	r4, r1
 800fd14:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fd18:	4616      	mov	r6, r2
 800fd1a:	461f      	mov	r7, r3
 800fd1c:	4605      	mov	r5, r0
 800fd1e:	f000 feef 	bl	8010b00 <_localeconv_r>
 800fd22:	6803      	ldr	r3, [r0, #0]
 800fd24:	9304      	str	r3, [sp, #16]
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7f0 faca 	bl	80002c0 <strlen>
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd30:	f8d8 3000 	ldr.w	r3, [r8]
 800fd34:	9005      	str	r0, [sp, #20]
 800fd36:	3307      	adds	r3, #7
 800fd38:	f023 0307 	bic.w	r3, r3, #7
 800fd3c:	f103 0208 	add.w	r2, r3, #8
 800fd40:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fd44:	f8d4 b000 	ldr.w	fp, [r4]
 800fd48:	f8c8 2000 	str.w	r2, [r8]
 800fd4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fd50:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fd54:	9307      	str	r3, [sp, #28]
 800fd56:	f8cd 8018 	str.w	r8, [sp, #24]
 800fd5a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fd5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fd62:	4b9c      	ldr	r3, [pc, #624]	@ (800ffd4 <_printf_float+0x2c8>)
 800fd64:	f04f 32ff 	mov.w	r2, #4294967295
 800fd68:	f7f0 ff08 	bl	8000b7c <__aeabi_dcmpun>
 800fd6c:	bb70      	cbnz	r0, 800fdcc <_printf_float+0xc0>
 800fd6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fd72:	4b98      	ldr	r3, [pc, #608]	@ (800ffd4 <_printf_float+0x2c8>)
 800fd74:	f04f 32ff 	mov.w	r2, #4294967295
 800fd78:	f7f0 fee2 	bl	8000b40 <__aeabi_dcmple>
 800fd7c:	bb30      	cbnz	r0, 800fdcc <_printf_float+0xc0>
 800fd7e:	2200      	movs	r2, #0
 800fd80:	2300      	movs	r3, #0
 800fd82:	4640      	mov	r0, r8
 800fd84:	4649      	mov	r1, r9
 800fd86:	f7f0 fed1 	bl	8000b2c <__aeabi_dcmplt>
 800fd8a:	b110      	cbz	r0, 800fd92 <_printf_float+0x86>
 800fd8c:	232d      	movs	r3, #45	@ 0x2d
 800fd8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd92:	4a91      	ldr	r2, [pc, #580]	@ (800ffd8 <_printf_float+0x2cc>)
 800fd94:	4b91      	ldr	r3, [pc, #580]	@ (800ffdc <_printf_float+0x2d0>)
 800fd96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fd9a:	bf94      	ite	ls
 800fd9c:	4690      	movls	r8, r2
 800fd9e:	4698      	movhi	r8, r3
 800fda0:	2303      	movs	r3, #3
 800fda2:	6123      	str	r3, [r4, #16]
 800fda4:	f02b 0304 	bic.w	r3, fp, #4
 800fda8:	6023      	str	r3, [r4, #0]
 800fdaa:	f04f 0900 	mov.w	r9, #0
 800fdae:	9700      	str	r7, [sp, #0]
 800fdb0:	4633      	mov	r3, r6
 800fdb2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fdb4:	4621      	mov	r1, r4
 800fdb6:	4628      	mov	r0, r5
 800fdb8:	f000 f9d2 	bl	8010160 <_printf_common>
 800fdbc:	3001      	adds	r0, #1
 800fdbe:	f040 808d 	bne.w	800fedc <_printf_float+0x1d0>
 800fdc2:	f04f 30ff 	mov.w	r0, #4294967295
 800fdc6:	b00d      	add	sp, #52	@ 0x34
 800fdc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdcc:	4642      	mov	r2, r8
 800fdce:	464b      	mov	r3, r9
 800fdd0:	4640      	mov	r0, r8
 800fdd2:	4649      	mov	r1, r9
 800fdd4:	f7f0 fed2 	bl	8000b7c <__aeabi_dcmpun>
 800fdd8:	b140      	cbz	r0, 800fdec <_printf_float+0xe0>
 800fdda:	464b      	mov	r3, r9
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	bfbc      	itt	lt
 800fde0:	232d      	movlt	r3, #45	@ 0x2d
 800fde2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fde6:	4a7e      	ldr	r2, [pc, #504]	@ (800ffe0 <_printf_float+0x2d4>)
 800fde8:	4b7e      	ldr	r3, [pc, #504]	@ (800ffe4 <_printf_float+0x2d8>)
 800fdea:	e7d4      	b.n	800fd96 <_printf_float+0x8a>
 800fdec:	6863      	ldr	r3, [r4, #4]
 800fdee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fdf2:	9206      	str	r2, [sp, #24]
 800fdf4:	1c5a      	adds	r2, r3, #1
 800fdf6:	d13b      	bne.n	800fe70 <_printf_float+0x164>
 800fdf8:	2306      	movs	r3, #6
 800fdfa:	6063      	str	r3, [r4, #4]
 800fdfc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800fe00:	2300      	movs	r3, #0
 800fe02:	6022      	str	r2, [r4, #0]
 800fe04:	9303      	str	r3, [sp, #12]
 800fe06:	ab0a      	add	r3, sp, #40	@ 0x28
 800fe08:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fe0c:	ab09      	add	r3, sp, #36	@ 0x24
 800fe0e:	9300      	str	r3, [sp, #0]
 800fe10:	6861      	ldr	r1, [r4, #4]
 800fe12:	ec49 8b10 	vmov	d0, r8, r9
 800fe16:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fe1a:	4628      	mov	r0, r5
 800fe1c:	f7ff fed6 	bl	800fbcc <__cvt>
 800fe20:	9b06      	ldr	r3, [sp, #24]
 800fe22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fe24:	2b47      	cmp	r3, #71	@ 0x47
 800fe26:	4680      	mov	r8, r0
 800fe28:	d129      	bne.n	800fe7e <_printf_float+0x172>
 800fe2a:	1cc8      	adds	r0, r1, #3
 800fe2c:	db02      	blt.n	800fe34 <_printf_float+0x128>
 800fe2e:	6863      	ldr	r3, [r4, #4]
 800fe30:	4299      	cmp	r1, r3
 800fe32:	dd41      	ble.n	800feb8 <_printf_float+0x1ac>
 800fe34:	f1aa 0a02 	sub.w	sl, sl, #2
 800fe38:	fa5f fa8a 	uxtb.w	sl, sl
 800fe3c:	3901      	subs	r1, #1
 800fe3e:	4652      	mov	r2, sl
 800fe40:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fe44:	9109      	str	r1, [sp, #36]	@ 0x24
 800fe46:	f7ff ff26 	bl	800fc96 <__exponent>
 800fe4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe4c:	1813      	adds	r3, r2, r0
 800fe4e:	2a01      	cmp	r2, #1
 800fe50:	4681      	mov	r9, r0
 800fe52:	6123      	str	r3, [r4, #16]
 800fe54:	dc02      	bgt.n	800fe5c <_printf_float+0x150>
 800fe56:	6822      	ldr	r2, [r4, #0]
 800fe58:	07d2      	lsls	r2, r2, #31
 800fe5a:	d501      	bpl.n	800fe60 <_printf_float+0x154>
 800fe5c:	3301      	adds	r3, #1
 800fe5e:	6123      	str	r3, [r4, #16]
 800fe60:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d0a2      	beq.n	800fdae <_printf_float+0xa2>
 800fe68:	232d      	movs	r3, #45	@ 0x2d
 800fe6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe6e:	e79e      	b.n	800fdae <_printf_float+0xa2>
 800fe70:	9a06      	ldr	r2, [sp, #24]
 800fe72:	2a47      	cmp	r2, #71	@ 0x47
 800fe74:	d1c2      	bne.n	800fdfc <_printf_float+0xf0>
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d1c0      	bne.n	800fdfc <_printf_float+0xf0>
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	e7bd      	b.n	800fdfa <_printf_float+0xee>
 800fe7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fe82:	d9db      	bls.n	800fe3c <_printf_float+0x130>
 800fe84:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fe88:	d118      	bne.n	800febc <_printf_float+0x1b0>
 800fe8a:	2900      	cmp	r1, #0
 800fe8c:	6863      	ldr	r3, [r4, #4]
 800fe8e:	dd0b      	ble.n	800fea8 <_printf_float+0x19c>
 800fe90:	6121      	str	r1, [r4, #16]
 800fe92:	b913      	cbnz	r3, 800fe9a <_printf_float+0x18e>
 800fe94:	6822      	ldr	r2, [r4, #0]
 800fe96:	07d0      	lsls	r0, r2, #31
 800fe98:	d502      	bpl.n	800fea0 <_printf_float+0x194>
 800fe9a:	3301      	adds	r3, #1
 800fe9c:	440b      	add	r3, r1
 800fe9e:	6123      	str	r3, [r4, #16]
 800fea0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fea2:	f04f 0900 	mov.w	r9, #0
 800fea6:	e7db      	b.n	800fe60 <_printf_float+0x154>
 800fea8:	b913      	cbnz	r3, 800feb0 <_printf_float+0x1a4>
 800feaa:	6822      	ldr	r2, [r4, #0]
 800feac:	07d2      	lsls	r2, r2, #31
 800feae:	d501      	bpl.n	800feb4 <_printf_float+0x1a8>
 800feb0:	3302      	adds	r3, #2
 800feb2:	e7f4      	b.n	800fe9e <_printf_float+0x192>
 800feb4:	2301      	movs	r3, #1
 800feb6:	e7f2      	b.n	800fe9e <_printf_float+0x192>
 800feb8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800febc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800febe:	4299      	cmp	r1, r3
 800fec0:	db05      	blt.n	800fece <_printf_float+0x1c2>
 800fec2:	6823      	ldr	r3, [r4, #0]
 800fec4:	6121      	str	r1, [r4, #16]
 800fec6:	07d8      	lsls	r0, r3, #31
 800fec8:	d5ea      	bpl.n	800fea0 <_printf_float+0x194>
 800feca:	1c4b      	adds	r3, r1, #1
 800fecc:	e7e7      	b.n	800fe9e <_printf_float+0x192>
 800fece:	2900      	cmp	r1, #0
 800fed0:	bfd4      	ite	le
 800fed2:	f1c1 0202 	rsble	r2, r1, #2
 800fed6:	2201      	movgt	r2, #1
 800fed8:	4413      	add	r3, r2
 800feda:	e7e0      	b.n	800fe9e <_printf_float+0x192>
 800fedc:	6823      	ldr	r3, [r4, #0]
 800fede:	055a      	lsls	r2, r3, #21
 800fee0:	d407      	bmi.n	800fef2 <_printf_float+0x1e6>
 800fee2:	6923      	ldr	r3, [r4, #16]
 800fee4:	4642      	mov	r2, r8
 800fee6:	4631      	mov	r1, r6
 800fee8:	4628      	mov	r0, r5
 800feea:	47b8      	blx	r7
 800feec:	3001      	adds	r0, #1
 800feee:	d12b      	bne.n	800ff48 <_printf_float+0x23c>
 800fef0:	e767      	b.n	800fdc2 <_printf_float+0xb6>
 800fef2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fef6:	f240 80dd 	bls.w	80100b4 <_printf_float+0x3a8>
 800fefa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fefe:	2200      	movs	r2, #0
 800ff00:	2300      	movs	r3, #0
 800ff02:	f7f0 fe09 	bl	8000b18 <__aeabi_dcmpeq>
 800ff06:	2800      	cmp	r0, #0
 800ff08:	d033      	beq.n	800ff72 <_printf_float+0x266>
 800ff0a:	4a37      	ldr	r2, [pc, #220]	@ (800ffe8 <_printf_float+0x2dc>)
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	4631      	mov	r1, r6
 800ff10:	4628      	mov	r0, r5
 800ff12:	47b8      	blx	r7
 800ff14:	3001      	adds	r0, #1
 800ff16:	f43f af54 	beq.w	800fdc2 <_printf_float+0xb6>
 800ff1a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ff1e:	4543      	cmp	r3, r8
 800ff20:	db02      	blt.n	800ff28 <_printf_float+0x21c>
 800ff22:	6823      	ldr	r3, [r4, #0]
 800ff24:	07d8      	lsls	r0, r3, #31
 800ff26:	d50f      	bpl.n	800ff48 <_printf_float+0x23c>
 800ff28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff2c:	4631      	mov	r1, r6
 800ff2e:	4628      	mov	r0, r5
 800ff30:	47b8      	blx	r7
 800ff32:	3001      	adds	r0, #1
 800ff34:	f43f af45 	beq.w	800fdc2 <_printf_float+0xb6>
 800ff38:	f04f 0900 	mov.w	r9, #0
 800ff3c:	f108 38ff 	add.w	r8, r8, #4294967295
 800ff40:	f104 0a1a 	add.w	sl, r4, #26
 800ff44:	45c8      	cmp	r8, r9
 800ff46:	dc09      	bgt.n	800ff5c <_printf_float+0x250>
 800ff48:	6823      	ldr	r3, [r4, #0]
 800ff4a:	079b      	lsls	r3, r3, #30
 800ff4c:	f100 8103 	bmi.w	8010156 <_printf_float+0x44a>
 800ff50:	68e0      	ldr	r0, [r4, #12]
 800ff52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff54:	4298      	cmp	r0, r3
 800ff56:	bfb8      	it	lt
 800ff58:	4618      	movlt	r0, r3
 800ff5a:	e734      	b.n	800fdc6 <_printf_float+0xba>
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	4652      	mov	r2, sl
 800ff60:	4631      	mov	r1, r6
 800ff62:	4628      	mov	r0, r5
 800ff64:	47b8      	blx	r7
 800ff66:	3001      	adds	r0, #1
 800ff68:	f43f af2b 	beq.w	800fdc2 <_printf_float+0xb6>
 800ff6c:	f109 0901 	add.w	r9, r9, #1
 800ff70:	e7e8      	b.n	800ff44 <_printf_float+0x238>
 800ff72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	dc39      	bgt.n	800ffec <_printf_float+0x2e0>
 800ff78:	4a1b      	ldr	r2, [pc, #108]	@ (800ffe8 <_printf_float+0x2dc>)
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	4631      	mov	r1, r6
 800ff7e:	4628      	mov	r0, r5
 800ff80:	47b8      	blx	r7
 800ff82:	3001      	adds	r0, #1
 800ff84:	f43f af1d 	beq.w	800fdc2 <_printf_float+0xb6>
 800ff88:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ff8c:	ea59 0303 	orrs.w	r3, r9, r3
 800ff90:	d102      	bne.n	800ff98 <_printf_float+0x28c>
 800ff92:	6823      	ldr	r3, [r4, #0]
 800ff94:	07d9      	lsls	r1, r3, #31
 800ff96:	d5d7      	bpl.n	800ff48 <_printf_float+0x23c>
 800ff98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff9c:	4631      	mov	r1, r6
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	47b8      	blx	r7
 800ffa2:	3001      	adds	r0, #1
 800ffa4:	f43f af0d 	beq.w	800fdc2 <_printf_float+0xb6>
 800ffa8:	f04f 0a00 	mov.w	sl, #0
 800ffac:	f104 0b1a 	add.w	fp, r4, #26
 800ffb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffb2:	425b      	negs	r3, r3
 800ffb4:	4553      	cmp	r3, sl
 800ffb6:	dc01      	bgt.n	800ffbc <_printf_float+0x2b0>
 800ffb8:	464b      	mov	r3, r9
 800ffba:	e793      	b.n	800fee4 <_printf_float+0x1d8>
 800ffbc:	2301      	movs	r3, #1
 800ffbe:	465a      	mov	r2, fp
 800ffc0:	4631      	mov	r1, r6
 800ffc2:	4628      	mov	r0, r5
 800ffc4:	47b8      	blx	r7
 800ffc6:	3001      	adds	r0, #1
 800ffc8:	f43f aefb 	beq.w	800fdc2 <_printf_float+0xb6>
 800ffcc:	f10a 0a01 	add.w	sl, sl, #1
 800ffd0:	e7ee      	b.n	800ffb0 <_printf_float+0x2a4>
 800ffd2:	bf00      	nop
 800ffd4:	7fefffff 	.word	0x7fefffff
 800ffd8:	080143d8 	.word	0x080143d8
 800ffdc:	080143dc 	.word	0x080143dc
 800ffe0:	080143e0 	.word	0x080143e0
 800ffe4:	080143e4 	.word	0x080143e4
 800ffe8:	080143e8 	.word	0x080143e8
 800ffec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ffee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fff2:	4553      	cmp	r3, sl
 800fff4:	bfa8      	it	ge
 800fff6:	4653      	movge	r3, sl
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	4699      	mov	r9, r3
 800fffc:	dc36      	bgt.n	801006c <_printf_float+0x360>
 800fffe:	f04f 0b00 	mov.w	fp, #0
 8010002:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010006:	f104 021a 	add.w	r2, r4, #26
 801000a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801000c:	9306      	str	r3, [sp, #24]
 801000e:	eba3 0309 	sub.w	r3, r3, r9
 8010012:	455b      	cmp	r3, fp
 8010014:	dc31      	bgt.n	801007a <_printf_float+0x36e>
 8010016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010018:	459a      	cmp	sl, r3
 801001a:	dc3a      	bgt.n	8010092 <_printf_float+0x386>
 801001c:	6823      	ldr	r3, [r4, #0]
 801001e:	07da      	lsls	r2, r3, #31
 8010020:	d437      	bmi.n	8010092 <_printf_float+0x386>
 8010022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010024:	ebaa 0903 	sub.w	r9, sl, r3
 8010028:	9b06      	ldr	r3, [sp, #24]
 801002a:	ebaa 0303 	sub.w	r3, sl, r3
 801002e:	4599      	cmp	r9, r3
 8010030:	bfa8      	it	ge
 8010032:	4699      	movge	r9, r3
 8010034:	f1b9 0f00 	cmp.w	r9, #0
 8010038:	dc33      	bgt.n	80100a2 <_printf_float+0x396>
 801003a:	f04f 0800 	mov.w	r8, #0
 801003e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010042:	f104 0b1a 	add.w	fp, r4, #26
 8010046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010048:	ebaa 0303 	sub.w	r3, sl, r3
 801004c:	eba3 0309 	sub.w	r3, r3, r9
 8010050:	4543      	cmp	r3, r8
 8010052:	f77f af79 	ble.w	800ff48 <_printf_float+0x23c>
 8010056:	2301      	movs	r3, #1
 8010058:	465a      	mov	r2, fp
 801005a:	4631      	mov	r1, r6
 801005c:	4628      	mov	r0, r5
 801005e:	47b8      	blx	r7
 8010060:	3001      	adds	r0, #1
 8010062:	f43f aeae 	beq.w	800fdc2 <_printf_float+0xb6>
 8010066:	f108 0801 	add.w	r8, r8, #1
 801006a:	e7ec      	b.n	8010046 <_printf_float+0x33a>
 801006c:	4642      	mov	r2, r8
 801006e:	4631      	mov	r1, r6
 8010070:	4628      	mov	r0, r5
 8010072:	47b8      	blx	r7
 8010074:	3001      	adds	r0, #1
 8010076:	d1c2      	bne.n	800fffe <_printf_float+0x2f2>
 8010078:	e6a3      	b.n	800fdc2 <_printf_float+0xb6>
 801007a:	2301      	movs	r3, #1
 801007c:	4631      	mov	r1, r6
 801007e:	4628      	mov	r0, r5
 8010080:	9206      	str	r2, [sp, #24]
 8010082:	47b8      	blx	r7
 8010084:	3001      	adds	r0, #1
 8010086:	f43f ae9c 	beq.w	800fdc2 <_printf_float+0xb6>
 801008a:	9a06      	ldr	r2, [sp, #24]
 801008c:	f10b 0b01 	add.w	fp, fp, #1
 8010090:	e7bb      	b.n	801000a <_printf_float+0x2fe>
 8010092:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010096:	4631      	mov	r1, r6
 8010098:	4628      	mov	r0, r5
 801009a:	47b8      	blx	r7
 801009c:	3001      	adds	r0, #1
 801009e:	d1c0      	bne.n	8010022 <_printf_float+0x316>
 80100a0:	e68f      	b.n	800fdc2 <_printf_float+0xb6>
 80100a2:	9a06      	ldr	r2, [sp, #24]
 80100a4:	464b      	mov	r3, r9
 80100a6:	4442      	add	r2, r8
 80100a8:	4631      	mov	r1, r6
 80100aa:	4628      	mov	r0, r5
 80100ac:	47b8      	blx	r7
 80100ae:	3001      	adds	r0, #1
 80100b0:	d1c3      	bne.n	801003a <_printf_float+0x32e>
 80100b2:	e686      	b.n	800fdc2 <_printf_float+0xb6>
 80100b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80100b8:	f1ba 0f01 	cmp.w	sl, #1
 80100bc:	dc01      	bgt.n	80100c2 <_printf_float+0x3b6>
 80100be:	07db      	lsls	r3, r3, #31
 80100c0:	d536      	bpl.n	8010130 <_printf_float+0x424>
 80100c2:	2301      	movs	r3, #1
 80100c4:	4642      	mov	r2, r8
 80100c6:	4631      	mov	r1, r6
 80100c8:	4628      	mov	r0, r5
 80100ca:	47b8      	blx	r7
 80100cc:	3001      	adds	r0, #1
 80100ce:	f43f ae78 	beq.w	800fdc2 <_printf_float+0xb6>
 80100d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80100d6:	4631      	mov	r1, r6
 80100d8:	4628      	mov	r0, r5
 80100da:	47b8      	blx	r7
 80100dc:	3001      	adds	r0, #1
 80100de:	f43f ae70 	beq.w	800fdc2 <_printf_float+0xb6>
 80100e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80100e6:	2200      	movs	r2, #0
 80100e8:	2300      	movs	r3, #0
 80100ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80100ee:	f7f0 fd13 	bl	8000b18 <__aeabi_dcmpeq>
 80100f2:	b9c0      	cbnz	r0, 8010126 <_printf_float+0x41a>
 80100f4:	4653      	mov	r3, sl
 80100f6:	f108 0201 	add.w	r2, r8, #1
 80100fa:	4631      	mov	r1, r6
 80100fc:	4628      	mov	r0, r5
 80100fe:	47b8      	blx	r7
 8010100:	3001      	adds	r0, #1
 8010102:	d10c      	bne.n	801011e <_printf_float+0x412>
 8010104:	e65d      	b.n	800fdc2 <_printf_float+0xb6>
 8010106:	2301      	movs	r3, #1
 8010108:	465a      	mov	r2, fp
 801010a:	4631      	mov	r1, r6
 801010c:	4628      	mov	r0, r5
 801010e:	47b8      	blx	r7
 8010110:	3001      	adds	r0, #1
 8010112:	f43f ae56 	beq.w	800fdc2 <_printf_float+0xb6>
 8010116:	f108 0801 	add.w	r8, r8, #1
 801011a:	45d0      	cmp	r8, sl
 801011c:	dbf3      	blt.n	8010106 <_printf_float+0x3fa>
 801011e:	464b      	mov	r3, r9
 8010120:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010124:	e6df      	b.n	800fee6 <_printf_float+0x1da>
 8010126:	f04f 0800 	mov.w	r8, #0
 801012a:	f104 0b1a 	add.w	fp, r4, #26
 801012e:	e7f4      	b.n	801011a <_printf_float+0x40e>
 8010130:	2301      	movs	r3, #1
 8010132:	4642      	mov	r2, r8
 8010134:	e7e1      	b.n	80100fa <_printf_float+0x3ee>
 8010136:	2301      	movs	r3, #1
 8010138:	464a      	mov	r2, r9
 801013a:	4631      	mov	r1, r6
 801013c:	4628      	mov	r0, r5
 801013e:	47b8      	blx	r7
 8010140:	3001      	adds	r0, #1
 8010142:	f43f ae3e 	beq.w	800fdc2 <_printf_float+0xb6>
 8010146:	f108 0801 	add.w	r8, r8, #1
 801014a:	68e3      	ldr	r3, [r4, #12]
 801014c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801014e:	1a5b      	subs	r3, r3, r1
 8010150:	4543      	cmp	r3, r8
 8010152:	dcf0      	bgt.n	8010136 <_printf_float+0x42a>
 8010154:	e6fc      	b.n	800ff50 <_printf_float+0x244>
 8010156:	f04f 0800 	mov.w	r8, #0
 801015a:	f104 0919 	add.w	r9, r4, #25
 801015e:	e7f4      	b.n	801014a <_printf_float+0x43e>

08010160 <_printf_common>:
 8010160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010164:	4616      	mov	r6, r2
 8010166:	4698      	mov	r8, r3
 8010168:	688a      	ldr	r2, [r1, #8]
 801016a:	690b      	ldr	r3, [r1, #16]
 801016c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010170:	4293      	cmp	r3, r2
 8010172:	bfb8      	it	lt
 8010174:	4613      	movlt	r3, r2
 8010176:	6033      	str	r3, [r6, #0]
 8010178:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801017c:	4607      	mov	r7, r0
 801017e:	460c      	mov	r4, r1
 8010180:	b10a      	cbz	r2, 8010186 <_printf_common+0x26>
 8010182:	3301      	adds	r3, #1
 8010184:	6033      	str	r3, [r6, #0]
 8010186:	6823      	ldr	r3, [r4, #0]
 8010188:	0699      	lsls	r1, r3, #26
 801018a:	bf42      	ittt	mi
 801018c:	6833      	ldrmi	r3, [r6, #0]
 801018e:	3302      	addmi	r3, #2
 8010190:	6033      	strmi	r3, [r6, #0]
 8010192:	6825      	ldr	r5, [r4, #0]
 8010194:	f015 0506 	ands.w	r5, r5, #6
 8010198:	d106      	bne.n	80101a8 <_printf_common+0x48>
 801019a:	f104 0a19 	add.w	sl, r4, #25
 801019e:	68e3      	ldr	r3, [r4, #12]
 80101a0:	6832      	ldr	r2, [r6, #0]
 80101a2:	1a9b      	subs	r3, r3, r2
 80101a4:	42ab      	cmp	r3, r5
 80101a6:	dc26      	bgt.n	80101f6 <_printf_common+0x96>
 80101a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80101ac:	6822      	ldr	r2, [r4, #0]
 80101ae:	3b00      	subs	r3, #0
 80101b0:	bf18      	it	ne
 80101b2:	2301      	movne	r3, #1
 80101b4:	0692      	lsls	r2, r2, #26
 80101b6:	d42b      	bmi.n	8010210 <_printf_common+0xb0>
 80101b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80101bc:	4641      	mov	r1, r8
 80101be:	4638      	mov	r0, r7
 80101c0:	47c8      	blx	r9
 80101c2:	3001      	adds	r0, #1
 80101c4:	d01e      	beq.n	8010204 <_printf_common+0xa4>
 80101c6:	6823      	ldr	r3, [r4, #0]
 80101c8:	6922      	ldr	r2, [r4, #16]
 80101ca:	f003 0306 	and.w	r3, r3, #6
 80101ce:	2b04      	cmp	r3, #4
 80101d0:	bf02      	ittt	eq
 80101d2:	68e5      	ldreq	r5, [r4, #12]
 80101d4:	6833      	ldreq	r3, [r6, #0]
 80101d6:	1aed      	subeq	r5, r5, r3
 80101d8:	68a3      	ldr	r3, [r4, #8]
 80101da:	bf0c      	ite	eq
 80101dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80101e0:	2500      	movne	r5, #0
 80101e2:	4293      	cmp	r3, r2
 80101e4:	bfc4      	itt	gt
 80101e6:	1a9b      	subgt	r3, r3, r2
 80101e8:	18ed      	addgt	r5, r5, r3
 80101ea:	2600      	movs	r6, #0
 80101ec:	341a      	adds	r4, #26
 80101ee:	42b5      	cmp	r5, r6
 80101f0:	d11a      	bne.n	8010228 <_printf_common+0xc8>
 80101f2:	2000      	movs	r0, #0
 80101f4:	e008      	b.n	8010208 <_printf_common+0xa8>
 80101f6:	2301      	movs	r3, #1
 80101f8:	4652      	mov	r2, sl
 80101fa:	4641      	mov	r1, r8
 80101fc:	4638      	mov	r0, r7
 80101fe:	47c8      	blx	r9
 8010200:	3001      	adds	r0, #1
 8010202:	d103      	bne.n	801020c <_printf_common+0xac>
 8010204:	f04f 30ff 	mov.w	r0, #4294967295
 8010208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801020c:	3501      	adds	r5, #1
 801020e:	e7c6      	b.n	801019e <_printf_common+0x3e>
 8010210:	18e1      	adds	r1, r4, r3
 8010212:	1c5a      	adds	r2, r3, #1
 8010214:	2030      	movs	r0, #48	@ 0x30
 8010216:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801021a:	4422      	add	r2, r4
 801021c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010220:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010224:	3302      	adds	r3, #2
 8010226:	e7c7      	b.n	80101b8 <_printf_common+0x58>
 8010228:	2301      	movs	r3, #1
 801022a:	4622      	mov	r2, r4
 801022c:	4641      	mov	r1, r8
 801022e:	4638      	mov	r0, r7
 8010230:	47c8      	blx	r9
 8010232:	3001      	adds	r0, #1
 8010234:	d0e6      	beq.n	8010204 <_printf_common+0xa4>
 8010236:	3601      	adds	r6, #1
 8010238:	e7d9      	b.n	80101ee <_printf_common+0x8e>
	...

0801023c <_printf_i>:
 801023c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010240:	7e0f      	ldrb	r7, [r1, #24]
 8010242:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010244:	2f78      	cmp	r7, #120	@ 0x78
 8010246:	4691      	mov	r9, r2
 8010248:	4680      	mov	r8, r0
 801024a:	460c      	mov	r4, r1
 801024c:	469a      	mov	sl, r3
 801024e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010252:	d807      	bhi.n	8010264 <_printf_i+0x28>
 8010254:	2f62      	cmp	r7, #98	@ 0x62
 8010256:	d80a      	bhi.n	801026e <_printf_i+0x32>
 8010258:	2f00      	cmp	r7, #0
 801025a:	f000 80d2 	beq.w	8010402 <_printf_i+0x1c6>
 801025e:	2f58      	cmp	r7, #88	@ 0x58
 8010260:	f000 80b9 	beq.w	80103d6 <_printf_i+0x19a>
 8010264:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010268:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801026c:	e03a      	b.n	80102e4 <_printf_i+0xa8>
 801026e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010272:	2b15      	cmp	r3, #21
 8010274:	d8f6      	bhi.n	8010264 <_printf_i+0x28>
 8010276:	a101      	add	r1, pc, #4	@ (adr r1, 801027c <_printf_i+0x40>)
 8010278:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801027c:	080102d5 	.word	0x080102d5
 8010280:	080102e9 	.word	0x080102e9
 8010284:	08010265 	.word	0x08010265
 8010288:	08010265 	.word	0x08010265
 801028c:	08010265 	.word	0x08010265
 8010290:	08010265 	.word	0x08010265
 8010294:	080102e9 	.word	0x080102e9
 8010298:	08010265 	.word	0x08010265
 801029c:	08010265 	.word	0x08010265
 80102a0:	08010265 	.word	0x08010265
 80102a4:	08010265 	.word	0x08010265
 80102a8:	080103e9 	.word	0x080103e9
 80102ac:	08010313 	.word	0x08010313
 80102b0:	080103a3 	.word	0x080103a3
 80102b4:	08010265 	.word	0x08010265
 80102b8:	08010265 	.word	0x08010265
 80102bc:	0801040b 	.word	0x0801040b
 80102c0:	08010265 	.word	0x08010265
 80102c4:	08010313 	.word	0x08010313
 80102c8:	08010265 	.word	0x08010265
 80102cc:	08010265 	.word	0x08010265
 80102d0:	080103ab 	.word	0x080103ab
 80102d4:	6833      	ldr	r3, [r6, #0]
 80102d6:	1d1a      	adds	r2, r3, #4
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	6032      	str	r2, [r6, #0]
 80102dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80102e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80102e4:	2301      	movs	r3, #1
 80102e6:	e09d      	b.n	8010424 <_printf_i+0x1e8>
 80102e8:	6833      	ldr	r3, [r6, #0]
 80102ea:	6820      	ldr	r0, [r4, #0]
 80102ec:	1d19      	adds	r1, r3, #4
 80102ee:	6031      	str	r1, [r6, #0]
 80102f0:	0606      	lsls	r6, r0, #24
 80102f2:	d501      	bpl.n	80102f8 <_printf_i+0xbc>
 80102f4:	681d      	ldr	r5, [r3, #0]
 80102f6:	e003      	b.n	8010300 <_printf_i+0xc4>
 80102f8:	0645      	lsls	r5, r0, #25
 80102fa:	d5fb      	bpl.n	80102f4 <_printf_i+0xb8>
 80102fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010300:	2d00      	cmp	r5, #0
 8010302:	da03      	bge.n	801030c <_printf_i+0xd0>
 8010304:	232d      	movs	r3, #45	@ 0x2d
 8010306:	426d      	negs	r5, r5
 8010308:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801030c:	4859      	ldr	r0, [pc, #356]	@ (8010474 <_printf_i+0x238>)
 801030e:	230a      	movs	r3, #10
 8010310:	e011      	b.n	8010336 <_printf_i+0xfa>
 8010312:	6821      	ldr	r1, [r4, #0]
 8010314:	6833      	ldr	r3, [r6, #0]
 8010316:	0608      	lsls	r0, r1, #24
 8010318:	f853 5b04 	ldr.w	r5, [r3], #4
 801031c:	d402      	bmi.n	8010324 <_printf_i+0xe8>
 801031e:	0649      	lsls	r1, r1, #25
 8010320:	bf48      	it	mi
 8010322:	b2ad      	uxthmi	r5, r5
 8010324:	2f6f      	cmp	r7, #111	@ 0x6f
 8010326:	4853      	ldr	r0, [pc, #332]	@ (8010474 <_printf_i+0x238>)
 8010328:	6033      	str	r3, [r6, #0]
 801032a:	bf14      	ite	ne
 801032c:	230a      	movne	r3, #10
 801032e:	2308      	moveq	r3, #8
 8010330:	2100      	movs	r1, #0
 8010332:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010336:	6866      	ldr	r6, [r4, #4]
 8010338:	60a6      	str	r6, [r4, #8]
 801033a:	2e00      	cmp	r6, #0
 801033c:	bfa2      	ittt	ge
 801033e:	6821      	ldrge	r1, [r4, #0]
 8010340:	f021 0104 	bicge.w	r1, r1, #4
 8010344:	6021      	strge	r1, [r4, #0]
 8010346:	b90d      	cbnz	r5, 801034c <_printf_i+0x110>
 8010348:	2e00      	cmp	r6, #0
 801034a:	d04b      	beq.n	80103e4 <_printf_i+0x1a8>
 801034c:	4616      	mov	r6, r2
 801034e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010352:	fb03 5711 	mls	r7, r3, r1, r5
 8010356:	5dc7      	ldrb	r7, [r0, r7]
 8010358:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801035c:	462f      	mov	r7, r5
 801035e:	42bb      	cmp	r3, r7
 8010360:	460d      	mov	r5, r1
 8010362:	d9f4      	bls.n	801034e <_printf_i+0x112>
 8010364:	2b08      	cmp	r3, #8
 8010366:	d10b      	bne.n	8010380 <_printf_i+0x144>
 8010368:	6823      	ldr	r3, [r4, #0]
 801036a:	07df      	lsls	r7, r3, #31
 801036c:	d508      	bpl.n	8010380 <_printf_i+0x144>
 801036e:	6923      	ldr	r3, [r4, #16]
 8010370:	6861      	ldr	r1, [r4, #4]
 8010372:	4299      	cmp	r1, r3
 8010374:	bfde      	ittt	le
 8010376:	2330      	movle	r3, #48	@ 0x30
 8010378:	f806 3c01 	strble.w	r3, [r6, #-1]
 801037c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010380:	1b92      	subs	r2, r2, r6
 8010382:	6122      	str	r2, [r4, #16]
 8010384:	f8cd a000 	str.w	sl, [sp]
 8010388:	464b      	mov	r3, r9
 801038a:	aa03      	add	r2, sp, #12
 801038c:	4621      	mov	r1, r4
 801038e:	4640      	mov	r0, r8
 8010390:	f7ff fee6 	bl	8010160 <_printf_common>
 8010394:	3001      	adds	r0, #1
 8010396:	d14a      	bne.n	801042e <_printf_i+0x1f2>
 8010398:	f04f 30ff 	mov.w	r0, #4294967295
 801039c:	b004      	add	sp, #16
 801039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103a2:	6823      	ldr	r3, [r4, #0]
 80103a4:	f043 0320 	orr.w	r3, r3, #32
 80103a8:	6023      	str	r3, [r4, #0]
 80103aa:	4833      	ldr	r0, [pc, #204]	@ (8010478 <_printf_i+0x23c>)
 80103ac:	2778      	movs	r7, #120	@ 0x78
 80103ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80103b2:	6823      	ldr	r3, [r4, #0]
 80103b4:	6831      	ldr	r1, [r6, #0]
 80103b6:	061f      	lsls	r7, r3, #24
 80103b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80103bc:	d402      	bmi.n	80103c4 <_printf_i+0x188>
 80103be:	065f      	lsls	r7, r3, #25
 80103c0:	bf48      	it	mi
 80103c2:	b2ad      	uxthmi	r5, r5
 80103c4:	6031      	str	r1, [r6, #0]
 80103c6:	07d9      	lsls	r1, r3, #31
 80103c8:	bf44      	itt	mi
 80103ca:	f043 0320 	orrmi.w	r3, r3, #32
 80103ce:	6023      	strmi	r3, [r4, #0]
 80103d0:	b11d      	cbz	r5, 80103da <_printf_i+0x19e>
 80103d2:	2310      	movs	r3, #16
 80103d4:	e7ac      	b.n	8010330 <_printf_i+0xf4>
 80103d6:	4827      	ldr	r0, [pc, #156]	@ (8010474 <_printf_i+0x238>)
 80103d8:	e7e9      	b.n	80103ae <_printf_i+0x172>
 80103da:	6823      	ldr	r3, [r4, #0]
 80103dc:	f023 0320 	bic.w	r3, r3, #32
 80103e0:	6023      	str	r3, [r4, #0]
 80103e2:	e7f6      	b.n	80103d2 <_printf_i+0x196>
 80103e4:	4616      	mov	r6, r2
 80103e6:	e7bd      	b.n	8010364 <_printf_i+0x128>
 80103e8:	6833      	ldr	r3, [r6, #0]
 80103ea:	6825      	ldr	r5, [r4, #0]
 80103ec:	6961      	ldr	r1, [r4, #20]
 80103ee:	1d18      	adds	r0, r3, #4
 80103f0:	6030      	str	r0, [r6, #0]
 80103f2:	062e      	lsls	r6, r5, #24
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	d501      	bpl.n	80103fc <_printf_i+0x1c0>
 80103f8:	6019      	str	r1, [r3, #0]
 80103fa:	e002      	b.n	8010402 <_printf_i+0x1c6>
 80103fc:	0668      	lsls	r0, r5, #25
 80103fe:	d5fb      	bpl.n	80103f8 <_printf_i+0x1bc>
 8010400:	8019      	strh	r1, [r3, #0]
 8010402:	2300      	movs	r3, #0
 8010404:	6123      	str	r3, [r4, #16]
 8010406:	4616      	mov	r6, r2
 8010408:	e7bc      	b.n	8010384 <_printf_i+0x148>
 801040a:	6833      	ldr	r3, [r6, #0]
 801040c:	1d1a      	adds	r2, r3, #4
 801040e:	6032      	str	r2, [r6, #0]
 8010410:	681e      	ldr	r6, [r3, #0]
 8010412:	6862      	ldr	r2, [r4, #4]
 8010414:	2100      	movs	r1, #0
 8010416:	4630      	mov	r0, r6
 8010418:	f7ef ff02 	bl	8000220 <memchr>
 801041c:	b108      	cbz	r0, 8010422 <_printf_i+0x1e6>
 801041e:	1b80      	subs	r0, r0, r6
 8010420:	6060      	str	r0, [r4, #4]
 8010422:	6863      	ldr	r3, [r4, #4]
 8010424:	6123      	str	r3, [r4, #16]
 8010426:	2300      	movs	r3, #0
 8010428:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801042c:	e7aa      	b.n	8010384 <_printf_i+0x148>
 801042e:	6923      	ldr	r3, [r4, #16]
 8010430:	4632      	mov	r2, r6
 8010432:	4649      	mov	r1, r9
 8010434:	4640      	mov	r0, r8
 8010436:	47d0      	blx	sl
 8010438:	3001      	adds	r0, #1
 801043a:	d0ad      	beq.n	8010398 <_printf_i+0x15c>
 801043c:	6823      	ldr	r3, [r4, #0]
 801043e:	079b      	lsls	r3, r3, #30
 8010440:	d413      	bmi.n	801046a <_printf_i+0x22e>
 8010442:	68e0      	ldr	r0, [r4, #12]
 8010444:	9b03      	ldr	r3, [sp, #12]
 8010446:	4298      	cmp	r0, r3
 8010448:	bfb8      	it	lt
 801044a:	4618      	movlt	r0, r3
 801044c:	e7a6      	b.n	801039c <_printf_i+0x160>
 801044e:	2301      	movs	r3, #1
 8010450:	4632      	mov	r2, r6
 8010452:	4649      	mov	r1, r9
 8010454:	4640      	mov	r0, r8
 8010456:	47d0      	blx	sl
 8010458:	3001      	adds	r0, #1
 801045a:	d09d      	beq.n	8010398 <_printf_i+0x15c>
 801045c:	3501      	adds	r5, #1
 801045e:	68e3      	ldr	r3, [r4, #12]
 8010460:	9903      	ldr	r1, [sp, #12]
 8010462:	1a5b      	subs	r3, r3, r1
 8010464:	42ab      	cmp	r3, r5
 8010466:	dcf2      	bgt.n	801044e <_printf_i+0x212>
 8010468:	e7eb      	b.n	8010442 <_printf_i+0x206>
 801046a:	2500      	movs	r5, #0
 801046c:	f104 0619 	add.w	r6, r4, #25
 8010470:	e7f5      	b.n	801045e <_printf_i+0x222>
 8010472:	bf00      	nop
 8010474:	080143ea 	.word	0x080143ea
 8010478:	080143fb 	.word	0x080143fb

0801047c <_scanf_float>:
 801047c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010480:	b087      	sub	sp, #28
 8010482:	4617      	mov	r7, r2
 8010484:	9303      	str	r3, [sp, #12]
 8010486:	688b      	ldr	r3, [r1, #8]
 8010488:	1e5a      	subs	r2, r3, #1
 801048a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801048e:	bf81      	itttt	hi
 8010490:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010494:	eb03 0b05 	addhi.w	fp, r3, r5
 8010498:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801049c:	608b      	strhi	r3, [r1, #8]
 801049e:	680b      	ldr	r3, [r1, #0]
 80104a0:	460a      	mov	r2, r1
 80104a2:	f04f 0500 	mov.w	r5, #0
 80104a6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80104aa:	f842 3b1c 	str.w	r3, [r2], #28
 80104ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80104b2:	4680      	mov	r8, r0
 80104b4:	460c      	mov	r4, r1
 80104b6:	bf98      	it	ls
 80104b8:	f04f 0b00 	movls.w	fp, #0
 80104bc:	9201      	str	r2, [sp, #4]
 80104be:	4616      	mov	r6, r2
 80104c0:	46aa      	mov	sl, r5
 80104c2:	46a9      	mov	r9, r5
 80104c4:	9502      	str	r5, [sp, #8]
 80104c6:	68a2      	ldr	r2, [r4, #8]
 80104c8:	b152      	cbz	r2, 80104e0 <_scanf_float+0x64>
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	2b4e      	cmp	r3, #78	@ 0x4e
 80104d0:	d864      	bhi.n	801059c <_scanf_float+0x120>
 80104d2:	2b40      	cmp	r3, #64	@ 0x40
 80104d4:	d83c      	bhi.n	8010550 <_scanf_float+0xd4>
 80104d6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80104da:	b2c8      	uxtb	r0, r1
 80104dc:	280e      	cmp	r0, #14
 80104de:	d93a      	bls.n	8010556 <_scanf_float+0xda>
 80104e0:	f1b9 0f00 	cmp.w	r9, #0
 80104e4:	d003      	beq.n	80104ee <_scanf_float+0x72>
 80104e6:	6823      	ldr	r3, [r4, #0]
 80104e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80104ec:	6023      	str	r3, [r4, #0]
 80104ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80104f2:	f1ba 0f01 	cmp.w	sl, #1
 80104f6:	f200 8117 	bhi.w	8010728 <_scanf_float+0x2ac>
 80104fa:	9b01      	ldr	r3, [sp, #4]
 80104fc:	429e      	cmp	r6, r3
 80104fe:	f200 8108 	bhi.w	8010712 <_scanf_float+0x296>
 8010502:	2001      	movs	r0, #1
 8010504:	b007      	add	sp, #28
 8010506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801050a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801050e:	2a0d      	cmp	r2, #13
 8010510:	d8e6      	bhi.n	80104e0 <_scanf_float+0x64>
 8010512:	a101      	add	r1, pc, #4	@ (adr r1, 8010518 <_scanf_float+0x9c>)
 8010514:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010518:	0801065f 	.word	0x0801065f
 801051c:	080104e1 	.word	0x080104e1
 8010520:	080104e1 	.word	0x080104e1
 8010524:	080104e1 	.word	0x080104e1
 8010528:	080106bf 	.word	0x080106bf
 801052c:	08010697 	.word	0x08010697
 8010530:	080104e1 	.word	0x080104e1
 8010534:	080104e1 	.word	0x080104e1
 8010538:	0801066d 	.word	0x0801066d
 801053c:	080104e1 	.word	0x080104e1
 8010540:	080104e1 	.word	0x080104e1
 8010544:	080104e1 	.word	0x080104e1
 8010548:	080104e1 	.word	0x080104e1
 801054c:	08010625 	.word	0x08010625
 8010550:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010554:	e7db      	b.n	801050e <_scanf_float+0x92>
 8010556:	290e      	cmp	r1, #14
 8010558:	d8c2      	bhi.n	80104e0 <_scanf_float+0x64>
 801055a:	a001      	add	r0, pc, #4	@ (adr r0, 8010560 <_scanf_float+0xe4>)
 801055c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010560:	08010615 	.word	0x08010615
 8010564:	080104e1 	.word	0x080104e1
 8010568:	08010615 	.word	0x08010615
 801056c:	080106ab 	.word	0x080106ab
 8010570:	080104e1 	.word	0x080104e1
 8010574:	080105bd 	.word	0x080105bd
 8010578:	080105fb 	.word	0x080105fb
 801057c:	080105fb 	.word	0x080105fb
 8010580:	080105fb 	.word	0x080105fb
 8010584:	080105fb 	.word	0x080105fb
 8010588:	080105fb 	.word	0x080105fb
 801058c:	080105fb 	.word	0x080105fb
 8010590:	080105fb 	.word	0x080105fb
 8010594:	080105fb 	.word	0x080105fb
 8010598:	080105fb 	.word	0x080105fb
 801059c:	2b6e      	cmp	r3, #110	@ 0x6e
 801059e:	d809      	bhi.n	80105b4 <_scanf_float+0x138>
 80105a0:	2b60      	cmp	r3, #96	@ 0x60
 80105a2:	d8b2      	bhi.n	801050a <_scanf_float+0x8e>
 80105a4:	2b54      	cmp	r3, #84	@ 0x54
 80105a6:	d07b      	beq.n	80106a0 <_scanf_float+0x224>
 80105a8:	2b59      	cmp	r3, #89	@ 0x59
 80105aa:	d199      	bne.n	80104e0 <_scanf_float+0x64>
 80105ac:	2d07      	cmp	r5, #7
 80105ae:	d197      	bne.n	80104e0 <_scanf_float+0x64>
 80105b0:	2508      	movs	r5, #8
 80105b2:	e02c      	b.n	801060e <_scanf_float+0x192>
 80105b4:	2b74      	cmp	r3, #116	@ 0x74
 80105b6:	d073      	beq.n	80106a0 <_scanf_float+0x224>
 80105b8:	2b79      	cmp	r3, #121	@ 0x79
 80105ba:	e7f6      	b.n	80105aa <_scanf_float+0x12e>
 80105bc:	6821      	ldr	r1, [r4, #0]
 80105be:	05c8      	lsls	r0, r1, #23
 80105c0:	d51b      	bpl.n	80105fa <_scanf_float+0x17e>
 80105c2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80105c6:	6021      	str	r1, [r4, #0]
 80105c8:	f109 0901 	add.w	r9, r9, #1
 80105cc:	f1bb 0f00 	cmp.w	fp, #0
 80105d0:	d003      	beq.n	80105da <_scanf_float+0x15e>
 80105d2:	3201      	adds	r2, #1
 80105d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80105d8:	60a2      	str	r2, [r4, #8]
 80105da:	68a3      	ldr	r3, [r4, #8]
 80105dc:	3b01      	subs	r3, #1
 80105de:	60a3      	str	r3, [r4, #8]
 80105e0:	6923      	ldr	r3, [r4, #16]
 80105e2:	3301      	adds	r3, #1
 80105e4:	6123      	str	r3, [r4, #16]
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	3b01      	subs	r3, #1
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	607b      	str	r3, [r7, #4]
 80105ee:	f340 8087 	ble.w	8010700 <_scanf_float+0x284>
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	3301      	adds	r3, #1
 80105f6:	603b      	str	r3, [r7, #0]
 80105f8:	e765      	b.n	80104c6 <_scanf_float+0x4a>
 80105fa:	eb1a 0105 	adds.w	r1, sl, r5
 80105fe:	f47f af6f 	bne.w	80104e0 <_scanf_float+0x64>
 8010602:	6822      	ldr	r2, [r4, #0]
 8010604:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010608:	6022      	str	r2, [r4, #0]
 801060a:	460d      	mov	r5, r1
 801060c:	468a      	mov	sl, r1
 801060e:	f806 3b01 	strb.w	r3, [r6], #1
 8010612:	e7e2      	b.n	80105da <_scanf_float+0x15e>
 8010614:	6822      	ldr	r2, [r4, #0]
 8010616:	0610      	lsls	r0, r2, #24
 8010618:	f57f af62 	bpl.w	80104e0 <_scanf_float+0x64>
 801061c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010620:	6022      	str	r2, [r4, #0]
 8010622:	e7f4      	b.n	801060e <_scanf_float+0x192>
 8010624:	f1ba 0f00 	cmp.w	sl, #0
 8010628:	d10e      	bne.n	8010648 <_scanf_float+0x1cc>
 801062a:	f1b9 0f00 	cmp.w	r9, #0
 801062e:	d10e      	bne.n	801064e <_scanf_float+0x1d2>
 8010630:	6822      	ldr	r2, [r4, #0]
 8010632:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010636:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801063a:	d108      	bne.n	801064e <_scanf_float+0x1d2>
 801063c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010640:	6022      	str	r2, [r4, #0]
 8010642:	f04f 0a01 	mov.w	sl, #1
 8010646:	e7e2      	b.n	801060e <_scanf_float+0x192>
 8010648:	f1ba 0f02 	cmp.w	sl, #2
 801064c:	d055      	beq.n	80106fa <_scanf_float+0x27e>
 801064e:	2d01      	cmp	r5, #1
 8010650:	d002      	beq.n	8010658 <_scanf_float+0x1dc>
 8010652:	2d04      	cmp	r5, #4
 8010654:	f47f af44 	bne.w	80104e0 <_scanf_float+0x64>
 8010658:	3501      	adds	r5, #1
 801065a:	b2ed      	uxtb	r5, r5
 801065c:	e7d7      	b.n	801060e <_scanf_float+0x192>
 801065e:	f1ba 0f01 	cmp.w	sl, #1
 8010662:	f47f af3d 	bne.w	80104e0 <_scanf_float+0x64>
 8010666:	f04f 0a02 	mov.w	sl, #2
 801066a:	e7d0      	b.n	801060e <_scanf_float+0x192>
 801066c:	b97d      	cbnz	r5, 801068e <_scanf_float+0x212>
 801066e:	f1b9 0f00 	cmp.w	r9, #0
 8010672:	f47f af38 	bne.w	80104e6 <_scanf_float+0x6a>
 8010676:	6822      	ldr	r2, [r4, #0]
 8010678:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801067c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010680:	f040 8108 	bne.w	8010894 <_scanf_float+0x418>
 8010684:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010688:	6022      	str	r2, [r4, #0]
 801068a:	2501      	movs	r5, #1
 801068c:	e7bf      	b.n	801060e <_scanf_float+0x192>
 801068e:	2d03      	cmp	r5, #3
 8010690:	d0e2      	beq.n	8010658 <_scanf_float+0x1dc>
 8010692:	2d05      	cmp	r5, #5
 8010694:	e7de      	b.n	8010654 <_scanf_float+0x1d8>
 8010696:	2d02      	cmp	r5, #2
 8010698:	f47f af22 	bne.w	80104e0 <_scanf_float+0x64>
 801069c:	2503      	movs	r5, #3
 801069e:	e7b6      	b.n	801060e <_scanf_float+0x192>
 80106a0:	2d06      	cmp	r5, #6
 80106a2:	f47f af1d 	bne.w	80104e0 <_scanf_float+0x64>
 80106a6:	2507      	movs	r5, #7
 80106a8:	e7b1      	b.n	801060e <_scanf_float+0x192>
 80106aa:	6822      	ldr	r2, [r4, #0]
 80106ac:	0591      	lsls	r1, r2, #22
 80106ae:	f57f af17 	bpl.w	80104e0 <_scanf_float+0x64>
 80106b2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80106b6:	6022      	str	r2, [r4, #0]
 80106b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80106bc:	e7a7      	b.n	801060e <_scanf_float+0x192>
 80106be:	6822      	ldr	r2, [r4, #0]
 80106c0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80106c4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80106c8:	d006      	beq.n	80106d8 <_scanf_float+0x25c>
 80106ca:	0550      	lsls	r0, r2, #21
 80106cc:	f57f af08 	bpl.w	80104e0 <_scanf_float+0x64>
 80106d0:	f1b9 0f00 	cmp.w	r9, #0
 80106d4:	f000 80de 	beq.w	8010894 <_scanf_float+0x418>
 80106d8:	0591      	lsls	r1, r2, #22
 80106da:	bf58      	it	pl
 80106dc:	9902      	ldrpl	r1, [sp, #8]
 80106de:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80106e2:	bf58      	it	pl
 80106e4:	eba9 0101 	subpl.w	r1, r9, r1
 80106e8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80106ec:	bf58      	it	pl
 80106ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80106f2:	6022      	str	r2, [r4, #0]
 80106f4:	f04f 0900 	mov.w	r9, #0
 80106f8:	e789      	b.n	801060e <_scanf_float+0x192>
 80106fa:	f04f 0a03 	mov.w	sl, #3
 80106fe:	e786      	b.n	801060e <_scanf_float+0x192>
 8010700:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010704:	4639      	mov	r1, r7
 8010706:	4640      	mov	r0, r8
 8010708:	4798      	blx	r3
 801070a:	2800      	cmp	r0, #0
 801070c:	f43f aedb 	beq.w	80104c6 <_scanf_float+0x4a>
 8010710:	e6e6      	b.n	80104e0 <_scanf_float+0x64>
 8010712:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010716:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801071a:	463a      	mov	r2, r7
 801071c:	4640      	mov	r0, r8
 801071e:	4798      	blx	r3
 8010720:	6923      	ldr	r3, [r4, #16]
 8010722:	3b01      	subs	r3, #1
 8010724:	6123      	str	r3, [r4, #16]
 8010726:	e6e8      	b.n	80104fa <_scanf_float+0x7e>
 8010728:	1e6b      	subs	r3, r5, #1
 801072a:	2b06      	cmp	r3, #6
 801072c:	d824      	bhi.n	8010778 <_scanf_float+0x2fc>
 801072e:	2d02      	cmp	r5, #2
 8010730:	d836      	bhi.n	80107a0 <_scanf_float+0x324>
 8010732:	9b01      	ldr	r3, [sp, #4]
 8010734:	429e      	cmp	r6, r3
 8010736:	f67f aee4 	bls.w	8010502 <_scanf_float+0x86>
 801073a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801073e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010742:	463a      	mov	r2, r7
 8010744:	4640      	mov	r0, r8
 8010746:	4798      	blx	r3
 8010748:	6923      	ldr	r3, [r4, #16]
 801074a:	3b01      	subs	r3, #1
 801074c:	6123      	str	r3, [r4, #16]
 801074e:	e7f0      	b.n	8010732 <_scanf_float+0x2b6>
 8010750:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010754:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010758:	463a      	mov	r2, r7
 801075a:	4640      	mov	r0, r8
 801075c:	4798      	blx	r3
 801075e:	6923      	ldr	r3, [r4, #16]
 8010760:	3b01      	subs	r3, #1
 8010762:	6123      	str	r3, [r4, #16]
 8010764:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010768:	fa5f fa8a 	uxtb.w	sl, sl
 801076c:	f1ba 0f02 	cmp.w	sl, #2
 8010770:	d1ee      	bne.n	8010750 <_scanf_float+0x2d4>
 8010772:	3d03      	subs	r5, #3
 8010774:	b2ed      	uxtb	r5, r5
 8010776:	1b76      	subs	r6, r6, r5
 8010778:	6823      	ldr	r3, [r4, #0]
 801077a:	05da      	lsls	r2, r3, #23
 801077c:	d530      	bpl.n	80107e0 <_scanf_float+0x364>
 801077e:	055b      	lsls	r3, r3, #21
 8010780:	d511      	bpl.n	80107a6 <_scanf_float+0x32a>
 8010782:	9b01      	ldr	r3, [sp, #4]
 8010784:	429e      	cmp	r6, r3
 8010786:	f67f aebc 	bls.w	8010502 <_scanf_float+0x86>
 801078a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801078e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010792:	463a      	mov	r2, r7
 8010794:	4640      	mov	r0, r8
 8010796:	4798      	blx	r3
 8010798:	6923      	ldr	r3, [r4, #16]
 801079a:	3b01      	subs	r3, #1
 801079c:	6123      	str	r3, [r4, #16]
 801079e:	e7f0      	b.n	8010782 <_scanf_float+0x306>
 80107a0:	46aa      	mov	sl, r5
 80107a2:	46b3      	mov	fp, r6
 80107a4:	e7de      	b.n	8010764 <_scanf_float+0x2e8>
 80107a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80107aa:	6923      	ldr	r3, [r4, #16]
 80107ac:	2965      	cmp	r1, #101	@ 0x65
 80107ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80107b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80107b6:	6123      	str	r3, [r4, #16]
 80107b8:	d00c      	beq.n	80107d4 <_scanf_float+0x358>
 80107ba:	2945      	cmp	r1, #69	@ 0x45
 80107bc:	d00a      	beq.n	80107d4 <_scanf_float+0x358>
 80107be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80107c2:	463a      	mov	r2, r7
 80107c4:	4640      	mov	r0, r8
 80107c6:	4798      	blx	r3
 80107c8:	6923      	ldr	r3, [r4, #16]
 80107ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80107ce:	3b01      	subs	r3, #1
 80107d0:	1eb5      	subs	r5, r6, #2
 80107d2:	6123      	str	r3, [r4, #16]
 80107d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80107d8:	463a      	mov	r2, r7
 80107da:	4640      	mov	r0, r8
 80107dc:	4798      	blx	r3
 80107de:	462e      	mov	r6, r5
 80107e0:	6822      	ldr	r2, [r4, #0]
 80107e2:	f012 0210 	ands.w	r2, r2, #16
 80107e6:	d001      	beq.n	80107ec <_scanf_float+0x370>
 80107e8:	2000      	movs	r0, #0
 80107ea:	e68b      	b.n	8010504 <_scanf_float+0x88>
 80107ec:	7032      	strb	r2, [r6, #0]
 80107ee:	6823      	ldr	r3, [r4, #0]
 80107f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80107f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80107f8:	d11c      	bne.n	8010834 <_scanf_float+0x3b8>
 80107fa:	9b02      	ldr	r3, [sp, #8]
 80107fc:	454b      	cmp	r3, r9
 80107fe:	eba3 0209 	sub.w	r2, r3, r9
 8010802:	d123      	bne.n	801084c <_scanf_float+0x3d0>
 8010804:	9901      	ldr	r1, [sp, #4]
 8010806:	2200      	movs	r2, #0
 8010808:	4640      	mov	r0, r8
 801080a:	f002 fbf9 	bl	8013000 <_strtod_r>
 801080e:	9b03      	ldr	r3, [sp, #12]
 8010810:	6821      	ldr	r1, [r4, #0]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	f011 0f02 	tst.w	r1, #2
 8010818:	ec57 6b10 	vmov	r6, r7, d0
 801081c:	f103 0204 	add.w	r2, r3, #4
 8010820:	d01f      	beq.n	8010862 <_scanf_float+0x3e6>
 8010822:	9903      	ldr	r1, [sp, #12]
 8010824:	600a      	str	r2, [r1, #0]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	e9c3 6700 	strd	r6, r7, [r3]
 801082c:	68e3      	ldr	r3, [r4, #12]
 801082e:	3301      	adds	r3, #1
 8010830:	60e3      	str	r3, [r4, #12]
 8010832:	e7d9      	b.n	80107e8 <_scanf_float+0x36c>
 8010834:	9b04      	ldr	r3, [sp, #16]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d0e4      	beq.n	8010804 <_scanf_float+0x388>
 801083a:	9905      	ldr	r1, [sp, #20]
 801083c:	230a      	movs	r3, #10
 801083e:	3101      	adds	r1, #1
 8010840:	4640      	mov	r0, r8
 8010842:	f002 fc5d 	bl	8013100 <_strtol_r>
 8010846:	9b04      	ldr	r3, [sp, #16]
 8010848:	9e05      	ldr	r6, [sp, #20]
 801084a:	1ac2      	subs	r2, r0, r3
 801084c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010850:	429e      	cmp	r6, r3
 8010852:	bf28      	it	cs
 8010854:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010858:	4910      	ldr	r1, [pc, #64]	@ (801089c <_scanf_float+0x420>)
 801085a:	4630      	mov	r0, r6
 801085c:	f000 f8e4 	bl	8010a28 <siprintf>
 8010860:	e7d0      	b.n	8010804 <_scanf_float+0x388>
 8010862:	f011 0f04 	tst.w	r1, #4
 8010866:	9903      	ldr	r1, [sp, #12]
 8010868:	600a      	str	r2, [r1, #0]
 801086a:	d1dc      	bne.n	8010826 <_scanf_float+0x3aa>
 801086c:	681d      	ldr	r5, [r3, #0]
 801086e:	4632      	mov	r2, r6
 8010870:	463b      	mov	r3, r7
 8010872:	4630      	mov	r0, r6
 8010874:	4639      	mov	r1, r7
 8010876:	f7f0 f981 	bl	8000b7c <__aeabi_dcmpun>
 801087a:	b128      	cbz	r0, 8010888 <_scanf_float+0x40c>
 801087c:	4808      	ldr	r0, [pc, #32]	@ (80108a0 <_scanf_float+0x424>)
 801087e:	f000 f9b7 	bl	8010bf0 <nanf>
 8010882:	ed85 0a00 	vstr	s0, [r5]
 8010886:	e7d1      	b.n	801082c <_scanf_float+0x3b0>
 8010888:	4630      	mov	r0, r6
 801088a:	4639      	mov	r1, r7
 801088c:	f7f0 f9d4 	bl	8000c38 <__aeabi_d2f>
 8010890:	6028      	str	r0, [r5, #0]
 8010892:	e7cb      	b.n	801082c <_scanf_float+0x3b0>
 8010894:	f04f 0900 	mov.w	r9, #0
 8010898:	e629      	b.n	80104ee <_scanf_float+0x72>
 801089a:	bf00      	nop
 801089c:	0801440c 	.word	0x0801440c
 80108a0:	080147a5 	.word	0x080147a5

080108a4 <std>:
 80108a4:	2300      	movs	r3, #0
 80108a6:	b510      	push	{r4, lr}
 80108a8:	4604      	mov	r4, r0
 80108aa:	e9c0 3300 	strd	r3, r3, [r0]
 80108ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80108b2:	6083      	str	r3, [r0, #8]
 80108b4:	8181      	strh	r1, [r0, #12]
 80108b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80108b8:	81c2      	strh	r2, [r0, #14]
 80108ba:	6183      	str	r3, [r0, #24]
 80108bc:	4619      	mov	r1, r3
 80108be:	2208      	movs	r2, #8
 80108c0:	305c      	adds	r0, #92	@ 0x5c
 80108c2:	f000 f914 	bl	8010aee <memset>
 80108c6:	4b0d      	ldr	r3, [pc, #52]	@ (80108fc <std+0x58>)
 80108c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80108ca:	4b0d      	ldr	r3, [pc, #52]	@ (8010900 <std+0x5c>)
 80108cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80108ce:	4b0d      	ldr	r3, [pc, #52]	@ (8010904 <std+0x60>)
 80108d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80108d2:	4b0d      	ldr	r3, [pc, #52]	@ (8010908 <std+0x64>)
 80108d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80108d6:	4b0d      	ldr	r3, [pc, #52]	@ (801090c <std+0x68>)
 80108d8:	6224      	str	r4, [r4, #32]
 80108da:	429c      	cmp	r4, r3
 80108dc:	d006      	beq.n	80108ec <std+0x48>
 80108de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80108e2:	4294      	cmp	r4, r2
 80108e4:	d002      	beq.n	80108ec <std+0x48>
 80108e6:	33d0      	adds	r3, #208	@ 0xd0
 80108e8:	429c      	cmp	r4, r3
 80108ea:	d105      	bne.n	80108f8 <std+0x54>
 80108ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80108f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108f4:	f000 b978 	b.w	8010be8 <__retarget_lock_init_recursive>
 80108f8:	bd10      	pop	{r4, pc}
 80108fa:	bf00      	nop
 80108fc:	08010a69 	.word	0x08010a69
 8010900:	08010a8b 	.word	0x08010a8b
 8010904:	08010ac3 	.word	0x08010ac3
 8010908:	08010ae7 	.word	0x08010ae7
 801090c:	20002860 	.word	0x20002860

08010910 <stdio_exit_handler>:
 8010910:	4a02      	ldr	r2, [pc, #8]	@ (801091c <stdio_exit_handler+0xc>)
 8010912:	4903      	ldr	r1, [pc, #12]	@ (8010920 <stdio_exit_handler+0x10>)
 8010914:	4803      	ldr	r0, [pc, #12]	@ (8010924 <stdio_exit_handler+0x14>)
 8010916:	f000 b869 	b.w	80109ec <_fwalk_sglue>
 801091a:	bf00      	nop
 801091c:	20000188 	.word	0x20000188
 8010920:	080134bd 	.word	0x080134bd
 8010924:	20000198 	.word	0x20000198

08010928 <cleanup_stdio>:
 8010928:	6841      	ldr	r1, [r0, #4]
 801092a:	4b0c      	ldr	r3, [pc, #48]	@ (801095c <cleanup_stdio+0x34>)
 801092c:	4299      	cmp	r1, r3
 801092e:	b510      	push	{r4, lr}
 8010930:	4604      	mov	r4, r0
 8010932:	d001      	beq.n	8010938 <cleanup_stdio+0x10>
 8010934:	f002 fdc2 	bl	80134bc <_fflush_r>
 8010938:	68a1      	ldr	r1, [r4, #8]
 801093a:	4b09      	ldr	r3, [pc, #36]	@ (8010960 <cleanup_stdio+0x38>)
 801093c:	4299      	cmp	r1, r3
 801093e:	d002      	beq.n	8010946 <cleanup_stdio+0x1e>
 8010940:	4620      	mov	r0, r4
 8010942:	f002 fdbb 	bl	80134bc <_fflush_r>
 8010946:	68e1      	ldr	r1, [r4, #12]
 8010948:	4b06      	ldr	r3, [pc, #24]	@ (8010964 <cleanup_stdio+0x3c>)
 801094a:	4299      	cmp	r1, r3
 801094c:	d004      	beq.n	8010958 <cleanup_stdio+0x30>
 801094e:	4620      	mov	r0, r4
 8010950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010954:	f002 bdb2 	b.w	80134bc <_fflush_r>
 8010958:	bd10      	pop	{r4, pc}
 801095a:	bf00      	nop
 801095c:	20002860 	.word	0x20002860
 8010960:	200028c8 	.word	0x200028c8
 8010964:	20002930 	.word	0x20002930

08010968 <global_stdio_init.part.0>:
 8010968:	b510      	push	{r4, lr}
 801096a:	4b0b      	ldr	r3, [pc, #44]	@ (8010998 <global_stdio_init.part.0+0x30>)
 801096c:	4c0b      	ldr	r4, [pc, #44]	@ (801099c <global_stdio_init.part.0+0x34>)
 801096e:	4a0c      	ldr	r2, [pc, #48]	@ (80109a0 <global_stdio_init.part.0+0x38>)
 8010970:	601a      	str	r2, [r3, #0]
 8010972:	4620      	mov	r0, r4
 8010974:	2200      	movs	r2, #0
 8010976:	2104      	movs	r1, #4
 8010978:	f7ff ff94 	bl	80108a4 <std>
 801097c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010980:	2201      	movs	r2, #1
 8010982:	2109      	movs	r1, #9
 8010984:	f7ff ff8e 	bl	80108a4 <std>
 8010988:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801098c:	2202      	movs	r2, #2
 801098e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010992:	2112      	movs	r1, #18
 8010994:	f7ff bf86 	b.w	80108a4 <std>
 8010998:	20002998 	.word	0x20002998
 801099c:	20002860 	.word	0x20002860
 80109a0:	08010911 	.word	0x08010911

080109a4 <__sfp_lock_acquire>:
 80109a4:	4801      	ldr	r0, [pc, #4]	@ (80109ac <__sfp_lock_acquire+0x8>)
 80109a6:	f000 b920 	b.w	8010bea <__retarget_lock_acquire_recursive>
 80109aa:	bf00      	nop
 80109ac:	200029a1 	.word	0x200029a1

080109b0 <__sfp_lock_release>:
 80109b0:	4801      	ldr	r0, [pc, #4]	@ (80109b8 <__sfp_lock_release+0x8>)
 80109b2:	f000 b91b 	b.w	8010bec <__retarget_lock_release_recursive>
 80109b6:	bf00      	nop
 80109b8:	200029a1 	.word	0x200029a1

080109bc <__sinit>:
 80109bc:	b510      	push	{r4, lr}
 80109be:	4604      	mov	r4, r0
 80109c0:	f7ff fff0 	bl	80109a4 <__sfp_lock_acquire>
 80109c4:	6a23      	ldr	r3, [r4, #32]
 80109c6:	b11b      	cbz	r3, 80109d0 <__sinit+0x14>
 80109c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109cc:	f7ff bff0 	b.w	80109b0 <__sfp_lock_release>
 80109d0:	4b04      	ldr	r3, [pc, #16]	@ (80109e4 <__sinit+0x28>)
 80109d2:	6223      	str	r3, [r4, #32]
 80109d4:	4b04      	ldr	r3, [pc, #16]	@ (80109e8 <__sinit+0x2c>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d1f5      	bne.n	80109c8 <__sinit+0xc>
 80109dc:	f7ff ffc4 	bl	8010968 <global_stdio_init.part.0>
 80109e0:	e7f2      	b.n	80109c8 <__sinit+0xc>
 80109e2:	bf00      	nop
 80109e4:	08010929 	.word	0x08010929
 80109e8:	20002998 	.word	0x20002998

080109ec <_fwalk_sglue>:
 80109ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109f0:	4607      	mov	r7, r0
 80109f2:	4688      	mov	r8, r1
 80109f4:	4614      	mov	r4, r2
 80109f6:	2600      	movs	r6, #0
 80109f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80109fc:	f1b9 0901 	subs.w	r9, r9, #1
 8010a00:	d505      	bpl.n	8010a0e <_fwalk_sglue+0x22>
 8010a02:	6824      	ldr	r4, [r4, #0]
 8010a04:	2c00      	cmp	r4, #0
 8010a06:	d1f7      	bne.n	80109f8 <_fwalk_sglue+0xc>
 8010a08:	4630      	mov	r0, r6
 8010a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a0e:	89ab      	ldrh	r3, [r5, #12]
 8010a10:	2b01      	cmp	r3, #1
 8010a12:	d907      	bls.n	8010a24 <_fwalk_sglue+0x38>
 8010a14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010a18:	3301      	adds	r3, #1
 8010a1a:	d003      	beq.n	8010a24 <_fwalk_sglue+0x38>
 8010a1c:	4629      	mov	r1, r5
 8010a1e:	4638      	mov	r0, r7
 8010a20:	47c0      	blx	r8
 8010a22:	4306      	orrs	r6, r0
 8010a24:	3568      	adds	r5, #104	@ 0x68
 8010a26:	e7e9      	b.n	80109fc <_fwalk_sglue+0x10>

08010a28 <siprintf>:
 8010a28:	b40e      	push	{r1, r2, r3}
 8010a2a:	b500      	push	{lr}
 8010a2c:	b09c      	sub	sp, #112	@ 0x70
 8010a2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8010a30:	9002      	str	r0, [sp, #8]
 8010a32:	9006      	str	r0, [sp, #24]
 8010a34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010a38:	4809      	ldr	r0, [pc, #36]	@ (8010a60 <siprintf+0x38>)
 8010a3a:	9107      	str	r1, [sp, #28]
 8010a3c:	9104      	str	r1, [sp, #16]
 8010a3e:	4909      	ldr	r1, [pc, #36]	@ (8010a64 <siprintf+0x3c>)
 8010a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a44:	9105      	str	r1, [sp, #20]
 8010a46:	6800      	ldr	r0, [r0, #0]
 8010a48:	9301      	str	r3, [sp, #4]
 8010a4a:	a902      	add	r1, sp, #8
 8010a4c:	f002 fbb6 	bl	80131bc <_svfiprintf_r>
 8010a50:	9b02      	ldr	r3, [sp, #8]
 8010a52:	2200      	movs	r2, #0
 8010a54:	701a      	strb	r2, [r3, #0]
 8010a56:	b01c      	add	sp, #112	@ 0x70
 8010a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a5c:	b003      	add	sp, #12
 8010a5e:	4770      	bx	lr
 8010a60:	20000194 	.word	0x20000194
 8010a64:	ffff0208 	.word	0xffff0208

08010a68 <__sread>:
 8010a68:	b510      	push	{r4, lr}
 8010a6a:	460c      	mov	r4, r1
 8010a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a70:	f000 f86c 	bl	8010b4c <_read_r>
 8010a74:	2800      	cmp	r0, #0
 8010a76:	bfab      	itete	ge
 8010a78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010a7a:	89a3      	ldrhlt	r3, [r4, #12]
 8010a7c:	181b      	addge	r3, r3, r0
 8010a7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010a82:	bfac      	ite	ge
 8010a84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010a86:	81a3      	strhlt	r3, [r4, #12]
 8010a88:	bd10      	pop	{r4, pc}

08010a8a <__swrite>:
 8010a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a8e:	461f      	mov	r7, r3
 8010a90:	898b      	ldrh	r3, [r1, #12]
 8010a92:	05db      	lsls	r3, r3, #23
 8010a94:	4605      	mov	r5, r0
 8010a96:	460c      	mov	r4, r1
 8010a98:	4616      	mov	r6, r2
 8010a9a:	d505      	bpl.n	8010aa8 <__swrite+0x1e>
 8010a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010aa0:	2302      	movs	r3, #2
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	f000 f840 	bl	8010b28 <_lseek_r>
 8010aa8:	89a3      	ldrh	r3, [r4, #12]
 8010aaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010aae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010ab2:	81a3      	strh	r3, [r4, #12]
 8010ab4:	4632      	mov	r2, r6
 8010ab6:	463b      	mov	r3, r7
 8010ab8:	4628      	mov	r0, r5
 8010aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010abe:	f000 b857 	b.w	8010b70 <_write_r>

08010ac2 <__sseek>:
 8010ac2:	b510      	push	{r4, lr}
 8010ac4:	460c      	mov	r4, r1
 8010ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010aca:	f000 f82d 	bl	8010b28 <_lseek_r>
 8010ace:	1c43      	adds	r3, r0, #1
 8010ad0:	89a3      	ldrh	r3, [r4, #12]
 8010ad2:	bf15      	itete	ne
 8010ad4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010ad6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010ada:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010ade:	81a3      	strheq	r3, [r4, #12]
 8010ae0:	bf18      	it	ne
 8010ae2:	81a3      	strhne	r3, [r4, #12]
 8010ae4:	bd10      	pop	{r4, pc}

08010ae6 <__sclose>:
 8010ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010aea:	f000 b80d 	b.w	8010b08 <_close_r>

08010aee <memset>:
 8010aee:	4402      	add	r2, r0
 8010af0:	4603      	mov	r3, r0
 8010af2:	4293      	cmp	r3, r2
 8010af4:	d100      	bne.n	8010af8 <memset+0xa>
 8010af6:	4770      	bx	lr
 8010af8:	f803 1b01 	strb.w	r1, [r3], #1
 8010afc:	e7f9      	b.n	8010af2 <memset+0x4>
	...

08010b00 <_localeconv_r>:
 8010b00:	4800      	ldr	r0, [pc, #0]	@ (8010b04 <_localeconv_r+0x4>)
 8010b02:	4770      	bx	lr
 8010b04:	200002d4 	.word	0x200002d4

08010b08 <_close_r>:
 8010b08:	b538      	push	{r3, r4, r5, lr}
 8010b0a:	4d06      	ldr	r5, [pc, #24]	@ (8010b24 <_close_r+0x1c>)
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	4604      	mov	r4, r0
 8010b10:	4608      	mov	r0, r1
 8010b12:	602b      	str	r3, [r5, #0]
 8010b14:	f7f2 fc3c 	bl	8003390 <_close>
 8010b18:	1c43      	adds	r3, r0, #1
 8010b1a:	d102      	bne.n	8010b22 <_close_r+0x1a>
 8010b1c:	682b      	ldr	r3, [r5, #0]
 8010b1e:	b103      	cbz	r3, 8010b22 <_close_r+0x1a>
 8010b20:	6023      	str	r3, [r4, #0]
 8010b22:	bd38      	pop	{r3, r4, r5, pc}
 8010b24:	2000299c 	.word	0x2000299c

08010b28 <_lseek_r>:
 8010b28:	b538      	push	{r3, r4, r5, lr}
 8010b2a:	4d07      	ldr	r5, [pc, #28]	@ (8010b48 <_lseek_r+0x20>)
 8010b2c:	4604      	mov	r4, r0
 8010b2e:	4608      	mov	r0, r1
 8010b30:	4611      	mov	r1, r2
 8010b32:	2200      	movs	r2, #0
 8010b34:	602a      	str	r2, [r5, #0]
 8010b36:	461a      	mov	r2, r3
 8010b38:	f7f2 fc51 	bl	80033de <_lseek>
 8010b3c:	1c43      	adds	r3, r0, #1
 8010b3e:	d102      	bne.n	8010b46 <_lseek_r+0x1e>
 8010b40:	682b      	ldr	r3, [r5, #0]
 8010b42:	b103      	cbz	r3, 8010b46 <_lseek_r+0x1e>
 8010b44:	6023      	str	r3, [r4, #0]
 8010b46:	bd38      	pop	{r3, r4, r5, pc}
 8010b48:	2000299c 	.word	0x2000299c

08010b4c <_read_r>:
 8010b4c:	b538      	push	{r3, r4, r5, lr}
 8010b4e:	4d07      	ldr	r5, [pc, #28]	@ (8010b6c <_read_r+0x20>)
 8010b50:	4604      	mov	r4, r0
 8010b52:	4608      	mov	r0, r1
 8010b54:	4611      	mov	r1, r2
 8010b56:	2200      	movs	r2, #0
 8010b58:	602a      	str	r2, [r5, #0]
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	f7f2 fbdf 	bl	800331e <_read>
 8010b60:	1c43      	adds	r3, r0, #1
 8010b62:	d102      	bne.n	8010b6a <_read_r+0x1e>
 8010b64:	682b      	ldr	r3, [r5, #0]
 8010b66:	b103      	cbz	r3, 8010b6a <_read_r+0x1e>
 8010b68:	6023      	str	r3, [r4, #0]
 8010b6a:	bd38      	pop	{r3, r4, r5, pc}
 8010b6c:	2000299c 	.word	0x2000299c

08010b70 <_write_r>:
 8010b70:	b538      	push	{r3, r4, r5, lr}
 8010b72:	4d07      	ldr	r5, [pc, #28]	@ (8010b90 <_write_r+0x20>)
 8010b74:	4604      	mov	r4, r0
 8010b76:	4608      	mov	r0, r1
 8010b78:	4611      	mov	r1, r2
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	602a      	str	r2, [r5, #0]
 8010b7e:	461a      	mov	r2, r3
 8010b80:	f7f2 fbea 	bl	8003358 <_write>
 8010b84:	1c43      	adds	r3, r0, #1
 8010b86:	d102      	bne.n	8010b8e <_write_r+0x1e>
 8010b88:	682b      	ldr	r3, [r5, #0]
 8010b8a:	b103      	cbz	r3, 8010b8e <_write_r+0x1e>
 8010b8c:	6023      	str	r3, [r4, #0]
 8010b8e:	bd38      	pop	{r3, r4, r5, pc}
 8010b90:	2000299c 	.word	0x2000299c

08010b94 <__errno>:
 8010b94:	4b01      	ldr	r3, [pc, #4]	@ (8010b9c <__errno+0x8>)
 8010b96:	6818      	ldr	r0, [r3, #0]
 8010b98:	4770      	bx	lr
 8010b9a:	bf00      	nop
 8010b9c:	20000194 	.word	0x20000194

08010ba0 <__libc_init_array>:
 8010ba0:	b570      	push	{r4, r5, r6, lr}
 8010ba2:	4d0d      	ldr	r5, [pc, #52]	@ (8010bd8 <__libc_init_array+0x38>)
 8010ba4:	4c0d      	ldr	r4, [pc, #52]	@ (8010bdc <__libc_init_array+0x3c>)
 8010ba6:	1b64      	subs	r4, r4, r5
 8010ba8:	10a4      	asrs	r4, r4, #2
 8010baa:	2600      	movs	r6, #0
 8010bac:	42a6      	cmp	r6, r4
 8010bae:	d109      	bne.n	8010bc4 <__libc_init_array+0x24>
 8010bb0:	4d0b      	ldr	r5, [pc, #44]	@ (8010be0 <__libc_init_array+0x40>)
 8010bb2:	4c0c      	ldr	r4, [pc, #48]	@ (8010be4 <__libc_init_array+0x44>)
 8010bb4:	f003 fb72 	bl	801429c <_init>
 8010bb8:	1b64      	subs	r4, r4, r5
 8010bba:	10a4      	asrs	r4, r4, #2
 8010bbc:	2600      	movs	r6, #0
 8010bbe:	42a6      	cmp	r6, r4
 8010bc0:	d105      	bne.n	8010bce <__libc_init_array+0x2e>
 8010bc2:	bd70      	pop	{r4, r5, r6, pc}
 8010bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010bc8:	4798      	blx	r3
 8010bca:	3601      	adds	r6, #1
 8010bcc:	e7ee      	b.n	8010bac <__libc_init_array+0xc>
 8010bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8010bd2:	4798      	blx	r3
 8010bd4:	3601      	adds	r6, #1
 8010bd6:	e7f2      	b.n	8010bbe <__libc_init_array+0x1e>
 8010bd8:	08014810 	.word	0x08014810
 8010bdc:	08014810 	.word	0x08014810
 8010be0:	08014810 	.word	0x08014810
 8010be4:	08014814 	.word	0x08014814

08010be8 <__retarget_lock_init_recursive>:
 8010be8:	4770      	bx	lr

08010bea <__retarget_lock_acquire_recursive>:
 8010bea:	4770      	bx	lr

08010bec <__retarget_lock_release_recursive>:
 8010bec:	4770      	bx	lr
	...

08010bf0 <nanf>:
 8010bf0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010bf8 <nanf+0x8>
 8010bf4:	4770      	bx	lr
 8010bf6:	bf00      	nop
 8010bf8:	7fc00000 	.word	0x7fc00000

08010bfc <quorem>:
 8010bfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c00:	6903      	ldr	r3, [r0, #16]
 8010c02:	690c      	ldr	r4, [r1, #16]
 8010c04:	42a3      	cmp	r3, r4
 8010c06:	4607      	mov	r7, r0
 8010c08:	db7e      	blt.n	8010d08 <quorem+0x10c>
 8010c0a:	3c01      	subs	r4, #1
 8010c0c:	f101 0814 	add.w	r8, r1, #20
 8010c10:	00a3      	lsls	r3, r4, #2
 8010c12:	f100 0514 	add.w	r5, r0, #20
 8010c16:	9300      	str	r3, [sp, #0]
 8010c18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010c1c:	9301      	str	r3, [sp, #4]
 8010c1e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010c22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010c26:	3301      	adds	r3, #1
 8010c28:	429a      	cmp	r2, r3
 8010c2a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010c2e:	fbb2 f6f3 	udiv	r6, r2, r3
 8010c32:	d32e      	bcc.n	8010c92 <quorem+0x96>
 8010c34:	f04f 0a00 	mov.w	sl, #0
 8010c38:	46c4      	mov	ip, r8
 8010c3a:	46ae      	mov	lr, r5
 8010c3c:	46d3      	mov	fp, sl
 8010c3e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010c42:	b298      	uxth	r0, r3
 8010c44:	fb06 a000 	mla	r0, r6, r0, sl
 8010c48:	0c02      	lsrs	r2, r0, #16
 8010c4a:	0c1b      	lsrs	r3, r3, #16
 8010c4c:	fb06 2303 	mla	r3, r6, r3, r2
 8010c50:	f8de 2000 	ldr.w	r2, [lr]
 8010c54:	b280      	uxth	r0, r0
 8010c56:	b292      	uxth	r2, r2
 8010c58:	1a12      	subs	r2, r2, r0
 8010c5a:	445a      	add	r2, fp
 8010c5c:	f8de 0000 	ldr.w	r0, [lr]
 8010c60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010c64:	b29b      	uxth	r3, r3
 8010c66:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010c6a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010c6e:	b292      	uxth	r2, r2
 8010c70:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010c74:	45e1      	cmp	r9, ip
 8010c76:	f84e 2b04 	str.w	r2, [lr], #4
 8010c7a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010c7e:	d2de      	bcs.n	8010c3e <quorem+0x42>
 8010c80:	9b00      	ldr	r3, [sp, #0]
 8010c82:	58eb      	ldr	r3, [r5, r3]
 8010c84:	b92b      	cbnz	r3, 8010c92 <quorem+0x96>
 8010c86:	9b01      	ldr	r3, [sp, #4]
 8010c88:	3b04      	subs	r3, #4
 8010c8a:	429d      	cmp	r5, r3
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	d32f      	bcc.n	8010cf0 <quorem+0xf4>
 8010c90:	613c      	str	r4, [r7, #16]
 8010c92:	4638      	mov	r0, r7
 8010c94:	f001 f9c4 	bl	8012020 <__mcmp>
 8010c98:	2800      	cmp	r0, #0
 8010c9a:	db25      	blt.n	8010ce8 <quorem+0xec>
 8010c9c:	4629      	mov	r1, r5
 8010c9e:	2000      	movs	r0, #0
 8010ca0:	f858 2b04 	ldr.w	r2, [r8], #4
 8010ca4:	f8d1 c000 	ldr.w	ip, [r1]
 8010ca8:	fa1f fe82 	uxth.w	lr, r2
 8010cac:	fa1f f38c 	uxth.w	r3, ip
 8010cb0:	eba3 030e 	sub.w	r3, r3, lr
 8010cb4:	4403      	add	r3, r0
 8010cb6:	0c12      	lsrs	r2, r2, #16
 8010cb8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010cbc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010cc0:	b29b      	uxth	r3, r3
 8010cc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010cc6:	45c1      	cmp	r9, r8
 8010cc8:	f841 3b04 	str.w	r3, [r1], #4
 8010ccc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010cd0:	d2e6      	bcs.n	8010ca0 <quorem+0xa4>
 8010cd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010cd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010cda:	b922      	cbnz	r2, 8010ce6 <quorem+0xea>
 8010cdc:	3b04      	subs	r3, #4
 8010cde:	429d      	cmp	r5, r3
 8010ce0:	461a      	mov	r2, r3
 8010ce2:	d30b      	bcc.n	8010cfc <quorem+0x100>
 8010ce4:	613c      	str	r4, [r7, #16]
 8010ce6:	3601      	adds	r6, #1
 8010ce8:	4630      	mov	r0, r6
 8010cea:	b003      	add	sp, #12
 8010cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cf0:	6812      	ldr	r2, [r2, #0]
 8010cf2:	3b04      	subs	r3, #4
 8010cf4:	2a00      	cmp	r2, #0
 8010cf6:	d1cb      	bne.n	8010c90 <quorem+0x94>
 8010cf8:	3c01      	subs	r4, #1
 8010cfa:	e7c6      	b.n	8010c8a <quorem+0x8e>
 8010cfc:	6812      	ldr	r2, [r2, #0]
 8010cfe:	3b04      	subs	r3, #4
 8010d00:	2a00      	cmp	r2, #0
 8010d02:	d1ef      	bne.n	8010ce4 <quorem+0xe8>
 8010d04:	3c01      	subs	r4, #1
 8010d06:	e7ea      	b.n	8010cde <quorem+0xe2>
 8010d08:	2000      	movs	r0, #0
 8010d0a:	e7ee      	b.n	8010cea <quorem+0xee>
 8010d0c:	0000      	movs	r0, r0
	...

08010d10 <_dtoa_r>:
 8010d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d14:	69c7      	ldr	r7, [r0, #28]
 8010d16:	b099      	sub	sp, #100	@ 0x64
 8010d18:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010d1c:	ec55 4b10 	vmov	r4, r5, d0
 8010d20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010d22:	9109      	str	r1, [sp, #36]	@ 0x24
 8010d24:	4683      	mov	fp, r0
 8010d26:	920e      	str	r2, [sp, #56]	@ 0x38
 8010d28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010d2a:	b97f      	cbnz	r7, 8010d4c <_dtoa_r+0x3c>
 8010d2c:	2010      	movs	r0, #16
 8010d2e:	f000 fdfd 	bl	801192c <malloc>
 8010d32:	4602      	mov	r2, r0
 8010d34:	f8cb 001c 	str.w	r0, [fp, #28]
 8010d38:	b920      	cbnz	r0, 8010d44 <_dtoa_r+0x34>
 8010d3a:	4ba7      	ldr	r3, [pc, #668]	@ (8010fd8 <_dtoa_r+0x2c8>)
 8010d3c:	21ef      	movs	r1, #239	@ 0xef
 8010d3e:	48a7      	ldr	r0, [pc, #668]	@ (8010fdc <_dtoa_r+0x2cc>)
 8010d40:	f002 fc36 	bl	80135b0 <__assert_func>
 8010d44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010d48:	6007      	str	r7, [r0, #0]
 8010d4a:	60c7      	str	r7, [r0, #12]
 8010d4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010d50:	6819      	ldr	r1, [r3, #0]
 8010d52:	b159      	cbz	r1, 8010d6c <_dtoa_r+0x5c>
 8010d54:	685a      	ldr	r2, [r3, #4]
 8010d56:	604a      	str	r2, [r1, #4]
 8010d58:	2301      	movs	r3, #1
 8010d5a:	4093      	lsls	r3, r2
 8010d5c:	608b      	str	r3, [r1, #8]
 8010d5e:	4658      	mov	r0, fp
 8010d60:	f000 feda 	bl	8011b18 <_Bfree>
 8010d64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	601a      	str	r2, [r3, #0]
 8010d6c:	1e2b      	subs	r3, r5, #0
 8010d6e:	bfb9      	ittee	lt
 8010d70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010d74:	9303      	strlt	r3, [sp, #12]
 8010d76:	2300      	movge	r3, #0
 8010d78:	6033      	strge	r3, [r6, #0]
 8010d7a:	9f03      	ldr	r7, [sp, #12]
 8010d7c:	4b98      	ldr	r3, [pc, #608]	@ (8010fe0 <_dtoa_r+0x2d0>)
 8010d7e:	bfbc      	itt	lt
 8010d80:	2201      	movlt	r2, #1
 8010d82:	6032      	strlt	r2, [r6, #0]
 8010d84:	43bb      	bics	r3, r7
 8010d86:	d112      	bne.n	8010dae <_dtoa_r+0x9e>
 8010d88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010d8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010d8e:	6013      	str	r3, [r2, #0]
 8010d90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010d94:	4323      	orrs	r3, r4
 8010d96:	f000 854d 	beq.w	8011834 <_dtoa_r+0xb24>
 8010d9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010d9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010ff4 <_dtoa_r+0x2e4>
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	f000 854f 	beq.w	8011844 <_dtoa_r+0xb34>
 8010da6:	f10a 0303 	add.w	r3, sl, #3
 8010daa:	f000 bd49 	b.w	8011840 <_dtoa_r+0xb30>
 8010dae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010db2:	2200      	movs	r2, #0
 8010db4:	ec51 0b17 	vmov	r0, r1, d7
 8010db8:	2300      	movs	r3, #0
 8010dba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010dbe:	f7ef feab 	bl	8000b18 <__aeabi_dcmpeq>
 8010dc2:	4680      	mov	r8, r0
 8010dc4:	b158      	cbz	r0, 8010dde <_dtoa_r+0xce>
 8010dc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010dc8:	2301      	movs	r3, #1
 8010dca:	6013      	str	r3, [r2, #0]
 8010dcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010dce:	b113      	cbz	r3, 8010dd6 <_dtoa_r+0xc6>
 8010dd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010dd2:	4b84      	ldr	r3, [pc, #528]	@ (8010fe4 <_dtoa_r+0x2d4>)
 8010dd4:	6013      	str	r3, [r2, #0]
 8010dd6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010ff8 <_dtoa_r+0x2e8>
 8010dda:	f000 bd33 	b.w	8011844 <_dtoa_r+0xb34>
 8010dde:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010de2:	aa16      	add	r2, sp, #88	@ 0x58
 8010de4:	a917      	add	r1, sp, #92	@ 0x5c
 8010de6:	4658      	mov	r0, fp
 8010de8:	f001 fa3a 	bl	8012260 <__d2b>
 8010dec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010df0:	4681      	mov	r9, r0
 8010df2:	2e00      	cmp	r6, #0
 8010df4:	d077      	beq.n	8010ee6 <_dtoa_r+0x1d6>
 8010df6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010df8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010e08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010e0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010e10:	4619      	mov	r1, r3
 8010e12:	2200      	movs	r2, #0
 8010e14:	4b74      	ldr	r3, [pc, #464]	@ (8010fe8 <_dtoa_r+0x2d8>)
 8010e16:	f7ef fa5f 	bl	80002d8 <__aeabi_dsub>
 8010e1a:	a369      	add	r3, pc, #420	@ (adr r3, 8010fc0 <_dtoa_r+0x2b0>)
 8010e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e20:	f7ef fc12 	bl	8000648 <__aeabi_dmul>
 8010e24:	a368      	add	r3, pc, #416	@ (adr r3, 8010fc8 <_dtoa_r+0x2b8>)
 8010e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e2a:	f7ef fa57 	bl	80002dc <__adddf3>
 8010e2e:	4604      	mov	r4, r0
 8010e30:	4630      	mov	r0, r6
 8010e32:	460d      	mov	r5, r1
 8010e34:	f7ef fb9e 	bl	8000574 <__aeabi_i2d>
 8010e38:	a365      	add	r3, pc, #404	@ (adr r3, 8010fd0 <_dtoa_r+0x2c0>)
 8010e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e3e:	f7ef fc03 	bl	8000648 <__aeabi_dmul>
 8010e42:	4602      	mov	r2, r0
 8010e44:	460b      	mov	r3, r1
 8010e46:	4620      	mov	r0, r4
 8010e48:	4629      	mov	r1, r5
 8010e4a:	f7ef fa47 	bl	80002dc <__adddf3>
 8010e4e:	4604      	mov	r4, r0
 8010e50:	460d      	mov	r5, r1
 8010e52:	f7ef fea9 	bl	8000ba8 <__aeabi_d2iz>
 8010e56:	2200      	movs	r2, #0
 8010e58:	4607      	mov	r7, r0
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	4629      	mov	r1, r5
 8010e60:	f7ef fe64 	bl	8000b2c <__aeabi_dcmplt>
 8010e64:	b140      	cbz	r0, 8010e78 <_dtoa_r+0x168>
 8010e66:	4638      	mov	r0, r7
 8010e68:	f7ef fb84 	bl	8000574 <__aeabi_i2d>
 8010e6c:	4622      	mov	r2, r4
 8010e6e:	462b      	mov	r3, r5
 8010e70:	f7ef fe52 	bl	8000b18 <__aeabi_dcmpeq>
 8010e74:	b900      	cbnz	r0, 8010e78 <_dtoa_r+0x168>
 8010e76:	3f01      	subs	r7, #1
 8010e78:	2f16      	cmp	r7, #22
 8010e7a:	d851      	bhi.n	8010f20 <_dtoa_r+0x210>
 8010e7c:	4b5b      	ldr	r3, [pc, #364]	@ (8010fec <_dtoa_r+0x2dc>)
 8010e7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e8a:	f7ef fe4f 	bl	8000b2c <__aeabi_dcmplt>
 8010e8e:	2800      	cmp	r0, #0
 8010e90:	d048      	beq.n	8010f24 <_dtoa_r+0x214>
 8010e92:	3f01      	subs	r7, #1
 8010e94:	2300      	movs	r3, #0
 8010e96:	9312      	str	r3, [sp, #72]	@ 0x48
 8010e98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010e9a:	1b9b      	subs	r3, r3, r6
 8010e9c:	1e5a      	subs	r2, r3, #1
 8010e9e:	bf44      	itt	mi
 8010ea0:	f1c3 0801 	rsbmi	r8, r3, #1
 8010ea4:	2300      	movmi	r3, #0
 8010ea6:	9208      	str	r2, [sp, #32]
 8010ea8:	bf54      	ite	pl
 8010eaa:	f04f 0800 	movpl.w	r8, #0
 8010eae:	9308      	strmi	r3, [sp, #32]
 8010eb0:	2f00      	cmp	r7, #0
 8010eb2:	db39      	blt.n	8010f28 <_dtoa_r+0x218>
 8010eb4:	9b08      	ldr	r3, [sp, #32]
 8010eb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010eb8:	443b      	add	r3, r7
 8010eba:	9308      	str	r3, [sp, #32]
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ec2:	2b09      	cmp	r3, #9
 8010ec4:	d864      	bhi.n	8010f90 <_dtoa_r+0x280>
 8010ec6:	2b05      	cmp	r3, #5
 8010ec8:	bfc4      	itt	gt
 8010eca:	3b04      	subgt	r3, #4
 8010ecc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ed0:	f1a3 0302 	sub.w	r3, r3, #2
 8010ed4:	bfcc      	ite	gt
 8010ed6:	2400      	movgt	r4, #0
 8010ed8:	2401      	movle	r4, #1
 8010eda:	2b03      	cmp	r3, #3
 8010edc:	d863      	bhi.n	8010fa6 <_dtoa_r+0x296>
 8010ede:	e8df f003 	tbb	[pc, r3]
 8010ee2:	372a      	.short	0x372a
 8010ee4:	5535      	.short	0x5535
 8010ee6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010eea:	441e      	add	r6, r3
 8010eec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010ef0:	2b20      	cmp	r3, #32
 8010ef2:	bfc1      	itttt	gt
 8010ef4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010ef8:	409f      	lslgt	r7, r3
 8010efa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010efe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010f02:	bfd6      	itet	le
 8010f04:	f1c3 0320 	rsble	r3, r3, #32
 8010f08:	ea47 0003 	orrgt.w	r0, r7, r3
 8010f0c:	fa04 f003 	lslle.w	r0, r4, r3
 8010f10:	f7ef fb20 	bl	8000554 <__aeabi_ui2d>
 8010f14:	2201      	movs	r2, #1
 8010f16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010f1a:	3e01      	subs	r6, #1
 8010f1c:	9214      	str	r2, [sp, #80]	@ 0x50
 8010f1e:	e777      	b.n	8010e10 <_dtoa_r+0x100>
 8010f20:	2301      	movs	r3, #1
 8010f22:	e7b8      	b.n	8010e96 <_dtoa_r+0x186>
 8010f24:	9012      	str	r0, [sp, #72]	@ 0x48
 8010f26:	e7b7      	b.n	8010e98 <_dtoa_r+0x188>
 8010f28:	427b      	negs	r3, r7
 8010f2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	eba8 0807 	sub.w	r8, r8, r7
 8010f32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010f34:	e7c4      	b.n	8010ec0 <_dtoa_r+0x1b0>
 8010f36:	2300      	movs	r3, #0
 8010f38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	dc35      	bgt.n	8010fac <_dtoa_r+0x29c>
 8010f40:	2301      	movs	r3, #1
 8010f42:	9300      	str	r3, [sp, #0]
 8010f44:	9307      	str	r3, [sp, #28]
 8010f46:	461a      	mov	r2, r3
 8010f48:	920e      	str	r2, [sp, #56]	@ 0x38
 8010f4a:	e00b      	b.n	8010f64 <_dtoa_r+0x254>
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	e7f3      	b.n	8010f38 <_dtoa_r+0x228>
 8010f50:	2300      	movs	r3, #0
 8010f52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f56:	18fb      	adds	r3, r7, r3
 8010f58:	9300      	str	r3, [sp, #0]
 8010f5a:	3301      	adds	r3, #1
 8010f5c:	2b01      	cmp	r3, #1
 8010f5e:	9307      	str	r3, [sp, #28]
 8010f60:	bfb8      	it	lt
 8010f62:	2301      	movlt	r3, #1
 8010f64:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010f68:	2100      	movs	r1, #0
 8010f6a:	2204      	movs	r2, #4
 8010f6c:	f102 0514 	add.w	r5, r2, #20
 8010f70:	429d      	cmp	r5, r3
 8010f72:	d91f      	bls.n	8010fb4 <_dtoa_r+0x2a4>
 8010f74:	6041      	str	r1, [r0, #4]
 8010f76:	4658      	mov	r0, fp
 8010f78:	f000 fd8e 	bl	8011a98 <_Balloc>
 8010f7c:	4682      	mov	sl, r0
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	d13c      	bne.n	8010ffc <_dtoa_r+0x2ec>
 8010f82:	4b1b      	ldr	r3, [pc, #108]	@ (8010ff0 <_dtoa_r+0x2e0>)
 8010f84:	4602      	mov	r2, r0
 8010f86:	f240 11af 	movw	r1, #431	@ 0x1af
 8010f8a:	e6d8      	b.n	8010d3e <_dtoa_r+0x2e>
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	e7e0      	b.n	8010f52 <_dtoa_r+0x242>
 8010f90:	2401      	movs	r4, #1
 8010f92:	2300      	movs	r3, #0
 8010f94:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f96:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010f98:	f04f 33ff 	mov.w	r3, #4294967295
 8010f9c:	9300      	str	r3, [sp, #0]
 8010f9e:	9307      	str	r3, [sp, #28]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	2312      	movs	r3, #18
 8010fa4:	e7d0      	b.n	8010f48 <_dtoa_r+0x238>
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010faa:	e7f5      	b.n	8010f98 <_dtoa_r+0x288>
 8010fac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010fae:	9300      	str	r3, [sp, #0]
 8010fb0:	9307      	str	r3, [sp, #28]
 8010fb2:	e7d7      	b.n	8010f64 <_dtoa_r+0x254>
 8010fb4:	3101      	adds	r1, #1
 8010fb6:	0052      	lsls	r2, r2, #1
 8010fb8:	e7d8      	b.n	8010f6c <_dtoa_r+0x25c>
 8010fba:	bf00      	nop
 8010fbc:	f3af 8000 	nop.w
 8010fc0:	636f4361 	.word	0x636f4361
 8010fc4:	3fd287a7 	.word	0x3fd287a7
 8010fc8:	8b60c8b3 	.word	0x8b60c8b3
 8010fcc:	3fc68a28 	.word	0x3fc68a28
 8010fd0:	509f79fb 	.word	0x509f79fb
 8010fd4:	3fd34413 	.word	0x3fd34413
 8010fd8:	0801441e 	.word	0x0801441e
 8010fdc:	08014435 	.word	0x08014435
 8010fe0:	7ff00000 	.word	0x7ff00000
 8010fe4:	080143e9 	.word	0x080143e9
 8010fe8:	3ff80000 	.word	0x3ff80000
 8010fec:	08014530 	.word	0x08014530
 8010ff0:	0801448d 	.word	0x0801448d
 8010ff4:	0801441a 	.word	0x0801441a
 8010ff8:	080143e8 	.word	0x080143e8
 8010ffc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011000:	6018      	str	r0, [r3, #0]
 8011002:	9b07      	ldr	r3, [sp, #28]
 8011004:	2b0e      	cmp	r3, #14
 8011006:	f200 80a4 	bhi.w	8011152 <_dtoa_r+0x442>
 801100a:	2c00      	cmp	r4, #0
 801100c:	f000 80a1 	beq.w	8011152 <_dtoa_r+0x442>
 8011010:	2f00      	cmp	r7, #0
 8011012:	dd33      	ble.n	801107c <_dtoa_r+0x36c>
 8011014:	4bad      	ldr	r3, [pc, #692]	@ (80112cc <_dtoa_r+0x5bc>)
 8011016:	f007 020f 	and.w	r2, r7, #15
 801101a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801101e:	ed93 7b00 	vldr	d7, [r3]
 8011022:	05f8      	lsls	r0, r7, #23
 8011024:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011028:	ea4f 1427 	mov.w	r4, r7, asr #4
 801102c:	d516      	bpl.n	801105c <_dtoa_r+0x34c>
 801102e:	4ba8      	ldr	r3, [pc, #672]	@ (80112d0 <_dtoa_r+0x5c0>)
 8011030:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011034:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011038:	f7ef fc30 	bl	800089c <__aeabi_ddiv>
 801103c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011040:	f004 040f 	and.w	r4, r4, #15
 8011044:	2603      	movs	r6, #3
 8011046:	4da2      	ldr	r5, [pc, #648]	@ (80112d0 <_dtoa_r+0x5c0>)
 8011048:	b954      	cbnz	r4, 8011060 <_dtoa_r+0x350>
 801104a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801104e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011052:	f7ef fc23 	bl	800089c <__aeabi_ddiv>
 8011056:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801105a:	e028      	b.n	80110ae <_dtoa_r+0x39e>
 801105c:	2602      	movs	r6, #2
 801105e:	e7f2      	b.n	8011046 <_dtoa_r+0x336>
 8011060:	07e1      	lsls	r1, r4, #31
 8011062:	d508      	bpl.n	8011076 <_dtoa_r+0x366>
 8011064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011068:	e9d5 2300 	ldrd	r2, r3, [r5]
 801106c:	f7ef faec 	bl	8000648 <__aeabi_dmul>
 8011070:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011074:	3601      	adds	r6, #1
 8011076:	1064      	asrs	r4, r4, #1
 8011078:	3508      	adds	r5, #8
 801107a:	e7e5      	b.n	8011048 <_dtoa_r+0x338>
 801107c:	f000 80d2 	beq.w	8011224 <_dtoa_r+0x514>
 8011080:	427c      	negs	r4, r7
 8011082:	4b92      	ldr	r3, [pc, #584]	@ (80112cc <_dtoa_r+0x5bc>)
 8011084:	4d92      	ldr	r5, [pc, #584]	@ (80112d0 <_dtoa_r+0x5c0>)
 8011086:	f004 020f 	and.w	r2, r4, #15
 801108a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011092:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011096:	f7ef fad7 	bl	8000648 <__aeabi_dmul>
 801109a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801109e:	1124      	asrs	r4, r4, #4
 80110a0:	2300      	movs	r3, #0
 80110a2:	2602      	movs	r6, #2
 80110a4:	2c00      	cmp	r4, #0
 80110a6:	f040 80b2 	bne.w	801120e <_dtoa_r+0x4fe>
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d1d3      	bne.n	8011056 <_dtoa_r+0x346>
 80110ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80110b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	f000 80b7 	beq.w	8011228 <_dtoa_r+0x518>
 80110ba:	4b86      	ldr	r3, [pc, #536]	@ (80112d4 <_dtoa_r+0x5c4>)
 80110bc:	2200      	movs	r2, #0
 80110be:	4620      	mov	r0, r4
 80110c0:	4629      	mov	r1, r5
 80110c2:	f7ef fd33 	bl	8000b2c <__aeabi_dcmplt>
 80110c6:	2800      	cmp	r0, #0
 80110c8:	f000 80ae 	beq.w	8011228 <_dtoa_r+0x518>
 80110cc:	9b07      	ldr	r3, [sp, #28]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	f000 80aa 	beq.w	8011228 <_dtoa_r+0x518>
 80110d4:	9b00      	ldr	r3, [sp, #0]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	dd37      	ble.n	801114a <_dtoa_r+0x43a>
 80110da:	1e7b      	subs	r3, r7, #1
 80110dc:	9304      	str	r3, [sp, #16]
 80110de:	4620      	mov	r0, r4
 80110e0:	4b7d      	ldr	r3, [pc, #500]	@ (80112d8 <_dtoa_r+0x5c8>)
 80110e2:	2200      	movs	r2, #0
 80110e4:	4629      	mov	r1, r5
 80110e6:	f7ef faaf 	bl	8000648 <__aeabi_dmul>
 80110ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110ee:	9c00      	ldr	r4, [sp, #0]
 80110f0:	3601      	adds	r6, #1
 80110f2:	4630      	mov	r0, r6
 80110f4:	f7ef fa3e 	bl	8000574 <__aeabi_i2d>
 80110f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80110fc:	f7ef faa4 	bl	8000648 <__aeabi_dmul>
 8011100:	4b76      	ldr	r3, [pc, #472]	@ (80112dc <_dtoa_r+0x5cc>)
 8011102:	2200      	movs	r2, #0
 8011104:	f7ef f8ea 	bl	80002dc <__adddf3>
 8011108:	4605      	mov	r5, r0
 801110a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801110e:	2c00      	cmp	r4, #0
 8011110:	f040 808d 	bne.w	801122e <_dtoa_r+0x51e>
 8011114:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011118:	4b71      	ldr	r3, [pc, #452]	@ (80112e0 <_dtoa_r+0x5d0>)
 801111a:	2200      	movs	r2, #0
 801111c:	f7ef f8dc 	bl	80002d8 <__aeabi_dsub>
 8011120:	4602      	mov	r2, r0
 8011122:	460b      	mov	r3, r1
 8011124:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011128:	462a      	mov	r2, r5
 801112a:	4633      	mov	r3, r6
 801112c:	f7ef fd1c 	bl	8000b68 <__aeabi_dcmpgt>
 8011130:	2800      	cmp	r0, #0
 8011132:	f040 828b 	bne.w	801164c <_dtoa_r+0x93c>
 8011136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801113a:	462a      	mov	r2, r5
 801113c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011140:	f7ef fcf4 	bl	8000b2c <__aeabi_dcmplt>
 8011144:	2800      	cmp	r0, #0
 8011146:	f040 8128 	bne.w	801139a <_dtoa_r+0x68a>
 801114a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801114e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011152:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011154:	2b00      	cmp	r3, #0
 8011156:	f2c0 815a 	blt.w	801140e <_dtoa_r+0x6fe>
 801115a:	2f0e      	cmp	r7, #14
 801115c:	f300 8157 	bgt.w	801140e <_dtoa_r+0x6fe>
 8011160:	4b5a      	ldr	r3, [pc, #360]	@ (80112cc <_dtoa_r+0x5bc>)
 8011162:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011166:	ed93 7b00 	vldr	d7, [r3]
 801116a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801116c:	2b00      	cmp	r3, #0
 801116e:	ed8d 7b00 	vstr	d7, [sp]
 8011172:	da03      	bge.n	801117c <_dtoa_r+0x46c>
 8011174:	9b07      	ldr	r3, [sp, #28]
 8011176:	2b00      	cmp	r3, #0
 8011178:	f340 8101 	ble.w	801137e <_dtoa_r+0x66e>
 801117c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011180:	4656      	mov	r6, sl
 8011182:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011186:	4620      	mov	r0, r4
 8011188:	4629      	mov	r1, r5
 801118a:	f7ef fb87 	bl	800089c <__aeabi_ddiv>
 801118e:	f7ef fd0b 	bl	8000ba8 <__aeabi_d2iz>
 8011192:	4680      	mov	r8, r0
 8011194:	f7ef f9ee 	bl	8000574 <__aeabi_i2d>
 8011198:	e9dd 2300 	ldrd	r2, r3, [sp]
 801119c:	f7ef fa54 	bl	8000648 <__aeabi_dmul>
 80111a0:	4602      	mov	r2, r0
 80111a2:	460b      	mov	r3, r1
 80111a4:	4620      	mov	r0, r4
 80111a6:	4629      	mov	r1, r5
 80111a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80111ac:	f7ef f894 	bl	80002d8 <__aeabi_dsub>
 80111b0:	f806 4b01 	strb.w	r4, [r6], #1
 80111b4:	9d07      	ldr	r5, [sp, #28]
 80111b6:	eba6 040a 	sub.w	r4, r6, sl
 80111ba:	42a5      	cmp	r5, r4
 80111bc:	4602      	mov	r2, r0
 80111be:	460b      	mov	r3, r1
 80111c0:	f040 8117 	bne.w	80113f2 <_dtoa_r+0x6e2>
 80111c4:	f7ef f88a 	bl	80002dc <__adddf3>
 80111c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80111cc:	4604      	mov	r4, r0
 80111ce:	460d      	mov	r5, r1
 80111d0:	f7ef fcca 	bl	8000b68 <__aeabi_dcmpgt>
 80111d4:	2800      	cmp	r0, #0
 80111d6:	f040 80f9 	bne.w	80113cc <_dtoa_r+0x6bc>
 80111da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80111de:	4620      	mov	r0, r4
 80111e0:	4629      	mov	r1, r5
 80111e2:	f7ef fc99 	bl	8000b18 <__aeabi_dcmpeq>
 80111e6:	b118      	cbz	r0, 80111f0 <_dtoa_r+0x4e0>
 80111e8:	f018 0f01 	tst.w	r8, #1
 80111ec:	f040 80ee 	bne.w	80113cc <_dtoa_r+0x6bc>
 80111f0:	4649      	mov	r1, r9
 80111f2:	4658      	mov	r0, fp
 80111f4:	f000 fc90 	bl	8011b18 <_Bfree>
 80111f8:	2300      	movs	r3, #0
 80111fa:	7033      	strb	r3, [r6, #0]
 80111fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80111fe:	3701      	adds	r7, #1
 8011200:	601f      	str	r7, [r3, #0]
 8011202:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011204:	2b00      	cmp	r3, #0
 8011206:	f000 831d 	beq.w	8011844 <_dtoa_r+0xb34>
 801120a:	601e      	str	r6, [r3, #0]
 801120c:	e31a      	b.n	8011844 <_dtoa_r+0xb34>
 801120e:	07e2      	lsls	r2, r4, #31
 8011210:	d505      	bpl.n	801121e <_dtoa_r+0x50e>
 8011212:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011216:	f7ef fa17 	bl	8000648 <__aeabi_dmul>
 801121a:	3601      	adds	r6, #1
 801121c:	2301      	movs	r3, #1
 801121e:	1064      	asrs	r4, r4, #1
 8011220:	3508      	adds	r5, #8
 8011222:	e73f      	b.n	80110a4 <_dtoa_r+0x394>
 8011224:	2602      	movs	r6, #2
 8011226:	e742      	b.n	80110ae <_dtoa_r+0x39e>
 8011228:	9c07      	ldr	r4, [sp, #28]
 801122a:	9704      	str	r7, [sp, #16]
 801122c:	e761      	b.n	80110f2 <_dtoa_r+0x3e2>
 801122e:	4b27      	ldr	r3, [pc, #156]	@ (80112cc <_dtoa_r+0x5bc>)
 8011230:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011232:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011236:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801123a:	4454      	add	r4, sl
 801123c:	2900      	cmp	r1, #0
 801123e:	d053      	beq.n	80112e8 <_dtoa_r+0x5d8>
 8011240:	4928      	ldr	r1, [pc, #160]	@ (80112e4 <_dtoa_r+0x5d4>)
 8011242:	2000      	movs	r0, #0
 8011244:	f7ef fb2a 	bl	800089c <__aeabi_ddiv>
 8011248:	4633      	mov	r3, r6
 801124a:	462a      	mov	r2, r5
 801124c:	f7ef f844 	bl	80002d8 <__aeabi_dsub>
 8011250:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011254:	4656      	mov	r6, sl
 8011256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801125a:	f7ef fca5 	bl	8000ba8 <__aeabi_d2iz>
 801125e:	4605      	mov	r5, r0
 8011260:	f7ef f988 	bl	8000574 <__aeabi_i2d>
 8011264:	4602      	mov	r2, r0
 8011266:	460b      	mov	r3, r1
 8011268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801126c:	f7ef f834 	bl	80002d8 <__aeabi_dsub>
 8011270:	3530      	adds	r5, #48	@ 0x30
 8011272:	4602      	mov	r2, r0
 8011274:	460b      	mov	r3, r1
 8011276:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801127a:	f806 5b01 	strb.w	r5, [r6], #1
 801127e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011282:	f7ef fc53 	bl	8000b2c <__aeabi_dcmplt>
 8011286:	2800      	cmp	r0, #0
 8011288:	d171      	bne.n	801136e <_dtoa_r+0x65e>
 801128a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801128e:	4911      	ldr	r1, [pc, #68]	@ (80112d4 <_dtoa_r+0x5c4>)
 8011290:	2000      	movs	r0, #0
 8011292:	f7ef f821 	bl	80002d8 <__aeabi_dsub>
 8011296:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801129a:	f7ef fc47 	bl	8000b2c <__aeabi_dcmplt>
 801129e:	2800      	cmp	r0, #0
 80112a0:	f040 8095 	bne.w	80113ce <_dtoa_r+0x6be>
 80112a4:	42a6      	cmp	r6, r4
 80112a6:	f43f af50 	beq.w	801114a <_dtoa_r+0x43a>
 80112aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80112ae:	4b0a      	ldr	r3, [pc, #40]	@ (80112d8 <_dtoa_r+0x5c8>)
 80112b0:	2200      	movs	r2, #0
 80112b2:	f7ef f9c9 	bl	8000648 <__aeabi_dmul>
 80112b6:	4b08      	ldr	r3, [pc, #32]	@ (80112d8 <_dtoa_r+0x5c8>)
 80112b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80112bc:	2200      	movs	r2, #0
 80112be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112c2:	f7ef f9c1 	bl	8000648 <__aeabi_dmul>
 80112c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80112ca:	e7c4      	b.n	8011256 <_dtoa_r+0x546>
 80112cc:	08014530 	.word	0x08014530
 80112d0:	08014508 	.word	0x08014508
 80112d4:	3ff00000 	.word	0x3ff00000
 80112d8:	40240000 	.word	0x40240000
 80112dc:	401c0000 	.word	0x401c0000
 80112e0:	40140000 	.word	0x40140000
 80112e4:	3fe00000 	.word	0x3fe00000
 80112e8:	4631      	mov	r1, r6
 80112ea:	4628      	mov	r0, r5
 80112ec:	f7ef f9ac 	bl	8000648 <__aeabi_dmul>
 80112f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80112f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80112f6:	4656      	mov	r6, sl
 80112f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112fc:	f7ef fc54 	bl	8000ba8 <__aeabi_d2iz>
 8011300:	4605      	mov	r5, r0
 8011302:	f7ef f937 	bl	8000574 <__aeabi_i2d>
 8011306:	4602      	mov	r2, r0
 8011308:	460b      	mov	r3, r1
 801130a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801130e:	f7ee ffe3 	bl	80002d8 <__aeabi_dsub>
 8011312:	3530      	adds	r5, #48	@ 0x30
 8011314:	f806 5b01 	strb.w	r5, [r6], #1
 8011318:	4602      	mov	r2, r0
 801131a:	460b      	mov	r3, r1
 801131c:	42a6      	cmp	r6, r4
 801131e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011322:	f04f 0200 	mov.w	r2, #0
 8011326:	d124      	bne.n	8011372 <_dtoa_r+0x662>
 8011328:	4bac      	ldr	r3, [pc, #688]	@ (80115dc <_dtoa_r+0x8cc>)
 801132a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801132e:	f7ee ffd5 	bl	80002dc <__adddf3>
 8011332:	4602      	mov	r2, r0
 8011334:	460b      	mov	r3, r1
 8011336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801133a:	f7ef fc15 	bl	8000b68 <__aeabi_dcmpgt>
 801133e:	2800      	cmp	r0, #0
 8011340:	d145      	bne.n	80113ce <_dtoa_r+0x6be>
 8011342:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011346:	49a5      	ldr	r1, [pc, #660]	@ (80115dc <_dtoa_r+0x8cc>)
 8011348:	2000      	movs	r0, #0
 801134a:	f7ee ffc5 	bl	80002d8 <__aeabi_dsub>
 801134e:	4602      	mov	r2, r0
 8011350:	460b      	mov	r3, r1
 8011352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011356:	f7ef fbe9 	bl	8000b2c <__aeabi_dcmplt>
 801135a:	2800      	cmp	r0, #0
 801135c:	f43f aef5 	beq.w	801114a <_dtoa_r+0x43a>
 8011360:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011362:	1e73      	subs	r3, r6, #1
 8011364:	9315      	str	r3, [sp, #84]	@ 0x54
 8011366:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801136a:	2b30      	cmp	r3, #48	@ 0x30
 801136c:	d0f8      	beq.n	8011360 <_dtoa_r+0x650>
 801136e:	9f04      	ldr	r7, [sp, #16]
 8011370:	e73e      	b.n	80111f0 <_dtoa_r+0x4e0>
 8011372:	4b9b      	ldr	r3, [pc, #620]	@ (80115e0 <_dtoa_r+0x8d0>)
 8011374:	f7ef f968 	bl	8000648 <__aeabi_dmul>
 8011378:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801137c:	e7bc      	b.n	80112f8 <_dtoa_r+0x5e8>
 801137e:	d10c      	bne.n	801139a <_dtoa_r+0x68a>
 8011380:	4b98      	ldr	r3, [pc, #608]	@ (80115e4 <_dtoa_r+0x8d4>)
 8011382:	2200      	movs	r2, #0
 8011384:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011388:	f7ef f95e 	bl	8000648 <__aeabi_dmul>
 801138c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011390:	f7ef fbe0 	bl	8000b54 <__aeabi_dcmpge>
 8011394:	2800      	cmp	r0, #0
 8011396:	f000 8157 	beq.w	8011648 <_dtoa_r+0x938>
 801139a:	2400      	movs	r4, #0
 801139c:	4625      	mov	r5, r4
 801139e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80113a0:	43db      	mvns	r3, r3
 80113a2:	9304      	str	r3, [sp, #16]
 80113a4:	4656      	mov	r6, sl
 80113a6:	2700      	movs	r7, #0
 80113a8:	4621      	mov	r1, r4
 80113aa:	4658      	mov	r0, fp
 80113ac:	f000 fbb4 	bl	8011b18 <_Bfree>
 80113b0:	2d00      	cmp	r5, #0
 80113b2:	d0dc      	beq.n	801136e <_dtoa_r+0x65e>
 80113b4:	b12f      	cbz	r7, 80113c2 <_dtoa_r+0x6b2>
 80113b6:	42af      	cmp	r7, r5
 80113b8:	d003      	beq.n	80113c2 <_dtoa_r+0x6b2>
 80113ba:	4639      	mov	r1, r7
 80113bc:	4658      	mov	r0, fp
 80113be:	f000 fbab 	bl	8011b18 <_Bfree>
 80113c2:	4629      	mov	r1, r5
 80113c4:	4658      	mov	r0, fp
 80113c6:	f000 fba7 	bl	8011b18 <_Bfree>
 80113ca:	e7d0      	b.n	801136e <_dtoa_r+0x65e>
 80113cc:	9704      	str	r7, [sp, #16]
 80113ce:	4633      	mov	r3, r6
 80113d0:	461e      	mov	r6, r3
 80113d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80113d6:	2a39      	cmp	r2, #57	@ 0x39
 80113d8:	d107      	bne.n	80113ea <_dtoa_r+0x6da>
 80113da:	459a      	cmp	sl, r3
 80113dc:	d1f8      	bne.n	80113d0 <_dtoa_r+0x6c0>
 80113de:	9a04      	ldr	r2, [sp, #16]
 80113e0:	3201      	adds	r2, #1
 80113e2:	9204      	str	r2, [sp, #16]
 80113e4:	2230      	movs	r2, #48	@ 0x30
 80113e6:	f88a 2000 	strb.w	r2, [sl]
 80113ea:	781a      	ldrb	r2, [r3, #0]
 80113ec:	3201      	adds	r2, #1
 80113ee:	701a      	strb	r2, [r3, #0]
 80113f0:	e7bd      	b.n	801136e <_dtoa_r+0x65e>
 80113f2:	4b7b      	ldr	r3, [pc, #492]	@ (80115e0 <_dtoa_r+0x8d0>)
 80113f4:	2200      	movs	r2, #0
 80113f6:	f7ef f927 	bl	8000648 <__aeabi_dmul>
 80113fa:	2200      	movs	r2, #0
 80113fc:	2300      	movs	r3, #0
 80113fe:	4604      	mov	r4, r0
 8011400:	460d      	mov	r5, r1
 8011402:	f7ef fb89 	bl	8000b18 <__aeabi_dcmpeq>
 8011406:	2800      	cmp	r0, #0
 8011408:	f43f aebb 	beq.w	8011182 <_dtoa_r+0x472>
 801140c:	e6f0      	b.n	80111f0 <_dtoa_r+0x4e0>
 801140e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011410:	2a00      	cmp	r2, #0
 8011412:	f000 80db 	beq.w	80115cc <_dtoa_r+0x8bc>
 8011416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011418:	2a01      	cmp	r2, #1
 801141a:	f300 80bf 	bgt.w	801159c <_dtoa_r+0x88c>
 801141e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011420:	2a00      	cmp	r2, #0
 8011422:	f000 80b7 	beq.w	8011594 <_dtoa_r+0x884>
 8011426:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801142a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801142c:	4646      	mov	r6, r8
 801142e:	9a08      	ldr	r2, [sp, #32]
 8011430:	2101      	movs	r1, #1
 8011432:	441a      	add	r2, r3
 8011434:	4658      	mov	r0, fp
 8011436:	4498      	add	r8, r3
 8011438:	9208      	str	r2, [sp, #32]
 801143a:	f000 fc6b 	bl	8011d14 <__i2b>
 801143e:	4605      	mov	r5, r0
 8011440:	b15e      	cbz	r6, 801145a <_dtoa_r+0x74a>
 8011442:	9b08      	ldr	r3, [sp, #32]
 8011444:	2b00      	cmp	r3, #0
 8011446:	dd08      	ble.n	801145a <_dtoa_r+0x74a>
 8011448:	42b3      	cmp	r3, r6
 801144a:	9a08      	ldr	r2, [sp, #32]
 801144c:	bfa8      	it	ge
 801144e:	4633      	movge	r3, r6
 8011450:	eba8 0803 	sub.w	r8, r8, r3
 8011454:	1af6      	subs	r6, r6, r3
 8011456:	1ad3      	subs	r3, r2, r3
 8011458:	9308      	str	r3, [sp, #32]
 801145a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801145c:	b1f3      	cbz	r3, 801149c <_dtoa_r+0x78c>
 801145e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011460:	2b00      	cmp	r3, #0
 8011462:	f000 80b7 	beq.w	80115d4 <_dtoa_r+0x8c4>
 8011466:	b18c      	cbz	r4, 801148c <_dtoa_r+0x77c>
 8011468:	4629      	mov	r1, r5
 801146a:	4622      	mov	r2, r4
 801146c:	4658      	mov	r0, fp
 801146e:	f000 fd11 	bl	8011e94 <__pow5mult>
 8011472:	464a      	mov	r2, r9
 8011474:	4601      	mov	r1, r0
 8011476:	4605      	mov	r5, r0
 8011478:	4658      	mov	r0, fp
 801147a:	f000 fc61 	bl	8011d40 <__multiply>
 801147e:	4649      	mov	r1, r9
 8011480:	9004      	str	r0, [sp, #16]
 8011482:	4658      	mov	r0, fp
 8011484:	f000 fb48 	bl	8011b18 <_Bfree>
 8011488:	9b04      	ldr	r3, [sp, #16]
 801148a:	4699      	mov	r9, r3
 801148c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801148e:	1b1a      	subs	r2, r3, r4
 8011490:	d004      	beq.n	801149c <_dtoa_r+0x78c>
 8011492:	4649      	mov	r1, r9
 8011494:	4658      	mov	r0, fp
 8011496:	f000 fcfd 	bl	8011e94 <__pow5mult>
 801149a:	4681      	mov	r9, r0
 801149c:	2101      	movs	r1, #1
 801149e:	4658      	mov	r0, fp
 80114a0:	f000 fc38 	bl	8011d14 <__i2b>
 80114a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80114a6:	4604      	mov	r4, r0
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	f000 81cf 	beq.w	801184c <_dtoa_r+0xb3c>
 80114ae:	461a      	mov	r2, r3
 80114b0:	4601      	mov	r1, r0
 80114b2:	4658      	mov	r0, fp
 80114b4:	f000 fcee 	bl	8011e94 <__pow5mult>
 80114b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114ba:	2b01      	cmp	r3, #1
 80114bc:	4604      	mov	r4, r0
 80114be:	f300 8095 	bgt.w	80115ec <_dtoa_r+0x8dc>
 80114c2:	9b02      	ldr	r3, [sp, #8]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	f040 8087 	bne.w	80115d8 <_dtoa_r+0x8c8>
 80114ca:	9b03      	ldr	r3, [sp, #12]
 80114cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	f040 8089 	bne.w	80115e8 <_dtoa_r+0x8d8>
 80114d6:	9b03      	ldr	r3, [sp, #12]
 80114d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80114dc:	0d1b      	lsrs	r3, r3, #20
 80114de:	051b      	lsls	r3, r3, #20
 80114e0:	b12b      	cbz	r3, 80114ee <_dtoa_r+0x7de>
 80114e2:	9b08      	ldr	r3, [sp, #32]
 80114e4:	3301      	adds	r3, #1
 80114e6:	9308      	str	r3, [sp, #32]
 80114e8:	f108 0801 	add.w	r8, r8, #1
 80114ec:	2301      	movs	r3, #1
 80114ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80114f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	f000 81b0 	beq.w	8011858 <_dtoa_r+0xb48>
 80114f8:	6923      	ldr	r3, [r4, #16]
 80114fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80114fe:	6918      	ldr	r0, [r3, #16]
 8011500:	f000 fbbc 	bl	8011c7c <__hi0bits>
 8011504:	f1c0 0020 	rsb	r0, r0, #32
 8011508:	9b08      	ldr	r3, [sp, #32]
 801150a:	4418      	add	r0, r3
 801150c:	f010 001f 	ands.w	r0, r0, #31
 8011510:	d077      	beq.n	8011602 <_dtoa_r+0x8f2>
 8011512:	f1c0 0320 	rsb	r3, r0, #32
 8011516:	2b04      	cmp	r3, #4
 8011518:	dd6b      	ble.n	80115f2 <_dtoa_r+0x8e2>
 801151a:	9b08      	ldr	r3, [sp, #32]
 801151c:	f1c0 001c 	rsb	r0, r0, #28
 8011520:	4403      	add	r3, r0
 8011522:	4480      	add	r8, r0
 8011524:	4406      	add	r6, r0
 8011526:	9308      	str	r3, [sp, #32]
 8011528:	f1b8 0f00 	cmp.w	r8, #0
 801152c:	dd05      	ble.n	801153a <_dtoa_r+0x82a>
 801152e:	4649      	mov	r1, r9
 8011530:	4642      	mov	r2, r8
 8011532:	4658      	mov	r0, fp
 8011534:	f000 fd08 	bl	8011f48 <__lshift>
 8011538:	4681      	mov	r9, r0
 801153a:	9b08      	ldr	r3, [sp, #32]
 801153c:	2b00      	cmp	r3, #0
 801153e:	dd05      	ble.n	801154c <_dtoa_r+0x83c>
 8011540:	4621      	mov	r1, r4
 8011542:	461a      	mov	r2, r3
 8011544:	4658      	mov	r0, fp
 8011546:	f000 fcff 	bl	8011f48 <__lshift>
 801154a:	4604      	mov	r4, r0
 801154c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801154e:	2b00      	cmp	r3, #0
 8011550:	d059      	beq.n	8011606 <_dtoa_r+0x8f6>
 8011552:	4621      	mov	r1, r4
 8011554:	4648      	mov	r0, r9
 8011556:	f000 fd63 	bl	8012020 <__mcmp>
 801155a:	2800      	cmp	r0, #0
 801155c:	da53      	bge.n	8011606 <_dtoa_r+0x8f6>
 801155e:	1e7b      	subs	r3, r7, #1
 8011560:	9304      	str	r3, [sp, #16]
 8011562:	4649      	mov	r1, r9
 8011564:	2300      	movs	r3, #0
 8011566:	220a      	movs	r2, #10
 8011568:	4658      	mov	r0, fp
 801156a:	f000 faf7 	bl	8011b5c <__multadd>
 801156e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011570:	4681      	mov	r9, r0
 8011572:	2b00      	cmp	r3, #0
 8011574:	f000 8172 	beq.w	801185c <_dtoa_r+0xb4c>
 8011578:	2300      	movs	r3, #0
 801157a:	4629      	mov	r1, r5
 801157c:	220a      	movs	r2, #10
 801157e:	4658      	mov	r0, fp
 8011580:	f000 faec 	bl	8011b5c <__multadd>
 8011584:	9b00      	ldr	r3, [sp, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	4605      	mov	r5, r0
 801158a:	dc67      	bgt.n	801165c <_dtoa_r+0x94c>
 801158c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801158e:	2b02      	cmp	r3, #2
 8011590:	dc41      	bgt.n	8011616 <_dtoa_r+0x906>
 8011592:	e063      	b.n	801165c <_dtoa_r+0x94c>
 8011594:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011596:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801159a:	e746      	b.n	801142a <_dtoa_r+0x71a>
 801159c:	9b07      	ldr	r3, [sp, #28]
 801159e:	1e5c      	subs	r4, r3, #1
 80115a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115a2:	42a3      	cmp	r3, r4
 80115a4:	bfbf      	itttt	lt
 80115a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80115a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80115aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80115ac:	1ae3      	sublt	r3, r4, r3
 80115ae:	bfb4      	ite	lt
 80115b0:	18d2      	addlt	r2, r2, r3
 80115b2:	1b1c      	subge	r4, r3, r4
 80115b4:	9b07      	ldr	r3, [sp, #28]
 80115b6:	bfbc      	itt	lt
 80115b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80115ba:	2400      	movlt	r4, #0
 80115bc:	2b00      	cmp	r3, #0
 80115be:	bfb5      	itete	lt
 80115c0:	eba8 0603 	sublt.w	r6, r8, r3
 80115c4:	9b07      	ldrge	r3, [sp, #28]
 80115c6:	2300      	movlt	r3, #0
 80115c8:	4646      	movge	r6, r8
 80115ca:	e730      	b.n	801142e <_dtoa_r+0x71e>
 80115cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80115ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80115d0:	4646      	mov	r6, r8
 80115d2:	e735      	b.n	8011440 <_dtoa_r+0x730>
 80115d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80115d6:	e75c      	b.n	8011492 <_dtoa_r+0x782>
 80115d8:	2300      	movs	r3, #0
 80115da:	e788      	b.n	80114ee <_dtoa_r+0x7de>
 80115dc:	3fe00000 	.word	0x3fe00000
 80115e0:	40240000 	.word	0x40240000
 80115e4:	40140000 	.word	0x40140000
 80115e8:	9b02      	ldr	r3, [sp, #8]
 80115ea:	e780      	b.n	80114ee <_dtoa_r+0x7de>
 80115ec:	2300      	movs	r3, #0
 80115ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80115f0:	e782      	b.n	80114f8 <_dtoa_r+0x7e8>
 80115f2:	d099      	beq.n	8011528 <_dtoa_r+0x818>
 80115f4:	9a08      	ldr	r2, [sp, #32]
 80115f6:	331c      	adds	r3, #28
 80115f8:	441a      	add	r2, r3
 80115fa:	4498      	add	r8, r3
 80115fc:	441e      	add	r6, r3
 80115fe:	9208      	str	r2, [sp, #32]
 8011600:	e792      	b.n	8011528 <_dtoa_r+0x818>
 8011602:	4603      	mov	r3, r0
 8011604:	e7f6      	b.n	80115f4 <_dtoa_r+0x8e4>
 8011606:	9b07      	ldr	r3, [sp, #28]
 8011608:	9704      	str	r7, [sp, #16]
 801160a:	2b00      	cmp	r3, #0
 801160c:	dc20      	bgt.n	8011650 <_dtoa_r+0x940>
 801160e:	9300      	str	r3, [sp, #0]
 8011610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011612:	2b02      	cmp	r3, #2
 8011614:	dd1e      	ble.n	8011654 <_dtoa_r+0x944>
 8011616:	9b00      	ldr	r3, [sp, #0]
 8011618:	2b00      	cmp	r3, #0
 801161a:	f47f aec0 	bne.w	801139e <_dtoa_r+0x68e>
 801161e:	4621      	mov	r1, r4
 8011620:	2205      	movs	r2, #5
 8011622:	4658      	mov	r0, fp
 8011624:	f000 fa9a 	bl	8011b5c <__multadd>
 8011628:	4601      	mov	r1, r0
 801162a:	4604      	mov	r4, r0
 801162c:	4648      	mov	r0, r9
 801162e:	f000 fcf7 	bl	8012020 <__mcmp>
 8011632:	2800      	cmp	r0, #0
 8011634:	f77f aeb3 	ble.w	801139e <_dtoa_r+0x68e>
 8011638:	4656      	mov	r6, sl
 801163a:	2331      	movs	r3, #49	@ 0x31
 801163c:	f806 3b01 	strb.w	r3, [r6], #1
 8011640:	9b04      	ldr	r3, [sp, #16]
 8011642:	3301      	adds	r3, #1
 8011644:	9304      	str	r3, [sp, #16]
 8011646:	e6ae      	b.n	80113a6 <_dtoa_r+0x696>
 8011648:	9c07      	ldr	r4, [sp, #28]
 801164a:	9704      	str	r7, [sp, #16]
 801164c:	4625      	mov	r5, r4
 801164e:	e7f3      	b.n	8011638 <_dtoa_r+0x928>
 8011650:	9b07      	ldr	r3, [sp, #28]
 8011652:	9300      	str	r3, [sp, #0]
 8011654:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011656:	2b00      	cmp	r3, #0
 8011658:	f000 8104 	beq.w	8011864 <_dtoa_r+0xb54>
 801165c:	2e00      	cmp	r6, #0
 801165e:	dd05      	ble.n	801166c <_dtoa_r+0x95c>
 8011660:	4629      	mov	r1, r5
 8011662:	4632      	mov	r2, r6
 8011664:	4658      	mov	r0, fp
 8011666:	f000 fc6f 	bl	8011f48 <__lshift>
 801166a:	4605      	mov	r5, r0
 801166c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801166e:	2b00      	cmp	r3, #0
 8011670:	d05a      	beq.n	8011728 <_dtoa_r+0xa18>
 8011672:	6869      	ldr	r1, [r5, #4]
 8011674:	4658      	mov	r0, fp
 8011676:	f000 fa0f 	bl	8011a98 <_Balloc>
 801167a:	4606      	mov	r6, r0
 801167c:	b928      	cbnz	r0, 801168a <_dtoa_r+0x97a>
 801167e:	4b84      	ldr	r3, [pc, #528]	@ (8011890 <_dtoa_r+0xb80>)
 8011680:	4602      	mov	r2, r0
 8011682:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011686:	f7ff bb5a 	b.w	8010d3e <_dtoa_r+0x2e>
 801168a:	692a      	ldr	r2, [r5, #16]
 801168c:	3202      	adds	r2, #2
 801168e:	0092      	lsls	r2, r2, #2
 8011690:	f105 010c 	add.w	r1, r5, #12
 8011694:	300c      	adds	r0, #12
 8011696:	f001 ff75 	bl	8013584 <memcpy>
 801169a:	2201      	movs	r2, #1
 801169c:	4631      	mov	r1, r6
 801169e:	4658      	mov	r0, fp
 80116a0:	f000 fc52 	bl	8011f48 <__lshift>
 80116a4:	f10a 0301 	add.w	r3, sl, #1
 80116a8:	9307      	str	r3, [sp, #28]
 80116aa:	9b00      	ldr	r3, [sp, #0]
 80116ac:	4453      	add	r3, sl
 80116ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80116b0:	9b02      	ldr	r3, [sp, #8]
 80116b2:	f003 0301 	and.w	r3, r3, #1
 80116b6:	462f      	mov	r7, r5
 80116b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80116ba:	4605      	mov	r5, r0
 80116bc:	9b07      	ldr	r3, [sp, #28]
 80116be:	4621      	mov	r1, r4
 80116c0:	3b01      	subs	r3, #1
 80116c2:	4648      	mov	r0, r9
 80116c4:	9300      	str	r3, [sp, #0]
 80116c6:	f7ff fa99 	bl	8010bfc <quorem>
 80116ca:	4639      	mov	r1, r7
 80116cc:	9002      	str	r0, [sp, #8]
 80116ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80116d2:	4648      	mov	r0, r9
 80116d4:	f000 fca4 	bl	8012020 <__mcmp>
 80116d8:	462a      	mov	r2, r5
 80116da:	9008      	str	r0, [sp, #32]
 80116dc:	4621      	mov	r1, r4
 80116de:	4658      	mov	r0, fp
 80116e0:	f000 fcba 	bl	8012058 <__mdiff>
 80116e4:	68c2      	ldr	r2, [r0, #12]
 80116e6:	4606      	mov	r6, r0
 80116e8:	bb02      	cbnz	r2, 801172c <_dtoa_r+0xa1c>
 80116ea:	4601      	mov	r1, r0
 80116ec:	4648      	mov	r0, r9
 80116ee:	f000 fc97 	bl	8012020 <__mcmp>
 80116f2:	4602      	mov	r2, r0
 80116f4:	4631      	mov	r1, r6
 80116f6:	4658      	mov	r0, fp
 80116f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80116fa:	f000 fa0d 	bl	8011b18 <_Bfree>
 80116fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011700:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011702:	9e07      	ldr	r6, [sp, #28]
 8011704:	ea43 0102 	orr.w	r1, r3, r2
 8011708:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801170a:	4319      	orrs	r1, r3
 801170c:	d110      	bne.n	8011730 <_dtoa_r+0xa20>
 801170e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011712:	d029      	beq.n	8011768 <_dtoa_r+0xa58>
 8011714:	9b08      	ldr	r3, [sp, #32]
 8011716:	2b00      	cmp	r3, #0
 8011718:	dd02      	ble.n	8011720 <_dtoa_r+0xa10>
 801171a:	9b02      	ldr	r3, [sp, #8]
 801171c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011720:	9b00      	ldr	r3, [sp, #0]
 8011722:	f883 8000 	strb.w	r8, [r3]
 8011726:	e63f      	b.n	80113a8 <_dtoa_r+0x698>
 8011728:	4628      	mov	r0, r5
 801172a:	e7bb      	b.n	80116a4 <_dtoa_r+0x994>
 801172c:	2201      	movs	r2, #1
 801172e:	e7e1      	b.n	80116f4 <_dtoa_r+0x9e4>
 8011730:	9b08      	ldr	r3, [sp, #32]
 8011732:	2b00      	cmp	r3, #0
 8011734:	db04      	blt.n	8011740 <_dtoa_r+0xa30>
 8011736:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011738:	430b      	orrs	r3, r1
 801173a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801173c:	430b      	orrs	r3, r1
 801173e:	d120      	bne.n	8011782 <_dtoa_r+0xa72>
 8011740:	2a00      	cmp	r2, #0
 8011742:	dded      	ble.n	8011720 <_dtoa_r+0xa10>
 8011744:	4649      	mov	r1, r9
 8011746:	2201      	movs	r2, #1
 8011748:	4658      	mov	r0, fp
 801174a:	f000 fbfd 	bl	8011f48 <__lshift>
 801174e:	4621      	mov	r1, r4
 8011750:	4681      	mov	r9, r0
 8011752:	f000 fc65 	bl	8012020 <__mcmp>
 8011756:	2800      	cmp	r0, #0
 8011758:	dc03      	bgt.n	8011762 <_dtoa_r+0xa52>
 801175a:	d1e1      	bne.n	8011720 <_dtoa_r+0xa10>
 801175c:	f018 0f01 	tst.w	r8, #1
 8011760:	d0de      	beq.n	8011720 <_dtoa_r+0xa10>
 8011762:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011766:	d1d8      	bne.n	801171a <_dtoa_r+0xa0a>
 8011768:	9a00      	ldr	r2, [sp, #0]
 801176a:	2339      	movs	r3, #57	@ 0x39
 801176c:	7013      	strb	r3, [r2, #0]
 801176e:	4633      	mov	r3, r6
 8011770:	461e      	mov	r6, r3
 8011772:	3b01      	subs	r3, #1
 8011774:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011778:	2a39      	cmp	r2, #57	@ 0x39
 801177a:	d052      	beq.n	8011822 <_dtoa_r+0xb12>
 801177c:	3201      	adds	r2, #1
 801177e:	701a      	strb	r2, [r3, #0]
 8011780:	e612      	b.n	80113a8 <_dtoa_r+0x698>
 8011782:	2a00      	cmp	r2, #0
 8011784:	dd07      	ble.n	8011796 <_dtoa_r+0xa86>
 8011786:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801178a:	d0ed      	beq.n	8011768 <_dtoa_r+0xa58>
 801178c:	9a00      	ldr	r2, [sp, #0]
 801178e:	f108 0301 	add.w	r3, r8, #1
 8011792:	7013      	strb	r3, [r2, #0]
 8011794:	e608      	b.n	80113a8 <_dtoa_r+0x698>
 8011796:	9b07      	ldr	r3, [sp, #28]
 8011798:	9a07      	ldr	r2, [sp, #28]
 801179a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801179e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80117a0:	4293      	cmp	r3, r2
 80117a2:	d028      	beq.n	80117f6 <_dtoa_r+0xae6>
 80117a4:	4649      	mov	r1, r9
 80117a6:	2300      	movs	r3, #0
 80117a8:	220a      	movs	r2, #10
 80117aa:	4658      	mov	r0, fp
 80117ac:	f000 f9d6 	bl	8011b5c <__multadd>
 80117b0:	42af      	cmp	r7, r5
 80117b2:	4681      	mov	r9, r0
 80117b4:	f04f 0300 	mov.w	r3, #0
 80117b8:	f04f 020a 	mov.w	r2, #10
 80117bc:	4639      	mov	r1, r7
 80117be:	4658      	mov	r0, fp
 80117c0:	d107      	bne.n	80117d2 <_dtoa_r+0xac2>
 80117c2:	f000 f9cb 	bl	8011b5c <__multadd>
 80117c6:	4607      	mov	r7, r0
 80117c8:	4605      	mov	r5, r0
 80117ca:	9b07      	ldr	r3, [sp, #28]
 80117cc:	3301      	adds	r3, #1
 80117ce:	9307      	str	r3, [sp, #28]
 80117d0:	e774      	b.n	80116bc <_dtoa_r+0x9ac>
 80117d2:	f000 f9c3 	bl	8011b5c <__multadd>
 80117d6:	4629      	mov	r1, r5
 80117d8:	4607      	mov	r7, r0
 80117da:	2300      	movs	r3, #0
 80117dc:	220a      	movs	r2, #10
 80117de:	4658      	mov	r0, fp
 80117e0:	f000 f9bc 	bl	8011b5c <__multadd>
 80117e4:	4605      	mov	r5, r0
 80117e6:	e7f0      	b.n	80117ca <_dtoa_r+0xaba>
 80117e8:	9b00      	ldr	r3, [sp, #0]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	bfcc      	ite	gt
 80117ee:	461e      	movgt	r6, r3
 80117f0:	2601      	movle	r6, #1
 80117f2:	4456      	add	r6, sl
 80117f4:	2700      	movs	r7, #0
 80117f6:	4649      	mov	r1, r9
 80117f8:	2201      	movs	r2, #1
 80117fa:	4658      	mov	r0, fp
 80117fc:	f000 fba4 	bl	8011f48 <__lshift>
 8011800:	4621      	mov	r1, r4
 8011802:	4681      	mov	r9, r0
 8011804:	f000 fc0c 	bl	8012020 <__mcmp>
 8011808:	2800      	cmp	r0, #0
 801180a:	dcb0      	bgt.n	801176e <_dtoa_r+0xa5e>
 801180c:	d102      	bne.n	8011814 <_dtoa_r+0xb04>
 801180e:	f018 0f01 	tst.w	r8, #1
 8011812:	d1ac      	bne.n	801176e <_dtoa_r+0xa5e>
 8011814:	4633      	mov	r3, r6
 8011816:	461e      	mov	r6, r3
 8011818:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801181c:	2a30      	cmp	r2, #48	@ 0x30
 801181e:	d0fa      	beq.n	8011816 <_dtoa_r+0xb06>
 8011820:	e5c2      	b.n	80113a8 <_dtoa_r+0x698>
 8011822:	459a      	cmp	sl, r3
 8011824:	d1a4      	bne.n	8011770 <_dtoa_r+0xa60>
 8011826:	9b04      	ldr	r3, [sp, #16]
 8011828:	3301      	adds	r3, #1
 801182a:	9304      	str	r3, [sp, #16]
 801182c:	2331      	movs	r3, #49	@ 0x31
 801182e:	f88a 3000 	strb.w	r3, [sl]
 8011832:	e5b9      	b.n	80113a8 <_dtoa_r+0x698>
 8011834:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011836:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011894 <_dtoa_r+0xb84>
 801183a:	b11b      	cbz	r3, 8011844 <_dtoa_r+0xb34>
 801183c:	f10a 0308 	add.w	r3, sl, #8
 8011840:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011842:	6013      	str	r3, [r2, #0]
 8011844:	4650      	mov	r0, sl
 8011846:	b019      	add	sp, #100	@ 0x64
 8011848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801184c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801184e:	2b01      	cmp	r3, #1
 8011850:	f77f ae37 	ble.w	80114c2 <_dtoa_r+0x7b2>
 8011854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011856:	930a      	str	r3, [sp, #40]	@ 0x28
 8011858:	2001      	movs	r0, #1
 801185a:	e655      	b.n	8011508 <_dtoa_r+0x7f8>
 801185c:	9b00      	ldr	r3, [sp, #0]
 801185e:	2b00      	cmp	r3, #0
 8011860:	f77f aed6 	ble.w	8011610 <_dtoa_r+0x900>
 8011864:	4656      	mov	r6, sl
 8011866:	4621      	mov	r1, r4
 8011868:	4648      	mov	r0, r9
 801186a:	f7ff f9c7 	bl	8010bfc <quorem>
 801186e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011872:	f806 8b01 	strb.w	r8, [r6], #1
 8011876:	9b00      	ldr	r3, [sp, #0]
 8011878:	eba6 020a 	sub.w	r2, r6, sl
 801187c:	4293      	cmp	r3, r2
 801187e:	ddb3      	ble.n	80117e8 <_dtoa_r+0xad8>
 8011880:	4649      	mov	r1, r9
 8011882:	2300      	movs	r3, #0
 8011884:	220a      	movs	r2, #10
 8011886:	4658      	mov	r0, fp
 8011888:	f000 f968 	bl	8011b5c <__multadd>
 801188c:	4681      	mov	r9, r0
 801188e:	e7ea      	b.n	8011866 <_dtoa_r+0xb56>
 8011890:	0801448d 	.word	0x0801448d
 8011894:	08014411 	.word	0x08014411

08011898 <_free_r>:
 8011898:	b538      	push	{r3, r4, r5, lr}
 801189a:	4605      	mov	r5, r0
 801189c:	2900      	cmp	r1, #0
 801189e:	d041      	beq.n	8011924 <_free_r+0x8c>
 80118a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80118a4:	1f0c      	subs	r4, r1, #4
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	bfb8      	it	lt
 80118aa:	18e4      	addlt	r4, r4, r3
 80118ac:	f000 f8e8 	bl	8011a80 <__malloc_lock>
 80118b0:	4a1d      	ldr	r2, [pc, #116]	@ (8011928 <_free_r+0x90>)
 80118b2:	6813      	ldr	r3, [r2, #0]
 80118b4:	b933      	cbnz	r3, 80118c4 <_free_r+0x2c>
 80118b6:	6063      	str	r3, [r4, #4]
 80118b8:	6014      	str	r4, [r2, #0]
 80118ba:	4628      	mov	r0, r5
 80118bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118c0:	f000 b8e4 	b.w	8011a8c <__malloc_unlock>
 80118c4:	42a3      	cmp	r3, r4
 80118c6:	d908      	bls.n	80118da <_free_r+0x42>
 80118c8:	6820      	ldr	r0, [r4, #0]
 80118ca:	1821      	adds	r1, r4, r0
 80118cc:	428b      	cmp	r3, r1
 80118ce:	bf01      	itttt	eq
 80118d0:	6819      	ldreq	r1, [r3, #0]
 80118d2:	685b      	ldreq	r3, [r3, #4]
 80118d4:	1809      	addeq	r1, r1, r0
 80118d6:	6021      	streq	r1, [r4, #0]
 80118d8:	e7ed      	b.n	80118b6 <_free_r+0x1e>
 80118da:	461a      	mov	r2, r3
 80118dc:	685b      	ldr	r3, [r3, #4]
 80118de:	b10b      	cbz	r3, 80118e4 <_free_r+0x4c>
 80118e0:	42a3      	cmp	r3, r4
 80118e2:	d9fa      	bls.n	80118da <_free_r+0x42>
 80118e4:	6811      	ldr	r1, [r2, #0]
 80118e6:	1850      	adds	r0, r2, r1
 80118e8:	42a0      	cmp	r0, r4
 80118ea:	d10b      	bne.n	8011904 <_free_r+0x6c>
 80118ec:	6820      	ldr	r0, [r4, #0]
 80118ee:	4401      	add	r1, r0
 80118f0:	1850      	adds	r0, r2, r1
 80118f2:	4283      	cmp	r3, r0
 80118f4:	6011      	str	r1, [r2, #0]
 80118f6:	d1e0      	bne.n	80118ba <_free_r+0x22>
 80118f8:	6818      	ldr	r0, [r3, #0]
 80118fa:	685b      	ldr	r3, [r3, #4]
 80118fc:	6053      	str	r3, [r2, #4]
 80118fe:	4408      	add	r0, r1
 8011900:	6010      	str	r0, [r2, #0]
 8011902:	e7da      	b.n	80118ba <_free_r+0x22>
 8011904:	d902      	bls.n	801190c <_free_r+0x74>
 8011906:	230c      	movs	r3, #12
 8011908:	602b      	str	r3, [r5, #0]
 801190a:	e7d6      	b.n	80118ba <_free_r+0x22>
 801190c:	6820      	ldr	r0, [r4, #0]
 801190e:	1821      	adds	r1, r4, r0
 8011910:	428b      	cmp	r3, r1
 8011912:	bf04      	itt	eq
 8011914:	6819      	ldreq	r1, [r3, #0]
 8011916:	685b      	ldreq	r3, [r3, #4]
 8011918:	6063      	str	r3, [r4, #4]
 801191a:	bf04      	itt	eq
 801191c:	1809      	addeq	r1, r1, r0
 801191e:	6021      	streq	r1, [r4, #0]
 8011920:	6054      	str	r4, [r2, #4]
 8011922:	e7ca      	b.n	80118ba <_free_r+0x22>
 8011924:	bd38      	pop	{r3, r4, r5, pc}
 8011926:	bf00      	nop
 8011928:	200029a8 	.word	0x200029a8

0801192c <malloc>:
 801192c:	4b02      	ldr	r3, [pc, #8]	@ (8011938 <malloc+0xc>)
 801192e:	4601      	mov	r1, r0
 8011930:	6818      	ldr	r0, [r3, #0]
 8011932:	f000 b825 	b.w	8011980 <_malloc_r>
 8011936:	bf00      	nop
 8011938:	20000194 	.word	0x20000194

0801193c <sbrk_aligned>:
 801193c:	b570      	push	{r4, r5, r6, lr}
 801193e:	4e0f      	ldr	r6, [pc, #60]	@ (801197c <sbrk_aligned+0x40>)
 8011940:	460c      	mov	r4, r1
 8011942:	6831      	ldr	r1, [r6, #0]
 8011944:	4605      	mov	r5, r0
 8011946:	b911      	cbnz	r1, 801194e <sbrk_aligned+0x12>
 8011948:	f001 fe0c 	bl	8013564 <_sbrk_r>
 801194c:	6030      	str	r0, [r6, #0]
 801194e:	4621      	mov	r1, r4
 8011950:	4628      	mov	r0, r5
 8011952:	f001 fe07 	bl	8013564 <_sbrk_r>
 8011956:	1c43      	adds	r3, r0, #1
 8011958:	d103      	bne.n	8011962 <sbrk_aligned+0x26>
 801195a:	f04f 34ff 	mov.w	r4, #4294967295
 801195e:	4620      	mov	r0, r4
 8011960:	bd70      	pop	{r4, r5, r6, pc}
 8011962:	1cc4      	adds	r4, r0, #3
 8011964:	f024 0403 	bic.w	r4, r4, #3
 8011968:	42a0      	cmp	r0, r4
 801196a:	d0f8      	beq.n	801195e <sbrk_aligned+0x22>
 801196c:	1a21      	subs	r1, r4, r0
 801196e:	4628      	mov	r0, r5
 8011970:	f001 fdf8 	bl	8013564 <_sbrk_r>
 8011974:	3001      	adds	r0, #1
 8011976:	d1f2      	bne.n	801195e <sbrk_aligned+0x22>
 8011978:	e7ef      	b.n	801195a <sbrk_aligned+0x1e>
 801197a:	bf00      	nop
 801197c:	200029a4 	.word	0x200029a4

08011980 <_malloc_r>:
 8011980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011984:	1ccd      	adds	r5, r1, #3
 8011986:	f025 0503 	bic.w	r5, r5, #3
 801198a:	3508      	adds	r5, #8
 801198c:	2d0c      	cmp	r5, #12
 801198e:	bf38      	it	cc
 8011990:	250c      	movcc	r5, #12
 8011992:	2d00      	cmp	r5, #0
 8011994:	4606      	mov	r6, r0
 8011996:	db01      	blt.n	801199c <_malloc_r+0x1c>
 8011998:	42a9      	cmp	r1, r5
 801199a:	d904      	bls.n	80119a6 <_malloc_r+0x26>
 801199c:	230c      	movs	r3, #12
 801199e:	6033      	str	r3, [r6, #0]
 80119a0:	2000      	movs	r0, #0
 80119a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011a7c <_malloc_r+0xfc>
 80119aa:	f000 f869 	bl	8011a80 <__malloc_lock>
 80119ae:	f8d8 3000 	ldr.w	r3, [r8]
 80119b2:	461c      	mov	r4, r3
 80119b4:	bb44      	cbnz	r4, 8011a08 <_malloc_r+0x88>
 80119b6:	4629      	mov	r1, r5
 80119b8:	4630      	mov	r0, r6
 80119ba:	f7ff ffbf 	bl	801193c <sbrk_aligned>
 80119be:	1c43      	adds	r3, r0, #1
 80119c0:	4604      	mov	r4, r0
 80119c2:	d158      	bne.n	8011a76 <_malloc_r+0xf6>
 80119c4:	f8d8 4000 	ldr.w	r4, [r8]
 80119c8:	4627      	mov	r7, r4
 80119ca:	2f00      	cmp	r7, #0
 80119cc:	d143      	bne.n	8011a56 <_malloc_r+0xd6>
 80119ce:	2c00      	cmp	r4, #0
 80119d0:	d04b      	beq.n	8011a6a <_malloc_r+0xea>
 80119d2:	6823      	ldr	r3, [r4, #0]
 80119d4:	4639      	mov	r1, r7
 80119d6:	4630      	mov	r0, r6
 80119d8:	eb04 0903 	add.w	r9, r4, r3
 80119dc:	f001 fdc2 	bl	8013564 <_sbrk_r>
 80119e0:	4581      	cmp	r9, r0
 80119e2:	d142      	bne.n	8011a6a <_malloc_r+0xea>
 80119e4:	6821      	ldr	r1, [r4, #0]
 80119e6:	1a6d      	subs	r5, r5, r1
 80119e8:	4629      	mov	r1, r5
 80119ea:	4630      	mov	r0, r6
 80119ec:	f7ff ffa6 	bl	801193c <sbrk_aligned>
 80119f0:	3001      	adds	r0, #1
 80119f2:	d03a      	beq.n	8011a6a <_malloc_r+0xea>
 80119f4:	6823      	ldr	r3, [r4, #0]
 80119f6:	442b      	add	r3, r5
 80119f8:	6023      	str	r3, [r4, #0]
 80119fa:	f8d8 3000 	ldr.w	r3, [r8]
 80119fe:	685a      	ldr	r2, [r3, #4]
 8011a00:	bb62      	cbnz	r2, 8011a5c <_malloc_r+0xdc>
 8011a02:	f8c8 7000 	str.w	r7, [r8]
 8011a06:	e00f      	b.n	8011a28 <_malloc_r+0xa8>
 8011a08:	6822      	ldr	r2, [r4, #0]
 8011a0a:	1b52      	subs	r2, r2, r5
 8011a0c:	d420      	bmi.n	8011a50 <_malloc_r+0xd0>
 8011a0e:	2a0b      	cmp	r2, #11
 8011a10:	d917      	bls.n	8011a42 <_malloc_r+0xc2>
 8011a12:	1961      	adds	r1, r4, r5
 8011a14:	42a3      	cmp	r3, r4
 8011a16:	6025      	str	r5, [r4, #0]
 8011a18:	bf18      	it	ne
 8011a1a:	6059      	strne	r1, [r3, #4]
 8011a1c:	6863      	ldr	r3, [r4, #4]
 8011a1e:	bf08      	it	eq
 8011a20:	f8c8 1000 	streq.w	r1, [r8]
 8011a24:	5162      	str	r2, [r4, r5]
 8011a26:	604b      	str	r3, [r1, #4]
 8011a28:	4630      	mov	r0, r6
 8011a2a:	f000 f82f 	bl	8011a8c <__malloc_unlock>
 8011a2e:	f104 000b 	add.w	r0, r4, #11
 8011a32:	1d23      	adds	r3, r4, #4
 8011a34:	f020 0007 	bic.w	r0, r0, #7
 8011a38:	1ac2      	subs	r2, r0, r3
 8011a3a:	bf1c      	itt	ne
 8011a3c:	1a1b      	subne	r3, r3, r0
 8011a3e:	50a3      	strne	r3, [r4, r2]
 8011a40:	e7af      	b.n	80119a2 <_malloc_r+0x22>
 8011a42:	6862      	ldr	r2, [r4, #4]
 8011a44:	42a3      	cmp	r3, r4
 8011a46:	bf0c      	ite	eq
 8011a48:	f8c8 2000 	streq.w	r2, [r8]
 8011a4c:	605a      	strne	r2, [r3, #4]
 8011a4e:	e7eb      	b.n	8011a28 <_malloc_r+0xa8>
 8011a50:	4623      	mov	r3, r4
 8011a52:	6864      	ldr	r4, [r4, #4]
 8011a54:	e7ae      	b.n	80119b4 <_malloc_r+0x34>
 8011a56:	463c      	mov	r4, r7
 8011a58:	687f      	ldr	r7, [r7, #4]
 8011a5a:	e7b6      	b.n	80119ca <_malloc_r+0x4a>
 8011a5c:	461a      	mov	r2, r3
 8011a5e:	685b      	ldr	r3, [r3, #4]
 8011a60:	42a3      	cmp	r3, r4
 8011a62:	d1fb      	bne.n	8011a5c <_malloc_r+0xdc>
 8011a64:	2300      	movs	r3, #0
 8011a66:	6053      	str	r3, [r2, #4]
 8011a68:	e7de      	b.n	8011a28 <_malloc_r+0xa8>
 8011a6a:	230c      	movs	r3, #12
 8011a6c:	6033      	str	r3, [r6, #0]
 8011a6e:	4630      	mov	r0, r6
 8011a70:	f000 f80c 	bl	8011a8c <__malloc_unlock>
 8011a74:	e794      	b.n	80119a0 <_malloc_r+0x20>
 8011a76:	6005      	str	r5, [r0, #0]
 8011a78:	e7d6      	b.n	8011a28 <_malloc_r+0xa8>
 8011a7a:	bf00      	nop
 8011a7c:	200029a8 	.word	0x200029a8

08011a80 <__malloc_lock>:
 8011a80:	4801      	ldr	r0, [pc, #4]	@ (8011a88 <__malloc_lock+0x8>)
 8011a82:	f7ff b8b2 	b.w	8010bea <__retarget_lock_acquire_recursive>
 8011a86:	bf00      	nop
 8011a88:	200029a0 	.word	0x200029a0

08011a8c <__malloc_unlock>:
 8011a8c:	4801      	ldr	r0, [pc, #4]	@ (8011a94 <__malloc_unlock+0x8>)
 8011a8e:	f7ff b8ad 	b.w	8010bec <__retarget_lock_release_recursive>
 8011a92:	bf00      	nop
 8011a94:	200029a0 	.word	0x200029a0

08011a98 <_Balloc>:
 8011a98:	b570      	push	{r4, r5, r6, lr}
 8011a9a:	69c6      	ldr	r6, [r0, #28]
 8011a9c:	4604      	mov	r4, r0
 8011a9e:	460d      	mov	r5, r1
 8011aa0:	b976      	cbnz	r6, 8011ac0 <_Balloc+0x28>
 8011aa2:	2010      	movs	r0, #16
 8011aa4:	f7ff ff42 	bl	801192c <malloc>
 8011aa8:	4602      	mov	r2, r0
 8011aaa:	61e0      	str	r0, [r4, #28]
 8011aac:	b920      	cbnz	r0, 8011ab8 <_Balloc+0x20>
 8011aae:	4b18      	ldr	r3, [pc, #96]	@ (8011b10 <_Balloc+0x78>)
 8011ab0:	4818      	ldr	r0, [pc, #96]	@ (8011b14 <_Balloc+0x7c>)
 8011ab2:	216b      	movs	r1, #107	@ 0x6b
 8011ab4:	f001 fd7c 	bl	80135b0 <__assert_func>
 8011ab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011abc:	6006      	str	r6, [r0, #0]
 8011abe:	60c6      	str	r6, [r0, #12]
 8011ac0:	69e6      	ldr	r6, [r4, #28]
 8011ac2:	68f3      	ldr	r3, [r6, #12]
 8011ac4:	b183      	cbz	r3, 8011ae8 <_Balloc+0x50>
 8011ac6:	69e3      	ldr	r3, [r4, #28]
 8011ac8:	68db      	ldr	r3, [r3, #12]
 8011aca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011ace:	b9b8      	cbnz	r0, 8011b00 <_Balloc+0x68>
 8011ad0:	2101      	movs	r1, #1
 8011ad2:	fa01 f605 	lsl.w	r6, r1, r5
 8011ad6:	1d72      	adds	r2, r6, #5
 8011ad8:	0092      	lsls	r2, r2, #2
 8011ada:	4620      	mov	r0, r4
 8011adc:	f001 fd86 	bl	80135ec <_calloc_r>
 8011ae0:	b160      	cbz	r0, 8011afc <_Balloc+0x64>
 8011ae2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011ae6:	e00e      	b.n	8011b06 <_Balloc+0x6e>
 8011ae8:	2221      	movs	r2, #33	@ 0x21
 8011aea:	2104      	movs	r1, #4
 8011aec:	4620      	mov	r0, r4
 8011aee:	f001 fd7d 	bl	80135ec <_calloc_r>
 8011af2:	69e3      	ldr	r3, [r4, #28]
 8011af4:	60f0      	str	r0, [r6, #12]
 8011af6:	68db      	ldr	r3, [r3, #12]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d1e4      	bne.n	8011ac6 <_Balloc+0x2e>
 8011afc:	2000      	movs	r0, #0
 8011afe:	bd70      	pop	{r4, r5, r6, pc}
 8011b00:	6802      	ldr	r2, [r0, #0]
 8011b02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011b06:	2300      	movs	r3, #0
 8011b08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011b0c:	e7f7      	b.n	8011afe <_Balloc+0x66>
 8011b0e:	bf00      	nop
 8011b10:	0801441e 	.word	0x0801441e
 8011b14:	0801449e 	.word	0x0801449e

08011b18 <_Bfree>:
 8011b18:	b570      	push	{r4, r5, r6, lr}
 8011b1a:	69c6      	ldr	r6, [r0, #28]
 8011b1c:	4605      	mov	r5, r0
 8011b1e:	460c      	mov	r4, r1
 8011b20:	b976      	cbnz	r6, 8011b40 <_Bfree+0x28>
 8011b22:	2010      	movs	r0, #16
 8011b24:	f7ff ff02 	bl	801192c <malloc>
 8011b28:	4602      	mov	r2, r0
 8011b2a:	61e8      	str	r0, [r5, #28]
 8011b2c:	b920      	cbnz	r0, 8011b38 <_Bfree+0x20>
 8011b2e:	4b09      	ldr	r3, [pc, #36]	@ (8011b54 <_Bfree+0x3c>)
 8011b30:	4809      	ldr	r0, [pc, #36]	@ (8011b58 <_Bfree+0x40>)
 8011b32:	218f      	movs	r1, #143	@ 0x8f
 8011b34:	f001 fd3c 	bl	80135b0 <__assert_func>
 8011b38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011b3c:	6006      	str	r6, [r0, #0]
 8011b3e:	60c6      	str	r6, [r0, #12]
 8011b40:	b13c      	cbz	r4, 8011b52 <_Bfree+0x3a>
 8011b42:	69eb      	ldr	r3, [r5, #28]
 8011b44:	6862      	ldr	r2, [r4, #4]
 8011b46:	68db      	ldr	r3, [r3, #12]
 8011b48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011b4c:	6021      	str	r1, [r4, #0]
 8011b4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011b52:	bd70      	pop	{r4, r5, r6, pc}
 8011b54:	0801441e 	.word	0x0801441e
 8011b58:	0801449e 	.word	0x0801449e

08011b5c <__multadd>:
 8011b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b60:	690d      	ldr	r5, [r1, #16]
 8011b62:	4607      	mov	r7, r0
 8011b64:	460c      	mov	r4, r1
 8011b66:	461e      	mov	r6, r3
 8011b68:	f101 0c14 	add.w	ip, r1, #20
 8011b6c:	2000      	movs	r0, #0
 8011b6e:	f8dc 3000 	ldr.w	r3, [ip]
 8011b72:	b299      	uxth	r1, r3
 8011b74:	fb02 6101 	mla	r1, r2, r1, r6
 8011b78:	0c1e      	lsrs	r6, r3, #16
 8011b7a:	0c0b      	lsrs	r3, r1, #16
 8011b7c:	fb02 3306 	mla	r3, r2, r6, r3
 8011b80:	b289      	uxth	r1, r1
 8011b82:	3001      	adds	r0, #1
 8011b84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011b88:	4285      	cmp	r5, r0
 8011b8a:	f84c 1b04 	str.w	r1, [ip], #4
 8011b8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011b92:	dcec      	bgt.n	8011b6e <__multadd+0x12>
 8011b94:	b30e      	cbz	r6, 8011bda <__multadd+0x7e>
 8011b96:	68a3      	ldr	r3, [r4, #8]
 8011b98:	42ab      	cmp	r3, r5
 8011b9a:	dc19      	bgt.n	8011bd0 <__multadd+0x74>
 8011b9c:	6861      	ldr	r1, [r4, #4]
 8011b9e:	4638      	mov	r0, r7
 8011ba0:	3101      	adds	r1, #1
 8011ba2:	f7ff ff79 	bl	8011a98 <_Balloc>
 8011ba6:	4680      	mov	r8, r0
 8011ba8:	b928      	cbnz	r0, 8011bb6 <__multadd+0x5a>
 8011baa:	4602      	mov	r2, r0
 8011bac:	4b0c      	ldr	r3, [pc, #48]	@ (8011be0 <__multadd+0x84>)
 8011bae:	480d      	ldr	r0, [pc, #52]	@ (8011be4 <__multadd+0x88>)
 8011bb0:	21ba      	movs	r1, #186	@ 0xba
 8011bb2:	f001 fcfd 	bl	80135b0 <__assert_func>
 8011bb6:	6922      	ldr	r2, [r4, #16]
 8011bb8:	3202      	adds	r2, #2
 8011bba:	f104 010c 	add.w	r1, r4, #12
 8011bbe:	0092      	lsls	r2, r2, #2
 8011bc0:	300c      	adds	r0, #12
 8011bc2:	f001 fcdf 	bl	8013584 <memcpy>
 8011bc6:	4621      	mov	r1, r4
 8011bc8:	4638      	mov	r0, r7
 8011bca:	f7ff ffa5 	bl	8011b18 <_Bfree>
 8011bce:	4644      	mov	r4, r8
 8011bd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011bd4:	3501      	adds	r5, #1
 8011bd6:	615e      	str	r6, [r3, #20]
 8011bd8:	6125      	str	r5, [r4, #16]
 8011bda:	4620      	mov	r0, r4
 8011bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011be0:	0801448d 	.word	0x0801448d
 8011be4:	0801449e 	.word	0x0801449e

08011be8 <__s2b>:
 8011be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bec:	460c      	mov	r4, r1
 8011bee:	4615      	mov	r5, r2
 8011bf0:	461f      	mov	r7, r3
 8011bf2:	2209      	movs	r2, #9
 8011bf4:	3308      	adds	r3, #8
 8011bf6:	4606      	mov	r6, r0
 8011bf8:	fb93 f3f2 	sdiv	r3, r3, r2
 8011bfc:	2100      	movs	r1, #0
 8011bfe:	2201      	movs	r2, #1
 8011c00:	429a      	cmp	r2, r3
 8011c02:	db09      	blt.n	8011c18 <__s2b+0x30>
 8011c04:	4630      	mov	r0, r6
 8011c06:	f7ff ff47 	bl	8011a98 <_Balloc>
 8011c0a:	b940      	cbnz	r0, 8011c1e <__s2b+0x36>
 8011c0c:	4602      	mov	r2, r0
 8011c0e:	4b19      	ldr	r3, [pc, #100]	@ (8011c74 <__s2b+0x8c>)
 8011c10:	4819      	ldr	r0, [pc, #100]	@ (8011c78 <__s2b+0x90>)
 8011c12:	21d3      	movs	r1, #211	@ 0xd3
 8011c14:	f001 fccc 	bl	80135b0 <__assert_func>
 8011c18:	0052      	lsls	r2, r2, #1
 8011c1a:	3101      	adds	r1, #1
 8011c1c:	e7f0      	b.n	8011c00 <__s2b+0x18>
 8011c1e:	9b08      	ldr	r3, [sp, #32]
 8011c20:	6143      	str	r3, [r0, #20]
 8011c22:	2d09      	cmp	r5, #9
 8011c24:	f04f 0301 	mov.w	r3, #1
 8011c28:	6103      	str	r3, [r0, #16]
 8011c2a:	dd16      	ble.n	8011c5a <__s2b+0x72>
 8011c2c:	f104 0909 	add.w	r9, r4, #9
 8011c30:	46c8      	mov	r8, r9
 8011c32:	442c      	add	r4, r5
 8011c34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011c38:	4601      	mov	r1, r0
 8011c3a:	3b30      	subs	r3, #48	@ 0x30
 8011c3c:	220a      	movs	r2, #10
 8011c3e:	4630      	mov	r0, r6
 8011c40:	f7ff ff8c 	bl	8011b5c <__multadd>
 8011c44:	45a0      	cmp	r8, r4
 8011c46:	d1f5      	bne.n	8011c34 <__s2b+0x4c>
 8011c48:	f1a5 0408 	sub.w	r4, r5, #8
 8011c4c:	444c      	add	r4, r9
 8011c4e:	1b2d      	subs	r5, r5, r4
 8011c50:	1963      	adds	r3, r4, r5
 8011c52:	42bb      	cmp	r3, r7
 8011c54:	db04      	blt.n	8011c60 <__s2b+0x78>
 8011c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c5a:	340a      	adds	r4, #10
 8011c5c:	2509      	movs	r5, #9
 8011c5e:	e7f6      	b.n	8011c4e <__s2b+0x66>
 8011c60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011c64:	4601      	mov	r1, r0
 8011c66:	3b30      	subs	r3, #48	@ 0x30
 8011c68:	220a      	movs	r2, #10
 8011c6a:	4630      	mov	r0, r6
 8011c6c:	f7ff ff76 	bl	8011b5c <__multadd>
 8011c70:	e7ee      	b.n	8011c50 <__s2b+0x68>
 8011c72:	bf00      	nop
 8011c74:	0801448d 	.word	0x0801448d
 8011c78:	0801449e 	.word	0x0801449e

08011c7c <__hi0bits>:
 8011c7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011c80:	4603      	mov	r3, r0
 8011c82:	bf36      	itet	cc
 8011c84:	0403      	lslcc	r3, r0, #16
 8011c86:	2000      	movcs	r0, #0
 8011c88:	2010      	movcc	r0, #16
 8011c8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011c8e:	bf3c      	itt	cc
 8011c90:	021b      	lslcc	r3, r3, #8
 8011c92:	3008      	addcc	r0, #8
 8011c94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011c98:	bf3c      	itt	cc
 8011c9a:	011b      	lslcc	r3, r3, #4
 8011c9c:	3004      	addcc	r0, #4
 8011c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011ca2:	bf3c      	itt	cc
 8011ca4:	009b      	lslcc	r3, r3, #2
 8011ca6:	3002      	addcc	r0, #2
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	db05      	blt.n	8011cb8 <__hi0bits+0x3c>
 8011cac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011cb0:	f100 0001 	add.w	r0, r0, #1
 8011cb4:	bf08      	it	eq
 8011cb6:	2020      	moveq	r0, #32
 8011cb8:	4770      	bx	lr

08011cba <__lo0bits>:
 8011cba:	6803      	ldr	r3, [r0, #0]
 8011cbc:	4602      	mov	r2, r0
 8011cbe:	f013 0007 	ands.w	r0, r3, #7
 8011cc2:	d00b      	beq.n	8011cdc <__lo0bits+0x22>
 8011cc4:	07d9      	lsls	r1, r3, #31
 8011cc6:	d421      	bmi.n	8011d0c <__lo0bits+0x52>
 8011cc8:	0798      	lsls	r0, r3, #30
 8011cca:	bf49      	itett	mi
 8011ccc:	085b      	lsrmi	r3, r3, #1
 8011cce:	089b      	lsrpl	r3, r3, #2
 8011cd0:	2001      	movmi	r0, #1
 8011cd2:	6013      	strmi	r3, [r2, #0]
 8011cd4:	bf5c      	itt	pl
 8011cd6:	6013      	strpl	r3, [r2, #0]
 8011cd8:	2002      	movpl	r0, #2
 8011cda:	4770      	bx	lr
 8011cdc:	b299      	uxth	r1, r3
 8011cde:	b909      	cbnz	r1, 8011ce4 <__lo0bits+0x2a>
 8011ce0:	0c1b      	lsrs	r3, r3, #16
 8011ce2:	2010      	movs	r0, #16
 8011ce4:	b2d9      	uxtb	r1, r3
 8011ce6:	b909      	cbnz	r1, 8011cec <__lo0bits+0x32>
 8011ce8:	3008      	adds	r0, #8
 8011cea:	0a1b      	lsrs	r3, r3, #8
 8011cec:	0719      	lsls	r1, r3, #28
 8011cee:	bf04      	itt	eq
 8011cf0:	091b      	lsreq	r3, r3, #4
 8011cf2:	3004      	addeq	r0, #4
 8011cf4:	0799      	lsls	r1, r3, #30
 8011cf6:	bf04      	itt	eq
 8011cf8:	089b      	lsreq	r3, r3, #2
 8011cfa:	3002      	addeq	r0, #2
 8011cfc:	07d9      	lsls	r1, r3, #31
 8011cfe:	d403      	bmi.n	8011d08 <__lo0bits+0x4e>
 8011d00:	085b      	lsrs	r3, r3, #1
 8011d02:	f100 0001 	add.w	r0, r0, #1
 8011d06:	d003      	beq.n	8011d10 <__lo0bits+0x56>
 8011d08:	6013      	str	r3, [r2, #0]
 8011d0a:	4770      	bx	lr
 8011d0c:	2000      	movs	r0, #0
 8011d0e:	4770      	bx	lr
 8011d10:	2020      	movs	r0, #32
 8011d12:	4770      	bx	lr

08011d14 <__i2b>:
 8011d14:	b510      	push	{r4, lr}
 8011d16:	460c      	mov	r4, r1
 8011d18:	2101      	movs	r1, #1
 8011d1a:	f7ff febd 	bl	8011a98 <_Balloc>
 8011d1e:	4602      	mov	r2, r0
 8011d20:	b928      	cbnz	r0, 8011d2e <__i2b+0x1a>
 8011d22:	4b05      	ldr	r3, [pc, #20]	@ (8011d38 <__i2b+0x24>)
 8011d24:	4805      	ldr	r0, [pc, #20]	@ (8011d3c <__i2b+0x28>)
 8011d26:	f240 1145 	movw	r1, #325	@ 0x145
 8011d2a:	f001 fc41 	bl	80135b0 <__assert_func>
 8011d2e:	2301      	movs	r3, #1
 8011d30:	6144      	str	r4, [r0, #20]
 8011d32:	6103      	str	r3, [r0, #16]
 8011d34:	bd10      	pop	{r4, pc}
 8011d36:	bf00      	nop
 8011d38:	0801448d 	.word	0x0801448d
 8011d3c:	0801449e 	.word	0x0801449e

08011d40 <__multiply>:
 8011d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d44:	4614      	mov	r4, r2
 8011d46:	690a      	ldr	r2, [r1, #16]
 8011d48:	6923      	ldr	r3, [r4, #16]
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	bfa8      	it	ge
 8011d4e:	4623      	movge	r3, r4
 8011d50:	460f      	mov	r7, r1
 8011d52:	bfa4      	itt	ge
 8011d54:	460c      	movge	r4, r1
 8011d56:	461f      	movge	r7, r3
 8011d58:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011d5c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011d60:	68a3      	ldr	r3, [r4, #8]
 8011d62:	6861      	ldr	r1, [r4, #4]
 8011d64:	eb0a 0609 	add.w	r6, sl, r9
 8011d68:	42b3      	cmp	r3, r6
 8011d6a:	b085      	sub	sp, #20
 8011d6c:	bfb8      	it	lt
 8011d6e:	3101      	addlt	r1, #1
 8011d70:	f7ff fe92 	bl	8011a98 <_Balloc>
 8011d74:	b930      	cbnz	r0, 8011d84 <__multiply+0x44>
 8011d76:	4602      	mov	r2, r0
 8011d78:	4b44      	ldr	r3, [pc, #272]	@ (8011e8c <__multiply+0x14c>)
 8011d7a:	4845      	ldr	r0, [pc, #276]	@ (8011e90 <__multiply+0x150>)
 8011d7c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011d80:	f001 fc16 	bl	80135b0 <__assert_func>
 8011d84:	f100 0514 	add.w	r5, r0, #20
 8011d88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011d8c:	462b      	mov	r3, r5
 8011d8e:	2200      	movs	r2, #0
 8011d90:	4543      	cmp	r3, r8
 8011d92:	d321      	bcc.n	8011dd8 <__multiply+0x98>
 8011d94:	f107 0114 	add.w	r1, r7, #20
 8011d98:	f104 0214 	add.w	r2, r4, #20
 8011d9c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011da0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011da4:	9302      	str	r3, [sp, #8]
 8011da6:	1b13      	subs	r3, r2, r4
 8011da8:	3b15      	subs	r3, #21
 8011daa:	f023 0303 	bic.w	r3, r3, #3
 8011dae:	3304      	adds	r3, #4
 8011db0:	f104 0715 	add.w	r7, r4, #21
 8011db4:	42ba      	cmp	r2, r7
 8011db6:	bf38      	it	cc
 8011db8:	2304      	movcc	r3, #4
 8011dba:	9301      	str	r3, [sp, #4]
 8011dbc:	9b02      	ldr	r3, [sp, #8]
 8011dbe:	9103      	str	r1, [sp, #12]
 8011dc0:	428b      	cmp	r3, r1
 8011dc2:	d80c      	bhi.n	8011dde <__multiply+0x9e>
 8011dc4:	2e00      	cmp	r6, #0
 8011dc6:	dd03      	ble.n	8011dd0 <__multiply+0x90>
 8011dc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d05b      	beq.n	8011e88 <__multiply+0x148>
 8011dd0:	6106      	str	r6, [r0, #16]
 8011dd2:	b005      	add	sp, #20
 8011dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dd8:	f843 2b04 	str.w	r2, [r3], #4
 8011ddc:	e7d8      	b.n	8011d90 <__multiply+0x50>
 8011dde:	f8b1 a000 	ldrh.w	sl, [r1]
 8011de2:	f1ba 0f00 	cmp.w	sl, #0
 8011de6:	d024      	beq.n	8011e32 <__multiply+0xf2>
 8011de8:	f104 0e14 	add.w	lr, r4, #20
 8011dec:	46a9      	mov	r9, r5
 8011dee:	f04f 0c00 	mov.w	ip, #0
 8011df2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011df6:	f8d9 3000 	ldr.w	r3, [r9]
 8011dfa:	fa1f fb87 	uxth.w	fp, r7
 8011dfe:	b29b      	uxth	r3, r3
 8011e00:	fb0a 330b 	mla	r3, sl, fp, r3
 8011e04:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011e08:	f8d9 7000 	ldr.w	r7, [r9]
 8011e0c:	4463      	add	r3, ip
 8011e0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011e12:	fb0a c70b 	mla	r7, sl, fp, ip
 8011e16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011e1a:	b29b      	uxth	r3, r3
 8011e1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011e20:	4572      	cmp	r2, lr
 8011e22:	f849 3b04 	str.w	r3, [r9], #4
 8011e26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011e2a:	d8e2      	bhi.n	8011df2 <__multiply+0xb2>
 8011e2c:	9b01      	ldr	r3, [sp, #4]
 8011e2e:	f845 c003 	str.w	ip, [r5, r3]
 8011e32:	9b03      	ldr	r3, [sp, #12]
 8011e34:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011e38:	3104      	adds	r1, #4
 8011e3a:	f1b9 0f00 	cmp.w	r9, #0
 8011e3e:	d021      	beq.n	8011e84 <__multiply+0x144>
 8011e40:	682b      	ldr	r3, [r5, #0]
 8011e42:	f104 0c14 	add.w	ip, r4, #20
 8011e46:	46ae      	mov	lr, r5
 8011e48:	f04f 0a00 	mov.w	sl, #0
 8011e4c:	f8bc b000 	ldrh.w	fp, [ip]
 8011e50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011e54:	fb09 770b 	mla	r7, r9, fp, r7
 8011e58:	4457      	add	r7, sl
 8011e5a:	b29b      	uxth	r3, r3
 8011e5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011e60:	f84e 3b04 	str.w	r3, [lr], #4
 8011e64:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011e68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011e6c:	f8be 3000 	ldrh.w	r3, [lr]
 8011e70:	fb09 330a 	mla	r3, r9, sl, r3
 8011e74:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011e78:	4562      	cmp	r2, ip
 8011e7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011e7e:	d8e5      	bhi.n	8011e4c <__multiply+0x10c>
 8011e80:	9f01      	ldr	r7, [sp, #4]
 8011e82:	51eb      	str	r3, [r5, r7]
 8011e84:	3504      	adds	r5, #4
 8011e86:	e799      	b.n	8011dbc <__multiply+0x7c>
 8011e88:	3e01      	subs	r6, #1
 8011e8a:	e79b      	b.n	8011dc4 <__multiply+0x84>
 8011e8c:	0801448d 	.word	0x0801448d
 8011e90:	0801449e 	.word	0x0801449e

08011e94 <__pow5mult>:
 8011e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e98:	4615      	mov	r5, r2
 8011e9a:	f012 0203 	ands.w	r2, r2, #3
 8011e9e:	4607      	mov	r7, r0
 8011ea0:	460e      	mov	r6, r1
 8011ea2:	d007      	beq.n	8011eb4 <__pow5mult+0x20>
 8011ea4:	4c25      	ldr	r4, [pc, #148]	@ (8011f3c <__pow5mult+0xa8>)
 8011ea6:	3a01      	subs	r2, #1
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011eae:	f7ff fe55 	bl	8011b5c <__multadd>
 8011eb2:	4606      	mov	r6, r0
 8011eb4:	10ad      	asrs	r5, r5, #2
 8011eb6:	d03d      	beq.n	8011f34 <__pow5mult+0xa0>
 8011eb8:	69fc      	ldr	r4, [r7, #28]
 8011eba:	b97c      	cbnz	r4, 8011edc <__pow5mult+0x48>
 8011ebc:	2010      	movs	r0, #16
 8011ebe:	f7ff fd35 	bl	801192c <malloc>
 8011ec2:	4602      	mov	r2, r0
 8011ec4:	61f8      	str	r0, [r7, #28]
 8011ec6:	b928      	cbnz	r0, 8011ed4 <__pow5mult+0x40>
 8011ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8011f40 <__pow5mult+0xac>)
 8011eca:	481e      	ldr	r0, [pc, #120]	@ (8011f44 <__pow5mult+0xb0>)
 8011ecc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011ed0:	f001 fb6e 	bl	80135b0 <__assert_func>
 8011ed4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011ed8:	6004      	str	r4, [r0, #0]
 8011eda:	60c4      	str	r4, [r0, #12]
 8011edc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011ee0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011ee4:	b94c      	cbnz	r4, 8011efa <__pow5mult+0x66>
 8011ee6:	f240 2171 	movw	r1, #625	@ 0x271
 8011eea:	4638      	mov	r0, r7
 8011eec:	f7ff ff12 	bl	8011d14 <__i2b>
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	f8c8 0008 	str.w	r0, [r8, #8]
 8011ef6:	4604      	mov	r4, r0
 8011ef8:	6003      	str	r3, [r0, #0]
 8011efa:	f04f 0900 	mov.w	r9, #0
 8011efe:	07eb      	lsls	r3, r5, #31
 8011f00:	d50a      	bpl.n	8011f18 <__pow5mult+0x84>
 8011f02:	4631      	mov	r1, r6
 8011f04:	4622      	mov	r2, r4
 8011f06:	4638      	mov	r0, r7
 8011f08:	f7ff ff1a 	bl	8011d40 <__multiply>
 8011f0c:	4631      	mov	r1, r6
 8011f0e:	4680      	mov	r8, r0
 8011f10:	4638      	mov	r0, r7
 8011f12:	f7ff fe01 	bl	8011b18 <_Bfree>
 8011f16:	4646      	mov	r6, r8
 8011f18:	106d      	asrs	r5, r5, #1
 8011f1a:	d00b      	beq.n	8011f34 <__pow5mult+0xa0>
 8011f1c:	6820      	ldr	r0, [r4, #0]
 8011f1e:	b938      	cbnz	r0, 8011f30 <__pow5mult+0x9c>
 8011f20:	4622      	mov	r2, r4
 8011f22:	4621      	mov	r1, r4
 8011f24:	4638      	mov	r0, r7
 8011f26:	f7ff ff0b 	bl	8011d40 <__multiply>
 8011f2a:	6020      	str	r0, [r4, #0]
 8011f2c:	f8c0 9000 	str.w	r9, [r0]
 8011f30:	4604      	mov	r4, r0
 8011f32:	e7e4      	b.n	8011efe <__pow5mult+0x6a>
 8011f34:	4630      	mov	r0, r6
 8011f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f3a:	bf00      	nop
 8011f3c:	080144f8 	.word	0x080144f8
 8011f40:	0801441e 	.word	0x0801441e
 8011f44:	0801449e 	.word	0x0801449e

08011f48 <__lshift>:
 8011f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f4c:	460c      	mov	r4, r1
 8011f4e:	6849      	ldr	r1, [r1, #4]
 8011f50:	6923      	ldr	r3, [r4, #16]
 8011f52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011f56:	68a3      	ldr	r3, [r4, #8]
 8011f58:	4607      	mov	r7, r0
 8011f5a:	4691      	mov	r9, r2
 8011f5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011f60:	f108 0601 	add.w	r6, r8, #1
 8011f64:	42b3      	cmp	r3, r6
 8011f66:	db0b      	blt.n	8011f80 <__lshift+0x38>
 8011f68:	4638      	mov	r0, r7
 8011f6a:	f7ff fd95 	bl	8011a98 <_Balloc>
 8011f6e:	4605      	mov	r5, r0
 8011f70:	b948      	cbnz	r0, 8011f86 <__lshift+0x3e>
 8011f72:	4602      	mov	r2, r0
 8011f74:	4b28      	ldr	r3, [pc, #160]	@ (8012018 <__lshift+0xd0>)
 8011f76:	4829      	ldr	r0, [pc, #164]	@ (801201c <__lshift+0xd4>)
 8011f78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011f7c:	f001 fb18 	bl	80135b0 <__assert_func>
 8011f80:	3101      	adds	r1, #1
 8011f82:	005b      	lsls	r3, r3, #1
 8011f84:	e7ee      	b.n	8011f64 <__lshift+0x1c>
 8011f86:	2300      	movs	r3, #0
 8011f88:	f100 0114 	add.w	r1, r0, #20
 8011f8c:	f100 0210 	add.w	r2, r0, #16
 8011f90:	4618      	mov	r0, r3
 8011f92:	4553      	cmp	r3, sl
 8011f94:	db33      	blt.n	8011ffe <__lshift+0xb6>
 8011f96:	6920      	ldr	r0, [r4, #16]
 8011f98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011f9c:	f104 0314 	add.w	r3, r4, #20
 8011fa0:	f019 091f 	ands.w	r9, r9, #31
 8011fa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011fa8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011fac:	d02b      	beq.n	8012006 <__lshift+0xbe>
 8011fae:	f1c9 0e20 	rsb	lr, r9, #32
 8011fb2:	468a      	mov	sl, r1
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	6818      	ldr	r0, [r3, #0]
 8011fb8:	fa00 f009 	lsl.w	r0, r0, r9
 8011fbc:	4310      	orrs	r0, r2
 8011fbe:	f84a 0b04 	str.w	r0, [sl], #4
 8011fc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fc6:	459c      	cmp	ip, r3
 8011fc8:	fa22 f20e 	lsr.w	r2, r2, lr
 8011fcc:	d8f3      	bhi.n	8011fb6 <__lshift+0x6e>
 8011fce:	ebac 0304 	sub.w	r3, ip, r4
 8011fd2:	3b15      	subs	r3, #21
 8011fd4:	f023 0303 	bic.w	r3, r3, #3
 8011fd8:	3304      	adds	r3, #4
 8011fda:	f104 0015 	add.w	r0, r4, #21
 8011fde:	4584      	cmp	ip, r0
 8011fe0:	bf38      	it	cc
 8011fe2:	2304      	movcc	r3, #4
 8011fe4:	50ca      	str	r2, [r1, r3]
 8011fe6:	b10a      	cbz	r2, 8011fec <__lshift+0xa4>
 8011fe8:	f108 0602 	add.w	r6, r8, #2
 8011fec:	3e01      	subs	r6, #1
 8011fee:	4638      	mov	r0, r7
 8011ff0:	612e      	str	r6, [r5, #16]
 8011ff2:	4621      	mov	r1, r4
 8011ff4:	f7ff fd90 	bl	8011b18 <_Bfree>
 8011ff8:	4628      	mov	r0, r5
 8011ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ffe:	f842 0f04 	str.w	r0, [r2, #4]!
 8012002:	3301      	adds	r3, #1
 8012004:	e7c5      	b.n	8011f92 <__lshift+0x4a>
 8012006:	3904      	subs	r1, #4
 8012008:	f853 2b04 	ldr.w	r2, [r3], #4
 801200c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012010:	459c      	cmp	ip, r3
 8012012:	d8f9      	bhi.n	8012008 <__lshift+0xc0>
 8012014:	e7ea      	b.n	8011fec <__lshift+0xa4>
 8012016:	bf00      	nop
 8012018:	0801448d 	.word	0x0801448d
 801201c:	0801449e 	.word	0x0801449e

08012020 <__mcmp>:
 8012020:	690a      	ldr	r2, [r1, #16]
 8012022:	4603      	mov	r3, r0
 8012024:	6900      	ldr	r0, [r0, #16]
 8012026:	1a80      	subs	r0, r0, r2
 8012028:	b530      	push	{r4, r5, lr}
 801202a:	d10e      	bne.n	801204a <__mcmp+0x2a>
 801202c:	3314      	adds	r3, #20
 801202e:	3114      	adds	r1, #20
 8012030:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012034:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012038:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801203c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012040:	4295      	cmp	r5, r2
 8012042:	d003      	beq.n	801204c <__mcmp+0x2c>
 8012044:	d205      	bcs.n	8012052 <__mcmp+0x32>
 8012046:	f04f 30ff 	mov.w	r0, #4294967295
 801204a:	bd30      	pop	{r4, r5, pc}
 801204c:	42a3      	cmp	r3, r4
 801204e:	d3f3      	bcc.n	8012038 <__mcmp+0x18>
 8012050:	e7fb      	b.n	801204a <__mcmp+0x2a>
 8012052:	2001      	movs	r0, #1
 8012054:	e7f9      	b.n	801204a <__mcmp+0x2a>
	...

08012058 <__mdiff>:
 8012058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801205c:	4689      	mov	r9, r1
 801205e:	4606      	mov	r6, r0
 8012060:	4611      	mov	r1, r2
 8012062:	4648      	mov	r0, r9
 8012064:	4614      	mov	r4, r2
 8012066:	f7ff ffdb 	bl	8012020 <__mcmp>
 801206a:	1e05      	subs	r5, r0, #0
 801206c:	d112      	bne.n	8012094 <__mdiff+0x3c>
 801206e:	4629      	mov	r1, r5
 8012070:	4630      	mov	r0, r6
 8012072:	f7ff fd11 	bl	8011a98 <_Balloc>
 8012076:	4602      	mov	r2, r0
 8012078:	b928      	cbnz	r0, 8012086 <__mdiff+0x2e>
 801207a:	4b3f      	ldr	r3, [pc, #252]	@ (8012178 <__mdiff+0x120>)
 801207c:	f240 2137 	movw	r1, #567	@ 0x237
 8012080:	483e      	ldr	r0, [pc, #248]	@ (801217c <__mdiff+0x124>)
 8012082:	f001 fa95 	bl	80135b0 <__assert_func>
 8012086:	2301      	movs	r3, #1
 8012088:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801208c:	4610      	mov	r0, r2
 801208e:	b003      	add	sp, #12
 8012090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012094:	bfbc      	itt	lt
 8012096:	464b      	movlt	r3, r9
 8012098:	46a1      	movlt	r9, r4
 801209a:	4630      	mov	r0, r6
 801209c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80120a0:	bfba      	itte	lt
 80120a2:	461c      	movlt	r4, r3
 80120a4:	2501      	movlt	r5, #1
 80120a6:	2500      	movge	r5, #0
 80120a8:	f7ff fcf6 	bl	8011a98 <_Balloc>
 80120ac:	4602      	mov	r2, r0
 80120ae:	b918      	cbnz	r0, 80120b8 <__mdiff+0x60>
 80120b0:	4b31      	ldr	r3, [pc, #196]	@ (8012178 <__mdiff+0x120>)
 80120b2:	f240 2145 	movw	r1, #581	@ 0x245
 80120b6:	e7e3      	b.n	8012080 <__mdiff+0x28>
 80120b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80120bc:	6926      	ldr	r6, [r4, #16]
 80120be:	60c5      	str	r5, [r0, #12]
 80120c0:	f109 0310 	add.w	r3, r9, #16
 80120c4:	f109 0514 	add.w	r5, r9, #20
 80120c8:	f104 0e14 	add.w	lr, r4, #20
 80120cc:	f100 0b14 	add.w	fp, r0, #20
 80120d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80120d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80120d8:	9301      	str	r3, [sp, #4]
 80120da:	46d9      	mov	r9, fp
 80120dc:	f04f 0c00 	mov.w	ip, #0
 80120e0:	9b01      	ldr	r3, [sp, #4]
 80120e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80120e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80120ea:	9301      	str	r3, [sp, #4]
 80120ec:	fa1f f38a 	uxth.w	r3, sl
 80120f0:	4619      	mov	r1, r3
 80120f2:	b283      	uxth	r3, r0
 80120f4:	1acb      	subs	r3, r1, r3
 80120f6:	0c00      	lsrs	r0, r0, #16
 80120f8:	4463      	add	r3, ip
 80120fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80120fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012102:	b29b      	uxth	r3, r3
 8012104:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012108:	4576      	cmp	r6, lr
 801210a:	f849 3b04 	str.w	r3, [r9], #4
 801210e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012112:	d8e5      	bhi.n	80120e0 <__mdiff+0x88>
 8012114:	1b33      	subs	r3, r6, r4
 8012116:	3b15      	subs	r3, #21
 8012118:	f023 0303 	bic.w	r3, r3, #3
 801211c:	3415      	adds	r4, #21
 801211e:	3304      	adds	r3, #4
 8012120:	42a6      	cmp	r6, r4
 8012122:	bf38      	it	cc
 8012124:	2304      	movcc	r3, #4
 8012126:	441d      	add	r5, r3
 8012128:	445b      	add	r3, fp
 801212a:	461e      	mov	r6, r3
 801212c:	462c      	mov	r4, r5
 801212e:	4544      	cmp	r4, r8
 8012130:	d30e      	bcc.n	8012150 <__mdiff+0xf8>
 8012132:	f108 0103 	add.w	r1, r8, #3
 8012136:	1b49      	subs	r1, r1, r5
 8012138:	f021 0103 	bic.w	r1, r1, #3
 801213c:	3d03      	subs	r5, #3
 801213e:	45a8      	cmp	r8, r5
 8012140:	bf38      	it	cc
 8012142:	2100      	movcc	r1, #0
 8012144:	440b      	add	r3, r1
 8012146:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801214a:	b191      	cbz	r1, 8012172 <__mdiff+0x11a>
 801214c:	6117      	str	r7, [r2, #16]
 801214e:	e79d      	b.n	801208c <__mdiff+0x34>
 8012150:	f854 1b04 	ldr.w	r1, [r4], #4
 8012154:	46e6      	mov	lr, ip
 8012156:	0c08      	lsrs	r0, r1, #16
 8012158:	fa1c fc81 	uxtah	ip, ip, r1
 801215c:	4471      	add	r1, lr
 801215e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012162:	b289      	uxth	r1, r1
 8012164:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012168:	f846 1b04 	str.w	r1, [r6], #4
 801216c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012170:	e7dd      	b.n	801212e <__mdiff+0xd6>
 8012172:	3f01      	subs	r7, #1
 8012174:	e7e7      	b.n	8012146 <__mdiff+0xee>
 8012176:	bf00      	nop
 8012178:	0801448d 	.word	0x0801448d
 801217c:	0801449e 	.word	0x0801449e

08012180 <__ulp>:
 8012180:	b082      	sub	sp, #8
 8012182:	ed8d 0b00 	vstr	d0, [sp]
 8012186:	9a01      	ldr	r2, [sp, #4]
 8012188:	4b0f      	ldr	r3, [pc, #60]	@ (80121c8 <__ulp+0x48>)
 801218a:	4013      	ands	r3, r2
 801218c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012190:	2b00      	cmp	r3, #0
 8012192:	dc08      	bgt.n	80121a6 <__ulp+0x26>
 8012194:	425b      	negs	r3, r3
 8012196:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801219a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801219e:	da04      	bge.n	80121aa <__ulp+0x2a>
 80121a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80121a4:	4113      	asrs	r3, r2
 80121a6:	2200      	movs	r2, #0
 80121a8:	e008      	b.n	80121bc <__ulp+0x3c>
 80121aa:	f1a2 0314 	sub.w	r3, r2, #20
 80121ae:	2b1e      	cmp	r3, #30
 80121b0:	bfda      	itte	le
 80121b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80121b6:	40da      	lsrle	r2, r3
 80121b8:	2201      	movgt	r2, #1
 80121ba:	2300      	movs	r3, #0
 80121bc:	4619      	mov	r1, r3
 80121be:	4610      	mov	r0, r2
 80121c0:	ec41 0b10 	vmov	d0, r0, r1
 80121c4:	b002      	add	sp, #8
 80121c6:	4770      	bx	lr
 80121c8:	7ff00000 	.word	0x7ff00000

080121cc <__b2d>:
 80121cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121d0:	6906      	ldr	r6, [r0, #16]
 80121d2:	f100 0814 	add.w	r8, r0, #20
 80121d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80121da:	1f37      	subs	r7, r6, #4
 80121dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80121e0:	4610      	mov	r0, r2
 80121e2:	f7ff fd4b 	bl	8011c7c <__hi0bits>
 80121e6:	f1c0 0320 	rsb	r3, r0, #32
 80121ea:	280a      	cmp	r0, #10
 80121ec:	600b      	str	r3, [r1, #0]
 80121ee:	491b      	ldr	r1, [pc, #108]	@ (801225c <__b2d+0x90>)
 80121f0:	dc15      	bgt.n	801221e <__b2d+0x52>
 80121f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80121f6:	fa22 f30c 	lsr.w	r3, r2, ip
 80121fa:	45b8      	cmp	r8, r7
 80121fc:	ea43 0501 	orr.w	r5, r3, r1
 8012200:	bf34      	ite	cc
 8012202:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012206:	2300      	movcs	r3, #0
 8012208:	3015      	adds	r0, #21
 801220a:	fa02 f000 	lsl.w	r0, r2, r0
 801220e:	fa23 f30c 	lsr.w	r3, r3, ip
 8012212:	4303      	orrs	r3, r0
 8012214:	461c      	mov	r4, r3
 8012216:	ec45 4b10 	vmov	d0, r4, r5
 801221a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801221e:	45b8      	cmp	r8, r7
 8012220:	bf3a      	itte	cc
 8012222:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012226:	f1a6 0708 	subcc.w	r7, r6, #8
 801222a:	2300      	movcs	r3, #0
 801222c:	380b      	subs	r0, #11
 801222e:	d012      	beq.n	8012256 <__b2d+0x8a>
 8012230:	f1c0 0120 	rsb	r1, r0, #32
 8012234:	fa23 f401 	lsr.w	r4, r3, r1
 8012238:	4082      	lsls	r2, r0
 801223a:	4322      	orrs	r2, r4
 801223c:	4547      	cmp	r7, r8
 801223e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012242:	bf8c      	ite	hi
 8012244:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012248:	2200      	movls	r2, #0
 801224a:	4083      	lsls	r3, r0
 801224c:	40ca      	lsrs	r2, r1
 801224e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012252:	4313      	orrs	r3, r2
 8012254:	e7de      	b.n	8012214 <__b2d+0x48>
 8012256:	ea42 0501 	orr.w	r5, r2, r1
 801225a:	e7db      	b.n	8012214 <__b2d+0x48>
 801225c:	3ff00000 	.word	0x3ff00000

08012260 <__d2b>:
 8012260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012264:	460f      	mov	r7, r1
 8012266:	2101      	movs	r1, #1
 8012268:	ec59 8b10 	vmov	r8, r9, d0
 801226c:	4616      	mov	r6, r2
 801226e:	f7ff fc13 	bl	8011a98 <_Balloc>
 8012272:	4604      	mov	r4, r0
 8012274:	b930      	cbnz	r0, 8012284 <__d2b+0x24>
 8012276:	4602      	mov	r2, r0
 8012278:	4b23      	ldr	r3, [pc, #140]	@ (8012308 <__d2b+0xa8>)
 801227a:	4824      	ldr	r0, [pc, #144]	@ (801230c <__d2b+0xac>)
 801227c:	f240 310f 	movw	r1, #783	@ 0x30f
 8012280:	f001 f996 	bl	80135b0 <__assert_func>
 8012284:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012288:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801228c:	b10d      	cbz	r5, 8012292 <__d2b+0x32>
 801228e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012292:	9301      	str	r3, [sp, #4]
 8012294:	f1b8 0300 	subs.w	r3, r8, #0
 8012298:	d023      	beq.n	80122e2 <__d2b+0x82>
 801229a:	4668      	mov	r0, sp
 801229c:	9300      	str	r3, [sp, #0]
 801229e:	f7ff fd0c 	bl	8011cba <__lo0bits>
 80122a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80122a6:	b1d0      	cbz	r0, 80122de <__d2b+0x7e>
 80122a8:	f1c0 0320 	rsb	r3, r0, #32
 80122ac:	fa02 f303 	lsl.w	r3, r2, r3
 80122b0:	430b      	orrs	r3, r1
 80122b2:	40c2      	lsrs	r2, r0
 80122b4:	6163      	str	r3, [r4, #20]
 80122b6:	9201      	str	r2, [sp, #4]
 80122b8:	9b01      	ldr	r3, [sp, #4]
 80122ba:	61a3      	str	r3, [r4, #24]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	bf0c      	ite	eq
 80122c0:	2201      	moveq	r2, #1
 80122c2:	2202      	movne	r2, #2
 80122c4:	6122      	str	r2, [r4, #16]
 80122c6:	b1a5      	cbz	r5, 80122f2 <__d2b+0x92>
 80122c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80122cc:	4405      	add	r5, r0
 80122ce:	603d      	str	r5, [r7, #0]
 80122d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80122d4:	6030      	str	r0, [r6, #0]
 80122d6:	4620      	mov	r0, r4
 80122d8:	b003      	add	sp, #12
 80122da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122de:	6161      	str	r1, [r4, #20]
 80122e0:	e7ea      	b.n	80122b8 <__d2b+0x58>
 80122e2:	a801      	add	r0, sp, #4
 80122e4:	f7ff fce9 	bl	8011cba <__lo0bits>
 80122e8:	9b01      	ldr	r3, [sp, #4]
 80122ea:	6163      	str	r3, [r4, #20]
 80122ec:	3020      	adds	r0, #32
 80122ee:	2201      	movs	r2, #1
 80122f0:	e7e8      	b.n	80122c4 <__d2b+0x64>
 80122f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80122f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80122fa:	6038      	str	r0, [r7, #0]
 80122fc:	6918      	ldr	r0, [r3, #16]
 80122fe:	f7ff fcbd 	bl	8011c7c <__hi0bits>
 8012302:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012306:	e7e5      	b.n	80122d4 <__d2b+0x74>
 8012308:	0801448d 	.word	0x0801448d
 801230c:	0801449e 	.word	0x0801449e

08012310 <__ratio>:
 8012310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012314:	b085      	sub	sp, #20
 8012316:	e9cd 1000 	strd	r1, r0, [sp]
 801231a:	a902      	add	r1, sp, #8
 801231c:	f7ff ff56 	bl	80121cc <__b2d>
 8012320:	9800      	ldr	r0, [sp, #0]
 8012322:	a903      	add	r1, sp, #12
 8012324:	ec55 4b10 	vmov	r4, r5, d0
 8012328:	f7ff ff50 	bl	80121cc <__b2d>
 801232c:	9b01      	ldr	r3, [sp, #4]
 801232e:	6919      	ldr	r1, [r3, #16]
 8012330:	9b00      	ldr	r3, [sp, #0]
 8012332:	691b      	ldr	r3, [r3, #16]
 8012334:	1ac9      	subs	r1, r1, r3
 8012336:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801233a:	1a9b      	subs	r3, r3, r2
 801233c:	ec5b ab10 	vmov	sl, fp, d0
 8012340:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012344:	2b00      	cmp	r3, #0
 8012346:	bfce      	itee	gt
 8012348:	462a      	movgt	r2, r5
 801234a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801234e:	465a      	movle	r2, fp
 8012350:	462f      	mov	r7, r5
 8012352:	46d9      	mov	r9, fp
 8012354:	bfcc      	ite	gt
 8012356:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801235a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801235e:	464b      	mov	r3, r9
 8012360:	4652      	mov	r2, sl
 8012362:	4620      	mov	r0, r4
 8012364:	4639      	mov	r1, r7
 8012366:	f7ee fa99 	bl	800089c <__aeabi_ddiv>
 801236a:	ec41 0b10 	vmov	d0, r0, r1
 801236e:	b005      	add	sp, #20
 8012370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012374 <__copybits>:
 8012374:	3901      	subs	r1, #1
 8012376:	b570      	push	{r4, r5, r6, lr}
 8012378:	1149      	asrs	r1, r1, #5
 801237a:	6914      	ldr	r4, [r2, #16]
 801237c:	3101      	adds	r1, #1
 801237e:	f102 0314 	add.w	r3, r2, #20
 8012382:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012386:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801238a:	1f05      	subs	r5, r0, #4
 801238c:	42a3      	cmp	r3, r4
 801238e:	d30c      	bcc.n	80123aa <__copybits+0x36>
 8012390:	1aa3      	subs	r3, r4, r2
 8012392:	3b11      	subs	r3, #17
 8012394:	f023 0303 	bic.w	r3, r3, #3
 8012398:	3211      	adds	r2, #17
 801239a:	42a2      	cmp	r2, r4
 801239c:	bf88      	it	hi
 801239e:	2300      	movhi	r3, #0
 80123a0:	4418      	add	r0, r3
 80123a2:	2300      	movs	r3, #0
 80123a4:	4288      	cmp	r0, r1
 80123a6:	d305      	bcc.n	80123b4 <__copybits+0x40>
 80123a8:	bd70      	pop	{r4, r5, r6, pc}
 80123aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80123ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80123b2:	e7eb      	b.n	801238c <__copybits+0x18>
 80123b4:	f840 3b04 	str.w	r3, [r0], #4
 80123b8:	e7f4      	b.n	80123a4 <__copybits+0x30>

080123ba <__any_on>:
 80123ba:	f100 0214 	add.w	r2, r0, #20
 80123be:	6900      	ldr	r0, [r0, #16]
 80123c0:	114b      	asrs	r3, r1, #5
 80123c2:	4298      	cmp	r0, r3
 80123c4:	b510      	push	{r4, lr}
 80123c6:	db11      	blt.n	80123ec <__any_on+0x32>
 80123c8:	dd0a      	ble.n	80123e0 <__any_on+0x26>
 80123ca:	f011 011f 	ands.w	r1, r1, #31
 80123ce:	d007      	beq.n	80123e0 <__any_on+0x26>
 80123d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80123d4:	fa24 f001 	lsr.w	r0, r4, r1
 80123d8:	fa00 f101 	lsl.w	r1, r0, r1
 80123dc:	428c      	cmp	r4, r1
 80123de:	d10b      	bne.n	80123f8 <__any_on+0x3e>
 80123e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80123e4:	4293      	cmp	r3, r2
 80123e6:	d803      	bhi.n	80123f0 <__any_on+0x36>
 80123e8:	2000      	movs	r0, #0
 80123ea:	bd10      	pop	{r4, pc}
 80123ec:	4603      	mov	r3, r0
 80123ee:	e7f7      	b.n	80123e0 <__any_on+0x26>
 80123f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80123f4:	2900      	cmp	r1, #0
 80123f6:	d0f5      	beq.n	80123e4 <__any_on+0x2a>
 80123f8:	2001      	movs	r0, #1
 80123fa:	e7f6      	b.n	80123ea <__any_on+0x30>

080123fc <sulp>:
 80123fc:	b570      	push	{r4, r5, r6, lr}
 80123fe:	4604      	mov	r4, r0
 8012400:	460d      	mov	r5, r1
 8012402:	ec45 4b10 	vmov	d0, r4, r5
 8012406:	4616      	mov	r6, r2
 8012408:	f7ff feba 	bl	8012180 <__ulp>
 801240c:	ec51 0b10 	vmov	r0, r1, d0
 8012410:	b17e      	cbz	r6, 8012432 <sulp+0x36>
 8012412:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012416:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801241a:	2b00      	cmp	r3, #0
 801241c:	dd09      	ble.n	8012432 <sulp+0x36>
 801241e:	051b      	lsls	r3, r3, #20
 8012420:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8012424:	2400      	movs	r4, #0
 8012426:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801242a:	4622      	mov	r2, r4
 801242c:	462b      	mov	r3, r5
 801242e:	f7ee f90b 	bl	8000648 <__aeabi_dmul>
 8012432:	ec41 0b10 	vmov	d0, r0, r1
 8012436:	bd70      	pop	{r4, r5, r6, pc}

08012438 <_strtod_l>:
 8012438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801243c:	b09f      	sub	sp, #124	@ 0x7c
 801243e:	460c      	mov	r4, r1
 8012440:	9217      	str	r2, [sp, #92]	@ 0x5c
 8012442:	2200      	movs	r2, #0
 8012444:	921a      	str	r2, [sp, #104]	@ 0x68
 8012446:	9005      	str	r0, [sp, #20]
 8012448:	f04f 0a00 	mov.w	sl, #0
 801244c:	f04f 0b00 	mov.w	fp, #0
 8012450:	460a      	mov	r2, r1
 8012452:	9219      	str	r2, [sp, #100]	@ 0x64
 8012454:	7811      	ldrb	r1, [r2, #0]
 8012456:	292b      	cmp	r1, #43	@ 0x2b
 8012458:	d04a      	beq.n	80124f0 <_strtod_l+0xb8>
 801245a:	d838      	bhi.n	80124ce <_strtod_l+0x96>
 801245c:	290d      	cmp	r1, #13
 801245e:	d832      	bhi.n	80124c6 <_strtod_l+0x8e>
 8012460:	2908      	cmp	r1, #8
 8012462:	d832      	bhi.n	80124ca <_strtod_l+0x92>
 8012464:	2900      	cmp	r1, #0
 8012466:	d03b      	beq.n	80124e0 <_strtod_l+0xa8>
 8012468:	2200      	movs	r2, #0
 801246a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801246c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801246e:	782a      	ldrb	r2, [r5, #0]
 8012470:	2a30      	cmp	r2, #48	@ 0x30
 8012472:	f040 80b3 	bne.w	80125dc <_strtod_l+0x1a4>
 8012476:	786a      	ldrb	r2, [r5, #1]
 8012478:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801247c:	2a58      	cmp	r2, #88	@ 0x58
 801247e:	d16e      	bne.n	801255e <_strtod_l+0x126>
 8012480:	9302      	str	r3, [sp, #8]
 8012482:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012484:	9301      	str	r3, [sp, #4]
 8012486:	ab1a      	add	r3, sp, #104	@ 0x68
 8012488:	9300      	str	r3, [sp, #0]
 801248a:	4a8e      	ldr	r2, [pc, #568]	@ (80126c4 <_strtod_l+0x28c>)
 801248c:	9805      	ldr	r0, [sp, #20]
 801248e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8012490:	a919      	add	r1, sp, #100	@ 0x64
 8012492:	f001 f927 	bl	80136e4 <__gethex>
 8012496:	f010 060f 	ands.w	r6, r0, #15
 801249a:	4604      	mov	r4, r0
 801249c:	d005      	beq.n	80124aa <_strtod_l+0x72>
 801249e:	2e06      	cmp	r6, #6
 80124a0:	d128      	bne.n	80124f4 <_strtod_l+0xbc>
 80124a2:	3501      	adds	r5, #1
 80124a4:	2300      	movs	r3, #0
 80124a6:	9519      	str	r5, [sp, #100]	@ 0x64
 80124a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80124aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	f040 858e 	bne.w	8012fce <_strtod_l+0xb96>
 80124b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80124b4:	b1cb      	cbz	r3, 80124ea <_strtod_l+0xb2>
 80124b6:	4652      	mov	r2, sl
 80124b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80124bc:	ec43 2b10 	vmov	d0, r2, r3
 80124c0:	b01f      	add	sp, #124	@ 0x7c
 80124c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124c6:	2920      	cmp	r1, #32
 80124c8:	d1ce      	bne.n	8012468 <_strtod_l+0x30>
 80124ca:	3201      	adds	r2, #1
 80124cc:	e7c1      	b.n	8012452 <_strtod_l+0x1a>
 80124ce:	292d      	cmp	r1, #45	@ 0x2d
 80124d0:	d1ca      	bne.n	8012468 <_strtod_l+0x30>
 80124d2:	2101      	movs	r1, #1
 80124d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80124d6:	1c51      	adds	r1, r2, #1
 80124d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80124da:	7852      	ldrb	r2, [r2, #1]
 80124dc:	2a00      	cmp	r2, #0
 80124de:	d1c5      	bne.n	801246c <_strtod_l+0x34>
 80124e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80124e2:	9419      	str	r4, [sp, #100]	@ 0x64
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	f040 8570 	bne.w	8012fca <_strtod_l+0xb92>
 80124ea:	4652      	mov	r2, sl
 80124ec:	465b      	mov	r3, fp
 80124ee:	e7e5      	b.n	80124bc <_strtod_l+0x84>
 80124f0:	2100      	movs	r1, #0
 80124f2:	e7ef      	b.n	80124d4 <_strtod_l+0x9c>
 80124f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80124f6:	b13a      	cbz	r2, 8012508 <_strtod_l+0xd0>
 80124f8:	2135      	movs	r1, #53	@ 0x35
 80124fa:	a81c      	add	r0, sp, #112	@ 0x70
 80124fc:	f7ff ff3a 	bl	8012374 <__copybits>
 8012500:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012502:	9805      	ldr	r0, [sp, #20]
 8012504:	f7ff fb08 	bl	8011b18 <_Bfree>
 8012508:	3e01      	subs	r6, #1
 801250a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801250c:	2e04      	cmp	r6, #4
 801250e:	d806      	bhi.n	801251e <_strtod_l+0xe6>
 8012510:	e8df f006 	tbb	[pc, r6]
 8012514:	201d0314 	.word	0x201d0314
 8012518:	14          	.byte	0x14
 8012519:	00          	.byte	0x00
 801251a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801251e:	05e1      	lsls	r1, r4, #23
 8012520:	bf48      	it	mi
 8012522:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012526:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801252a:	0d1b      	lsrs	r3, r3, #20
 801252c:	051b      	lsls	r3, r3, #20
 801252e:	2b00      	cmp	r3, #0
 8012530:	d1bb      	bne.n	80124aa <_strtod_l+0x72>
 8012532:	f7fe fb2f 	bl	8010b94 <__errno>
 8012536:	2322      	movs	r3, #34	@ 0x22
 8012538:	6003      	str	r3, [r0, #0]
 801253a:	e7b6      	b.n	80124aa <_strtod_l+0x72>
 801253c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8012540:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012544:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012548:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801254c:	e7e7      	b.n	801251e <_strtod_l+0xe6>
 801254e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80126cc <_strtod_l+0x294>
 8012552:	e7e4      	b.n	801251e <_strtod_l+0xe6>
 8012554:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012558:	f04f 3aff 	mov.w	sl, #4294967295
 801255c:	e7df      	b.n	801251e <_strtod_l+0xe6>
 801255e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012560:	1c5a      	adds	r2, r3, #1
 8012562:	9219      	str	r2, [sp, #100]	@ 0x64
 8012564:	785b      	ldrb	r3, [r3, #1]
 8012566:	2b30      	cmp	r3, #48	@ 0x30
 8012568:	d0f9      	beq.n	801255e <_strtod_l+0x126>
 801256a:	2b00      	cmp	r3, #0
 801256c:	d09d      	beq.n	80124aa <_strtod_l+0x72>
 801256e:	2301      	movs	r3, #1
 8012570:	9309      	str	r3, [sp, #36]	@ 0x24
 8012572:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012574:	930c      	str	r3, [sp, #48]	@ 0x30
 8012576:	2300      	movs	r3, #0
 8012578:	9308      	str	r3, [sp, #32]
 801257a:	930a      	str	r3, [sp, #40]	@ 0x28
 801257c:	461f      	mov	r7, r3
 801257e:	220a      	movs	r2, #10
 8012580:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8012582:	7805      	ldrb	r5, [r0, #0]
 8012584:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8012588:	b2d9      	uxtb	r1, r3
 801258a:	2909      	cmp	r1, #9
 801258c:	d928      	bls.n	80125e0 <_strtod_l+0x1a8>
 801258e:	494e      	ldr	r1, [pc, #312]	@ (80126c8 <_strtod_l+0x290>)
 8012590:	2201      	movs	r2, #1
 8012592:	f000 ffd5 	bl	8013540 <strncmp>
 8012596:	2800      	cmp	r0, #0
 8012598:	d032      	beq.n	8012600 <_strtod_l+0x1c8>
 801259a:	2000      	movs	r0, #0
 801259c:	462a      	mov	r2, r5
 801259e:	4681      	mov	r9, r0
 80125a0:	463d      	mov	r5, r7
 80125a2:	4603      	mov	r3, r0
 80125a4:	2a65      	cmp	r2, #101	@ 0x65
 80125a6:	d001      	beq.n	80125ac <_strtod_l+0x174>
 80125a8:	2a45      	cmp	r2, #69	@ 0x45
 80125aa:	d114      	bne.n	80125d6 <_strtod_l+0x19e>
 80125ac:	b91d      	cbnz	r5, 80125b6 <_strtod_l+0x17e>
 80125ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80125b0:	4302      	orrs	r2, r0
 80125b2:	d095      	beq.n	80124e0 <_strtod_l+0xa8>
 80125b4:	2500      	movs	r5, #0
 80125b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80125b8:	1c62      	adds	r2, r4, #1
 80125ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80125bc:	7862      	ldrb	r2, [r4, #1]
 80125be:	2a2b      	cmp	r2, #43	@ 0x2b
 80125c0:	d077      	beq.n	80126b2 <_strtod_l+0x27a>
 80125c2:	2a2d      	cmp	r2, #45	@ 0x2d
 80125c4:	d07b      	beq.n	80126be <_strtod_l+0x286>
 80125c6:	f04f 0c00 	mov.w	ip, #0
 80125ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80125ce:	2909      	cmp	r1, #9
 80125d0:	f240 8082 	bls.w	80126d8 <_strtod_l+0x2a0>
 80125d4:	9419      	str	r4, [sp, #100]	@ 0x64
 80125d6:	f04f 0800 	mov.w	r8, #0
 80125da:	e0a2      	b.n	8012722 <_strtod_l+0x2ea>
 80125dc:	2300      	movs	r3, #0
 80125de:	e7c7      	b.n	8012570 <_strtod_l+0x138>
 80125e0:	2f08      	cmp	r7, #8
 80125e2:	bfd5      	itete	le
 80125e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80125e6:	9908      	ldrgt	r1, [sp, #32]
 80125e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80125ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80125f0:	f100 0001 	add.w	r0, r0, #1
 80125f4:	bfd4      	ite	le
 80125f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80125f8:	9308      	strgt	r3, [sp, #32]
 80125fa:	3701      	adds	r7, #1
 80125fc:	9019      	str	r0, [sp, #100]	@ 0x64
 80125fe:	e7bf      	b.n	8012580 <_strtod_l+0x148>
 8012600:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012602:	1c5a      	adds	r2, r3, #1
 8012604:	9219      	str	r2, [sp, #100]	@ 0x64
 8012606:	785a      	ldrb	r2, [r3, #1]
 8012608:	b37f      	cbz	r7, 801266a <_strtod_l+0x232>
 801260a:	4681      	mov	r9, r0
 801260c:	463d      	mov	r5, r7
 801260e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8012612:	2b09      	cmp	r3, #9
 8012614:	d912      	bls.n	801263c <_strtod_l+0x204>
 8012616:	2301      	movs	r3, #1
 8012618:	e7c4      	b.n	80125a4 <_strtod_l+0x16c>
 801261a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801261c:	1c5a      	adds	r2, r3, #1
 801261e:	9219      	str	r2, [sp, #100]	@ 0x64
 8012620:	785a      	ldrb	r2, [r3, #1]
 8012622:	3001      	adds	r0, #1
 8012624:	2a30      	cmp	r2, #48	@ 0x30
 8012626:	d0f8      	beq.n	801261a <_strtod_l+0x1e2>
 8012628:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801262c:	2b08      	cmp	r3, #8
 801262e:	f200 84d3 	bhi.w	8012fd8 <_strtod_l+0xba0>
 8012632:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012634:	930c      	str	r3, [sp, #48]	@ 0x30
 8012636:	4681      	mov	r9, r0
 8012638:	2000      	movs	r0, #0
 801263a:	4605      	mov	r5, r0
 801263c:	3a30      	subs	r2, #48	@ 0x30
 801263e:	f100 0301 	add.w	r3, r0, #1
 8012642:	d02a      	beq.n	801269a <_strtod_l+0x262>
 8012644:	4499      	add	r9, r3
 8012646:	eb00 0c05 	add.w	ip, r0, r5
 801264a:	462b      	mov	r3, r5
 801264c:	210a      	movs	r1, #10
 801264e:	4563      	cmp	r3, ip
 8012650:	d10d      	bne.n	801266e <_strtod_l+0x236>
 8012652:	1c69      	adds	r1, r5, #1
 8012654:	4401      	add	r1, r0
 8012656:	4428      	add	r0, r5
 8012658:	2808      	cmp	r0, #8
 801265a:	dc16      	bgt.n	801268a <_strtod_l+0x252>
 801265c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801265e:	230a      	movs	r3, #10
 8012660:	fb03 2300 	mla	r3, r3, r0, r2
 8012664:	930a      	str	r3, [sp, #40]	@ 0x28
 8012666:	2300      	movs	r3, #0
 8012668:	e018      	b.n	801269c <_strtod_l+0x264>
 801266a:	4638      	mov	r0, r7
 801266c:	e7da      	b.n	8012624 <_strtod_l+0x1ec>
 801266e:	2b08      	cmp	r3, #8
 8012670:	f103 0301 	add.w	r3, r3, #1
 8012674:	dc03      	bgt.n	801267e <_strtod_l+0x246>
 8012676:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8012678:	434e      	muls	r6, r1
 801267a:	960a      	str	r6, [sp, #40]	@ 0x28
 801267c:	e7e7      	b.n	801264e <_strtod_l+0x216>
 801267e:	2b10      	cmp	r3, #16
 8012680:	bfde      	ittt	le
 8012682:	9e08      	ldrle	r6, [sp, #32]
 8012684:	434e      	mulle	r6, r1
 8012686:	9608      	strle	r6, [sp, #32]
 8012688:	e7e1      	b.n	801264e <_strtod_l+0x216>
 801268a:	280f      	cmp	r0, #15
 801268c:	dceb      	bgt.n	8012666 <_strtod_l+0x22e>
 801268e:	9808      	ldr	r0, [sp, #32]
 8012690:	230a      	movs	r3, #10
 8012692:	fb03 2300 	mla	r3, r3, r0, r2
 8012696:	9308      	str	r3, [sp, #32]
 8012698:	e7e5      	b.n	8012666 <_strtod_l+0x22e>
 801269a:	4629      	mov	r1, r5
 801269c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801269e:	1c50      	adds	r0, r2, #1
 80126a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80126a2:	7852      	ldrb	r2, [r2, #1]
 80126a4:	4618      	mov	r0, r3
 80126a6:	460d      	mov	r5, r1
 80126a8:	e7b1      	b.n	801260e <_strtod_l+0x1d6>
 80126aa:	f04f 0900 	mov.w	r9, #0
 80126ae:	2301      	movs	r3, #1
 80126b0:	e77d      	b.n	80125ae <_strtod_l+0x176>
 80126b2:	f04f 0c00 	mov.w	ip, #0
 80126b6:	1ca2      	adds	r2, r4, #2
 80126b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80126ba:	78a2      	ldrb	r2, [r4, #2]
 80126bc:	e785      	b.n	80125ca <_strtod_l+0x192>
 80126be:	f04f 0c01 	mov.w	ip, #1
 80126c2:	e7f8      	b.n	80126b6 <_strtod_l+0x27e>
 80126c4:	08014610 	.word	0x08014610
 80126c8:	080145f8 	.word	0x080145f8
 80126cc:	7ff00000 	.word	0x7ff00000
 80126d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80126d2:	1c51      	adds	r1, r2, #1
 80126d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80126d6:	7852      	ldrb	r2, [r2, #1]
 80126d8:	2a30      	cmp	r2, #48	@ 0x30
 80126da:	d0f9      	beq.n	80126d0 <_strtod_l+0x298>
 80126dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80126e0:	2908      	cmp	r1, #8
 80126e2:	f63f af78 	bhi.w	80125d6 <_strtod_l+0x19e>
 80126e6:	3a30      	subs	r2, #48	@ 0x30
 80126e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80126ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80126ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 80126ee:	f04f 080a 	mov.w	r8, #10
 80126f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80126f4:	1c56      	adds	r6, r2, #1
 80126f6:	9619      	str	r6, [sp, #100]	@ 0x64
 80126f8:	7852      	ldrb	r2, [r2, #1]
 80126fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80126fe:	f1be 0f09 	cmp.w	lr, #9
 8012702:	d939      	bls.n	8012778 <_strtod_l+0x340>
 8012704:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012706:	1a76      	subs	r6, r6, r1
 8012708:	2e08      	cmp	r6, #8
 801270a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801270e:	dc03      	bgt.n	8012718 <_strtod_l+0x2e0>
 8012710:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012712:	4588      	cmp	r8, r1
 8012714:	bfa8      	it	ge
 8012716:	4688      	movge	r8, r1
 8012718:	f1bc 0f00 	cmp.w	ip, #0
 801271c:	d001      	beq.n	8012722 <_strtod_l+0x2ea>
 801271e:	f1c8 0800 	rsb	r8, r8, #0
 8012722:	2d00      	cmp	r5, #0
 8012724:	d14e      	bne.n	80127c4 <_strtod_l+0x38c>
 8012726:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012728:	4308      	orrs	r0, r1
 801272a:	f47f aebe 	bne.w	80124aa <_strtod_l+0x72>
 801272e:	2b00      	cmp	r3, #0
 8012730:	f47f aed6 	bne.w	80124e0 <_strtod_l+0xa8>
 8012734:	2a69      	cmp	r2, #105	@ 0x69
 8012736:	d028      	beq.n	801278a <_strtod_l+0x352>
 8012738:	dc25      	bgt.n	8012786 <_strtod_l+0x34e>
 801273a:	2a49      	cmp	r2, #73	@ 0x49
 801273c:	d025      	beq.n	801278a <_strtod_l+0x352>
 801273e:	2a4e      	cmp	r2, #78	@ 0x4e
 8012740:	f47f aece 	bne.w	80124e0 <_strtod_l+0xa8>
 8012744:	499b      	ldr	r1, [pc, #620]	@ (80129b4 <_strtod_l+0x57c>)
 8012746:	a819      	add	r0, sp, #100	@ 0x64
 8012748:	f001 f9ee 	bl	8013b28 <__match>
 801274c:	2800      	cmp	r0, #0
 801274e:	f43f aec7 	beq.w	80124e0 <_strtod_l+0xa8>
 8012752:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012754:	781b      	ldrb	r3, [r3, #0]
 8012756:	2b28      	cmp	r3, #40	@ 0x28
 8012758:	d12e      	bne.n	80127b8 <_strtod_l+0x380>
 801275a:	4997      	ldr	r1, [pc, #604]	@ (80129b8 <_strtod_l+0x580>)
 801275c:	aa1c      	add	r2, sp, #112	@ 0x70
 801275e:	a819      	add	r0, sp, #100	@ 0x64
 8012760:	f001 f9f6 	bl	8013b50 <__hexnan>
 8012764:	2805      	cmp	r0, #5
 8012766:	d127      	bne.n	80127b8 <_strtod_l+0x380>
 8012768:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801276a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801276e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8012772:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8012776:	e698      	b.n	80124aa <_strtod_l+0x72>
 8012778:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801277a:	fb08 2101 	mla	r1, r8, r1, r2
 801277e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8012782:	920e      	str	r2, [sp, #56]	@ 0x38
 8012784:	e7b5      	b.n	80126f2 <_strtod_l+0x2ba>
 8012786:	2a6e      	cmp	r2, #110	@ 0x6e
 8012788:	e7da      	b.n	8012740 <_strtod_l+0x308>
 801278a:	498c      	ldr	r1, [pc, #560]	@ (80129bc <_strtod_l+0x584>)
 801278c:	a819      	add	r0, sp, #100	@ 0x64
 801278e:	f001 f9cb 	bl	8013b28 <__match>
 8012792:	2800      	cmp	r0, #0
 8012794:	f43f aea4 	beq.w	80124e0 <_strtod_l+0xa8>
 8012798:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801279a:	4989      	ldr	r1, [pc, #548]	@ (80129c0 <_strtod_l+0x588>)
 801279c:	3b01      	subs	r3, #1
 801279e:	a819      	add	r0, sp, #100	@ 0x64
 80127a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80127a2:	f001 f9c1 	bl	8013b28 <__match>
 80127a6:	b910      	cbnz	r0, 80127ae <_strtod_l+0x376>
 80127a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80127aa:	3301      	adds	r3, #1
 80127ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80127ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80129d0 <_strtod_l+0x598>
 80127b2:	f04f 0a00 	mov.w	sl, #0
 80127b6:	e678      	b.n	80124aa <_strtod_l+0x72>
 80127b8:	4882      	ldr	r0, [pc, #520]	@ (80129c4 <_strtod_l+0x58c>)
 80127ba:	f000 fef1 	bl	80135a0 <nan>
 80127be:	ec5b ab10 	vmov	sl, fp, d0
 80127c2:	e672      	b.n	80124aa <_strtod_l+0x72>
 80127c4:	eba8 0309 	sub.w	r3, r8, r9
 80127c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80127ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80127cc:	2f00      	cmp	r7, #0
 80127ce:	bf08      	it	eq
 80127d0:	462f      	moveq	r7, r5
 80127d2:	2d10      	cmp	r5, #16
 80127d4:	462c      	mov	r4, r5
 80127d6:	bfa8      	it	ge
 80127d8:	2410      	movge	r4, #16
 80127da:	f7ed febb 	bl	8000554 <__aeabi_ui2d>
 80127de:	2d09      	cmp	r5, #9
 80127e0:	4682      	mov	sl, r0
 80127e2:	468b      	mov	fp, r1
 80127e4:	dc13      	bgt.n	801280e <_strtod_l+0x3d6>
 80127e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	f43f ae5e 	beq.w	80124aa <_strtod_l+0x72>
 80127ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127f0:	dd78      	ble.n	80128e4 <_strtod_l+0x4ac>
 80127f2:	2b16      	cmp	r3, #22
 80127f4:	dc5f      	bgt.n	80128b6 <_strtod_l+0x47e>
 80127f6:	4974      	ldr	r1, [pc, #464]	@ (80129c8 <_strtod_l+0x590>)
 80127f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80127fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012800:	4652      	mov	r2, sl
 8012802:	465b      	mov	r3, fp
 8012804:	f7ed ff20 	bl	8000648 <__aeabi_dmul>
 8012808:	4682      	mov	sl, r0
 801280a:	468b      	mov	fp, r1
 801280c:	e64d      	b.n	80124aa <_strtod_l+0x72>
 801280e:	4b6e      	ldr	r3, [pc, #440]	@ (80129c8 <_strtod_l+0x590>)
 8012810:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012814:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8012818:	f7ed ff16 	bl	8000648 <__aeabi_dmul>
 801281c:	4682      	mov	sl, r0
 801281e:	9808      	ldr	r0, [sp, #32]
 8012820:	468b      	mov	fp, r1
 8012822:	f7ed fe97 	bl	8000554 <__aeabi_ui2d>
 8012826:	4602      	mov	r2, r0
 8012828:	460b      	mov	r3, r1
 801282a:	4650      	mov	r0, sl
 801282c:	4659      	mov	r1, fp
 801282e:	f7ed fd55 	bl	80002dc <__adddf3>
 8012832:	2d0f      	cmp	r5, #15
 8012834:	4682      	mov	sl, r0
 8012836:	468b      	mov	fp, r1
 8012838:	ddd5      	ble.n	80127e6 <_strtod_l+0x3ae>
 801283a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801283c:	1b2c      	subs	r4, r5, r4
 801283e:	441c      	add	r4, r3
 8012840:	2c00      	cmp	r4, #0
 8012842:	f340 8096 	ble.w	8012972 <_strtod_l+0x53a>
 8012846:	f014 030f 	ands.w	r3, r4, #15
 801284a:	d00a      	beq.n	8012862 <_strtod_l+0x42a>
 801284c:	495e      	ldr	r1, [pc, #376]	@ (80129c8 <_strtod_l+0x590>)
 801284e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012852:	4652      	mov	r2, sl
 8012854:	465b      	mov	r3, fp
 8012856:	e9d1 0100 	ldrd	r0, r1, [r1]
 801285a:	f7ed fef5 	bl	8000648 <__aeabi_dmul>
 801285e:	4682      	mov	sl, r0
 8012860:	468b      	mov	fp, r1
 8012862:	f034 040f 	bics.w	r4, r4, #15
 8012866:	d073      	beq.n	8012950 <_strtod_l+0x518>
 8012868:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801286c:	dd48      	ble.n	8012900 <_strtod_l+0x4c8>
 801286e:	2400      	movs	r4, #0
 8012870:	46a0      	mov	r8, r4
 8012872:	940a      	str	r4, [sp, #40]	@ 0x28
 8012874:	46a1      	mov	r9, r4
 8012876:	9a05      	ldr	r2, [sp, #20]
 8012878:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80129d0 <_strtod_l+0x598>
 801287c:	2322      	movs	r3, #34	@ 0x22
 801287e:	6013      	str	r3, [r2, #0]
 8012880:	f04f 0a00 	mov.w	sl, #0
 8012884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012886:	2b00      	cmp	r3, #0
 8012888:	f43f ae0f 	beq.w	80124aa <_strtod_l+0x72>
 801288c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801288e:	9805      	ldr	r0, [sp, #20]
 8012890:	f7ff f942 	bl	8011b18 <_Bfree>
 8012894:	9805      	ldr	r0, [sp, #20]
 8012896:	4649      	mov	r1, r9
 8012898:	f7ff f93e 	bl	8011b18 <_Bfree>
 801289c:	9805      	ldr	r0, [sp, #20]
 801289e:	4641      	mov	r1, r8
 80128a0:	f7ff f93a 	bl	8011b18 <_Bfree>
 80128a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80128a6:	9805      	ldr	r0, [sp, #20]
 80128a8:	f7ff f936 	bl	8011b18 <_Bfree>
 80128ac:	9805      	ldr	r0, [sp, #20]
 80128ae:	4621      	mov	r1, r4
 80128b0:	f7ff f932 	bl	8011b18 <_Bfree>
 80128b4:	e5f9      	b.n	80124aa <_strtod_l+0x72>
 80128b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80128b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80128bc:	4293      	cmp	r3, r2
 80128be:	dbbc      	blt.n	801283a <_strtod_l+0x402>
 80128c0:	4c41      	ldr	r4, [pc, #260]	@ (80129c8 <_strtod_l+0x590>)
 80128c2:	f1c5 050f 	rsb	r5, r5, #15
 80128c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80128ca:	4652      	mov	r2, sl
 80128cc:	465b      	mov	r3, fp
 80128ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128d2:	f7ed feb9 	bl	8000648 <__aeabi_dmul>
 80128d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128d8:	1b5d      	subs	r5, r3, r5
 80128da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80128de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80128e2:	e78f      	b.n	8012804 <_strtod_l+0x3cc>
 80128e4:	3316      	adds	r3, #22
 80128e6:	dba8      	blt.n	801283a <_strtod_l+0x402>
 80128e8:	4b37      	ldr	r3, [pc, #220]	@ (80129c8 <_strtod_l+0x590>)
 80128ea:	eba9 0808 	sub.w	r8, r9, r8
 80128ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80128f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80128f6:	4650      	mov	r0, sl
 80128f8:	4659      	mov	r1, fp
 80128fa:	f7ed ffcf 	bl	800089c <__aeabi_ddiv>
 80128fe:	e783      	b.n	8012808 <_strtod_l+0x3d0>
 8012900:	4b32      	ldr	r3, [pc, #200]	@ (80129cc <_strtod_l+0x594>)
 8012902:	9308      	str	r3, [sp, #32]
 8012904:	2300      	movs	r3, #0
 8012906:	1124      	asrs	r4, r4, #4
 8012908:	4650      	mov	r0, sl
 801290a:	4659      	mov	r1, fp
 801290c:	461e      	mov	r6, r3
 801290e:	2c01      	cmp	r4, #1
 8012910:	dc21      	bgt.n	8012956 <_strtod_l+0x51e>
 8012912:	b10b      	cbz	r3, 8012918 <_strtod_l+0x4e0>
 8012914:	4682      	mov	sl, r0
 8012916:	468b      	mov	fp, r1
 8012918:	492c      	ldr	r1, [pc, #176]	@ (80129cc <_strtod_l+0x594>)
 801291a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801291e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8012922:	4652      	mov	r2, sl
 8012924:	465b      	mov	r3, fp
 8012926:	e9d1 0100 	ldrd	r0, r1, [r1]
 801292a:	f7ed fe8d 	bl	8000648 <__aeabi_dmul>
 801292e:	4b28      	ldr	r3, [pc, #160]	@ (80129d0 <_strtod_l+0x598>)
 8012930:	460a      	mov	r2, r1
 8012932:	400b      	ands	r3, r1
 8012934:	4927      	ldr	r1, [pc, #156]	@ (80129d4 <_strtod_l+0x59c>)
 8012936:	428b      	cmp	r3, r1
 8012938:	4682      	mov	sl, r0
 801293a:	d898      	bhi.n	801286e <_strtod_l+0x436>
 801293c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8012940:	428b      	cmp	r3, r1
 8012942:	bf86      	itte	hi
 8012944:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80129d8 <_strtod_l+0x5a0>
 8012948:	f04f 3aff 	movhi.w	sl, #4294967295
 801294c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8012950:	2300      	movs	r3, #0
 8012952:	9308      	str	r3, [sp, #32]
 8012954:	e07a      	b.n	8012a4c <_strtod_l+0x614>
 8012956:	07e2      	lsls	r2, r4, #31
 8012958:	d505      	bpl.n	8012966 <_strtod_l+0x52e>
 801295a:	9b08      	ldr	r3, [sp, #32]
 801295c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012960:	f7ed fe72 	bl	8000648 <__aeabi_dmul>
 8012964:	2301      	movs	r3, #1
 8012966:	9a08      	ldr	r2, [sp, #32]
 8012968:	3208      	adds	r2, #8
 801296a:	3601      	adds	r6, #1
 801296c:	1064      	asrs	r4, r4, #1
 801296e:	9208      	str	r2, [sp, #32]
 8012970:	e7cd      	b.n	801290e <_strtod_l+0x4d6>
 8012972:	d0ed      	beq.n	8012950 <_strtod_l+0x518>
 8012974:	4264      	negs	r4, r4
 8012976:	f014 020f 	ands.w	r2, r4, #15
 801297a:	d00a      	beq.n	8012992 <_strtod_l+0x55a>
 801297c:	4b12      	ldr	r3, [pc, #72]	@ (80129c8 <_strtod_l+0x590>)
 801297e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012982:	4650      	mov	r0, sl
 8012984:	4659      	mov	r1, fp
 8012986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801298a:	f7ed ff87 	bl	800089c <__aeabi_ddiv>
 801298e:	4682      	mov	sl, r0
 8012990:	468b      	mov	fp, r1
 8012992:	1124      	asrs	r4, r4, #4
 8012994:	d0dc      	beq.n	8012950 <_strtod_l+0x518>
 8012996:	2c1f      	cmp	r4, #31
 8012998:	dd20      	ble.n	80129dc <_strtod_l+0x5a4>
 801299a:	2400      	movs	r4, #0
 801299c:	46a0      	mov	r8, r4
 801299e:	940a      	str	r4, [sp, #40]	@ 0x28
 80129a0:	46a1      	mov	r9, r4
 80129a2:	9a05      	ldr	r2, [sp, #20]
 80129a4:	2322      	movs	r3, #34	@ 0x22
 80129a6:	f04f 0a00 	mov.w	sl, #0
 80129aa:	f04f 0b00 	mov.w	fp, #0
 80129ae:	6013      	str	r3, [r2, #0]
 80129b0:	e768      	b.n	8012884 <_strtod_l+0x44c>
 80129b2:	bf00      	nop
 80129b4:	080143e5 	.word	0x080143e5
 80129b8:	080145fc 	.word	0x080145fc
 80129bc:	080143dd 	.word	0x080143dd
 80129c0:	08014414 	.word	0x08014414
 80129c4:	080147a5 	.word	0x080147a5
 80129c8:	08014530 	.word	0x08014530
 80129cc:	08014508 	.word	0x08014508
 80129d0:	7ff00000 	.word	0x7ff00000
 80129d4:	7ca00000 	.word	0x7ca00000
 80129d8:	7fefffff 	.word	0x7fefffff
 80129dc:	f014 0310 	ands.w	r3, r4, #16
 80129e0:	bf18      	it	ne
 80129e2:	236a      	movne	r3, #106	@ 0x6a
 80129e4:	4ea9      	ldr	r6, [pc, #676]	@ (8012c8c <_strtod_l+0x854>)
 80129e6:	9308      	str	r3, [sp, #32]
 80129e8:	4650      	mov	r0, sl
 80129ea:	4659      	mov	r1, fp
 80129ec:	2300      	movs	r3, #0
 80129ee:	07e2      	lsls	r2, r4, #31
 80129f0:	d504      	bpl.n	80129fc <_strtod_l+0x5c4>
 80129f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80129f6:	f7ed fe27 	bl	8000648 <__aeabi_dmul>
 80129fa:	2301      	movs	r3, #1
 80129fc:	1064      	asrs	r4, r4, #1
 80129fe:	f106 0608 	add.w	r6, r6, #8
 8012a02:	d1f4      	bne.n	80129ee <_strtod_l+0x5b6>
 8012a04:	b10b      	cbz	r3, 8012a0a <_strtod_l+0x5d2>
 8012a06:	4682      	mov	sl, r0
 8012a08:	468b      	mov	fp, r1
 8012a0a:	9b08      	ldr	r3, [sp, #32]
 8012a0c:	b1b3      	cbz	r3, 8012a3c <_strtod_l+0x604>
 8012a0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012a12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	4659      	mov	r1, fp
 8012a1a:	dd0f      	ble.n	8012a3c <_strtod_l+0x604>
 8012a1c:	2b1f      	cmp	r3, #31
 8012a1e:	dd55      	ble.n	8012acc <_strtod_l+0x694>
 8012a20:	2b34      	cmp	r3, #52	@ 0x34
 8012a22:	bfde      	ittt	le
 8012a24:	f04f 33ff 	movle.w	r3, #4294967295
 8012a28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8012a2c:	4093      	lslle	r3, r2
 8012a2e:	f04f 0a00 	mov.w	sl, #0
 8012a32:	bfcc      	ite	gt
 8012a34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012a38:	ea03 0b01 	andle.w	fp, r3, r1
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	2300      	movs	r3, #0
 8012a40:	4650      	mov	r0, sl
 8012a42:	4659      	mov	r1, fp
 8012a44:	f7ee f868 	bl	8000b18 <__aeabi_dcmpeq>
 8012a48:	2800      	cmp	r0, #0
 8012a4a:	d1a6      	bne.n	801299a <_strtod_l+0x562>
 8012a4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a4e:	9300      	str	r3, [sp, #0]
 8012a50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012a52:	9805      	ldr	r0, [sp, #20]
 8012a54:	462b      	mov	r3, r5
 8012a56:	463a      	mov	r2, r7
 8012a58:	f7ff f8c6 	bl	8011be8 <__s2b>
 8012a5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8012a5e:	2800      	cmp	r0, #0
 8012a60:	f43f af05 	beq.w	801286e <_strtod_l+0x436>
 8012a64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a66:	2a00      	cmp	r2, #0
 8012a68:	eba9 0308 	sub.w	r3, r9, r8
 8012a6c:	bfa8      	it	ge
 8012a6e:	2300      	movge	r3, #0
 8012a70:	9312      	str	r3, [sp, #72]	@ 0x48
 8012a72:	2400      	movs	r4, #0
 8012a74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012a78:	9316      	str	r3, [sp, #88]	@ 0x58
 8012a7a:	46a0      	mov	r8, r4
 8012a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a7e:	9805      	ldr	r0, [sp, #20]
 8012a80:	6859      	ldr	r1, [r3, #4]
 8012a82:	f7ff f809 	bl	8011a98 <_Balloc>
 8012a86:	4681      	mov	r9, r0
 8012a88:	2800      	cmp	r0, #0
 8012a8a:	f43f aef4 	beq.w	8012876 <_strtod_l+0x43e>
 8012a8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a90:	691a      	ldr	r2, [r3, #16]
 8012a92:	3202      	adds	r2, #2
 8012a94:	f103 010c 	add.w	r1, r3, #12
 8012a98:	0092      	lsls	r2, r2, #2
 8012a9a:	300c      	adds	r0, #12
 8012a9c:	f000 fd72 	bl	8013584 <memcpy>
 8012aa0:	ec4b ab10 	vmov	d0, sl, fp
 8012aa4:	9805      	ldr	r0, [sp, #20]
 8012aa6:	aa1c      	add	r2, sp, #112	@ 0x70
 8012aa8:	a91b      	add	r1, sp, #108	@ 0x6c
 8012aaa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8012aae:	f7ff fbd7 	bl	8012260 <__d2b>
 8012ab2:	901a      	str	r0, [sp, #104]	@ 0x68
 8012ab4:	2800      	cmp	r0, #0
 8012ab6:	f43f aede 	beq.w	8012876 <_strtod_l+0x43e>
 8012aba:	9805      	ldr	r0, [sp, #20]
 8012abc:	2101      	movs	r1, #1
 8012abe:	f7ff f929 	bl	8011d14 <__i2b>
 8012ac2:	4680      	mov	r8, r0
 8012ac4:	b948      	cbnz	r0, 8012ada <_strtod_l+0x6a2>
 8012ac6:	f04f 0800 	mov.w	r8, #0
 8012aca:	e6d4      	b.n	8012876 <_strtod_l+0x43e>
 8012acc:	f04f 32ff 	mov.w	r2, #4294967295
 8012ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8012ad4:	ea03 0a0a 	and.w	sl, r3, sl
 8012ad8:	e7b0      	b.n	8012a3c <_strtod_l+0x604>
 8012ada:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8012adc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012ade:	2d00      	cmp	r5, #0
 8012ae0:	bfab      	itete	ge
 8012ae2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8012ae4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8012ae6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8012ae8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8012aea:	bfac      	ite	ge
 8012aec:	18ef      	addge	r7, r5, r3
 8012aee:	1b5e      	sublt	r6, r3, r5
 8012af0:	9b08      	ldr	r3, [sp, #32]
 8012af2:	1aed      	subs	r5, r5, r3
 8012af4:	4415      	add	r5, r2
 8012af6:	4b66      	ldr	r3, [pc, #408]	@ (8012c90 <_strtod_l+0x858>)
 8012af8:	3d01      	subs	r5, #1
 8012afa:	429d      	cmp	r5, r3
 8012afc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012b00:	da50      	bge.n	8012ba4 <_strtod_l+0x76c>
 8012b02:	1b5b      	subs	r3, r3, r5
 8012b04:	2b1f      	cmp	r3, #31
 8012b06:	eba2 0203 	sub.w	r2, r2, r3
 8012b0a:	f04f 0101 	mov.w	r1, #1
 8012b0e:	dc3d      	bgt.n	8012b8c <_strtod_l+0x754>
 8012b10:	fa01 f303 	lsl.w	r3, r1, r3
 8012b14:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012b16:	2300      	movs	r3, #0
 8012b18:	9310      	str	r3, [sp, #64]	@ 0x40
 8012b1a:	18bd      	adds	r5, r7, r2
 8012b1c:	9b08      	ldr	r3, [sp, #32]
 8012b1e:	42af      	cmp	r7, r5
 8012b20:	4416      	add	r6, r2
 8012b22:	441e      	add	r6, r3
 8012b24:	463b      	mov	r3, r7
 8012b26:	bfa8      	it	ge
 8012b28:	462b      	movge	r3, r5
 8012b2a:	42b3      	cmp	r3, r6
 8012b2c:	bfa8      	it	ge
 8012b2e:	4633      	movge	r3, r6
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	bfc2      	ittt	gt
 8012b34:	1aed      	subgt	r5, r5, r3
 8012b36:	1af6      	subgt	r6, r6, r3
 8012b38:	1aff      	subgt	r7, r7, r3
 8012b3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	dd16      	ble.n	8012b6e <_strtod_l+0x736>
 8012b40:	4641      	mov	r1, r8
 8012b42:	9805      	ldr	r0, [sp, #20]
 8012b44:	461a      	mov	r2, r3
 8012b46:	f7ff f9a5 	bl	8011e94 <__pow5mult>
 8012b4a:	4680      	mov	r8, r0
 8012b4c:	2800      	cmp	r0, #0
 8012b4e:	d0ba      	beq.n	8012ac6 <_strtod_l+0x68e>
 8012b50:	4601      	mov	r1, r0
 8012b52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012b54:	9805      	ldr	r0, [sp, #20]
 8012b56:	f7ff f8f3 	bl	8011d40 <__multiply>
 8012b5a:	900e      	str	r0, [sp, #56]	@ 0x38
 8012b5c:	2800      	cmp	r0, #0
 8012b5e:	f43f ae8a 	beq.w	8012876 <_strtod_l+0x43e>
 8012b62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012b64:	9805      	ldr	r0, [sp, #20]
 8012b66:	f7fe ffd7 	bl	8011b18 <_Bfree>
 8012b6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8012b6e:	2d00      	cmp	r5, #0
 8012b70:	dc1d      	bgt.n	8012bae <_strtod_l+0x776>
 8012b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	dd23      	ble.n	8012bc0 <_strtod_l+0x788>
 8012b78:	4649      	mov	r1, r9
 8012b7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8012b7c:	9805      	ldr	r0, [sp, #20]
 8012b7e:	f7ff f989 	bl	8011e94 <__pow5mult>
 8012b82:	4681      	mov	r9, r0
 8012b84:	b9e0      	cbnz	r0, 8012bc0 <_strtod_l+0x788>
 8012b86:	f04f 0900 	mov.w	r9, #0
 8012b8a:	e674      	b.n	8012876 <_strtod_l+0x43e>
 8012b8c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012b90:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8012b94:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8012b98:	35e2      	adds	r5, #226	@ 0xe2
 8012b9a:	fa01 f305 	lsl.w	r3, r1, r5
 8012b9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8012ba0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012ba2:	e7ba      	b.n	8012b1a <_strtod_l+0x6e2>
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	9310      	str	r3, [sp, #64]	@ 0x40
 8012ba8:	2301      	movs	r3, #1
 8012baa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012bac:	e7b5      	b.n	8012b1a <_strtod_l+0x6e2>
 8012bae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012bb0:	9805      	ldr	r0, [sp, #20]
 8012bb2:	462a      	mov	r2, r5
 8012bb4:	f7ff f9c8 	bl	8011f48 <__lshift>
 8012bb8:	901a      	str	r0, [sp, #104]	@ 0x68
 8012bba:	2800      	cmp	r0, #0
 8012bbc:	d1d9      	bne.n	8012b72 <_strtod_l+0x73a>
 8012bbe:	e65a      	b.n	8012876 <_strtod_l+0x43e>
 8012bc0:	2e00      	cmp	r6, #0
 8012bc2:	dd07      	ble.n	8012bd4 <_strtod_l+0x79c>
 8012bc4:	4649      	mov	r1, r9
 8012bc6:	9805      	ldr	r0, [sp, #20]
 8012bc8:	4632      	mov	r2, r6
 8012bca:	f7ff f9bd 	bl	8011f48 <__lshift>
 8012bce:	4681      	mov	r9, r0
 8012bd0:	2800      	cmp	r0, #0
 8012bd2:	d0d8      	beq.n	8012b86 <_strtod_l+0x74e>
 8012bd4:	2f00      	cmp	r7, #0
 8012bd6:	dd08      	ble.n	8012bea <_strtod_l+0x7b2>
 8012bd8:	4641      	mov	r1, r8
 8012bda:	9805      	ldr	r0, [sp, #20]
 8012bdc:	463a      	mov	r2, r7
 8012bde:	f7ff f9b3 	bl	8011f48 <__lshift>
 8012be2:	4680      	mov	r8, r0
 8012be4:	2800      	cmp	r0, #0
 8012be6:	f43f ae46 	beq.w	8012876 <_strtod_l+0x43e>
 8012bea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012bec:	9805      	ldr	r0, [sp, #20]
 8012bee:	464a      	mov	r2, r9
 8012bf0:	f7ff fa32 	bl	8012058 <__mdiff>
 8012bf4:	4604      	mov	r4, r0
 8012bf6:	2800      	cmp	r0, #0
 8012bf8:	f43f ae3d 	beq.w	8012876 <_strtod_l+0x43e>
 8012bfc:	68c3      	ldr	r3, [r0, #12]
 8012bfe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012c00:	2300      	movs	r3, #0
 8012c02:	60c3      	str	r3, [r0, #12]
 8012c04:	4641      	mov	r1, r8
 8012c06:	f7ff fa0b 	bl	8012020 <__mcmp>
 8012c0a:	2800      	cmp	r0, #0
 8012c0c:	da46      	bge.n	8012c9c <_strtod_l+0x864>
 8012c0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c10:	ea53 030a 	orrs.w	r3, r3, sl
 8012c14:	d16c      	bne.n	8012cf0 <_strtod_l+0x8b8>
 8012c16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d168      	bne.n	8012cf0 <_strtod_l+0x8b8>
 8012c1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012c22:	0d1b      	lsrs	r3, r3, #20
 8012c24:	051b      	lsls	r3, r3, #20
 8012c26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012c2a:	d961      	bls.n	8012cf0 <_strtod_l+0x8b8>
 8012c2c:	6963      	ldr	r3, [r4, #20]
 8012c2e:	b913      	cbnz	r3, 8012c36 <_strtod_l+0x7fe>
 8012c30:	6923      	ldr	r3, [r4, #16]
 8012c32:	2b01      	cmp	r3, #1
 8012c34:	dd5c      	ble.n	8012cf0 <_strtod_l+0x8b8>
 8012c36:	4621      	mov	r1, r4
 8012c38:	2201      	movs	r2, #1
 8012c3a:	9805      	ldr	r0, [sp, #20]
 8012c3c:	f7ff f984 	bl	8011f48 <__lshift>
 8012c40:	4641      	mov	r1, r8
 8012c42:	4604      	mov	r4, r0
 8012c44:	f7ff f9ec 	bl	8012020 <__mcmp>
 8012c48:	2800      	cmp	r0, #0
 8012c4a:	dd51      	ble.n	8012cf0 <_strtod_l+0x8b8>
 8012c4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012c50:	9a08      	ldr	r2, [sp, #32]
 8012c52:	0d1b      	lsrs	r3, r3, #20
 8012c54:	051b      	lsls	r3, r3, #20
 8012c56:	2a00      	cmp	r2, #0
 8012c58:	d06b      	beq.n	8012d32 <_strtod_l+0x8fa>
 8012c5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012c5e:	d868      	bhi.n	8012d32 <_strtod_l+0x8fa>
 8012c60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8012c64:	f67f ae9d 	bls.w	80129a2 <_strtod_l+0x56a>
 8012c68:	4b0a      	ldr	r3, [pc, #40]	@ (8012c94 <_strtod_l+0x85c>)
 8012c6a:	4650      	mov	r0, sl
 8012c6c:	4659      	mov	r1, fp
 8012c6e:	2200      	movs	r2, #0
 8012c70:	f7ed fcea 	bl	8000648 <__aeabi_dmul>
 8012c74:	4b08      	ldr	r3, [pc, #32]	@ (8012c98 <_strtod_l+0x860>)
 8012c76:	400b      	ands	r3, r1
 8012c78:	4682      	mov	sl, r0
 8012c7a:	468b      	mov	fp, r1
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	f47f ae05 	bne.w	801288c <_strtod_l+0x454>
 8012c82:	9a05      	ldr	r2, [sp, #20]
 8012c84:	2322      	movs	r3, #34	@ 0x22
 8012c86:	6013      	str	r3, [r2, #0]
 8012c88:	e600      	b.n	801288c <_strtod_l+0x454>
 8012c8a:	bf00      	nop
 8012c8c:	08014628 	.word	0x08014628
 8012c90:	fffffc02 	.word	0xfffffc02
 8012c94:	39500000 	.word	0x39500000
 8012c98:	7ff00000 	.word	0x7ff00000
 8012c9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012ca0:	d165      	bne.n	8012d6e <_strtod_l+0x936>
 8012ca2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012ca4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012ca8:	b35a      	cbz	r2, 8012d02 <_strtod_l+0x8ca>
 8012caa:	4a9f      	ldr	r2, [pc, #636]	@ (8012f28 <_strtod_l+0xaf0>)
 8012cac:	4293      	cmp	r3, r2
 8012cae:	d12b      	bne.n	8012d08 <_strtod_l+0x8d0>
 8012cb0:	9b08      	ldr	r3, [sp, #32]
 8012cb2:	4651      	mov	r1, sl
 8012cb4:	b303      	cbz	r3, 8012cf8 <_strtod_l+0x8c0>
 8012cb6:	4b9d      	ldr	r3, [pc, #628]	@ (8012f2c <_strtod_l+0xaf4>)
 8012cb8:	465a      	mov	r2, fp
 8012cba:	4013      	ands	r3, r2
 8012cbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8012cc4:	d81b      	bhi.n	8012cfe <_strtod_l+0x8c6>
 8012cc6:	0d1b      	lsrs	r3, r3, #20
 8012cc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8012cd0:	4299      	cmp	r1, r3
 8012cd2:	d119      	bne.n	8012d08 <_strtod_l+0x8d0>
 8012cd4:	4b96      	ldr	r3, [pc, #600]	@ (8012f30 <_strtod_l+0xaf8>)
 8012cd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	d102      	bne.n	8012ce2 <_strtod_l+0x8aa>
 8012cdc:	3101      	adds	r1, #1
 8012cde:	f43f adca 	beq.w	8012876 <_strtod_l+0x43e>
 8012ce2:	4b92      	ldr	r3, [pc, #584]	@ (8012f2c <_strtod_l+0xaf4>)
 8012ce4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012ce6:	401a      	ands	r2, r3
 8012ce8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8012cec:	f04f 0a00 	mov.w	sl, #0
 8012cf0:	9b08      	ldr	r3, [sp, #32]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d1b8      	bne.n	8012c68 <_strtod_l+0x830>
 8012cf6:	e5c9      	b.n	801288c <_strtod_l+0x454>
 8012cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8012cfc:	e7e8      	b.n	8012cd0 <_strtod_l+0x898>
 8012cfe:	4613      	mov	r3, r2
 8012d00:	e7e6      	b.n	8012cd0 <_strtod_l+0x898>
 8012d02:	ea53 030a 	orrs.w	r3, r3, sl
 8012d06:	d0a1      	beq.n	8012c4c <_strtod_l+0x814>
 8012d08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012d0a:	b1db      	cbz	r3, 8012d44 <_strtod_l+0x90c>
 8012d0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012d0e:	4213      	tst	r3, r2
 8012d10:	d0ee      	beq.n	8012cf0 <_strtod_l+0x8b8>
 8012d12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d14:	9a08      	ldr	r2, [sp, #32]
 8012d16:	4650      	mov	r0, sl
 8012d18:	4659      	mov	r1, fp
 8012d1a:	b1bb      	cbz	r3, 8012d4c <_strtod_l+0x914>
 8012d1c:	f7ff fb6e 	bl	80123fc <sulp>
 8012d20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012d24:	ec53 2b10 	vmov	r2, r3, d0
 8012d28:	f7ed fad8 	bl	80002dc <__adddf3>
 8012d2c:	4682      	mov	sl, r0
 8012d2e:	468b      	mov	fp, r1
 8012d30:	e7de      	b.n	8012cf0 <_strtod_l+0x8b8>
 8012d32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012d36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012d3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012d3e:	f04f 3aff 	mov.w	sl, #4294967295
 8012d42:	e7d5      	b.n	8012cf0 <_strtod_l+0x8b8>
 8012d44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012d46:	ea13 0f0a 	tst.w	r3, sl
 8012d4a:	e7e1      	b.n	8012d10 <_strtod_l+0x8d8>
 8012d4c:	f7ff fb56 	bl	80123fc <sulp>
 8012d50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012d54:	ec53 2b10 	vmov	r2, r3, d0
 8012d58:	f7ed fabe 	bl	80002d8 <__aeabi_dsub>
 8012d5c:	2200      	movs	r2, #0
 8012d5e:	2300      	movs	r3, #0
 8012d60:	4682      	mov	sl, r0
 8012d62:	468b      	mov	fp, r1
 8012d64:	f7ed fed8 	bl	8000b18 <__aeabi_dcmpeq>
 8012d68:	2800      	cmp	r0, #0
 8012d6a:	d0c1      	beq.n	8012cf0 <_strtod_l+0x8b8>
 8012d6c:	e619      	b.n	80129a2 <_strtod_l+0x56a>
 8012d6e:	4641      	mov	r1, r8
 8012d70:	4620      	mov	r0, r4
 8012d72:	f7ff facd 	bl	8012310 <__ratio>
 8012d76:	ec57 6b10 	vmov	r6, r7, d0
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012d80:	4630      	mov	r0, r6
 8012d82:	4639      	mov	r1, r7
 8012d84:	f7ed fedc 	bl	8000b40 <__aeabi_dcmple>
 8012d88:	2800      	cmp	r0, #0
 8012d8a:	d06f      	beq.n	8012e6c <_strtod_l+0xa34>
 8012d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d17a      	bne.n	8012e88 <_strtod_l+0xa50>
 8012d92:	f1ba 0f00 	cmp.w	sl, #0
 8012d96:	d158      	bne.n	8012e4a <_strtod_l+0xa12>
 8012d98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d15a      	bne.n	8012e58 <_strtod_l+0xa20>
 8012da2:	4b64      	ldr	r3, [pc, #400]	@ (8012f34 <_strtod_l+0xafc>)
 8012da4:	2200      	movs	r2, #0
 8012da6:	4630      	mov	r0, r6
 8012da8:	4639      	mov	r1, r7
 8012daa:	f7ed febf 	bl	8000b2c <__aeabi_dcmplt>
 8012dae:	2800      	cmp	r0, #0
 8012db0:	d159      	bne.n	8012e66 <_strtod_l+0xa2e>
 8012db2:	4630      	mov	r0, r6
 8012db4:	4639      	mov	r1, r7
 8012db6:	4b60      	ldr	r3, [pc, #384]	@ (8012f38 <_strtod_l+0xb00>)
 8012db8:	2200      	movs	r2, #0
 8012dba:	f7ed fc45 	bl	8000648 <__aeabi_dmul>
 8012dbe:	4606      	mov	r6, r0
 8012dc0:	460f      	mov	r7, r1
 8012dc2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012dc6:	9606      	str	r6, [sp, #24]
 8012dc8:	9307      	str	r3, [sp, #28]
 8012dca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012dce:	4d57      	ldr	r5, [pc, #348]	@ (8012f2c <_strtod_l+0xaf4>)
 8012dd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012dd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012dd6:	401d      	ands	r5, r3
 8012dd8:	4b58      	ldr	r3, [pc, #352]	@ (8012f3c <_strtod_l+0xb04>)
 8012dda:	429d      	cmp	r5, r3
 8012ddc:	f040 80b2 	bne.w	8012f44 <_strtod_l+0xb0c>
 8012de0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012de2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012de6:	ec4b ab10 	vmov	d0, sl, fp
 8012dea:	f7ff f9c9 	bl	8012180 <__ulp>
 8012dee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012df2:	ec51 0b10 	vmov	r0, r1, d0
 8012df6:	f7ed fc27 	bl	8000648 <__aeabi_dmul>
 8012dfa:	4652      	mov	r2, sl
 8012dfc:	465b      	mov	r3, fp
 8012dfe:	f7ed fa6d 	bl	80002dc <__adddf3>
 8012e02:	460b      	mov	r3, r1
 8012e04:	4949      	ldr	r1, [pc, #292]	@ (8012f2c <_strtod_l+0xaf4>)
 8012e06:	4a4e      	ldr	r2, [pc, #312]	@ (8012f40 <_strtod_l+0xb08>)
 8012e08:	4019      	ands	r1, r3
 8012e0a:	4291      	cmp	r1, r2
 8012e0c:	4682      	mov	sl, r0
 8012e0e:	d942      	bls.n	8012e96 <_strtod_l+0xa5e>
 8012e10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012e12:	4b47      	ldr	r3, [pc, #284]	@ (8012f30 <_strtod_l+0xaf8>)
 8012e14:	429a      	cmp	r2, r3
 8012e16:	d103      	bne.n	8012e20 <_strtod_l+0x9e8>
 8012e18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012e1a:	3301      	adds	r3, #1
 8012e1c:	f43f ad2b 	beq.w	8012876 <_strtod_l+0x43e>
 8012e20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012f30 <_strtod_l+0xaf8>
 8012e24:	f04f 3aff 	mov.w	sl, #4294967295
 8012e28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012e2a:	9805      	ldr	r0, [sp, #20]
 8012e2c:	f7fe fe74 	bl	8011b18 <_Bfree>
 8012e30:	9805      	ldr	r0, [sp, #20]
 8012e32:	4649      	mov	r1, r9
 8012e34:	f7fe fe70 	bl	8011b18 <_Bfree>
 8012e38:	9805      	ldr	r0, [sp, #20]
 8012e3a:	4641      	mov	r1, r8
 8012e3c:	f7fe fe6c 	bl	8011b18 <_Bfree>
 8012e40:	9805      	ldr	r0, [sp, #20]
 8012e42:	4621      	mov	r1, r4
 8012e44:	f7fe fe68 	bl	8011b18 <_Bfree>
 8012e48:	e618      	b.n	8012a7c <_strtod_l+0x644>
 8012e4a:	f1ba 0f01 	cmp.w	sl, #1
 8012e4e:	d103      	bne.n	8012e58 <_strtod_l+0xa20>
 8012e50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	f43f ada5 	beq.w	80129a2 <_strtod_l+0x56a>
 8012e58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012f08 <_strtod_l+0xad0>
 8012e5c:	4f35      	ldr	r7, [pc, #212]	@ (8012f34 <_strtod_l+0xafc>)
 8012e5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012e62:	2600      	movs	r6, #0
 8012e64:	e7b1      	b.n	8012dca <_strtod_l+0x992>
 8012e66:	4f34      	ldr	r7, [pc, #208]	@ (8012f38 <_strtod_l+0xb00>)
 8012e68:	2600      	movs	r6, #0
 8012e6a:	e7aa      	b.n	8012dc2 <_strtod_l+0x98a>
 8012e6c:	4b32      	ldr	r3, [pc, #200]	@ (8012f38 <_strtod_l+0xb00>)
 8012e6e:	4630      	mov	r0, r6
 8012e70:	4639      	mov	r1, r7
 8012e72:	2200      	movs	r2, #0
 8012e74:	f7ed fbe8 	bl	8000648 <__aeabi_dmul>
 8012e78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e7a:	4606      	mov	r6, r0
 8012e7c:	460f      	mov	r7, r1
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d09f      	beq.n	8012dc2 <_strtod_l+0x98a>
 8012e82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012e86:	e7a0      	b.n	8012dca <_strtod_l+0x992>
 8012e88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012f10 <_strtod_l+0xad8>
 8012e8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012e90:	ec57 6b17 	vmov	r6, r7, d7
 8012e94:	e799      	b.n	8012dca <_strtod_l+0x992>
 8012e96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8012e9a:	9b08      	ldr	r3, [sp, #32]
 8012e9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d1c1      	bne.n	8012e28 <_strtod_l+0x9f0>
 8012ea4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012ea8:	0d1b      	lsrs	r3, r3, #20
 8012eaa:	051b      	lsls	r3, r3, #20
 8012eac:	429d      	cmp	r5, r3
 8012eae:	d1bb      	bne.n	8012e28 <_strtod_l+0x9f0>
 8012eb0:	4630      	mov	r0, r6
 8012eb2:	4639      	mov	r1, r7
 8012eb4:	f7ed ff28 	bl	8000d08 <__aeabi_d2lz>
 8012eb8:	f7ed fb98 	bl	80005ec <__aeabi_l2d>
 8012ebc:	4602      	mov	r2, r0
 8012ebe:	460b      	mov	r3, r1
 8012ec0:	4630      	mov	r0, r6
 8012ec2:	4639      	mov	r1, r7
 8012ec4:	f7ed fa08 	bl	80002d8 <__aeabi_dsub>
 8012ec8:	460b      	mov	r3, r1
 8012eca:	4602      	mov	r2, r0
 8012ecc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012ed0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ed6:	ea46 060a 	orr.w	r6, r6, sl
 8012eda:	431e      	orrs	r6, r3
 8012edc:	d06f      	beq.n	8012fbe <_strtod_l+0xb86>
 8012ede:	a30e      	add	r3, pc, #56	@ (adr r3, 8012f18 <_strtod_l+0xae0>)
 8012ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee4:	f7ed fe22 	bl	8000b2c <__aeabi_dcmplt>
 8012ee8:	2800      	cmp	r0, #0
 8012eea:	f47f accf 	bne.w	801288c <_strtod_l+0x454>
 8012eee:	a30c      	add	r3, pc, #48	@ (adr r3, 8012f20 <_strtod_l+0xae8>)
 8012ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012ef8:	f7ed fe36 	bl	8000b68 <__aeabi_dcmpgt>
 8012efc:	2800      	cmp	r0, #0
 8012efe:	d093      	beq.n	8012e28 <_strtod_l+0x9f0>
 8012f00:	e4c4      	b.n	801288c <_strtod_l+0x454>
 8012f02:	bf00      	nop
 8012f04:	f3af 8000 	nop.w
 8012f08:	00000000 	.word	0x00000000
 8012f0c:	bff00000 	.word	0xbff00000
 8012f10:	00000000 	.word	0x00000000
 8012f14:	3ff00000 	.word	0x3ff00000
 8012f18:	94a03595 	.word	0x94a03595
 8012f1c:	3fdfffff 	.word	0x3fdfffff
 8012f20:	35afe535 	.word	0x35afe535
 8012f24:	3fe00000 	.word	0x3fe00000
 8012f28:	000fffff 	.word	0x000fffff
 8012f2c:	7ff00000 	.word	0x7ff00000
 8012f30:	7fefffff 	.word	0x7fefffff
 8012f34:	3ff00000 	.word	0x3ff00000
 8012f38:	3fe00000 	.word	0x3fe00000
 8012f3c:	7fe00000 	.word	0x7fe00000
 8012f40:	7c9fffff 	.word	0x7c9fffff
 8012f44:	9b08      	ldr	r3, [sp, #32]
 8012f46:	b323      	cbz	r3, 8012f92 <_strtod_l+0xb5a>
 8012f48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8012f4c:	d821      	bhi.n	8012f92 <_strtod_l+0xb5a>
 8012f4e:	a328      	add	r3, pc, #160	@ (adr r3, 8012ff0 <_strtod_l+0xbb8>)
 8012f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f54:	4630      	mov	r0, r6
 8012f56:	4639      	mov	r1, r7
 8012f58:	f7ed fdf2 	bl	8000b40 <__aeabi_dcmple>
 8012f5c:	b1a0      	cbz	r0, 8012f88 <_strtod_l+0xb50>
 8012f5e:	4639      	mov	r1, r7
 8012f60:	4630      	mov	r0, r6
 8012f62:	f7ed fe49 	bl	8000bf8 <__aeabi_d2uiz>
 8012f66:	2801      	cmp	r0, #1
 8012f68:	bf38      	it	cc
 8012f6a:	2001      	movcc	r0, #1
 8012f6c:	f7ed faf2 	bl	8000554 <__aeabi_ui2d>
 8012f70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f72:	4606      	mov	r6, r0
 8012f74:	460f      	mov	r7, r1
 8012f76:	b9fb      	cbnz	r3, 8012fb8 <_strtod_l+0xb80>
 8012f78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012f7c:	9014      	str	r0, [sp, #80]	@ 0x50
 8012f7e:	9315      	str	r3, [sp, #84]	@ 0x54
 8012f80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8012f84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012f88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012f8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8012f8e:	1b5b      	subs	r3, r3, r5
 8012f90:	9311      	str	r3, [sp, #68]	@ 0x44
 8012f92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012f96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8012f9a:	f7ff f8f1 	bl	8012180 <__ulp>
 8012f9e:	4650      	mov	r0, sl
 8012fa0:	ec53 2b10 	vmov	r2, r3, d0
 8012fa4:	4659      	mov	r1, fp
 8012fa6:	f7ed fb4f 	bl	8000648 <__aeabi_dmul>
 8012faa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012fae:	f7ed f995 	bl	80002dc <__adddf3>
 8012fb2:	4682      	mov	sl, r0
 8012fb4:	468b      	mov	fp, r1
 8012fb6:	e770      	b.n	8012e9a <_strtod_l+0xa62>
 8012fb8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8012fbc:	e7e0      	b.n	8012f80 <_strtod_l+0xb48>
 8012fbe:	a30e      	add	r3, pc, #56	@ (adr r3, 8012ff8 <_strtod_l+0xbc0>)
 8012fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc4:	f7ed fdb2 	bl	8000b2c <__aeabi_dcmplt>
 8012fc8:	e798      	b.n	8012efc <_strtod_l+0xac4>
 8012fca:	2300      	movs	r3, #0
 8012fcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012fce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012fd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012fd2:	6013      	str	r3, [r2, #0]
 8012fd4:	f7ff ba6d 	b.w	80124b2 <_strtod_l+0x7a>
 8012fd8:	2a65      	cmp	r2, #101	@ 0x65
 8012fda:	f43f ab66 	beq.w	80126aa <_strtod_l+0x272>
 8012fde:	2a45      	cmp	r2, #69	@ 0x45
 8012fe0:	f43f ab63 	beq.w	80126aa <_strtod_l+0x272>
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	f7ff bb9e 	b.w	8012726 <_strtod_l+0x2ee>
 8012fea:	bf00      	nop
 8012fec:	f3af 8000 	nop.w
 8012ff0:	ffc00000 	.word	0xffc00000
 8012ff4:	41dfffff 	.word	0x41dfffff
 8012ff8:	94a03595 	.word	0x94a03595
 8012ffc:	3fcfffff 	.word	0x3fcfffff

08013000 <_strtod_r>:
 8013000:	4b01      	ldr	r3, [pc, #4]	@ (8013008 <_strtod_r+0x8>)
 8013002:	f7ff ba19 	b.w	8012438 <_strtod_l>
 8013006:	bf00      	nop
 8013008:	200001e4 	.word	0x200001e4

0801300c <_strtol_l.constprop.0>:
 801300c:	2b24      	cmp	r3, #36	@ 0x24
 801300e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013012:	4686      	mov	lr, r0
 8013014:	4690      	mov	r8, r2
 8013016:	d801      	bhi.n	801301c <_strtol_l.constprop.0+0x10>
 8013018:	2b01      	cmp	r3, #1
 801301a:	d106      	bne.n	801302a <_strtol_l.constprop.0+0x1e>
 801301c:	f7fd fdba 	bl	8010b94 <__errno>
 8013020:	2316      	movs	r3, #22
 8013022:	6003      	str	r3, [r0, #0]
 8013024:	2000      	movs	r0, #0
 8013026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801302a:	4834      	ldr	r0, [pc, #208]	@ (80130fc <_strtol_l.constprop.0+0xf0>)
 801302c:	460d      	mov	r5, r1
 801302e:	462a      	mov	r2, r5
 8013030:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013034:	5d06      	ldrb	r6, [r0, r4]
 8013036:	f016 0608 	ands.w	r6, r6, #8
 801303a:	d1f8      	bne.n	801302e <_strtol_l.constprop.0+0x22>
 801303c:	2c2d      	cmp	r4, #45	@ 0x2d
 801303e:	d12d      	bne.n	801309c <_strtol_l.constprop.0+0x90>
 8013040:	782c      	ldrb	r4, [r5, #0]
 8013042:	2601      	movs	r6, #1
 8013044:	1c95      	adds	r5, r2, #2
 8013046:	f033 0210 	bics.w	r2, r3, #16
 801304a:	d109      	bne.n	8013060 <_strtol_l.constprop.0+0x54>
 801304c:	2c30      	cmp	r4, #48	@ 0x30
 801304e:	d12a      	bne.n	80130a6 <_strtol_l.constprop.0+0x9a>
 8013050:	782a      	ldrb	r2, [r5, #0]
 8013052:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013056:	2a58      	cmp	r2, #88	@ 0x58
 8013058:	d125      	bne.n	80130a6 <_strtol_l.constprop.0+0x9a>
 801305a:	786c      	ldrb	r4, [r5, #1]
 801305c:	2310      	movs	r3, #16
 801305e:	3502      	adds	r5, #2
 8013060:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013064:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013068:	2200      	movs	r2, #0
 801306a:	fbbc f9f3 	udiv	r9, ip, r3
 801306e:	4610      	mov	r0, r2
 8013070:	fb03 ca19 	mls	sl, r3, r9, ip
 8013074:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013078:	2f09      	cmp	r7, #9
 801307a:	d81b      	bhi.n	80130b4 <_strtol_l.constprop.0+0xa8>
 801307c:	463c      	mov	r4, r7
 801307e:	42a3      	cmp	r3, r4
 8013080:	dd27      	ble.n	80130d2 <_strtol_l.constprop.0+0xc6>
 8013082:	1c57      	adds	r7, r2, #1
 8013084:	d007      	beq.n	8013096 <_strtol_l.constprop.0+0x8a>
 8013086:	4581      	cmp	r9, r0
 8013088:	d320      	bcc.n	80130cc <_strtol_l.constprop.0+0xc0>
 801308a:	d101      	bne.n	8013090 <_strtol_l.constprop.0+0x84>
 801308c:	45a2      	cmp	sl, r4
 801308e:	db1d      	blt.n	80130cc <_strtol_l.constprop.0+0xc0>
 8013090:	fb00 4003 	mla	r0, r0, r3, r4
 8013094:	2201      	movs	r2, #1
 8013096:	f815 4b01 	ldrb.w	r4, [r5], #1
 801309a:	e7eb      	b.n	8013074 <_strtol_l.constprop.0+0x68>
 801309c:	2c2b      	cmp	r4, #43	@ 0x2b
 801309e:	bf04      	itt	eq
 80130a0:	782c      	ldrbeq	r4, [r5, #0]
 80130a2:	1c95      	addeq	r5, r2, #2
 80130a4:	e7cf      	b.n	8013046 <_strtol_l.constprop.0+0x3a>
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d1da      	bne.n	8013060 <_strtol_l.constprop.0+0x54>
 80130aa:	2c30      	cmp	r4, #48	@ 0x30
 80130ac:	bf0c      	ite	eq
 80130ae:	2308      	moveq	r3, #8
 80130b0:	230a      	movne	r3, #10
 80130b2:	e7d5      	b.n	8013060 <_strtol_l.constprop.0+0x54>
 80130b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80130b8:	2f19      	cmp	r7, #25
 80130ba:	d801      	bhi.n	80130c0 <_strtol_l.constprop.0+0xb4>
 80130bc:	3c37      	subs	r4, #55	@ 0x37
 80130be:	e7de      	b.n	801307e <_strtol_l.constprop.0+0x72>
 80130c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80130c4:	2f19      	cmp	r7, #25
 80130c6:	d804      	bhi.n	80130d2 <_strtol_l.constprop.0+0xc6>
 80130c8:	3c57      	subs	r4, #87	@ 0x57
 80130ca:	e7d8      	b.n	801307e <_strtol_l.constprop.0+0x72>
 80130cc:	f04f 32ff 	mov.w	r2, #4294967295
 80130d0:	e7e1      	b.n	8013096 <_strtol_l.constprop.0+0x8a>
 80130d2:	1c53      	adds	r3, r2, #1
 80130d4:	d108      	bne.n	80130e8 <_strtol_l.constprop.0+0xdc>
 80130d6:	2322      	movs	r3, #34	@ 0x22
 80130d8:	f8ce 3000 	str.w	r3, [lr]
 80130dc:	4660      	mov	r0, ip
 80130de:	f1b8 0f00 	cmp.w	r8, #0
 80130e2:	d0a0      	beq.n	8013026 <_strtol_l.constprop.0+0x1a>
 80130e4:	1e69      	subs	r1, r5, #1
 80130e6:	e006      	b.n	80130f6 <_strtol_l.constprop.0+0xea>
 80130e8:	b106      	cbz	r6, 80130ec <_strtol_l.constprop.0+0xe0>
 80130ea:	4240      	negs	r0, r0
 80130ec:	f1b8 0f00 	cmp.w	r8, #0
 80130f0:	d099      	beq.n	8013026 <_strtol_l.constprop.0+0x1a>
 80130f2:	2a00      	cmp	r2, #0
 80130f4:	d1f6      	bne.n	80130e4 <_strtol_l.constprop.0+0xd8>
 80130f6:	f8c8 1000 	str.w	r1, [r8]
 80130fa:	e794      	b.n	8013026 <_strtol_l.constprop.0+0x1a>
 80130fc:	08014651 	.word	0x08014651

08013100 <_strtol_r>:
 8013100:	f7ff bf84 	b.w	801300c <_strtol_l.constprop.0>

08013104 <__ssputs_r>:
 8013104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013108:	688e      	ldr	r6, [r1, #8]
 801310a:	461f      	mov	r7, r3
 801310c:	42be      	cmp	r6, r7
 801310e:	680b      	ldr	r3, [r1, #0]
 8013110:	4682      	mov	sl, r0
 8013112:	460c      	mov	r4, r1
 8013114:	4690      	mov	r8, r2
 8013116:	d82d      	bhi.n	8013174 <__ssputs_r+0x70>
 8013118:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801311c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013120:	d026      	beq.n	8013170 <__ssputs_r+0x6c>
 8013122:	6965      	ldr	r5, [r4, #20]
 8013124:	6909      	ldr	r1, [r1, #16]
 8013126:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801312a:	eba3 0901 	sub.w	r9, r3, r1
 801312e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013132:	1c7b      	adds	r3, r7, #1
 8013134:	444b      	add	r3, r9
 8013136:	106d      	asrs	r5, r5, #1
 8013138:	429d      	cmp	r5, r3
 801313a:	bf38      	it	cc
 801313c:	461d      	movcc	r5, r3
 801313e:	0553      	lsls	r3, r2, #21
 8013140:	d527      	bpl.n	8013192 <__ssputs_r+0x8e>
 8013142:	4629      	mov	r1, r5
 8013144:	f7fe fc1c 	bl	8011980 <_malloc_r>
 8013148:	4606      	mov	r6, r0
 801314a:	b360      	cbz	r0, 80131a6 <__ssputs_r+0xa2>
 801314c:	6921      	ldr	r1, [r4, #16]
 801314e:	464a      	mov	r2, r9
 8013150:	f000 fa18 	bl	8013584 <memcpy>
 8013154:	89a3      	ldrh	r3, [r4, #12]
 8013156:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801315a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801315e:	81a3      	strh	r3, [r4, #12]
 8013160:	6126      	str	r6, [r4, #16]
 8013162:	6165      	str	r5, [r4, #20]
 8013164:	444e      	add	r6, r9
 8013166:	eba5 0509 	sub.w	r5, r5, r9
 801316a:	6026      	str	r6, [r4, #0]
 801316c:	60a5      	str	r5, [r4, #8]
 801316e:	463e      	mov	r6, r7
 8013170:	42be      	cmp	r6, r7
 8013172:	d900      	bls.n	8013176 <__ssputs_r+0x72>
 8013174:	463e      	mov	r6, r7
 8013176:	6820      	ldr	r0, [r4, #0]
 8013178:	4632      	mov	r2, r6
 801317a:	4641      	mov	r1, r8
 801317c:	f000 f9c6 	bl	801350c <memmove>
 8013180:	68a3      	ldr	r3, [r4, #8]
 8013182:	1b9b      	subs	r3, r3, r6
 8013184:	60a3      	str	r3, [r4, #8]
 8013186:	6823      	ldr	r3, [r4, #0]
 8013188:	4433      	add	r3, r6
 801318a:	6023      	str	r3, [r4, #0]
 801318c:	2000      	movs	r0, #0
 801318e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013192:	462a      	mov	r2, r5
 8013194:	f000 fd89 	bl	8013caa <_realloc_r>
 8013198:	4606      	mov	r6, r0
 801319a:	2800      	cmp	r0, #0
 801319c:	d1e0      	bne.n	8013160 <__ssputs_r+0x5c>
 801319e:	6921      	ldr	r1, [r4, #16]
 80131a0:	4650      	mov	r0, sl
 80131a2:	f7fe fb79 	bl	8011898 <_free_r>
 80131a6:	230c      	movs	r3, #12
 80131a8:	f8ca 3000 	str.w	r3, [sl]
 80131ac:	89a3      	ldrh	r3, [r4, #12]
 80131ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80131b2:	81a3      	strh	r3, [r4, #12]
 80131b4:	f04f 30ff 	mov.w	r0, #4294967295
 80131b8:	e7e9      	b.n	801318e <__ssputs_r+0x8a>
	...

080131bc <_svfiprintf_r>:
 80131bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c0:	4698      	mov	r8, r3
 80131c2:	898b      	ldrh	r3, [r1, #12]
 80131c4:	061b      	lsls	r3, r3, #24
 80131c6:	b09d      	sub	sp, #116	@ 0x74
 80131c8:	4607      	mov	r7, r0
 80131ca:	460d      	mov	r5, r1
 80131cc:	4614      	mov	r4, r2
 80131ce:	d510      	bpl.n	80131f2 <_svfiprintf_r+0x36>
 80131d0:	690b      	ldr	r3, [r1, #16]
 80131d2:	b973      	cbnz	r3, 80131f2 <_svfiprintf_r+0x36>
 80131d4:	2140      	movs	r1, #64	@ 0x40
 80131d6:	f7fe fbd3 	bl	8011980 <_malloc_r>
 80131da:	6028      	str	r0, [r5, #0]
 80131dc:	6128      	str	r0, [r5, #16]
 80131de:	b930      	cbnz	r0, 80131ee <_svfiprintf_r+0x32>
 80131e0:	230c      	movs	r3, #12
 80131e2:	603b      	str	r3, [r7, #0]
 80131e4:	f04f 30ff 	mov.w	r0, #4294967295
 80131e8:	b01d      	add	sp, #116	@ 0x74
 80131ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ee:	2340      	movs	r3, #64	@ 0x40
 80131f0:	616b      	str	r3, [r5, #20]
 80131f2:	2300      	movs	r3, #0
 80131f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80131f6:	2320      	movs	r3, #32
 80131f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80131fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8013200:	2330      	movs	r3, #48	@ 0x30
 8013202:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80133a0 <_svfiprintf_r+0x1e4>
 8013206:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801320a:	f04f 0901 	mov.w	r9, #1
 801320e:	4623      	mov	r3, r4
 8013210:	469a      	mov	sl, r3
 8013212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013216:	b10a      	cbz	r2, 801321c <_svfiprintf_r+0x60>
 8013218:	2a25      	cmp	r2, #37	@ 0x25
 801321a:	d1f9      	bne.n	8013210 <_svfiprintf_r+0x54>
 801321c:	ebba 0b04 	subs.w	fp, sl, r4
 8013220:	d00b      	beq.n	801323a <_svfiprintf_r+0x7e>
 8013222:	465b      	mov	r3, fp
 8013224:	4622      	mov	r2, r4
 8013226:	4629      	mov	r1, r5
 8013228:	4638      	mov	r0, r7
 801322a:	f7ff ff6b 	bl	8013104 <__ssputs_r>
 801322e:	3001      	adds	r0, #1
 8013230:	f000 80a7 	beq.w	8013382 <_svfiprintf_r+0x1c6>
 8013234:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013236:	445a      	add	r2, fp
 8013238:	9209      	str	r2, [sp, #36]	@ 0x24
 801323a:	f89a 3000 	ldrb.w	r3, [sl]
 801323e:	2b00      	cmp	r3, #0
 8013240:	f000 809f 	beq.w	8013382 <_svfiprintf_r+0x1c6>
 8013244:	2300      	movs	r3, #0
 8013246:	f04f 32ff 	mov.w	r2, #4294967295
 801324a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801324e:	f10a 0a01 	add.w	sl, sl, #1
 8013252:	9304      	str	r3, [sp, #16]
 8013254:	9307      	str	r3, [sp, #28]
 8013256:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801325a:	931a      	str	r3, [sp, #104]	@ 0x68
 801325c:	4654      	mov	r4, sl
 801325e:	2205      	movs	r2, #5
 8013260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013264:	484e      	ldr	r0, [pc, #312]	@ (80133a0 <_svfiprintf_r+0x1e4>)
 8013266:	f7ec ffdb 	bl	8000220 <memchr>
 801326a:	9a04      	ldr	r2, [sp, #16]
 801326c:	b9d8      	cbnz	r0, 80132a6 <_svfiprintf_r+0xea>
 801326e:	06d0      	lsls	r0, r2, #27
 8013270:	bf44      	itt	mi
 8013272:	2320      	movmi	r3, #32
 8013274:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013278:	0711      	lsls	r1, r2, #28
 801327a:	bf44      	itt	mi
 801327c:	232b      	movmi	r3, #43	@ 0x2b
 801327e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013282:	f89a 3000 	ldrb.w	r3, [sl]
 8013286:	2b2a      	cmp	r3, #42	@ 0x2a
 8013288:	d015      	beq.n	80132b6 <_svfiprintf_r+0xfa>
 801328a:	9a07      	ldr	r2, [sp, #28]
 801328c:	4654      	mov	r4, sl
 801328e:	2000      	movs	r0, #0
 8013290:	f04f 0c0a 	mov.w	ip, #10
 8013294:	4621      	mov	r1, r4
 8013296:	f811 3b01 	ldrb.w	r3, [r1], #1
 801329a:	3b30      	subs	r3, #48	@ 0x30
 801329c:	2b09      	cmp	r3, #9
 801329e:	d94b      	bls.n	8013338 <_svfiprintf_r+0x17c>
 80132a0:	b1b0      	cbz	r0, 80132d0 <_svfiprintf_r+0x114>
 80132a2:	9207      	str	r2, [sp, #28]
 80132a4:	e014      	b.n	80132d0 <_svfiprintf_r+0x114>
 80132a6:	eba0 0308 	sub.w	r3, r0, r8
 80132aa:	fa09 f303 	lsl.w	r3, r9, r3
 80132ae:	4313      	orrs	r3, r2
 80132b0:	9304      	str	r3, [sp, #16]
 80132b2:	46a2      	mov	sl, r4
 80132b4:	e7d2      	b.n	801325c <_svfiprintf_r+0xa0>
 80132b6:	9b03      	ldr	r3, [sp, #12]
 80132b8:	1d19      	adds	r1, r3, #4
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	9103      	str	r1, [sp, #12]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	bfbb      	ittet	lt
 80132c2:	425b      	neglt	r3, r3
 80132c4:	f042 0202 	orrlt.w	r2, r2, #2
 80132c8:	9307      	strge	r3, [sp, #28]
 80132ca:	9307      	strlt	r3, [sp, #28]
 80132cc:	bfb8      	it	lt
 80132ce:	9204      	strlt	r2, [sp, #16]
 80132d0:	7823      	ldrb	r3, [r4, #0]
 80132d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80132d4:	d10a      	bne.n	80132ec <_svfiprintf_r+0x130>
 80132d6:	7863      	ldrb	r3, [r4, #1]
 80132d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80132da:	d132      	bne.n	8013342 <_svfiprintf_r+0x186>
 80132dc:	9b03      	ldr	r3, [sp, #12]
 80132de:	1d1a      	adds	r2, r3, #4
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	9203      	str	r2, [sp, #12]
 80132e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80132e8:	3402      	adds	r4, #2
 80132ea:	9305      	str	r3, [sp, #20]
 80132ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80133b0 <_svfiprintf_r+0x1f4>
 80132f0:	7821      	ldrb	r1, [r4, #0]
 80132f2:	2203      	movs	r2, #3
 80132f4:	4650      	mov	r0, sl
 80132f6:	f7ec ff93 	bl	8000220 <memchr>
 80132fa:	b138      	cbz	r0, 801330c <_svfiprintf_r+0x150>
 80132fc:	9b04      	ldr	r3, [sp, #16]
 80132fe:	eba0 000a 	sub.w	r0, r0, sl
 8013302:	2240      	movs	r2, #64	@ 0x40
 8013304:	4082      	lsls	r2, r0
 8013306:	4313      	orrs	r3, r2
 8013308:	3401      	adds	r4, #1
 801330a:	9304      	str	r3, [sp, #16]
 801330c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013310:	4824      	ldr	r0, [pc, #144]	@ (80133a4 <_svfiprintf_r+0x1e8>)
 8013312:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013316:	2206      	movs	r2, #6
 8013318:	f7ec ff82 	bl	8000220 <memchr>
 801331c:	2800      	cmp	r0, #0
 801331e:	d036      	beq.n	801338e <_svfiprintf_r+0x1d2>
 8013320:	4b21      	ldr	r3, [pc, #132]	@ (80133a8 <_svfiprintf_r+0x1ec>)
 8013322:	bb1b      	cbnz	r3, 801336c <_svfiprintf_r+0x1b0>
 8013324:	9b03      	ldr	r3, [sp, #12]
 8013326:	3307      	adds	r3, #7
 8013328:	f023 0307 	bic.w	r3, r3, #7
 801332c:	3308      	adds	r3, #8
 801332e:	9303      	str	r3, [sp, #12]
 8013330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013332:	4433      	add	r3, r6
 8013334:	9309      	str	r3, [sp, #36]	@ 0x24
 8013336:	e76a      	b.n	801320e <_svfiprintf_r+0x52>
 8013338:	fb0c 3202 	mla	r2, ip, r2, r3
 801333c:	460c      	mov	r4, r1
 801333e:	2001      	movs	r0, #1
 8013340:	e7a8      	b.n	8013294 <_svfiprintf_r+0xd8>
 8013342:	2300      	movs	r3, #0
 8013344:	3401      	adds	r4, #1
 8013346:	9305      	str	r3, [sp, #20]
 8013348:	4619      	mov	r1, r3
 801334a:	f04f 0c0a 	mov.w	ip, #10
 801334e:	4620      	mov	r0, r4
 8013350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013354:	3a30      	subs	r2, #48	@ 0x30
 8013356:	2a09      	cmp	r2, #9
 8013358:	d903      	bls.n	8013362 <_svfiprintf_r+0x1a6>
 801335a:	2b00      	cmp	r3, #0
 801335c:	d0c6      	beq.n	80132ec <_svfiprintf_r+0x130>
 801335e:	9105      	str	r1, [sp, #20]
 8013360:	e7c4      	b.n	80132ec <_svfiprintf_r+0x130>
 8013362:	fb0c 2101 	mla	r1, ip, r1, r2
 8013366:	4604      	mov	r4, r0
 8013368:	2301      	movs	r3, #1
 801336a:	e7f0      	b.n	801334e <_svfiprintf_r+0x192>
 801336c:	ab03      	add	r3, sp, #12
 801336e:	9300      	str	r3, [sp, #0]
 8013370:	462a      	mov	r2, r5
 8013372:	4b0e      	ldr	r3, [pc, #56]	@ (80133ac <_svfiprintf_r+0x1f0>)
 8013374:	a904      	add	r1, sp, #16
 8013376:	4638      	mov	r0, r7
 8013378:	f7fc fcc8 	bl	800fd0c <_printf_float>
 801337c:	1c42      	adds	r2, r0, #1
 801337e:	4606      	mov	r6, r0
 8013380:	d1d6      	bne.n	8013330 <_svfiprintf_r+0x174>
 8013382:	89ab      	ldrh	r3, [r5, #12]
 8013384:	065b      	lsls	r3, r3, #25
 8013386:	f53f af2d 	bmi.w	80131e4 <_svfiprintf_r+0x28>
 801338a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801338c:	e72c      	b.n	80131e8 <_svfiprintf_r+0x2c>
 801338e:	ab03      	add	r3, sp, #12
 8013390:	9300      	str	r3, [sp, #0]
 8013392:	462a      	mov	r2, r5
 8013394:	4b05      	ldr	r3, [pc, #20]	@ (80133ac <_svfiprintf_r+0x1f0>)
 8013396:	a904      	add	r1, sp, #16
 8013398:	4638      	mov	r0, r7
 801339a:	f7fc ff4f 	bl	801023c <_printf_i>
 801339e:	e7ed      	b.n	801337c <_svfiprintf_r+0x1c0>
 80133a0:	08014751 	.word	0x08014751
 80133a4:	0801475b 	.word	0x0801475b
 80133a8:	0800fd0d 	.word	0x0800fd0d
 80133ac:	08013105 	.word	0x08013105
 80133b0:	08014757 	.word	0x08014757

080133b4 <__sflush_r>:
 80133b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80133b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133bc:	0716      	lsls	r6, r2, #28
 80133be:	4605      	mov	r5, r0
 80133c0:	460c      	mov	r4, r1
 80133c2:	d454      	bmi.n	801346e <__sflush_r+0xba>
 80133c4:	684b      	ldr	r3, [r1, #4]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	dc02      	bgt.n	80133d0 <__sflush_r+0x1c>
 80133ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	dd48      	ble.n	8013462 <__sflush_r+0xae>
 80133d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80133d2:	2e00      	cmp	r6, #0
 80133d4:	d045      	beq.n	8013462 <__sflush_r+0xae>
 80133d6:	2300      	movs	r3, #0
 80133d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80133dc:	682f      	ldr	r7, [r5, #0]
 80133de:	6a21      	ldr	r1, [r4, #32]
 80133e0:	602b      	str	r3, [r5, #0]
 80133e2:	d030      	beq.n	8013446 <__sflush_r+0x92>
 80133e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80133e6:	89a3      	ldrh	r3, [r4, #12]
 80133e8:	0759      	lsls	r1, r3, #29
 80133ea:	d505      	bpl.n	80133f8 <__sflush_r+0x44>
 80133ec:	6863      	ldr	r3, [r4, #4]
 80133ee:	1ad2      	subs	r2, r2, r3
 80133f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80133f2:	b10b      	cbz	r3, 80133f8 <__sflush_r+0x44>
 80133f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80133f6:	1ad2      	subs	r2, r2, r3
 80133f8:	2300      	movs	r3, #0
 80133fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80133fc:	6a21      	ldr	r1, [r4, #32]
 80133fe:	4628      	mov	r0, r5
 8013400:	47b0      	blx	r6
 8013402:	1c43      	adds	r3, r0, #1
 8013404:	89a3      	ldrh	r3, [r4, #12]
 8013406:	d106      	bne.n	8013416 <__sflush_r+0x62>
 8013408:	6829      	ldr	r1, [r5, #0]
 801340a:	291d      	cmp	r1, #29
 801340c:	d82b      	bhi.n	8013466 <__sflush_r+0xb2>
 801340e:	4a2a      	ldr	r2, [pc, #168]	@ (80134b8 <__sflush_r+0x104>)
 8013410:	410a      	asrs	r2, r1
 8013412:	07d6      	lsls	r6, r2, #31
 8013414:	d427      	bmi.n	8013466 <__sflush_r+0xb2>
 8013416:	2200      	movs	r2, #0
 8013418:	6062      	str	r2, [r4, #4]
 801341a:	04d9      	lsls	r1, r3, #19
 801341c:	6922      	ldr	r2, [r4, #16]
 801341e:	6022      	str	r2, [r4, #0]
 8013420:	d504      	bpl.n	801342c <__sflush_r+0x78>
 8013422:	1c42      	adds	r2, r0, #1
 8013424:	d101      	bne.n	801342a <__sflush_r+0x76>
 8013426:	682b      	ldr	r3, [r5, #0]
 8013428:	b903      	cbnz	r3, 801342c <__sflush_r+0x78>
 801342a:	6560      	str	r0, [r4, #84]	@ 0x54
 801342c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801342e:	602f      	str	r7, [r5, #0]
 8013430:	b1b9      	cbz	r1, 8013462 <__sflush_r+0xae>
 8013432:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013436:	4299      	cmp	r1, r3
 8013438:	d002      	beq.n	8013440 <__sflush_r+0x8c>
 801343a:	4628      	mov	r0, r5
 801343c:	f7fe fa2c 	bl	8011898 <_free_r>
 8013440:	2300      	movs	r3, #0
 8013442:	6363      	str	r3, [r4, #52]	@ 0x34
 8013444:	e00d      	b.n	8013462 <__sflush_r+0xae>
 8013446:	2301      	movs	r3, #1
 8013448:	4628      	mov	r0, r5
 801344a:	47b0      	blx	r6
 801344c:	4602      	mov	r2, r0
 801344e:	1c50      	adds	r0, r2, #1
 8013450:	d1c9      	bne.n	80133e6 <__sflush_r+0x32>
 8013452:	682b      	ldr	r3, [r5, #0]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d0c6      	beq.n	80133e6 <__sflush_r+0x32>
 8013458:	2b1d      	cmp	r3, #29
 801345a:	d001      	beq.n	8013460 <__sflush_r+0xac>
 801345c:	2b16      	cmp	r3, #22
 801345e:	d11e      	bne.n	801349e <__sflush_r+0xea>
 8013460:	602f      	str	r7, [r5, #0]
 8013462:	2000      	movs	r0, #0
 8013464:	e022      	b.n	80134ac <__sflush_r+0xf8>
 8013466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801346a:	b21b      	sxth	r3, r3
 801346c:	e01b      	b.n	80134a6 <__sflush_r+0xf2>
 801346e:	690f      	ldr	r7, [r1, #16]
 8013470:	2f00      	cmp	r7, #0
 8013472:	d0f6      	beq.n	8013462 <__sflush_r+0xae>
 8013474:	0793      	lsls	r3, r2, #30
 8013476:	680e      	ldr	r6, [r1, #0]
 8013478:	bf08      	it	eq
 801347a:	694b      	ldreq	r3, [r1, #20]
 801347c:	600f      	str	r7, [r1, #0]
 801347e:	bf18      	it	ne
 8013480:	2300      	movne	r3, #0
 8013482:	eba6 0807 	sub.w	r8, r6, r7
 8013486:	608b      	str	r3, [r1, #8]
 8013488:	f1b8 0f00 	cmp.w	r8, #0
 801348c:	dde9      	ble.n	8013462 <__sflush_r+0xae>
 801348e:	6a21      	ldr	r1, [r4, #32]
 8013490:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013492:	4643      	mov	r3, r8
 8013494:	463a      	mov	r2, r7
 8013496:	4628      	mov	r0, r5
 8013498:	47b0      	blx	r6
 801349a:	2800      	cmp	r0, #0
 801349c:	dc08      	bgt.n	80134b0 <__sflush_r+0xfc>
 801349e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80134a6:	81a3      	strh	r3, [r4, #12]
 80134a8:	f04f 30ff 	mov.w	r0, #4294967295
 80134ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134b0:	4407      	add	r7, r0
 80134b2:	eba8 0800 	sub.w	r8, r8, r0
 80134b6:	e7e7      	b.n	8013488 <__sflush_r+0xd4>
 80134b8:	dfbffffe 	.word	0xdfbffffe

080134bc <_fflush_r>:
 80134bc:	b538      	push	{r3, r4, r5, lr}
 80134be:	690b      	ldr	r3, [r1, #16]
 80134c0:	4605      	mov	r5, r0
 80134c2:	460c      	mov	r4, r1
 80134c4:	b913      	cbnz	r3, 80134cc <_fflush_r+0x10>
 80134c6:	2500      	movs	r5, #0
 80134c8:	4628      	mov	r0, r5
 80134ca:	bd38      	pop	{r3, r4, r5, pc}
 80134cc:	b118      	cbz	r0, 80134d6 <_fflush_r+0x1a>
 80134ce:	6a03      	ldr	r3, [r0, #32]
 80134d0:	b90b      	cbnz	r3, 80134d6 <_fflush_r+0x1a>
 80134d2:	f7fd fa73 	bl	80109bc <__sinit>
 80134d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d0f3      	beq.n	80134c6 <_fflush_r+0xa>
 80134de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80134e0:	07d0      	lsls	r0, r2, #31
 80134e2:	d404      	bmi.n	80134ee <_fflush_r+0x32>
 80134e4:	0599      	lsls	r1, r3, #22
 80134e6:	d402      	bmi.n	80134ee <_fflush_r+0x32>
 80134e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80134ea:	f7fd fb7e 	bl	8010bea <__retarget_lock_acquire_recursive>
 80134ee:	4628      	mov	r0, r5
 80134f0:	4621      	mov	r1, r4
 80134f2:	f7ff ff5f 	bl	80133b4 <__sflush_r>
 80134f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80134f8:	07da      	lsls	r2, r3, #31
 80134fa:	4605      	mov	r5, r0
 80134fc:	d4e4      	bmi.n	80134c8 <_fflush_r+0xc>
 80134fe:	89a3      	ldrh	r3, [r4, #12]
 8013500:	059b      	lsls	r3, r3, #22
 8013502:	d4e1      	bmi.n	80134c8 <_fflush_r+0xc>
 8013504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013506:	f7fd fb71 	bl	8010bec <__retarget_lock_release_recursive>
 801350a:	e7dd      	b.n	80134c8 <_fflush_r+0xc>

0801350c <memmove>:
 801350c:	4288      	cmp	r0, r1
 801350e:	b510      	push	{r4, lr}
 8013510:	eb01 0402 	add.w	r4, r1, r2
 8013514:	d902      	bls.n	801351c <memmove+0x10>
 8013516:	4284      	cmp	r4, r0
 8013518:	4623      	mov	r3, r4
 801351a:	d807      	bhi.n	801352c <memmove+0x20>
 801351c:	1e43      	subs	r3, r0, #1
 801351e:	42a1      	cmp	r1, r4
 8013520:	d008      	beq.n	8013534 <memmove+0x28>
 8013522:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013526:	f803 2f01 	strb.w	r2, [r3, #1]!
 801352a:	e7f8      	b.n	801351e <memmove+0x12>
 801352c:	4402      	add	r2, r0
 801352e:	4601      	mov	r1, r0
 8013530:	428a      	cmp	r2, r1
 8013532:	d100      	bne.n	8013536 <memmove+0x2a>
 8013534:	bd10      	pop	{r4, pc}
 8013536:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801353a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801353e:	e7f7      	b.n	8013530 <memmove+0x24>

08013540 <strncmp>:
 8013540:	b510      	push	{r4, lr}
 8013542:	b16a      	cbz	r2, 8013560 <strncmp+0x20>
 8013544:	3901      	subs	r1, #1
 8013546:	1884      	adds	r4, r0, r2
 8013548:	f810 2b01 	ldrb.w	r2, [r0], #1
 801354c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013550:	429a      	cmp	r2, r3
 8013552:	d103      	bne.n	801355c <strncmp+0x1c>
 8013554:	42a0      	cmp	r0, r4
 8013556:	d001      	beq.n	801355c <strncmp+0x1c>
 8013558:	2a00      	cmp	r2, #0
 801355a:	d1f5      	bne.n	8013548 <strncmp+0x8>
 801355c:	1ad0      	subs	r0, r2, r3
 801355e:	bd10      	pop	{r4, pc}
 8013560:	4610      	mov	r0, r2
 8013562:	e7fc      	b.n	801355e <strncmp+0x1e>

08013564 <_sbrk_r>:
 8013564:	b538      	push	{r3, r4, r5, lr}
 8013566:	4d06      	ldr	r5, [pc, #24]	@ (8013580 <_sbrk_r+0x1c>)
 8013568:	2300      	movs	r3, #0
 801356a:	4604      	mov	r4, r0
 801356c:	4608      	mov	r0, r1
 801356e:	602b      	str	r3, [r5, #0]
 8013570:	f7ef ff42 	bl	80033f8 <_sbrk>
 8013574:	1c43      	adds	r3, r0, #1
 8013576:	d102      	bne.n	801357e <_sbrk_r+0x1a>
 8013578:	682b      	ldr	r3, [r5, #0]
 801357a:	b103      	cbz	r3, 801357e <_sbrk_r+0x1a>
 801357c:	6023      	str	r3, [r4, #0]
 801357e:	bd38      	pop	{r3, r4, r5, pc}
 8013580:	2000299c 	.word	0x2000299c

08013584 <memcpy>:
 8013584:	440a      	add	r2, r1
 8013586:	4291      	cmp	r1, r2
 8013588:	f100 33ff 	add.w	r3, r0, #4294967295
 801358c:	d100      	bne.n	8013590 <memcpy+0xc>
 801358e:	4770      	bx	lr
 8013590:	b510      	push	{r4, lr}
 8013592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013596:	f803 4f01 	strb.w	r4, [r3, #1]!
 801359a:	4291      	cmp	r1, r2
 801359c:	d1f9      	bne.n	8013592 <memcpy+0xe>
 801359e:	bd10      	pop	{r4, pc}

080135a0 <nan>:
 80135a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80135a8 <nan+0x8>
 80135a4:	4770      	bx	lr
 80135a6:	bf00      	nop
 80135a8:	00000000 	.word	0x00000000
 80135ac:	7ff80000 	.word	0x7ff80000

080135b0 <__assert_func>:
 80135b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80135b2:	4614      	mov	r4, r2
 80135b4:	461a      	mov	r2, r3
 80135b6:	4b09      	ldr	r3, [pc, #36]	@ (80135dc <__assert_func+0x2c>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	4605      	mov	r5, r0
 80135bc:	68d8      	ldr	r0, [r3, #12]
 80135be:	b954      	cbnz	r4, 80135d6 <__assert_func+0x26>
 80135c0:	4b07      	ldr	r3, [pc, #28]	@ (80135e0 <__assert_func+0x30>)
 80135c2:	461c      	mov	r4, r3
 80135c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80135c8:	9100      	str	r1, [sp, #0]
 80135ca:	462b      	mov	r3, r5
 80135cc:	4905      	ldr	r1, [pc, #20]	@ (80135e4 <__assert_func+0x34>)
 80135ce:	f000 fba7 	bl	8013d20 <fiprintf>
 80135d2:	f000 fbb7 	bl	8013d44 <abort>
 80135d6:	4b04      	ldr	r3, [pc, #16]	@ (80135e8 <__assert_func+0x38>)
 80135d8:	e7f4      	b.n	80135c4 <__assert_func+0x14>
 80135da:	bf00      	nop
 80135dc:	20000194 	.word	0x20000194
 80135e0:	080147a5 	.word	0x080147a5
 80135e4:	08014777 	.word	0x08014777
 80135e8:	0801476a 	.word	0x0801476a

080135ec <_calloc_r>:
 80135ec:	b570      	push	{r4, r5, r6, lr}
 80135ee:	fba1 5402 	umull	r5, r4, r1, r2
 80135f2:	b93c      	cbnz	r4, 8013604 <_calloc_r+0x18>
 80135f4:	4629      	mov	r1, r5
 80135f6:	f7fe f9c3 	bl	8011980 <_malloc_r>
 80135fa:	4606      	mov	r6, r0
 80135fc:	b928      	cbnz	r0, 801360a <_calloc_r+0x1e>
 80135fe:	2600      	movs	r6, #0
 8013600:	4630      	mov	r0, r6
 8013602:	bd70      	pop	{r4, r5, r6, pc}
 8013604:	220c      	movs	r2, #12
 8013606:	6002      	str	r2, [r0, #0]
 8013608:	e7f9      	b.n	80135fe <_calloc_r+0x12>
 801360a:	462a      	mov	r2, r5
 801360c:	4621      	mov	r1, r4
 801360e:	f7fd fa6e 	bl	8010aee <memset>
 8013612:	e7f5      	b.n	8013600 <_calloc_r+0x14>

08013614 <rshift>:
 8013614:	6903      	ldr	r3, [r0, #16]
 8013616:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801361a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801361e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013622:	f100 0414 	add.w	r4, r0, #20
 8013626:	dd45      	ble.n	80136b4 <rshift+0xa0>
 8013628:	f011 011f 	ands.w	r1, r1, #31
 801362c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013630:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013634:	d10c      	bne.n	8013650 <rshift+0x3c>
 8013636:	f100 0710 	add.w	r7, r0, #16
 801363a:	4629      	mov	r1, r5
 801363c:	42b1      	cmp	r1, r6
 801363e:	d334      	bcc.n	80136aa <rshift+0x96>
 8013640:	1a9b      	subs	r3, r3, r2
 8013642:	009b      	lsls	r3, r3, #2
 8013644:	1eea      	subs	r2, r5, #3
 8013646:	4296      	cmp	r6, r2
 8013648:	bf38      	it	cc
 801364a:	2300      	movcc	r3, #0
 801364c:	4423      	add	r3, r4
 801364e:	e015      	b.n	801367c <rshift+0x68>
 8013650:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013654:	f1c1 0820 	rsb	r8, r1, #32
 8013658:	40cf      	lsrs	r7, r1
 801365a:	f105 0e04 	add.w	lr, r5, #4
 801365e:	46a1      	mov	r9, r4
 8013660:	4576      	cmp	r6, lr
 8013662:	46f4      	mov	ip, lr
 8013664:	d815      	bhi.n	8013692 <rshift+0x7e>
 8013666:	1a9a      	subs	r2, r3, r2
 8013668:	0092      	lsls	r2, r2, #2
 801366a:	3a04      	subs	r2, #4
 801366c:	3501      	adds	r5, #1
 801366e:	42ae      	cmp	r6, r5
 8013670:	bf38      	it	cc
 8013672:	2200      	movcc	r2, #0
 8013674:	18a3      	adds	r3, r4, r2
 8013676:	50a7      	str	r7, [r4, r2]
 8013678:	b107      	cbz	r7, 801367c <rshift+0x68>
 801367a:	3304      	adds	r3, #4
 801367c:	1b1a      	subs	r2, r3, r4
 801367e:	42a3      	cmp	r3, r4
 8013680:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013684:	bf08      	it	eq
 8013686:	2300      	moveq	r3, #0
 8013688:	6102      	str	r2, [r0, #16]
 801368a:	bf08      	it	eq
 801368c:	6143      	streq	r3, [r0, #20]
 801368e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013692:	f8dc c000 	ldr.w	ip, [ip]
 8013696:	fa0c fc08 	lsl.w	ip, ip, r8
 801369a:	ea4c 0707 	orr.w	r7, ip, r7
 801369e:	f849 7b04 	str.w	r7, [r9], #4
 80136a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80136a6:	40cf      	lsrs	r7, r1
 80136a8:	e7da      	b.n	8013660 <rshift+0x4c>
 80136aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80136ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80136b2:	e7c3      	b.n	801363c <rshift+0x28>
 80136b4:	4623      	mov	r3, r4
 80136b6:	e7e1      	b.n	801367c <rshift+0x68>

080136b8 <__hexdig_fun>:
 80136b8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80136bc:	2b09      	cmp	r3, #9
 80136be:	d802      	bhi.n	80136c6 <__hexdig_fun+0xe>
 80136c0:	3820      	subs	r0, #32
 80136c2:	b2c0      	uxtb	r0, r0
 80136c4:	4770      	bx	lr
 80136c6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80136ca:	2b05      	cmp	r3, #5
 80136cc:	d801      	bhi.n	80136d2 <__hexdig_fun+0x1a>
 80136ce:	3847      	subs	r0, #71	@ 0x47
 80136d0:	e7f7      	b.n	80136c2 <__hexdig_fun+0xa>
 80136d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80136d6:	2b05      	cmp	r3, #5
 80136d8:	d801      	bhi.n	80136de <__hexdig_fun+0x26>
 80136da:	3827      	subs	r0, #39	@ 0x27
 80136dc:	e7f1      	b.n	80136c2 <__hexdig_fun+0xa>
 80136de:	2000      	movs	r0, #0
 80136e0:	4770      	bx	lr
	...

080136e4 <__gethex>:
 80136e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136e8:	b085      	sub	sp, #20
 80136ea:	468a      	mov	sl, r1
 80136ec:	9302      	str	r3, [sp, #8]
 80136ee:	680b      	ldr	r3, [r1, #0]
 80136f0:	9001      	str	r0, [sp, #4]
 80136f2:	4690      	mov	r8, r2
 80136f4:	1c9c      	adds	r4, r3, #2
 80136f6:	46a1      	mov	r9, r4
 80136f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80136fc:	2830      	cmp	r0, #48	@ 0x30
 80136fe:	d0fa      	beq.n	80136f6 <__gethex+0x12>
 8013700:	eba9 0303 	sub.w	r3, r9, r3
 8013704:	f1a3 0b02 	sub.w	fp, r3, #2
 8013708:	f7ff ffd6 	bl	80136b8 <__hexdig_fun>
 801370c:	4605      	mov	r5, r0
 801370e:	2800      	cmp	r0, #0
 8013710:	d168      	bne.n	80137e4 <__gethex+0x100>
 8013712:	49a0      	ldr	r1, [pc, #640]	@ (8013994 <__gethex+0x2b0>)
 8013714:	2201      	movs	r2, #1
 8013716:	4648      	mov	r0, r9
 8013718:	f7ff ff12 	bl	8013540 <strncmp>
 801371c:	4607      	mov	r7, r0
 801371e:	2800      	cmp	r0, #0
 8013720:	d167      	bne.n	80137f2 <__gethex+0x10e>
 8013722:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013726:	4626      	mov	r6, r4
 8013728:	f7ff ffc6 	bl	80136b8 <__hexdig_fun>
 801372c:	2800      	cmp	r0, #0
 801372e:	d062      	beq.n	80137f6 <__gethex+0x112>
 8013730:	4623      	mov	r3, r4
 8013732:	7818      	ldrb	r0, [r3, #0]
 8013734:	2830      	cmp	r0, #48	@ 0x30
 8013736:	4699      	mov	r9, r3
 8013738:	f103 0301 	add.w	r3, r3, #1
 801373c:	d0f9      	beq.n	8013732 <__gethex+0x4e>
 801373e:	f7ff ffbb 	bl	80136b8 <__hexdig_fun>
 8013742:	fab0 f580 	clz	r5, r0
 8013746:	096d      	lsrs	r5, r5, #5
 8013748:	f04f 0b01 	mov.w	fp, #1
 801374c:	464a      	mov	r2, r9
 801374e:	4616      	mov	r6, r2
 8013750:	3201      	adds	r2, #1
 8013752:	7830      	ldrb	r0, [r6, #0]
 8013754:	f7ff ffb0 	bl	80136b8 <__hexdig_fun>
 8013758:	2800      	cmp	r0, #0
 801375a:	d1f8      	bne.n	801374e <__gethex+0x6a>
 801375c:	498d      	ldr	r1, [pc, #564]	@ (8013994 <__gethex+0x2b0>)
 801375e:	2201      	movs	r2, #1
 8013760:	4630      	mov	r0, r6
 8013762:	f7ff feed 	bl	8013540 <strncmp>
 8013766:	2800      	cmp	r0, #0
 8013768:	d13f      	bne.n	80137ea <__gethex+0x106>
 801376a:	b944      	cbnz	r4, 801377e <__gethex+0x9a>
 801376c:	1c74      	adds	r4, r6, #1
 801376e:	4622      	mov	r2, r4
 8013770:	4616      	mov	r6, r2
 8013772:	3201      	adds	r2, #1
 8013774:	7830      	ldrb	r0, [r6, #0]
 8013776:	f7ff ff9f 	bl	80136b8 <__hexdig_fun>
 801377a:	2800      	cmp	r0, #0
 801377c:	d1f8      	bne.n	8013770 <__gethex+0x8c>
 801377e:	1ba4      	subs	r4, r4, r6
 8013780:	00a7      	lsls	r7, r4, #2
 8013782:	7833      	ldrb	r3, [r6, #0]
 8013784:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8013788:	2b50      	cmp	r3, #80	@ 0x50
 801378a:	d13e      	bne.n	801380a <__gethex+0x126>
 801378c:	7873      	ldrb	r3, [r6, #1]
 801378e:	2b2b      	cmp	r3, #43	@ 0x2b
 8013790:	d033      	beq.n	80137fa <__gethex+0x116>
 8013792:	2b2d      	cmp	r3, #45	@ 0x2d
 8013794:	d034      	beq.n	8013800 <__gethex+0x11c>
 8013796:	1c71      	adds	r1, r6, #1
 8013798:	2400      	movs	r4, #0
 801379a:	7808      	ldrb	r0, [r1, #0]
 801379c:	f7ff ff8c 	bl	80136b8 <__hexdig_fun>
 80137a0:	1e43      	subs	r3, r0, #1
 80137a2:	b2db      	uxtb	r3, r3
 80137a4:	2b18      	cmp	r3, #24
 80137a6:	d830      	bhi.n	801380a <__gethex+0x126>
 80137a8:	f1a0 0210 	sub.w	r2, r0, #16
 80137ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80137b0:	f7ff ff82 	bl	80136b8 <__hexdig_fun>
 80137b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80137b8:	fa5f fc8c 	uxtb.w	ip, ip
 80137bc:	f1bc 0f18 	cmp.w	ip, #24
 80137c0:	f04f 030a 	mov.w	r3, #10
 80137c4:	d91e      	bls.n	8013804 <__gethex+0x120>
 80137c6:	b104      	cbz	r4, 80137ca <__gethex+0xe6>
 80137c8:	4252      	negs	r2, r2
 80137ca:	4417      	add	r7, r2
 80137cc:	f8ca 1000 	str.w	r1, [sl]
 80137d0:	b1ed      	cbz	r5, 801380e <__gethex+0x12a>
 80137d2:	f1bb 0f00 	cmp.w	fp, #0
 80137d6:	bf0c      	ite	eq
 80137d8:	2506      	moveq	r5, #6
 80137da:	2500      	movne	r5, #0
 80137dc:	4628      	mov	r0, r5
 80137de:	b005      	add	sp, #20
 80137e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137e4:	2500      	movs	r5, #0
 80137e6:	462c      	mov	r4, r5
 80137e8:	e7b0      	b.n	801374c <__gethex+0x68>
 80137ea:	2c00      	cmp	r4, #0
 80137ec:	d1c7      	bne.n	801377e <__gethex+0x9a>
 80137ee:	4627      	mov	r7, r4
 80137f0:	e7c7      	b.n	8013782 <__gethex+0x9e>
 80137f2:	464e      	mov	r6, r9
 80137f4:	462f      	mov	r7, r5
 80137f6:	2501      	movs	r5, #1
 80137f8:	e7c3      	b.n	8013782 <__gethex+0x9e>
 80137fa:	2400      	movs	r4, #0
 80137fc:	1cb1      	adds	r1, r6, #2
 80137fe:	e7cc      	b.n	801379a <__gethex+0xb6>
 8013800:	2401      	movs	r4, #1
 8013802:	e7fb      	b.n	80137fc <__gethex+0x118>
 8013804:	fb03 0002 	mla	r0, r3, r2, r0
 8013808:	e7ce      	b.n	80137a8 <__gethex+0xc4>
 801380a:	4631      	mov	r1, r6
 801380c:	e7de      	b.n	80137cc <__gethex+0xe8>
 801380e:	eba6 0309 	sub.w	r3, r6, r9
 8013812:	3b01      	subs	r3, #1
 8013814:	4629      	mov	r1, r5
 8013816:	2b07      	cmp	r3, #7
 8013818:	dc0a      	bgt.n	8013830 <__gethex+0x14c>
 801381a:	9801      	ldr	r0, [sp, #4]
 801381c:	f7fe f93c 	bl	8011a98 <_Balloc>
 8013820:	4604      	mov	r4, r0
 8013822:	b940      	cbnz	r0, 8013836 <__gethex+0x152>
 8013824:	4b5c      	ldr	r3, [pc, #368]	@ (8013998 <__gethex+0x2b4>)
 8013826:	4602      	mov	r2, r0
 8013828:	21e4      	movs	r1, #228	@ 0xe4
 801382a:	485c      	ldr	r0, [pc, #368]	@ (801399c <__gethex+0x2b8>)
 801382c:	f7ff fec0 	bl	80135b0 <__assert_func>
 8013830:	3101      	adds	r1, #1
 8013832:	105b      	asrs	r3, r3, #1
 8013834:	e7ef      	b.n	8013816 <__gethex+0x132>
 8013836:	f100 0a14 	add.w	sl, r0, #20
 801383a:	2300      	movs	r3, #0
 801383c:	4655      	mov	r5, sl
 801383e:	469b      	mov	fp, r3
 8013840:	45b1      	cmp	r9, r6
 8013842:	d337      	bcc.n	80138b4 <__gethex+0x1d0>
 8013844:	f845 bb04 	str.w	fp, [r5], #4
 8013848:	eba5 050a 	sub.w	r5, r5, sl
 801384c:	10ad      	asrs	r5, r5, #2
 801384e:	6125      	str	r5, [r4, #16]
 8013850:	4658      	mov	r0, fp
 8013852:	f7fe fa13 	bl	8011c7c <__hi0bits>
 8013856:	016d      	lsls	r5, r5, #5
 8013858:	f8d8 6000 	ldr.w	r6, [r8]
 801385c:	1a2d      	subs	r5, r5, r0
 801385e:	42b5      	cmp	r5, r6
 8013860:	dd54      	ble.n	801390c <__gethex+0x228>
 8013862:	1bad      	subs	r5, r5, r6
 8013864:	4629      	mov	r1, r5
 8013866:	4620      	mov	r0, r4
 8013868:	f7fe fda7 	bl	80123ba <__any_on>
 801386c:	4681      	mov	r9, r0
 801386e:	b178      	cbz	r0, 8013890 <__gethex+0x1ac>
 8013870:	1e6b      	subs	r3, r5, #1
 8013872:	1159      	asrs	r1, r3, #5
 8013874:	f003 021f 	and.w	r2, r3, #31
 8013878:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801387c:	f04f 0901 	mov.w	r9, #1
 8013880:	fa09 f202 	lsl.w	r2, r9, r2
 8013884:	420a      	tst	r2, r1
 8013886:	d003      	beq.n	8013890 <__gethex+0x1ac>
 8013888:	454b      	cmp	r3, r9
 801388a:	dc36      	bgt.n	80138fa <__gethex+0x216>
 801388c:	f04f 0902 	mov.w	r9, #2
 8013890:	4629      	mov	r1, r5
 8013892:	4620      	mov	r0, r4
 8013894:	f7ff febe 	bl	8013614 <rshift>
 8013898:	442f      	add	r7, r5
 801389a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801389e:	42bb      	cmp	r3, r7
 80138a0:	da42      	bge.n	8013928 <__gethex+0x244>
 80138a2:	9801      	ldr	r0, [sp, #4]
 80138a4:	4621      	mov	r1, r4
 80138a6:	f7fe f937 	bl	8011b18 <_Bfree>
 80138aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80138ac:	2300      	movs	r3, #0
 80138ae:	6013      	str	r3, [r2, #0]
 80138b0:	25a3      	movs	r5, #163	@ 0xa3
 80138b2:	e793      	b.n	80137dc <__gethex+0xf8>
 80138b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80138b8:	2a2e      	cmp	r2, #46	@ 0x2e
 80138ba:	d012      	beq.n	80138e2 <__gethex+0x1fe>
 80138bc:	2b20      	cmp	r3, #32
 80138be:	d104      	bne.n	80138ca <__gethex+0x1e6>
 80138c0:	f845 bb04 	str.w	fp, [r5], #4
 80138c4:	f04f 0b00 	mov.w	fp, #0
 80138c8:	465b      	mov	r3, fp
 80138ca:	7830      	ldrb	r0, [r6, #0]
 80138cc:	9303      	str	r3, [sp, #12]
 80138ce:	f7ff fef3 	bl	80136b8 <__hexdig_fun>
 80138d2:	9b03      	ldr	r3, [sp, #12]
 80138d4:	f000 000f 	and.w	r0, r0, #15
 80138d8:	4098      	lsls	r0, r3
 80138da:	ea4b 0b00 	orr.w	fp, fp, r0
 80138de:	3304      	adds	r3, #4
 80138e0:	e7ae      	b.n	8013840 <__gethex+0x15c>
 80138e2:	45b1      	cmp	r9, r6
 80138e4:	d8ea      	bhi.n	80138bc <__gethex+0x1d8>
 80138e6:	492b      	ldr	r1, [pc, #172]	@ (8013994 <__gethex+0x2b0>)
 80138e8:	9303      	str	r3, [sp, #12]
 80138ea:	2201      	movs	r2, #1
 80138ec:	4630      	mov	r0, r6
 80138ee:	f7ff fe27 	bl	8013540 <strncmp>
 80138f2:	9b03      	ldr	r3, [sp, #12]
 80138f4:	2800      	cmp	r0, #0
 80138f6:	d1e1      	bne.n	80138bc <__gethex+0x1d8>
 80138f8:	e7a2      	b.n	8013840 <__gethex+0x15c>
 80138fa:	1ea9      	subs	r1, r5, #2
 80138fc:	4620      	mov	r0, r4
 80138fe:	f7fe fd5c 	bl	80123ba <__any_on>
 8013902:	2800      	cmp	r0, #0
 8013904:	d0c2      	beq.n	801388c <__gethex+0x1a8>
 8013906:	f04f 0903 	mov.w	r9, #3
 801390a:	e7c1      	b.n	8013890 <__gethex+0x1ac>
 801390c:	da09      	bge.n	8013922 <__gethex+0x23e>
 801390e:	1b75      	subs	r5, r6, r5
 8013910:	4621      	mov	r1, r4
 8013912:	9801      	ldr	r0, [sp, #4]
 8013914:	462a      	mov	r2, r5
 8013916:	f7fe fb17 	bl	8011f48 <__lshift>
 801391a:	1b7f      	subs	r7, r7, r5
 801391c:	4604      	mov	r4, r0
 801391e:	f100 0a14 	add.w	sl, r0, #20
 8013922:	f04f 0900 	mov.w	r9, #0
 8013926:	e7b8      	b.n	801389a <__gethex+0x1b6>
 8013928:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801392c:	42bd      	cmp	r5, r7
 801392e:	dd6f      	ble.n	8013a10 <__gethex+0x32c>
 8013930:	1bed      	subs	r5, r5, r7
 8013932:	42ae      	cmp	r6, r5
 8013934:	dc34      	bgt.n	80139a0 <__gethex+0x2bc>
 8013936:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801393a:	2b02      	cmp	r3, #2
 801393c:	d022      	beq.n	8013984 <__gethex+0x2a0>
 801393e:	2b03      	cmp	r3, #3
 8013940:	d024      	beq.n	801398c <__gethex+0x2a8>
 8013942:	2b01      	cmp	r3, #1
 8013944:	d115      	bne.n	8013972 <__gethex+0x28e>
 8013946:	42ae      	cmp	r6, r5
 8013948:	d113      	bne.n	8013972 <__gethex+0x28e>
 801394a:	2e01      	cmp	r6, #1
 801394c:	d10b      	bne.n	8013966 <__gethex+0x282>
 801394e:	9a02      	ldr	r2, [sp, #8]
 8013950:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013954:	6013      	str	r3, [r2, #0]
 8013956:	2301      	movs	r3, #1
 8013958:	6123      	str	r3, [r4, #16]
 801395a:	f8ca 3000 	str.w	r3, [sl]
 801395e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013960:	2562      	movs	r5, #98	@ 0x62
 8013962:	601c      	str	r4, [r3, #0]
 8013964:	e73a      	b.n	80137dc <__gethex+0xf8>
 8013966:	1e71      	subs	r1, r6, #1
 8013968:	4620      	mov	r0, r4
 801396a:	f7fe fd26 	bl	80123ba <__any_on>
 801396e:	2800      	cmp	r0, #0
 8013970:	d1ed      	bne.n	801394e <__gethex+0x26a>
 8013972:	9801      	ldr	r0, [sp, #4]
 8013974:	4621      	mov	r1, r4
 8013976:	f7fe f8cf 	bl	8011b18 <_Bfree>
 801397a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801397c:	2300      	movs	r3, #0
 801397e:	6013      	str	r3, [r2, #0]
 8013980:	2550      	movs	r5, #80	@ 0x50
 8013982:	e72b      	b.n	80137dc <__gethex+0xf8>
 8013984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013986:	2b00      	cmp	r3, #0
 8013988:	d1f3      	bne.n	8013972 <__gethex+0x28e>
 801398a:	e7e0      	b.n	801394e <__gethex+0x26a>
 801398c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801398e:	2b00      	cmp	r3, #0
 8013990:	d1dd      	bne.n	801394e <__gethex+0x26a>
 8013992:	e7ee      	b.n	8013972 <__gethex+0x28e>
 8013994:	080145f8 	.word	0x080145f8
 8013998:	0801448d 	.word	0x0801448d
 801399c:	080147a6 	.word	0x080147a6
 80139a0:	1e6f      	subs	r7, r5, #1
 80139a2:	f1b9 0f00 	cmp.w	r9, #0
 80139a6:	d130      	bne.n	8013a0a <__gethex+0x326>
 80139a8:	b127      	cbz	r7, 80139b4 <__gethex+0x2d0>
 80139aa:	4639      	mov	r1, r7
 80139ac:	4620      	mov	r0, r4
 80139ae:	f7fe fd04 	bl	80123ba <__any_on>
 80139b2:	4681      	mov	r9, r0
 80139b4:	117a      	asrs	r2, r7, #5
 80139b6:	2301      	movs	r3, #1
 80139b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80139bc:	f007 071f 	and.w	r7, r7, #31
 80139c0:	40bb      	lsls	r3, r7
 80139c2:	4213      	tst	r3, r2
 80139c4:	4629      	mov	r1, r5
 80139c6:	4620      	mov	r0, r4
 80139c8:	bf18      	it	ne
 80139ca:	f049 0902 	orrne.w	r9, r9, #2
 80139ce:	f7ff fe21 	bl	8013614 <rshift>
 80139d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80139d6:	1b76      	subs	r6, r6, r5
 80139d8:	2502      	movs	r5, #2
 80139da:	f1b9 0f00 	cmp.w	r9, #0
 80139de:	d047      	beq.n	8013a70 <__gethex+0x38c>
 80139e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80139e4:	2b02      	cmp	r3, #2
 80139e6:	d015      	beq.n	8013a14 <__gethex+0x330>
 80139e8:	2b03      	cmp	r3, #3
 80139ea:	d017      	beq.n	8013a1c <__gethex+0x338>
 80139ec:	2b01      	cmp	r3, #1
 80139ee:	d109      	bne.n	8013a04 <__gethex+0x320>
 80139f0:	f019 0f02 	tst.w	r9, #2
 80139f4:	d006      	beq.n	8013a04 <__gethex+0x320>
 80139f6:	f8da 3000 	ldr.w	r3, [sl]
 80139fa:	ea49 0903 	orr.w	r9, r9, r3
 80139fe:	f019 0f01 	tst.w	r9, #1
 8013a02:	d10e      	bne.n	8013a22 <__gethex+0x33e>
 8013a04:	f045 0510 	orr.w	r5, r5, #16
 8013a08:	e032      	b.n	8013a70 <__gethex+0x38c>
 8013a0a:	f04f 0901 	mov.w	r9, #1
 8013a0e:	e7d1      	b.n	80139b4 <__gethex+0x2d0>
 8013a10:	2501      	movs	r5, #1
 8013a12:	e7e2      	b.n	80139da <__gethex+0x2f6>
 8013a14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a16:	f1c3 0301 	rsb	r3, r3, #1
 8013a1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013a1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d0f0      	beq.n	8013a04 <__gethex+0x320>
 8013a22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013a26:	f104 0314 	add.w	r3, r4, #20
 8013a2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013a2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013a32:	f04f 0c00 	mov.w	ip, #0
 8013a36:	4618      	mov	r0, r3
 8013a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013a40:	d01b      	beq.n	8013a7a <__gethex+0x396>
 8013a42:	3201      	adds	r2, #1
 8013a44:	6002      	str	r2, [r0, #0]
 8013a46:	2d02      	cmp	r5, #2
 8013a48:	f104 0314 	add.w	r3, r4, #20
 8013a4c:	d13c      	bne.n	8013ac8 <__gethex+0x3e4>
 8013a4e:	f8d8 2000 	ldr.w	r2, [r8]
 8013a52:	3a01      	subs	r2, #1
 8013a54:	42b2      	cmp	r2, r6
 8013a56:	d109      	bne.n	8013a6c <__gethex+0x388>
 8013a58:	1171      	asrs	r1, r6, #5
 8013a5a:	2201      	movs	r2, #1
 8013a5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013a60:	f006 061f 	and.w	r6, r6, #31
 8013a64:	fa02 f606 	lsl.w	r6, r2, r6
 8013a68:	421e      	tst	r6, r3
 8013a6a:	d13a      	bne.n	8013ae2 <__gethex+0x3fe>
 8013a6c:	f045 0520 	orr.w	r5, r5, #32
 8013a70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a72:	601c      	str	r4, [r3, #0]
 8013a74:	9b02      	ldr	r3, [sp, #8]
 8013a76:	601f      	str	r7, [r3, #0]
 8013a78:	e6b0      	b.n	80137dc <__gethex+0xf8>
 8013a7a:	4299      	cmp	r1, r3
 8013a7c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013a80:	d8d9      	bhi.n	8013a36 <__gethex+0x352>
 8013a82:	68a3      	ldr	r3, [r4, #8]
 8013a84:	459b      	cmp	fp, r3
 8013a86:	db17      	blt.n	8013ab8 <__gethex+0x3d4>
 8013a88:	6861      	ldr	r1, [r4, #4]
 8013a8a:	9801      	ldr	r0, [sp, #4]
 8013a8c:	3101      	adds	r1, #1
 8013a8e:	f7fe f803 	bl	8011a98 <_Balloc>
 8013a92:	4681      	mov	r9, r0
 8013a94:	b918      	cbnz	r0, 8013a9e <__gethex+0x3ba>
 8013a96:	4b1a      	ldr	r3, [pc, #104]	@ (8013b00 <__gethex+0x41c>)
 8013a98:	4602      	mov	r2, r0
 8013a9a:	2184      	movs	r1, #132	@ 0x84
 8013a9c:	e6c5      	b.n	801382a <__gethex+0x146>
 8013a9e:	6922      	ldr	r2, [r4, #16]
 8013aa0:	3202      	adds	r2, #2
 8013aa2:	f104 010c 	add.w	r1, r4, #12
 8013aa6:	0092      	lsls	r2, r2, #2
 8013aa8:	300c      	adds	r0, #12
 8013aaa:	f7ff fd6b 	bl	8013584 <memcpy>
 8013aae:	4621      	mov	r1, r4
 8013ab0:	9801      	ldr	r0, [sp, #4]
 8013ab2:	f7fe f831 	bl	8011b18 <_Bfree>
 8013ab6:	464c      	mov	r4, r9
 8013ab8:	6923      	ldr	r3, [r4, #16]
 8013aba:	1c5a      	adds	r2, r3, #1
 8013abc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013ac0:	6122      	str	r2, [r4, #16]
 8013ac2:	2201      	movs	r2, #1
 8013ac4:	615a      	str	r2, [r3, #20]
 8013ac6:	e7be      	b.n	8013a46 <__gethex+0x362>
 8013ac8:	6922      	ldr	r2, [r4, #16]
 8013aca:	455a      	cmp	r2, fp
 8013acc:	dd0b      	ble.n	8013ae6 <__gethex+0x402>
 8013ace:	2101      	movs	r1, #1
 8013ad0:	4620      	mov	r0, r4
 8013ad2:	f7ff fd9f 	bl	8013614 <rshift>
 8013ad6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013ada:	3701      	adds	r7, #1
 8013adc:	42bb      	cmp	r3, r7
 8013ade:	f6ff aee0 	blt.w	80138a2 <__gethex+0x1be>
 8013ae2:	2501      	movs	r5, #1
 8013ae4:	e7c2      	b.n	8013a6c <__gethex+0x388>
 8013ae6:	f016 061f 	ands.w	r6, r6, #31
 8013aea:	d0fa      	beq.n	8013ae2 <__gethex+0x3fe>
 8013aec:	4453      	add	r3, sl
 8013aee:	f1c6 0620 	rsb	r6, r6, #32
 8013af2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013af6:	f7fe f8c1 	bl	8011c7c <__hi0bits>
 8013afa:	42b0      	cmp	r0, r6
 8013afc:	dbe7      	blt.n	8013ace <__gethex+0x3ea>
 8013afe:	e7f0      	b.n	8013ae2 <__gethex+0x3fe>
 8013b00:	0801448d 	.word	0x0801448d

08013b04 <L_shift>:
 8013b04:	f1c2 0208 	rsb	r2, r2, #8
 8013b08:	0092      	lsls	r2, r2, #2
 8013b0a:	b570      	push	{r4, r5, r6, lr}
 8013b0c:	f1c2 0620 	rsb	r6, r2, #32
 8013b10:	6843      	ldr	r3, [r0, #4]
 8013b12:	6804      	ldr	r4, [r0, #0]
 8013b14:	fa03 f506 	lsl.w	r5, r3, r6
 8013b18:	432c      	orrs	r4, r5
 8013b1a:	40d3      	lsrs	r3, r2
 8013b1c:	6004      	str	r4, [r0, #0]
 8013b1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013b22:	4288      	cmp	r0, r1
 8013b24:	d3f4      	bcc.n	8013b10 <L_shift+0xc>
 8013b26:	bd70      	pop	{r4, r5, r6, pc}

08013b28 <__match>:
 8013b28:	b530      	push	{r4, r5, lr}
 8013b2a:	6803      	ldr	r3, [r0, #0]
 8013b2c:	3301      	adds	r3, #1
 8013b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b32:	b914      	cbnz	r4, 8013b3a <__match+0x12>
 8013b34:	6003      	str	r3, [r0, #0]
 8013b36:	2001      	movs	r0, #1
 8013b38:	bd30      	pop	{r4, r5, pc}
 8013b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013b42:	2d19      	cmp	r5, #25
 8013b44:	bf98      	it	ls
 8013b46:	3220      	addls	r2, #32
 8013b48:	42a2      	cmp	r2, r4
 8013b4a:	d0f0      	beq.n	8013b2e <__match+0x6>
 8013b4c:	2000      	movs	r0, #0
 8013b4e:	e7f3      	b.n	8013b38 <__match+0x10>

08013b50 <__hexnan>:
 8013b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b54:	680b      	ldr	r3, [r1, #0]
 8013b56:	6801      	ldr	r1, [r0, #0]
 8013b58:	115e      	asrs	r6, r3, #5
 8013b5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013b5e:	f013 031f 	ands.w	r3, r3, #31
 8013b62:	b087      	sub	sp, #28
 8013b64:	bf18      	it	ne
 8013b66:	3604      	addne	r6, #4
 8013b68:	2500      	movs	r5, #0
 8013b6a:	1f37      	subs	r7, r6, #4
 8013b6c:	4682      	mov	sl, r0
 8013b6e:	4690      	mov	r8, r2
 8013b70:	9301      	str	r3, [sp, #4]
 8013b72:	f846 5c04 	str.w	r5, [r6, #-4]
 8013b76:	46b9      	mov	r9, r7
 8013b78:	463c      	mov	r4, r7
 8013b7a:	9502      	str	r5, [sp, #8]
 8013b7c:	46ab      	mov	fp, r5
 8013b7e:	784a      	ldrb	r2, [r1, #1]
 8013b80:	1c4b      	adds	r3, r1, #1
 8013b82:	9303      	str	r3, [sp, #12]
 8013b84:	b342      	cbz	r2, 8013bd8 <__hexnan+0x88>
 8013b86:	4610      	mov	r0, r2
 8013b88:	9105      	str	r1, [sp, #20]
 8013b8a:	9204      	str	r2, [sp, #16]
 8013b8c:	f7ff fd94 	bl	80136b8 <__hexdig_fun>
 8013b90:	2800      	cmp	r0, #0
 8013b92:	d151      	bne.n	8013c38 <__hexnan+0xe8>
 8013b94:	9a04      	ldr	r2, [sp, #16]
 8013b96:	9905      	ldr	r1, [sp, #20]
 8013b98:	2a20      	cmp	r2, #32
 8013b9a:	d818      	bhi.n	8013bce <__hexnan+0x7e>
 8013b9c:	9b02      	ldr	r3, [sp, #8]
 8013b9e:	459b      	cmp	fp, r3
 8013ba0:	dd13      	ble.n	8013bca <__hexnan+0x7a>
 8013ba2:	454c      	cmp	r4, r9
 8013ba4:	d206      	bcs.n	8013bb4 <__hexnan+0x64>
 8013ba6:	2d07      	cmp	r5, #7
 8013ba8:	dc04      	bgt.n	8013bb4 <__hexnan+0x64>
 8013baa:	462a      	mov	r2, r5
 8013bac:	4649      	mov	r1, r9
 8013bae:	4620      	mov	r0, r4
 8013bb0:	f7ff ffa8 	bl	8013b04 <L_shift>
 8013bb4:	4544      	cmp	r4, r8
 8013bb6:	d952      	bls.n	8013c5e <__hexnan+0x10e>
 8013bb8:	2300      	movs	r3, #0
 8013bba:	f1a4 0904 	sub.w	r9, r4, #4
 8013bbe:	f844 3c04 	str.w	r3, [r4, #-4]
 8013bc2:	f8cd b008 	str.w	fp, [sp, #8]
 8013bc6:	464c      	mov	r4, r9
 8013bc8:	461d      	mov	r5, r3
 8013bca:	9903      	ldr	r1, [sp, #12]
 8013bcc:	e7d7      	b.n	8013b7e <__hexnan+0x2e>
 8013bce:	2a29      	cmp	r2, #41	@ 0x29
 8013bd0:	d157      	bne.n	8013c82 <__hexnan+0x132>
 8013bd2:	3102      	adds	r1, #2
 8013bd4:	f8ca 1000 	str.w	r1, [sl]
 8013bd8:	f1bb 0f00 	cmp.w	fp, #0
 8013bdc:	d051      	beq.n	8013c82 <__hexnan+0x132>
 8013bde:	454c      	cmp	r4, r9
 8013be0:	d206      	bcs.n	8013bf0 <__hexnan+0xa0>
 8013be2:	2d07      	cmp	r5, #7
 8013be4:	dc04      	bgt.n	8013bf0 <__hexnan+0xa0>
 8013be6:	462a      	mov	r2, r5
 8013be8:	4649      	mov	r1, r9
 8013bea:	4620      	mov	r0, r4
 8013bec:	f7ff ff8a 	bl	8013b04 <L_shift>
 8013bf0:	4544      	cmp	r4, r8
 8013bf2:	d936      	bls.n	8013c62 <__hexnan+0x112>
 8013bf4:	f1a8 0204 	sub.w	r2, r8, #4
 8013bf8:	4623      	mov	r3, r4
 8013bfa:	f853 1b04 	ldr.w	r1, [r3], #4
 8013bfe:	f842 1f04 	str.w	r1, [r2, #4]!
 8013c02:	429f      	cmp	r7, r3
 8013c04:	d2f9      	bcs.n	8013bfa <__hexnan+0xaa>
 8013c06:	1b3b      	subs	r3, r7, r4
 8013c08:	f023 0303 	bic.w	r3, r3, #3
 8013c0c:	3304      	adds	r3, #4
 8013c0e:	3401      	adds	r4, #1
 8013c10:	3e03      	subs	r6, #3
 8013c12:	42b4      	cmp	r4, r6
 8013c14:	bf88      	it	hi
 8013c16:	2304      	movhi	r3, #4
 8013c18:	4443      	add	r3, r8
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	f843 2b04 	str.w	r2, [r3], #4
 8013c20:	429f      	cmp	r7, r3
 8013c22:	d2fb      	bcs.n	8013c1c <__hexnan+0xcc>
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	b91b      	cbnz	r3, 8013c30 <__hexnan+0xe0>
 8013c28:	4547      	cmp	r7, r8
 8013c2a:	d128      	bne.n	8013c7e <__hexnan+0x12e>
 8013c2c:	2301      	movs	r3, #1
 8013c2e:	603b      	str	r3, [r7, #0]
 8013c30:	2005      	movs	r0, #5
 8013c32:	b007      	add	sp, #28
 8013c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c38:	3501      	adds	r5, #1
 8013c3a:	2d08      	cmp	r5, #8
 8013c3c:	f10b 0b01 	add.w	fp, fp, #1
 8013c40:	dd06      	ble.n	8013c50 <__hexnan+0x100>
 8013c42:	4544      	cmp	r4, r8
 8013c44:	d9c1      	bls.n	8013bca <__hexnan+0x7a>
 8013c46:	2300      	movs	r3, #0
 8013c48:	f844 3c04 	str.w	r3, [r4, #-4]
 8013c4c:	2501      	movs	r5, #1
 8013c4e:	3c04      	subs	r4, #4
 8013c50:	6822      	ldr	r2, [r4, #0]
 8013c52:	f000 000f 	and.w	r0, r0, #15
 8013c56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013c5a:	6020      	str	r0, [r4, #0]
 8013c5c:	e7b5      	b.n	8013bca <__hexnan+0x7a>
 8013c5e:	2508      	movs	r5, #8
 8013c60:	e7b3      	b.n	8013bca <__hexnan+0x7a>
 8013c62:	9b01      	ldr	r3, [sp, #4]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d0dd      	beq.n	8013c24 <__hexnan+0xd4>
 8013c68:	f1c3 0320 	rsb	r3, r3, #32
 8013c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8013c70:	40da      	lsrs	r2, r3
 8013c72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013c76:	4013      	ands	r3, r2
 8013c78:	f846 3c04 	str.w	r3, [r6, #-4]
 8013c7c:	e7d2      	b.n	8013c24 <__hexnan+0xd4>
 8013c7e:	3f04      	subs	r7, #4
 8013c80:	e7d0      	b.n	8013c24 <__hexnan+0xd4>
 8013c82:	2004      	movs	r0, #4
 8013c84:	e7d5      	b.n	8013c32 <__hexnan+0xe2>

08013c86 <__ascii_mbtowc>:
 8013c86:	b082      	sub	sp, #8
 8013c88:	b901      	cbnz	r1, 8013c8c <__ascii_mbtowc+0x6>
 8013c8a:	a901      	add	r1, sp, #4
 8013c8c:	b142      	cbz	r2, 8013ca0 <__ascii_mbtowc+0x1a>
 8013c8e:	b14b      	cbz	r3, 8013ca4 <__ascii_mbtowc+0x1e>
 8013c90:	7813      	ldrb	r3, [r2, #0]
 8013c92:	600b      	str	r3, [r1, #0]
 8013c94:	7812      	ldrb	r2, [r2, #0]
 8013c96:	1e10      	subs	r0, r2, #0
 8013c98:	bf18      	it	ne
 8013c9a:	2001      	movne	r0, #1
 8013c9c:	b002      	add	sp, #8
 8013c9e:	4770      	bx	lr
 8013ca0:	4610      	mov	r0, r2
 8013ca2:	e7fb      	b.n	8013c9c <__ascii_mbtowc+0x16>
 8013ca4:	f06f 0001 	mvn.w	r0, #1
 8013ca8:	e7f8      	b.n	8013c9c <__ascii_mbtowc+0x16>

08013caa <_realloc_r>:
 8013caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cae:	4680      	mov	r8, r0
 8013cb0:	4615      	mov	r5, r2
 8013cb2:	460c      	mov	r4, r1
 8013cb4:	b921      	cbnz	r1, 8013cc0 <_realloc_r+0x16>
 8013cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013cba:	4611      	mov	r1, r2
 8013cbc:	f7fd be60 	b.w	8011980 <_malloc_r>
 8013cc0:	b92a      	cbnz	r2, 8013cce <_realloc_r+0x24>
 8013cc2:	f7fd fde9 	bl	8011898 <_free_r>
 8013cc6:	2400      	movs	r4, #0
 8013cc8:	4620      	mov	r0, r4
 8013cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cce:	f000 f840 	bl	8013d52 <_malloc_usable_size_r>
 8013cd2:	4285      	cmp	r5, r0
 8013cd4:	4606      	mov	r6, r0
 8013cd6:	d802      	bhi.n	8013cde <_realloc_r+0x34>
 8013cd8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013cdc:	d8f4      	bhi.n	8013cc8 <_realloc_r+0x1e>
 8013cde:	4629      	mov	r1, r5
 8013ce0:	4640      	mov	r0, r8
 8013ce2:	f7fd fe4d 	bl	8011980 <_malloc_r>
 8013ce6:	4607      	mov	r7, r0
 8013ce8:	2800      	cmp	r0, #0
 8013cea:	d0ec      	beq.n	8013cc6 <_realloc_r+0x1c>
 8013cec:	42b5      	cmp	r5, r6
 8013cee:	462a      	mov	r2, r5
 8013cf0:	4621      	mov	r1, r4
 8013cf2:	bf28      	it	cs
 8013cf4:	4632      	movcs	r2, r6
 8013cf6:	f7ff fc45 	bl	8013584 <memcpy>
 8013cfa:	4621      	mov	r1, r4
 8013cfc:	4640      	mov	r0, r8
 8013cfe:	f7fd fdcb 	bl	8011898 <_free_r>
 8013d02:	463c      	mov	r4, r7
 8013d04:	e7e0      	b.n	8013cc8 <_realloc_r+0x1e>

08013d06 <__ascii_wctomb>:
 8013d06:	4603      	mov	r3, r0
 8013d08:	4608      	mov	r0, r1
 8013d0a:	b141      	cbz	r1, 8013d1e <__ascii_wctomb+0x18>
 8013d0c:	2aff      	cmp	r2, #255	@ 0xff
 8013d0e:	d904      	bls.n	8013d1a <__ascii_wctomb+0x14>
 8013d10:	228a      	movs	r2, #138	@ 0x8a
 8013d12:	601a      	str	r2, [r3, #0]
 8013d14:	f04f 30ff 	mov.w	r0, #4294967295
 8013d18:	4770      	bx	lr
 8013d1a:	700a      	strb	r2, [r1, #0]
 8013d1c:	2001      	movs	r0, #1
 8013d1e:	4770      	bx	lr

08013d20 <fiprintf>:
 8013d20:	b40e      	push	{r1, r2, r3}
 8013d22:	b503      	push	{r0, r1, lr}
 8013d24:	4601      	mov	r1, r0
 8013d26:	ab03      	add	r3, sp, #12
 8013d28:	4805      	ldr	r0, [pc, #20]	@ (8013d40 <fiprintf+0x20>)
 8013d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d2e:	6800      	ldr	r0, [r0, #0]
 8013d30:	9301      	str	r3, [sp, #4]
 8013d32:	f000 f83f 	bl	8013db4 <_vfiprintf_r>
 8013d36:	b002      	add	sp, #8
 8013d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8013d3c:	b003      	add	sp, #12
 8013d3e:	4770      	bx	lr
 8013d40:	20000194 	.word	0x20000194

08013d44 <abort>:
 8013d44:	b508      	push	{r3, lr}
 8013d46:	2006      	movs	r0, #6
 8013d48:	f000 fa08 	bl	801415c <raise>
 8013d4c:	2001      	movs	r0, #1
 8013d4e:	f7ef fadb 	bl	8003308 <_exit>

08013d52 <_malloc_usable_size_r>:
 8013d52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d56:	1f18      	subs	r0, r3, #4
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	bfbc      	itt	lt
 8013d5c:	580b      	ldrlt	r3, [r1, r0]
 8013d5e:	18c0      	addlt	r0, r0, r3
 8013d60:	4770      	bx	lr

08013d62 <__sfputc_r>:
 8013d62:	6893      	ldr	r3, [r2, #8]
 8013d64:	3b01      	subs	r3, #1
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	b410      	push	{r4}
 8013d6a:	6093      	str	r3, [r2, #8]
 8013d6c:	da08      	bge.n	8013d80 <__sfputc_r+0x1e>
 8013d6e:	6994      	ldr	r4, [r2, #24]
 8013d70:	42a3      	cmp	r3, r4
 8013d72:	db01      	blt.n	8013d78 <__sfputc_r+0x16>
 8013d74:	290a      	cmp	r1, #10
 8013d76:	d103      	bne.n	8013d80 <__sfputc_r+0x1e>
 8013d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d7c:	f000 b932 	b.w	8013fe4 <__swbuf_r>
 8013d80:	6813      	ldr	r3, [r2, #0]
 8013d82:	1c58      	adds	r0, r3, #1
 8013d84:	6010      	str	r0, [r2, #0]
 8013d86:	7019      	strb	r1, [r3, #0]
 8013d88:	4608      	mov	r0, r1
 8013d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d8e:	4770      	bx	lr

08013d90 <__sfputs_r>:
 8013d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d92:	4606      	mov	r6, r0
 8013d94:	460f      	mov	r7, r1
 8013d96:	4614      	mov	r4, r2
 8013d98:	18d5      	adds	r5, r2, r3
 8013d9a:	42ac      	cmp	r4, r5
 8013d9c:	d101      	bne.n	8013da2 <__sfputs_r+0x12>
 8013d9e:	2000      	movs	r0, #0
 8013da0:	e007      	b.n	8013db2 <__sfputs_r+0x22>
 8013da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013da6:	463a      	mov	r2, r7
 8013da8:	4630      	mov	r0, r6
 8013daa:	f7ff ffda 	bl	8013d62 <__sfputc_r>
 8013dae:	1c43      	adds	r3, r0, #1
 8013db0:	d1f3      	bne.n	8013d9a <__sfputs_r+0xa>
 8013db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013db4 <_vfiprintf_r>:
 8013db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013db8:	460d      	mov	r5, r1
 8013dba:	b09d      	sub	sp, #116	@ 0x74
 8013dbc:	4614      	mov	r4, r2
 8013dbe:	4698      	mov	r8, r3
 8013dc0:	4606      	mov	r6, r0
 8013dc2:	b118      	cbz	r0, 8013dcc <_vfiprintf_r+0x18>
 8013dc4:	6a03      	ldr	r3, [r0, #32]
 8013dc6:	b90b      	cbnz	r3, 8013dcc <_vfiprintf_r+0x18>
 8013dc8:	f7fc fdf8 	bl	80109bc <__sinit>
 8013dcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013dce:	07d9      	lsls	r1, r3, #31
 8013dd0:	d405      	bmi.n	8013dde <_vfiprintf_r+0x2a>
 8013dd2:	89ab      	ldrh	r3, [r5, #12]
 8013dd4:	059a      	lsls	r2, r3, #22
 8013dd6:	d402      	bmi.n	8013dde <_vfiprintf_r+0x2a>
 8013dd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013dda:	f7fc ff06 	bl	8010bea <__retarget_lock_acquire_recursive>
 8013dde:	89ab      	ldrh	r3, [r5, #12]
 8013de0:	071b      	lsls	r3, r3, #28
 8013de2:	d501      	bpl.n	8013de8 <_vfiprintf_r+0x34>
 8013de4:	692b      	ldr	r3, [r5, #16]
 8013de6:	b99b      	cbnz	r3, 8013e10 <_vfiprintf_r+0x5c>
 8013de8:	4629      	mov	r1, r5
 8013dea:	4630      	mov	r0, r6
 8013dec:	f000 f938 	bl	8014060 <__swsetup_r>
 8013df0:	b170      	cbz	r0, 8013e10 <_vfiprintf_r+0x5c>
 8013df2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013df4:	07dc      	lsls	r4, r3, #31
 8013df6:	d504      	bpl.n	8013e02 <_vfiprintf_r+0x4e>
 8013df8:	f04f 30ff 	mov.w	r0, #4294967295
 8013dfc:	b01d      	add	sp, #116	@ 0x74
 8013dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e02:	89ab      	ldrh	r3, [r5, #12]
 8013e04:	0598      	lsls	r0, r3, #22
 8013e06:	d4f7      	bmi.n	8013df8 <_vfiprintf_r+0x44>
 8013e08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013e0a:	f7fc feef 	bl	8010bec <__retarget_lock_release_recursive>
 8013e0e:	e7f3      	b.n	8013df8 <_vfiprintf_r+0x44>
 8013e10:	2300      	movs	r3, #0
 8013e12:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e14:	2320      	movs	r3, #32
 8013e16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013e1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e1e:	2330      	movs	r3, #48	@ 0x30
 8013e20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013fd0 <_vfiprintf_r+0x21c>
 8013e24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013e28:	f04f 0901 	mov.w	r9, #1
 8013e2c:	4623      	mov	r3, r4
 8013e2e:	469a      	mov	sl, r3
 8013e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e34:	b10a      	cbz	r2, 8013e3a <_vfiprintf_r+0x86>
 8013e36:	2a25      	cmp	r2, #37	@ 0x25
 8013e38:	d1f9      	bne.n	8013e2e <_vfiprintf_r+0x7a>
 8013e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8013e3e:	d00b      	beq.n	8013e58 <_vfiprintf_r+0xa4>
 8013e40:	465b      	mov	r3, fp
 8013e42:	4622      	mov	r2, r4
 8013e44:	4629      	mov	r1, r5
 8013e46:	4630      	mov	r0, r6
 8013e48:	f7ff ffa2 	bl	8013d90 <__sfputs_r>
 8013e4c:	3001      	adds	r0, #1
 8013e4e:	f000 80a7 	beq.w	8013fa0 <_vfiprintf_r+0x1ec>
 8013e52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013e54:	445a      	add	r2, fp
 8013e56:	9209      	str	r2, [sp, #36]	@ 0x24
 8013e58:	f89a 3000 	ldrb.w	r3, [sl]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	f000 809f 	beq.w	8013fa0 <_vfiprintf_r+0x1ec>
 8013e62:	2300      	movs	r3, #0
 8013e64:	f04f 32ff 	mov.w	r2, #4294967295
 8013e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e6c:	f10a 0a01 	add.w	sl, sl, #1
 8013e70:	9304      	str	r3, [sp, #16]
 8013e72:	9307      	str	r3, [sp, #28]
 8013e74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013e78:	931a      	str	r3, [sp, #104]	@ 0x68
 8013e7a:	4654      	mov	r4, sl
 8013e7c:	2205      	movs	r2, #5
 8013e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e82:	4853      	ldr	r0, [pc, #332]	@ (8013fd0 <_vfiprintf_r+0x21c>)
 8013e84:	f7ec f9cc 	bl	8000220 <memchr>
 8013e88:	9a04      	ldr	r2, [sp, #16]
 8013e8a:	b9d8      	cbnz	r0, 8013ec4 <_vfiprintf_r+0x110>
 8013e8c:	06d1      	lsls	r1, r2, #27
 8013e8e:	bf44      	itt	mi
 8013e90:	2320      	movmi	r3, #32
 8013e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013e96:	0713      	lsls	r3, r2, #28
 8013e98:	bf44      	itt	mi
 8013e9a:	232b      	movmi	r3, #43	@ 0x2b
 8013e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8013ea4:	2b2a      	cmp	r3, #42	@ 0x2a
 8013ea6:	d015      	beq.n	8013ed4 <_vfiprintf_r+0x120>
 8013ea8:	9a07      	ldr	r2, [sp, #28]
 8013eaa:	4654      	mov	r4, sl
 8013eac:	2000      	movs	r0, #0
 8013eae:	f04f 0c0a 	mov.w	ip, #10
 8013eb2:	4621      	mov	r1, r4
 8013eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013eb8:	3b30      	subs	r3, #48	@ 0x30
 8013eba:	2b09      	cmp	r3, #9
 8013ebc:	d94b      	bls.n	8013f56 <_vfiprintf_r+0x1a2>
 8013ebe:	b1b0      	cbz	r0, 8013eee <_vfiprintf_r+0x13a>
 8013ec0:	9207      	str	r2, [sp, #28]
 8013ec2:	e014      	b.n	8013eee <_vfiprintf_r+0x13a>
 8013ec4:	eba0 0308 	sub.w	r3, r0, r8
 8013ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8013ecc:	4313      	orrs	r3, r2
 8013ece:	9304      	str	r3, [sp, #16]
 8013ed0:	46a2      	mov	sl, r4
 8013ed2:	e7d2      	b.n	8013e7a <_vfiprintf_r+0xc6>
 8013ed4:	9b03      	ldr	r3, [sp, #12]
 8013ed6:	1d19      	adds	r1, r3, #4
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	9103      	str	r1, [sp, #12]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	bfbb      	ittet	lt
 8013ee0:	425b      	neglt	r3, r3
 8013ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8013ee6:	9307      	strge	r3, [sp, #28]
 8013ee8:	9307      	strlt	r3, [sp, #28]
 8013eea:	bfb8      	it	lt
 8013eec:	9204      	strlt	r2, [sp, #16]
 8013eee:	7823      	ldrb	r3, [r4, #0]
 8013ef0:	2b2e      	cmp	r3, #46	@ 0x2e
 8013ef2:	d10a      	bne.n	8013f0a <_vfiprintf_r+0x156>
 8013ef4:	7863      	ldrb	r3, [r4, #1]
 8013ef6:	2b2a      	cmp	r3, #42	@ 0x2a
 8013ef8:	d132      	bne.n	8013f60 <_vfiprintf_r+0x1ac>
 8013efa:	9b03      	ldr	r3, [sp, #12]
 8013efc:	1d1a      	adds	r2, r3, #4
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	9203      	str	r2, [sp, #12]
 8013f02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013f06:	3402      	adds	r4, #2
 8013f08:	9305      	str	r3, [sp, #20]
 8013f0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013fe0 <_vfiprintf_r+0x22c>
 8013f0e:	7821      	ldrb	r1, [r4, #0]
 8013f10:	2203      	movs	r2, #3
 8013f12:	4650      	mov	r0, sl
 8013f14:	f7ec f984 	bl	8000220 <memchr>
 8013f18:	b138      	cbz	r0, 8013f2a <_vfiprintf_r+0x176>
 8013f1a:	9b04      	ldr	r3, [sp, #16]
 8013f1c:	eba0 000a 	sub.w	r0, r0, sl
 8013f20:	2240      	movs	r2, #64	@ 0x40
 8013f22:	4082      	lsls	r2, r0
 8013f24:	4313      	orrs	r3, r2
 8013f26:	3401      	adds	r4, #1
 8013f28:	9304      	str	r3, [sp, #16]
 8013f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f2e:	4829      	ldr	r0, [pc, #164]	@ (8013fd4 <_vfiprintf_r+0x220>)
 8013f30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013f34:	2206      	movs	r2, #6
 8013f36:	f7ec f973 	bl	8000220 <memchr>
 8013f3a:	2800      	cmp	r0, #0
 8013f3c:	d03f      	beq.n	8013fbe <_vfiprintf_r+0x20a>
 8013f3e:	4b26      	ldr	r3, [pc, #152]	@ (8013fd8 <_vfiprintf_r+0x224>)
 8013f40:	bb1b      	cbnz	r3, 8013f8a <_vfiprintf_r+0x1d6>
 8013f42:	9b03      	ldr	r3, [sp, #12]
 8013f44:	3307      	adds	r3, #7
 8013f46:	f023 0307 	bic.w	r3, r3, #7
 8013f4a:	3308      	adds	r3, #8
 8013f4c:	9303      	str	r3, [sp, #12]
 8013f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f50:	443b      	add	r3, r7
 8013f52:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f54:	e76a      	b.n	8013e2c <_vfiprintf_r+0x78>
 8013f56:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f5a:	460c      	mov	r4, r1
 8013f5c:	2001      	movs	r0, #1
 8013f5e:	e7a8      	b.n	8013eb2 <_vfiprintf_r+0xfe>
 8013f60:	2300      	movs	r3, #0
 8013f62:	3401      	adds	r4, #1
 8013f64:	9305      	str	r3, [sp, #20]
 8013f66:	4619      	mov	r1, r3
 8013f68:	f04f 0c0a 	mov.w	ip, #10
 8013f6c:	4620      	mov	r0, r4
 8013f6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f72:	3a30      	subs	r2, #48	@ 0x30
 8013f74:	2a09      	cmp	r2, #9
 8013f76:	d903      	bls.n	8013f80 <_vfiprintf_r+0x1cc>
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d0c6      	beq.n	8013f0a <_vfiprintf_r+0x156>
 8013f7c:	9105      	str	r1, [sp, #20]
 8013f7e:	e7c4      	b.n	8013f0a <_vfiprintf_r+0x156>
 8013f80:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f84:	4604      	mov	r4, r0
 8013f86:	2301      	movs	r3, #1
 8013f88:	e7f0      	b.n	8013f6c <_vfiprintf_r+0x1b8>
 8013f8a:	ab03      	add	r3, sp, #12
 8013f8c:	9300      	str	r3, [sp, #0]
 8013f8e:	462a      	mov	r2, r5
 8013f90:	4b12      	ldr	r3, [pc, #72]	@ (8013fdc <_vfiprintf_r+0x228>)
 8013f92:	a904      	add	r1, sp, #16
 8013f94:	4630      	mov	r0, r6
 8013f96:	f7fb feb9 	bl	800fd0c <_printf_float>
 8013f9a:	4607      	mov	r7, r0
 8013f9c:	1c78      	adds	r0, r7, #1
 8013f9e:	d1d6      	bne.n	8013f4e <_vfiprintf_r+0x19a>
 8013fa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013fa2:	07d9      	lsls	r1, r3, #31
 8013fa4:	d405      	bmi.n	8013fb2 <_vfiprintf_r+0x1fe>
 8013fa6:	89ab      	ldrh	r3, [r5, #12]
 8013fa8:	059a      	lsls	r2, r3, #22
 8013faa:	d402      	bmi.n	8013fb2 <_vfiprintf_r+0x1fe>
 8013fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013fae:	f7fc fe1d 	bl	8010bec <__retarget_lock_release_recursive>
 8013fb2:	89ab      	ldrh	r3, [r5, #12]
 8013fb4:	065b      	lsls	r3, r3, #25
 8013fb6:	f53f af1f 	bmi.w	8013df8 <_vfiprintf_r+0x44>
 8013fba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013fbc:	e71e      	b.n	8013dfc <_vfiprintf_r+0x48>
 8013fbe:	ab03      	add	r3, sp, #12
 8013fc0:	9300      	str	r3, [sp, #0]
 8013fc2:	462a      	mov	r2, r5
 8013fc4:	4b05      	ldr	r3, [pc, #20]	@ (8013fdc <_vfiprintf_r+0x228>)
 8013fc6:	a904      	add	r1, sp, #16
 8013fc8:	4630      	mov	r0, r6
 8013fca:	f7fc f937 	bl	801023c <_printf_i>
 8013fce:	e7e4      	b.n	8013f9a <_vfiprintf_r+0x1e6>
 8013fd0:	08014751 	.word	0x08014751
 8013fd4:	0801475b 	.word	0x0801475b
 8013fd8:	0800fd0d 	.word	0x0800fd0d
 8013fdc:	08013d91 	.word	0x08013d91
 8013fe0:	08014757 	.word	0x08014757

08013fe4 <__swbuf_r>:
 8013fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fe6:	460e      	mov	r6, r1
 8013fe8:	4614      	mov	r4, r2
 8013fea:	4605      	mov	r5, r0
 8013fec:	b118      	cbz	r0, 8013ff6 <__swbuf_r+0x12>
 8013fee:	6a03      	ldr	r3, [r0, #32]
 8013ff0:	b90b      	cbnz	r3, 8013ff6 <__swbuf_r+0x12>
 8013ff2:	f7fc fce3 	bl	80109bc <__sinit>
 8013ff6:	69a3      	ldr	r3, [r4, #24]
 8013ff8:	60a3      	str	r3, [r4, #8]
 8013ffa:	89a3      	ldrh	r3, [r4, #12]
 8013ffc:	071a      	lsls	r2, r3, #28
 8013ffe:	d501      	bpl.n	8014004 <__swbuf_r+0x20>
 8014000:	6923      	ldr	r3, [r4, #16]
 8014002:	b943      	cbnz	r3, 8014016 <__swbuf_r+0x32>
 8014004:	4621      	mov	r1, r4
 8014006:	4628      	mov	r0, r5
 8014008:	f000 f82a 	bl	8014060 <__swsetup_r>
 801400c:	b118      	cbz	r0, 8014016 <__swbuf_r+0x32>
 801400e:	f04f 37ff 	mov.w	r7, #4294967295
 8014012:	4638      	mov	r0, r7
 8014014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014016:	6823      	ldr	r3, [r4, #0]
 8014018:	6922      	ldr	r2, [r4, #16]
 801401a:	1a98      	subs	r0, r3, r2
 801401c:	6963      	ldr	r3, [r4, #20]
 801401e:	b2f6      	uxtb	r6, r6
 8014020:	4283      	cmp	r3, r0
 8014022:	4637      	mov	r7, r6
 8014024:	dc05      	bgt.n	8014032 <__swbuf_r+0x4e>
 8014026:	4621      	mov	r1, r4
 8014028:	4628      	mov	r0, r5
 801402a:	f7ff fa47 	bl	80134bc <_fflush_r>
 801402e:	2800      	cmp	r0, #0
 8014030:	d1ed      	bne.n	801400e <__swbuf_r+0x2a>
 8014032:	68a3      	ldr	r3, [r4, #8]
 8014034:	3b01      	subs	r3, #1
 8014036:	60a3      	str	r3, [r4, #8]
 8014038:	6823      	ldr	r3, [r4, #0]
 801403a:	1c5a      	adds	r2, r3, #1
 801403c:	6022      	str	r2, [r4, #0]
 801403e:	701e      	strb	r6, [r3, #0]
 8014040:	6962      	ldr	r2, [r4, #20]
 8014042:	1c43      	adds	r3, r0, #1
 8014044:	429a      	cmp	r2, r3
 8014046:	d004      	beq.n	8014052 <__swbuf_r+0x6e>
 8014048:	89a3      	ldrh	r3, [r4, #12]
 801404a:	07db      	lsls	r3, r3, #31
 801404c:	d5e1      	bpl.n	8014012 <__swbuf_r+0x2e>
 801404e:	2e0a      	cmp	r6, #10
 8014050:	d1df      	bne.n	8014012 <__swbuf_r+0x2e>
 8014052:	4621      	mov	r1, r4
 8014054:	4628      	mov	r0, r5
 8014056:	f7ff fa31 	bl	80134bc <_fflush_r>
 801405a:	2800      	cmp	r0, #0
 801405c:	d0d9      	beq.n	8014012 <__swbuf_r+0x2e>
 801405e:	e7d6      	b.n	801400e <__swbuf_r+0x2a>

08014060 <__swsetup_r>:
 8014060:	b538      	push	{r3, r4, r5, lr}
 8014062:	4b29      	ldr	r3, [pc, #164]	@ (8014108 <__swsetup_r+0xa8>)
 8014064:	4605      	mov	r5, r0
 8014066:	6818      	ldr	r0, [r3, #0]
 8014068:	460c      	mov	r4, r1
 801406a:	b118      	cbz	r0, 8014074 <__swsetup_r+0x14>
 801406c:	6a03      	ldr	r3, [r0, #32]
 801406e:	b90b      	cbnz	r3, 8014074 <__swsetup_r+0x14>
 8014070:	f7fc fca4 	bl	80109bc <__sinit>
 8014074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014078:	0719      	lsls	r1, r3, #28
 801407a:	d422      	bmi.n	80140c2 <__swsetup_r+0x62>
 801407c:	06da      	lsls	r2, r3, #27
 801407e:	d407      	bmi.n	8014090 <__swsetup_r+0x30>
 8014080:	2209      	movs	r2, #9
 8014082:	602a      	str	r2, [r5, #0]
 8014084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014088:	81a3      	strh	r3, [r4, #12]
 801408a:	f04f 30ff 	mov.w	r0, #4294967295
 801408e:	e033      	b.n	80140f8 <__swsetup_r+0x98>
 8014090:	0758      	lsls	r0, r3, #29
 8014092:	d512      	bpl.n	80140ba <__swsetup_r+0x5a>
 8014094:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014096:	b141      	cbz	r1, 80140aa <__swsetup_r+0x4a>
 8014098:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801409c:	4299      	cmp	r1, r3
 801409e:	d002      	beq.n	80140a6 <__swsetup_r+0x46>
 80140a0:	4628      	mov	r0, r5
 80140a2:	f7fd fbf9 	bl	8011898 <_free_r>
 80140a6:	2300      	movs	r3, #0
 80140a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80140aa:	89a3      	ldrh	r3, [r4, #12]
 80140ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80140b0:	81a3      	strh	r3, [r4, #12]
 80140b2:	2300      	movs	r3, #0
 80140b4:	6063      	str	r3, [r4, #4]
 80140b6:	6923      	ldr	r3, [r4, #16]
 80140b8:	6023      	str	r3, [r4, #0]
 80140ba:	89a3      	ldrh	r3, [r4, #12]
 80140bc:	f043 0308 	orr.w	r3, r3, #8
 80140c0:	81a3      	strh	r3, [r4, #12]
 80140c2:	6923      	ldr	r3, [r4, #16]
 80140c4:	b94b      	cbnz	r3, 80140da <__swsetup_r+0x7a>
 80140c6:	89a3      	ldrh	r3, [r4, #12]
 80140c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80140cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80140d0:	d003      	beq.n	80140da <__swsetup_r+0x7a>
 80140d2:	4621      	mov	r1, r4
 80140d4:	4628      	mov	r0, r5
 80140d6:	f000 f883 	bl	80141e0 <__smakebuf_r>
 80140da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140de:	f013 0201 	ands.w	r2, r3, #1
 80140e2:	d00a      	beq.n	80140fa <__swsetup_r+0x9a>
 80140e4:	2200      	movs	r2, #0
 80140e6:	60a2      	str	r2, [r4, #8]
 80140e8:	6962      	ldr	r2, [r4, #20]
 80140ea:	4252      	negs	r2, r2
 80140ec:	61a2      	str	r2, [r4, #24]
 80140ee:	6922      	ldr	r2, [r4, #16]
 80140f0:	b942      	cbnz	r2, 8014104 <__swsetup_r+0xa4>
 80140f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80140f6:	d1c5      	bne.n	8014084 <__swsetup_r+0x24>
 80140f8:	bd38      	pop	{r3, r4, r5, pc}
 80140fa:	0799      	lsls	r1, r3, #30
 80140fc:	bf58      	it	pl
 80140fe:	6962      	ldrpl	r2, [r4, #20]
 8014100:	60a2      	str	r2, [r4, #8]
 8014102:	e7f4      	b.n	80140ee <__swsetup_r+0x8e>
 8014104:	2000      	movs	r0, #0
 8014106:	e7f7      	b.n	80140f8 <__swsetup_r+0x98>
 8014108:	20000194 	.word	0x20000194

0801410c <_raise_r>:
 801410c:	291f      	cmp	r1, #31
 801410e:	b538      	push	{r3, r4, r5, lr}
 8014110:	4605      	mov	r5, r0
 8014112:	460c      	mov	r4, r1
 8014114:	d904      	bls.n	8014120 <_raise_r+0x14>
 8014116:	2316      	movs	r3, #22
 8014118:	6003      	str	r3, [r0, #0]
 801411a:	f04f 30ff 	mov.w	r0, #4294967295
 801411e:	bd38      	pop	{r3, r4, r5, pc}
 8014120:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014122:	b112      	cbz	r2, 801412a <_raise_r+0x1e>
 8014124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014128:	b94b      	cbnz	r3, 801413e <_raise_r+0x32>
 801412a:	4628      	mov	r0, r5
 801412c:	f000 f830 	bl	8014190 <_getpid_r>
 8014130:	4622      	mov	r2, r4
 8014132:	4601      	mov	r1, r0
 8014134:	4628      	mov	r0, r5
 8014136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801413a:	f000 b817 	b.w	801416c <_kill_r>
 801413e:	2b01      	cmp	r3, #1
 8014140:	d00a      	beq.n	8014158 <_raise_r+0x4c>
 8014142:	1c59      	adds	r1, r3, #1
 8014144:	d103      	bne.n	801414e <_raise_r+0x42>
 8014146:	2316      	movs	r3, #22
 8014148:	6003      	str	r3, [r0, #0]
 801414a:	2001      	movs	r0, #1
 801414c:	e7e7      	b.n	801411e <_raise_r+0x12>
 801414e:	2100      	movs	r1, #0
 8014150:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014154:	4620      	mov	r0, r4
 8014156:	4798      	blx	r3
 8014158:	2000      	movs	r0, #0
 801415a:	e7e0      	b.n	801411e <_raise_r+0x12>

0801415c <raise>:
 801415c:	4b02      	ldr	r3, [pc, #8]	@ (8014168 <raise+0xc>)
 801415e:	4601      	mov	r1, r0
 8014160:	6818      	ldr	r0, [r3, #0]
 8014162:	f7ff bfd3 	b.w	801410c <_raise_r>
 8014166:	bf00      	nop
 8014168:	20000194 	.word	0x20000194

0801416c <_kill_r>:
 801416c:	b538      	push	{r3, r4, r5, lr}
 801416e:	4d07      	ldr	r5, [pc, #28]	@ (801418c <_kill_r+0x20>)
 8014170:	2300      	movs	r3, #0
 8014172:	4604      	mov	r4, r0
 8014174:	4608      	mov	r0, r1
 8014176:	4611      	mov	r1, r2
 8014178:	602b      	str	r3, [r5, #0]
 801417a:	f7ef f8b5 	bl	80032e8 <_kill>
 801417e:	1c43      	adds	r3, r0, #1
 8014180:	d102      	bne.n	8014188 <_kill_r+0x1c>
 8014182:	682b      	ldr	r3, [r5, #0]
 8014184:	b103      	cbz	r3, 8014188 <_kill_r+0x1c>
 8014186:	6023      	str	r3, [r4, #0]
 8014188:	bd38      	pop	{r3, r4, r5, pc}
 801418a:	bf00      	nop
 801418c:	2000299c 	.word	0x2000299c

08014190 <_getpid_r>:
 8014190:	f7ef b8a2 	b.w	80032d8 <_getpid>

08014194 <__swhatbuf_r>:
 8014194:	b570      	push	{r4, r5, r6, lr}
 8014196:	460c      	mov	r4, r1
 8014198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801419c:	2900      	cmp	r1, #0
 801419e:	b096      	sub	sp, #88	@ 0x58
 80141a0:	4615      	mov	r5, r2
 80141a2:	461e      	mov	r6, r3
 80141a4:	da0d      	bge.n	80141c2 <__swhatbuf_r+0x2e>
 80141a6:	89a3      	ldrh	r3, [r4, #12]
 80141a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80141ac:	f04f 0100 	mov.w	r1, #0
 80141b0:	bf14      	ite	ne
 80141b2:	2340      	movne	r3, #64	@ 0x40
 80141b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80141b8:	2000      	movs	r0, #0
 80141ba:	6031      	str	r1, [r6, #0]
 80141bc:	602b      	str	r3, [r5, #0]
 80141be:	b016      	add	sp, #88	@ 0x58
 80141c0:	bd70      	pop	{r4, r5, r6, pc}
 80141c2:	466a      	mov	r2, sp
 80141c4:	f000 f848 	bl	8014258 <_fstat_r>
 80141c8:	2800      	cmp	r0, #0
 80141ca:	dbec      	blt.n	80141a6 <__swhatbuf_r+0x12>
 80141cc:	9901      	ldr	r1, [sp, #4]
 80141ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80141d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80141d6:	4259      	negs	r1, r3
 80141d8:	4159      	adcs	r1, r3
 80141da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80141de:	e7eb      	b.n	80141b8 <__swhatbuf_r+0x24>

080141e0 <__smakebuf_r>:
 80141e0:	898b      	ldrh	r3, [r1, #12]
 80141e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80141e4:	079d      	lsls	r5, r3, #30
 80141e6:	4606      	mov	r6, r0
 80141e8:	460c      	mov	r4, r1
 80141ea:	d507      	bpl.n	80141fc <__smakebuf_r+0x1c>
 80141ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80141f0:	6023      	str	r3, [r4, #0]
 80141f2:	6123      	str	r3, [r4, #16]
 80141f4:	2301      	movs	r3, #1
 80141f6:	6163      	str	r3, [r4, #20]
 80141f8:	b003      	add	sp, #12
 80141fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141fc:	ab01      	add	r3, sp, #4
 80141fe:	466a      	mov	r2, sp
 8014200:	f7ff ffc8 	bl	8014194 <__swhatbuf_r>
 8014204:	9f00      	ldr	r7, [sp, #0]
 8014206:	4605      	mov	r5, r0
 8014208:	4639      	mov	r1, r7
 801420a:	4630      	mov	r0, r6
 801420c:	f7fd fbb8 	bl	8011980 <_malloc_r>
 8014210:	b948      	cbnz	r0, 8014226 <__smakebuf_r+0x46>
 8014212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014216:	059a      	lsls	r2, r3, #22
 8014218:	d4ee      	bmi.n	80141f8 <__smakebuf_r+0x18>
 801421a:	f023 0303 	bic.w	r3, r3, #3
 801421e:	f043 0302 	orr.w	r3, r3, #2
 8014222:	81a3      	strh	r3, [r4, #12]
 8014224:	e7e2      	b.n	80141ec <__smakebuf_r+0xc>
 8014226:	89a3      	ldrh	r3, [r4, #12]
 8014228:	6020      	str	r0, [r4, #0]
 801422a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801422e:	81a3      	strh	r3, [r4, #12]
 8014230:	9b01      	ldr	r3, [sp, #4]
 8014232:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014236:	b15b      	cbz	r3, 8014250 <__smakebuf_r+0x70>
 8014238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801423c:	4630      	mov	r0, r6
 801423e:	f000 f81d 	bl	801427c <_isatty_r>
 8014242:	b128      	cbz	r0, 8014250 <__smakebuf_r+0x70>
 8014244:	89a3      	ldrh	r3, [r4, #12]
 8014246:	f023 0303 	bic.w	r3, r3, #3
 801424a:	f043 0301 	orr.w	r3, r3, #1
 801424e:	81a3      	strh	r3, [r4, #12]
 8014250:	89a3      	ldrh	r3, [r4, #12]
 8014252:	431d      	orrs	r5, r3
 8014254:	81a5      	strh	r5, [r4, #12]
 8014256:	e7cf      	b.n	80141f8 <__smakebuf_r+0x18>

08014258 <_fstat_r>:
 8014258:	b538      	push	{r3, r4, r5, lr}
 801425a:	4d07      	ldr	r5, [pc, #28]	@ (8014278 <_fstat_r+0x20>)
 801425c:	2300      	movs	r3, #0
 801425e:	4604      	mov	r4, r0
 8014260:	4608      	mov	r0, r1
 8014262:	4611      	mov	r1, r2
 8014264:	602b      	str	r3, [r5, #0]
 8014266:	f7ef f89f 	bl	80033a8 <_fstat>
 801426a:	1c43      	adds	r3, r0, #1
 801426c:	d102      	bne.n	8014274 <_fstat_r+0x1c>
 801426e:	682b      	ldr	r3, [r5, #0]
 8014270:	b103      	cbz	r3, 8014274 <_fstat_r+0x1c>
 8014272:	6023      	str	r3, [r4, #0]
 8014274:	bd38      	pop	{r3, r4, r5, pc}
 8014276:	bf00      	nop
 8014278:	2000299c 	.word	0x2000299c

0801427c <_isatty_r>:
 801427c:	b538      	push	{r3, r4, r5, lr}
 801427e:	4d06      	ldr	r5, [pc, #24]	@ (8014298 <_isatty_r+0x1c>)
 8014280:	2300      	movs	r3, #0
 8014282:	4604      	mov	r4, r0
 8014284:	4608      	mov	r0, r1
 8014286:	602b      	str	r3, [r5, #0]
 8014288:	f7ef f89e 	bl	80033c8 <_isatty>
 801428c:	1c43      	adds	r3, r0, #1
 801428e:	d102      	bne.n	8014296 <_isatty_r+0x1a>
 8014290:	682b      	ldr	r3, [r5, #0]
 8014292:	b103      	cbz	r3, 8014296 <_isatty_r+0x1a>
 8014294:	6023      	str	r3, [r4, #0]
 8014296:	bd38      	pop	{r3, r4, r5, pc}
 8014298:	2000299c 	.word	0x2000299c

0801429c <_init>:
 801429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801429e:	bf00      	nop
 80142a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80142a2:	bc08      	pop	{r3}
 80142a4:	469e      	mov	lr, r3
 80142a6:	4770      	bx	lr

080142a8 <_fini>:
 80142a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142aa:	bf00      	nop
 80142ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80142ae:	bc08      	pop	{r3}
 80142b0:	469e      	mov	lr, r3
 80142b2:	4770      	bx	lr
