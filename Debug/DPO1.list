
DPO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ebc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e398  080180a0  080180a0  000190a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026438  08026438  00028390  2**0
                  CONTENTS
  4 .ARM          00000008  08026438  08026438  00027438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026440  08026440  00028390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026440  08026440  00027440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08026444  08026444  00027444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000390  20000000  08026448  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c4c  20000390  080267d8  00028390  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004fdc  080267d8  00028fdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00028390  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033447  00000000  00000000  000283c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000646e  00000000  00000000  0005b807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002af0  00000000  00000000  00061c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000214d  00000000  00000000  00064768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003369a  00000000  00000000  000668b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037ba2  00000000  00000000  00099f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014abb4  00000000  00000000  000d1af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021c6a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ceb4  00000000  00000000  0021c6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0022959c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000390 	.word	0x20000390
 80001fc:	00000000 	.word	0x00000000
 8000200:	08018084 	.word	0x08018084

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000394 	.word	0x20000394
 800021c:	08018084 	.word	0x08018084

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <handle_overflow>:
#include "mylib.h"

extern UART_HandleTypeDef DEBUG_UART;


void handle_overflow(uint32_t *value, int32_t delta, uint32_t lower_limit, uint32_t upper_limit) {
 8001034:	b480      	push	{r7}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	603b      	str	r3, [r7, #0]
    if (delta >= 0) {
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db11      	blt.n	800106c <handle_overflow+0x38>
        // 当 delta 为正数，做加法操作，需要检查是否会超过上限
        if (upper_limit - *value < (uint32_t)delta) {
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	1ad2      	subs	r2, r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	429a      	cmp	r2, r3
 8001054:	d203      	bcs.n	800105e <handle_overflow+0x2a>
            // 如果加上 delta 会超过上限，将 value 设置为上限
            *value = upper_limit;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	601a      	str	r2, [r3, #0]
        } else {
            // 否则正常减去 delta 的绝对值
            *value -= abs_delta;
        }
    }
}
 800105c:	e01a      	b.n	8001094 <handle_overflow+0x60>
            *value += (uint32_t)delta;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	441a      	add	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	601a      	str	r2, [r3, #0]
}
 800106a:	e013      	b.n	8001094 <handle_overflow+0x60>
        uint32_t abs_delta = (uint32_t)(-delta);
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	425b      	negs	r3, r3
 8001070:	617b      	str	r3, [r7, #20]
        if (*value < lower_limit + abs_delta) {
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	440b      	add	r3, r1
 800107c:	429a      	cmp	r2, r3
 800107e:	d203      	bcs.n	8001088 <handle_overflow+0x54>
            *value = lower_limit;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]
}
 8001086:	e005      	b.n	8001094 <handle_overflow+0x60>
            *value -= abs_delta;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	1ad2      	subs	r2, r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	601a      	str	r2, [r3, #0]
}
 8001094:	bf00      	nop
 8001096:	371c      	adds	r7, #28
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <__io_putchar>:



int __io_putchar(int ch)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&DEBUG_UART , (uint8_t *)&ch, 1, 0xFFFF);
 80010a8:	1d39      	adds	r1, r7, #4
 80010aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010ae:	2201      	movs	r2, #1
 80010b0:	4803      	ldr	r0, [pc, #12]	@ (80010c0 <__io_putchar+0x20>)
 80010b2:	f00d fe31 	bl	800ed18 <HAL_UART_Transmit>
    return ch;
 80010b6:	687b      	ldr	r3, [r7, #4]
};
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200007f4 	.word	0x200007f4

080010c4 <TLC5952_WriteBit>:
/**
 * @brief 发送单个 bit
 * @param bit 0 或 1
 */
void TLC5952_WriteBit(uint8_t bit)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
    if (bit)
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <TLC5952_WriteBit+0x1c>
        TLC5952_SIN_HIGH();
 80010d4:	2201      	movs	r2, #1
 80010d6:	2120      	movs	r1, #32
 80010d8:	480b      	ldr	r0, [pc, #44]	@ (8001108 <TLC5952_WriteBit+0x44>)
 80010da:	f006 fe8f 	bl	8007dfc <HAL_GPIO_WritePin>
 80010de:	e004      	b.n	80010ea <TLC5952_WriteBit+0x26>
    else
        TLC5952_SIN_LOW();
 80010e0:	2200      	movs	r2, #0
 80010e2:	2120      	movs	r1, #32
 80010e4:	4808      	ldr	r0, [pc, #32]	@ (8001108 <TLC5952_WriteBit+0x44>)
 80010e6:	f006 fe89 	bl	8007dfc <HAL_GPIO_WritePin>

    TLC5952_SCLK_HIGH();
 80010ea:	2201      	movs	r2, #1
 80010ec:	2108      	movs	r1, #8
 80010ee:	4806      	ldr	r0, [pc, #24]	@ (8001108 <TLC5952_WriteBit+0x44>)
 80010f0:	f006 fe84 	bl	8007dfc <HAL_GPIO_WritePin>
    TLC5952_SCLK_LOW();
 80010f4:	2200      	movs	r2, #0
 80010f6:	2108      	movs	r1, #8
 80010f8:	4803      	ldr	r0, [pc, #12]	@ (8001108 <TLC5952_WriteBit+0x44>)
 80010fa:	f006 fe7f 	bl	8007dfc <HAL_GPIO_WritePin>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	48000400 	.word	0x48000400

0800110c <TLC5952_WriteLED>:

/**
 * @brief 发送 24 位 LED 数据
 */
void TLC5952_WriteLED(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
    TLC5952_WriteBit(0);
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff ffd6 	bl	80010c4 <TLC5952_WriteBit>
    uint32_t *data = (uint32_t *)&allData;
 8001118:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <TLC5952_WriteLED+0x64>)
 800111a:	60bb      	str	r3, [r7, #8]
    for (int8_t i = 23; i >= 0; i--)
 800111c:	2317      	movs	r3, #23
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e013      	b.n	800114a <TLC5952_WriteLED+0x3e>
    {
        uint8_t currentBit = (*data >> i) & 0x01;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	fa22 f303 	lsr.w	r3, r2, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	71fb      	strb	r3, [r7, #7]
        TLC5952_WriteBit(currentBit);
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ffc3 	bl	80010c4 <TLC5952_WriteBit>
    for (int8_t i = 23; i >= 0; i--)
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	3b01      	subs	r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114e:	2b00      	cmp	r3, #0
 8001150:	dae7      	bge.n	8001122 <TLC5952_WriteLED+0x16>
    }
    TLC5952_LAT_HIGH();
 8001152:	2201      	movs	r2, #1
 8001154:	2110      	movs	r1, #16
 8001156:	4807      	ldr	r0, [pc, #28]	@ (8001174 <TLC5952_WriteLED+0x68>)
 8001158:	f006 fe50 	bl	8007dfc <HAL_GPIO_WritePin>
    TLC5952_LAT_LOW();
 800115c:	2200      	movs	r2, #0
 800115e:	2110      	movs	r1, #16
 8001160:	4804      	ldr	r0, [pc, #16]	@ (8001174 <TLC5952_WriteLED+0x68>)
 8001162:	f006 fe4b 	bl	8007dfc <HAL_GPIO_WritePin>
}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200003ac 	.word	0x200003ac
 8001174:	48000400 	.word	0x48000400

08001178 <TLC5952_WriteControl>:


/**
 * @brief 发送 24 位 控制 数据
 */
void TLC5952_WriteControl(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
    TLC5952_WriteBit(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f7ff ffa0 	bl	80010c4 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 8001184:	2306      	movs	r3, #6
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	e012      	b.n	80011b0 <TLC5952_WriteControl+0x38>
        TLC5952_WriteBit((allData.red_brightness >> i) & 0x01);
 800118a:	4b37      	ldr	r3, [pc, #220]	@ (8001268 <TLC5952_WriteControl+0xf0>)
 800118c:	78db      	ldrb	r3, [r3, #3]
 800118e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001192:	b2db      	uxtb	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	fa42 f303 	asr.w	r3, r2, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff8d 	bl	80010c4 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	dae9      	bge.n	800118a <TLC5952_WriteControl+0x12>
    }
    for (int i = 6; i >= 0; i--) {
 80011b6:	2306      	movs	r3, #6
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	e012      	b.n	80011e2 <TLC5952_WriteControl+0x6a>
        TLC5952_WriteBit((allData.green_brightness >> i) & 0x01);
 80011bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001268 <TLC5952_WriteControl+0xf0>)
 80011be:	791b      	ldrb	r3, [r3, #4]
 80011c0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	fa42 f303 	asr.w	r3, r2, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff74 	bl	80010c4 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	3b01      	subs	r3, #1
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	dae9      	bge.n	80011bc <TLC5952_WriteControl+0x44>
    }
    for (int i = 6; i >= 0; i--) {
 80011e8:	2306      	movs	r3, #6
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	e012      	b.n	8001214 <TLC5952_WriteControl+0x9c>
        TLC5952_WriteBit((allData.blue_brightness >> i) & 0x01);
 80011ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001268 <TLC5952_WriteControl+0xf0>)
 80011f0:	889b      	ldrh	r3, [r3, #4]
 80011f2:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	fa42 f303 	asr.w	r3, r2, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff5b 	bl	80010c4 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3b01      	subs	r3, #1
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	dae9      	bge.n	80011ee <TLC5952_WriteControl+0x76>
    }
    for (int i = 2; i >= 0; i--) {
 800121a:	2302      	movs	r3, #2
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	e012      	b.n	8001246 <TLC5952_WriteControl+0xce>
        TLC5952_WriteBit((allData.detection_voltage_select >> i) & 0x01);
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <TLC5952_WriteControl+0xf0>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f3c3 3382 	ubfx	r3, r3, #14, #3
 8001228:	b2db      	uxtb	r3, r3
 800122a:	461a      	mov	r2, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	fa42 f303 	asr.w	r3, r2, r3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff42 	bl	80010c4 <TLC5952_WriteBit>
    for (int i = 2; i >= 0; i--) {
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	3b01      	subs	r3, #1
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	dae9      	bge.n	8001220 <TLC5952_WriteControl+0xa8>
    }
    TLC5952_LAT_HIGH();
 800124c:	2201      	movs	r2, #1
 800124e:	2110      	movs	r1, #16
 8001250:	4806      	ldr	r0, [pc, #24]	@ (800126c <TLC5952_WriteControl+0xf4>)
 8001252:	f006 fdd3 	bl	8007dfc <HAL_GPIO_WritePin>
    TLC5952_LAT_LOW();
 8001256:	2200      	movs	r2, #0
 8001258:	2110      	movs	r1, #16
 800125a:	4804      	ldr	r0, [pc, #16]	@ (800126c <TLC5952_WriteControl+0xf4>)
 800125c:	f006 fdce 	bl	8007dfc <HAL_GPIO_WritePin>
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200003ac 	.word	0x200003ac
 800126c:	48000400 	.word	0x48000400

08001270 <View_DoubaoWelcome>:
		ST7789_DrawCircle(90, 210, 10, WHITE);
		ST7789_DrawRectangle(140, 200, 160, 220, WHITE);
	}


void View_DoubaoWelcome(void){
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af04      	add	r7, sp, #16
		ST7789_DrawImage(10, 10, 160, 160, (uint16_t *)doubao);
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <View_DoubaoWelcome+0x38>)
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	23a0      	movs	r3, #160	@ 0xa0
 800127c:	22a0      	movs	r2, #160	@ 0xa0
 800127e:	210a      	movs	r1, #10
 8001280:	200a      	movs	r0, #10
 8001282:	f001 fefa 	bl	800307a <ST7789_DrawImage>
		ST7789_WriteString(0, 180, " !\"#$\%&\'\(\)", Han_Array32, WHITE, BLACK);
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <View_DoubaoWelcome+0x3c>)
 8001288:	2200      	movs	r2, #0
 800128a:	9202      	str	r2, [sp, #8]
 800128c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001290:	9201      	str	r2, [sp, #4]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	9200      	str	r2, [sp, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a05      	ldr	r2, [pc, #20]	@ (80012b0 <View_DoubaoWelcome+0x40>)
 800129a:	21b4      	movs	r1, #180	@ 0xb4
 800129c:	2000      	movs	r0, #0
 800129e:	f001 ffa5 	bl	80031ec <ST7789_WriteString>
//		ST7789_WriteString(170, 180, "", Han_Array, WHITE, BLACK);
	}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	0801954c 	.word	0x0801954c
 80012ac:	20000008 	.word	0x20000008
 80012b0:	080180a0 	.word	0x080180a0

080012b4 <View_Config>:
	ST7789_WriteString(200, 220, BUFFER_Display, Font_11x18, WHITE, BLACK);

	}


void View_Config(void){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af04      	add	r7, sp, #16

	ST7789_Fill_Color(WHITE);
 80012ba:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80012be:	f001 fe87 	bl	8002fd0 <ST7789_Fill_Color>
	sprintf(BUFFER_Display,"ENC1:%5d",htim4.Instance->CNT);
 80012c2:	4b0d      	ldr	r3, [pc, #52]	@ (80012f8 <View_Config+0x44>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <View_Config+0x48>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ce:	461a      	mov	r2, r3
 80012d0:	490b      	ldr	r1, [pc, #44]	@ (8001300 <View_Config+0x4c>)
 80012d2:	f013 fa9b 	bl	801480c <siprintf>
	ST7789_WriteString(10, 10, "CONFIG", Font_16x26, WHITE, BLACK);
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <View_Config+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	9202      	str	r2, [sp, #8]
 80012dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012e0:	9201      	str	r2, [sp, #4]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	9200      	str	r2, [sp, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a07      	ldr	r2, [pc, #28]	@ (8001308 <View_Config+0x54>)
 80012ea:	210a      	movs	r1, #10
 80012ec:	200a      	movs	r0, #10
 80012ee:	f001 ff7d 	bl	80031ec <ST7789_WriteString>

	}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20003a40 	.word	0x20003a40
 80012fc:	20000b10 	.word	0x20000b10
 8001300:	080180ac 	.word	0x080180ac
 8001304:	20000000 	.word	0x20000000
 8001308:	0801810c 	.word	0x0801810c

0800130c <FT6336_ReadRegister>:

HAL_StatusTypeDef FT6336_WriteRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
    return HAL_I2C_Mem_Write(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
}

HAL_StatusTypeDef FT6336_ReadRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af04      	add	r7, sp, #16
 8001312:	4603      	mov	r3, r0
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	71fb      	strb	r3, [r7, #7]
 8001318:	4613      	mov	r3, r2
 800131a:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	b29a      	uxth	r2, r3
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	88bb      	ldrh	r3, [r7, #4]
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2301      	movs	r3, #1
 8001330:	2170      	movs	r1, #112	@ 0x70
 8001332:	4804      	ldr	r0, [pc, #16]	@ (8001344 <FT6336_ReadRegister+0x38>)
 8001334:	f007 febe 	bl	80090b4 <HAL_I2C_Mem_Read>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200007a0 	.word	0x200007a0

08001348 <FT6336_Init>:

void FT6336_Init(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
    FT6336_RST_L;
 800134e:	2200      	movs	r2, #0
 8001350:	2104      	movs	r1, #4
 8001352:	480f      	ldr	r0, [pc, #60]	@ (8001390 <FT6336_Init+0x48>)
 8001354:	f006 fd52 	bl	8007dfc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001358:	200a      	movs	r0, #10
 800135a:	f003 f99f 	bl	800469c <HAL_Delay>
    FT6336_RST_H;
 800135e:	2201      	movs	r2, #1
 8001360:	2104      	movs	r1, #4
 8001362:	480b      	ldr	r0, [pc, #44]	@ (8001390 <FT6336_Init+0x48>)
 8001364:	f006 fd4a 	bl	8007dfc <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001368:	2032      	movs	r0, #50	@ 0x32
 800136a:	f003 f997 	bl	800469c <HAL_Delay>
//    FT6336_WriteRegister(0x00, 0x00,1);
//
//    // 设置 ID_G_MODE 为 0x00（启用中断输出）
//    FT6336_WriteRegister(0xA4, 0x00,1);

    uint8_t id = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	71fb      	strb	r3, [r7, #7]
    FT6336_ReadRegister(FT6336_FOCALTECH_ID, &id, 1);
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	2201      	movs	r2, #1
 8001376:	4619      	mov	r1, r3
 8001378:	20a8      	movs	r0, #168	@ 0xa8
 800137a:	f7ff ffc7 	bl	800130c <FT6336_ReadRegister>
    HAL_Delay(1000);
 800137e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001382:	f003 f98b 	bl	800469c <HAL_Delay>
//    HAL_Delay(1000);
    //used to debug IIC



}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	48000c00 	.word	0x48000c00

08001394 <AdjustTouchCoordinates>:

static void AdjustTouchCoordinates(uint16_t *x, uint16_t *y) {
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
    uint16_t rawX = *x;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	81fb      	strh	r3, [r7, #14]
    uint16_t rawY = *y;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	81bb      	strh	r3, [r7, #12]
//
//    *x = (*x * SCREEN_WIDTH) / TOUCH_WIDTH;
//    *y = (*y * SCREEN_HEIGHT) / TOUCH_HEIGHT;

    // 情况 X：特殊处理
    *x = rawY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	89ba      	ldrh	r2, [r7, #12]
 80013ae:	801a      	strh	r2, [r3, #0]
    *y = SCREEN_HEIGHT-rawX;
 80013b0:	89fb      	ldrh	r3, [r7, #14]
 80013b2:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	801a      	strh	r2, [r3, #0]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <FT6336_GetTouchPoint>:





void FT6336_GetTouchPoint(TouchPoints_HandleTypeDef *touchPoints) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
    uint8_t touchStatus = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73bb      	strb	r3, [r7, #14]
    uint8_t touchData[4];  // 存储两个点的坐标数据 (每个点4个字节)

    // 读取触摸状态寄存器
    FT6336_ReadRegister(FT6336_TD_STATUS, &touchStatus, 1);
 80013d4:	f107 030e 	add.w	r3, r7, #14
 80013d8:	2201      	movs	r2, #1
 80013da:	4619      	mov	r1, r3
 80013dc:	2002      	movs	r0, #2
 80013de:	f7ff ff95 	bl	800130c <FT6336_ReadRegister>
    uint8_t touchCount = touchStatus & 0x0F;  // 获取触摸点数量
 80013e2:	7bbb      	ldrb	r3, [r7, #14]
 80013e4:	f003 030f 	and.w	r3, r3, #15
 80013e8:	73fb      	strb	r3, [r7, #15]

    if (touchCount > 0) {
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d054      	beq.n	800149a <FT6336_GetTouchPoint+0xd2>
        // 读取第一个触摸点的坐标 (4个字节)
    	FT6336_ReadRegister(FT6336_P1_XH, touchData, 4);
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	2204      	movs	r2, #4
 80013f6:	4619      	mov	r1, r3
 80013f8:	2003      	movs	r0, #3
 80013fa:	f7ff ff87 	bl	800130c <FT6336_ReadRegister>
        touchPoints->point1_x = ((touchData[0] & 0x0F) << 8) | touchData[1];
 80013fe:	7a3b      	ldrb	r3, [r7, #8]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	b21b      	sxth	r3, r3
 8001404:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001408:	b21a      	sxth	r2, r3
 800140a:	7a7b      	ldrb	r3, [r7, #9]
 800140c:	b21b      	sxth	r3, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	b21b      	sxth	r3, r3
 8001412:	b29a      	uxth	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	801a      	strh	r2, [r3, #0]
        touchPoints->point1_y = ((touchData[2] & 0x0F) << 8) | touchData[3];
 8001418:	7abb      	ldrb	r3, [r7, #10]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21b      	sxth	r3, r3
 800141e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001422:	b21a      	sxth	r2, r3
 8001424:	7afb      	ldrb	r3, [r7, #11]
 8001426:	b21b      	sxth	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	b21b      	sxth	r3, r3
 800142c:	b29a      	uxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	805a      	strh	r2, [r3, #2]
        AdjustTouchCoordinates(&touchPoints->point1_x, &touchPoints->point1_y);  // 调整第一个触摸点坐标
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3302      	adds	r3, #2
 8001438:	4619      	mov	r1, r3
 800143a:	4610      	mov	r0, r2
 800143c:	f7ff ffaa 	bl	8001394 <AdjustTouchCoordinates>

        if (touchCount > 1) {
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d929      	bls.n	800149a <FT6336_GetTouchPoint+0xd2>
            // 读取第二个触摸点的坐标 (4个字节)
        	FT6336_ReadRegister(FT6336_P2_XH, &touchData[4], 4);
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	3304      	adds	r3, #4
 800144c:	2204      	movs	r2, #4
 800144e:	4619      	mov	r1, r3
 8001450:	2009      	movs	r0, #9
 8001452:	f7ff ff5b 	bl	800130c <FT6336_ReadRegister>
            touchPoints->point2_x = ((touchData[4] & 0x0F) << 8) | touchData[5];
 8001456:	7b3b      	ldrb	r3, [r7, #12]
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	b21b      	sxth	r3, r3
 800145c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001460:	b21a      	sxth	r2, r3
 8001462:	7b7b      	ldrb	r3, [r7, #13]
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21b      	sxth	r3, r3
 800146a:	b29a      	uxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	809a      	strh	r2, [r3, #4]
            touchPoints->point2_y = ((touchData[6] & 0x0F) << 8) | touchData[7];
 8001470:	7bbb      	ldrb	r3, [r7, #14]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21b      	sxth	r3, r3
 8001476:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800147a:	b21a      	sxth	r2, r3
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	b21b      	sxth	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b21b      	sxth	r3, r3
 8001484:	b29a      	uxth	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	80da      	strh	r2, [r3, #6]
            AdjustTouchCoordinates(&touchPoints->point2_x, &touchPoints->point2_y);  // 调整第二个触摸点坐标
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	1d1a      	adds	r2, r3, #4
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3306      	adds	r3, #6
 8001492:	4619      	mov	r1, r3
 8001494:	4610      	mov	r0, r2
 8001496:	f7ff ff7d 	bl	8001394 <AdjustTouchCoordinates>
        }
    }
}
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <Analog_FE_Update>:
                           .CD_CH1 = 0,
                           .CD_CH2 = 0,
                           .OFFSET1 = 2200,
                           .OFFSET2 = 2200};

void Analog_FE_Update(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(AC_DC_CH1_GPIO_Port, AC_DC_CH1_Pin,
                    (GPIO_PinState)FEAnalog.AC_DC_CH1);
 80014a8:	4b47      	ldr	r3, [pc, #284]	@ (80015c8 <Analog_FE_Update+0x124>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80014b0:	b2db      	uxtb	r3, r3
  HAL_GPIO_WritePin(AC_DC_CH1_GPIO_Port, AC_DC_CH1_Pin,
 80014b2:	461a      	mov	r2, r3
 80014b4:	2120      	movs	r1, #32
 80014b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ba:	f006 fc9f 	bl	8007dfc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(CD_CH1_A_GPIO_Port, CD_CH1_A_Pin,
                    (GPIO_PinState)((FEAnalog.CD_CH1 >> 0) & 0x01));
 80014be:	4b42      	ldr	r3, [pc, #264]	@ (80015c8 <Analog_FE_Update+0x124>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	b2db      	uxtb	r3, r3
  HAL_GPIO_WritePin(CD_CH1_A_GPIO_Port, CD_CH1_A_Pin,
 80014ce:	461a      	mov	r2, r3
 80014d0:	2120      	movs	r1, #32
 80014d2:	483e      	ldr	r0, [pc, #248]	@ (80015cc <Analog_FE_Update+0x128>)
 80014d4:	f006 fc92 	bl	8007dfc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CD_CH1_B_GPIO_Port, CD_CH1_B_Pin,
                    (GPIO_PinState)((FEAnalog.CD_CH1 >> 1) & 0x01));
 80014d8:	4b3b      	ldr	r3, [pc, #236]	@ (80015c8 <Analog_FE_Update+0x124>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	105b      	asrs	r3, r3, #1
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	b2db      	uxtb	r3, r3
  HAL_GPIO_WritePin(CD_CH1_B_GPIO_Port, CD_CH1_B_Pin,
 80014ec:	461a      	mov	r2, r3
 80014ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014f2:	4837      	ldr	r0, [pc, #220]	@ (80015d0 <Analog_FE_Update+0x12c>)
 80014f4:	f006 fc82 	bl	8007dfc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CD_CH1_C_GPIO_Port, CD_CH1_C_Pin,
                    (GPIO_PinState)((FEAnalog.CD_CH1 >> 2) & 0x01));
 80014f8:	4b33      	ldr	r3, [pc, #204]	@ (80015c8 <Analog_FE_Update+0x124>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	109b      	asrs	r3, r3, #2
 8001504:	b2db      	uxtb	r3, r3
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	b2db      	uxtb	r3, r3
  HAL_GPIO_WritePin(CD_CH1_C_GPIO_Port, CD_CH1_C_Pin,
 800150c:	461a      	mov	r2, r3
 800150e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001512:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001516:	f006 fc71 	bl	8007dfc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(AC_DC_CH2_GPIO_Port, AC_DC_CH2_Pin,
                    (GPIO_PinState)FEAnalog.AC_DC_CH2);
 800151a:	4b2b      	ldr	r3, [pc, #172]	@ (80015c8 <Analog_FE_Update+0x124>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001522:	b2db      	uxtb	r3, r3
  HAL_GPIO_WritePin(AC_DC_CH2_GPIO_Port, AC_DC_CH2_Pin,
 8001524:	461a      	mov	r2, r3
 8001526:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800152a:	4828      	ldr	r0, [pc, #160]	@ (80015cc <Analog_FE_Update+0x128>)
 800152c:	f006 fc66 	bl	8007dfc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(CD_CH2_A_GPIO_Port, CD_CH2_A_Pin,
                    (GPIO_PinState)((FEAnalog.CD_CH2 >> 0) & 0x01));
 8001530:	4b25      	ldr	r3, [pc, #148]	@ (80015c8 <Analog_FE_Update+0x124>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	b2db      	uxtb	r3, r3
  HAL_GPIO_WritePin(CD_CH2_A_GPIO_Port, CD_CH2_A_Pin,
 8001540:	461a      	mov	r2, r3
 8001542:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001546:	4821      	ldr	r0, [pc, #132]	@ (80015cc <Analog_FE_Update+0x128>)
 8001548:	f006 fc58 	bl	8007dfc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CD_CH2_B_GPIO_Port, CD_CH2_B_Pin,
                    (GPIO_PinState)((FEAnalog.CD_CH2 >> 1) & 0x01));
 800154c:	4b1e      	ldr	r3, [pc, #120]	@ (80015c8 <Analog_FE_Update+0x124>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001554:	b2db      	uxtb	r3, r3
 8001556:	105b      	asrs	r3, r3, #1
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	b2db      	uxtb	r3, r3
  HAL_GPIO_WritePin(CD_CH2_B_GPIO_Port, CD_CH2_B_Pin,
 8001560:	461a      	mov	r2, r3
 8001562:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001566:	4819      	ldr	r0, [pc, #100]	@ (80015cc <Analog_FE_Update+0x128>)
 8001568:	f006 fc48 	bl	8007dfc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CD_CH2_C_GPIO_Port, CD_CH2_C_Pin,
                    (GPIO_PinState)((FEAnalog.CD_CH2 >> 2) & 0x01));
 800156c:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <Analog_FE_Update+0x124>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	109b      	asrs	r3, r3, #2
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	b2db      	uxtb	r3, r3
  HAL_GPIO_WritePin(CD_CH2_C_GPIO_Port, CD_CH2_C_Pin,
 8001580:	461a      	mov	r2, r3
 8001582:	2102      	movs	r1, #2
 8001584:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001588:	f006 fc38 	bl	8007dfc <HAL_GPIO_WritePin>

  // SET OFFSET
  HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, FEAnalog.OFFSET1);
 800158c:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <Analog_FE_Update+0x124>)
 800158e:	885b      	ldrh	r3, [r3, #2]
 8001590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001594:	b29b      	uxth	r3, r3
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	480e      	ldr	r0, [pc, #56]	@ (80015d4 <Analog_FE_Update+0x130>)
 800159c:	f005 fe52 	bl	8007244 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, FEAnalog.OFFSET2);
 80015a0:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <Analog_FE_Update+0x124>)
 80015a2:	889b      	ldrh	r3, [r3, #4]
 80015a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	480a      	ldr	r0, [pc, #40]	@ (80015d8 <Analog_FE_Update+0x134>)
 80015b0:	f005 fe48 	bl	8007244 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 80015b4:	2100      	movs	r1, #0
 80015b6:	4807      	ldr	r0, [pc, #28]	@ (80015d4 <Analog_FE_Update+0x130>)
 80015b8:	f005 fdd8 	bl	800716c <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80015bc:	2100      	movs	r1, #0
 80015be:	4806      	ldr	r0, [pc, #24]	@ (80015d8 <Analog_FE_Update+0x134>)
 80015c0:	f005 fdd4 	bl	800716c <HAL_DAC_Start>
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000038 	.word	0x20000038
 80015cc:	48000800 	.word	0x48000800
 80015d0:	48000400 	.word	0x48000400
 80015d4:	2000067c 	.word	0x2000067c
 80015d8:	20000668 	.word	0x20000668

080015dc <ENC_PROCESS>:

// 编码器处理函数
void KEY_PROCESS(void) {}

// 编码器处理函数
void ENC_PROCESS(void) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
  int32_t diff;
  uint32_t current_cnt;

  current_cnt = htim4.Instance->CNT;
 80015e2:	4b25      	ldr	r3, [pc, #148]	@ (8001678 <ENC_PROCESS+0x9c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e8:	607b      	str	r3, [r7, #4]
  htim4.Instance->CNT = 32767;
 80015ea:	4b23      	ldr	r3, [pc, #140]	@ (8001678 <ENC_PROCESS+0x9c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80015f2:	625a      	str	r2, [r3, #36]	@ 0x24
  diff = (int32_t)(current_cnt - 32767);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 80015fa:	3b7f      	subs	r3, #127	@ 0x7f
 80015fc:	603b      	str	r3, [r7, #0]

  current_cnt = htim3.Instance->CNT;
 80015fe:	4b1f      	ldr	r3, [pc, #124]	@ (800167c <ENC_PROCESS+0xa0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001604:	607b      	str	r3, [r7, #4]
  htim3.Instance->CNT = 32767;
 8001606:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <ENC_PROCESS+0xa0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800160e:	625a      	str	r2, [r3, #36]	@ 0x24
  diff = (int32_t)(current_cnt - 32767);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8001616:	3b7f      	subs	r3, #127	@ 0x7f
 8001618:	603b      	str	r3, [r7, #0]

  current_cnt = htim20.Instance->CNT;
 800161a:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <ENC_PROCESS+0xa4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001620:	607b      	str	r3, [r7, #4]
  htim20.Instance->CNT = 32767;
 8001622:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <ENC_PROCESS+0xa4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800162a:	625a      	str	r2, [r3, #36]	@ 0x24
  diff = (int32_t)(32767 - current_cnt);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8001632:	337f      	adds	r3, #127	@ 0x7f
 8001634:	603b      	str	r3, [r7, #0]
  handle_overflow(&htim8.Instance->CCR1, diff, 4, 180);
 8001636:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <ENC_PROCESS+0xa8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800163e:	23b4      	movs	r3, #180	@ 0xb4
 8001640:	2204      	movs	r2, #4
 8001642:	6839      	ldr	r1, [r7, #0]
 8001644:	f7ff fcf6 	bl	8001034 <handle_overflow>

  current_cnt = htim1.Instance->CNT;
 8001648:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <ENC_PROCESS+0xac>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164e:	607b      	str	r3, [r7, #4]
  htim1.Instance->CNT = 32767;
 8001650:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <ENC_PROCESS+0xac>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001658:	625a      	str	r2, [r3, #36]	@ 0x24
  diff = (int32_t)(current_cnt - 32767);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8001660:	3b7f      	subs	r3, #127	@ 0x7f
 8001662:	603b      	str	r3, [r7, #0]
  handle_overflow(&WS2812_Brightness, diff, 0, 255);
 8001664:	23ff      	movs	r3, #255	@ 0xff
 8001666:	2200      	movs	r2, #0
 8001668:	6839      	ldr	r1, [r7, #0]
 800166a:	4808      	ldr	r0, [pc, #32]	@ (800168c <ENC_PROCESS+0xb0>)
 800166c:	f7ff fce2 	bl	8001034 <handle_overflow>
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000b10 	.word	0x20000b10
 800167c:	20000ac4 	.word	0x20000ac4
 8001680:	20000c8c 	.word	0x20000c8c
 8001684:	20000bf4 	.word	0x20000bf4
 8001688:	20000a78 	.word	0x20000a78
 800168c:	20000044 	.word	0x20000044

08001690 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8001696:	f002 ff90 	bl	80045ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800169a:	f000 f8cd 	bl	8001838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169e:	f001 f9d5 	bl	8002a4c <MX_GPIO_Init>
  MX_DMA_Init();
 80016a2:	f001 f981 	bl	80029a8 <MX_DMA_Init>
  MX_USB_Device_Init();
 80016a6:	f011 fc8d 	bl	8012fc4 <MX_USB_Device_Init>
  MX_COMP2_Init();
 80016aa:	f000 fac7 	bl	8001c3c <MX_COMP2_Init>
  MX_COMP5_Init();
 80016ae:	f000 faeb 	bl	8001c88 <MX_COMP5_Init>
  MX_DAC1_Init();
 80016b2:	f000 fb0f 	bl	8001cd4 <MX_DAC1_Init>
  MX_DAC2_Init();
 80016b6:	f000 fb57 	bl	8001d68 <MX_DAC2_Init>
  MX_OPAMP1_Init();
 80016ba:	f000 fd3b 	bl	8002134 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 80016be:	f000 fd65 	bl	800218c <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 80016c2:	f000 fd89 	bl	80021d8 <MX_OPAMP3_Init>
  MX_OPAMP6_Init();
 80016c6:	f000 fdd3 	bl	8002270 <MX_OPAMP6_Init>
  MX_TIM1_Init();
 80016ca:	f000 fe3b 	bl	8002344 <MX_TIM1_Init>
  MX_TIM4_Init();
 80016ce:	f000 fee9 	bl	80024a4 <MX_TIM4_Init>
  MX_TIM20_Init();
 80016d2:	f001 f90f 	bl	80028f4 <MX_TIM20_Init>
  MX_TIM3_Init();
 80016d6:	f000 fe8f 	bl	80023f8 <MX_TIM3_Init>
  MX_ADC5_Init();
 80016da:	f000 f9dd 	bl	8001a98 <MX_ADC5_Init>
  MX_TIM15_Init();
 80016de:	f001 f865 	bl	80027ac <MX_TIM15_Init>
  MX_TIM8_Init();
 80016e2:	f000 ffa1 	bl	8002628 <MX_TIM8_Init>
  MX_SPI3_Init();
 80016e6:	f000 fdef 	bl	80022c8 <MX_SPI3_Init>
  MX_I2C3_Init();
 80016ea:	f000 fc99 	bl	8002020 <MX_I2C3_Init>
  MX_DAC4_Init();
 80016ee:	f000 fb75 	bl	8001ddc <MX_DAC4_Init>
  MX_LPUART1_UART_Init();
 80016f2:	f000 fcd5 	bl	80020a0 <MX_LPUART1_UART_Init>
  MX_OPAMP5_Init();
 80016f6:	f000 fd95 	bl	8002224 <MX_OPAMP5_Init>
  MX_TIM7_Init();
 80016fa:	f000 ff5f 	bl	80025bc <MX_TIM7_Init>
  MX_ADC2_Init();
 80016fe:	f000 f8e9 	bl	80018d4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001702:	f000 f94f 	bl	80019a4 <MX_ADC3_Init>
  MX_TIM6_Init();
 8001706:	f000 ff23 	bl	8002550 <MX_TIM6_Init>
  MX_HRTIM1_Init();
 800170a:	f000 fba1 	bl	8001e50 <MX_HRTIM1_Init>
  /* USER CODE BEGIN 2 */

  htim1.Instance->CNT = 32767;
 800170e:	4b39      	ldr	r3, [pc, #228]	@ (80017f4 <main+0x164>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001716:	625a      	str	r2, [r3, #36]	@ 0x24
  htim3.Instance->CNT = 32767;
 8001718:	4b37      	ldr	r3, [pc, #220]	@ (80017f8 <main+0x168>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001720:	625a      	str	r2, [r3, #36]	@ 0x24
  htim4.Instance->CNT = 32767;
 8001722:	4b36      	ldr	r3, [pc, #216]	@ (80017fc <main+0x16c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800172a:	625a      	str	r2, [r3, #36]	@ 0x24
  htim20.Instance->CNT = 32767;
 800172c:	4b34      	ldr	r3, [pc, #208]	@ (8001800 <main+0x170>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24
  //  HAL_OPAMP_Start(&hopamp3);
  //  HAL_OPAMP_Start(&hopamp4);
  //  HAL_OPAMP_Start(&hopamp5);
  //  HAL_OPAMP_Start(&hopamp6);

  HAL_ADC_Start_DMA(&hadc2, BUFFER_DPO_CH1, DPO_DEEP);
 8001736:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800173a:	4932      	ldr	r1, [pc, #200]	@ (8001804 <main+0x174>)
 800173c:	4832      	ldr	r0, [pc, #200]	@ (8001808 <main+0x178>)
 800173e:	f003 fcc7 	bl	80050d0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, BUFFER_DPO_CH2, DPO_DEEP);
 8001742:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001746:	4931      	ldr	r1, [pc, #196]	@ (800180c <main+0x17c>)
 8001748:	4831      	ldr	r0, [pc, #196]	@ (8001810 <main+0x180>)
 800174a:	f003 fcc1 	bl	80050d0 <HAL_ADC_Start_DMA>

  HAL_ADC_Start_DMA(&hadc5, BUFFER_SYS_ADC, 5);
 800174e:	2205      	movs	r2, #5
 8001750:	4930      	ldr	r1, [pc, #192]	@ (8001814 <main+0x184>)
 8001752:	4831      	ldr	r0, [pc, #196]	@ (8001818 <main+0x188>)
 8001754:	f003 fcbc 	bl	80050d0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 8001758:	4830      	ldr	r0, [pc, #192]	@ (800181c <main+0x18c>)
 800175a:	f00b fc65 	bl	800d028 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim7);
 800175e:	4830      	ldr	r0, [pc, #192]	@ (8001820 <main+0x190>)
 8001760:	f00b fc62 	bl	800d028 <HAL_TIM_Base_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001764:	213c      	movs	r1, #60	@ 0x3c
 8001766:	4823      	ldr	r0, [pc, #140]	@ (80017f4 <main+0x164>)
 8001768:	f00c f914 	bl	800d994 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800176c:	213c      	movs	r1, #60	@ 0x3c
 800176e:	4822      	ldr	r0, [pc, #136]	@ (80017f8 <main+0x168>)
 8001770:	f00c f910 	bl	800d994 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001774:	213c      	movs	r1, #60	@ 0x3c
 8001776:	4821      	ldr	r0, [pc, #132]	@ (80017fc <main+0x16c>)
 8001778:	f00c f90c 	bl	800d994 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim20, TIM_CHANNEL_ALL);
 800177c:	213c      	movs	r1, #60	@ 0x3c
 800177e:	4820      	ldr	r0, [pc, #128]	@ (8001800 <main+0x170>)
 8001780:	f00c f908 	bl	800d994 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001784:	2100      	movs	r1, #0
 8001786:	4827      	ldr	r0, [pc, #156]	@ (8001824 <main+0x194>)
 8001788:	f00b fd20 	bl	800d1cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800178c:	2100      	movs	r1, #0
 800178e:	4826      	ldr	r0, [pc, #152]	@ (8001828 <main+0x198>)
 8001790:	f00b fd1c 	bl	800d1cc <HAL_TIM_PWM_Start>

  FT6336_Init();
 8001794:	f7ff fdd8 	bl	8001348 <FT6336_Init>
  ST7789_Init();
 8001798:	f001 fb74 	bl	8002e84 <ST7789_Init>

  View_DoubaoWelcome();
 800179c:	f7ff fd68 	bl	8001270 <View_DoubaoWelcome>

  HAL_HRTIM_WaveformOutputStart(
 80017a0:	2110      	movs	r1, #16
 80017a2:	4822      	ldr	r0, [pc, #136]	@ (800182c <main+0x19c>)
 80017a4:	f006 ff49 	bl	800863a <HAL_HRTIM_WaveformOutputStart>
      &hhrtim1, HRTIM_OUTPUT_TC1); // Enable the generation of the waveform
                                   // signal on the designated output
  HAL_HRTIM_WaveformCounterStart(
 80017a8:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80017ac:	481f      	ldr	r0, [pc, #124]	@ (800182c <main+0x19c>)
 80017ae:	f006 ff71 	bl	8008694 <HAL_HRTIM_WaveformCountStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    ENC_PROCESS();
 80017b2:	f7ff ff13 	bl	80015dc <ENC_PROCESS>
    //	  ST7789_Test();
    //	  ST7789_WriteString(10, 10, " !\"#\%\$", Han_Array, WHITE, BLACK);

    Analog_FE_Update();
 80017b6:	f7ff fe75 	bl	80014a4 <Analog_FE_Update>

    View_Config();
 80017ba:	f7ff fd7b 	bl	80012b4 <View_Config>

    // 可以在这里处理 ADC 转换结果
    for (int i = 0; i < DPO_DEEP; i++) {
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	e00a      	b.n	80017da <main+0x14a>

      //        sprintf(BUFFER_CDC,"ADC: %d\n", BUFFER_DPO_CH1[i]);
      //    	CDC_Transmit_FS(BUFFER_CDC, strlen(BUFFER_CDC));

      printf("ADC: %d\n", BUFFER_DPO_CH1[i]);
 80017c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001804 <main+0x174>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017cc:	4619      	mov	r1, r3
 80017ce:	4818      	ldr	r0, [pc, #96]	@ (8001830 <main+0x1a0>)
 80017d0:	f013 f80a 	bl	80147e8 <iprintf>
    for (int i = 0; i < DPO_DEEP; i++) {
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3301      	adds	r3, #1
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017e0:	dbf0      	blt.n	80017c4 <main+0x134>
    }

    TLC5952_WriteLED();
 80017e2:	f7ff fc93 	bl	800110c <TLC5952_WriteLED>
    TLC5952_WriteControl();
 80017e6:	f7ff fcc7 	bl	8001178 <TLC5952_WriteControl>

    WS2812_Write_Colors(rainbow_colors, 10);
 80017ea:	210a      	movs	r1, #10
 80017ec:	4811      	ldr	r0, [pc, #68]	@ (8001834 <main+0x1a4>)
 80017ee:	f002 fe5d 	bl	80044ac <WS2812_Write_Colors>
    ENC_PROCESS();
 80017f2:	e7de      	b.n	80017b2 <main+0x122>
 80017f4:	20000a78 	.word	0x20000a78
 80017f8:	20000ac4 	.word	0x20000ac4
 80017fc:	20000b10 	.word	0x20000b10
 8001800:	20000c8c 	.word	0x20000c8c
 8001804:	20000dac 	.word	0x20000dac
 8001808:	200003bc 	.word	0x200003bc
 800180c:	20001dac 	.word	0x20001dac
 8001810:	20000428 	.word	0x20000428
 8001814:	20000d98 	.word	0x20000d98
 8001818:	20000494 	.word	0x20000494
 800181c:	20000b5c 	.word	0x20000b5c
 8001820:	20000ba8 	.word	0x20000ba8
 8001824:	20000c40 	.word	0x20000c40
 8001828:	20000bf4 	.word	0x20000bf4
 800182c:	200006a4 	.word	0x200006a4
 8001830:	08018114 	.word	0x08018114
 8001834:	20000010 	.word	0x20000010

08001838 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b094      	sub	sp, #80	@ 0x50
 800183c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183e:	f107 0318 	add.w	r3, r7, #24
 8001842:	2238      	movs	r2, #56	@ 0x38
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f013 f843 	bl	80148d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800185a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800185e:	f009 fe1b 	bl	800b498 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType =
 8001862:	2321      	movs	r3, #33	@ 0x21
 8001864:	61bb      	str	r3, [r7, #24]
      RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001866:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800186a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800186c:	2301      	movs	r3, #1
 800186e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001870:	2302      	movs	r3, #2
 8001872:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001874:	2303      	movs	r3, #3
 8001876:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001878:	2302      	movs	r3, #2
 800187a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 800187c:	235a      	movs	r3, #90	@ 0x5a
 800187e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001880:	2306      	movs	r3, #6
 8001882:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001884:	2302      	movs	r3, #2
 8001886:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001888:	2302      	movs	r3, #2
 800188a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800188c:	f107 0318 	add.w	r3, r7, #24
 8001890:	4618      	mov	r0, r3
 8001892:	f009 feb5 	bl	800b600 <HAL_RCC_OscConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0x68>
    Error_Handler();
 800189c:	f001 f9f0 	bl	8002c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80018a0:	230f      	movs	r3, #15
 80018a2:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a4:	2303      	movs	r3, #3
 80018a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2104      	movs	r1, #4
 80018b8:	4618      	mov	r0, r3
 80018ba:	f00a f9b3 	bl	800bc24 <HAL_RCC_ClockConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0x90>
    Error_Handler();
 80018c4:	f001 f9dc 	bl	8002c80 <Error_Handler>
  }

  /** Enables the Clock Security System
   */
  HAL_RCC_EnableCSS();
 80018c8:	f00a fb82 	bl	800bfd0 <HAL_RCC_EnableCSS>
}
 80018cc:	bf00      	nop
 80018ce:	3750      	adds	r7, #80	@ 0x50
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018da:	463b      	mov	r3, r7
 80018dc:	2220      	movs	r2, #32
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f012 fff6 	bl	80148d2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
   */
  hadc2.Instance = ADC2;
 80018e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001998 <MX_ADC2_Init+0xc4>)
 80018e8:	4a2c      	ldr	r2, [pc, #176]	@ (800199c <MX_ADC2_Init+0xc8>)
 80018ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001998 <MX_ADC2_Init+0xc4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80018f2:	4b29      	ldr	r3, [pc, #164]	@ (8001998 <MX_ADC2_Init+0xc4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018f8:	4b27      	ldr	r3, [pc, #156]	@ (8001998 <MX_ADC2_Init+0xc4>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80018fe:	4b26      	ldr	r3, [pc, #152]	@ (8001998 <MX_ADC2_Init+0xc4>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001904:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <MX_ADC2_Init+0xc4>)
 8001906:	2200      	movs	r2, #0
 8001908:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800190a:	4b23      	ldr	r3, [pc, #140]	@ (8001998 <MX_ADC2_Init+0xc4>)
 800190c:	2204      	movs	r2, #4
 800190e:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001910:	4b21      	ldr	r3, [pc, #132]	@ (8001998 <MX_ADC2_Init+0xc4>)
 8001912:	2200      	movs	r2, #0
 8001914:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001916:	4b20      	ldr	r3, [pc, #128]	@ (8001998 <MX_ADC2_Init+0xc4>)
 8001918:	2200      	movs	r2, #0
 800191a:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800191c:	4b1e      	ldr	r3, [pc, #120]	@ (8001998 <MX_ADC2_Init+0xc4>)
 800191e:	2201      	movs	r2, #1
 8001920:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001922:	4b1d      	ldr	r3, [pc, #116]	@ (8001998 <MX_ADC2_Init+0xc4>)
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800192a:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <MX_ADC2_Init+0xc4>)
 800192c:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8001930:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001932:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <MX_ADC2_Init+0xc4>)
 8001934:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001938:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800193a:	4b17      	ldr	r3, [pc, #92]	@ (8001998 <MX_ADC2_Init+0xc4>)
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001942:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <MX_ADC2_Init+0xc4>)
 8001944:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001948:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800194a:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <MX_ADC2_Init+0xc4>)
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001952:	4811      	ldr	r0, [pc, #68]	@ (8001998 <MX_ADC2_Init+0xc4>)
 8001954:	f003 fa00 	bl	8004d58 <HAL_ADC_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_ADC2_Init+0x8e>
    Error_Handler();
 800195e:	f001 f98f 	bl	8002c80 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_4;
 8001962:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <MX_ADC2_Init+0xcc>)
 8001964:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001966:	2306      	movs	r3, #6
 8001968:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800196e:	237f      	movs	r3, #127	@ 0x7f
 8001970:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001972:	2304      	movs	r3, #4
 8001974:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 800197a:	463b      	mov	r3, r7
 800197c:	4619      	mov	r1, r3
 800197e:	4806      	ldr	r0, [pc, #24]	@ (8001998 <MX_ADC2_Init+0xc4>)
 8001980:	f003 ff02 	bl	8005788 <HAL_ADC_ConfigChannel>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_ADC2_Init+0xba>
    Error_Handler();
 800198a:	f001 f979 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */
}
 800198e:	bf00      	nop
 8001990:	3720      	adds	r7, #32
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200003bc 	.word	0x200003bc
 800199c:	50000100 	.word	0x50000100
 80019a0:	10c00010 	.word	0x10c00010

080019a4 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08c      	sub	sp, #48	@ 0x30
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80019aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2220      	movs	r2, #32
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f012 ff88 	bl	80148d2 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
   */
  hadc3.Instance = ADC3;
 80019c2:	4b32      	ldr	r3, [pc, #200]	@ (8001a8c <MX_ADC3_Init+0xe8>)
 80019c4:	4a32      	ldr	r2, [pc, #200]	@ (8001a90 <MX_ADC3_Init+0xec>)
 80019c6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80019c8:	4b30      	ldr	r3, [pc, #192]	@ (8001a8c <MX_ADC3_Init+0xe8>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80019ce:	4b2f      	ldr	r3, [pc, #188]	@ (8001a8c <MX_ADC3_Init+0xe8>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019d4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a8c <MX_ADC3_Init+0xe8>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80019da:	4b2c      	ldr	r3, [pc, #176]	@ (8001a8c <MX_ADC3_Init+0xe8>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019e0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a8c <MX_ADC3_Init+0xe8>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019e6:	4b29      	ldr	r3, [pc, #164]	@ (8001a8c <MX_ADC3_Init+0xe8>)
 80019e8:	2204      	movs	r2, #4
 80019ea:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80019ec:	4b27      	ldr	r3, [pc, #156]	@ (8001a8c <MX_ADC3_Init+0xe8>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80019f2:	4b26      	ldr	r3, [pc, #152]	@ (8001a8c <MX_ADC3_Init+0xe8>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80019f8:	4b24      	ldr	r3, [pc, #144]	@ (8001a8c <MX_ADC3_Init+0xe8>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80019fe:	4b23      	ldr	r3, [pc, #140]	@ (8001a8c <MX_ADC3_Init+0xe8>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001a06:	4b21      	ldr	r3, [pc, #132]	@ (8001a8c <MX_ADC3_Init+0xe8>)
 8001a08:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8001a0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a8c <MX_ADC3_Init+0xe8>)
 8001a10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a14:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001a16:	4b1d      	ldr	r3, [pc, #116]	@ (8001a8c <MX_ADC3_Init+0xe8>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a8c <MX_ADC3_Init+0xe8>)
 8001a20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a24:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001a26:	4b19      	ldr	r3, [pc, #100]	@ (8001a8c <MX_ADC3_Init+0xe8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8001a2e:	4817      	ldr	r0, [pc, #92]	@ (8001a8c <MX_ADC3_Init+0xe8>)
 8001a30:	f003 f992 	bl	8004d58 <HAL_ADC_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_ADC3_Init+0x9a>
    Error_Handler();
 8001a3a:	f001 f921 	bl	8002c80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
   */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK) {
 8001a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a46:	4619      	mov	r1, r3
 8001a48:	4810      	ldr	r0, [pc, #64]	@ (8001a8c <MX_ADC3_Init+0xe8>)
 8001a4a:	f004 fe6b 	bl	8006724 <HAL_ADCEx_MultiModeConfigChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_ADC3_Init+0xb4>
    Error_Handler();
 8001a54:	f001 f914 	bl	8002c80 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_5;
 8001a58:	4b0e      	ldr	r3, [pc, #56]	@ (8001a94 <MX_ADC3_Init+0xf0>)
 8001a5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a5c:	2306      	movs	r3, #6
 8001a5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a64:	237f      	movs	r3, #127	@ 0x7f
 8001a66:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a68:	2304      	movs	r3, #4
 8001a6a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	@ (8001a8c <MX_ADC3_Init+0xe8>)
 8001a76:	f003 fe87 	bl	8005788 <HAL_ADC_ConfigChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_ADC3_Init+0xe0>
    Error_Handler();
 8001a80:	f001 f8fe 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */
}
 8001a84:	bf00      	nop
 8001a86:	3730      	adds	r7, #48	@ 0x30
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000428 	.word	0x20000428
 8001a90:	50000400 	.word	0x50000400
 8001a94:	14f00020 	.word	0x14f00020

08001a98 <MX_ADC5_Init>:
/**
 * @brief ADC5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC5_Init(void) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b090      	sub	sp, #64	@ 0x40
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001a9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
 8001aac:	611a      	str	r2, [r3, #16]
 8001aae:	615a      	str	r2, [r3, #20]
 8001ab0:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f012 ff0a 	bl	80148d2 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
   */
  hadc5.Instance = ADC5;
 8001abe:	4b57      	ldr	r3, [pc, #348]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001ac0:	4a57      	ldr	r2, [pc, #348]	@ (8001c20 <MX_ADC5_Init+0x188>)
 8001ac2:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001ac4:	4b55      	ldr	r3, [pc, #340]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001aca:	4b54      	ldr	r3, [pc, #336]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ad0:	4b52      	ldr	r3, [pc, #328]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001ad6:	4b51      	ldr	r3, [pc, #324]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001adc:	4b4f      	ldr	r3, [pc, #316]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001ae2:	4b4e      	ldr	r3, [pc, #312]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001ae4:	2208      	movs	r2, #8
 8001ae6:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001ae8:	4b4c      	ldr	r3, [pc, #304]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8001aee:	4b4b      	ldr	r3, [pc, #300]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 5;
 8001af4:	4b49      	ldr	r3, [pc, #292]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001af6:	2205      	movs	r2, #5
 8001af8:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001afa:	4b48      	ldr	r3, [pc, #288]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 8001b02:	4b46      	ldr	r3, [pc, #280]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001b04:	f44f 62f8 	mov.w	r2, #1984	@ 0x7c0
 8001b08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001b0a:	4b44      	ldr	r3, [pc, #272]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001b0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b10:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001b12:	4b42      	ldr	r3, [pc, #264]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001b1a:	4b40      	ldr	r3, [pc, #256]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001b1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b20:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001b22:	4b3e      	ldr	r3, [pc, #248]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK) {
 8001b2a:	483c      	ldr	r0, [pc, #240]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001b2c:	f003 f914 	bl	8004d58 <HAL_ADC_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_ADC5_Init+0xa2>
    Error_Handler();
 8001b36:	f001 f8a3 	bl	8002c80 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
   */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8001b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c24 <MX_ADC5_Init+0x18c>)
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001b3e:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 8001b42:	62bb      	str	r3, [r7, #40]	@ 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 8001b44:	4b38      	ldr	r3, [pc, #224]	@ (8001c28 <MX_ADC5_Init+0x190>)
 8001b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  AnalogWDGConfig.ITMode = ENABLE;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  AnalogWDGConfig.HighThreshold = 4095;
 8001b4e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001b52:	637b      	str	r3, [r7, #52]	@ 0x34
  AnalogWDGConfig.LowThreshold = 3500;
 8001b54:	f640 53ac 	movw	r3, #3500	@ 0xdac
 8001b58:	63bb      	str	r3, [r7, #56]	@ 0x38
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_ADC_AnalogWDGConfig(&hadc5, &AnalogWDGConfig) != HAL_OK) {
 8001b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b62:	4619      	mov	r1, r3
 8001b64:	482d      	ldr	r0, [pc, #180]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001b66:	f004 fa4f 	bl	8006008 <HAL_ADC_AnalogWDGConfig>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_ADC5_Init+0xdc>
    Error_Handler();
 8001b70:	f001 f886 	bl	8002c80 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_2;
 8001b74:	4b2c      	ldr	r3, [pc, #176]	@ (8001c28 <MX_ADC5_Init+0x190>)
 8001b76:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b78:	2306      	movs	r3, #6
 8001b7a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001b7c:	2307      	movs	r3, #7
 8001b7e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b80:	237f      	movs	r3, #127	@ 0x7f
 8001b82:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b84:	2304      	movs	r3, #4
 8001b86:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK) {
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4822      	ldr	r0, [pc, #136]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001b92:	f003 fdf9 	bl	8005788 <HAL_ADC_ConfigChannel>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_ADC5_Init+0x108>
    Error_Handler();
 8001b9c:	f001 f870 	bl	8002c80 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC5;
 8001ba0:	4b22      	ldr	r3, [pc, #136]	@ (8001c2c <MX_ADC5_Init+0x194>)
 8001ba2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ba4:	230c      	movs	r3, #12
 8001ba6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK) {
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	481b      	ldr	r0, [pc, #108]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001bae:	f003 fdeb 	bl	8005788 <HAL_ADC_ConfigChannel>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_ADC5_Init+0x124>
    Error_Handler();
 8001bb8:	f001 f862 	bl	8002c80 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c30 <MX_ADC5_Init+0x198>)
 8001bbe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001bc0:	2312      	movs	r3, #18
 8001bc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK) {
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4814      	ldr	r0, [pc, #80]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001bca:	f003 fddd 	bl	8005788 <HAL_ADC_ConfigChannel>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_ADC5_Init+0x140>
    Error_Handler();
 8001bd4:	f001 f854 	bl	8002c80 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001bd8:	4b16      	ldr	r3, [pc, #88]	@ (8001c34 <MX_ADC5_Init+0x19c>)
 8001bda:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001bdc:	2318      	movs	r3, #24
 8001bde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK) {
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	4619      	mov	r1, r3
 8001be4:	480d      	ldr	r0, [pc, #52]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001be6:	f003 fdcf 	bl	8005788 <HAL_ADC_ConfigChannel>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_ADC5_Init+0x15c>
    Error_Handler();
 8001bf0:	f001 f846 	bl	8002c80 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 8001bf4:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <MX_ADC5_Init+0x1a0>)
 8001bf6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001bf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK) {
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4806      	ldr	r0, [pc, #24]	@ (8001c1c <MX_ADC5_Init+0x184>)
 8001c04:	f003 fdc0 	bl	8005788 <HAL_ADC_ConfigChannel>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_ADC5_Init+0x17a>
    Error_Handler();
 8001c0e:	f001 f837 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */
}
 8001c12:	bf00      	nop
 8001c14:	3740      	adds	r7, #64	@ 0x40
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000494 	.word	0x20000494
 8001c20:	50000600 	.word	0x50000600
 8001c24:	7dc00000 	.word	0x7dc00000
 8001c28:	08600004 	.word	0x08600004
 8001c2c:	90c00010 	.word	0x90c00010
 8001c30:	c7520000 	.word	0xc7520000
 8001c34:	cb840000 	.word	0xcb840000
 8001c38:	8c900008 	.word	0x8c900008

08001c3c <MX_COMP2_Init>:
/**
 * @brief COMP2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_COMP2_Init(void) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <MX_COMP2_Init+0x44>)
 8001c42:	4a10      	ldr	r2, [pc, #64]	@ (8001c84 <MX_COMP2_Init+0x48>)
 8001c44:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <MX_COMP2_Init+0x44>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <MX_COMP2_Init+0x44>)
 8001c4e:	2250      	movs	r2, #80	@ 0x50
 8001c50:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <MX_COMP2_Init+0x44>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <MX_COMP2_Init+0x44>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <MX_COMP2_Init+0x44>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <MX_COMP2_Init+0x44>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK) {
 8001c6a:	4805      	ldr	r0, [pc, #20]	@ (8001c80 <MX_COMP2_Init+0x44>)
 8001c6c:	f004 ffb2 	bl	8006bd4 <HAL_COMP_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_COMP2_Init+0x3e>
    Error_Handler();
 8001c76:	f001 f803 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000620 	.word	0x20000620
 8001c84:	40010204 	.word	0x40010204

08001c88 <MX_COMP5_Init>:
/**
 * @brief COMP5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_COMP5_Init(void) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <MX_COMP5_Init+0x44>)
 8001c8e:	4a10      	ldr	r2, [pc, #64]	@ (8001cd0 <MX_COMP5_Init+0x48>)
 8001c90:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001c92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ccc <MX_COMP5_Init+0x44>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	605a      	str	r2, [r3, #4]
  hcomp5.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8001c98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <MX_COMP5_Init+0x44>)
 8001c9a:	2250      	movs	r2, #80	@ 0x50
 8001c9c:	609a      	str	r2, [r3, #8]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ccc <MX_COMP5_Init+0x44>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001ca4:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <MX_COMP5_Init+0x44>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001caa:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <MX_COMP5_Init+0x44>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	615a      	str	r2, [r3, #20]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <MX_COMP5_Init+0x44>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp5) != HAL_OK) {
 8001cb6:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <MX_COMP5_Init+0x44>)
 8001cb8:	f004 ff8c 	bl	8006bd4 <HAL_COMP_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_COMP5_Init+0x3e>
    Error_Handler();
 8001cc2:	f000 ffdd 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000644 	.word	0x20000644
 8001cd0:	40010210 	.word	0x40010210

08001cd4 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08c      	sub	sp, #48	@ 0x30
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001cda:	463b      	mov	r3, r7
 8001cdc:	2230      	movs	r2, #48	@ 0x30
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f012 fdf6 	bl	80148d2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
   */
  hdac1.Instance = DAC1;
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <MX_DAC1_Init+0x8c>)
 8001ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8001d64 <MX_DAC1_Init+0x90>)
 8001cea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 8001cec:	481c      	ldr	r0, [pc, #112]	@ (8001d60 <MX_DAC1_Init+0x8c>)
 8001cee:	f005 fa1a 	bl	8007126 <HAL_DAC_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_DAC1_Init+0x28>
    Error_Handler();
 8001cf8:	f000 ffc2 	bl	8002c80 <Error_Handler>
  }

  /** DAC channel OUT1 config
   */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001d18:	2304      	movs	r3, #4
 8001d1a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001d20:	463b      	mov	r3, r7
 8001d22:	2200      	movs	r2, #0
 8001d24:	4619      	mov	r1, r3
 8001d26:	480e      	ldr	r0, [pc, #56]	@ (8001d60 <MX_DAC1_Init+0x8c>)
 8001d28:	f005 faba 	bl	80072a0 <HAL_DAC_ConfigChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_DAC1_Init+0x62>
    Error_Handler();
 8001d32:	f000 ffa5 	bl	8002c80 <Error_Handler>
  }

  /** DAC channel OUT2 config
   */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 8001d42:	463b      	mov	r3, r7
 8001d44:	2210      	movs	r2, #16
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	@ (8001d60 <MX_DAC1_Init+0x8c>)
 8001d4a:	f005 faa9 	bl	80072a0 <HAL_DAC_ConfigChannel>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_DAC1_Init+0x84>
    Error_Handler();
 8001d54:	f000 ff94 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */
}
 8001d58:	bf00      	nop
 8001d5a:	3730      	adds	r7, #48	@ 0x30
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000668 	.word	0x20000668
 8001d64:	50000800 	.word	0x50000800

08001d68 <MX_DAC2_Init>:
/**
 * @brief DAC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC2_Init(void) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08c      	sub	sp, #48	@ 0x30
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d6e:	463b      	mov	r3, r7
 8001d70:	2230      	movs	r2, #48	@ 0x30
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f012 fdac 	bl	80148d2 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
   */
  hdac2.Instance = DAC2;
 8001d7a:	4b16      	ldr	r3, [pc, #88]	@ (8001dd4 <MX_DAC2_Init+0x6c>)
 8001d7c:	4a16      	ldr	r2, [pc, #88]	@ (8001dd8 <MX_DAC2_Init+0x70>)
 8001d7e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK) {
 8001d80:	4814      	ldr	r0, [pc, #80]	@ (8001dd4 <MX_DAC2_Init+0x6c>)
 8001d82:	f005 f9d0 	bl	8007126 <HAL_DAC_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_DAC2_Init+0x28>
    Error_Handler();
 8001d8c:	f000 ff78 	bl	8002c80 <Error_Handler>
  }

  /** DAC channel OUT1 config
   */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001d90:	2302      	movs	r3, #2
 8001d92:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001da0:	2302      	movs	r3, #2
 8001da2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001dac:	2304      	movs	r3, #4
 8001dae:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001db4:	463b      	mov	r3, r7
 8001db6:	2200      	movs	r2, #0
 8001db8:	4619      	mov	r1, r3
 8001dba:	4806      	ldr	r0, [pc, #24]	@ (8001dd4 <MX_DAC2_Init+0x6c>)
 8001dbc:	f005 fa70 	bl	80072a0 <HAL_DAC_ConfigChannel>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_DAC2_Init+0x62>
    Error_Handler();
 8001dc6:	f000 ff5b 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */
}
 8001dca:	bf00      	nop
 8001dcc:	3730      	adds	r7, #48	@ 0x30
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2000067c 	.word	0x2000067c
 8001dd8:	50000c00 	.word	0x50000c00

08001ddc <MX_DAC4_Init>:
/**
 * @brief DAC4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC4_Init(void) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08c      	sub	sp, #48	@ 0x30
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001de2:	463b      	mov	r3, r7
 8001de4:	2230      	movs	r2, #48	@ 0x30
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f012 fd72 	bl	80148d2 <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
   */
  hdac4.Instance = DAC4;
 8001dee:	4b16      	ldr	r3, [pc, #88]	@ (8001e48 <MX_DAC4_Init+0x6c>)
 8001df0:	4a16      	ldr	r2, [pc, #88]	@ (8001e4c <MX_DAC4_Init+0x70>)
 8001df2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK) {
 8001df4:	4814      	ldr	r0, [pc, #80]	@ (8001e48 <MX_DAC4_Init+0x6c>)
 8001df6:	f005 f996 	bl	8007126 <HAL_DAC_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_DAC4_Init+0x28>
    Error_Handler();
 8001e00:	f000 ff3e 	bl	8002c80 <Error_Handler>
  }

  /** DAC channel OUT1 config
   */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001e04:	2302      	movs	r3, #2
 8001e06:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001e14:	2302      	movs	r3, #2
 8001e16:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001e20:	2302      	movs	r3, #2
 8001e22:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001e28:	463b      	mov	r3, r7
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4806      	ldr	r0, [pc, #24]	@ (8001e48 <MX_DAC4_Init+0x6c>)
 8001e30:	f005 fa36 	bl	80072a0 <HAL_DAC_ConfigChannel>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_DAC4_Init+0x62>
    Error_Handler();
 8001e3a:	f000 ff21 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */
}
 8001e3e:	bf00      	nop
 8001e40:	3730      	adds	r7, #48	@ 0x30
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000690 	.word	0x20000690
 8001e4c:	50001400 	.word	0x50001400

08001e50 <MX_HRTIM1_Init>:
/**
 * @brief HRTIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_HRTIM1_Init(void) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b0ae      	sub	sp, #184	@ 0xb8
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001e56:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8001e64:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
 8001e74:	615a      	str	r2, [r3, #20]
 8001e76:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001e78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e7c:	2260      	movs	r2, #96	@ 0x60
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f012 fd26 	bl	80148d2 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8001e86:	f107 0320 	add.w	r3, r7, #32
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001e92:	463b      	mov	r3, r7
 8001e94:	2220      	movs	r2, #32
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f012 fd1a 	bl	80148d2 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8001e9e:	4b5e      	ldr	r3, [pc, #376]	@ (8002018 <MX_HRTIM1_Init+0x1c8>)
 8001ea0:	4a5e      	ldr	r2, [pc, #376]	@ (800201c <MX_HRTIM1_Init+0x1cc>)
 8001ea2:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001ea4:	4b5c      	ldr	r3, [pc, #368]	@ (8002018 <MX_HRTIM1_Init+0x1c8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001eaa:	4b5b      	ldr	r3, [pc, #364]	@ (8002018 <MX_HRTIM1_Init+0x1c8>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK) {
 8001eb0:	4859      	ldr	r0, [pc, #356]	@ (8002018 <MX_HRTIM1_Init+0x1c8>)
 8001eb2:	f005 ffdf 	bl	8007e74 <HAL_HRTIM_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_HRTIM1_Init+0x70>
    Error_Handler();
 8001ebc:	f000 fee0 	bl	8002c80 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) !=
 8001ec0:	210c      	movs	r1, #12
 8001ec2:	4855      	ldr	r0, [pc, #340]	@ (8002018 <MX_HRTIM1_Init+0x1c8>)
 8001ec4:	f006 f8a6 	bl	8008014 <HAL_HRTIM_DLLCalibrationStart>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_HRTIM1_Init+0x82>
      HAL_OK) {
    Error_Handler();
 8001ece:	f000 fed7 	bl	8002c80 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK) {
 8001ed2:	210a      	movs	r1, #10
 8001ed4:	4850      	ldr	r0, [pc, #320]	@ (8002018 <MX_HRTIM1_Init+0x1c8>)
 8001ed6:	f006 f8f5 	bl	80080c4 <HAL_HRTIM_PollForDLLCalibration>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_HRTIM1_Init+0x94>
    Error_Handler();
 8001ee0:	f000 fece 	bl	8002c80 <Error_Handler>
  }
  pTimeBaseCfg.Period = 96;
 8001ee4:	2360      	movs	r3, #96	@ 0x60
 8001ee6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001ef6:	2308      	movs	r3, #8
 8001ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C,
 8001efc:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001f00:	461a      	mov	r2, r3
 8001f02:	2102      	movs	r1, #2
 8001f04:	4844      	ldr	r0, [pc, #272]	@ (8002018 <MX_HRTIM1_Init+0x1c8>)
 8001f06:	f006 f911 	bl	800812c <HAL_HRTIM_TimeBaseConfig>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_HRTIM1_Init+0xc4>
                               &pTimeBaseCfg) != HAL_OK) {
    Error_Handler();
 8001f10:	f000 feb6 	bl	8002c80 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C,
 8001f26:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	483a      	ldr	r0, [pc, #232]	@ (8002018 <MX_HRTIM1_Init+0x1c8>)
 8001f30:	f006 f9b1 	bl	8008296 <HAL_HRTIM_WaveformTimerControl>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_HRTIM1_Init+0xee>
                                     &pTimerCtl) != HAL_OK) {
    Error_Handler();
 8001f3a:	f000 fea1 	bl	8002c80 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8001f46:	2300      	movs	r3, #0
 8001f48:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMASize = 0x1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001f52:	2300      	movs	r3, #0
 8001f54:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8001f56:	2300      	movs	r3, #0
 8001f58:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001f66:	2300      	movs	r3, #0
 8001f68:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001f72:	2300      	movs	r3, #0
 8001f74:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001f76:	2300      	movs	r3, #0
 8001f78:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8001f82:	2300      	movs	r3, #0
 8001f84:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DelayedProtectionMode =
 8001f86:	2300      	movs	r3, #0
 8001f88:	677b      	str	r3, [r7, #116]	@ 0x74
      HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C,
 8001fa0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2102      	movs	r1, #2
 8001fa8:	481b      	ldr	r0, [pc, #108]	@ (8002018 <MX_HRTIM1_Init+0x1c8>)
 8001faa:	f006 f8e7 	bl	800817c <HAL_HRTIM_WaveformTimerConfig>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_HRTIM1_Init+0x168>
                                    &pTimerCfg) != HAL_OK) {
    Error_Handler();
 8001fb4:	f000 fe64 	bl	8002c80 <Error_Handler>
  }
  pCompareCfg.CompareValue = 48;
 8001fb8:	2330      	movs	r3, #48	@ 0x30
 8001fba:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C,
 8001fbc:	f107 0320 	add.w	r3, r7, #32
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	4814      	ldr	r0, [pc, #80]	@ (8002018 <MX_HRTIM1_Init+0x1c8>)
 8001fc6:	f006 f999 	bl	80082fc <HAL_HRTIM_WaveformCompareConfig>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_HRTIM1_Init+0x184>
                                      HRTIM_COMPAREUNIT_1,
                                      &pCompareCfg) != HAL_OK) {
    Error_Handler();
 8001fd0:	f000 fe56 	bl	8002c80 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 8001fd8:	2304      	movs	r3, #4
 8001fda:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8001fdc:	2308      	movs	r3, #8
 8001fde:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C,
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	4807      	ldr	r0, [pc, #28]	@ (8002018 <MX_HRTIM1_Init+0x1c8>)
 8001ffc:	f006 faec 	bl	80085d8 <HAL_HRTIM_WaveformOutputConfig>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_HRTIM1_Init+0x1ba>
                                     HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK) {
    Error_Handler();
 8002006:	f000 fe3b 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 800200a:	4803      	ldr	r0, [pc, #12]	@ (8002018 <MX_HRTIM1_Init+0x1c8>)
 800200c:	f001 fbd6 	bl	80037bc <HAL_HRTIM_MspPostInit>
}
 8002010:	bf00      	nop
 8002012:	37b8      	adds	r7, #184	@ 0xb8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	200006a4 	.word	0x200006a4
 800201c:	40016800 	.word	0x40016800

08002020 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002024:	4b1b      	ldr	r3, [pc, #108]	@ (8002094 <MX_I2C3_Init+0x74>)
 8002026:	4a1c      	ldr	r2, [pc, #112]	@ (8002098 <MX_I2C3_Init+0x78>)
 8002028:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10E32879;
 800202a:	4b1a      	ldr	r3, [pc, #104]	@ (8002094 <MX_I2C3_Init+0x74>)
 800202c:	4a1b      	ldr	r2, [pc, #108]	@ (800209c <MX_I2C3_Init+0x7c>)
 800202e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002030:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <MX_I2C3_Init+0x74>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002036:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <MX_I2C3_Init+0x74>)
 8002038:	2201      	movs	r2, #1
 800203a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800203c:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <MX_I2C3_Init+0x74>)
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002042:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <MX_I2C3_Init+0x74>)
 8002044:	2200      	movs	r2, #0
 8002046:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002048:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <MX_I2C3_Init+0x74>)
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800204e:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <MX_I2C3_Init+0x74>)
 8002050:	2200      	movs	r2, #0
 8002052:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002054:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <MX_I2C3_Init+0x74>)
 8002056:	2200      	movs	r2, #0
 8002058:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 800205a:	480e      	ldr	r0, [pc, #56]	@ (8002094 <MX_I2C3_Init+0x74>)
 800205c:	f006 ff8e 	bl	8008f7c <HAL_I2C_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_I2C3_Init+0x4a>
    Error_Handler();
 8002066:	f000 fe0b 	bl	8002c80 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 800206a:	2100      	movs	r1, #0
 800206c:	4809      	ldr	r0, [pc, #36]	@ (8002094 <MX_I2C3_Init+0x74>)
 800206e:	f007 fba9 	bl	80097c4 <HAL_I2CEx_ConfigAnalogFilter>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_I2C3_Init+0x5c>
    Error_Handler();
 8002078:	f000 fe02 	bl	8002c80 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 800207c:	2100      	movs	r1, #0
 800207e:	4805      	ldr	r0, [pc, #20]	@ (8002094 <MX_I2C3_Init+0x74>)
 8002080:	f007 fbeb 	bl	800985a <HAL_I2CEx_ConfigDigitalFilter>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_I2C3_Init+0x6e>
    Error_Handler();
 800208a:	f000 fdf9 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200007a0 	.word	0x200007a0
 8002098:	40007800 	.word	0x40007800
 800209c:	10e32879 	.word	0x10e32879

080020a0 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80020a4:	4b21      	ldr	r3, [pc, #132]	@ (800212c <MX_LPUART1_UART_Init+0x8c>)
 80020a6:	4a22      	ldr	r2, [pc, #136]	@ (8002130 <MX_LPUART1_UART_Init+0x90>)
 80020a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 921600;
 80020aa:	4b20      	ldr	r3, [pc, #128]	@ (800212c <MX_LPUART1_UART_Init+0x8c>)
 80020ac:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80020b0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020b2:	4b1e      	ldr	r3, [pc, #120]	@ (800212c <MX_LPUART1_UART_Init+0x8c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80020b8:	4b1c      	ldr	r3, [pc, #112]	@ (800212c <MX_LPUART1_UART_Init+0x8c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80020be:	4b1b      	ldr	r3, [pc, #108]	@ (800212c <MX_LPUART1_UART_Init+0x8c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80020c4:	4b19      	ldr	r3, [pc, #100]	@ (800212c <MX_LPUART1_UART_Init+0x8c>)
 80020c6:	220c      	movs	r2, #12
 80020c8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ca:	4b18      	ldr	r3, [pc, #96]	@ (800212c <MX_LPUART1_UART_Init+0x8c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020d0:	4b16      	ldr	r3, [pc, #88]	@ (800212c <MX_LPUART1_UART_Init+0x8c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <MX_LPUART1_UART_Init+0x8c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020dc:	4b13      	ldr	r3, [pc, #76]	@ (800212c <MX_LPUART1_UART_Init+0x8c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 80020e2:	4812      	ldr	r0, [pc, #72]	@ (800212c <MX_LPUART1_UART_Init+0x8c>)
 80020e4:	f00c fdc8 	bl	800ec78 <HAL_UART_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_LPUART1_UART_Init+0x52>
    Error_Handler();
 80020ee:	f000 fdc7 	bl	8002c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) !=
 80020f2:	2100      	movs	r1, #0
 80020f4:	480d      	ldr	r0, [pc, #52]	@ (800212c <MX_LPUART1_UART_Init+0x8c>)
 80020f6:	f00d fbf1 	bl	800f8dc <HAL_UARTEx_SetTxFifoThreshold>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_LPUART1_UART_Init+0x64>
      HAL_OK) {
    Error_Handler();
 8002100:	f000 fdbe 	bl	8002c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) !=
 8002104:	2100      	movs	r1, #0
 8002106:	4809      	ldr	r0, [pc, #36]	@ (800212c <MX_LPUART1_UART_Init+0x8c>)
 8002108:	f00d fc26 	bl	800f958 <HAL_UARTEx_SetRxFifoThreshold>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_LPUART1_UART_Init+0x76>
      HAL_OK) {
    Error_Handler();
 8002112:	f000 fdb5 	bl	8002c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 8002116:	4805      	ldr	r0, [pc, #20]	@ (800212c <MX_LPUART1_UART_Init+0x8c>)
 8002118:	f00d fba7 	bl	800f86a <HAL_UARTEx_DisableFifoMode>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_LPUART1_UART_Init+0x86>
    Error_Handler();
 8002122:	f000 fdad 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200007f4 	.word	0x200007f4
 8002130:	40008000 	.word	0x40008000

08002134 <MX_OPAMP1_Init>:
/**
 * @brief OPAMP1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_OPAMP1_Init(void) {
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8002138:	4b12      	ldr	r3, [pc, #72]	@ (8002184 <MX_OPAMP1_Init+0x50>)
 800213a:	4a13      	ldr	r2, [pc, #76]	@ (8002188 <MX_OPAMP1_Init+0x54>)
 800213c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800213e:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <MX_OPAMP1_Init+0x50>)
 8002140:	2200      	movs	r2, #0
 8002142:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8002144:	4b0f      	ldr	r3, [pc, #60]	@ (8002184 <MX_OPAMP1_Init+0x50>)
 8002146:	2240      	movs	r2, #64	@ 0x40
 8002148:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 800214a:	4b0e      	ldr	r3, [pc, #56]	@ (8002184 <MX_OPAMP1_Init+0x50>)
 800214c:	2208      	movs	r2, #8
 800214e:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8002150:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <MX_OPAMP1_Init+0x50>)
 8002152:	2201      	movs	r2, #1
 8002154:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002156:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <MX_OPAMP1_Init+0x50>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 800215c:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <MX_OPAMP1_Init+0x50>)
 800215e:	2200      	movs	r2, #0
 8002160:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8002162:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <MX_OPAMP1_Init+0x50>)
 8002164:	2200      	movs	r2, #0
 8002166:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002168:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <MX_OPAMP1_Init+0x50>)
 800216a:	2200      	movs	r2, #0
 800216c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK) {
 800216e:	4805      	ldr	r0, [pc, #20]	@ (8002184 <MX_OPAMP1_Init+0x50>)
 8002170:	f007 fbc0 	bl	80098f4 <HAL_OPAMP_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_OPAMP1_Init+0x4a>
    Error_Handler();
 800217a:	f000 fd81 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000888 	.word	0x20000888
 8002188:	40010300 	.word	0x40010300

0800218c <MX_OPAMP2_Init>:
/**
 * @brief OPAMP2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_OPAMP2_Init(void) {
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8002190:	4b0f      	ldr	r3, [pc, #60]	@ (80021d0 <MX_OPAMP2_Init+0x44>)
 8002192:	4a10      	ldr	r2, [pc, #64]	@ (80021d4 <MX_OPAMP2_Init+0x48>)
 8002194:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8002196:	4b0e      	ldr	r3, [pc, #56]	@ (80021d0 <MX_OPAMP2_Init+0x44>)
 8002198:	2200      	movs	r2, #0
 800219a:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 800219c:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <MX_OPAMP2_Init+0x44>)
 800219e:	2260      	movs	r2, #96	@ 0x60
 80021a0:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80021a2:	4b0b      	ldr	r3, [pc, #44]	@ (80021d0 <MX_OPAMP2_Init+0x44>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 80021a8:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <MX_OPAMP2_Init+0x44>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80021ae:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <MX_OPAMP2_Init+0x44>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <MX_OPAMP2_Init+0x44>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK) {
 80021ba:	4805      	ldr	r0, [pc, #20]	@ (80021d0 <MX_OPAMP2_Init+0x44>)
 80021bc:	f007 fb9a 	bl	80098f4 <HAL_OPAMP_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_OPAMP2_Init+0x3e>
    Error_Handler();
 80021c6:	f000 fd5b 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200008c4 	.word	0x200008c4
 80021d4:	40010304 	.word	0x40010304

080021d8 <MX_OPAMP3_Init>:
/**
 * @brief OPAMP3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_OPAMP3_Init(void) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 80021dc:	4b0f      	ldr	r3, [pc, #60]	@ (800221c <MX_OPAMP3_Init+0x44>)
 80021de:	4a10      	ldr	r2, [pc, #64]	@ (8002220 <MX_OPAMP3_Init+0x48>)
 80021e0:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80021e2:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <MX_OPAMP3_Init+0x44>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 80021e8:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <MX_OPAMP3_Init+0x44>)
 80021ea:	2260      	movs	r2, #96	@ 0x60
 80021ec:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO1;
 80021ee:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <MX_OPAMP3_Init+0x44>)
 80021f0:	2204      	movs	r2, #4
 80021f2:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 80021f4:	4b09      	ldr	r3, [pc, #36]	@ (800221c <MX_OPAMP3_Init+0x44>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80021fa:	4b08      	ldr	r3, [pc, #32]	@ (800221c <MX_OPAMP3_Init+0x44>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002200:	4b06      	ldr	r3, [pc, #24]	@ (800221c <MX_OPAMP3_Init+0x44>)
 8002202:	2200      	movs	r2, #0
 8002204:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK) {
 8002206:	4805      	ldr	r0, [pc, #20]	@ (800221c <MX_OPAMP3_Init+0x44>)
 8002208:	f007 fb74 	bl	80098f4 <HAL_OPAMP_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_OPAMP3_Init+0x3e>
    Error_Handler();
 8002212:	f000 fd35 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000900 	.word	0x20000900
 8002220:	40010308 	.word	0x40010308

08002224 <MX_OPAMP5_Init>:
/**
 * @brief OPAMP5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_OPAMP5_Init(void) {
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8002228:	4b0f      	ldr	r3, [pc, #60]	@ (8002268 <MX_OPAMP5_Init+0x44>)
 800222a:	4a10      	ldr	r2, [pc, #64]	@ (800226c <MX_OPAMP5_Init+0x48>)
 800222c:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800222e:	4b0e      	ldr	r3, [pc, #56]	@ (8002268 <MX_OPAMP5_Init+0x44>)
 8002230:	2200      	movs	r2, #0
 8002232:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_FOLLOWER_MODE;
 8002234:	4b0c      	ldr	r3, [pc, #48]	@ (8002268 <MX_OPAMP5_Init+0x44>)
 8002236:	2260      	movs	r2, #96	@ 0x60
 8002238:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 800223a:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <MX_OPAMP5_Init+0x44>)
 800223c:	2208      	movs	r2, #8
 800223e:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = ENABLE;
 8002240:	4b09      	ldr	r3, [pc, #36]	@ (8002268 <MX_OPAMP5_Init+0x44>)
 8002242:	2201      	movs	r2, #1
 8002244:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002246:	4b08      	ldr	r3, [pc, #32]	@ (8002268 <MX_OPAMP5_Init+0x44>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <MX_OPAMP5_Init+0x44>)
 800224e:	2200      	movs	r2, #0
 8002250:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK) {
 8002252:	4805      	ldr	r0, [pc, #20]	@ (8002268 <MX_OPAMP5_Init+0x44>)
 8002254:	f007 fb4e 	bl	80098f4 <HAL_OPAMP_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_OPAMP5_Init+0x3e>
    Error_Handler();
 800225e:	f000 fd0f 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	2000093c 	.word	0x2000093c
 800226c:	40010310 	.word	0x40010310

08002270 <MX_OPAMP6_Init>:
/**
 * @brief OPAMP6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_OPAMP6_Init(void) {
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8002274:	4b12      	ldr	r3, [pc, #72]	@ (80022c0 <MX_OPAMP6_Init+0x50>)
 8002276:	4a13      	ldr	r2, [pc, #76]	@ (80022c4 <MX_OPAMP6_Init+0x54>)
 8002278:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800227a:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <MX_OPAMP6_Init+0x50>)
 800227c:	2200      	movs	r2, #0
 800227e:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_PGA_MODE;
 8002280:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <MX_OPAMP6_Init+0x50>)
 8002282:	2240      	movs	r2, #64	@ 0x40
 8002284:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8002286:	4b0e      	ldr	r3, [pc, #56]	@ (80022c0 <MX_OPAMP6_Init+0x50>)
 8002288:	2208      	movs	r2, #8
 800228a:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 800228c:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <MX_OPAMP6_Init+0x50>)
 800228e:	2201      	movs	r2, #1
 8002290:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002292:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <MX_OPAMP6_Init+0x50>)
 8002294:	2200      	movs	r2, #0
 8002296:	619a      	str	r2, [r3, #24]
  hopamp6.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8002298:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <MX_OPAMP6_Init+0x50>)
 800229a:	2200      	movs	r2, #0
 800229c:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp6.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 800229e:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <MX_OPAMP6_Init+0x50>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80022a4:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <MX_OPAMP6_Init+0x50>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK) {
 80022aa:	4805      	ldr	r0, [pc, #20]	@ (80022c0 <MX_OPAMP6_Init+0x50>)
 80022ac:	f007 fb22 	bl	80098f4 <HAL_OPAMP_Init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_OPAMP6_Init+0x4a>
    Error_Handler();
 80022b6:	f000 fce3 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000978 	.word	0x20000978
 80022c4:	40010314 	.word	0x40010314

080022c8 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80022cc:	4b1b      	ldr	r3, [pc, #108]	@ (800233c <MX_SPI3_Init+0x74>)
 80022ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002340 <MX_SPI3_Init+0x78>)
 80022d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80022d2:	4b1a      	ldr	r3, [pc, #104]	@ (800233c <MX_SPI3_Init+0x74>)
 80022d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80022da:	4b18      	ldr	r3, [pc, #96]	@ (800233c <MX_SPI3_Init+0x74>)
 80022dc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80022e0:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80022e2:	4b16      	ldr	r3, [pc, #88]	@ (800233c <MX_SPI3_Init+0x74>)
 80022e4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80022e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80022ea:	4b14      	ldr	r3, [pc, #80]	@ (800233c <MX_SPI3_Init+0x74>)
 80022ec:	2202      	movs	r2, #2
 80022ee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022f0:	4b12      	ldr	r3, [pc, #72]	@ (800233c <MX_SPI3_Init+0x74>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80022f6:	4b11      	ldr	r3, [pc, #68]	@ (800233c <MX_SPI3_Init+0x74>)
 80022f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022fc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80022fe:	4b0f      	ldr	r3, [pc, #60]	@ (800233c <MX_SPI3_Init+0x74>)
 8002300:	2210      	movs	r2, #16
 8002302:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002304:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <MX_SPI3_Init+0x74>)
 8002306:	2200      	movs	r2, #0
 8002308:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800230a:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <MX_SPI3_Init+0x74>)
 800230c:	2200      	movs	r2, #0
 800230e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002310:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <MX_SPI3_Init+0x74>)
 8002312:	2200      	movs	r2, #0
 8002314:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002316:	4b09      	ldr	r3, [pc, #36]	@ (800233c <MX_SPI3_Init+0x74>)
 8002318:	2207      	movs	r2, #7
 800231a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800231c:	4b07      	ldr	r3, [pc, #28]	@ (800233c <MX_SPI3_Init+0x74>)
 800231e:	2200      	movs	r2, #0
 8002320:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002322:	4b06      	ldr	r3, [pc, #24]	@ (800233c <MX_SPI3_Init+0x74>)
 8002324:	2208      	movs	r2, #8
 8002326:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8002328:	4804      	ldr	r0, [pc, #16]	@ (800233c <MX_SPI3_Init+0x74>)
 800232a:	f00a f911 	bl	800c550 <HAL_SPI_Init>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_SPI3_Init+0x70>
    Error_Handler();
 8002334:	f000 fca4 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}
 800233c:	200009b4 	.word	0x200009b4
 8002340:	40003c00 	.word	0x40003c00

08002344 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002344:	b580      	push	{r7, lr}
 8002346:	b08c      	sub	sp, #48	@ 0x30
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800234a:	f107 030c 	add.w	r3, r7, #12
 800234e:	2224      	movs	r2, #36	@ 0x24
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f012 fabd 	bl	80148d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002358:	463b      	mov	r3, r7
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002362:	4b23      	ldr	r3, [pc, #140]	@ (80023f0 <MX_TIM1_Init+0xac>)
 8002364:	4a23      	ldr	r2, [pc, #140]	@ (80023f4 <MX_TIM1_Init+0xb0>)
 8002366:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002368:	4b21      	ldr	r3, [pc, #132]	@ (80023f0 <MX_TIM1_Init+0xac>)
 800236a:	2200      	movs	r2, #0
 800236c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236e:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <MX_TIM1_Init+0xac>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002374:	4b1e      	ldr	r3, [pc, #120]	@ (80023f0 <MX_TIM1_Init+0xac>)
 8002376:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800237a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800237c:	4b1c      	ldr	r3, [pc, #112]	@ (80023f0 <MX_TIM1_Init+0xac>)
 800237e:	2200      	movs	r2, #0
 8002380:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002382:	4b1b      	ldr	r3, [pc, #108]	@ (80023f0 <MX_TIM1_Init+0xac>)
 8002384:	2200      	movs	r2, #0
 8002386:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002388:	4b19      	ldr	r3, [pc, #100]	@ (80023f0 <MX_TIM1_Init+0xac>)
 800238a:	2200      	movs	r2, #0
 800238c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800238e:	2301      	movs	r3, #1
 8002390:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002396:	2301      	movs	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800239e:	230f      	movs	r3, #15
 80023a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023a2:	2300      	movs	r3, #0
 80023a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023a6:	2301      	movs	r3, #1
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023aa:	2300      	movs	r3, #0
 80023ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80023ae:	230f      	movs	r3, #15
 80023b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 80023b2:	f107 030c 	add.w	r3, r7, #12
 80023b6:	4619      	mov	r1, r3
 80023b8:	480d      	ldr	r0, [pc, #52]	@ (80023f0 <MX_TIM1_Init+0xac>)
 80023ba:	f00b fa45 	bl	800d848 <HAL_TIM_Encoder_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM1_Init+0x84>
    Error_Handler();
 80023c4:	f000 fc5c 	bl	8002c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c8:	2300      	movs	r3, #0
 80023ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023cc:	2300      	movs	r3, #0
 80023ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80023d4:	463b      	mov	r3, r7
 80023d6:	4619      	mov	r1, r3
 80023d8:	4805      	ldr	r0, [pc, #20]	@ (80023f0 <MX_TIM1_Init+0xac>)
 80023da:	f00c fb23 	bl	800ea24 <HAL_TIMEx_MasterConfigSynchronization>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM1_Init+0xa4>
    Error_Handler();
 80023e4:	f000 fc4c 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
}
 80023e8:	bf00      	nop
 80023ea:	3730      	adds	r7, #48	@ 0x30
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000a78 	.word	0x20000a78
 80023f4:	40012c00 	.word	0x40012c00

080023f8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08c      	sub	sp, #48	@ 0x30
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023fe:	f107 030c 	add.w	r3, r7, #12
 8002402:	2224      	movs	r2, #36	@ 0x24
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f012 fa63 	bl	80148d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800240c:	463b      	mov	r3, r7
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002416:	4b21      	ldr	r3, [pc, #132]	@ (800249c <MX_TIM3_Init+0xa4>)
 8002418:	4a21      	ldr	r2, [pc, #132]	@ (80024a0 <MX_TIM3_Init+0xa8>)
 800241a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800241c:	4b1f      	ldr	r3, [pc, #124]	@ (800249c <MX_TIM3_Init+0xa4>)
 800241e:	2200      	movs	r2, #0
 8002420:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002422:	4b1e      	ldr	r3, [pc, #120]	@ (800249c <MX_TIM3_Init+0xa4>)
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002428:	4b1c      	ldr	r3, [pc, #112]	@ (800249c <MX_TIM3_Init+0xa4>)
 800242a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800242e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002430:	4b1a      	ldr	r3, [pc, #104]	@ (800249c <MX_TIM3_Init+0xa4>)
 8002432:	2200      	movs	r2, #0
 8002434:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002436:	4b19      	ldr	r3, [pc, #100]	@ (800249c <MX_TIM3_Init+0xa4>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800243c:	2301      	movs	r3, #1
 800243e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002440:	2300      	movs	r3, #0
 8002442:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002444:	2301      	movs	r3, #1
 8002446:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800244c:	230f      	movs	r3, #15
 800244e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002450:	2300      	movs	r3, #0
 8002452:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002454:	2301      	movs	r3, #1
 8002456:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002458:	2300      	movs	r3, #0
 800245a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800245c:	230f      	movs	r3, #15
 800245e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8002460:	f107 030c 	add.w	r3, r7, #12
 8002464:	4619      	mov	r1, r3
 8002466:	480d      	ldr	r0, [pc, #52]	@ (800249c <MX_TIM3_Init+0xa4>)
 8002468:	f00b f9ee 	bl	800d848 <HAL_TIM_Encoder_Init>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM3_Init+0x7e>
    Error_Handler();
 8002472:	f000 fc05 	bl	8002c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002476:	2300      	movs	r3, #0
 8002478:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 800247e:	463b      	mov	r3, r7
 8002480:	4619      	mov	r1, r3
 8002482:	4806      	ldr	r0, [pc, #24]	@ (800249c <MX_TIM3_Init+0xa4>)
 8002484:	f00c face 	bl	800ea24 <HAL_TIMEx_MasterConfigSynchronization>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM3_Init+0x9a>
    Error_Handler();
 800248e:	f000 fbf7 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8002492:	bf00      	nop
 8002494:	3730      	adds	r7, #48	@ 0x30
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000ac4 	.word	0x20000ac4
 80024a0:	40000400 	.word	0x40000400

080024a4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	@ 0x30
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024aa:	f107 030c 	add.w	r3, r7, #12
 80024ae:	2224      	movs	r2, #36	@ 0x24
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f012 fa0d 	bl	80148d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b8:	463b      	mov	r3, r7
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024c2:	4b21      	ldr	r3, [pc, #132]	@ (8002548 <MX_TIM4_Init+0xa4>)
 80024c4:	4a21      	ldr	r2, [pc, #132]	@ (800254c <MX_TIM4_Init+0xa8>)
 80024c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80024c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002548 <MX_TIM4_Init+0xa4>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002548 <MX_TIM4_Init+0xa4>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80024d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002548 <MX_TIM4_Init+0xa4>)
 80024d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002548 <MX_TIM4_Init+0xa4>)
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e2:	4b19      	ldr	r3, [pc, #100]	@ (8002548 <MX_TIM4_Init+0xa4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80024e8:	2301      	movs	r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024ec:	2300      	movs	r3, #0
 80024ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024f0:	2301      	movs	r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80024f8:	230f      	movs	r3, #15
 80024fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024fc:	2300      	movs	r3, #0
 80024fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002500:	2301      	movs	r3, #1
 8002502:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002504:	2300      	movs	r3, #0
 8002506:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8002508:	230f      	movs	r3, #15
 800250a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 800250c:	f107 030c 	add.w	r3, r7, #12
 8002510:	4619      	mov	r1, r3
 8002512:	480d      	ldr	r0, [pc, #52]	@ (8002548 <MX_TIM4_Init+0xa4>)
 8002514:	f00b f998 	bl	800d848 <HAL_TIM_Encoder_Init>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_TIM4_Init+0x7e>
    Error_Handler();
 800251e:	f000 fbaf 	bl	8002c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 800252a:	463b      	mov	r3, r7
 800252c:	4619      	mov	r1, r3
 800252e:	4806      	ldr	r0, [pc, #24]	@ (8002548 <MX_TIM4_Init+0xa4>)
 8002530:	f00c fa78 	bl	800ea24 <HAL_TIMEx_MasterConfigSynchronization>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM4_Init+0x9a>
    Error_Handler();
 800253a:	f000 fba1 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
}
 800253e:	bf00      	nop
 8002540:	3730      	adds	r7, #48	@ 0x30
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000b10 	.word	0x20000b10
 800254c:	40000800 	.word	0x40000800

08002550 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002560:	4b14      	ldr	r3, [pc, #80]	@ (80025b4 <MX_TIM6_Init+0x64>)
 8002562:	4a15      	ldr	r2, [pc, #84]	@ (80025b8 <MX_TIM6_Init+0x68>)
 8002564:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002566:	4b13      	ldr	r3, [pc, #76]	@ (80025b4 <MX_TIM6_Init+0x64>)
 8002568:	2200      	movs	r2, #0
 800256a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800256c:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <MX_TIM6_Init+0x64>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 149;
 8002572:	4b10      	ldr	r3, [pc, #64]	@ (80025b4 <MX_TIM6_Init+0x64>)
 8002574:	2295      	movs	r2, #149	@ 0x95
 8002576:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002578:	4b0e      	ldr	r3, [pc, #56]	@ (80025b4 <MX_TIM6_Init+0x64>)
 800257a:	2200      	movs	r2, #0
 800257c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 800257e:	480d      	ldr	r0, [pc, #52]	@ (80025b4 <MX_TIM6_Init+0x64>)
 8002580:	f00a fcfa 	bl	800cf78 <HAL_TIM_Base_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_TIM6_Init+0x3e>
    Error_Handler();
 800258a:	f000 fb79 	bl	8002c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800258e:	2320      	movs	r3, #32
 8002590:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	4619      	mov	r1, r3
 800259a:	4806      	ldr	r0, [pc, #24]	@ (80025b4 <MX_TIM6_Init+0x64>)
 800259c:	f00c fa42 	bl	800ea24 <HAL_TIMEx_MasterConfigSynchronization>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_TIM6_Init+0x5a>
    Error_Handler();
 80025a6:	f000 fb6b 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000b5c 	.word	0x20000b5c
 80025b8:	40001000 	.word	0x40001000

080025bc <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80025cc:	4b14      	ldr	r3, [pc, #80]	@ (8002620 <MX_TIM7_Init+0x64>)
 80025ce:	4a15      	ldr	r2, [pc, #84]	@ (8002624 <MX_TIM7_Init+0x68>)
 80025d0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 180 - 1;
 80025d2:	4b13      	ldr	r3, [pc, #76]	@ (8002620 <MX_TIM7_Init+0x64>)
 80025d4:	22b3      	movs	r2, #179	@ 0xb3
 80025d6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d8:	4b11      	ldr	r3, [pc, #68]	@ (8002620 <MX_TIM7_Init+0x64>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80025de:	4b10      	ldr	r3, [pc, #64]	@ (8002620 <MX_TIM7_Init+0x64>)
 80025e0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025e4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002620 <MX_TIM7_Init+0x64>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 80025ec:	480c      	ldr	r0, [pc, #48]	@ (8002620 <MX_TIM7_Init+0x64>)
 80025ee:	f00a fcc3 	bl	800cf78 <HAL_TIM_Base_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM7_Init+0x40>
    Error_Handler();
 80025f8:	f000 fb42 	bl	8002c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025fc:	2320      	movs	r3, #32
 80025fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	4619      	mov	r1, r3
 8002608:	4805      	ldr	r0, [pc, #20]	@ (8002620 <MX_TIM7_Init+0x64>)
 800260a:	f00c fa0b 	bl	800ea24 <HAL_TIMEx_MasterConfigSynchronization>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM7_Init+0x5c>
    Error_Handler();
 8002614:	f000 fb34 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */
}
 8002618:	bf00      	nop
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000ba8 	.word	0x20000ba8
 8002624:	40001400 	.word	0x40001400

08002628 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b09c      	sub	sp, #112	@ 0x70
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800262e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002648:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
 8002658:	615a      	str	r2, [r3, #20]
 800265a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	2234      	movs	r2, #52	@ 0x34
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f012 f935 	bl	80148d2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002668:	4b4e      	ldr	r3, [pc, #312]	@ (80027a4 <MX_TIM8_Init+0x17c>)
 800266a:	4a4f      	ldr	r2, [pc, #316]	@ (80027a8 <MX_TIM8_Init+0x180>)
 800266c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800266e:	4b4d      	ldr	r3, [pc, #308]	@ (80027a4 <MX_TIM8_Init+0x17c>)
 8002670:	2200      	movs	r2, #0
 8002672:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002674:	4b4b      	ldr	r3, [pc, #300]	@ (80027a4 <MX_TIM8_Init+0x17c>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 179;
 800267a:	4b4a      	ldr	r3, [pc, #296]	@ (80027a4 <MX_TIM8_Init+0x17c>)
 800267c:	22b3      	movs	r2, #179	@ 0xb3
 800267e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002680:	4b48      	ldr	r3, [pc, #288]	@ (80027a4 <MX_TIM8_Init+0x17c>)
 8002682:	2200      	movs	r2, #0
 8002684:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002686:	4b47      	ldr	r3, [pc, #284]	@ (80027a4 <MX_TIM8_Init+0x17c>)
 8002688:	2200      	movs	r2, #0
 800268a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800268c:	4b45      	ldr	r3, [pc, #276]	@ (80027a4 <MX_TIM8_Init+0x17c>)
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8002692:	4844      	ldr	r0, [pc, #272]	@ (80027a4 <MX_TIM8_Init+0x17c>)
 8002694:	f00a fc70 	bl	800cf78 <HAL_TIM_Base_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM8_Init+0x7a>
    Error_Handler();
 800269e:	f000 faef 	bl	8002c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026a6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 80026a8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80026ac:	4619      	mov	r1, r3
 80026ae:	483d      	ldr	r0, [pc, #244]	@ (80027a4 <MX_TIM8_Init+0x17c>)
 80026b0:	f00b fb12 	bl	800dcd8 <HAL_TIM_ConfigClockSource>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM8_Init+0x96>
    Error_Handler();
 80026ba:	f000 fae1 	bl	8002c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 80026be:	4839      	ldr	r0, [pc, #228]	@ (80027a4 <MX_TIM8_Init+0x17c>)
 80026c0:	f00a fd22 	bl	800d108 <HAL_TIM_PWM_Init>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM8_Init+0xa6>
    Error_Handler();
 80026ca:	f000 fad9 	bl	8002c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 80026da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026de:	4619      	mov	r1, r3
 80026e0:	4830      	ldr	r0, [pc, #192]	@ (80027a4 <MX_TIM8_Init+0x17c>)
 80026e2:	f00c f99f 	bl	800ea24 <HAL_TIMEx_MasterConfigSynchronization>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM8_Init+0xc8>
    Error_Handler();
 80026ec:	f000 fac8 	bl	8002c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80026f0:	2370      	movs	r3, #112	@ 0x70
 80026f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 90;
 80026f4:	235a      	movs	r3, #90	@ 0x5a
 80026f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80026f8:	2302      	movs	r3, #2
 80026fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026fc:	2300      	movs	r3, #0
 80026fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002700:	2300      	movs	r3, #0
 8002702:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002704:	2300      	movs	r3, #0
 8002706:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002708:	2300      	movs	r3, #0
 800270a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800270c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002710:	2200      	movs	r2, #0
 8002712:	4619      	mov	r1, r3
 8002714:	4823      	ldr	r0, [pc, #140]	@ (80027a4 <MX_TIM8_Init+0x17c>)
 8002716:	f00b f9cb 	bl	800dab0 <HAL_TIM_PWM_ConfigChannel>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM8_Init+0xfc>
    Error_Handler();
 8002720:	f000 faae 	bl	8002c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002724:	2360      	movs	r3, #96	@ 0x60
 8002726:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002728:	2300      	movs	r3, #0
 800272a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800272c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002730:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8002732:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002736:	2208      	movs	r2, #8
 8002738:	4619      	mov	r1, r3
 800273a:	481a      	ldr	r0, [pc, #104]	@ (80027a4 <MX_TIM8_Init+0x17c>)
 800273c:	f00b f9b8 	bl	800dab0 <HAL_TIM_PWM_ConfigChannel>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM8_Init+0x122>
    Error_Handler();
 8002746:	f000 fa9b 	bl	8002c80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800274a:	2300      	movs	r3, #0
 800274c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800275e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002762:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002768:	2300      	movs	r3, #0
 800276a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800276c:	2300      	movs	r3, #0
 800276e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002770:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002774:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800277a:	2300      	movs	r3, #0
 800277c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800277e:	2300      	movs	r3, #0
 8002780:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	4619      	mov	r1, r3
 8002786:	4807      	ldr	r0, [pc, #28]	@ (80027a4 <MX_TIM8_Init+0x17c>)
 8002788:	f00c f9e2 	bl	800eb50 <HAL_TIMEx_ConfigBreakDeadTime>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM8_Init+0x16e>
    Error_Handler();
 8002792:	f000 fa75 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002796:	4803      	ldr	r0, [pc, #12]	@ (80027a4 <MX_TIM8_Init+0x17c>)
 8002798:	f001 fbd2 	bl	8003f40 <HAL_TIM_MspPostInit>
}
 800279c:	bf00      	nop
 800279e:	3770      	adds	r7, #112	@ 0x70
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000bf4 	.word	0x20000bf4
 80027a8:	40013400 	.word	0x40013400

080027ac <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b09c      	sub	sp, #112	@ 0x70
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027b2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	609a      	str	r2, [r3, #8]
 80027be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
 80027dc:	615a      	str	r2, [r3, #20]
 80027de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	2234      	movs	r2, #52	@ 0x34
 80027e4:	2100      	movs	r1, #0
 80027e6:	4618      	mov	r0, r3
 80027e8:	f012 f873 	bl	80148d2 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80027ec:	4b3f      	ldr	r3, [pc, #252]	@ (80028ec <MX_TIM15_Init+0x140>)
 80027ee:	4a40      	ldr	r2, [pc, #256]	@ (80028f0 <MX_TIM15_Init+0x144>)
 80027f0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 150;
 80027f2:	4b3e      	ldr	r3, [pc, #248]	@ (80028ec <MX_TIM15_Init+0x140>)
 80027f4:	2296      	movs	r2, #150	@ 0x96
 80027f6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f8:	4b3c      	ldr	r3, [pc, #240]	@ (80028ec <MX_TIM15_Init+0x140>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80027fe:	4b3b      	ldr	r3, [pc, #236]	@ (80028ec <MX_TIM15_Init+0x140>)
 8002800:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002804:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002806:	4b39      	ldr	r3, [pc, #228]	@ (80028ec <MX_TIM15_Init+0x140>)
 8002808:	2200      	movs	r2, #0
 800280a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800280c:	4b37      	ldr	r3, [pc, #220]	@ (80028ec <MX_TIM15_Init+0x140>)
 800280e:	2200      	movs	r2, #0
 8002810:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002812:	4b36      	ldr	r3, [pc, #216]	@ (80028ec <MX_TIM15_Init+0x140>)
 8002814:	2200      	movs	r2, #0
 8002816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 8002818:	4834      	ldr	r0, [pc, #208]	@ (80028ec <MX_TIM15_Init+0x140>)
 800281a:	f00a fbad 	bl	800cf78 <HAL_TIM_Base_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_TIM15_Init+0x7c>
    Error_Handler();
 8002824:	f000 fa2c 	bl	8002c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002828:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800282c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 800282e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002832:	4619      	mov	r1, r3
 8002834:	482d      	ldr	r0, [pc, #180]	@ (80028ec <MX_TIM15_Init+0x140>)
 8002836:	f00b fa4f 	bl	800dcd8 <HAL_TIM_ConfigClockSource>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_TIM15_Init+0x98>
    Error_Handler();
 8002840:	f000 fa1e 	bl	8002c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8002844:	4829      	ldr	r0, [pc, #164]	@ (80028ec <MX_TIM15_Init+0x140>)
 8002846:	f00a fc5f 	bl	800d108 <HAL_TIM_PWM_Init>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_TIM15_Init+0xa8>
    Error_Handler();
 8002850:	f000 fa16 	bl	8002c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002854:	2300      	movs	r3, #0
 8002856:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002858:	2300      	movs	r3, #0
 800285a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) !=
 800285c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002860:	4619      	mov	r1, r3
 8002862:	4822      	ldr	r0, [pc, #136]	@ (80028ec <MX_TIM15_Init+0x140>)
 8002864:	f00c f8de 	bl	800ea24 <HAL_TIMEx_MasterConfigSynchronization>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_TIM15_Init+0xc6>
      HAL_OK) {
    Error_Handler();
 800286e:	f000 fa07 	bl	8002c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002872:	2360      	movs	r3, #96	@ 0x60
 8002874:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 499;
 8002876:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800287a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800287c:	2300      	movs	r3, #0
 800287e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002880:	2300      	movs	r3, #0
 8002882:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002884:	2300      	movs	r3, #0
 8002886:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002888:	2300      	movs	r3, #0
 800288a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800288c:	2300      	movs	r3, #0
 800288e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8002890:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002894:	2200      	movs	r2, #0
 8002896:	4619      	mov	r1, r3
 8002898:	4814      	ldr	r0, [pc, #80]	@ (80028ec <MX_TIM15_Init+0x140>)
 800289a:	f00b f909 	bl	800dab0 <HAL_TIM_PWM_ConfigChannel>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM15_Init+0xfc>
    Error_Handler();
 80028a4:	f000 f9ec 	bl	8002c80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK) {
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4807      	ldr	r0, [pc, #28]	@ (80028ec <MX_TIM15_Init+0x140>)
 80028d0:	f00c f93e 	bl	800eb50 <HAL_TIMEx_ConfigBreakDeadTime>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_TIM15_Init+0x132>
    Error_Handler();
 80028da:	f000 f9d1 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80028de:	4803      	ldr	r0, [pc, #12]	@ (80028ec <MX_TIM15_Init+0x140>)
 80028e0:	f001 fb2e 	bl	8003f40 <HAL_TIM_MspPostInit>
}
 80028e4:	bf00      	nop
 80028e6:	3770      	adds	r7, #112	@ 0x70
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000c40 	.word	0x20000c40
 80028f0:	40014000 	.word	0x40014000

080028f4 <MX_TIM20_Init>:
/**
 * @brief TIM20 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM20_Init(void) {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08c      	sub	sp, #48	@ 0x30
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028fa:	f107 030c 	add.w	r3, r7, #12
 80028fe:	2224      	movs	r2, #36	@ 0x24
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f011 ffe5 	bl	80148d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002908:	463b      	mov	r3, r7
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8002912:	4b23      	ldr	r3, [pc, #140]	@ (80029a0 <MX_TIM20_Init+0xac>)
 8002914:	4a23      	ldr	r2, [pc, #140]	@ (80029a4 <MX_TIM20_Init+0xb0>)
 8002916:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8002918:	4b21      	ldr	r3, [pc, #132]	@ (80029a0 <MX_TIM20_Init+0xac>)
 800291a:	2200      	movs	r2, #0
 800291c:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 800291e:	4b20      	ldr	r3, [pc, #128]	@ (80029a0 <MX_TIM20_Init+0xac>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8002924:	4b1e      	ldr	r3, [pc, #120]	@ (80029a0 <MX_TIM20_Init+0xac>)
 8002926:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800292a:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800292c:	4b1c      	ldr	r3, [pc, #112]	@ (80029a0 <MX_TIM20_Init+0xac>)
 800292e:	2200      	movs	r2, #0
 8002930:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8002932:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <MX_TIM20_Init+0xac>)
 8002934:	2200      	movs	r2, #0
 8002936:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002938:	4b19      	ldr	r3, [pc, #100]	@ (80029a0 <MX_TIM20_Init+0xac>)
 800293a:	2200      	movs	r2, #0
 800293c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800293e:	2301      	movs	r3, #1
 8002940:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002946:	2301      	movs	r3, #1
 8002948:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800294e:	230f      	movs	r3, #15
 8002950:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002952:	2300      	movs	r3, #0
 8002954:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002956:	2301      	movs	r3, #1
 8002958:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800295a:	2300      	movs	r3, #0
 800295c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800295e:	230f      	movs	r3, #15
 8002960:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK) {
 8002962:	f107 030c 	add.w	r3, r7, #12
 8002966:	4619      	mov	r1, r3
 8002968:	480d      	ldr	r0, [pc, #52]	@ (80029a0 <MX_TIM20_Init+0xac>)
 800296a:	f00a ff6d 	bl	800d848 <HAL_TIM_Encoder_Init>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <MX_TIM20_Init+0x84>
    Error_Handler();
 8002974:	f000 f984 	bl	8002c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002978:	2300      	movs	r3, #0
 800297a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800297c:	2300      	movs	r3, #0
 800297e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) !=
 8002984:	463b      	mov	r3, r7
 8002986:	4619      	mov	r1, r3
 8002988:	4805      	ldr	r0, [pc, #20]	@ (80029a0 <MX_TIM20_Init+0xac>)
 800298a:	f00c f84b 	bl	800ea24 <HAL_TIMEx_MasterConfigSynchronization>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM20_Init+0xa4>
      HAL_OK) {
    Error_Handler();
 8002994:	f000 f974 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
}
 8002998:	bf00      	nop
 800299a:	3730      	adds	r7, #48	@ 0x30
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000c8c 	.word	0x20000c8c
 80029a4:	40015000 	.word	0x40015000

080029a8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80029ae:	4b26      	ldr	r3, [pc, #152]	@ (8002a48 <MX_DMA_Init+0xa0>)
 80029b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029b2:	4a25      	ldr	r2, [pc, #148]	@ (8002a48 <MX_DMA_Init+0xa0>)
 80029b4:	f043 0304 	orr.w	r3, r3, #4
 80029b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80029ba:	4b23      	ldr	r3, [pc, #140]	@ (8002a48 <MX_DMA_Init+0xa0>)
 80029bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	607b      	str	r3, [r7, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029c6:	4b20      	ldr	r3, [pc, #128]	@ (8002a48 <MX_DMA_Init+0xa0>)
 80029c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002a48 <MX_DMA_Init+0xa0>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80029d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a48 <MX_DMA_Init+0xa0>)
 80029d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80029de:	2200      	movs	r2, #0
 80029e0:	2100      	movs	r1, #0
 80029e2:	200b      	movs	r0, #11
 80029e4:	f004 fb6b 	bl	80070be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80029e8:	200b      	movs	r0, #11
 80029ea:	f004 fb82 	bl	80070f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80029ee:	2200      	movs	r2, #0
 80029f0:	2100      	movs	r1, #0
 80029f2:	200c      	movs	r0, #12
 80029f4:	f004 fb63 	bl	80070be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80029f8:	200c      	movs	r0, #12
 80029fa:	f004 fb7a 	bl	80070f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2100      	movs	r1, #0
 8002a02:	200d      	movs	r0, #13
 8002a04:	f004 fb5b 	bl	80070be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002a08:	200d      	movs	r0, #13
 8002a0a:	f004 fb72 	bl	80070f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	200e      	movs	r0, #14
 8002a14:	f004 fb53 	bl	80070be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002a18:	200e      	movs	r0, #14
 8002a1a:	f004 fb6a 	bl	80070f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2100      	movs	r1, #0
 8002a22:	200f      	movs	r0, #15
 8002a24:	f004 fb4b 	bl	80070be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002a28:	200f      	movs	r0, #15
 8002a2a:	f004 fb62 	bl	80070f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2100      	movs	r1, #0
 8002a32:	2010      	movs	r0, #16
 8002a34:	f004 fb43 	bl	80070be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002a38:	2010      	movs	r0, #16
 8002a3a:	f004 fb5a 	bl	80070f2 <HAL_NVIC_EnableIRQ>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000

08002a4c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08a      	sub	sp, #40	@ 0x28
 8002a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a52:	f107 0314 	add.w	r3, r7, #20
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
 8002a5c:	609a      	str	r2, [r3, #8]
 8002a5e:	60da      	str	r2, [r3, #12]
 8002a60:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a62:	4b83      	ldr	r3, [pc, #524]	@ (8002c70 <MX_GPIO_Init+0x224>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a66:	4a82      	ldr	r2, [pc, #520]	@ (8002c70 <MX_GPIO_Init+0x224>)
 8002a68:	f043 0304 	orr.w	r3, r3, #4
 8002a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a6e:	4b80      	ldr	r3, [pc, #512]	@ (8002c70 <MX_GPIO_Init+0x224>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a7a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c70 <MX_GPIO_Init+0x224>)
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7e:	4a7c      	ldr	r2, [pc, #496]	@ (8002c70 <MX_GPIO_Init+0x224>)
 8002a80:	f043 0320 	orr.w	r3, r3, #32
 8002a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a86:	4b7a      	ldr	r3, [pc, #488]	@ (8002c70 <MX_GPIO_Init+0x224>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a92:	4b77      	ldr	r3, [pc, #476]	@ (8002c70 <MX_GPIO_Init+0x224>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a96:	4a76      	ldr	r2, [pc, #472]	@ (8002c70 <MX_GPIO_Init+0x224>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a9e:	4b74      	ldr	r3, [pc, #464]	@ (8002c70 <MX_GPIO_Init+0x224>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aaa:	4b71      	ldr	r3, [pc, #452]	@ (8002c70 <MX_GPIO_Init+0x224>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aae:	4a70      	ldr	r2, [pc, #448]	@ (8002c70 <MX_GPIO_Init+0x224>)
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ab6:	4b6e      	ldr	r3, [pc, #440]	@ (8002c70 <MX_GPIO_Init+0x224>)
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	607b      	str	r3, [r7, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ac2:	4b6b      	ldr	r3, [pc, #428]	@ (8002c70 <MX_GPIO_Init+0x224>)
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac6:	4a6a      	ldr	r2, [pc, #424]	@ (8002c70 <MX_GPIO_Init+0x224>)
 8002ac8:	f043 0308 	orr.w	r3, r3, #8
 8002acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ace:	4b68      	ldr	r3, [pc, #416]	@ (8002c70 <MX_GPIO_Init+0x224>)
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC,
 8002ada:	2200      	movs	r2, #0
 8002adc:	f64e 0120 	movw	r1, #59424	@ 0xe820
 8002ae0:	4864      	ldr	r0, [pc, #400]	@ (8002c74 <MX_GPIO_Init+0x228>)
 8002ae2:	f005 f98b 	bl	8007dfc <HAL_GPIO_WritePin>
                    AC_DC_CH2_Pin | CD_CH2_A_Pin | CD_CH2_B_Pin | CD_CH1_A_Pin |
                        ST7789_DC_Pin,
                    GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CD_CH2_C_Pin | AC_DC_CH1_Pin | CD_CH1_C_Pin,
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002aec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002af0:	f005 f984 	bl	8007dfc <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB,
 8002af4:	2200      	movs	r2, #0
 8002af6:	f248 0138 	movw	r1, #32824	@ 0x8038
 8002afa:	485f      	ldr	r0, [pc, #380]	@ (8002c78 <MX_GPIO_Init+0x22c>)
 8002afc:	f005 f97e 	bl	8007dfc <HAL_GPIO_WritePin>
                    CD_CH1_B_Pin | TLC5952_SCLK_Pin | TLC5952_LAT_Pin |
                        TLC5952_SIN_Pin,
                    GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FT6336_RST_GPIO_Port, FT6336_RST_Pin, GPIO_PIN_RESET);
 8002b00:	2200      	movs	r2, #0
 8002b02:	2104      	movs	r1, #4
 8002b04:	485d      	ldr	r0, [pc, #372]	@ (8002c7c <MX_GPIO_Init+0x230>)
 8002b06:	f005 f979 	bl	8007dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AC_DC_CH2_Pin CD_CH2_A_Pin CD_CH2_B_Pin CD_CH1_A_Pin
                           ST7789_DC_Pin */
  GPIO_InitStruct.Pin = AC_DC_CH2_Pin | CD_CH2_A_Pin | CD_CH2_B_Pin |
 8002b0a:	f64e 0320 	movw	r3, #59424	@ 0xe820
 8002b0e:	617b      	str	r3, [r7, #20]
                        CD_CH1_A_Pin | ST7789_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b10:	2301      	movs	r3, #1
 8002b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	4619      	mov	r1, r3
 8002b22:	4854      	ldr	r0, [pc, #336]	@ (8002c74 <MX_GPIO_Init+0x228>)
 8002b24:	f004 ffe8 	bl	8007af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	2300      	movs	r3, #0
 8002b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 8002b38:	230e      	movs	r3, #14
 8002b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	4619      	mov	r1, r3
 8002b42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b46:	f004 ffd7 	bl	8007af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_CH2_C_Pin AC_DC_CH1_Pin CD_CH1_C_Pin */
  GPIO_InitStruct.Pin = CD_CH2_C_Pin | AC_DC_CH1_Pin | CD_CH1_C_Pin;
 8002b4a:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b50:	2301      	movs	r3, #1
 8002b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	4619      	mov	r1, r3
 8002b62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b66:	f004 ffc7 	bl	8007af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_10;
 8002b6a:	f240 430c 	movw	r3, #1036	@ 0x40c
 8002b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7a:	f107 0314 	add.w	r3, r7, #20
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b84:	f004 ffb8 	bl	8007af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b88:	2310      	movs	r3, #16
 8002b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b8c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b96:	f107 0314 	add.w	r3, r7, #20
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4835      	ldr	r0, [pc, #212]	@ (8002c74 <MX_GPIO_Init+0x228>)
 8002b9e:	f004 ffab 	bl	8007af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8;
 8002ba2:	f240 1303 	movw	r3, #259	@ 0x103
 8002ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ba8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb2:	f107 0314 	add.w	r3, r7, #20
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	482f      	ldr	r0, [pc, #188]	@ (8002c78 <MX_GPIO_Init+0x22c>)
 8002bba:	f004 ff9d 	bl	8007af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_CH1_B_Pin TLC5952_SCLK_Pin TLC5952_LAT_Pin
   * TLC5952_SIN_Pin */
  GPIO_InitStruct.Pin =
 8002bbe:	f248 0338 	movw	r3, #32824	@ 0x8038
 8002bc2:	617b      	str	r3, [r7, #20]
      CD_CH1_B_Pin | TLC5952_SCLK_Pin | TLC5952_LAT_Pin | TLC5952_SIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4828      	ldr	r0, [pc, #160]	@ (8002c78 <MX_GPIO_Init+0x22c>)
 8002bd8:	f004 ff8e 	bl	8007af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FT6336_RST_Pin */
  GPIO_InitStruct.Pin = FT6336_RST_Pin;
 8002bdc:	2304      	movs	r3, #4
 8002bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be0:	2301      	movs	r3, #1
 8002be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be8:	2300      	movs	r3, #0
 8002bea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FT6336_RST_GPIO_Port, &GPIO_InitStruct);
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4822      	ldr	r0, [pc, #136]	@ (8002c7c <MX_GPIO_Init+0x230>)
 8002bf4:	f004 ff80 	bl	8007af8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	2006      	movs	r0, #6
 8002bfe:	f004 fa5e 	bl	80070be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002c02:	2006      	movs	r0, #6
 8002c04:	f004 fa75 	bl	80070f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	2007      	movs	r0, #7
 8002c0e:	f004 fa56 	bl	80070be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002c12:	2007      	movs	r0, #7
 8002c14:	f004 fa6d 	bl	80070f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	2008      	movs	r0, #8
 8002c1e:	f004 fa4e 	bl	80070be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002c22:	2008      	movs	r0, #8
 8002c24:	f004 fa65 	bl	80070f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	2009      	movs	r0, #9
 8002c2e:	f004 fa46 	bl	80070be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002c32:	2009      	movs	r0, #9
 8002c34:	f004 fa5d 	bl	80070f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	200a      	movs	r0, #10
 8002c3e:	f004 fa3e 	bl	80070be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002c42:	200a      	movs	r0, #10
 8002c44:	f004 fa55 	bl	80070f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	2017      	movs	r0, #23
 8002c4e:	f004 fa36 	bl	80070be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c52:	2017      	movs	r0, #23
 8002c54:	f004 fa4d 	bl	80070f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	2028      	movs	r0, #40	@ 0x28
 8002c5e:	f004 fa2e 	bl	80070be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c62:	2028      	movs	r0, #40	@ 0x28
 8002c64:	f004 fa45 	bl	80070f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002c68:	bf00      	nop
 8002c6a:	3728      	adds	r7, #40	@ 0x28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40021000 	.word	0x40021000
 8002c74:	48000800 	.word	0x48000800
 8002c78:	48000400 	.word	0x48000400
 8002c7c:	48000c00 	.word	0x48000c00

08002c80 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c84:	b672      	cpsid	i
}
 8002c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8002c88:	bf00      	nop
 8002c8a:	e7fd      	b.n	8002c88 <Error_Handler+0x8>

08002c8c <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8002c96:	bf00      	nop
	ST7789_DC_Clr();
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c9e:	4807      	ldr	r0, [pc, #28]	@ (8002cbc <ST7789_WriteCommand+0x30>)
 8002ca0:	f005 f8ac 	bl	8007dfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002ca4:	1df9      	adds	r1, r7, #7
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8002caa:	2201      	movs	r2, #1
 8002cac:	4804      	ldr	r0, [pc, #16]	@ (8002cc0 <ST7789_WriteCommand+0x34>)
 8002cae:	f009 fcfa 	bl	800c6a6 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8002cb2:	bf00      	nop
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	48000800 	.word	0x48000800
 8002cc0:	200009b4 	.word	0x200009b4

08002cc4 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8002cce:	bf00      	nop
	ST7789_DC_Set();
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002cd6:	481b      	ldr	r0, [pc, #108]	@ (8002d44 <ST7789_WriteData+0x80>)
 8002cd8:	f005 f890 	bl	8007dfc <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8002cdc:	e02a      	b.n	8002d34 <ST7789_WriteData+0x70>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	bf28      	it	cs
 8002ce8:	4613      	movcs	r3, r2
 8002cea:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 8002cec:	4b16      	ldr	r3, [pc, #88]	@ (8002d48 <ST7789_WriteData+0x84>)
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d30e      	bcc.n	8002d16 <ST7789_WriteData+0x52>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 8002cf8:	89fb      	ldrh	r3, [r7, #14]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4813      	ldr	r0, [pc, #76]	@ (8002d4c <ST7789_WriteData+0x88>)
 8002d00:	f009 fe48 	bl	800c994 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8002d04:	bf00      	nop
 8002d06:	4b11      	ldr	r3, [pc, #68]	@ (8002d4c <ST7789_WriteData+0x88>)
 8002d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d1f8      	bne.n	8002d06 <ST7789_WriteData+0x42>
 8002d14:	e006      	b.n	8002d24 <ST7789_WriteData+0x60>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8002d16:	89fa      	ldrh	r2, [r7, #14]
 8002d18:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	480b      	ldr	r0, [pc, #44]	@ (8002d4c <ST7789_WriteData+0x88>)
 8002d20:	f009 fcc1 	bl	800c6a6 <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 8002d24:	89fb      	ldrh	r3, [r7, #14]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	4413      	add	r3, r2
 8002d2a:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8002d2c:	89fb      	ldrh	r3, [r7, #14]
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1d1      	bne.n	8002cde <ST7789_WriteData+0x1a>
	}

	ST7789_UnSelect();
 8002d3a:	bf00      	nop
}
 8002d3c:	bf00      	nop
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	48000800 	.word	0x48000800
 8002d48:	2000003e 	.word	0x2000003e
 8002d4c:	200009b4 	.word	0x200009b4

08002d50 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8002d5a:	bf00      	nop
	ST7789_DC_Set();
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d62:	4807      	ldr	r0, [pc, #28]	@ (8002d80 <ST7789_WriteSmallData+0x30>)
 8002d64:	f005 f84a 	bl	8007dfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8002d68:	1df9      	adds	r1, r7, #7
 8002d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6e:	2201      	movs	r2, #1
 8002d70:	4804      	ldr	r0, [pc, #16]	@ (8002d84 <ST7789_WriteSmallData+0x34>)
 8002d72:	f009 fc98 	bl	800c6a6 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8002d76:	bf00      	nop
}
 8002d78:	bf00      	nop
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	48000800 	.word	0x48000800
 8002d84:	200009b4 	.word	0x200009b4

08002d88 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8002d92:	2036      	movs	r0, #54	@ 0x36
 8002d94:	f7ff ff7a 	bl	8002c8c <ST7789_WriteCommand>
	switch (m) {
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d81a      	bhi.n	8002dd4 <ST7789_SetRotation+0x4c>
 8002d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002da4 <ST7789_SetRotation+0x1c>)
 8002da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da4:	08002db5 	.word	0x08002db5
 8002da8:	08002dbd 	.word	0x08002dbd
 8002dac:	08002dc5 	.word	0x08002dc5
 8002db0:	08002dcd 	.word	0x08002dcd
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8002db4:	20c0      	movs	r0, #192	@ 0xc0
 8002db6:	f7ff ffcb 	bl	8002d50 <ST7789_WriteSmallData>
		break;
 8002dba:	e00c      	b.n	8002dd6 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002dbc:	20a0      	movs	r0, #160	@ 0xa0
 8002dbe:	f7ff ffc7 	bl	8002d50 <ST7789_WriteSmallData>
		break;
 8002dc2:	e008      	b.n	8002dd6 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f7ff ffc3 	bl	8002d50 <ST7789_WriteSmallData>
		break;
 8002dca:	e004      	b.n	8002dd6 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002dcc:	2060      	movs	r0, #96	@ 0x60
 8002dce:	f7ff ffbf 	bl	8002d50 <ST7789_WriteSmallData>
		break;
 8002dd2:	e000      	b.n	8002dd6 <ST7789_SetRotation+0x4e>
	default:
		break;
 8002dd4:	bf00      	nop
	}
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop

08002de0 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8002de0:	b590      	push	{r4, r7, lr}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4604      	mov	r4, r0
 8002de8:	4608      	mov	r0, r1
 8002dea:	4611      	mov	r1, r2
 8002dec:	461a      	mov	r2, r3
 8002dee:	4623      	mov	r3, r4
 8002df0:	80fb      	strh	r3, [r7, #6]
 8002df2:	4603      	mov	r3, r0
 8002df4:	80bb      	strh	r3, [r7, #4]
 8002df6:	460b      	mov	r3, r1
 8002df8:	807b      	strh	r3, [r7, #2]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8002dfe:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	82fb      	strh	r3, [r7, #22]
 8002e04:	887b      	ldrh	r3, [r7, #2]
 8002e06:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8002e08:	88bb      	ldrh	r3, [r7, #4]
 8002e0a:	827b      	strh	r3, [r7, #18]
 8002e0c:	883b      	ldrh	r3, [r7, #0]
 8002e0e:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8002e10:	202a      	movs	r0, #42	@ 0x2a
 8002e12:	f7ff ff3b 	bl	8002c8c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8002e16:	8afb      	ldrh	r3, [r7, #22]
 8002e18:	0a1b      	lsrs	r3, r3, #8
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	733b      	strb	r3, [r7, #12]
 8002e20:	8afb      	ldrh	r3, [r7, #22]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	737b      	strb	r3, [r7, #13]
 8002e26:	8abb      	ldrh	r3, [r7, #20]
 8002e28:	0a1b      	lsrs	r3, r3, #8
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	73bb      	strb	r3, [r7, #14]
 8002e30:	8abb      	ldrh	r3, [r7, #20]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8002e36:	f107 030c 	add.w	r3, r7, #12
 8002e3a:	2104      	movs	r1, #4
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff41 	bl	8002cc4 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8002e42:	202b      	movs	r0, #43	@ 0x2b
 8002e44:	f7ff ff22 	bl	8002c8c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8002e48:	8a7b      	ldrh	r3, [r7, #18]
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	723b      	strb	r3, [r7, #8]
 8002e52:	8a7b      	ldrh	r3, [r7, #18]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	727b      	strb	r3, [r7, #9]
 8002e58:	8a3b      	ldrh	r3, [r7, #16]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	72bb      	strb	r3, [r7, #10]
 8002e62:	8a3b      	ldrh	r3, [r7, #16]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8002e68:	f107 0308 	add.w	r3, r7, #8
 8002e6c:	2104      	movs	r1, #4
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ff28 	bl	8002cc4 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8002e74:	202c      	movs	r0, #44	@ 0x2c
 8002e76:	f7ff ff09 	bl	8002c8c <ST7789_WriteCommand>
	ST7789_UnSelect();
 8002e7a:	bf00      	nop
}
 8002e7c:	bf00      	nop
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd90      	pop	{r4, r7, pc}

08002e84 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b08b      	sub	sp, #44	@ 0x2c
 8002e88:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 8002e8a:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8002e8e:	2100      	movs	r1, #0
 8002e90:	484a      	ldr	r0, [pc, #296]	@ (8002fbc <ST7789_Init+0x138>)
 8002e92:	f011 fd1e 	bl	80148d2 <memset>
	#endif
	HAL_Delay(10);
 8002e96:	200a      	movs	r0, #10
 8002e98:	f001 fc00 	bl	800469c <HAL_Delay>
    ST7789_RST_Clr();
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2104      	movs	r1, #4
 8002ea0:	4847      	ldr	r0, [pc, #284]	@ (8002fc0 <ST7789_Init+0x13c>)
 8002ea2:	f004 ffab 	bl	8007dfc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002ea6:	200a      	movs	r0, #10
 8002ea8:	f001 fbf8 	bl	800469c <HAL_Delay>
    ST7789_RST_Set();
 8002eac:	2201      	movs	r2, #1
 8002eae:	2104      	movs	r1, #4
 8002eb0:	4843      	ldr	r0, [pc, #268]	@ (8002fc0 <ST7789_Init+0x13c>)
 8002eb2:	f004 ffa3 	bl	8007dfc <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8002eb6:	2014      	movs	r0, #20
 8002eb8:	f001 fbf0 	bl	800469c <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8002ebc:	203a      	movs	r0, #58	@ 0x3a
 8002ebe:	f7ff fee5 	bl	8002c8c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8002ec2:	2055      	movs	r0, #85	@ 0x55
 8002ec4:	f7ff ff44 	bl	8002d50 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8002ec8:	20b2      	movs	r0, #178	@ 0xb2
 8002eca:	f7ff fedf 	bl	8002c8c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8002ece:	4a3d      	ldr	r2, [pc, #244]	@ (8002fc4 <ST7789_Init+0x140>)
 8002ed0:	f107 0320 	add.w	r3, r7, #32
 8002ed4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ed8:	6018      	str	r0, [r3, #0]
 8002eda:	3304      	adds	r3, #4
 8002edc:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8002ede:	f107 0320 	add.w	r3, r7, #32
 8002ee2:	2105      	movs	r1, #5
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff feed 	bl	8002cc4 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8002eea:	2003      	movs	r0, #3
 8002eec:	f7ff ff4c 	bl	8002d88 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8002ef0:	20b7      	movs	r0, #183	@ 0xb7
 8002ef2:	f7ff fecb 	bl	8002c8c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8002ef6:	2035      	movs	r0, #53	@ 0x35
 8002ef8:	f7ff ff2a 	bl	8002d50 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8002efc:	20bb      	movs	r0, #187	@ 0xbb
 8002efe:	f7ff fec5 	bl	8002c8c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8002f02:	2019      	movs	r0, #25
 8002f04:	f7ff ff24 	bl	8002d50 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8002f08:	20c0      	movs	r0, #192	@ 0xc0
 8002f0a:	f7ff febf 	bl	8002c8c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8002f0e:	202c      	movs	r0, #44	@ 0x2c
 8002f10:	f7ff ff1e 	bl	8002d50 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8002f14:	20c2      	movs	r0, #194	@ 0xc2
 8002f16:	f7ff feb9 	bl	8002c8c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	f7ff ff18 	bl	8002d50 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8002f20:	20c3      	movs	r0, #195	@ 0xc3
 8002f22:	f7ff feb3 	bl	8002c8c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8002f26:	2012      	movs	r0, #18
 8002f28:	f7ff ff12 	bl	8002d50 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8002f2c:	20c4      	movs	r0, #196	@ 0xc4
 8002f2e:	f7ff fead 	bl	8002c8c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8002f32:	2020      	movs	r0, #32
 8002f34:	f7ff ff0c 	bl	8002d50 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8002f38:	20c6      	movs	r0, #198	@ 0xc6
 8002f3a:	f7ff fea7 	bl	8002c8c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8002f3e:	200f      	movs	r0, #15
 8002f40:	f7ff ff06 	bl	8002d50 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8002f44:	20d0      	movs	r0, #208	@ 0xd0
 8002f46:	f7ff fea1 	bl	8002c8c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8002f4a:	20a4      	movs	r0, #164	@ 0xa4
 8002f4c:	f7ff ff00 	bl	8002d50 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8002f50:	20a1      	movs	r0, #161	@ 0xa1
 8002f52:	f7ff fefd 	bl	8002d50 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8002f56:	20e0      	movs	r0, #224	@ 0xe0
 8002f58:	f7ff fe98 	bl	8002c8c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8002f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc8 <ST7789_Init+0x144>)
 8002f5e:	f107 0410 	add.w	r4, r7, #16
 8002f62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f64:	c407      	stmia	r4!, {r0, r1, r2}
 8002f66:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002f68:	f107 0310 	add.w	r3, r7, #16
 8002f6c:	210e      	movs	r1, #14
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fea8 	bl	8002cc4 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8002f74:	20e1      	movs	r0, #225	@ 0xe1
 8002f76:	f7ff fe89 	bl	8002c8c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8002f7a:	4b14      	ldr	r3, [pc, #80]	@ (8002fcc <ST7789_Init+0x148>)
 8002f7c:	463c      	mov	r4, r7
 8002f7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f80:	c407      	stmia	r4!, {r0, r1, r2}
 8002f82:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002f84:	463b      	mov	r3, r7
 8002f86:	210e      	movs	r1, #14
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fe9b 	bl	8002cc4 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8002f8e:	2021      	movs	r0, #33	@ 0x21
 8002f90:	f7ff fe7c 	bl	8002c8c <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8002f94:	2011      	movs	r0, #17
 8002f96:	f7ff fe79 	bl	8002c8c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8002f9a:	2013      	movs	r0, #19
 8002f9c:	f7ff fe76 	bl	8002c8c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8002fa0:	2029      	movs	r0, #41	@ 0x29
 8002fa2:	f7ff fe73 	bl	8002c8c <ST7789_WriteCommand>

	HAL_Delay(50);
 8002fa6:	2032      	movs	r0, #50	@ 0x32
 8002fa8:	f001 fb78 	bl	800469c <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8002fac:	2000      	movs	r0, #0
 8002fae:	f000 f80f 	bl	8002fd0 <ST7789_Fill_Color>
}
 8002fb2:	bf00      	nop
 8002fb4:	372c      	adds	r7, #44	@ 0x2c
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd90      	pop	{r4, r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20002dc0 	.word	0x20002dc0
 8002fc0:	48000c00 	.word	0x48000c00
 8002fc4:	08018120 	.word	0x08018120
 8002fc8:	08018128 	.word	0x08018128
 8002fcc:	08018138 	.word	0x08018138

08002fd0 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8002fda:	23ef      	movs	r3, #239	@ 0xef
 8002fdc:	f240 123f 	movw	r2, #319	@ 0x13f
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	f7ff fefc 	bl	8002de0 <ST7789_SetAddressWindow>
	ST7789_Select();
 8002fe8:	bf00      	nop

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8002fea:	2300      	movs	r3, #0
 8002fec:	81fb      	strh	r3, [r7, #14]
 8002fee:	e00e      	b.n	800300e <ST7789_Fill_Color+0x3e>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8002ff0:	88fb      	ldrh	r3, [r7, #6]
 8002ff2:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4809      	ldr	r0, [pc, #36]	@ (8003020 <ST7789_Fill_Color+0x50>)
 8002ffa:	f011 fc6a 	bl	80148d2 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8002ffe:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 8003002:	4807      	ldr	r0, [pc, #28]	@ (8003020 <ST7789_Fill_Color+0x50>)
 8003004:	f7ff fe5e 	bl	8002cc4 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8003008:	89fb      	ldrh	r3, [r7, #14]
 800300a:	3301      	adds	r3, #1
 800300c:	81fb      	strh	r3, [r7, #14]
 800300e:	89fb      	ldrh	r3, [r7, #14]
 8003010:	2b2f      	cmp	r3, #47	@ 0x2f
 8003012:	d9ed      	bls.n	8002ff0 <ST7789_Fill_Color+0x20>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8003014:	bf00      	nop
}
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20002dc0 	.word	0x20002dc0

08003024 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	80fb      	strh	r3, [r7, #6]
 800302e:	460b      	mov	r3, r1
 8003030:	80bb      	strh	r3, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800303c:	d219      	bcs.n	8003072 <ST7789_DrawPixel+0x4e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 800303e:	88bb      	ldrh	r3, [r7, #4]
 8003040:	2bef      	cmp	r3, #239	@ 0xef
 8003042:	d816      	bhi.n	8003072 <ST7789_DrawPixel+0x4e>
	
	ST7789_SetAddressWindow(x, y, x, y);
 8003044:	88bb      	ldrh	r3, [r7, #4]
 8003046:	88fa      	ldrh	r2, [r7, #6]
 8003048:	88b9      	ldrh	r1, [r7, #4]
 800304a:	88f8      	ldrh	r0, [r7, #6]
 800304c:	f7ff fec8 	bl	8002de0 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 8003050:	887b      	ldrh	r3, [r7, #2]
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	b29b      	uxth	r3, r3
 8003056:	b2db      	uxtb	r3, r3
 8003058:	733b      	strb	r3, [r7, #12]
 800305a:	887b      	ldrh	r3, [r7, #2]
 800305c:	b2db      	uxtb	r3, r3
 800305e:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 8003060:	bf00      	nop
	ST7789_WriteData(data, sizeof(data));
 8003062:	f107 030c 	add.w	r3, r7, #12
 8003066:	2102      	movs	r1, #2
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fe2b 	bl	8002cc4 <ST7789_WriteData>
	ST7789_UnSelect();
 800306e:	bf00      	nop
 8003070:	e000      	b.n	8003074 <ST7789_DrawPixel+0x50>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8003072:	bf00      	nop
}
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 800307a:	b590      	push	{r4, r7, lr}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	4604      	mov	r4, r0
 8003082:	4608      	mov	r0, r1
 8003084:	4611      	mov	r1, r2
 8003086:	461a      	mov	r2, r3
 8003088:	4623      	mov	r3, r4
 800308a:	80fb      	strh	r3, [r7, #6]
 800308c:	4603      	mov	r3, r0
 800308e:	80bb      	strh	r3, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	807b      	strh	r3, [r7, #2]
 8003094:	4613      	mov	r3, r2
 8003096:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800309e:	d22a      	bcs.n	80030f6 <ST7789_DrawImage+0x7c>
 80030a0:	88bb      	ldrh	r3, [r7, #4]
 80030a2:	2bef      	cmp	r3, #239	@ 0xef
 80030a4:	d827      	bhi.n	80030f6 <ST7789_DrawImage+0x7c>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 80030a6:	88fa      	ldrh	r2, [r7, #6]
 80030a8:	887b      	ldrh	r3, [r7, #2]
 80030aa:	4413      	add	r3, r2
 80030ac:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80030b0:	dc23      	bgt.n	80030fa <ST7789_DrawImage+0x80>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 80030b2:	88ba      	ldrh	r2, [r7, #4]
 80030b4:	883b      	ldrh	r3, [r7, #0]
 80030b6:	4413      	add	r3, r2
 80030b8:	2bf0      	cmp	r3, #240	@ 0xf0
 80030ba:	dc20      	bgt.n	80030fe <ST7789_DrawImage+0x84>
		return;

	ST7789_Select();
 80030bc:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80030be:	88fa      	ldrh	r2, [r7, #6]
 80030c0:	887b      	ldrh	r3, [r7, #2]
 80030c2:	4413      	add	r3, r2
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29c      	uxth	r4, r3
 80030ca:	88ba      	ldrh	r2, [r7, #4]
 80030cc:	883b      	ldrh	r3, [r7, #0]
 80030ce:	4413      	add	r3, r2
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	88b9      	ldrh	r1, [r7, #4]
 80030d8:	88f8      	ldrh	r0, [r7, #6]
 80030da:	4622      	mov	r2, r4
 80030dc:	f7ff fe80 	bl	8002de0 <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 80030e0:	887b      	ldrh	r3, [r7, #2]
 80030e2:	883a      	ldrh	r2, [r7, #0]
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4619      	mov	r1, r3
 80030ec:	69b8      	ldr	r0, [r7, #24]
 80030ee:	f7ff fde9 	bl	8002cc4 <ST7789_WriteData>
	ST7789_UnSelect();
 80030f2:	bf00      	nop
 80030f4:	e004      	b.n	8003100 <ST7789_DrawImage+0x86>
		return;
 80030f6:	bf00      	nop
 80030f8:	e002      	b.n	8003100 <ST7789_DrawImage+0x86>
		return;
 80030fa:	bf00      	nop
 80030fc:	e000      	b.n	8003100 <ST7789_DrawImage+0x86>
		return;
 80030fe:	bf00      	nop
}
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	bd90      	pop	{r4, r7, pc}

08003106 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003106:	b082      	sub	sp, #8
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af00      	add	r7, sp, #0
 800310e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003110:	4603      	mov	r3, r0
 8003112:	80fb      	strh	r3, [r7, #6]
 8003114:	460b      	mov	r3, r1
 8003116:	80bb      	strh	r3, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 800311c:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 800311e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003122:	461a      	mov	r2, r3
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	4413      	add	r3, r2
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003132:	4619      	mov	r1, r3
 8003134:	88bb      	ldrh	r3, [r7, #4]
 8003136:	440b      	add	r3, r1
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29b      	uxth	r3, r3
 800313e:	88b9      	ldrh	r1, [r7, #4]
 8003140:	88f8      	ldrh	r0, [r7, #6]
 8003142:	f7ff fe4d 	bl	8002de0 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	e041      	b.n	80031d0 <ST7789_WriteChar+0xca>
		b = font.data[(ch - 32) * font.height + i];
 800314c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	3b20      	subs	r3, #32
 8003152:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4619      	mov	r1, r3
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	440b      	add	r3, r1
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8003168:	2300      	movs	r3, #0
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	e027      	b.n	80031be <ST7789_WriteChar+0xb8>
			if ((b << j) & 0x8000) {
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00e      	beq.n	800319c <ST7789_WriteChar+0x96>
				uint8_t data[] = {color >> 8, color & 0xFF};
 800317e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	b29b      	uxth	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	743b      	strb	r3, [r7, #16]
 8003188:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800318a:	b2db      	uxtb	r3, r3
 800318c:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 800318e:	f107 0310 	add.w	r3, r7, #16
 8003192:	2102      	movs	r1, #2
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fd95 	bl	8002cc4 <ST7789_WriteData>
 800319a:	e00d      	b.n	80031b8 <ST7789_WriteChar+0xb2>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 800319c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800319e:	0a1b      	lsrs	r3, r3, #8
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	733b      	strb	r3, [r7, #12]
 80031a6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 80031ac:	f107 030c 	add.w	r3, r7, #12
 80031b0:	2102      	movs	r1, #2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fd86 	bl	8002cc4 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	3301      	adds	r3, #1
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80031c2:	461a      	mov	r2, r3
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d3d1      	bcc.n	800316e <ST7789_WriteChar+0x68>
	for (i = 0; i < font.height; i++) {
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3301      	adds	r3, #1
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80031d4:	461a      	mov	r2, r3
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	4293      	cmp	r3, r2
 80031da:	d3b7      	bcc.n	800314c <ST7789_WriteChar+0x46>
			}
		}
	}
	ST7789_UnSelect();
 80031dc:	bf00      	nop
}
 80031de:	bf00      	nop
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031e8:	b002      	add	sp, #8
 80031ea:	4770      	bx	lr

080031ec <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80031ec:	b082      	sub	sp, #8
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b086      	sub	sp, #24
 80031f2:	af04      	add	r7, sp, #16
 80031f4:	603a      	str	r2, [r7, #0]
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	4603      	mov	r3, r0
 80031fa:	80fb      	strh	r3, [r7, #6]
 80031fc:	460b      	mov	r3, r1
 80031fe:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8003200:	bf00      	nop
	while (*str) {
 8003202:	e02e      	b.n	8003262 <ST7789_WriteString+0x76>
		if (x + font.width >= ST7789_WIDTH) {
 8003204:	88fb      	ldrh	r3, [r7, #6]
 8003206:	7d3a      	ldrb	r2, [r7, #20]
 8003208:	4413      	add	r3, r2
 800320a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800320e:	db13      	blt.n	8003238 <ST7789_WriteString+0x4c>
			x = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8003214:	7d7b      	ldrb	r3, [r7, #21]
 8003216:	461a      	mov	r2, r3
 8003218:	88bb      	ldrh	r3, [r7, #4]
 800321a:	4413      	add	r3, r2
 800321c:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 800321e:	88bb      	ldrh	r3, [r7, #4]
 8003220:	7d7a      	ldrb	r2, [r7, #21]
 8003222:	4413      	add	r3, r2
 8003224:	2bef      	cmp	r3, #239	@ 0xef
 8003226:	dc21      	bgt.n	800326c <ST7789_WriteString+0x80>
				break;
			}

			if (*str == ' ') {
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b20      	cmp	r3, #32
 800322e:	d103      	bne.n	8003238 <ST7789_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	3301      	adds	r3, #1
 8003234:	603b      	str	r3, [r7, #0]
				continue;
 8003236:	e014      	b.n	8003262 <ST7789_WriteString+0x76>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	781a      	ldrb	r2, [r3, #0]
 800323c:	88b9      	ldrh	r1, [r7, #4]
 800323e:	88f8      	ldrh	r0, [r7, #6]
 8003240:	8c3b      	ldrh	r3, [r7, #32]
 8003242:	9302      	str	r3, [sp, #8]
 8003244:	8bbb      	ldrh	r3, [r7, #28]
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f7ff ff5a 	bl	8003106 <ST7789_WriteChar>
		x += font.width;
 8003252:	7d3b      	ldrb	r3, [r7, #20]
 8003254:	461a      	mov	r2, r3
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	4413      	add	r3, r2
 800325a:	80fb      	strh	r3, [r7, #6]
		str++;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	3301      	adds	r3, #1
 8003260:	603b      	str	r3, [r7, #0]
	while (*str) {
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1cc      	bne.n	8003204 <ST7789_WriteString+0x18>
 800326a:	e000      	b.n	800326e <ST7789_WriteString+0x82>
				break;
 800326c:	bf00      	nop
	}
	ST7789_UnSelect();
 800326e:	bf00      	nop
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800327a:	b002      	add	sp, #8
 800327c:	4770      	bx	lr
	...

08003280 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003286:	4b11      	ldr	r3, [pc, #68]	@ (80032cc <HAL_MspInit+0x4c>)
 8003288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328a:	4a10      	ldr	r2, [pc, #64]	@ (80032cc <HAL_MspInit+0x4c>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6613      	str	r3, [r2, #96]	@ 0x60
 8003292:	4b0e      	ldr	r3, [pc, #56]	@ (80032cc <HAL_MspInit+0x4c>)
 8003294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	607b      	str	r3, [r7, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800329e:	4b0b      	ldr	r3, [pc, #44]	@ (80032cc <HAL_MspInit+0x4c>)
 80032a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a2:	4a0a      	ldr	r2, [pc, #40]	@ (80032cc <HAL_MspInit+0x4c>)
 80032a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80032aa:	4b08      	ldr	r3, [pc, #32]	@ (80032cc <HAL_MspInit+0x4c>)
 80032ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80032b6:	f001 fa27 	bl	8004708 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80032ba:	2002      	movs	r0, #2
 80032bc:	f001 fa10 	bl	80046e0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80032c0:	f008 f98e 	bl	800b5e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40021000 	.word	0x40021000

080032d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b0a2      	sub	sp, #136	@ 0x88
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032e8:	f107 0320 	add.w	r3, r7, #32
 80032ec:	2254      	movs	r2, #84	@ 0x54
 80032ee:	2100      	movs	r1, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f011 faee 	bl	80148d2 <memset>
  if(hadc->Instance==ADC2)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a69      	ldr	r2, [pc, #420]	@ (80034a0 <HAL_ADC_MspInit+0x1d0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d160      	bne.n	80033c2 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003300:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003304:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003306:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800330a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800330c:	f107 0320 	add.w	r3, r7, #32
 8003310:	4618      	mov	r0, r3
 8003312:	f008 fecf 	bl	800c0b4 <HAL_RCCEx_PeriphCLKConfig>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800331c:	f7ff fcb0 	bl	8002c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003320:	4b60      	ldr	r3, [pc, #384]	@ (80034a4 <HAL_ADC_MspInit+0x1d4>)
 8003322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003324:	4a5f      	ldr	r2, [pc, #380]	@ (80034a4 <HAL_ADC_MspInit+0x1d4>)
 8003326:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800332a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800332c:	4b5d      	ldr	r3, [pc, #372]	@ (80034a4 <HAL_ADC_MspInit+0x1d4>)
 800332e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003330:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003338:	4b5a      	ldr	r3, [pc, #360]	@ (80034a4 <HAL_ADC_MspInit+0x1d4>)
 800333a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800333c:	4a59      	ldr	r2, [pc, #356]	@ (80034a4 <HAL_ADC_MspInit+0x1d4>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003344:	4b57      	ldr	r3, [pc, #348]	@ (80034a4 <HAL_ADC_MspInit+0x1d4>)
 8003346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	69bb      	ldr	r3, [r7, #24]
    /**ADC2 GPIO Configuration
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003350:	2380      	movs	r3, #128	@ 0x80
 8003352:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003354:	2303      	movs	r3, #3
 8003356:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	2300      	movs	r3, #0
 800335a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003360:	4619      	mov	r1, r3
 8003362:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003366:	f004 fbc7 	bl	8007af8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel5;
 800336a:	4b4f      	ldr	r3, [pc, #316]	@ (80034a8 <HAL_ADC_MspInit+0x1d8>)
 800336c:	4a4f      	ldr	r2, [pc, #316]	@ (80034ac <HAL_ADC_MspInit+0x1dc>)
 800336e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003370:	4b4d      	ldr	r3, [pc, #308]	@ (80034a8 <HAL_ADC_MspInit+0x1d8>)
 8003372:	2224      	movs	r2, #36	@ 0x24
 8003374:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003376:	4b4c      	ldr	r3, [pc, #304]	@ (80034a8 <HAL_ADC_MspInit+0x1d8>)
 8003378:	2200      	movs	r2, #0
 800337a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800337c:	4b4a      	ldr	r3, [pc, #296]	@ (80034a8 <HAL_ADC_MspInit+0x1d8>)
 800337e:	2200      	movs	r2, #0
 8003380:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003382:	4b49      	ldr	r3, [pc, #292]	@ (80034a8 <HAL_ADC_MspInit+0x1d8>)
 8003384:	2280      	movs	r2, #128	@ 0x80
 8003386:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003388:	4b47      	ldr	r3, [pc, #284]	@ (80034a8 <HAL_ADC_MspInit+0x1d8>)
 800338a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800338e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003390:	4b45      	ldr	r3, [pc, #276]	@ (80034a8 <HAL_ADC_MspInit+0x1d8>)
 8003392:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003396:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003398:	4b43      	ldr	r3, [pc, #268]	@ (80034a8 <HAL_ADC_MspInit+0x1d8>)
 800339a:	2220      	movs	r2, #32
 800339c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800339e:	4b42      	ldr	r3, [pc, #264]	@ (80034a8 <HAL_ADC_MspInit+0x1d8>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80033a4:	4840      	ldr	r0, [pc, #256]	@ (80034a8 <HAL_ADC_MspInit+0x1d8>)
 80033a6:	f004 f935 	bl	8007614 <HAL_DMA_Init>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80033b0:	f7ff fc66 	bl	8002c80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a3c      	ldr	r2, [pc, #240]	@ (80034a8 <HAL_ADC_MspInit+0x1d8>)
 80033b8:	655a      	str	r2, [r3, #84]	@ 0x54
 80033ba:	4a3b      	ldr	r2, [pc, #236]	@ (80034a8 <HAL_ADC_MspInit+0x1d8>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 80033c0:	e0f7      	b.n	80035b2 <HAL_ADC_MspInit+0x2e2>
  else if(hadc->Instance==ADC3)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a3a      	ldr	r2, [pc, #232]	@ (80034b0 <HAL_ADC_MspInit+0x1e0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d17b      	bne.n	80034c4 <HAL_ADC_MspInit+0x1f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80033cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033d0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80033d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033d8:	f107 0320 	add.w	r3, r7, #32
 80033dc:	4618      	mov	r0, r3
 80033de:	f008 fe69 	bl	800c0b4 <HAL_RCCEx_PeriphCLKConfig>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_ADC_MspInit+0x11c>
      Error_Handler();
 80033e8:	f7ff fc4a 	bl	8002c80 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80033ec:	4b31      	ldr	r3, [pc, #196]	@ (80034b4 <HAL_ADC_MspInit+0x1e4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3301      	adds	r3, #1
 80033f2:	4a30      	ldr	r2, [pc, #192]	@ (80034b4 <HAL_ADC_MspInit+0x1e4>)
 80033f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80033f6:	4b2f      	ldr	r3, [pc, #188]	@ (80034b4 <HAL_ADC_MspInit+0x1e4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d10b      	bne.n	8003416 <HAL_ADC_MspInit+0x146>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80033fe:	4b29      	ldr	r3, [pc, #164]	@ (80034a4 <HAL_ADC_MspInit+0x1d4>)
 8003400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003402:	4a28      	ldr	r2, [pc, #160]	@ (80034a4 <HAL_ADC_MspInit+0x1d4>)
 8003404:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800340a:	4b26      	ldr	r3, [pc, #152]	@ (80034a4 <HAL_ADC_MspInit+0x1d4>)
 800340c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003416:	4b23      	ldr	r3, [pc, #140]	@ (80034a4 <HAL_ADC_MspInit+0x1d4>)
 8003418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800341a:	4a22      	ldr	r2, [pc, #136]	@ (80034a4 <HAL_ADC_MspInit+0x1d4>)
 800341c:	f043 0302 	orr.w	r3, r3, #2
 8003420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003422:	4b20      	ldr	r3, [pc, #128]	@ (80034a4 <HAL_ADC_MspInit+0x1d4>)
 8003424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800342e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003432:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003434:	2303      	movs	r3, #3
 8003436:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003440:	4619      	mov	r1, r3
 8003442:	481d      	ldr	r0, [pc, #116]	@ (80034b8 <HAL_ADC_MspInit+0x1e8>)
 8003444:	f004 fb58 	bl	8007af8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel6;
 8003448:	4b1c      	ldr	r3, [pc, #112]	@ (80034bc <HAL_ADC_MspInit+0x1ec>)
 800344a:	4a1d      	ldr	r2, [pc, #116]	@ (80034c0 <HAL_ADC_MspInit+0x1f0>)
 800344c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800344e:	4b1b      	ldr	r3, [pc, #108]	@ (80034bc <HAL_ADC_MspInit+0x1ec>)
 8003450:	2225      	movs	r2, #37	@ 0x25
 8003452:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003454:	4b19      	ldr	r3, [pc, #100]	@ (80034bc <HAL_ADC_MspInit+0x1ec>)
 8003456:	2200      	movs	r2, #0
 8003458:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800345a:	4b18      	ldr	r3, [pc, #96]	@ (80034bc <HAL_ADC_MspInit+0x1ec>)
 800345c:	2200      	movs	r2, #0
 800345e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003460:	4b16      	ldr	r3, [pc, #88]	@ (80034bc <HAL_ADC_MspInit+0x1ec>)
 8003462:	2280      	movs	r2, #128	@ 0x80
 8003464:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003466:	4b15      	ldr	r3, [pc, #84]	@ (80034bc <HAL_ADC_MspInit+0x1ec>)
 8003468:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800346c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800346e:	4b13      	ldr	r3, [pc, #76]	@ (80034bc <HAL_ADC_MspInit+0x1ec>)
 8003470:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003474:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003476:	4b11      	ldr	r3, [pc, #68]	@ (80034bc <HAL_ADC_MspInit+0x1ec>)
 8003478:	2220      	movs	r2, #32
 800347a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800347c:	4b0f      	ldr	r3, [pc, #60]	@ (80034bc <HAL_ADC_MspInit+0x1ec>)
 800347e:	2200      	movs	r2, #0
 8003480:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003482:	480e      	ldr	r0, [pc, #56]	@ (80034bc <HAL_ADC_MspInit+0x1ec>)
 8003484:	f004 f8c6 	bl	8007614 <HAL_DMA_Init>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_ADC_MspInit+0x1c2>
      Error_Handler();
 800348e:	f7ff fbf7 	bl	8002c80 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a09      	ldr	r2, [pc, #36]	@ (80034bc <HAL_ADC_MspInit+0x1ec>)
 8003496:	655a      	str	r2, [r3, #84]	@ 0x54
 8003498:	4a08      	ldr	r2, [pc, #32]	@ (80034bc <HAL_ADC_MspInit+0x1ec>)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800349e:	e088      	b.n	80035b2 <HAL_ADC_MspInit+0x2e2>
 80034a0:	50000100 	.word	0x50000100
 80034a4:	40021000 	.word	0x40021000
 80034a8:	20000500 	.word	0x20000500
 80034ac:	40020058 	.word	0x40020058
 80034b0:	50000400 	.word	0x50000400
 80034b4:	20003aa4 	.word	0x20003aa4
 80034b8:	48000400 	.word	0x48000400
 80034bc:	20000560 	.word	0x20000560
 80034c0:	4002006c 	.word	0x4002006c
  else if(hadc->Instance==ADC5)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a3c      	ldr	r2, [pc, #240]	@ (80035bc <HAL_ADC_MspInit+0x2ec>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d171      	bne.n	80035b2 <HAL_ADC_MspInit+0x2e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80034ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80034d2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80034d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80034d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034da:	f107 0320 	add.w	r3, r7, #32
 80034de:	4618      	mov	r0, r3
 80034e0:	f008 fde8 	bl	800c0b4 <HAL_RCCEx_PeriphCLKConfig>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_ADC_MspInit+0x21e>
      Error_Handler();
 80034ea:	f7ff fbc9 	bl	8002c80 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80034ee:	4b34      	ldr	r3, [pc, #208]	@ (80035c0 <HAL_ADC_MspInit+0x2f0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3301      	adds	r3, #1
 80034f4:	4a32      	ldr	r2, [pc, #200]	@ (80035c0 <HAL_ADC_MspInit+0x2f0>)
 80034f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80034f8:	4b31      	ldr	r3, [pc, #196]	@ (80035c0 <HAL_ADC_MspInit+0x2f0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d10b      	bne.n	8003518 <HAL_ADC_MspInit+0x248>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003500:	4b30      	ldr	r3, [pc, #192]	@ (80035c4 <HAL_ADC_MspInit+0x2f4>)
 8003502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003504:	4a2f      	ldr	r2, [pc, #188]	@ (80035c4 <HAL_ADC_MspInit+0x2f4>)
 8003506:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800350a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800350c:	4b2d      	ldr	r3, [pc, #180]	@ (80035c4 <HAL_ADC_MspInit+0x2f4>)
 800350e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003510:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003518:	4b2a      	ldr	r3, [pc, #168]	@ (80035c4 <HAL_ADC_MspInit+0x2f4>)
 800351a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351c:	4a29      	ldr	r2, [pc, #164]	@ (80035c4 <HAL_ADC_MspInit+0x2f4>)
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003524:	4b27      	ldr	r3, [pc, #156]	@ (80035c4 <HAL_ADC_MspInit+0x2f4>)
 8003526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_KEY_Pin;
 8003530:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003534:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003536:	2303      	movs	r3, #3
 8003538:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(ADC_KEY_GPIO_Port, &GPIO_InitStruct);
 800353e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003542:	4619      	mov	r1, r3
 8003544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003548:	f004 fad6 	bl	8007af8 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel4;
 800354c:	4b1e      	ldr	r3, [pc, #120]	@ (80035c8 <HAL_ADC_MspInit+0x2f8>)
 800354e:	4a1f      	ldr	r2, [pc, #124]	@ (80035cc <HAL_ADC_MspInit+0x2fc>)
 8003550:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8003552:	4b1d      	ldr	r3, [pc, #116]	@ (80035c8 <HAL_ADC_MspInit+0x2f8>)
 8003554:	2227      	movs	r2, #39	@ 0x27
 8003556:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003558:	4b1b      	ldr	r3, [pc, #108]	@ (80035c8 <HAL_ADC_MspInit+0x2f8>)
 800355a:	2200      	movs	r2, #0
 800355c:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 800355e:	4b1a      	ldr	r3, [pc, #104]	@ (80035c8 <HAL_ADC_MspInit+0x2f8>)
 8003560:	2200      	movs	r2, #0
 8003562:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8003564:	4b18      	ldr	r3, [pc, #96]	@ (80035c8 <HAL_ADC_MspInit+0x2f8>)
 8003566:	2280      	movs	r2, #128	@ 0x80
 8003568:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800356a:	4b17      	ldr	r3, [pc, #92]	@ (80035c8 <HAL_ADC_MspInit+0x2f8>)
 800356c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003570:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003572:	4b15      	ldr	r3, [pc, #84]	@ (80035c8 <HAL_ADC_MspInit+0x2f8>)
 8003574:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003578:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 800357a:	4b13      	ldr	r3, [pc, #76]	@ (80035c8 <HAL_ADC_MspInit+0x2f8>)
 800357c:	2220      	movs	r2, #32
 800357e:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8003580:	4b11      	ldr	r3, [pc, #68]	@ (80035c8 <HAL_ADC_MspInit+0x2f8>)
 8003582:	2200      	movs	r2, #0
 8003584:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8003586:	4810      	ldr	r0, [pc, #64]	@ (80035c8 <HAL_ADC_MspInit+0x2f8>)
 8003588:	f004 f844 	bl	8007614 <HAL_DMA_Init>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8003592:	f7ff fb75 	bl	8002c80 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a0b      	ldr	r2, [pc, #44]	@ (80035c8 <HAL_ADC_MspInit+0x2f8>)
 800359a:	655a      	str	r2, [r3, #84]	@ 0x54
 800359c:	4a0a      	ldr	r2, [pc, #40]	@ (80035c8 <HAL_ADC_MspInit+0x2f8>)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC5_IRQn, 0, 0);
 80035a2:	2200      	movs	r2, #0
 80035a4:	2100      	movs	r1, #0
 80035a6:	203e      	movs	r0, #62	@ 0x3e
 80035a8:	f003 fd89 	bl	80070be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
 80035ac:	203e      	movs	r0, #62	@ 0x3e
 80035ae:	f003 fda0 	bl	80070f2 <HAL_NVIC_EnableIRQ>
}
 80035b2:	bf00      	nop
 80035b4:	3788      	adds	r7, #136	@ 0x88
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	50000600 	.word	0x50000600
 80035c0:	20003aa4 	.word	0x20003aa4
 80035c4:	40021000 	.word	0x40021000
 80035c8:	200005c0 	.word	0x200005c0
 80035cc:	40020044 	.word	0x40020044

080035d0 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08a      	sub	sp, #40	@ 0x28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d8:	f107 0314 	add.w	r3, r7, #20
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	609a      	str	r2, [r3, #8]
 80035e4:	60da      	str	r2, [r3, #12]
 80035e6:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1f      	ldr	r2, [pc, #124]	@ (800366c <HAL_COMP_MspInit+0x9c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d119      	bne.n	8003626 <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003670 <HAL_COMP_MspInit+0xa0>)
 80035f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003670 <HAL_COMP_MspInit+0xa0>)
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003670 <HAL_COMP_MspInit+0xa0>)
 8003600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	693b      	ldr	r3, [r7, #16]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800360a:	2380      	movs	r3, #128	@ 0x80
 800360c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800360e:	2303      	movs	r3, #3
 8003610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003616:	f107 0314 	add.w	r3, r7, #20
 800361a:	4619      	mov	r1, r3
 800361c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003620:	f004 fa6a 	bl	8007af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP5_MspInit 1 */

  /* USER CODE END COMP5_MspInit 1 */
  }

}
 8003624:	e01d      	b.n	8003662 <HAL_COMP_MspInit+0x92>
  else if(hcomp->Instance==COMP5)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a12      	ldr	r2, [pc, #72]	@ (8003674 <HAL_COMP_MspInit+0xa4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d118      	bne.n	8003662 <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003630:	4b0f      	ldr	r3, [pc, #60]	@ (8003670 <HAL_COMP_MspInit+0xa0>)
 8003632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003634:	4a0e      	ldr	r2, [pc, #56]	@ (8003670 <HAL_COMP_MspInit+0xa0>)
 8003636:	f043 0302 	orr.w	r3, r3, #2
 800363a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800363c:	4b0c      	ldr	r3, [pc, #48]	@ (8003670 <HAL_COMP_MspInit+0xa0>)
 800363e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003648:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800364c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800364e:	2303      	movs	r3, #3
 8003650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003656:	f107 0314 	add.w	r3, r7, #20
 800365a:	4619      	mov	r1, r3
 800365c:	4806      	ldr	r0, [pc, #24]	@ (8003678 <HAL_COMP_MspInit+0xa8>)
 800365e:	f004 fa4b 	bl	8007af8 <HAL_GPIO_Init>
}
 8003662:	bf00      	nop
 8003664:	3728      	adds	r7, #40	@ 0x28
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40010204 	.word	0x40010204
 8003670:	40021000 	.word	0x40021000
 8003674:	40010210 	.word	0x40010210
 8003678:	48000400 	.word	0x48000400

0800367c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08c      	sub	sp, #48	@ 0x30
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003684:	f107 031c 	add.w	r3, r7, #28
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	60da      	str	r2, [r3, #12]
 8003692:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a34      	ldr	r2, [pc, #208]	@ (800376c <HAL_DAC_MspInit+0xf0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d125      	bne.n	80036ea <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800369e:	4b34      	ldr	r3, [pc, #208]	@ (8003770 <HAL_DAC_MspInit+0xf4>)
 80036a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036a2:	4a33      	ldr	r2, [pc, #204]	@ (8003770 <HAL_DAC_MspInit+0xf4>)
 80036a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036aa:	4b31      	ldr	r3, [pc, #196]	@ (8003770 <HAL_DAC_MspInit+0xf4>)
 80036ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036b2:	61bb      	str	r3, [r7, #24]
 80036b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003770 <HAL_DAC_MspInit+0xf4>)
 80036b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ba:	4a2d      	ldr	r2, [pc, #180]	@ (8003770 <HAL_DAC_MspInit+0xf4>)
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003770 <HAL_DAC_MspInit+0xf4>)
 80036c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80036ce:	2310      	movs	r3, #16
 80036d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036d2:	2303      	movs	r3, #3
 80036d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036da:	f107 031c 	add.w	r3, r7, #28
 80036de:	4619      	mov	r1, r3
 80036e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036e4:	f004 fa08 	bl	8007af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 80036e8:	e03b      	b.n	8003762 <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC2)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a21      	ldr	r2, [pc, #132]	@ (8003774 <HAL_DAC_MspInit+0xf8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d125      	bne.n	8003740 <HAL_DAC_MspInit+0xc4>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80036f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003770 <HAL_DAC_MspInit+0xf4>)
 80036f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003770 <HAL_DAC_MspInit+0xf4>)
 80036fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003700:	4b1b      	ldr	r3, [pc, #108]	@ (8003770 <HAL_DAC_MspInit+0xf4>)
 8003702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370c:	4b18      	ldr	r3, [pc, #96]	@ (8003770 <HAL_DAC_MspInit+0xf4>)
 800370e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003710:	4a17      	ldr	r2, [pc, #92]	@ (8003770 <HAL_DAC_MspInit+0xf4>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003718:	4b15      	ldr	r3, [pc, #84]	@ (8003770 <HAL_DAC_MspInit+0xf4>)
 800371a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003724:	2340      	movs	r3, #64	@ 0x40
 8003726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003728:	2303      	movs	r3, #3
 800372a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372c:	2300      	movs	r3, #0
 800372e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003730:	f107 031c 	add.w	r3, r7, #28
 8003734:	4619      	mov	r1, r3
 8003736:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800373a:	f004 f9dd 	bl	8007af8 <HAL_GPIO_Init>
}
 800373e:	e010      	b.n	8003762 <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC4)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a0c      	ldr	r2, [pc, #48]	@ (8003778 <HAL_DAC_MspInit+0xfc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d10b      	bne.n	8003762 <HAL_DAC_MspInit+0xe6>
    __HAL_RCC_DAC4_CLK_ENABLE();
 800374a:	4b09      	ldr	r3, [pc, #36]	@ (8003770 <HAL_DAC_MspInit+0xf4>)
 800374c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374e:	4a08      	ldr	r2, [pc, #32]	@ (8003770 <HAL_DAC_MspInit+0xf4>)
 8003750:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003756:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <HAL_DAC_MspInit+0xf4>)
 8003758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	68bb      	ldr	r3, [r7, #8]
}
 8003762:	bf00      	nop
 8003764:	3730      	adds	r7, #48	@ 0x30
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	50000800 	.word	0x50000800
 8003770:	40021000 	.word	0x40021000
 8003774:	50000c00 	.word	0x50000c00
 8003778:	50001400 	.word	0x50001400

0800377c <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0a      	ldr	r2, [pc, #40]	@ (80037b4 <HAL_HRTIM_MspInit+0x38>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d10b      	bne.n	80037a6 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800378e:	4b0a      	ldr	r3, [pc, #40]	@ (80037b8 <HAL_HRTIM_MspInit+0x3c>)
 8003790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003792:	4a09      	ldr	r2, [pc, #36]	@ (80037b8 <HAL_HRTIM_MspInit+0x3c>)
 8003794:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003798:	6613      	str	r3, [r2, #96]	@ 0x60
 800379a:	4b07      	ldr	r3, [pc, #28]	@ (80037b8 <HAL_HRTIM_MspInit+0x3c>)
 800379c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800379e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40016800 	.word	0x40016800
 80037b8:	40021000 	.word	0x40021000

080037bc <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c4:	f107 030c 	add.w	r3, r7, #12
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	60da      	str	r2, [r3, #12]
 80037d2:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a11      	ldr	r2, [pc, #68]	@ (8003820 <HAL_HRTIM_MspPostInit+0x64>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d11c      	bne.n	8003818 <HAL_HRTIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037de:	4b11      	ldr	r3, [pc, #68]	@ (8003824 <HAL_HRTIM_MspPostInit+0x68>)
 80037e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e2:	4a10      	ldr	r2, [pc, #64]	@ (8003824 <HAL_HRTIM_MspPostInit+0x68>)
 80037e4:	f043 0302 	orr.w	r3, r3, #2
 80037e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003824 <HAL_HRTIM_MspPostInit+0x68>)
 80037ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	60bb      	str	r3, [r7, #8]
 80037f4:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PB12     ------> HRTIM1_CHC1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80037f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fc:	2302      	movs	r3, #2
 80037fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003804:	2303      	movs	r3, #3
 8003806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8003808:	230d      	movs	r3, #13
 800380a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800380c:	f107 030c 	add.w	r3, r7, #12
 8003810:	4619      	mov	r1, r3
 8003812:	4805      	ldr	r0, [pc, #20]	@ (8003828 <HAL_HRTIM_MspPostInit+0x6c>)
 8003814:	f004 f970 	bl	8007af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8003818:	bf00      	nop
 800381a:	3720      	adds	r7, #32
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40016800 	.word	0x40016800
 8003824:	40021000 	.word	0x40021000
 8003828:	48000400 	.word	0x48000400

0800382c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b09e      	sub	sp, #120	@ 0x78
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003834:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003844:	f107 0310 	add.w	r3, r7, #16
 8003848:	2254      	movs	r2, #84	@ 0x54
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f011 f840 	bl	80148d2 <memset>
  if(hi2c->Instance==I2C3)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1f      	ldr	r2, [pc, #124]	@ (80038d4 <HAL_I2C_MspInit+0xa8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d137      	bne.n	80038cc <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800385c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003860:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003862:	2300      	movs	r3, #0
 8003864:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003866:	f107 0310 	add.w	r3, r7, #16
 800386a:	4618      	mov	r0, r3
 800386c:	f008 fc22 	bl	800c0b4 <HAL_RCCEx_PeriphCLKConfig>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003876:	f7ff fa03 	bl	8002c80 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800387a:	4b17      	ldr	r3, [pc, #92]	@ (80038d8 <HAL_I2C_MspInit+0xac>)
 800387c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387e:	4a16      	ldr	r2, [pc, #88]	@ (80038d8 <HAL_I2C_MspInit+0xac>)
 8003880:	f043 0304 	orr.w	r3, r3, #4
 8003884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003886:	4b14      	ldr	r3, [pc, #80]	@ (80038d8 <HAL_I2C_MspInit+0xac>)
 8003888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003892:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003896:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003898:	2312      	movs	r3, #18
 800389a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389c:	2300      	movs	r3, #0
 800389e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a0:	2300      	movs	r3, #0
 80038a2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80038a4:	2308      	movs	r3, #8
 80038a6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80038ac:	4619      	mov	r1, r3
 80038ae:	480b      	ldr	r0, [pc, #44]	@ (80038dc <HAL_I2C_MspInit+0xb0>)
 80038b0:	f004 f922 	bl	8007af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80038b4:	4b08      	ldr	r3, [pc, #32]	@ (80038d8 <HAL_I2C_MspInit+0xac>)
 80038b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b8:	4a07      	ldr	r2, [pc, #28]	@ (80038d8 <HAL_I2C_MspInit+0xac>)
 80038ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80038be:	6593      	str	r3, [r2, #88]	@ 0x58
 80038c0:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <HAL_I2C_MspInit+0xac>)
 80038c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80038cc:	bf00      	nop
 80038ce:	3778      	adds	r7, #120	@ 0x78
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40007800 	.word	0x40007800
 80038d8:	40021000 	.word	0x40021000
 80038dc:	48000800 	.word	0x48000800

080038e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b09e      	sub	sp, #120	@ 0x78
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038f8:	f107 0310 	add.w	r3, r7, #16
 80038fc:	2254      	movs	r2, #84	@ 0x54
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f010 ffe6 	bl	80148d2 <memset>
  if(huart->Instance==LPUART1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1f      	ldr	r2, [pc, #124]	@ (8003988 <HAL_UART_MspInit+0xa8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d136      	bne.n	800397e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003910:	2320      	movs	r3, #32
 8003912:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003914:	2300      	movs	r3, #0
 8003916:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003918:	f107 0310 	add.w	r3, r7, #16
 800391c:	4618      	mov	r0, r3
 800391e:	f008 fbc9 	bl	800c0b4 <HAL_RCCEx_PeriphCLKConfig>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003928:	f7ff f9aa 	bl	8002c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800392c:	4b17      	ldr	r3, [pc, #92]	@ (800398c <HAL_UART_MspInit+0xac>)
 800392e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003930:	4a16      	ldr	r2, [pc, #88]	@ (800398c <HAL_UART_MspInit+0xac>)
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003938:	4b14      	ldr	r3, [pc, #80]	@ (800398c <HAL_UART_MspInit+0xac>)
 800393a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003944:	4b11      	ldr	r3, [pc, #68]	@ (800398c <HAL_UART_MspInit+0xac>)
 8003946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003948:	4a10      	ldr	r2, [pc, #64]	@ (800398c <HAL_UART_MspInit+0xac>)
 800394a:	f043 0302 	orr.w	r3, r3, #2
 800394e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003950:	4b0e      	ldr	r3, [pc, #56]	@ (800398c <HAL_UART_MspInit+0xac>)
 8003952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800395c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003960:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003962:	2302      	movs	r3, #2
 8003964:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003966:	2300      	movs	r3, #0
 8003968:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800396a:	2300      	movs	r3, #0
 800396c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800396e:	2308      	movs	r3, #8
 8003970:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003972:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003976:	4619      	mov	r1, r3
 8003978:	4805      	ldr	r0, [pc, #20]	@ (8003990 <HAL_UART_MspInit+0xb0>)
 800397a:	f004 f8bd 	bl	8007af8 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800397e:	bf00      	nop
 8003980:	3778      	adds	r7, #120	@ 0x78
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40008000 	.word	0x40008000
 800398c:	40021000 	.word	0x40021000
 8003990:	48000400 	.word	0x48000400

08003994 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08c      	sub	sp, #48	@ 0x30
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399c:	f107 031c 	add.w	r3, r7, #28
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a4d      	ldr	r2, [pc, #308]	@ (8003ae8 <HAL_OPAMP_MspInit+0x154>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d119      	bne.n	80039ea <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b6:	4b4d      	ldr	r3, [pc, #308]	@ (8003aec <HAL_OPAMP_MspInit+0x158>)
 80039b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ba:	4a4c      	ldr	r2, [pc, #304]	@ (8003aec <HAL_OPAMP_MspInit+0x158>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039c2:	4b4a      	ldr	r3, [pc, #296]	@ (8003aec <HAL_OPAMP_MspInit+0x158>)
 80039c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	61bb      	str	r3, [r7, #24]
 80039cc:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039ce:	2380      	movs	r3, #128	@ 0x80
 80039d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039d2:	2303      	movs	r3, #3
 80039d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039da:	f107 031c 	add.w	r3, r7, #28
 80039de:	4619      	mov	r1, r3
 80039e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039e4:	f004 f888 	bl	8007af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 80039e8:	e079      	b.n	8003ade <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP2)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a40      	ldr	r2, [pc, #256]	@ (8003af0 <HAL_OPAMP_MspInit+0x15c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d119      	bne.n	8003a28 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f4:	4b3d      	ldr	r3, [pc, #244]	@ (8003aec <HAL_OPAMP_MspInit+0x158>)
 80039f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f8:	4a3c      	ldr	r2, [pc, #240]	@ (8003aec <HAL_OPAMP_MspInit+0x158>)
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a00:	4b3a      	ldr	r3, [pc, #232]	@ (8003aec <HAL_OPAMP_MspInit+0x158>)
 8003a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003a0c:	2380      	movs	r3, #128	@ 0x80
 8003a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a10:	2303      	movs	r3, #3
 8003a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a18:	f107 031c 	add.w	r3, r7, #28
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a22:	f004 f869 	bl	8007af8 <HAL_GPIO_Init>
}
 8003a26:	e05a      	b.n	8003ade <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP3)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a31      	ldr	r2, [pc, #196]	@ (8003af4 <HAL_OPAMP_MspInit+0x160>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d119      	bne.n	8003a66 <HAL_OPAMP_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a32:	4b2e      	ldr	r3, [pc, #184]	@ (8003aec <HAL_OPAMP_MspInit+0x158>)
 8003a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a36:	4a2d      	ldr	r2, [pc, #180]	@ (8003aec <HAL_OPAMP_MspInit+0x158>)
 8003a38:	f043 0302 	orr.w	r3, r3, #2
 8003a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8003aec <HAL_OPAMP_MspInit+0x158>)
 8003a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a50:	2303      	movs	r3, #3
 8003a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a58:	f107 031c 	add.w	r3, r7, #28
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4826      	ldr	r0, [pc, #152]	@ (8003af8 <HAL_OPAMP_MspInit+0x164>)
 8003a60:	f004 f84a 	bl	8007af8 <HAL_GPIO_Init>
}
 8003a64:	e03b      	b.n	8003ade <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP5)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a24      	ldr	r2, [pc, #144]	@ (8003afc <HAL_OPAMP_MspInit+0x168>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d118      	bne.n	8003aa2 <HAL_OPAMP_MspInit+0x10e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a70:	4b1e      	ldr	r3, [pc, #120]	@ (8003aec <HAL_OPAMP_MspInit+0x158>)
 8003a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a74:	4a1d      	ldr	r2, [pc, #116]	@ (8003aec <HAL_OPAMP_MspInit+0x158>)
 8003a76:	f043 0304 	orr.w	r3, r3, #4
 8003a7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003aec <HAL_OPAMP_MspInit+0x158>)
 8003a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a88:	2308      	movs	r3, #8
 8003a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a94:	f107 031c 	add.w	r3, r7, #28
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4819      	ldr	r0, [pc, #100]	@ (8003b00 <HAL_OPAMP_MspInit+0x16c>)
 8003a9c:	f004 f82c 	bl	8007af8 <HAL_GPIO_Init>
}
 8003aa0:	e01d      	b.n	8003ade <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP6)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a17      	ldr	r2, [pc, #92]	@ (8003b04 <HAL_OPAMP_MspInit+0x170>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d118      	bne.n	8003ade <HAL_OPAMP_MspInit+0x14a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aac:	4b0f      	ldr	r3, [pc, #60]	@ (8003aec <HAL_OPAMP_MspInit+0x158>)
 8003aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab0:	4a0e      	ldr	r2, [pc, #56]	@ (8003aec <HAL_OPAMP_MspInit+0x158>)
 8003ab2:	f043 0302 	orr.w	r3, r3, #2
 8003ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8003aec <HAL_OPAMP_MspInit+0x158>)
 8003aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003ac4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003aca:	2303      	movs	r3, #3
 8003acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad2:	f107 031c 	add.w	r3, r7, #28
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4807      	ldr	r0, [pc, #28]	@ (8003af8 <HAL_OPAMP_MspInit+0x164>)
 8003ada:	f004 f80d 	bl	8007af8 <HAL_GPIO_Init>
}
 8003ade:	bf00      	nop
 8003ae0:	3730      	adds	r7, #48	@ 0x30
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40010300 	.word	0x40010300
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40010304 	.word	0x40010304
 8003af4:	40010308 	.word	0x40010308
 8003af8:	48000400 	.word	0x48000400
 8003afc:	40010310 	.word	0x40010310
 8003b00:	48000800 	.word	0x48000800
 8003b04:	40010314 	.word	0x40010314

08003b08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08a      	sub	sp, #40	@ 0x28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b10:	f107 0314 	add.w	r3, r7, #20
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	605a      	str	r2, [r3, #4]
 8003b1a:	609a      	str	r2, [r3, #8]
 8003b1c:	60da      	str	r2, [r3, #12]
 8003b1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a2c      	ldr	r2, [pc, #176]	@ (8003bd8 <HAL_SPI_MspInit+0xd0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d151      	bne.n	8003bce <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8003bdc <HAL_SPI_MspInit+0xd4>)
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2e:	4a2b      	ldr	r2, [pc, #172]	@ (8003bdc <HAL_SPI_MspInit+0xd4>)
 8003b30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b36:	4b29      	ldr	r3, [pc, #164]	@ (8003bdc <HAL_SPI_MspInit+0xd4>)
 8003b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b42:	4b26      	ldr	r3, [pc, #152]	@ (8003bdc <HAL_SPI_MspInit+0xd4>)
 8003b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b46:	4a25      	ldr	r2, [pc, #148]	@ (8003bdc <HAL_SPI_MspInit+0xd4>)
 8003b48:	f043 0304 	orr.w	r3, r3, #4
 8003b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b4e:	4b23      	ldr	r3, [pc, #140]	@ (8003bdc <HAL_SPI_MspInit+0xd4>)
 8003b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003b5a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b60:	2302      	movs	r3, #2
 8003b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b6c:	2306      	movs	r3, #6
 8003b6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b70:	f107 0314 	add.w	r3, r7, #20
 8003b74:	4619      	mov	r1, r3
 8003b76:	481a      	ldr	r0, [pc, #104]	@ (8003be0 <HAL_SPI_MspInit+0xd8>)
 8003b78:	f003 ffbe 	bl	8007af8 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel3;
 8003b7c:	4b19      	ldr	r3, [pc, #100]	@ (8003be4 <HAL_SPI_MspInit+0xdc>)
 8003b7e:	4a1a      	ldr	r2, [pc, #104]	@ (8003be8 <HAL_SPI_MspInit+0xe0>)
 8003b80:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8003b82:	4b18      	ldr	r3, [pc, #96]	@ (8003be4 <HAL_SPI_MspInit+0xdc>)
 8003b84:	220f      	movs	r2, #15
 8003b86:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b88:	4b16      	ldr	r3, [pc, #88]	@ (8003be4 <HAL_SPI_MspInit+0xdc>)
 8003b8a:	2210      	movs	r2, #16
 8003b8c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b8e:	4b15      	ldr	r3, [pc, #84]	@ (8003be4 <HAL_SPI_MspInit+0xdc>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b94:	4b13      	ldr	r3, [pc, #76]	@ (8003be4 <HAL_SPI_MspInit+0xdc>)
 8003b96:	2280      	movs	r2, #128	@ 0x80
 8003b98:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b9a:	4b12      	ldr	r3, [pc, #72]	@ (8003be4 <HAL_SPI_MspInit+0xdc>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ba0:	4b10      	ldr	r3, [pc, #64]	@ (8003be4 <HAL_SPI_MspInit+0xdc>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8003ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8003be4 <HAL_SPI_MspInit+0xdc>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003bac:	4b0d      	ldr	r3, [pc, #52]	@ (8003be4 <HAL_SPI_MspInit+0xdc>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003bb2:	480c      	ldr	r0, [pc, #48]	@ (8003be4 <HAL_SPI_MspInit+0xdc>)
 8003bb4:	f003 fd2e 	bl	8007614 <HAL_DMA_Init>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8003bbe:	f7ff f85f 	bl	8002c80 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a07      	ldr	r2, [pc, #28]	@ (8003be4 <HAL_SPI_MspInit+0xdc>)
 8003bc6:	655a      	str	r2, [r3, #84]	@ 0x54
 8003bc8:	4a06      	ldr	r2, [pc, #24]	@ (8003be4 <HAL_SPI_MspInit+0xdc>)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8003bce:	bf00      	nop
 8003bd0:	3728      	adds	r7, #40	@ 0x28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40003c00 	.word	0x40003c00
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	48000800 	.word	0x48000800
 8003be4:	20000a18 	.word	0x20000a18
 8003be8:	40020030 	.word	0x40020030

08003bec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b090      	sub	sp, #64	@ 0x40
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	60da      	str	r2, [r3, #12]
 8003c02:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a6a      	ldr	r2, [pc, #424]	@ (8003db4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d128      	bne.n	8003c60 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c0e:	4b6a      	ldr	r3, [pc, #424]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c12:	4a69      	ldr	r2, [pc, #420]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003c14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c18:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c1a:	4b67      	ldr	r3, [pc, #412]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c26:	4b64      	ldr	r3, [pc, #400]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c2a:	4a63      	ldr	r2, [pc, #396]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003c2c:	f043 0304 	orr.w	r3, r3, #4
 8003c30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c32:	4b61      	ldr	r3, [pc, #388]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c42:	2302      	movs	r3, #2
 8003c44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c46:	2301      	movs	r3, #1
 8003c48:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003c4e:	2302      	movs	r3, #2
 8003c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003c56:	4619      	mov	r1, r3
 8003c58:	4858      	ldr	r0, [pc, #352]	@ (8003dbc <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003c5a:	f003 ff4d 	bl	8007af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8003c5e:	e0a4      	b.n	8003daa <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM3)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a56      	ldr	r2, [pc, #344]	@ (8003dc0 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d128      	bne.n	8003cbc <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c6a:	4b53      	ldr	r3, [pc, #332]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6e:	4a52      	ldr	r2, [pc, #328]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003c70:	f043 0302 	orr.w	r3, r3, #2
 8003c74:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c76:	4b50      	ldr	r3, [pc, #320]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	623b      	str	r3, [r7, #32]
 8003c80:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c82:	4b4d      	ldr	r3, [pc, #308]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c86:	4a4c      	ldr	r2, [pc, #304]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003c88:	f043 0304 	orr.w	r3, r3, #4
 8003c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c9a:	23c0      	movs	r3, #192	@ 0xc0
 8003c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003caa:	2302      	movs	r3, #2
 8003cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4841      	ldr	r0, [pc, #260]	@ (8003dbc <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003cb6:	f003 ff1f 	bl	8007af8 <HAL_GPIO_Init>
}
 8003cba:	e076      	b.n	8003daa <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM4)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a40      	ldr	r2, [pc, #256]	@ (8003dc4 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d128      	bne.n	8003d18 <HAL_TIM_Encoder_MspInit+0x12c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cc6:	4b3c      	ldr	r3, [pc, #240]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cca:	4a3b      	ldr	r2, [pc, #236]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003ccc:	f043 0304 	orr.w	r3, r3, #4
 8003cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cd2:	4b39      	ldr	r3, [pc, #228]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cde:	4b36      	ldr	r3, [pc, #216]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce2:	4a35      	ldr	r2, [pc, #212]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003ce4:	f043 0302 	orr.w	r3, r3, #2
 8003ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cea:	4b33      	ldr	r3, [pc, #204]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cf6:	23c0      	movs	r3, #192	@ 0xc0
 8003cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d02:	2303      	movs	r3, #3
 8003d04:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d06:	2302      	movs	r3, #2
 8003d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d0e:	4619      	mov	r1, r3
 8003d10:	482d      	ldr	r0, [pc, #180]	@ (8003dc8 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8003d12:	f003 fef1 	bl	8007af8 <HAL_GPIO_Init>
}
 8003d16:	e048      	b.n	8003daa <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM20)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003dcc <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d143      	bne.n	8003daa <HAL_TIM_Encoder_MspInit+0x1be>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8003d22:	4b25      	ldr	r3, [pc, #148]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d26:	4a24      	ldr	r2, [pc, #144]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003d28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d2e:	4b22      	ldr	r3, [pc, #136]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003d40:	f043 0304 	orr.w	r3, r3, #4
 8003d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d46:	4b1c      	ldr	r3, [pc, #112]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d52:	4b19      	ldr	r3, [pc, #100]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d56:	4a18      	ldr	r2, [pc, #96]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003d58:	f043 0302 	orr.w	r3, r3, #2
 8003d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d5e:	4b16      	ldr	r3, [pc, #88]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	60bb      	str	r3, [r7, #8]
 8003d68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d6a:	2304      	movs	r3, #4
 8003d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d72:	2301      	movs	r3, #1
 8003d74:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d76:	2303      	movs	r3, #3
 8003d78:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8003d7a:	2306      	movs	r3, #6
 8003d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d82:	4619      	mov	r1, r3
 8003d84:	480d      	ldr	r0, [pc, #52]	@ (8003dbc <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003d86:	f003 feb7 	bl	8007af8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d8a:	2304      	movs	r3, #4
 8003d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d92:	2301      	movs	r3, #1
 8003d94:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d96:	2303      	movs	r3, #3
 8003d98:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003da2:	4619      	mov	r1, r3
 8003da4:	4808      	ldr	r0, [pc, #32]	@ (8003dc8 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8003da6:	f003 fea7 	bl	8007af8 <HAL_GPIO_Init>
}
 8003daa:	bf00      	nop
 8003dac:	3740      	adds	r7, #64	@ 0x40
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40012c00 	.word	0x40012c00
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	48000800 	.word	0x48000800
 8003dc0:	40000400 	.word	0x40000400
 8003dc4:	40000800 	.word	0x40000800
 8003dc8:	48000400 	.word	0x48000400
 8003dcc:	40015000 	.word	0x40015000

08003dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a4f      	ldr	r2, [pc, #316]	@ (8003f1c <HAL_TIM_Base_MspInit+0x14c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d10c      	bne.n	8003dfc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003de2:	4b4f      	ldr	r3, [pc, #316]	@ (8003f20 <HAL_TIM_Base_MspInit+0x150>)
 8003de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de6:	4a4e      	ldr	r2, [pc, #312]	@ (8003f20 <HAL_TIM_Base_MspInit+0x150>)
 8003de8:	f043 0310 	orr.w	r3, r3, #16
 8003dec:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dee:	4b4c      	ldr	r3, [pc, #304]	@ (8003f20 <HAL_TIM_Base_MspInit+0x150>)
 8003df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003dfa:	e08a      	b.n	8003f12 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a48      	ldr	r2, [pc, #288]	@ (8003f24 <HAL_TIM_Base_MspInit+0x154>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d10c      	bne.n	8003e20 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e06:	4b46      	ldr	r3, [pc, #280]	@ (8003f20 <HAL_TIM_Base_MspInit+0x150>)
 8003e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0a:	4a45      	ldr	r2, [pc, #276]	@ (8003f20 <HAL_TIM_Base_MspInit+0x150>)
 8003e0c:	f043 0320 	orr.w	r3, r3, #32
 8003e10:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e12:	4b43      	ldr	r3, [pc, #268]	@ (8003f20 <HAL_TIM_Base_MspInit+0x150>)
 8003e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	613b      	str	r3, [r7, #16]
 8003e1c:	693b      	ldr	r3, [r7, #16]
}
 8003e1e:	e078      	b.n	8003f12 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM8)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a40      	ldr	r2, [pc, #256]	@ (8003f28 <HAL_TIM_Base_MspInit+0x158>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d137      	bne.n	8003e9a <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003e2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f20 <HAL_TIM_Base_MspInit+0x150>)
 8003e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e2e:	4a3c      	ldr	r2, [pc, #240]	@ (8003f20 <HAL_TIM_Base_MspInit+0x150>)
 8003e30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e34:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e36:	4b3a      	ldr	r3, [pc, #232]	@ (8003f20 <HAL_TIM_Base_MspInit+0x150>)
 8003e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch3.Instance = DMA1_Channel1;
 8003e42:	4b3a      	ldr	r3, [pc, #232]	@ (8003f2c <HAL_TIM_Base_MspInit+0x15c>)
 8003e44:	4a3a      	ldr	r2, [pc, #232]	@ (8003f30 <HAL_TIM_Base_MspInit+0x160>)
 8003e46:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Request = DMA_REQUEST_TIM8_CH3;
 8003e48:	4b38      	ldr	r3, [pc, #224]	@ (8003f2c <HAL_TIM_Base_MspInit+0x15c>)
 8003e4a:	2233      	movs	r2, #51	@ 0x33
 8003e4c:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e4e:	4b37      	ldr	r3, [pc, #220]	@ (8003f2c <HAL_TIM_Base_MspInit+0x15c>)
 8003e50:	2210      	movs	r2, #16
 8003e52:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e54:	4b35      	ldr	r3, [pc, #212]	@ (8003f2c <HAL_TIM_Base_MspInit+0x15c>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003e5a:	4b34      	ldr	r3, [pc, #208]	@ (8003f2c <HAL_TIM_Base_MspInit+0x15c>)
 8003e5c:	2280      	movs	r2, #128	@ 0x80
 8003e5e:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e60:	4b32      	ldr	r3, [pc, #200]	@ (8003f2c <HAL_TIM_Base_MspInit+0x15c>)
 8003e62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e66:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e68:	4b30      	ldr	r3, [pc, #192]	@ (8003f2c <HAL_TIM_Base_MspInit+0x15c>)
 8003e6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e6e:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_NORMAL;
 8003e70:	4b2e      	ldr	r3, [pc, #184]	@ (8003f2c <HAL_TIM_Base_MspInit+0x15c>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003e76:	4b2d      	ldr	r3, [pc, #180]	@ (8003f2c <HAL_TIM_Base_MspInit+0x15c>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 8003e7c:	482b      	ldr	r0, [pc, #172]	@ (8003f2c <HAL_TIM_Base_MspInit+0x15c>)
 8003e7e:	f003 fbc9 	bl	8007614 <HAL_DMA_Init>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <HAL_TIM_Base_MspInit+0xbc>
      Error_Handler();
 8003e88:	f7fe fefa 	bl	8002c80 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a27      	ldr	r2, [pc, #156]	@ (8003f2c <HAL_TIM_Base_MspInit+0x15c>)
 8003e90:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003e92:	4a26      	ldr	r2, [pc, #152]	@ (8003f2c <HAL_TIM_Base_MspInit+0x15c>)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003e98:	e03b      	b.n	8003f12 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM15)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a25      	ldr	r2, [pc, #148]	@ (8003f34 <HAL_TIM_Base_MspInit+0x164>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d136      	bne.n	8003f12 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f20 <HAL_TIM_Base_MspInit+0x150>)
 8003ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f20 <HAL_TIM_Base_MspInit+0x150>)
 8003eaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eae:	6613      	str	r3, [r2, #96]	@ 0x60
 8003eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f20 <HAL_TIM_Base_MspInit+0x150>)
 8003eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	68bb      	ldr	r3, [r7, #8]
    hdma_tim15_ch1.Instance = DMA1_Channel2;
 8003ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8003f38 <HAL_TIM_Base_MspInit+0x168>)
 8003ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8003f3c <HAL_TIM_Base_MspInit+0x16c>)
 8003ec0:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1.Init.Request = DMA_REQUEST_TIM15_CH1;
 8003ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f38 <HAL_TIM_Base_MspInit+0x168>)
 8003ec4:	224e      	movs	r2, #78	@ 0x4e
 8003ec6:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f38 <HAL_TIM_Base_MspInit+0x168>)
 8003eca:	2210      	movs	r2, #16
 8003ecc:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ece:	4b1a      	ldr	r3, [pc, #104]	@ (8003f38 <HAL_TIM_Base_MspInit+0x168>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003ed4:	4b18      	ldr	r3, [pc, #96]	@ (8003f38 <HAL_TIM_Base_MspInit+0x168>)
 8003ed6:	2280      	movs	r2, #128	@ 0x80
 8003ed8:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003eda:	4b17      	ldr	r3, [pc, #92]	@ (8003f38 <HAL_TIM_Base_MspInit+0x168>)
 8003edc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ee0:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ee2:	4b15      	ldr	r3, [pc, #84]	@ (8003f38 <HAL_TIM_Base_MspInit+0x168>)
 8003ee4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ee8:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1.Init.Mode = DMA_NORMAL;
 8003eea:	4b13      	ldr	r3, [pc, #76]	@ (8003f38 <HAL_TIM_Base_MspInit+0x168>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003ef0:	4b11      	ldr	r3, [pc, #68]	@ (8003f38 <HAL_TIM_Base_MspInit+0x168>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1) != HAL_OK)
 8003ef6:	4810      	ldr	r0, [pc, #64]	@ (8003f38 <HAL_TIM_Base_MspInit+0x168>)
 8003ef8:	f003 fb8c 	bl	8007614 <HAL_DMA_Init>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_TIM_Base_MspInit+0x136>
      Error_Handler();
 8003f02:	f7fe febd 	bl	8002c80 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a0b      	ldr	r2, [pc, #44]	@ (8003f38 <HAL_TIM_Base_MspInit+0x168>)
 8003f0a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f38 <HAL_TIM_Base_MspInit+0x168>)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003f12:	bf00      	nop
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40001000 	.word	0x40001000
 8003f20:	40021000 	.word	0x40021000
 8003f24:	40001400 	.word	0x40001400
 8003f28:	40013400 	.word	0x40013400
 8003f2c:	20000cd8 	.word	0x20000cd8
 8003f30:	40020008 	.word	0x40020008
 8003f34:	40014000 	.word	0x40014000
 8003f38:	20000d38 	.word	0x20000d38
 8003f3c:	4002001c 	.word	0x4002001c

08003f40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	@ 0x28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f48:	f107 0314 	add.w	r3, r7, #20
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	60da      	str	r2, [r3, #12]
 8003f56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a32      	ldr	r2, [pc, #200]	@ (8004028 <HAL_TIM_MspPostInit+0xe8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d13b      	bne.n	8003fda <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f62:	4b32      	ldr	r3, [pc, #200]	@ (800402c <HAL_TIM_MspPostInit+0xec>)
 8003f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f66:	4a31      	ldr	r2, [pc, #196]	@ (800402c <HAL_TIM_MspPostInit+0xec>)
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f6e:	4b2f      	ldr	r3, [pc, #188]	@ (800402c <HAL_TIM_MspPostInit+0xec>)
 8003f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f7a:	4b2c      	ldr	r3, [pc, #176]	@ (800402c <HAL_TIM_MspPostInit+0xec>)
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7e:	4a2b      	ldr	r2, [pc, #172]	@ (800402c <HAL_TIM_MspPostInit+0xec>)
 8003f80:	f043 0302 	orr.w	r3, r3, #2
 8003f84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f86:	4b29      	ldr	r3, [pc, #164]	@ (800402c <HAL_TIM_MspPostInit+0xec>)
 8003f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA15     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003f92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa8:	f107 0314 	add.w	r3, r7, #20
 8003fac:	4619      	mov	r1, r3
 8003fae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fb2:	f003 fda1 	bl	8007af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003fb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8003fc8:	230a      	movs	r3, #10
 8003fca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fcc:	f107 0314 	add.w	r3, r7, #20
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4817      	ldr	r0, [pc, #92]	@ (8004030 <HAL_TIM_MspPostInit+0xf0>)
 8003fd4:	f003 fd90 	bl	8007af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003fd8:	e021      	b.n	800401e <HAL_TIM_MspPostInit+0xde>
  else if(htim->Instance==TIM15)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a15      	ldr	r2, [pc, #84]	@ (8004034 <HAL_TIM_MspPostInit+0xf4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d11c      	bne.n	800401e <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe4:	4b11      	ldr	r3, [pc, #68]	@ (800402c <HAL_TIM_MspPostInit+0xec>)
 8003fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe8:	4a10      	ldr	r2, [pc, #64]	@ (800402c <HAL_TIM_MspPostInit+0xec>)
 8003fea:	f043 0302 	orr.w	r3, r3, #2
 8003fee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800402c <HAL_TIM_MspPostInit+0xec>)
 8003ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003ffc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004002:	2302      	movs	r3, #2
 8004004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004006:	2301      	movs	r3, #1
 8004008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400a:	2303      	movs	r3, #3
 800400c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 800400e:	2301      	movs	r3, #1
 8004010:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004012:	f107 0314 	add.w	r3, r7, #20
 8004016:	4619      	mov	r1, r3
 8004018:	4805      	ldr	r0, [pc, #20]	@ (8004030 <HAL_TIM_MspPostInit+0xf0>)
 800401a:	f003 fd6d 	bl	8007af8 <HAL_GPIO_Init>
}
 800401e:	bf00      	nop
 8004020:	3728      	adds	r7, #40	@ 0x28
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40013400 	.word	0x40013400
 800402c:	40021000 	.word	0x40021000
 8004030:	48000400 	.word	0x48000400
 8004034:	40014000 	.word	0x40014000

08004038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800403c:	f007 ffd8 	bl	800bff0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004040:	bf00      	nop
 8004042:	e7fd      	b.n	8004040 <NMI_Handler+0x8>

08004044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004048:	bf00      	nop
 800404a:	e7fd      	b.n	8004048 <HardFault_Handler+0x4>

0800404c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004050:	bf00      	nop
 8004052:	e7fd      	b.n	8004050 <MemManage_Handler+0x4>

08004054 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004058:	bf00      	nop
 800405a:	e7fd      	b.n	8004058 <BusFault_Handler+0x4>

0800405c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004060:	bf00      	nop
 8004062:	e7fd      	b.n	8004060 <UsageFault_Handler+0x4>

08004064 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004068:	bf00      	nop
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004072:	b480      	push	{r7}
 8004074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004076:	bf00      	nop
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004084:	bf00      	nop
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004092:	f000 fae5 	bl	8004660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004096:	bf00      	nop
 8004098:	bd80      	pop	{r7, pc}

0800409a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800409e:	2001      	movs	r0, #1
 80040a0:	f003 fec4 	bl	8007e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80040a4:	bf00      	nop
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80040ac:	2002      	movs	r0, #2
 80040ae:	f003 febd 	bl	8007e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80040b2:	bf00      	nop
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80040ba:	2004      	movs	r0, #4
 80040bc:	f003 feb6 	bl	8007e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80040c0:	bf00      	nop
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80040c8:	2008      	movs	r0, #8
 80040ca:	f003 feaf 	bl	8007e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80040d6:	2010      	movs	r0, #16
 80040d8:	f003 fea8 	bl	8007e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80040dc:	bf00      	nop
 80040de:	bd80      	pop	{r7, pc}

080040e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 80040e4:	4802      	ldr	r0, [pc, #8]	@ (80040f0 <DMA1_Channel1_IRQHandler+0x10>)
 80040e6:	f003 fbb8 	bl	800785a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000cd8 	.word	0x20000cd8

080040f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1);
 80040f8:	4802      	ldr	r0, [pc, #8]	@ (8004104 <DMA1_Channel2_IRQHandler+0x10>)
 80040fa:	f003 fbae 	bl	800785a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80040fe:	bf00      	nop
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000d38 	.word	0x20000d38

08004108 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800410c:	4802      	ldr	r0, [pc, #8]	@ (8004118 <DMA1_Channel3_IRQHandler+0x10>)
 800410e:	f003 fba4 	bl	800785a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000a18 	.word	0x20000a18

0800411c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8004120:	4802      	ldr	r0, [pc, #8]	@ (800412c <DMA1_Channel4_IRQHandler+0x10>)
 8004122:	f003 fb9a 	bl	800785a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004126:	bf00      	nop
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	200005c0 	.word	0x200005c0

08004130 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004134:	4802      	ldr	r0, [pc, #8]	@ (8004140 <DMA1_Channel5_IRQHandler+0x10>)
 8004136:	f003 fb90 	bl	800785a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20000500 	.word	0x20000500

08004144 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004148:	4802      	ldr	r0, [pc, #8]	@ (8004154 <DMA1_Channel6_IRQHandler+0x10>)
 800414a:	f003 fb86 	bl	800785a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800414e:	bf00      	nop
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20000560 	.word	0x20000560

08004158 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800415c:	4802      	ldr	r0, [pc, #8]	@ (8004168 <USB_LP_IRQHandler+0x10>)
 800415e:	f005 fd89 	bl	8009c74 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004162:	bf00      	nop
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20004994 	.word	0x20004994

0800416c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	DEBUG_COUNT++;
 8004170:	4b07      	ldr	r3, [pc, #28]	@ (8004190 <EXTI9_5_IRQHandler+0x24>)
 8004172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004176:	1c50      	adds	r0, r2, #1
 8004178:	f143 0100 	adc.w	r1, r3, #0
 800417c:	4b04      	ldr	r3, [pc, #16]	@ (8004190 <EXTI9_5_IRQHandler+0x24>)
 800417e:	e9c3 0100 	strd	r0, r1, [r3]

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004182:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004186:	f003 fe51 	bl	8007e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800418a:	bf00      	nop
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20002db0 	.word	0x20002db0

08004194 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	  FT6336_GetTouchPoint(&TouchPoints);
 8004198:	4808      	ldr	r0, [pc, #32]	@ (80041bc <EXTI15_10_IRQHandler+0x28>)
 800419a:	f7fd f915 	bl	80013c8 <FT6336_GetTouchPoint>

	  ST7789_DrawPixel(TouchPoints.point1_x, TouchPoints.point1_y, 0xffffff);
 800419e:	4b07      	ldr	r3, [pc, #28]	@ (80041bc <EXTI15_10_IRQHandler+0x28>)
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	4a06      	ldr	r2, [pc, #24]	@ (80041bc <EXTI15_10_IRQHandler+0x28>)
 80041a4:	8851      	ldrh	r1, [r2, #2]
 80041a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe ff3a 	bl	8003024 <ST7789_DrawPixel>


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80041b0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80041b4:	f003 fe3a 	bl	8007e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80041b8:	bf00      	nop
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	200003b4 	.word	0x200003b4

080041c0 <ADC5_IRQHandler>:

/**
  * @brief This function handles ADC5 global interrupt.
  */
void ADC5_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC5_IRQn 0 */

	uint32_t value = BUFFER_SYS_ADC[0];
 80041c6:	4b22      	ldr	r3, [pc, #136]	@ (8004250 <ADC5_IRQHandler+0x90>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	607b      	str	r3, [r7, #4]

    if (value >= 0 && value < 1500) {
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f240 52db 	movw	r2, #1499	@ 0x5db
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d805      	bhi.n	80041e2 <ADC5_IRQHandler+0x22>
    	input.KEY_ENC0=1;
 80041d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004254 <ADC5_IRQHandler+0x94>)
 80041d8:	7813      	ldrb	r3, [r2, #0]
 80041da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041de:	7013      	strb	r3, [r2, #0]
 80041e0:	e02e      	b.n	8004240 <ADC5_IRQHandler+0x80>
    } else if (value >= 1500 && value < 2250) {
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f240 52db 	movw	r2, #1499	@ 0x5db
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d90a      	bls.n	8004202 <ADC5_IRQHandler+0x42>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f640 02c9 	movw	r2, #2249	@ 0x8c9
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d805      	bhi.n	8004202 <ADC5_IRQHandler+0x42>
    	input.KEY_ENC1=1;
 80041f6:	4a17      	ldr	r2, [pc, #92]	@ (8004254 <ADC5_IRQHandler+0x94>)
 80041f8:	7813      	ldrb	r3, [r2, #0]
 80041fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041fe:	7013      	strb	r3, [r2, #0]
 8004200:	e01e      	b.n	8004240 <ADC5_IRQHandler+0x80>
    } else if (value >= 2250 && value < 2750) {
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f640 02c9 	movw	r2, #2249	@ 0x8c9
 8004208:	4293      	cmp	r3, r2
 800420a:	d90a      	bls.n	8004222 <ADC5_IRQHandler+0x62>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f640 22bd 	movw	r2, #2749	@ 0xabd
 8004212:	4293      	cmp	r3, r2
 8004214:	d805      	bhi.n	8004222 <ADC5_IRQHandler+0x62>
    	input.KEY_ENC2=1;
 8004216:	4a0f      	ldr	r2, [pc, #60]	@ (8004254 <ADC5_IRQHandler+0x94>)
 8004218:	7853      	ldrb	r3, [r2, #1]
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	7053      	strb	r3, [r2, #1]
 8004220:	e00e      	b.n	8004240 <ADC5_IRQHandler+0x80>
    } else if (value >= 2750 && value <= 3500) {
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f640 22bd 	movw	r2, #2749	@ 0xabd
 8004228:	4293      	cmp	r3, r2
 800422a:	d909      	bls.n	8004240 <ADC5_IRQHandler+0x80>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8004232:	4293      	cmp	r3, r2
 8004234:	d804      	bhi.n	8004240 <ADC5_IRQHandler+0x80>
    	input.KEY_ENC3=1;
 8004236:	4a07      	ldr	r2, [pc, #28]	@ (8004254 <ADC5_IRQHandler+0x94>)
 8004238:	7853      	ldrb	r3, [r2, #1]
 800423a:	f043 0302 	orr.w	r3, r3, #2
 800423e:	7053      	strb	r3, [r2, #1]
    }


  /* USER CODE END ADC5_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc5);
 8004240:	4805      	ldr	r0, [pc, #20]	@ (8004258 <ADC5_IRQHandler+0x98>)
 8004242:	f001 f819 	bl	8005278 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC5_IRQn 1 */

  /* USER CODE END ADC5_IRQn 1 */
}
 8004246:	bf00      	nop
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20000d98 	.word	0x20000d98
 8004254:	20002db8 	.word	0x20002db8
 8004258:	20000494 	.word	0x20000494

0800425c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return 1;
 8004260:	2301      	movs	r3, #1
}
 8004262:	4618      	mov	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <_kill>:

int _kill(int pid, int sig)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004276:	f010 fb7f 	bl	8014978 <__errno>
 800427a:	4603      	mov	r3, r0
 800427c:	2216      	movs	r2, #22
 800427e:	601a      	str	r2, [r3, #0]
  return -1;
 8004280:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <_exit>:

void _exit (int status)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004294:	f04f 31ff 	mov.w	r1, #4294967295
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff ffe7 	bl	800426c <_kill>
  while (1) {}    /* Make sure we hang here */
 800429e:	bf00      	nop
 80042a0:	e7fd      	b.n	800429e <_exit+0x12>

080042a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b086      	sub	sp, #24
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	e00a      	b.n	80042ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80042b4:	f3af 8000 	nop.w
 80042b8:	4601      	mov	r1, r0
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	60ba      	str	r2, [r7, #8]
 80042c0:	b2ca      	uxtb	r2, r1
 80042c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	3301      	adds	r3, #1
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	dbf0      	blt.n	80042b4 <_read+0x12>
  }

  return len;
 80042d2:	687b      	ldr	r3, [r7, #4]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	e009      	b.n	8004302 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	60ba      	str	r2, [r7, #8]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fc fed2 	bl	80010a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	3301      	adds	r3, #1
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	429a      	cmp	r2, r3
 8004308:	dbf1      	blt.n	80042ee <_write+0x12>
  }
  return len;
 800430a:	687b      	ldr	r3, [r7, #4]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <_close>:

int _close(int file)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800431c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800433c:	605a      	str	r2, [r3, #4]
  return 0;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <_isatty>:

int _isatty(int file)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004354:	2301      	movs	r3, #1
}
 8004356:	4618      	mov	r0, r3
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	60f8      	str	r0, [r7, #12]
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004384:	4a14      	ldr	r2, [pc, #80]	@ (80043d8 <_sbrk+0x5c>)
 8004386:	4b15      	ldr	r3, [pc, #84]	@ (80043dc <_sbrk+0x60>)
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004390:	4b13      	ldr	r3, [pc, #76]	@ (80043e0 <_sbrk+0x64>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d102      	bne.n	800439e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004398:	4b11      	ldr	r3, [pc, #68]	@ (80043e0 <_sbrk+0x64>)
 800439a:	4a12      	ldr	r2, [pc, #72]	@ (80043e4 <_sbrk+0x68>)
 800439c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800439e:	4b10      	ldr	r3, [pc, #64]	@ (80043e0 <_sbrk+0x64>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4413      	add	r3, r2
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d207      	bcs.n	80043bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043ac:	f010 fae4 	bl	8014978 <__errno>
 80043b0:	4603      	mov	r3, r0
 80043b2:	220c      	movs	r2, #12
 80043b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043b6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ba:	e009      	b.n	80043d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043bc:	4b08      	ldr	r3, [pc, #32]	@ (80043e0 <_sbrk+0x64>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043c2:	4b07      	ldr	r3, [pc, #28]	@ (80043e0 <_sbrk+0x64>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4413      	add	r3, r2
 80043ca:	4a05      	ldr	r2, [pc, #20]	@ (80043e0 <_sbrk+0x64>)
 80043cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043ce:	68fb      	ldr	r3, [r7, #12]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20020000 	.word	0x20020000
 80043dc:	00000400 	.word	0x00000400
 80043e0:	20003aa8 	.word	0x20003aa8
 80043e4:	20004fe0 	.word	0x20004fe0

080043e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043ec:	4b06      	ldr	r3, [pc, #24]	@ (8004408 <SystemInit+0x20>)
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f2:	4a05      	ldr	r2, [pc, #20]	@ (8004408 <SystemInit+0x20>)
 80043f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043fc:	bf00      	nop
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <WS2812_Write_Data>:
 * @param  Color:颜色24bit of RGB888
 * @param  index:灯的标号
 * @return None
 */
void WS2812_Write_Data(uint32_t Color, uint8_t index)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < 24; i++)
 8004418:	2300      	movs	r3, #0
 800441a:	73fb      	strb	r3, [r7, #15]
 800441c:	e018      	b.n	8004450 <WS2812_Write_Data+0x44>
		WS2812_Buf[24 * index + i] = (((Color << i) & 0X800000) ? High_Code : Low_Code);
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <WS2812_Write_Data+0x26>
 800442e:	215a      	movs	r1, #90	@ 0x5a
 8004430:	e000      	b.n	8004434 <WS2812_Write_Data+0x28>
 8004432:	212d      	movs	r1, #45	@ 0x2d
 8004434:	78fa      	ldrb	r2, [r7, #3]
 8004436:	4613      	mov	r3, r2
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	4413      	add	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	461a      	mov	r2, r3
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	4413      	add	r3, r2
 8004444:	4a07      	ldr	r2, [pc, #28]	@ (8004464 <WS2812_Write_Data+0x58>)
 8004446:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 24; i++)
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	3301      	adds	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	2b17      	cmp	r3, #23
 8004454:	d9e3      	bls.n	800441e <WS2812_Write_Data+0x12>
}
 8004456:	bf00      	nop
 8004458:	bf00      	nop
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	20003aac 	.word	0x20003aac

08004468 <WS2812_Update>:
 * @brief  WS2812更新指令
 * @param  None
 * @return None
 */
void WS2812_Update(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&WS2812_TIM,WS2812_CHANNEL,(uint32_t *)WS2812_Buf,WS2812_BUF_SIZE);
 800446c:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004470:	4a03      	ldr	r2, [pc, #12]	@ (8004480 <WS2812_Update+0x18>)
 8004472:	2108      	movs	r1, #8
 8004474:	4803      	ldr	r0, [pc, #12]	@ (8004484 <WS2812_Update+0x1c>)
 8004476:	f008 ffbb 	bl	800d3f0 <HAL_TIM_PWM_Start_DMA>
}
 800447a:	bf00      	nop
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20003aac 	.word	0x20003aac
 8004484:	20000bf4 	.word	0x20000bf4

08004488 <RGBColorToUint32>:

// 将位域结构体转换为 uint32_t 类型
uint32_t RGBColorToUint32(RGBColor color) {
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
    return (color.red << 16) | (color.green << 8) | color.blue;
 8004490:	793b      	ldrb	r3, [r7, #4]
 8004492:	041a      	lsls	r2, r3, #16
 8004494:	797b      	ldrb	r3, [r7, #5]
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	4313      	orrs	r3, r2
 800449a:	79ba      	ldrb	r2, [r7, #6]
 800449c:	4313      	orrs	r3, r2
}
 800449e:	4618      	mov	r0, r3
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <WS2812_Write_Colors>:
 * @brief Write a series of RGB colors to WS2812 with brightness adjustment.
 * @param colors Pointer to the original RGBColor array.
 * @param count Number of elements in the array.
 * @return None
 */
void WS2812_Write_Colors(RGBColor *colors, uint8_t count) {
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < count; i++) {
 80044b8:	2300      	movs	r3, #0
 80044ba:	75fb      	strb	r3, [r7, #23]
 80044bc:	e046      	b.n	800454c <WS2812_Write_Colors+0xa0>
        uint32_t color_value = RGBColorToUint32(colors[i]);
 80044be:	7dfb      	ldrb	r3, [r7, #23]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	4413      	add	r3, r2
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	f7ff ffde 	bl	8004488 <RGBColorToUint32>
 80044cc:	6138      	str	r0, [r7, #16]
        // 分离出 RGB 各通道
        uint8_t red = (color_value >> 16) & 0xFF;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	0c1b      	lsrs	r3, r3, #16
 80044d2:	73fb      	strb	r3, [r7, #15]
        uint8_t green = (color_value >> 8) & 0xFF;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	0a1b      	lsrs	r3, r3, #8
 80044d8:	73bb      	strb	r3, [r7, #14]
        uint8_t blue = color_value & 0xFF;
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	737b      	strb	r3, [r7, #13]

        // 调整各通道亮度
        red = (uint16_t)red * WS2812_Brightness / 255;
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004560 <WS2812_Write_Colors+0xb4>)
 80044e2:	7812      	ldrb	r2, [r2, #0]
 80044e4:	fb02 f303 	mul.w	r3, r2, r3
 80044e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004564 <WS2812_Write_Colors+0xb8>)
 80044ea:	fb82 1203 	smull	r1, r2, r2, r3
 80044ee:	441a      	add	r2, r3
 80044f0:	11d2      	asrs	r2, r2, #7
 80044f2:	17db      	asrs	r3, r3, #31
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	73fb      	strb	r3, [r7, #15]
        green = (uint16_t)green * WS2812_Brightness / 255;
 80044f8:	7bbb      	ldrb	r3, [r7, #14]
 80044fa:	4a19      	ldr	r2, [pc, #100]	@ (8004560 <WS2812_Write_Colors+0xb4>)
 80044fc:	7812      	ldrb	r2, [r2, #0]
 80044fe:	fb02 f303 	mul.w	r3, r2, r3
 8004502:	4a18      	ldr	r2, [pc, #96]	@ (8004564 <WS2812_Write_Colors+0xb8>)
 8004504:	fb82 1203 	smull	r1, r2, r2, r3
 8004508:	441a      	add	r2, r3
 800450a:	11d2      	asrs	r2, r2, #7
 800450c:	17db      	asrs	r3, r3, #31
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	73bb      	strb	r3, [r7, #14]
        blue = (uint16_t)blue * WS2812_Brightness / 255;
 8004512:	7b7b      	ldrb	r3, [r7, #13]
 8004514:	4a12      	ldr	r2, [pc, #72]	@ (8004560 <WS2812_Write_Colors+0xb4>)
 8004516:	7812      	ldrb	r2, [r2, #0]
 8004518:	fb02 f303 	mul.w	r3, r2, r3
 800451c:	4a11      	ldr	r2, [pc, #68]	@ (8004564 <WS2812_Write_Colors+0xb8>)
 800451e:	fb82 1203 	smull	r1, r2, r2, r3
 8004522:	441a      	add	r2, r3
 8004524:	11d2      	asrs	r2, r2, #7
 8004526:	17db      	asrs	r3, r3, #31
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	737b      	strb	r3, [r7, #13]

        // 重新组合成 uint32_t 类型
        color_value = ((uint32_t)red << 16) | ((uint32_t)green << 8) | blue;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	041a      	lsls	r2, r3, #16
 8004530:	7bbb      	ldrb	r3, [r7, #14]
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	431a      	orrs	r2, r3
 8004536:	7b7b      	ldrb	r3, [r7, #13]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]

        WS2812_Write_Data(color_value, i);
 800453c:	7dfb      	ldrb	r3, [r7, #23]
 800453e:	4619      	mov	r1, r3
 8004540:	6938      	ldr	r0, [r7, #16]
 8004542:	f7ff ff63 	bl	800440c <WS2812_Write_Data>
    for (uint8_t i = 0; i < count; i++) {
 8004546:	7dfb      	ldrb	r3, [r7, #23]
 8004548:	3301      	adds	r3, #1
 800454a:	75fb      	strb	r3, [r7, #23]
 800454c:	7dfa      	ldrb	r2, [r7, #23]
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	429a      	cmp	r2, r3
 8004552:	d3b4      	bcc.n	80044be <WS2812_Write_Colors+0x12>
    }
    WS2812_Update();
 8004554:	f7ff ff88 	bl	8004468 <WS2812_Update>
}
 8004558:	bf00      	nop
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20000044 	.word	0x20000044
 8004564:	80808081 	.word	0x80808081

08004568 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004568:	480d      	ldr	r0, [pc, #52]	@ (80045a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800456a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800456c:	f7ff ff3c 	bl	80043e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004570:	480c      	ldr	r0, [pc, #48]	@ (80045a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004572:	490d      	ldr	r1, [pc, #52]	@ (80045a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004574:	4a0d      	ldr	r2, [pc, #52]	@ (80045ac <LoopForever+0xe>)
  movs r3, #0
 8004576:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004578:	e002      	b.n	8004580 <LoopCopyDataInit>

0800457a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800457a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800457c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800457e:	3304      	adds	r3, #4

08004580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004584:	d3f9      	bcc.n	800457a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004586:	4a0a      	ldr	r2, [pc, #40]	@ (80045b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004588:	4c0a      	ldr	r4, [pc, #40]	@ (80045b4 <LoopForever+0x16>)
  movs r3, #0
 800458a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800458c:	e001      	b.n	8004592 <LoopFillZerobss>

0800458e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800458e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004590:	3204      	adds	r2, #4

08004592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004594:	d3fb      	bcc.n	800458e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004596:	f010 f9f5 	bl	8014984 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800459a:	f7fd f879 	bl	8001690 <main>

0800459e <LoopForever>:

LoopForever:
    b LoopForever
 800459e:	e7fe      	b.n	800459e <LoopForever>
  ldr   r0, =_estack
 80045a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80045a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045a8:	20000390 	.word	0x20000390
  ldr r2, =_sidata
 80045ac:	08026448 	.word	0x08026448
  ldr r2, =_sbss
 80045b0:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 80045b4:	20004fdc 	.word	0x20004fdc

080045b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80045b8:	e7fe      	b.n	80045b8 <ADC1_2_IRQHandler>

080045ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045c4:	2003      	movs	r0, #3
 80045c6:	f002 fd6f 	bl	80070a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80045ca:	200f      	movs	r0, #15
 80045cc:	f000 f80e 	bl	80045ec <HAL_InitTick>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	71fb      	strb	r3, [r7, #7]
 80045da:	e001      	b.n	80045e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80045dc:	f7fe fe50 	bl	8003280 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80045e0:	79fb      	ldrb	r3, [r7, #7]

}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80045f8:	4b16      	ldr	r3, [pc, #88]	@ (8004654 <HAL_InitTick+0x68>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d022      	beq.n	8004646 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004600:	4b15      	ldr	r3, [pc, #84]	@ (8004658 <HAL_InitTick+0x6c>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4b13      	ldr	r3, [pc, #76]	@ (8004654 <HAL_InitTick+0x68>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800460c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004610:	fbb2 f3f3 	udiv	r3, r2, r3
 8004614:	4618      	mov	r0, r3
 8004616:	f002 fd7a 	bl	800710e <HAL_SYSTICK_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10f      	bne.n	8004640 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b0f      	cmp	r3, #15
 8004624:	d809      	bhi.n	800463a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004626:	2200      	movs	r2, #0
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	f04f 30ff 	mov.w	r0, #4294967295
 800462e:	f002 fd46 	bl	80070be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004632:	4a0a      	ldr	r2, [pc, #40]	@ (800465c <HAL_InitTick+0x70>)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	e007      	b.n	800464a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
 800463e:	e004      	b.n	800464a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	73fb      	strb	r3, [r7, #15]
 8004644:	e001      	b.n	800464a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800464a:	7bfb      	ldrb	r3, [r7, #15]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	2000004c 	.word	0x2000004c
 8004658:	20000040 	.word	0x20000040
 800465c:	20000048 	.word	0x20000048

08004660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004664:	4b05      	ldr	r3, [pc, #20]	@ (800467c <HAL_IncTick+0x1c>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	4b05      	ldr	r3, [pc, #20]	@ (8004680 <HAL_IncTick+0x20>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4413      	add	r3, r2
 800466e:	4a03      	ldr	r2, [pc, #12]	@ (800467c <HAL_IncTick+0x1c>)
 8004670:	6013      	str	r3, [r2, #0]
}
 8004672:	bf00      	nop
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	20003cbc 	.word	0x20003cbc
 8004680:	2000004c 	.word	0x2000004c

08004684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  return uwTick;
 8004688:	4b03      	ldr	r3, [pc, #12]	@ (8004698 <HAL_GetTick+0x14>)
 800468a:	681b      	ldr	r3, [r3, #0]
}
 800468c:	4618      	mov	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20003cbc 	.word	0x20003cbc

0800469c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046a4:	f7ff ffee 	bl	8004684 <HAL_GetTick>
 80046a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d004      	beq.n	80046c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80046b6:	4b09      	ldr	r3, [pc, #36]	@ (80046dc <HAL_Delay+0x40>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80046c0:	bf00      	nop
 80046c2:	f7ff ffdf 	bl	8004684 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d8f7      	bhi.n	80046c2 <HAL_Delay+0x26>
  {
  }
}
 80046d2:	bf00      	nop
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	2000004c 	.word	0x2000004c

080046e0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80046e8:	4b06      	ldr	r3, [pc, #24]	@ (8004704 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f023 0202 	bic.w	r2, r3, #2
 80046f0:	4904      	ldr	r1, [pc, #16]	@ (8004704 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	600b      	str	r3, [r1, #0]
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	40010030 	.word	0x40010030

08004708 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800470c:	4b05      	ldr	r3, [pc, #20]	@ (8004724 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a04      	ldr	r2, [pc, #16]	@ (8004724 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	6013      	str	r3, [r2, #0]
}
 8004718:	bf00      	nop
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40010030 	.word	0x40010030

08004728 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	609a      	str	r2, [r3, #8]
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	609a      	str	r2, [r3, #8]
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3360      	adds	r3, #96	@ 0x60
 80047a2:	461a      	mov	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	4b08      	ldr	r3, [pc, #32]	@ (80047d4 <LL_ADC_SetOffset+0x44>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	4313      	orrs	r3, r2
 80047c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80047c8:	bf00      	nop
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	03fff000 	.word	0x03fff000

080047d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3360      	adds	r3, #96	@ 0x60
 80047e6:	461a      	mov	r2, r3
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	3360      	adds	r3, #96	@ 0x60
 8004814:	461a      	mov	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	431a      	orrs	r2, r3
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800483a:	b480      	push	{r7}
 800483c:	b087      	sub	sp, #28
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3360      	adds	r3, #96	@ 0x60
 800484a:	461a      	mov	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	431a      	orrs	r2, r3
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004864:	bf00      	nop
 8004866:	371c      	adds	r7, #28
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3360      	adds	r3, #96	@ 0x60
 8004880:	461a      	mov	r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	431a      	orrs	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	615a      	str	r2, [r3, #20]
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b087      	sub	sp, #28
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3330      	adds	r3, #48	@ 0x30
 8004902:	461a      	mov	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	0a1b      	lsrs	r3, r3, #8
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	f003 030c 	and.w	r3, r3, #12
 800490e:	4413      	add	r3, r2
 8004910:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f003 031f 	and.w	r3, r3, #31
 800491c:	211f      	movs	r1, #31
 800491e:	fa01 f303 	lsl.w	r3, r1, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	401a      	ands	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	0e9b      	lsrs	r3, r3, #26
 800492a:	f003 011f 	and.w	r1, r3, #31
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	fa01 f303 	lsl.w	r3, r1, r3
 8004938:	431a      	orrs	r2, r3
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800493e:	bf00      	nop
 8004940:	371c      	adds	r7, #28
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004956:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	3314      	adds	r3, #20
 8004980:	461a      	mov	r2, r3
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	0e5b      	lsrs	r3, r3, #25
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	4413      	add	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	0d1b      	lsrs	r3, r3, #20
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	2107      	movs	r1, #7
 800499e:	fa01 f303 	lsl.w	r3, r1, r3
 80049a2:	43db      	mvns	r3, r3
 80049a4:	401a      	ands	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	0d1b      	lsrs	r3, r3, #20
 80049aa:	f003 031f 	and.w	r3, r3, #31
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	fa01 f303 	lsl.w	r3, r1, r3
 80049b4:	431a      	orrs	r2, r3
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80049ba:	bf00      	nop
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
	...

080049c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e0:	43db      	mvns	r3, r3
 80049e2:	401a      	ands	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f003 0318 	and.w	r3, r3, #24
 80049ea:	4908      	ldr	r1, [pc, #32]	@ (8004a0c <LL_ADC_SetChannelSingleDiff+0x44>)
 80049ec:	40d9      	lsrs	r1, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	400b      	ands	r3, r1
 80049f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f6:	431a      	orrs	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80049fe:	bf00      	nop
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	0007ffff 	.word	0x0007ffff

08004a10 <LL_ADC_SetAnalogWDMonitChannels>:
  *             On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet
  *             for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR,
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	330c      	adds	r3, #12
 8004a20:	4618      	mov	r0, r3
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	0d1b      	lsrs	r3, r3, #20
 8004a26:	f003 0103 	and.w	r1, r3, #3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f003 0201 	and.w	r2, r3, #1
 8004a30:	4613      	mov	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4403      	add	r3, r0
 8004a3e:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK)
                                                * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f023 4302 	bic.w	r3, r3, #2181038080	@ 0x82000000
 8004a4a:	f423 1360 	bic.w	r3, r3, #3670016	@ 0x380000
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	401a      	ands	r2, r3
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	400b      	ands	r3, r1
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8004a5e:	bf00      	nop
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b087      	sub	sp, #28
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	607a      	str	r2, [r7, #4]
 8004a76:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3320      	adds	r3, #32
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	0d1b      	lsrs	r3, r3, #20
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	f003 030c 	and.w	r3, r3, #12
 8004a88:	4413      	add	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 22f0 	and.w	r2, r3, #4026593280	@ 0xf000f000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	0419      	lsls	r1, r3, #16
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	430b      	orrs	r3, r1
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8004aa2:	bf00      	nop
 8004aa4:	371c      	adds	r7, #28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 031f 	and.w	r3, r3, #31
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004af6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6093      	str	r3, [r2, #8]
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b1e:	d101      	bne.n	8004b24 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004b42:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b46:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b6e:	d101      	bne.n	8004b74 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b92:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b96:	f043 0201 	orr.w	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <LL_ADC_IsEnabled+0x18>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <LL_ADC_IsEnabled+0x1a>
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004be0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004be4:	f043 0204 	orr.w	r2, r3, #4
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d101      	bne.n	8004c10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d101      	bne.n	8004c36 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2280      	movs	r2, #128	@ 0x80
 8004c50:	601a      	str	r2, [r3, #0]
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c6c:	601a      	str	r2, [r3, #0]
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c88:	601a      	str	r2, [r3, #0]
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	605a      	str	r2, [r3, #4]
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	605a      	str	r2, [r3, #4]
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	605a      	str	r2, [r3, #4]
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	605a      	str	r2, [r3, #4]
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	605a      	str	r2, [r3, #4]
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	605a      	str	r2, [r3, #4]
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
	...

08004d58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d58:	b590      	push	{r4, r7, lr}
 8004d5a:	b089      	sub	sp, #36	@ 0x24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e1a9      	b.n	80050c6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d109      	bne.n	8004d94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7fe faa5 	bl	80032d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff feb6 	bl	8004b0a <LL_ADC_IsDeepPowerDownEnabled>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d004      	beq.n	8004dae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff fe9c 	bl	8004ae6 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fed1 	bl	8004b5a <LL_ADC_IsInternalRegulatorEnabled>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d115      	bne.n	8004dea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff feb5 	bl	8004b32 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004dc8:	4b9c      	ldr	r3, [pc, #624]	@ (800503c <HAL_ADC_Init+0x2e4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	099b      	lsrs	r3, r3, #6
 8004dce:	4a9c      	ldr	r2, [pc, #624]	@ (8005040 <HAL_ADC_Init+0x2e8>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	099b      	lsrs	r3, r3, #6
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004ddc:	e002      	b.n	8004de4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3b01      	subs	r3, #1
 8004de2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f9      	bne.n	8004dde <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff feb3 	bl	8004b5a <LL_ADC_IsInternalRegulatorEnabled>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10d      	bne.n	8004e16 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dfe:	f043 0210 	orr.w	r2, r3, #16
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e0a:	f043 0201 	orr.w	r2, r3, #1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff feec 	bl	8004bf8 <LL_ADC_REG_IsConversionOngoing>
 8004e20:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e26:	f003 0310 	and.w	r3, r3, #16
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f040 8142 	bne.w	80050b4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f040 813e 	bne.w	80050b4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e3c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004e40:	f043 0202 	orr.w	r2, r3, #2
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff feac 	bl	8004baa <LL_ADC_IsEnabled>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d141      	bne.n	8004edc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e60:	d004      	beq.n	8004e6c <HAL_ADC_Init+0x114>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a77      	ldr	r2, [pc, #476]	@ (8005044 <HAL_ADC_Init+0x2ec>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d10f      	bne.n	8004e8c <HAL_ADC_Init+0x134>
 8004e6c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004e70:	f7ff fe9b 	bl	8004baa <LL_ADC_IsEnabled>
 8004e74:	4604      	mov	r4, r0
 8004e76:	4873      	ldr	r0, [pc, #460]	@ (8005044 <HAL_ADC_Init+0x2ec>)
 8004e78:	f7ff fe97 	bl	8004baa <LL_ADC_IsEnabled>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	4323      	orrs	r3, r4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bf0c      	ite	eq
 8004e84:	2301      	moveq	r3, #1
 8004e86:	2300      	movne	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	e012      	b.n	8004eb2 <HAL_ADC_Init+0x15a>
 8004e8c:	486e      	ldr	r0, [pc, #440]	@ (8005048 <HAL_ADC_Init+0x2f0>)
 8004e8e:	f7ff fe8c 	bl	8004baa <LL_ADC_IsEnabled>
 8004e92:	4604      	mov	r4, r0
 8004e94:	486d      	ldr	r0, [pc, #436]	@ (800504c <HAL_ADC_Init+0x2f4>)
 8004e96:	f7ff fe88 	bl	8004baa <LL_ADC_IsEnabled>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	431c      	orrs	r4, r3
 8004e9e:	486c      	ldr	r0, [pc, #432]	@ (8005050 <HAL_ADC_Init+0x2f8>)
 8004ea0:	f7ff fe83 	bl	8004baa <LL_ADC_IsEnabled>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	4323      	orrs	r3, r4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bf0c      	ite	eq
 8004eac:	2301      	moveq	r3, #1
 8004eae:	2300      	movne	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d012      	beq.n	8004edc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ebe:	d004      	beq.n	8004eca <HAL_ADC_Init+0x172>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a5f      	ldr	r2, [pc, #380]	@ (8005044 <HAL_ADC_Init+0x2ec>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d101      	bne.n	8004ece <HAL_ADC_Init+0x176>
 8004eca:	4a62      	ldr	r2, [pc, #392]	@ (8005054 <HAL_ADC_Init+0x2fc>)
 8004ecc:	e000      	b.n	8004ed0 <HAL_ADC_Init+0x178>
 8004ece:	4a62      	ldr	r2, [pc, #392]	@ (8005058 <HAL_ADC_Init+0x300>)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	f7ff fc26 	bl	8004728 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	7f5b      	ldrb	r3, [r3, #29]
 8004ee0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ee6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004eec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004ef2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004efa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004efc:	4313      	orrs	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d106      	bne.n	8004f18 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	045b      	lsls	r3, r3, #17
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d009      	beq.n	8004f34 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f24:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	4b48      	ldr	r3, [pc, #288]	@ (800505c <HAL_ADC_Init+0x304>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	69b9      	ldr	r1, [r7, #24]
 8004f44:	430b      	orrs	r3, r1
 8004f46:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff fe5b 	bl	8004c1e <LL_ADC_INJ_IsConversionOngoing>
 8004f68:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d17f      	bne.n	8005070 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d17c      	bne.n	8005070 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f7a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f82:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f84:	4313      	orrs	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f92:	f023 0302 	bic.w	r3, r3, #2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6812      	ldr	r2, [r2, #0]
 8004f9a:	69b9      	ldr	r1, [r7, #24]
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d017      	beq.n	8004fd8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004fb6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004fc0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004fc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6911      	ldr	r1, [r2, #16]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6812      	ldr	r2, [r2, #0]
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004fd6:	e013      	b.n	8005000 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004fe6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004ff8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ffc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005006:	2b01      	cmp	r3, #1
 8005008:	d12a      	bne.n	8005060 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005014:	f023 0304 	bic.w	r3, r3, #4
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005020:	4311      	orrs	r1, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005026:	4311      	orrs	r1, r2
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800502c:	430a      	orrs	r2, r1
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f042 0201 	orr.w	r2, r2, #1
 8005038:	611a      	str	r2, [r3, #16]
 800503a:	e019      	b.n	8005070 <HAL_ADC_Init+0x318>
 800503c:	20000040 	.word	0x20000040
 8005040:	053e2d63 	.word	0x053e2d63
 8005044:	50000100 	.word	0x50000100
 8005048:	50000400 	.word	0x50000400
 800504c:	50000500 	.word	0x50000500
 8005050:	50000600 	.word	0x50000600
 8005054:	50000300 	.word	0x50000300
 8005058:	50000700 	.word	0x50000700
 800505c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0201 	bic.w	r2, r2, #1
 800506e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d10c      	bne.n	8005092 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507e:	f023 010f 	bic.w	r1, r3, #15
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	1e5a      	subs	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005090:	e007      	b.n	80050a2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 020f 	bic.w	r2, r2, #15
 80050a0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a6:	f023 0303 	bic.w	r3, r3, #3
 80050aa:	f043 0201 	orr.w	r2, r3, #1
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80050b2:	e007      	b.n	80050c4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b8:	f043 0210 	orr.w	r2, r3, #16
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80050c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3724      	adds	r7, #36	@ 0x24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd90      	pop	{r4, r7, pc}
 80050ce:	bf00      	nop

080050d0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050e4:	d004      	beq.n	80050f0 <HAL_ADC_Start_DMA+0x20>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a5a      	ldr	r2, [pc, #360]	@ (8005254 <HAL_ADC_Start_DMA+0x184>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d101      	bne.n	80050f4 <HAL_ADC_Start_DMA+0x24>
 80050f0:	4b59      	ldr	r3, [pc, #356]	@ (8005258 <HAL_ADC_Start_DMA+0x188>)
 80050f2:	e000      	b.n	80050f6 <HAL_ADC_Start_DMA+0x26>
 80050f4:	4b59      	ldr	r3, [pc, #356]	@ (800525c <HAL_ADC_Start_DMA+0x18c>)
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7ff fcd9 	bl	8004aae <LL_ADC_GetMultimode>
 80050fc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff fd78 	bl	8004bf8 <LL_ADC_REG_IsConversionOngoing>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	f040 809b 	bne.w	8005246 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005116:	2b01      	cmp	r3, #1
 8005118:	d101      	bne.n	800511e <HAL_ADC_Start_DMA+0x4e>
 800511a:	2302      	movs	r3, #2
 800511c:	e096      	b.n	800524c <HAL_ADC_Start_DMA+0x17c>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a4d      	ldr	r2, [pc, #308]	@ (8005260 <HAL_ADC_Start_DMA+0x190>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d008      	beq.n	8005142 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d005      	beq.n	8005142 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b05      	cmp	r3, #5
 800513a:	d002      	beq.n	8005142 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	2b09      	cmp	r3, #9
 8005140:	d17a      	bne.n	8005238 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f001 f96c 	bl	8006420 <ADC_Enable>
 8005148:	4603      	mov	r3, r0
 800514a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800514c:	7dfb      	ldrb	r3, [r7, #23]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d16d      	bne.n	800522e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005156:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800515a:	f023 0301 	bic.w	r3, r3, #1
 800515e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a3a      	ldr	r2, [pc, #232]	@ (8005254 <HAL_ADC_Start_DMA+0x184>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d009      	beq.n	8005184 <HAL_ADC_Start_DMA+0xb4>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a3b      	ldr	r2, [pc, #236]	@ (8005264 <HAL_ADC_Start_DMA+0x194>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d002      	beq.n	8005180 <HAL_ADC_Start_DMA+0xb0>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	e003      	b.n	8005188 <HAL_ADC_Start_DMA+0xb8>
 8005180:	4b39      	ldr	r3, [pc, #228]	@ (8005268 <HAL_ADC_Start_DMA+0x198>)
 8005182:	e001      	b.n	8005188 <HAL_ADC_Start_DMA+0xb8>
 8005184:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	6812      	ldr	r2, [r2, #0]
 800518c:	4293      	cmp	r3, r2
 800518e:	d002      	beq.n	8005196 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d105      	bne.n	80051a2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800519a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d006      	beq.n	80051bc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b2:	f023 0206 	bic.w	r2, r3, #6
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	661a      	str	r2, [r3, #96]	@ 0x60
 80051ba:	e002      	b.n	80051c2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c6:	4a29      	ldr	r2, [pc, #164]	@ (800526c <HAL_ADC_Start_DMA+0x19c>)
 80051c8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ce:	4a28      	ldr	r2, [pc, #160]	@ (8005270 <HAL_ADC_Start_DMA+0x1a0>)
 80051d0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d6:	4a27      	ldr	r2, [pc, #156]	@ (8005274 <HAL_ADC_Start_DMA+0x1a4>)
 80051d8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	221c      	movs	r2, #28
 80051e0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 0210 	orr.w	r2, r2, #16
 80051f8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f042 0201 	orr.w	r2, r2, #1
 8005208:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3340      	adds	r3, #64	@ 0x40
 8005214:	4619      	mov	r1, r3
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f002 faa3 	bl	8007764 <HAL_DMA_Start_IT>
 800521e:	4603      	mov	r3, r0
 8005220:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff fcd2 	bl	8004bd0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800522c:	e00d      	b.n	800524a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005236:	e008      	b.n	800524a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005244:	e001      	b.n	800524a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005246:	2302      	movs	r3, #2
 8005248:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800524a:	7dfb      	ldrb	r3, [r7, #23]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	50000100 	.word	0x50000100
 8005258:	50000300 	.word	0x50000300
 800525c:	50000700 	.word	0x50000700
 8005260:	50000600 	.word	0x50000600
 8005264:	50000500 	.word	0x50000500
 8005268:	50000400 	.word	0x50000400
 800526c:	0800654d 	.word	0x0800654d
 8005270:	08006625 	.word	0x08006625
 8005274:	08006641 	.word	0x08006641

08005278 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08a      	sub	sp, #40	@ 0x28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005280:	2300      	movs	r3, #0
 8005282:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800529c:	d004      	beq.n	80052a8 <HAL_ADC_IRQHandler+0x30>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a8e      	ldr	r2, [pc, #568]	@ (80054dc <HAL_ADC_IRQHandler+0x264>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d101      	bne.n	80052ac <HAL_ADC_IRQHandler+0x34>
 80052a8:	4b8d      	ldr	r3, [pc, #564]	@ (80054e0 <HAL_ADC_IRQHandler+0x268>)
 80052aa:	e000      	b.n	80052ae <HAL_ADC_IRQHandler+0x36>
 80052ac:	4b8d      	ldr	r3, [pc, #564]	@ (80054e4 <HAL_ADC_IRQHandler+0x26c>)
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff fbfd 	bl	8004aae <LL_ADC_GetMultimode>
 80052b4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d017      	beq.n	80052f0 <HAL_ADC_IRQHandler+0x78>
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d012      	beq.n	80052f0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ce:	f003 0310 	and.w	r3, r3, #16
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d105      	bne.n	80052e2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052da:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f001 fa14 	bl	8006710 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2202      	movs	r2, #2
 80052ee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f003 0304 	and.w	r3, r3, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d004      	beq.n	8005304 <HAL_ADC_IRQHandler+0x8c>
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10b      	bne.n	800531c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 8094 	beq.w	8005438 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 808e 	beq.w	8005438 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	2b00      	cmp	r3, #0
 8005326:	d105      	bne.n	8005334 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800532c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff fac7 	bl	80048cc <LL_ADC_REG_IsTriggerSourceSWStart>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d072      	beq.n	800542a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a64      	ldr	r2, [pc, #400]	@ (80054dc <HAL_ADC_IRQHandler+0x264>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d009      	beq.n	8005362 <HAL_ADC_IRQHandler+0xea>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a65      	ldr	r2, [pc, #404]	@ (80054e8 <HAL_ADC_IRQHandler+0x270>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d002      	beq.n	800535e <HAL_ADC_IRQHandler+0xe6>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	e003      	b.n	8005366 <HAL_ADC_IRQHandler+0xee>
 800535e:	4b63      	ldr	r3, [pc, #396]	@ (80054ec <HAL_ADC_IRQHandler+0x274>)
 8005360:	e001      	b.n	8005366 <HAL_ADC_IRQHandler+0xee>
 8005362:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6812      	ldr	r2, [r2, #0]
 800536a:	4293      	cmp	r3, r2
 800536c:	d008      	beq.n	8005380 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d005      	beq.n	8005380 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	2b05      	cmp	r3, #5
 8005378:	d002      	beq.n	8005380 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b09      	cmp	r3, #9
 800537e:	d104      	bne.n	800538a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	623b      	str	r3, [r7, #32]
 8005388:	e014      	b.n	80053b4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a53      	ldr	r2, [pc, #332]	@ (80054dc <HAL_ADC_IRQHandler+0x264>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d009      	beq.n	80053a8 <HAL_ADC_IRQHandler+0x130>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a53      	ldr	r2, [pc, #332]	@ (80054e8 <HAL_ADC_IRQHandler+0x270>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d002      	beq.n	80053a4 <HAL_ADC_IRQHandler+0x12c>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	e003      	b.n	80053ac <HAL_ADC_IRQHandler+0x134>
 80053a4:	4b51      	ldr	r3, [pc, #324]	@ (80054ec <HAL_ADC_IRQHandler+0x274>)
 80053a6:	e001      	b.n	80053ac <HAL_ADC_IRQHandler+0x134>
 80053a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80053ac:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d135      	bne.n	800542a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0308 	and.w	r3, r3, #8
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d12e      	bne.n	800542a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff fc11 	bl	8004bf8 <LL_ADC_REG_IsConversionOngoing>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d11a      	bne.n	8005412 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 020c 	bic.w	r2, r2, #12
 80053ea:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d112      	bne.n	800542a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005408:	f043 0201 	orr.w	r2, r3, #1
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005410:	e00b      	b.n	800542a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005416:	f043 0210 	orr.w	r2, r3, #16
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005422:	f043 0201 	orr.w	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f984 	bl	8005738 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	220c      	movs	r2, #12
 8005436:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f003 0320 	and.w	r3, r3, #32
 800543e:	2b00      	cmp	r3, #0
 8005440:	d004      	beq.n	800544c <HAL_ADC_IRQHandler+0x1d4>
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	f003 0320 	and.w	r3, r3, #32
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10b      	bne.n	8005464 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 80b3 	beq.w	80055be <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 80ad 	beq.w	80055be <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b00      	cmp	r3, #0
 800546e:	d105      	bne.n	800547c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005474:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff fa62 	bl	800494a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005486:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff fa1d 	bl	80048cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8005492:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a10      	ldr	r2, [pc, #64]	@ (80054dc <HAL_ADC_IRQHandler+0x264>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d009      	beq.n	80054b2 <HAL_ADC_IRQHandler+0x23a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a11      	ldr	r2, [pc, #68]	@ (80054e8 <HAL_ADC_IRQHandler+0x270>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d002      	beq.n	80054ae <HAL_ADC_IRQHandler+0x236>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	e003      	b.n	80054b6 <HAL_ADC_IRQHandler+0x23e>
 80054ae:	4b0f      	ldr	r3, [pc, #60]	@ (80054ec <HAL_ADC_IRQHandler+0x274>)
 80054b0:	e001      	b.n	80054b6 <HAL_ADC_IRQHandler+0x23e>
 80054b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6812      	ldr	r2, [r2, #0]
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d008      	beq.n	80054d0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2b06      	cmp	r3, #6
 80054c8:	d002      	beq.n	80054d0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b07      	cmp	r3, #7
 80054ce:	d10f      	bne.n	80054f0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	623b      	str	r3, [r7, #32]
 80054d8:	e01f      	b.n	800551a <HAL_ADC_IRQHandler+0x2a2>
 80054da:	bf00      	nop
 80054dc:	50000100 	.word	0x50000100
 80054e0:	50000300 	.word	0x50000300
 80054e4:	50000700 	.word	0x50000700
 80054e8:	50000500 	.word	0x50000500
 80054ec:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a8b      	ldr	r2, [pc, #556]	@ (8005724 <HAL_ADC_IRQHandler+0x4ac>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d009      	beq.n	800550e <HAL_ADC_IRQHandler+0x296>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a8a      	ldr	r2, [pc, #552]	@ (8005728 <HAL_ADC_IRQHandler+0x4b0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d002      	beq.n	800550a <HAL_ADC_IRQHandler+0x292>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	e003      	b.n	8005512 <HAL_ADC_IRQHandler+0x29a>
 800550a:	4b88      	ldr	r3, [pc, #544]	@ (800572c <HAL_ADC_IRQHandler+0x4b4>)
 800550c:	e001      	b.n	8005512 <HAL_ADC_IRQHandler+0x29a>
 800550e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005512:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d047      	beq.n	80055b0 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <HAL_ADC_IRQHandler+0x2c2>
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d03f      	beq.n	80055b0 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005536:	2b00      	cmp	r3, #0
 8005538:	d13a      	bne.n	80055b0 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005544:	2b40      	cmp	r3, #64	@ 0x40
 8005546:	d133      	bne.n	80055b0 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d12e      	bne.n	80055b0 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff fb61 	bl	8004c1e <LL_ADC_INJ_IsConversionOngoing>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d11a      	bne.n	8005598 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005570:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005576:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005586:	2b00      	cmp	r3, #0
 8005588:	d112      	bne.n	80055b0 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800558e:	f043 0201 	orr.w	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005596:	e00b      	b.n	80055b0 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800559c:	f043 0210 	orr.w	r2, r3, #16
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a8:	f043 0201 	orr.w	r2, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f001 f885 	bl	80066c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2260      	movs	r2, #96	@ 0x60
 80055bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d011      	beq.n	80055ec <HAL_ADC_IRQHandler+0x374>
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00c      	beq.n	80055ec <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055d6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f8be 	bl	8005760 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2280      	movs	r2, #128	@ 0x80
 80055ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d012      	beq.n	800561c <HAL_ADC_IRQHandler+0x3a4>
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00d      	beq.n	800561c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005604:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f001 f86b 	bl	80066e8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800561a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005622:	2b00      	cmp	r3, #0
 8005624:	d012      	beq.n	800564c <HAL_ADC_IRQHandler+0x3d4>
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00d      	beq.n	800564c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005634:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f001 f85d 	bl	80066fc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800564a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f003 0310 	and.w	r3, r3, #16
 8005652:	2b00      	cmp	r3, #0
 8005654:	d043      	beq.n	80056de <HAL_ADC_IRQHandler+0x466>
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	f003 0310 	and.w	r3, r3, #16
 800565c:	2b00      	cmp	r3, #0
 800565e:	d03e      	beq.n	80056de <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005664:	2b00      	cmp	r3, #0
 8005666:	d102      	bne.n	800566e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8005668:	2301      	movs	r3, #1
 800566a:	627b      	str	r3, [r7, #36]	@ 0x24
 800566c:	e021      	b.n	80056b2 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d015      	beq.n	80056a0 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800567c:	d004      	beq.n	8005688 <HAL_ADC_IRQHandler+0x410>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a28      	ldr	r2, [pc, #160]	@ (8005724 <HAL_ADC_IRQHandler+0x4ac>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d101      	bne.n	800568c <HAL_ADC_IRQHandler+0x414>
 8005688:	4b29      	ldr	r3, [pc, #164]	@ (8005730 <HAL_ADC_IRQHandler+0x4b8>)
 800568a:	e000      	b.n	800568e <HAL_ADC_IRQHandler+0x416>
 800568c:	4b29      	ldr	r3, [pc, #164]	@ (8005734 <HAL_ADC_IRQHandler+0x4bc>)
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff fa1b 	bl	8004aca <LL_ADC_GetMultiDMATransfer>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00b      	beq.n	80056b2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800569a:	2301      	movs	r3, #1
 800569c:	627b      	str	r3, [r7, #36]	@ 0x24
 800569e:	e008      	b.n	80056b2 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80056ae:	2301      	movs	r3, #1
 80056b0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d10e      	bne.n	80056d6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056bc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056c8:	f043 0202 	orr.w	r2, r3, #2
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f84f 	bl	8005774 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2210      	movs	r2, #16
 80056dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d018      	beq.n	800571a <HAL_ADC_IRQHandler+0x4a2>
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d013      	beq.n	800571a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056f6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005702:	f043 0208 	orr.w	r2, r3, #8
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005712:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 ffdd 	bl	80066d4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800571a:	bf00      	nop
 800571c:	3728      	adds	r7, #40	@ 0x28
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	50000100 	.word	0x50000100
 8005728:	50000500 	.word	0x50000500
 800572c:	50000400 	.word	0x50000400
 8005730:	50000300 	.word	0x50000300
 8005734:	50000700 	.word	0x50000700

08005738 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b0b6      	sub	sp, #216	@ 0xd8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d102      	bne.n	80057ac <HAL_ADC_ConfigChannel+0x24>
 80057a6:	2302      	movs	r3, #2
 80057a8:	f000 bc13 	b.w	8005fd2 <HAL_ADC_ConfigChannel+0x84a>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff fa1d 	bl	8004bf8 <LL_ADC_REG_IsConversionOngoing>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f040 83f3 	bne.w	8005fac <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6818      	ldr	r0, [r3, #0]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	6859      	ldr	r1, [r3, #4]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	f7ff f88d 	bl	80048f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff fa0b 	bl	8004bf8 <LL_ADC_REG_IsConversionOngoing>
 80057e2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff fa17 	bl	8004c1e <LL_ADC_INJ_IsConversionOngoing>
 80057f0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80057f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f040 81d9 	bne.w	8005bb0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80057fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005802:	2b00      	cmp	r3, #0
 8005804:	f040 81d4 	bne.w	8005bb0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005810:	d10f      	bne.n	8005832 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2200      	movs	r2, #0
 800581c:	4619      	mov	r1, r3
 800581e:	f7ff f8a7 	bl	8004970 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff f83b 	bl	80048a6 <LL_ADC_SetSamplingTimeCommonConfig>
 8005830:	e00e      	b.n	8005850 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6818      	ldr	r0, [r3, #0]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	6819      	ldr	r1, [r3, #0]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	461a      	mov	r2, r3
 8005840:	f7ff f896 	bl	8004970 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2100      	movs	r1, #0
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff f82b 	bl	80048a6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	695a      	ldr	r2, [r3, #20]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	08db      	lsrs	r3, r3, #3
 800585c:	f003 0303 	and.w	r3, r3, #3
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	2b04      	cmp	r3, #4
 8005870:	d022      	beq.n	80058b8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6919      	ldr	r1, [r3, #16]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005882:	f7fe ff85 	bl	8004790 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6818      	ldr	r0, [r3, #0]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	6919      	ldr	r1, [r3, #16]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	461a      	mov	r2, r3
 8005894:	f7fe ffd1 	bl	800483a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6818      	ldr	r0, [r3, #0]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d102      	bne.n	80058ae <HAL_ADC_ConfigChannel+0x126>
 80058a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058ac:	e000      	b.n	80058b0 <HAL_ADC_ConfigChannel+0x128>
 80058ae:	2300      	movs	r3, #0
 80058b0:	461a      	mov	r2, r3
 80058b2:	f7fe ffdd 	bl	8004870 <LL_ADC_SetOffsetSaturation>
 80058b6:	e17b      	b.n	8005bb0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2100      	movs	r1, #0
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fe ff8a 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 80058c4:	4603      	mov	r3, r0
 80058c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <HAL_ADC_ConfigChannel+0x15c>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2100      	movs	r1, #0
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7fe ff7f 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 80058da:	4603      	mov	r3, r0
 80058dc:	0e9b      	lsrs	r3, r3, #26
 80058de:	f003 021f 	and.w	r2, r3, #31
 80058e2:	e01e      	b.n	8005922 <HAL_ADC_ConfigChannel+0x19a>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2100      	movs	r1, #0
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe ff74 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 80058f0:	4603      	mov	r3, r0
 80058f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80058fa:	fa93 f3a3 	rbit	r3, r3
 80058fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005902:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005906:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800590a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005912:	2320      	movs	r3, #32
 8005914:	e004      	b.n	8005920 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005916:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800591a:	fab3 f383 	clz	r3, r3
 800591e:	b2db      	uxtb	r3, r3
 8005920:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800592a:	2b00      	cmp	r3, #0
 800592c:	d105      	bne.n	800593a <HAL_ADC_ConfigChannel+0x1b2>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	0e9b      	lsrs	r3, r3, #26
 8005934:	f003 031f 	and.w	r3, r3, #31
 8005938:	e018      	b.n	800596c <HAL_ADC_ConfigChannel+0x1e4>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005942:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005946:	fa93 f3a3 	rbit	r3, r3
 800594a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800594e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005952:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005956:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800595e:	2320      	movs	r3, #32
 8005960:	e004      	b.n	800596c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005962:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005966:	fab3 f383 	clz	r3, r3
 800596a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800596c:	429a      	cmp	r2, r3
 800596e:	d106      	bne.n	800597e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2200      	movs	r2, #0
 8005976:	2100      	movs	r1, #0
 8005978:	4618      	mov	r0, r3
 800597a:	f7fe ff43 	bl	8004804 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2101      	movs	r1, #1
 8005984:	4618      	mov	r0, r3
 8005986:	f7fe ff27 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 800598a:	4603      	mov	r3, r0
 800598c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <HAL_ADC_ConfigChannel+0x222>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2101      	movs	r1, #1
 800599a:	4618      	mov	r0, r3
 800599c:	f7fe ff1c 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 80059a0:	4603      	mov	r3, r0
 80059a2:	0e9b      	lsrs	r3, r3, #26
 80059a4:	f003 021f 	and.w	r2, r3, #31
 80059a8:	e01e      	b.n	80059e8 <HAL_ADC_ConfigChannel+0x260>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2101      	movs	r1, #1
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fe ff11 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 80059b6:	4603      	mov	r3, r0
 80059b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80059c0:	fa93 f3a3 	rbit	r3, r3
 80059c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80059c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80059d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80059d8:	2320      	movs	r3, #32
 80059da:	e004      	b.n	80059e6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80059dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80059e0:	fab3 f383 	clz	r3, r3
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d105      	bne.n	8005a00 <HAL_ADC_ConfigChannel+0x278>
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	0e9b      	lsrs	r3, r3, #26
 80059fa:	f003 031f 	and.w	r3, r3, #31
 80059fe:	e018      	b.n	8005a32 <HAL_ADC_ConfigChannel+0x2aa>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a0c:	fa93 f3a3 	rbit	r3, r3
 8005a10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005a14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005a1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005a24:	2320      	movs	r3, #32
 8005a26:	e004      	b.n	8005a32 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005a28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a2c:	fab3 f383 	clz	r3, r3
 8005a30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d106      	bne.n	8005a44 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fe fee0 	bl	8004804 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2102      	movs	r1, #2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fe fec4 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10a      	bne.n	8005a70 <HAL_ADC_ConfigChannel+0x2e8>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2102      	movs	r1, #2
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fe feb9 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 8005a66:	4603      	mov	r3, r0
 8005a68:	0e9b      	lsrs	r3, r3, #26
 8005a6a:	f003 021f 	and.w	r2, r3, #31
 8005a6e:	e01e      	b.n	8005aae <HAL_ADC_ConfigChannel+0x326>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2102      	movs	r1, #2
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fe feae 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a86:	fa93 f3a3 	rbit	r3, r3
 8005a8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005a8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005a96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005a9e:	2320      	movs	r3, #32
 8005aa0:	e004      	b.n	8005aac <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005aa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005aa6:	fab3 f383 	clz	r3, r3
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d105      	bne.n	8005ac6 <HAL_ADC_ConfigChannel+0x33e>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	0e9b      	lsrs	r3, r3, #26
 8005ac0:	f003 031f 	and.w	r3, r3, #31
 8005ac4:	e016      	b.n	8005af4 <HAL_ADC_ConfigChannel+0x36c>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ace:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005ad2:	fa93 f3a3 	rbit	r3, r3
 8005ad6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005ad8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ada:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005ade:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005ae6:	2320      	movs	r3, #32
 8005ae8:	e004      	b.n	8005af4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005aea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005aee:	fab3 f383 	clz	r3, r3
 8005af2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d106      	bne.n	8005b06 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2200      	movs	r2, #0
 8005afe:	2102      	movs	r1, #2
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fe fe7f 	bl	8004804 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2103      	movs	r1, #3
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fe fe63 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 8005b12:	4603      	mov	r3, r0
 8005b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10a      	bne.n	8005b32 <HAL_ADC_ConfigChannel+0x3aa>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2103      	movs	r1, #3
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fe fe58 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	0e9b      	lsrs	r3, r3, #26
 8005b2c:	f003 021f 	and.w	r2, r3, #31
 8005b30:	e017      	b.n	8005b62 <HAL_ADC_ConfigChannel+0x3da>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2103      	movs	r1, #3
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fe fe4d 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b44:	fa93 f3a3 	rbit	r3, r3
 8005b48:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005b4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b4c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005b4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005b54:	2320      	movs	r3, #32
 8005b56:	e003      	b.n	8005b60 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005b58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b5a:	fab3 f383 	clz	r3, r3
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d105      	bne.n	8005b7a <HAL_ADC_ConfigChannel+0x3f2>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	0e9b      	lsrs	r3, r3, #26
 8005b74:	f003 031f 	and.w	r3, r3, #31
 8005b78:	e011      	b.n	8005b9e <HAL_ADC_ConfigChannel+0x416>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b82:	fa93 f3a3 	rbit	r3, r3
 8005b86:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005b88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005b8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005b92:	2320      	movs	r3, #32
 8005b94:	e003      	b.n	8005b9e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005b96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b98:	fab3 f383 	clz	r3, r3
 8005b9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d106      	bne.n	8005bb0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	2103      	movs	r1, #3
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fe fe2a 	bl	8004804 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7fe fff8 	bl	8004baa <LL_ADC_IsEnabled>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f040 813d 	bne.w	8005e3c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	6819      	ldr	r1, [r3, #0]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f7fe fefa 	bl	80049c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	4aa2      	ldr	r2, [pc, #648]	@ (8005e64 <HAL_ADC_ConfigChannel+0x6dc>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	f040 812e 	bne.w	8005e3c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10b      	bne.n	8005c08 <HAL_ADC_ConfigChannel+0x480>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	0e9b      	lsrs	r3, r3, #26
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	f003 031f 	and.w	r3, r3, #31
 8005bfc:	2b09      	cmp	r3, #9
 8005bfe:	bf94      	ite	ls
 8005c00:	2301      	movls	r3, #1
 8005c02:	2300      	movhi	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	e019      	b.n	8005c3c <HAL_ADC_ConfigChannel+0x4b4>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c10:	fa93 f3a3 	rbit	r3, r3
 8005c14:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005c16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c18:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005c1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005c20:	2320      	movs	r3, #32
 8005c22:	e003      	b.n	8005c2c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005c24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c26:	fab3 f383 	clz	r3, r3
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	f003 031f 	and.w	r3, r3, #31
 8005c32:	2b09      	cmp	r3, #9
 8005c34:	bf94      	ite	ls
 8005c36:	2301      	movls	r3, #1
 8005c38:	2300      	movhi	r3, #0
 8005c3a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d079      	beq.n	8005d34 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d107      	bne.n	8005c5c <HAL_ADC_ConfigChannel+0x4d4>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	0e9b      	lsrs	r3, r3, #26
 8005c52:	3301      	adds	r3, #1
 8005c54:	069b      	lsls	r3, r3, #26
 8005c56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005c5a:	e015      	b.n	8005c88 <HAL_ADC_ConfigChannel+0x500>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c64:	fa93 f3a3 	rbit	r3, r3
 8005c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005c6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c6c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005c74:	2320      	movs	r3, #32
 8005c76:	e003      	b.n	8005c80 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c7a:	fab3 f383 	clz	r3, r3
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	3301      	adds	r3, #1
 8005c82:	069b      	lsls	r3, r3, #26
 8005c84:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d109      	bne.n	8005ca8 <HAL_ADC_ConfigChannel+0x520>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	0e9b      	lsrs	r3, r3, #26
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	f003 031f 	and.w	r3, r3, #31
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca6:	e017      	b.n	8005cd8 <HAL_ADC_ConfigChannel+0x550>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cb0:	fa93 f3a3 	rbit	r3, r3
 8005cb4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005cc0:	2320      	movs	r3, #32
 8005cc2:	e003      	b.n	8005ccc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005cc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cc6:	fab3 f383 	clz	r3, r3
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	3301      	adds	r3, #1
 8005cce:	f003 031f 	and.w	r3, r3, #31
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd8:	ea42 0103 	orr.w	r1, r2, r3
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <HAL_ADC_ConfigChannel+0x576>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	0e9b      	lsrs	r3, r3, #26
 8005cee:	3301      	adds	r3, #1
 8005cf0:	f003 021f 	and.w	r2, r3, #31
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	4413      	add	r3, r2
 8005cfa:	051b      	lsls	r3, r3, #20
 8005cfc:	e018      	b.n	8005d30 <HAL_ADC_ConfigChannel+0x5a8>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d06:	fa93 f3a3 	rbit	r3, r3
 8005d0a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005d16:	2320      	movs	r3, #32
 8005d18:	e003      	b.n	8005d22 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d1c:	fab3 f383 	clz	r3, r3
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	3301      	adds	r3, #1
 8005d24:	f003 021f 	and.w	r2, r3, #31
 8005d28:	4613      	mov	r3, r2
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	4413      	add	r3, r2
 8005d2e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d30:	430b      	orrs	r3, r1
 8005d32:	e07e      	b.n	8005e32 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d107      	bne.n	8005d50 <HAL_ADC_ConfigChannel+0x5c8>
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	0e9b      	lsrs	r3, r3, #26
 8005d46:	3301      	adds	r3, #1
 8005d48:	069b      	lsls	r3, r3, #26
 8005d4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005d4e:	e015      	b.n	8005d7c <HAL_ADC_ConfigChannel+0x5f4>
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d58:	fa93 f3a3 	rbit	r3, r3
 8005d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d60:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005d68:	2320      	movs	r3, #32
 8005d6a:	e003      	b.n	8005d74 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6e:	fab3 f383 	clz	r3, r3
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	3301      	adds	r3, #1
 8005d76:	069b      	lsls	r3, r3, #26
 8005d78:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d109      	bne.n	8005d9c <HAL_ADC_ConfigChannel+0x614>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	0e9b      	lsrs	r3, r3, #26
 8005d8e:	3301      	adds	r3, #1
 8005d90:	f003 031f 	and.w	r3, r3, #31
 8005d94:	2101      	movs	r1, #1
 8005d96:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9a:	e017      	b.n	8005dcc <HAL_ADC_ConfigChannel+0x644>
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	fa93 f3a3 	rbit	r3, r3
 8005da8:	61fb      	str	r3, [r7, #28]
  return result;
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005db4:	2320      	movs	r3, #32
 8005db6:	e003      	b.n	8005dc0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dba:	fab3 f383 	clz	r3, r3
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	f003 031f 	and.w	r3, r3, #31
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dcc:	ea42 0103 	orr.w	r1, r2, r3
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10d      	bne.n	8005df8 <HAL_ADC_ConfigChannel+0x670>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	0e9b      	lsrs	r3, r3, #26
 8005de2:	3301      	adds	r3, #1
 8005de4:	f003 021f 	and.w	r2, r3, #31
 8005de8:	4613      	mov	r3, r2
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	4413      	add	r3, r2
 8005dee:	3b1e      	subs	r3, #30
 8005df0:	051b      	lsls	r3, r3, #20
 8005df2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005df6:	e01b      	b.n	8005e30 <HAL_ADC_ConfigChannel+0x6a8>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	fa93 f3a3 	rbit	r3, r3
 8005e04:	613b      	str	r3, [r7, #16]
  return result;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005e10:	2320      	movs	r3, #32
 8005e12:	e003      	b.n	8005e1c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	fab3 f383 	clz	r3, r3
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	f003 021f 	and.w	r2, r3, #31
 8005e22:	4613      	mov	r3, r2
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	4413      	add	r3, r2
 8005e28:	3b1e      	subs	r3, #30
 8005e2a:	051b      	lsls	r3, r3, #20
 8005e2c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e30:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e36:	4619      	mov	r1, r3
 8005e38:	f7fe fd9a 	bl	8004970 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	4b09      	ldr	r3, [pc, #36]	@ (8005e68 <HAL_ADC_ConfigChannel+0x6e0>)
 8005e42:	4013      	ands	r3, r2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 80be 	beq.w	8005fc6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e52:	d004      	beq.n	8005e5e <HAL_ADC_ConfigChannel+0x6d6>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a04      	ldr	r2, [pc, #16]	@ (8005e6c <HAL_ADC_ConfigChannel+0x6e4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d10a      	bne.n	8005e74 <HAL_ADC_ConfigChannel+0x6ec>
 8005e5e:	4b04      	ldr	r3, [pc, #16]	@ (8005e70 <HAL_ADC_ConfigChannel+0x6e8>)
 8005e60:	e009      	b.n	8005e76 <HAL_ADC_ConfigChannel+0x6ee>
 8005e62:	bf00      	nop
 8005e64:	407f0000 	.word	0x407f0000
 8005e68:	80080000 	.word	0x80080000
 8005e6c:	50000100 	.word	0x50000100
 8005e70:	50000300 	.word	0x50000300
 8005e74:	4b59      	ldr	r3, [pc, #356]	@ (8005fdc <HAL_ADC_ConfigChannel+0x854>)
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fe fc7c 	bl	8004774 <LL_ADC_GetCommonPathInternalCh>
 8005e7c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a56      	ldr	r2, [pc, #344]	@ (8005fe0 <HAL_ADC_ConfigChannel+0x858>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d004      	beq.n	8005e94 <HAL_ADC_ConfigChannel+0x70c>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a55      	ldr	r2, [pc, #340]	@ (8005fe4 <HAL_ADC_ConfigChannel+0x85c>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d13a      	bne.n	8005f0a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005e94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d134      	bne.n	8005f0a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ea8:	d005      	beq.n	8005eb6 <HAL_ADC_ConfigChannel+0x72e>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a4e      	ldr	r2, [pc, #312]	@ (8005fe8 <HAL_ADC_ConfigChannel+0x860>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	f040 8085 	bne.w	8005fc0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ebe:	d004      	beq.n	8005eca <HAL_ADC_ConfigChannel+0x742>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a49      	ldr	r2, [pc, #292]	@ (8005fec <HAL_ADC_ConfigChannel+0x864>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d101      	bne.n	8005ece <HAL_ADC_ConfigChannel+0x746>
 8005eca:	4a49      	ldr	r2, [pc, #292]	@ (8005ff0 <HAL_ADC_ConfigChannel+0x868>)
 8005ecc:	e000      	b.n	8005ed0 <HAL_ADC_ConfigChannel+0x748>
 8005ece:	4a43      	ldr	r2, [pc, #268]	@ (8005fdc <HAL_ADC_ConfigChannel+0x854>)
 8005ed0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ed4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4610      	mov	r0, r2
 8005edc:	f7fe fc37 	bl	800474e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ee0:	4b44      	ldr	r3, [pc, #272]	@ (8005ff4 <HAL_ADC_ConfigChannel+0x86c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	099b      	lsrs	r3, r3, #6
 8005ee6:	4a44      	ldr	r2, [pc, #272]	@ (8005ff8 <HAL_ADC_ConfigChannel+0x870>)
 8005ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eec:	099b      	lsrs	r3, r3, #6
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005efa:	e002      	b.n	8005f02 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1f9      	bne.n	8005efc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005f08:	e05a      	b.n	8005fc0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a3b      	ldr	r2, [pc, #236]	@ (8005ffc <HAL_ADC_ConfigChannel+0x874>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d125      	bne.n	8005f60 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005f14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d11f      	bne.n	8005f60 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a31      	ldr	r2, [pc, #196]	@ (8005fec <HAL_ADC_ConfigChannel+0x864>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d104      	bne.n	8005f34 <HAL_ADC_ConfigChannel+0x7ac>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a34      	ldr	r2, [pc, #208]	@ (8006000 <HAL_ADC_ConfigChannel+0x878>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d047      	beq.n	8005fc4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f3c:	d004      	beq.n	8005f48 <HAL_ADC_ConfigChannel+0x7c0>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a2a      	ldr	r2, [pc, #168]	@ (8005fec <HAL_ADC_ConfigChannel+0x864>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d101      	bne.n	8005f4c <HAL_ADC_ConfigChannel+0x7c4>
 8005f48:	4a29      	ldr	r2, [pc, #164]	@ (8005ff0 <HAL_ADC_ConfigChannel+0x868>)
 8005f4a:	e000      	b.n	8005f4e <HAL_ADC_ConfigChannel+0x7c6>
 8005f4c:	4a23      	ldr	r2, [pc, #140]	@ (8005fdc <HAL_ADC_ConfigChannel+0x854>)
 8005f4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f56:	4619      	mov	r1, r3
 8005f58:	4610      	mov	r0, r2
 8005f5a:	f7fe fbf8 	bl	800474e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005f5e:	e031      	b.n	8005fc4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a27      	ldr	r2, [pc, #156]	@ (8006004 <HAL_ADC_ConfigChannel+0x87c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d12d      	bne.n	8005fc6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005f6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d127      	bne.n	8005fc6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8005fec <HAL_ADC_ConfigChannel+0x864>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d022      	beq.n	8005fc6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f88:	d004      	beq.n	8005f94 <HAL_ADC_ConfigChannel+0x80c>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a17      	ldr	r2, [pc, #92]	@ (8005fec <HAL_ADC_ConfigChannel+0x864>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d101      	bne.n	8005f98 <HAL_ADC_ConfigChannel+0x810>
 8005f94:	4a16      	ldr	r2, [pc, #88]	@ (8005ff0 <HAL_ADC_ConfigChannel+0x868>)
 8005f96:	e000      	b.n	8005f9a <HAL_ADC_ConfigChannel+0x812>
 8005f98:	4a10      	ldr	r2, [pc, #64]	@ (8005fdc <HAL_ADC_ConfigChannel+0x854>)
 8005f9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	f7fe fbd2 	bl	800474e <LL_ADC_SetCommonPathInternalCh>
 8005faa:	e00c      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fb0:	f043 0220 	orr.w	r2, r3, #32
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005fbe:	e002      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005fc0:	bf00      	nop
 8005fc2:	e000      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005fc4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005fce:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	37d8      	adds	r7, #216	@ 0xd8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	50000700 	.word	0x50000700
 8005fe0:	c3210000 	.word	0xc3210000
 8005fe4:	90c00010 	.word	0x90c00010
 8005fe8:	50000600 	.word	0x50000600
 8005fec:	50000100 	.word	0x50000100
 8005ff0:	50000300 	.word	0x50000300
 8005ff4:	20000040 	.word	0x20000040
 8005ff8:	053e2d63 	.word	0x053e2d63
 8005ffc:	c7520000 	.word	0xc7520000
 8006000:	50000500 	.word	0x50000500
 8006004:	cb840000 	.word	0xcb840000

08006008 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08e      	sub	sp, #56	@ 0x38
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(pAnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));

  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006020:	d003      	beq.n	800602a <HAL_ADC_AnalogWDGConfig+0x22>
      (pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006026:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006030:	2b01      	cmp	r3, #1
 8006032:	d101      	bne.n	8006038 <HAL_ADC_AnalogWDGConfig+0x30>
 8006034:	2302      	movs	r3, #2
 8006036:	e1ea      	b.n	800640e <HAL_ADC_AnalogWDGConfig+0x406>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4618      	mov	r0, r3
 8006046:	f7fe fdd7 	bl	8004bf8 <LL_ADC_REG_IsConversionOngoing>
 800604a:	62b8      	str	r0, [r7, #40]	@ 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4618      	mov	r0, r3
 8006052:	f7fe fde4 	bl	8004c1e <LL_ADC_INJ_IsConversionOngoing>
 8006056:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605a:	2b00      	cmp	r3, #0
 800605c:	f040 8175 	bne.w	800634a <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006062:	2b00      	cmp	r3, #0
 8006064:	f040 8171 	bne.w	800634a <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a90      	ldr	r2, [pc, #576]	@ (80062b0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	f040 808d 	bne.w	800618e <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (pAnalogWDGConfig->WatchdogMode)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 800607c:	d034      	beq.n	80060e8 <HAL_ADC_AnalogWDGConfig+0xe0>
 800607e:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006082:	d856      	bhi.n	8006132 <HAL_ADC_AnalogWDGConfig+0x12a>
 8006084:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006088:	d04b      	beq.n	8006122 <HAL_ADC_AnalogWDGConfig+0x11a>
 800608a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800608e:	d850      	bhi.n	8006132 <HAL_ADC_AnalogWDGConfig+0x12a>
 8006090:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006094:	d01b      	beq.n	80060ce <HAL_ADC_AnalogWDGConfig+0xc6>
 8006096:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800609a:	d84a      	bhi.n	8006132 <HAL_ADC_AnalogWDGConfig+0x12a>
 800609c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060a0:	d037      	beq.n	8006112 <HAL_ADC_AnalogWDGConfig+0x10a>
 80060a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060a6:	d844      	bhi.n	8006132 <HAL_ADC_AnalogWDGConfig+0x12a>
 80060a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80060ac:	d029      	beq.n	8006102 <HAL_ADC_AnalogWDGConfig+0xfa>
 80060ae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80060b2:	d13e      	bne.n	8006132 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80060c0:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 80060c4:	461a      	mov	r2, r3
 80060c6:	497a      	ldr	r1, [pc, #488]	@ (80062b0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80060c8:	f7fe fca2 	bl	8004a10 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 80060cc:	e039      	b.n	8006142 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80060da:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 80060de:	461a      	mov	r2, r3
 80060e0:	4973      	ldr	r1, [pc, #460]	@ (80062b0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80060e2:	f7fe fc95 	bl	8004a10 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_INJECTED));
          break;
 80060e6:	e02c      	b.n	8006142 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80060f4:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
 80060f8:	461a      	mov	r2, r3
 80060fa:	496d      	ldr	r1, [pc, #436]	@ (80062b0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80060fc:	f7fe fc88 	bl	8004a10 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8006100:	e01f      	b.n	8006142 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a6b      	ldr	r2, [pc, #428]	@ (80062b4 <HAL_ADC_AnalogWDGConfig+0x2ac>)
 8006108:	4969      	ldr	r1, [pc, #420]	@ (80062b0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe fc80 	bl	8004a10 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006110:	e017      	b.n	8006142 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a68      	ldr	r2, [pc, #416]	@ (80062b8 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 8006118:	4965      	ldr	r1, [pc, #404]	@ (80062b0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800611a:	4618      	mov	r0, r3
 800611c:	f7fe fc78 	bl	8004a10 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006120:	e00f      	b.n	8006142 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a65      	ldr	r2, [pc, #404]	@ (80062bc <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8006128:	4961      	ldr	r1, [pc, #388]	@ (80062b0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe fc70 	bl	8004a10 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006130:	e007      	b.n	8006142 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2200      	movs	r2, #0
 8006138:	495d      	ldr	r1, [pc, #372]	@ (80062b0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe fc68 	bl	8004a10 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006140:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	699a      	ldr	r2, [r3, #24]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 pAnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800615c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4618      	mov	r0, r3
 800616a:	f7fe fd6b 	bl	8004c44 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	7b1b      	ldrb	r3, [r3, #12]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d105      	bne.n	8006182 <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	f7fe fd8b 	bl	8004c96 <LL_ADC_EnableIT_AWD1>
 8006180:	e0e3      	b.n	800634a <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f7fe fdb5 	bl	8004cf6 <LL_ADC_DisableIT_AWD1>
 800618c:	e0dd      	b.n	800634a <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006196:	d01d      	beq.n	80061d4 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8006198:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 800619c:	f200 8092 	bhi.w	80062c4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80061a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80061a4:	d07b      	beq.n	800629e <HAL_ADC_AnalogWDGConfig+0x296>
 80061a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80061aa:	f200 808b 	bhi.w	80062c4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80061ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80061b2:	d00f      	beq.n	80061d4 <HAL_ADC_AnalogWDGConfig+0x1cc>
 80061b4:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80061b8:	f200 8084 	bhi.w	80062c4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80061bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061c0:	d06d      	beq.n	800629e <HAL_ADC_AnalogWDGConfig+0x296>
 80061c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061c6:	d87d      	bhi.n	80062c4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80061c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061cc:	d067      	beq.n	800629e <HAL_ADC_AnalogWDGConfig+0x296>
 80061ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061d2:	d177      	bne.n	80062c4 <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a39      	ldr	r2, [pc, #228]	@ (80062c0 <HAL_ADC_AnalogWDGConfig+0x2b8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d12f      	bne.n	800623e <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR,
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d108      	bne.n	80061fc <HAL_ADC_AnalogWDGConfig+0x1f4>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	0e9b      	lsrs	r3, r3, #26
 80061f0:	f003 031f 	and.w	r3, r3, #31
 80061f4:	2201      	movs	r2, #1
 80061f6:	fa02 f303 	lsl.w	r3, r2, r3
 80061fa:	e016      	b.n	800622a <HAL_ADC_AnalogWDGConfig+0x222>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	fa93 f3a3 	rbit	r3, r3
 8006208:	61bb      	str	r3, [r7, #24]
  return result;
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 8006214:	2320      	movs	r3, #32
 8006216:	e003      	b.n	8006220 <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	fab3 f383 	clz	r3, r3
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f003 031f 	and.w	r3, r3, #31
 8006224:	2201      	movs	r2, #1
 8006226:	fa02 f303 	lsl.w	r3, r2, r3
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6812      	ldr	r2, [r2, #0]
 800622e:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6812      	ldr	r2, [r2, #0]
 8006236:	430b      	orrs	r3, r1
 8006238:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR,
                    (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 800623c:	e04b      	b.n	80062d6 <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR,
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006246:	2b00      	cmp	r3, #0
 8006248:	d108      	bne.n	800625c <HAL_ADC_AnalogWDGConfig+0x254>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	0e9b      	lsrs	r3, r3, #26
 8006250:	f003 031f 	and.w	r3, r3, #31
 8006254:	2201      	movs	r2, #1
 8006256:	fa02 f303 	lsl.w	r3, r2, r3
 800625a:	e016      	b.n	800628a <HAL_ADC_AnalogWDGConfig+0x282>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	fa93 f3a3 	rbit	r3, r3
 8006268:	60fb      	str	r3, [r7, #12]
  return result;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 8006274:	2320      	movs	r3, #32
 8006276:	e003      	b.n	8006280 <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	fab3 f383 	clz	r3, r3
 800627e:	b2db      	uxtb	r3, r3
 8006280:	f003 031f 	and.w	r3, r3, #31
 8006284:	2201      	movs	r2, #1
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6812      	ldr	r2, [r2, #0]
 800628e:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	6812      	ldr	r2, [r2, #0]
 8006296:	430b      	orrs	r3, r1
 8006298:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 800629c:	e01b      	b.n	80062d6 <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 80062a6:	4a05      	ldr	r2, [pc, #20]	@ (80062bc <HAL_ADC_AnalogWDGConfig+0x2b4>)
 80062a8:	4619      	mov	r1, r3
 80062aa:	f7fe fbb1 	bl	8004a10 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80062ae:	e012      	b.n	80062d6 <HAL_ADC_AnalogWDGConfig+0x2ce>
 80062b0:	7dc00000 	.word	0x7dc00000
 80062b4:	0087ffff 	.word	0x0087ffff
 80062b8:	0107ffff 	.word	0x0107ffff
 80062bc:	0187ffff 	.word	0x0187ffff
 80062c0:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6818      	ldr	r0, [r3, #0]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2200      	movs	r2, #0
 80062ce:	4619      	mov	r1, r3
 80062d0:	f7fe fb9e 	bl	8004a10 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80062d4:	bf00      	nop
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a4f      	ldr	r2, [pc, #316]	@ (8006418 <HAL_ADC_AnalogWDGConfig+0x410>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d11a      	bne.n	8006316 <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062e4:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7fe fcb4 	bl	8004c5e <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	7b1b      	ldrb	r3, [r3, #12]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d105      	bne.n	800630a <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4618      	mov	r0, r3
 8006304:	f7fe fcd7 	bl	8004cb6 <LL_ADC_EnableIT_AWD2>
 8006308:	e01f      	b.n	800634a <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f7fe fd01 	bl	8004d16 <LL_ADC_DisableIT_AWD2>
 8006314:	e019      	b.n	800634a <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800631a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe fca7 	bl	8004c7a <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	7b1b      	ldrb	r3, [r3, #12]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d105      	bne.n	8006340 <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4618      	mov	r0, r3
 800633a:	f7fe fccc 	bl	8004cd6 <LL_ADC_EnableIT_AWD3>
 800633e:	e004      	b.n	800634a <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f7fe fcf6 	bl	8004d36 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a33      	ldr	r2, [pc, #204]	@ (800641c <HAL_ADC_AnalogWDGConfig+0x414>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d118      	bne.n	8006386 <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	691a      	ldr	r2, [r3, #16]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	08db      	lsrs	r3, r3, #3
 8006360:	f003 0303 	and.w	r3, r3, #3
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	fa02 f303 	lsl.w	r3, r2, r3
 800636a:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	695a      	ldr	r2, [r3, #20]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	08db      	lsrs	r3, r3, #3
 8006378:	f003 0303 	and.w	r3, r3, #3
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	fa02 f303 	lsl.w	r3, r2, r3
 8006382:	633b      	str	r3, [r7, #48]	@ 0x30
 8006384:	e035      	b.n	80063f2 <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f003 0318 	and.w	r3, r3, #24
 8006390:	2b18      	cmp	r3, #24
 8006392:	d00f      	beq.n	80063b4 <HAL_ADC_AnalogWDGConfig+0x3ac>
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	691a      	ldr	r2, [r3, #16]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	08db      	lsrs	r3, r3, #3
 80063a0:	f003 0303 	and.w	r3, r3, #3
 80063a4:	f1c3 0302 	rsb	r3, r3, #2
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	f003 031e 	and.w	r3, r3, #30
 80063ae:	fa22 f303 	lsr.w	r3, r2, r3
 80063b2:	e002      	b.n	80063ba <HAL_ADC_AnalogWDGConfig+0x3b2>
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f003 0318 	and.w	r3, r3, #24
 80063c6:	2b18      	cmp	r3, #24
 80063c8:	d00f      	beq.n	80063ea <HAL_ADC_AnalogWDGConfig+0x3e2>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	695a      	ldr	r2, [r3, #20]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	08db      	lsrs	r3, r3, #3
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	f1c3 0302 	rsb	r3, r3, #2
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	f003 031e 	and.w	r3, r3, #30
 80063e4:	fa22 f303 	lsr.w	r3, r2, r3
 80063e8:	e002      	b.n	80063f0 <HAL_ADC_AnalogWDGConfig+0x3e8>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6818      	ldr	r0, [r3, #0]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6819      	ldr	r1, [r3, #0]
 80063fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063fe:	f7fe fb34 	bl	8004a6a <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800640a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800640e:	4618      	mov	r0, r3
 8006410:	3738      	adds	r7, #56	@ 0x38
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	0017ffff 	.word	0x0017ffff
 800641c:	7dc00000 	.word	0x7dc00000

08006420 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006428:	2300      	movs	r3, #0
 800642a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4618      	mov	r0, r3
 8006432:	f7fe fbba 	bl	8004baa <LL_ADC_IsEnabled>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d176      	bne.n	800652a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689a      	ldr	r2, [r3, #8]
 8006442:	4b3c      	ldr	r3, [pc, #240]	@ (8006534 <ADC_Enable+0x114>)
 8006444:	4013      	ands	r3, r2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00d      	beq.n	8006466 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800644e:	f043 0210 	orr.w	r2, r3, #16
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800645a:	f043 0201 	orr.w	r2, r3, #1
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e062      	b.n	800652c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4618      	mov	r0, r3
 800646c:	f7fe fb89 	bl	8004b82 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006478:	d004      	beq.n	8006484 <ADC_Enable+0x64>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a2e      	ldr	r2, [pc, #184]	@ (8006538 <ADC_Enable+0x118>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d101      	bne.n	8006488 <ADC_Enable+0x68>
 8006484:	4b2d      	ldr	r3, [pc, #180]	@ (800653c <ADC_Enable+0x11c>)
 8006486:	e000      	b.n	800648a <ADC_Enable+0x6a>
 8006488:	4b2d      	ldr	r3, [pc, #180]	@ (8006540 <ADC_Enable+0x120>)
 800648a:	4618      	mov	r0, r3
 800648c:	f7fe f972 	bl	8004774 <LL_ADC_GetCommonPathInternalCh>
 8006490:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006492:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006496:	2b00      	cmp	r3, #0
 8006498:	d013      	beq.n	80064c2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800649a:	4b2a      	ldr	r3, [pc, #168]	@ (8006544 <ADC_Enable+0x124>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	099b      	lsrs	r3, r3, #6
 80064a0:	4a29      	ldr	r2, [pc, #164]	@ (8006548 <ADC_Enable+0x128>)
 80064a2:	fba2 2303 	umull	r2, r3, r2, r3
 80064a6:	099b      	lsrs	r3, r3, #6
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	4613      	mov	r3, r2
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80064b4:	e002      	b.n	80064bc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f9      	bne.n	80064b6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80064c2:	f7fe f8df 	bl	8004684 <HAL_GetTick>
 80064c6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80064c8:	e028      	b.n	800651c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe fb6b 	bl	8004baa <LL_ADC_IsEnabled>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d104      	bne.n	80064e4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fb4f 	bl	8004b82 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80064e4:	f7fe f8ce 	bl	8004684 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d914      	bls.n	800651c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d00d      	beq.n	800651c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006504:	f043 0210 	orr.w	r2, r3, #16
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006510:	f043 0201 	orr.w	r2, r3, #1
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e007      	b.n	800652c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b01      	cmp	r3, #1
 8006528:	d1cf      	bne.n	80064ca <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	8000003f 	.word	0x8000003f
 8006538:	50000100 	.word	0x50000100
 800653c:	50000300 	.word	0x50000300
 8006540:	50000700 	.word	0x50000700
 8006544:	20000040 	.word	0x20000040
 8006548:	053e2d63 	.word	0x053e2d63

0800654c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006558:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800655e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006562:	2b00      	cmp	r3, #0
 8006564:	d14b      	bne.n	80065fe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800656a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0308 	and.w	r3, r3, #8
 800657c:	2b00      	cmp	r3, #0
 800657e:	d021      	beq.n	80065c4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4618      	mov	r0, r3
 8006586:	f7fe f9a1 	bl	80048cc <LL_ADC_REG_IsTriggerSourceSWStart>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d032      	beq.n	80065f6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d12b      	bne.n	80065f6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d11f      	bne.n	80065f6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ba:	f043 0201 	orr.w	r2, r3, #1
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80065c2:	e018      	b.n	80065f6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d111      	bne.n	80065f6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d105      	bne.n	80065f6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ee:	f043 0201 	orr.w	r2, r3, #1
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f7ff f89e 	bl	8005738 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80065fc:	e00e      	b.n	800661c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006602:	f003 0310 	and.w	r3, r3, #16
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f7ff f8b2 	bl	8005774 <HAL_ADC_ErrorCallback>
}
 8006610:	e004      	b.n	800661c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	4798      	blx	r3
}
 800661c:	bf00      	nop
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006630:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f7ff f88a 	bl	800574c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006638:	bf00      	nop
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006652:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800665e:	f043 0204 	orr.w	r2, r3, #4
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f7ff f884 	bl	8005774 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800666c:	bf00      	nop
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <LL_ADC_IsEnabled>:
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b01      	cmp	r3, #1
 8006686:	d101      	bne.n	800668c <LL_ADC_IsEnabled+0x18>
 8006688:	2301      	movs	r3, #1
 800668a:	e000      	b.n	800668e <LL_ADC_IsEnabled+0x1a>
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <LL_ADC_REG_IsConversionOngoing>:
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d101      	bne.n	80066b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80066ae:	2301      	movs	r3, #1
 80066b0:	e000      	b.n	80066b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006724:	b590      	push	{r4, r7, lr}
 8006726:	b0a1      	sub	sp, #132	@ 0x84
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800673a:	2b01      	cmp	r3, #1
 800673c:	d101      	bne.n	8006742 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800673e:	2302      	movs	r3, #2
 8006740:	e0e7      	b.n	8006912 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800674a:	2300      	movs	r3, #0
 800674c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800674e:	2300      	movs	r3, #0
 8006750:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800675a:	d102      	bne.n	8006762 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800675c:	4b6f      	ldr	r3, [pc, #444]	@ (800691c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800675e:	60bb      	str	r3, [r7, #8]
 8006760:	e009      	b.n	8006776 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a6e      	ldr	r2, [pc, #440]	@ (8006920 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d102      	bne.n	8006772 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800676c:	4b6d      	ldr	r3, [pc, #436]	@ (8006924 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800676e:	60bb      	str	r3, [r7, #8]
 8006770:	e001      	b.n	8006776 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006772:	2300      	movs	r3, #0
 8006774:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10b      	bne.n	8006794 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006780:	f043 0220 	orr.w	r2, r3, #32
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e0be      	b.n	8006912 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff ff7f 	bl	800669a <LL_ADC_REG_IsConversionOngoing>
 800679c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff ff79 	bl	800669a <LL_ADC_REG_IsConversionOngoing>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f040 80a0 	bne.w	80068f0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80067b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f040 809c 	bne.w	80068f0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067c0:	d004      	beq.n	80067cc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a55      	ldr	r2, [pc, #340]	@ (800691c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d101      	bne.n	80067d0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80067cc:	4b56      	ldr	r3, [pc, #344]	@ (8006928 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80067ce:	e000      	b.n	80067d2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80067d0:	4b56      	ldr	r3, [pc, #344]	@ (800692c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80067d2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d04b      	beq.n	8006874 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80067dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	6859      	ldr	r1, [r3, #4]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80067ee:	035b      	lsls	r3, r3, #13
 80067f0:	430b      	orrs	r3, r1
 80067f2:	431a      	orrs	r2, r3
 80067f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067f6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006800:	d004      	beq.n	800680c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a45      	ldr	r2, [pc, #276]	@ (800691c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d10f      	bne.n	800682c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800680c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006810:	f7ff ff30 	bl	8006674 <LL_ADC_IsEnabled>
 8006814:	4604      	mov	r4, r0
 8006816:	4841      	ldr	r0, [pc, #260]	@ (800691c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006818:	f7ff ff2c 	bl	8006674 <LL_ADC_IsEnabled>
 800681c:	4603      	mov	r3, r0
 800681e:	4323      	orrs	r3, r4
 8006820:	2b00      	cmp	r3, #0
 8006822:	bf0c      	ite	eq
 8006824:	2301      	moveq	r3, #1
 8006826:	2300      	movne	r3, #0
 8006828:	b2db      	uxtb	r3, r3
 800682a:	e012      	b.n	8006852 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800682c:	483c      	ldr	r0, [pc, #240]	@ (8006920 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800682e:	f7ff ff21 	bl	8006674 <LL_ADC_IsEnabled>
 8006832:	4604      	mov	r4, r0
 8006834:	483b      	ldr	r0, [pc, #236]	@ (8006924 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006836:	f7ff ff1d 	bl	8006674 <LL_ADC_IsEnabled>
 800683a:	4603      	mov	r3, r0
 800683c:	431c      	orrs	r4, r3
 800683e:	483c      	ldr	r0, [pc, #240]	@ (8006930 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006840:	f7ff ff18 	bl	8006674 <LL_ADC_IsEnabled>
 8006844:	4603      	mov	r3, r0
 8006846:	4323      	orrs	r3, r4
 8006848:	2b00      	cmp	r3, #0
 800684a:	bf0c      	ite	eq
 800684c:	2301      	moveq	r3, #1
 800684e:	2300      	movne	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d056      	beq.n	8006904 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006856:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800685e:	f023 030f 	bic.w	r3, r3, #15
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	6811      	ldr	r1, [r2, #0]
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	6892      	ldr	r2, [r2, #8]
 800686a:	430a      	orrs	r2, r1
 800686c:	431a      	orrs	r2, r3
 800686e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006870:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006872:	e047      	b.n	8006904 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006874:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800687c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800687e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006888:	d004      	beq.n	8006894 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a23      	ldr	r2, [pc, #140]	@ (800691c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d10f      	bne.n	80068b4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006894:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006898:	f7ff feec 	bl	8006674 <LL_ADC_IsEnabled>
 800689c:	4604      	mov	r4, r0
 800689e:	481f      	ldr	r0, [pc, #124]	@ (800691c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80068a0:	f7ff fee8 	bl	8006674 <LL_ADC_IsEnabled>
 80068a4:	4603      	mov	r3, r0
 80068a6:	4323      	orrs	r3, r4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	bf0c      	ite	eq
 80068ac:	2301      	moveq	r3, #1
 80068ae:	2300      	movne	r3, #0
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	e012      	b.n	80068da <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80068b4:	481a      	ldr	r0, [pc, #104]	@ (8006920 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80068b6:	f7ff fedd 	bl	8006674 <LL_ADC_IsEnabled>
 80068ba:	4604      	mov	r4, r0
 80068bc:	4819      	ldr	r0, [pc, #100]	@ (8006924 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80068be:	f7ff fed9 	bl	8006674 <LL_ADC_IsEnabled>
 80068c2:	4603      	mov	r3, r0
 80068c4:	431c      	orrs	r4, r3
 80068c6:	481a      	ldr	r0, [pc, #104]	@ (8006930 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80068c8:	f7ff fed4 	bl	8006674 <LL_ADC_IsEnabled>
 80068cc:	4603      	mov	r3, r0
 80068ce:	4323      	orrs	r3, r4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	bf0c      	ite	eq
 80068d4:	2301      	moveq	r3, #1
 80068d6:	2300      	movne	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d012      	beq.n	8006904 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80068de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80068e6:	f023 030f 	bic.w	r3, r3, #15
 80068ea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80068ec:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80068ee:	e009      	b.n	8006904 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f4:	f043 0220 	orr.w	r2, r3, #32
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006902:	e000      	b.n	8006906 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006904:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800690e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006912:	4618      	mov	r0, r3
 8006914:	3784      	adds	r7, #132	@ 0x84
 8006916:	46bd      	mov	sp, r7
 8006918:	bd90      	pop	{r4, r7, pc}
 800691a:	bf00      	nop
 800691c:	50000100 	.word	0x50000100
 8006920:	50000400 	.word	0x50000400
 8006924:	50000500 	.word	0x50000500
 8006928:	50000300 	.word	0x50000300
 800692c:	50000700 	.word	0x50000700
 8006930:	50000600 	.word	0x50000600

08006934 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800693c:	4b05      	ldr	r3, [pc, #20]	@ (8006954 <LL_EXTI_EnableIT_0_31+0x20>)
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	4904      	ldr	r1, [pc, #16]	@ (8006954 <LL_EXTI_EnableIT_0_31+0x20>)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4313      	orrs	r3, r2
 8006946:	600b      	str	r3, [r1, #0]
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	40010400 	.word	0x40010400

08006958 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006960:	4b05      	ldr	r3, [pc, #20]	@ (8006978 <LL_EXTI_EnableIT_32_63+0x20>)
 8006962:	6a1a      	ldr	r2, [r3, #32]
 8006964:	4904      	ldr	r1, [pc, #16]	@ (8006978 <LL_EXTI_EnableIT_32_63+0x20>)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4313      	orrs	r3, r2
 800696a:	620b      	str	r3, [r1, #32]
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	40010400 	.word	0x40010400

0800697c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006984:	4b06      	ldr	r3, [pc, #24]	@ (80069a0 <LL_EXTI_DisableIT_0_31+0x24>)
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	43db      	mvns	r3, r3
 800698c:	4904      	ldr	r1, [pc, #16]	@ (80069a0 <LL_EXTI_DisableIT_0_31+0x24>)
 800698e:	4013      	ands	r3, r2
 8006990:	600b      	str	r3, [r1, #0]
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	40010400 	.word	0x40010400

080069a4 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80069ac:	4b06      	ldr	r3, [pc, #24]	@ (80069c8 <LL_EXTI_DisableIT_32_63+0x24>)
 80069ae:	6a1a      	ldr	r2, [r3, #32]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	43db      	mvns	r3, r3
 80069b4:	4904      	ldr	r1, [pc, #16]	@ (80069c8 <LL_EXTI_DisableIT_32_63+0x24>)
 80069b6:	4013      	ands	r3, r2
 80069b8:	620b      	str	r3, [r1, #32]
}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	40010400 	.word	0x40010400

080069cc <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80069d4:	4b05      	ldr	r3, [pc, #20]	@ (80069ec <LL_EXTI_EnableEvent_0_31+0x20>)
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	4904      	ldr	r1, [pc, #16]	@ (80069ec <LL_EXTI_EnableEvent_0_31+0x20>)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4313      	orrs	r3, r2
 80069de:	604b      	str	r3, [r1, #4]

}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	40010400 	.word	0x40010400

080069f0 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80069f8:	4b05      	ldr	r3, [pc, #20]	@ (8006a10 <LL_EXTI_EnableEvent_32_63+0x20>)
 80069fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069fc:	4904      	ldr	r1, [pc, #16]	@ (8006a10 <LL_EXTI_EnableEvent_32_63+0x20>)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	40010400 	.word	0x40010400

08006a14 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006a1c:	4b06      	ldr	r3, [pc, #24]	@ (8006a38 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	43db      	mvns	r3, r3
 8006a24:	4904      	ldr	r1, [pc, #16]	@ (8006a38 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006a26:	4013      	ands	r3, r2
 8006a28:	604b      	str	r3, [r1, #4]
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	40010400 	.word	0x40010400

08006a3c <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8006a44:	4b06      	ldr	r3, [pc, #24]	@ (8006a60 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006a46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	43db      	mvns	r3, r3
 8006a4c:	4904      	ldr	r1, [pc, #16]	@ (8006a60 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006a52:	bf00      	nop
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	40010400 	.word	0x40010400

08006a64 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006a6c:	4b05      	ldr	r3, [pc, #20]	@ (8006a84 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	4904      	ldr	r1, [pc, #16]	@ (8006a84 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	608b      	str	r3, [r1, #8]

}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	40010400 	.word	0x40010400

08006a88 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006a90:	4b05      	ldr	r3, [pc, #20]	@ (8006aa8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006a92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a94:	4904      	ldr	r1, [pc, #16]	@ (8006aa8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	40010400 	.word	0x40010400

08006aac <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006ab4:	4b06      	ldr	r3, [pc, #24]	@ (8006ad0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	43db      	mvns	r3, r3
 8006abc:	4904      	ldr	r1, [pc, #16]	@ (8006ad0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006abe:	4013      	ands	r3, r2
 8006ac0:	608b      	str	r3, [r1, #8]

}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40010400 	.word	0x40010400

08006ad4 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8006adc:	4b06      	ldr	r3, [pc, #24]	@ (8006af8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006ade:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	43db      	mvns	r3, r3
 8006ae4:	4904      	ldr	r1, [pc, #16]	@ (8006af8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	40010400 	.word	0x40010400

08006afc <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006b04:	4b05      	ldr	r3, [pc, #20]	@ (8006b1c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006b06:	68da      	ldr	r2, [r3, #12]
 8006b08:	4904      	ldr	r1, [pc, #16]	@ (8006b1c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60cb      	str	r3, [r1, #12]
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	40010400 	.word	0x40010400

08006b20 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8006b28:	4b05      	ldr	r3, [pc, #20]	@ (8006b40 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b2c:	4904      	ldr	r1, [pc, #16]	@ (8006b40 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	40010400 	.word	0x40010400

08006b44 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006b4c:	4b06      	ldr	r3, [pc, #24]	@ (8006b68 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006b4e:	68da      	ldr	r2, [r3, #12]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	43db      	mvns	r3, r3
 8006b54:	4904      	ldr	r1, [pc, #16]	@ (8006b68 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006b56:	4013      	ands	r3, r2
 8006b58:	60cb      	str	r3, [r1, #12]
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40010400 	.word	0x40010400

08006b6c <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8006b74:	4b06      	ldr	r3, [pc, #24]	@ (8006b90 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	43db      	mvns	r3, r3
 8006b7c:	4904      	ldr	r1, [pc, #16]	@ (8006b90 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006b7e:	4013      	ands	r3, r2
 8006b80:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	40010400 	.word	0x40010400

08006b94 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006b9c:	4a04      	ldr	r2, [pc, #16]	@ (8006bb0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6153      	str	r3, [r2, #20]
}
 8006ba2:	bf00      	nop
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	40010400 	.word	0x40010400

08006bb4 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8006bbc:	4a04      	ldr	r2, [pc, #16]	@ (8006bd0 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8006bc2:	bf00      	nop
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40010400 	.word	0x40010400

08006bd4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d102      	bne.n	8006bf0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	77fb      	strb	r3, [r7, #31]
 8006bee:	e181      	b.n	8006ef4 <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bfe:	d102      	bne.n	8006c06 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	77fb      	strb	r3, [r7, #31]
 8006c04:	e176      	b.n	8006ef4 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	7f5b      	ldrb	r3, [r3, #29]
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d108      	bne.n	8006c22 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7fc fcd7 	bl	80035d0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c2c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b90      	ldr	r3, [pc, #576]	@ (8006e94 <HAL_COMP_Init+0x2c0>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6812      	ldr	r2, [r2, #0]
 8006c5a:	6979      	ldr	r1, [r7, #20]
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d016      	beq.n	8006c9c <HAL_COMP_Init+0xc8>
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d113      	bne.n	8006c9c <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006c74:	4b88      	ldr	r3, [pc, #544]	@ (8006e98 <HAL_COMP_Init+0x2c4>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	099b      	lsrs	r3, r3, #6
 8006c7a:	4a88      	ldr	r2, [pc, #544]	@ (8006e9c <HAL_COMP_Init+0x2c8>)
 8006c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c80:	099b      	lsrs	r3, r3, #6
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8006c8e:	e002      	b.n	8006c96 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1f9      	bne.n	8006c90 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a7f      	ldr	r2, [pc, #508]	@ (8006ea0 <HAL_COMP_Init+0x2cc>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d028      	beq.n	8006cf8 <HAL_COMP_Init+0x124>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a7e      	ldr	r2, [pc, #504]	@ (8006ea4 <HAL_COMP_Init+0x2d0>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d020      	beq.n	8006cf2 <HAL_COMP_Init+0x11e>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a7c      	ldr	r2, [pc, #496]	@ (8006ea8 <HAL_COMP_Init+0x2d4>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d018      	beq.n	8006cec <HAL_COMP_Init+0x118>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a7b      	ldr	r2, [pc, #492]	@ (8006eac <HAL_COMP_Init+0x2d8>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d010      	beq.n	8006ce6 <HAL_COMP_Init+0x112>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a79      	ldr	r2, [pc, #484]	@ (8006eb0 <HAL_COMP_Init+0x2dc>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d008      	beq.n	8006ce0 <HAL_COMP_Init+0x10c>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a78      	ldr	r2, [pc, #480]	@ (8006eb4 <HAL_COMP_Init+0x2e0>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d101      	bne.n	8006cdc <HAL_COMP_Init+0x108>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e00f      	b.n	8006cfc <HAL_COMP_Init+0x128>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e00d      	b.n	8006cfc <HAL_COMP_Init+0x128>
 8006ce0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006ce4:	e00a      	b.n	8006cfc <HAL_COMP_Init+0x128>
 8006ce6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006cea:	e007      	b.n	8006cfc <HAL_COMP_Init+0x128>
 8006cec:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006cf0:	e004      	b.n	8006cfc <HAL_COMP_Init+0x128>
 8006cf2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006cf6:	e001      	b.n	8006cfc <HAL_COMP_Init+0x128>
 8006cf8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006cfc:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	f003 0303 	and.w	r3, r3, #3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 80b6 	beq.w	8006e78 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	f003 0310 	and.w	r3, r3, #16
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d011      	beq.n	8006d3c <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a65      	ldr	r2, [pc, #404]	@ (8006eb4 <HAL_COMP_Init+0x2e0>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d004      	beq.n	8006d2c <HAL_COMP_Init+0x158>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a64      	ldr	r2, [pc, #400]	@ (8006eb8 <HAL_COMP_Init+0x2e4>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d103      	bne.n	8006d34 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8006d2c:	6938      	ldr	r0, [r7, #16]
 8006d2e:	f7ff feab 	bl	8006a88 <LL_EXTI_EnableRisingTrig_32_63>
 8006d32:	e014      	b.n	8006d5e <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8006d34:	6938      	ldr	r0, [r7, #16]
 8006d36:	f7ff fe95 	bl	8006a64 <LL_EXTI_EnableRisingTrig_0_31>
 8006d3a:	e010      	b.n	8006d5e <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a5c      	ldr	r2, [pc, #368]	@ (8006eb4 <HAL_COMP_Init+0x2e0>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d004      	beq.n	8006d50 <HAL_COMP_Init+0x17c>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a5b      	ldr	r2, [pc, #364]	@ (8006eb8 <HAL_COMP_Init+0x2e4>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d103      	bne.n	8006d58 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8006d50:	6938      	ldr	r0, [r7, #16]
 8006d52:	f7ff febf 	bl	8006ad4 <LL_EXTI_DisableRisingTrig_32_63>
 8006d56:	e002      	b.n	8006d5e <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8006d58:	6938      	ldr	r0, [r7, #16]
 8006d5a:	f7ff fea7 	bl	8006aac <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	f003 0320 	and.w	r3, r3, #32
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d011      	beq.n	8006d8e <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a51      	ldr	r2, [pc, #324]	@ (8006eb4 <HAL_COMP_Init+0x2e0>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d004      	beq.n	8006d7e <HAL_COMP_Init+0x1aa>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a4f      	ldr	r2, [pc, #316]	@ (8006eb8 <HAL_COMP_Init+0x2e4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d103      	bne.n	8006d86 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8006d7e:	6938      	ldr	r0, [r7, #16]
 8006d80:	f7ff fece 	bl	8006b20 <LL_EXTI_EnableFallingTrig_32_63>
 8006d84:	e014      	b.n	8006db0 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8006d86:	6938      	ldr	r0, [r7, #16]
 8006d88:	f7ff feb8 	bl	8006afc <LL_EXTI_EnableFallingTrig_0_31>
 8006d8c:	e010      	b.n	8006db0 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a48      	ldr	r2, [pc, #288]	@ (8006eb4 <HAL_COMP_Init+0x2e0>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d004      	beq.n	8006da2 <HAL_COMP_Init+0x1ce>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a46      	ldr	r2, [pc, #280]	@ (8006eb8 <HAL_COMP_Init+0x2e4>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d103      	bne.n	8006daa <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8006da2:	6938      	ldr	r0, [r7, #16]
 8006da4:	f7ff fee2 	bl	8006b6c <LL_EXTI_DisableFallingTrig_32_63>
 8006da8:	e002      	b.n	8006db0 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8006daa:	6938      	ldr	r0, [r7, #16]
 8006dac:	f7ff feca 	bl	8006b44 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a3f      	ldr	r2, [pc, #252]	@ (8006eb4 <HAL_COMP_Init+0x2e0>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d004      	beq.n	8006dc4 <HAL_COMP_Init+0x1f0>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a3e      	ldr	r2, [pc, #248]	@ (8006eb8 <HAL_COMP_Init+0x2e4>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d103      	bne.n	8006dcc <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8006dc4:	6938      	ldr	r0, [r7, #16]
 8006dc6:	f7ff fef5 	bl	8006bb4 <LL_EXTI_ClearFlag_32_63>
 8006dca:	e002      	b.n	8006dd2 <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8006dcc:	6938      	ldr	r0, [r7, #16]
 8006dce:	f7ff fee1 	bl	8006b94 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d011      	beq.n	8006e02 <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a34      	ldr	r2, [pc, #208]	@ (8006eb4 <HAL_COMP_Init+0x2e0>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d004      	beq.n	8006df2 <HAL_COMP_Init+0x21e>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a32      	ldr	r2, [pc, #200]	@ (8006eb8 <HAL_COMP_Init+0x2e4>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d103      	bne.n	8006dfa <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8006df2:	6938      	ldr	r0, [r7, #16]
 8006df4:	f7ff fdfc 	bl	80069f0 <LL_EXTI_EnableEvent_32_63>
 8006df8:	e014      	b.n	8006e24 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8006dfa:	6938      	ldr	r0, [r7, #16]
 8006dfc:	f7ff fde6 	bl	80069cc <LL_EXTI_EnableEvent_0_31>
 8006e00:	e010      	b.n	8006e24 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a2b      	ldr	r2, [pc, #172]	@ (8006eb4 <HAL_COMP_Init+0x2e0>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d004      	beq.n	8006e16 <HAL_COMP_Init+0x242>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a29      	ldr	r2, [pc, #164]	@ (8006eb8 <HAL_COMP_Init+0x2e4>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d103      	bne.n	8006e1e <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8006e16:	6938      	ldr	r0, [r7, #16]
 8006e18:	f7ff fe10 	bl	8006a3c <LL_EXTI_DisableEvent_32_63>
 8006e1c:	e002      	b.n	8006e24 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8006e1e:	6938      	ldr	r0, [r7, #16]
 8006e20:	f7ff fdf8 	bl	8006a14 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d011      	beq.n	8006e54 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a1f      	ldr	r2, [pc, #124]	@ (8006eb4 <HAL_COMP_Init+0x2e0>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d004      	beq.n	8006e44 <HAL_COMP_Init+0x270>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8006eb8 <HAL_COMP_Init+0x2e4>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d103      	bne.n	8006e4c <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8006e44:	6938      	ldr	r0, [r7, #16]
 8006e46:	f7ff fd87 	bl	8006958 <LL_EXTI_EnableIT_32_63>
 8006e4a:	e04b      	b.n	8006ee4 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8006e4c:	6938      	ldr	r0, [r7, #16]
 8006e4e:	f7ff fd71 	bl	8006934 <LL_EXTI_EnableIT_0_31>
 8006e52:	e047      	b.n	8006ee4 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a16      	ldr	r2, [pc, #88]	@ (8006eb4 <HAL_COMP_Init+0x2e0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d004      	beq.n	8006e68 <HAL_COMP_Init+0x294>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a15      	ldr	r2, [pc, #84]	@ (8006eb8 <HAL_COMP_Init+0x2e4>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d103      	bne.n	8006e70 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8006e68:	6938      	ldr	r0, [r7, #16]
 8006e6a:	f7ff fd9b 	bl	80069a4 <LL_EXTI_DisableIT_32_63>
 8006e6e:	e039      	b.n	8006ee4 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8006e70:	6938      	ldr	r0, [r7, #16]
 8006e72:	f7ff fd83 	bl	800697c <LL_EXTI_DisableIT_0_31>
 8006e76:	e035      	b.n	8006ee4 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8006eb4 <HAL_COMP_Init+0x2e0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d004      	beq.n	8006e8c <HAL_COMP_Init+0x2b8>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a0c      	ldr	r2, [pc, #48]	@ (8006eb8 <HAL_COMP_Init+0x2e4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d117      	bne.n	8006ebc <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8006e8c:	6938      	ldr	r0, [r7, #16]
 8006e8e:	f7ff fdd5 	bl	8006a3c <LL_EXTI_DisableEvent_32_63>
 8006e92:	e016      	b.n	8006ec2 <HAL_COMP_Init+0x2ee>
 8006e94:	ff007e0f 	.word	0xff007e0f
 8006e98:	20000040 	.word	0x20000040
 8006e9c:	053e2d63 	.word	0x053e2d63
 8006ea0:	40010200 	.word	0x40010200
 8006ea4:	40010204 	.word	0x40010204
 8006ea8:	40010208 	.word	0x40010208
 8006eac:	4001020c 	.word	0x4001020c
 8006eb0:	40010210 	.word	0x40010210
 8006eb4:	40010214 	.word	0x40010214
 8006eb8:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8006ebc:	6938      	ldr	r0, [r7, #16]
 8006ebe:	f7ff fda9 	bl	8006a14 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8006f00 <HAL_COMP_Init+0x32c>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d004      	beq.n	8006ed6 <HAL_COMP_Init+0x302>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a0c      	ldr	r2, [pc, #48]	@ (8006f04 <HAL_COMP_Init+0x330>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d103      	bne.n	8006ede <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8006ed6:	6938      	ldr	r0, [r7, #16]
 8006ed8:	f7ff fd64 	bl	80069a4 <LL_EXTI_DisableIT_32_63>
 8006edc:	e002      	b.n	8006ee4 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8006ede:	6938      	ldr	r0, [r7, #16]
 8006ee0:	f7ff fd4c 	bl	800697c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	7f5b      	ldrb	r3, [r3, #29]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d102      	bne.n	8006ef4 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8006ef4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3720      	adds	r7, #32
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	40010214 	.word	0x40010214
 8006f04:	40010218 	.word	0x40010218

08006f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f003 0307 	and.w	r3, r3, #7
 8006f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f18:	4b0c      	ldr	r3, [pc, #48]	@ (8006f4c <__NVIC_SetPriorityGrouping+0x44>)
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006f24:	4013      	ands	r3, r2
 8006f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f3a:	4a04      	ldr	r2, [pc, #16]	@ (8006f4c <__NVIC_SetPriorityGrouping+0x44>)
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	60d3      	str	r3, [r2, #12]
}
 8006f40:	bf00      	nop
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	e000ed00 	.word	0xe000ed00

08006f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f54:	4b04      	ldr	r3, [pc, #16]	@ (8006f68 <__NVIC_GetPriorityGrouping+0x18>)
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	0a1b      	lsrs	r3, r3, #8
 8006f5a:	f003 0307 	and.w	r3, r3, #7
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	e000ed00 	.word	0xe000ed00

08006f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	db0b      	blt.n	8006f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f7e:	79fb      	ldrb	r3, [r7, #7]
 8006f80:	f003 021f 	and.w	r2, r3, #31
 8006f84:	4907      	ldr	r1, [pc, #28]	@ (8006fa4 <__NVIC_EnableIRQ+0x38>)
 8006f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f8a:	095b      	lsrs	r3, r3, #5
 8006f8c:	2001      	movs	r0, #1
 8006f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8006f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	e000e100 	.word	0xe000e100

08006fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	6039      	str	r1, [r7, #0]
 8006fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	db0a      	blt.n	8006fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	490c      	ldr	r1, [pc, #48]	@ (8006ff4 <__NVIC_SetPriority+0x4c>)
 8006fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fc6:	0112      	lsls	r2, r2, #4
 8006fc8:	b2d2      	uxtb	r2, r2
 8006fca:	440b      	add	r3, r1
 8006fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006fd0:	e00a      	b.n	8006fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	4908      	ldr	r1, [pc, #32]	@ (8006ff8 <__NVIC_SetPriority+0x50>)
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	f003 030f 	and.w	r3, r3, #15
 8006fde:	3b04      	subs	r3, #4
 8006fe0:	0112      	lsls	r2, r2, #4
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	440b      	add	r3, r1
 8006fe6:	761a      	strb	r2, [r3, #24]
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	e000e100 	.word	0xe000e100
 8006ff8:	e000ed00 	.word	0xe000ed00

08006ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b089      	sub	sp, #36	@ 0x24
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	f1c3 0307 	rsb	r3, r3, #7
 8007016:	2b04      	cmp	r3, #4
 8007018:	bf28      	it	cs
 800701a:	2304      	movcs	r3, #4
 800701c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	3304      	adds	r3, #4
 8007022:	2b06      	cmp	r3, #6
 8007024:	d902      	bls.n	800702c <NVIC_EncodePriority+0x30>
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	3b03      	subs	r3, #3
 800702a:	e000      	b.n	800702e <NVIC_EncodePriority+0x32>
 800702c:	2300      	movs	r3, #0
 800702e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007030:	f04f 32ff 	mov.w	r2, #4294967295
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	fa02 f303 	lsl.w	r3, r2, r3
 800703a:	43da      	mvns	r2, r3
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	401a      	ands	r2, r3
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007044:	f04f 31ff 	mov.w	r1, #4294967295
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	fa01 f303 	lsl.w	r3, r1, r3
 800704e:	43d9      	mvns	r1, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007054:	4313      	orrs	r3, r2
         );
}
 8007056:	4618      	mov	r0, r3
 8007058:	3724      	adds	r7, #36	@ 0x24
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
	...

08007064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3b01      	subs	r3, #1
 8007070:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007074:	d301      	bcc.n	800707a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007076:	2301      	movs	r3, #1
 8007078:	e00f      	b.n	800709a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800707a:	4a0a      	ldr	r2, [pc, #40]	@ (80070a4 <SysTick_Config+0x40>)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3b01      	subs	r3, #1
 8007080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007082:	210f      	movs	r1, #15
 8007084:	f04f 30ff 	mov.w	r0, #4294967295
 8007088:	f7ff ff8e 	bl	8006fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800708c:	4b05      	ldr	r3, [pc, #20]	@ (80070a4 <SysTick_Config+0x40>)
 800708e:	2200      	movs	r2, #0
 8007090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007092:	4b04      	ldr	r3, [pc, #16]	@ (80070a4 <SysTick_Config+0x40>)
 8007094:	2207      	movs	r2, #7
 8007096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	e000e010 	.word	0xe000e010

080070a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7ff ff29 	bl	8006f08 <__NVIC_SetPriorityGrouping>
}
 80070b6:	bf00      	nop
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b086      	sub	sp, #24
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	4603      	mov	r3, r0
 80070c6:	60b9      	str	r1, [r7, #8]
 80070c8:	607a      	str	r2, [r7, #4]
 80070ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80070cc:	f7ff ff40 	bl	8006f50 <__NVIC_GetPriorityGrouping>
 80070d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	68b9      	ldr	r1, [r7, #8]
 80070d6:	6978      	ldr	r0, [r7, #20]
 80070d8:	f7ff ff90 	bl	8006ffc <NVIC_EncodePriority>
 80070dc:	4602      	mov	r2, r0
 80070de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070e2:	4611      	mov	r1, r2
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7ff ff5f 	bl	8006fa8 <__NVIC_SetPriority>
}
 80070ea:	bf00      	nop
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b082      	sub	sp, #8
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	4603      	mov	r3, r0
 80070fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80070fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff ff33 	bl	8006f6c <__NVIC_EnableIRQ>
}
 8007106:	bf00      	nop
 8007108:	3708      	adds	r7, #8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b082      	sub	sp, #8
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7ff ffa4 	bl	8007064 <SysTick_Config>
 800711c:	4603      	mov	r3, r0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b082      	sub	sp, #8
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e014      	b.n	8007162 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	791b      	ldrb	r3, [r3, #4]
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d105      	bne.n	800714e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7fc fa97 	bl	800367c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2202      	movs	r2, #2
 8007152:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e056      	b.n	800722e <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	795b      	ldrb	r3, [r3, #5]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d101      	bne.n	800718c <HAL_DAC_Start+0x20>
 8007188:	2302      	movs	r3, #2
 800718a:	e050      	b.n	800722e <HAL_DAC_Start+0xc2>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2202      	movs	r2, #2
 8007196:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6819      	ldr	r1, [r3, #0]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	f003 0310 	and.w	r3, r3, #16
 80071a4:	2201      	movs	r2, #1
 80071a6:	409a      	lsls	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	430a      	orrs	r2, r1
 80071ae:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80071b0:	4b22      	ldr	r3, [pc, #136]	@ (800723c <HAL_DAC_Start+0xd0>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	099b      	lsrs	r3, r3, #6
 80071b6:	4a22      	ldr	r2, [pc, #136]	@ (8007240 <HAL_DAC_Start+0xd4>)
 80071b8:	fba2 2303 	umull	r2, r3, r2, r3
 80071bc:	099b      	lsrs	r3, r3, #6
 80071be:	3301      	adds	r3, #1
 80071c0:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80071c2:	e002      	b.n	80071ca <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3b01      	subs	r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1f9      	bne.n	80071c4 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10f      	bne.n	80071f6 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d11d      	bne.n	8007220 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685a      	ldr	r2, [r3, #4]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f042 0201 	orr.w	r2, r2, #1
 80071f2:	605a      	str	r2, [r3, #4]
 80071f4:	e014      	b.n	8007220 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	f003 0310 	and.w	r3, r3, #16
 8007206:	2102      	movs	r1, #2
 8007208:	fa01 f303 	lsl.w	r3, r1, r3
 800720c:	429a      	cmp	r2, r3
 800720e:	d107      	bne.n	8007220 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0202 	orr.w	r2, r2, #2
 800721e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	20000040 	.word	0x20000040
 8007240:	053e2d63 	.word	0x053e2d63

08007244 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007252:	2300      	movs	r3, #0
 8007254:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e018      	b.n	8007292 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d105      	bne.n	800727e <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4413      	add	r3, r2
 8007278:	3308      	adds	r3, #8
 800727a:	617b      	str	r3, [r7, #20]
 800727c:	e004      	b.n	8007288 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4413      	add	r3, r2
 8007284:	3314      	adds	r3, #20
 8007286:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	461a      	mov	r2, r3
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
	...

080072a0 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b08a      	sub	sp, #40	@ 0x28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d002      	beq.n	80072bc <HAL_DAC_ConfigChannel+0x1c>
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e1a1      	b.n	8007604 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	795b      	ldrb	r3, [r3, #5]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d101      	bne.n	80072d2 <HAL_DAC_ConfigChannel+0x32>
 80072ce:	2302      	movs	r3, #2
 80072d0:	e198      	b.n	8007604 <HAL_DAC_ConfigChannel+0x364>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2201      	movs	r2, #1
 80072d6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2202      	movs	r2, #2
 80072dc:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	2b04      	cmp	r3, #4
 80072e4:	d17a      	bne.n	80073dc <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80072e6:	f7fd f9cd 	bl	8004684 <HAL_GetTick>
 80072ea:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d13d      	bne.n	800736e <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80072f2:	e018      	b.n	8007326 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80072f4:	f7fd f9c6 	bl	8004684 <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d911      	bls.n	8007326 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007308:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00a      	beq.n	8007326 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	f043 0208 	orr.w	r2, r3, #8
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2203      	movs	r2, #3
 8007320:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e16e      	b.n	8007604 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800732c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1df      	bne.n	80072f4 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800733c:	641a      	str	r2, [r3, #64]	@ 0x40
 800733e:	e020      	b.n	8007382 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007340:	f7fd f9a0 	bl	8004684 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b01      	cmp	r3, #1
 800734c:	d90f      	bls.n	800736e <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007354:	2b00      	cmp	r3, #0
 8007356:	da0a      	bge.n	800736e <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	f043 0208 	orr.w	r2, r3, #8
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2203      	movs	r2, #3
 8007368:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e14a      	b.n	8007604 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007374:	2b00      	cmp	r3, #0
 8007376:	dbe3      	blt.n	8007340 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007380:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f003 0310 	and.w	r3, r3, #16
 800738e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8007392:	fa01 f303 	lsl.w	r3, r1, r3
 8007396:	43db      	mvns	r3, r3
 8007398:	ea02 0103 	and.w	r1, r2, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f003 0310 	and.w	r3, r3, #16
 80073a6:	409a      	lsls	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f003 0310 	and.w	r3, r3, #16
 80073bc:	21ff      	movs	r1, #255	@ 0xff
 80073be:	fa01 f303 	lsl.w	r3, r1, r3
 80073c2:	43db      	mvns	r3, r3
 80073c4:	ea02 0103 	and.w	r1, r2, r3
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f003 0310 	and.w	r3, r3, #16
 80073d2:	409a      	lsls	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	430a      	orrs	r2, r1
 80073da:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d11d      	bne.n	8007420 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ea:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f003 0310 	and.w	r3, r3, #16
 80073f2:	221f      	movs	r2, #31
 80073f4:	fa02 f303 	lsl.w	r3, r2, r3
 80073f8:	43db      	mvns	r3, r3
 80073fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073fc:	4013      	ands	r3, r2
 80073fe:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f003 0310 	and.w	r3, r3, #16
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	fa02 f303 	lsl.w	r3, r2, r3
 8007412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007414:	4313      	orrs	r3, r2
 8007416:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800741e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007426:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f003 0310 	and.w	r3, r3, #16
 800742e:	2207      	movs	r2, #7
 8007430:	fa02 f303 	lsl.w	r3, r2, r3
 8007434:	43db      	mvns	r3, r3
 8007436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007438:	4013      	ands	r3, r2
 800743a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d102      	bne.n	800744a <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8007444:	2300      	movs	r3, #0
 8007446:	623b      	str	r3, [r7, #32]
 8007448:	e00f      	b.n	800746a <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	2b02      	cmp	r3, #2
 8007450:	d102      	bne.n	8007458 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007452:	2301      	movs	r3, #1
 8007454:	623b      	str	r3, [r7, #32]
 8007456:	e008      	b.n	800746a <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d102      	bne.n	8007466 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007460:	2301      	movs	r3, #1
 8007462:	623b      	str	r3, [r7, #32]
 8007464:	e001      	b.n	800746a <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007466:	2300      	movs	r3, #0
 8007468:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	689a      	ldr	r2, [r3, #8]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	4313      	orrs	r3, r2
 8007474:	6a3a      	ldr	r2, [r7, #32]
 8007476:	4313      	orrs	r3, r2
 8007478:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f003 0310 	and.w	r3, r3, #16
 8007480:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007484:	fa02 f303 	lsl.w	r3, r2, r3
 8007488:	43db      	mvns	r3, r3
 800748a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800748c:	4013      	ands	r3, r2
 800748e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	791b      	ldrb	r3, [r3, #4]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d102      	bne.n	800749e <HAL_DAC_ConfigChannel+0x1fe>
 8007498:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800749c:	e000      	b.n	80074a0 <HAL_DAC_ConfigChannel+0x200>
 800749e:	2300      	movs	r3, #0
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f003 0310 	and.w	r3, r3, #16
 80074ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074b0:	fa02 f303 	lsl.w	r3, r2, r3
 80074b4:	43db      	mvns	r3, r3
 80074b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074b8:	4013      	ands	r3, r2
 80074ba:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	795b      	ldrb	r3, [r3, #5]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d102      	bne.n	80074ca <HAL_DAC_ConfigChannel+0x22a>
 80074c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074c8:	e000      	b.n	80074cc <HAL_DAC_ConfigChannel+0x22c>
 80074ca:	2300      	movs	r3, #0
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80074d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80074d8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d114      	bne.n	800750c <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80074e2:	f004 fd3d 	bl	800bf60 <HAL_RCC_GetHCLKFreq>
 80074e6:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	4a48      	ldr	r2, [pc, #288]	@ (800760c <HAL_DAC_ConfigChannel+0x36c>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d904      	bls.n	80074fa <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80074f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80074f8:	e00f      	b.n	800751a <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	4a44      	ldr	r2, [pc, #272]	@ (8007610 <HAL_DAC_ConfigChannel+0x370>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d90a      	bls.n	8007518 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007504:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007508:	627b      	str	r3, [r7, #36]	@ 0x24
 800750a:	e006      	b.n	800751a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007512:	4313      	orrs	r3, r2
 8007514:	627b      	str	r3, [r7, #36]	@ 0x24
 8007516:	e000      	b.n	800751a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8007518:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f003 0310 	and.w	r3, r3, #16
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	fa02 f303 	lsl.w	r3, r2, r3
 8007526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007528:	4313      	orrs	r3, r2
 800752a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007532:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6819      	ldr	r1, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f003 0310 	and.w	r3, r3, #16
 8007540:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007544:	fa02 f303 	lsl.w	r3, r2, r3
 8007548:	43da      	mvns	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	400a      	ands	r2, r1
 8007550:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f003 0310 	and.w	r3, r3, #16
 8007560:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8007564:	fa02 f303 	lsl.w	r3, r2, r3
 8007568:	43db      	mvns	r3, r3
 800756a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800756c:	4013      	ands	r3, r2
 800756e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f003 0310 	and.w	r3, r3, #16
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	fa02 f303 	lsl.w	r3, r2, r3
 8007582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007584:	4313      	orrs	r3, r2
 8007586:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800758e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6819      	ldr	r1, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f003 0310 	and.w	r3, r3, #16
 800759c:	22c0      	movs	r2, #192	@ 0xc0
 800759e:	fa02 f303 	lsl.w	r3, r2, r3
 80075a2:	43da      	mvns	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	400a      	ands	r2, r1
 80075aa:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	089b      	lsrs	r3, r3, #2
 80075b2:	f003 030f 	and.w	r3, r3, #15
 80075b6:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	089b      	lsrs	r3, r3, #2
 80075be:	021b      	lsls	r3, r3, #8
 80075c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f003 0310 	and.w	r3, r3, #16
 80075d6:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80075da:	fa01 f303 	lsl.w	r3, r1, r3
 80075de:	43db      	mvns	r3, r3
 80075e0:	ea02 0103 	and.w	r1, r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f003 0310 	and.w	r3, r3, #16
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	409a      	lsls	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2201      	movs	r2, #1
 80075fa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007602:	7ffb      	ldrb	r3, [r7, #31]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3728      	adds	r7, #40	@ 0x28
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	09896800 	.word	0x09896800
 8007610:	04c4b400 	.word	0x04c4b400

08007614 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e08d      	b.n	8007742 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	4b47      	ldr	r3, [pc, #284]	@ (800774c <HAL_DMA_Init+0x138>)
 800762e:	429a      	cmp	r2, r3
 8007630:	d80f      	bhi.n	8007652 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	461a      	mov	r2, r3
 8007638:	4b45      	ldr	r3, [pc, #276]	@ (8007750 <HAL_DMA_Init+0x13c>)
 800763a:	4413      	add	r3, r2
 800763c:	4a45      	ldr	r2, [pc, #276]	@ (8007754 <HAL_DMA_Init+0x140>)
 800763e:	fba2 2303 	umull	r2, r3, r2, r3
 8007642:	091b      	lsrs	r3, r3, #4
 8007644:	009a      	lsls	r2, r3, #2
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a42      	ldr	r2, [pc, #264]	@ (8007758 <HAL_DMA_Init+0x144>)
 800764e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007650:	e00e      	b.n	8007670 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	4b40      	ldr	r3, [pc, #256]	@ (800775c <HAL_DMA_Init+0x148>)
 800765a:	4413      	add	r3, r2
 800765c:	4a3d      	ldr	r2, [pc, #244]	@ (8007754 <HAL_DMA_Init+0x140>)
 800765e:	fba2 2303 	umull	r2, r3, r2, r3
 8007662:	091b      	lsrs	r3, r3, #4
 8007664:	009a      	lsls	r2, r3, #2
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a3c      	ldr	r2, [pc, #240]	@ (8007760 <HAL_DMA_Init+0x14c>)
 800766e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800768a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007694:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f9b6 	bl	8007a34 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076d0:	d102      	bne.n	80076d8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076e0:	b2d2      	uxtb	r2, r2
 80076e2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80076ec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d010      	beq.n	8007718 <HAL_DMA_Init+0x104>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	2b04      	cmp	r3, #4
 80076fc:	d80c      	bhi.n	8007718 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f9d6 	bl	8007ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007714:	605a      	str	r2, [r3, #4]
 8007716:	e008      	b.n	800772a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	40020407 	.word	0x40020407
 8007750:	bffdfff8 	.word	0xbffdfff8
 8007754:	cccccccd 	.word	0xcccccccd
 8007758:	40020000 	.word	0x40020000
 800775c:	bffdfbf8 	.word	0xbffdfbf8
 8007760:	40020400 	.word	0x40020400

08007764 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800777c:	2b01      	cmp	r3, #1
 800777e:	d101      	bne.n	8007784 <HAL_DMA_Start_IT+0x20>
 8007780:	2302      	movs	r3, #2
 8007782:	e066      	b.n	8007852 <HAL_DMA_Start_IT+0xee>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b01      	cmp	r3, #1
 8007796:	d155      	bne.n	8007844 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2202      	movs	r2, #2
 800779c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f022 0201 	bic.w	r2, r2, #1
 80077b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	68b9      	ldr	r1, [r7, #8]
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 f8fb 	bl	80079b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d008      	beq.n	80077dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f042 020e 	orr.w	r2, r2, #14
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	e00f      	b.n	80077fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f022 0204 	bic.w	r2, r2, #4
 80077ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 020a 	orr.w	r2, r2, #10
 80077fa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d007      	beq.n	800781a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007814:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007818:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800781e:	2b00      	cmp	r3, #0
 8007820:	d007      	beq.n	8007832 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800782c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007830:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f042 0201 	orr.w	r2, r2, #1
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	e005      	b.n	8007850 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800784c:	2302      	movs	r3, #2
 800784e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007850:	7dfb      	ldrb	r3, [r7, #23]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007876:	f003 031f 	and.w	r3, r3, #31
 800787a:	2204      	movs	r2, #4
 800787c:	409a      	lsls	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	4013      	ands	r3, r2
 8007882:	2b00      	cmp	r3, #0
 8007884:	d026      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x7a>
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b00      	cmp	r3, #0
 800788e:	d021      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b00      	cmp	r3, #0
 800789c:	d107      	bne.n	80078ae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f022 0204 	bic.w	r2, r2, #4
 80078ac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078b2:	f003 021f 	and.w	r2, r3, #31
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ba:	2104      	movs	r1, #4
 80078bc:	fa01 f202 	lsl.w	r2, r1, r2
 80078c0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d071      	beq.n	80079ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80078d2:	e06c      	b.n	80079ae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078d8:	f003 031f 	and.w	r3, r3, #31
 80078dc:	2202      	movs	r2, #2
 80078de:	409a      	lsls	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4013      	ands	r3, r2
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d02e      	beq.n	8007946 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f003 0302 	and.w	r3, r3, #2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d029      	beq.n	8007946 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0320 	and.w	r3, r3, #32
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10b      	bne.n	8007918 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 020a 	bic.w	r2, r2, #10
 800790e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800791c:	f003 021f 	and.w	r2, r3, #31
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007924:	2102      	movs	r1, #2
 8007926:	fa01 f202 	lsl.w	r2, r1, r2
 800792a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007938:	2b00      	cmp	r3, #0
 800793a:	d038      	beq.n	80079ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007944:	e033      	b.n	80079ae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800794a:	f003 031f 	and.w	r3, r3, #31
 800794e:	2208      	movs	r2, #8
 8007950:	409a      	lsls	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	4013      	ands	r3, r2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d02a      	beq.n	80079b0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f003 0308 	and.w	r3, r3, #8
 8007960:	2b00      	cmp	r3, #0
 8007962:	d025      	beq.n	80079b0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f022 020e 	bic.w	r2, r2, #14
 8007972:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007978:	f003 021f 	and.w	r2, r3, #31
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007980:	2101      	movs	r1, #1
 8007982:	fa01 f202 	lsl.w	r2, r1, r2
 8007986:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d004      	beq.n	80079b0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80079ae:	bf00      	nop
 80079b0:	bf00      	nop
}
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80079ce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d004      	beq.n	80079e2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80079e0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079e6:	f003 021f 	and.w	r2, r3, #31
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ee:	2101      	movs	r1, #1
 80079f0:	fa01 f202 	lsl.w	r2, r1, r2
 80079f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	2b10      	cmp	r3, #16
 8007a04:	d108      	bne.n	8007a18 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007a16:	e007      	b.n	8007a28 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	60da      	str	r2, [r3, #12]
}
 8007a28:	bf00      	nop
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	4b16      	ldr	r3, [pc, #88]	@ (8007a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d802      	bhi.n	8007a4e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007a48:	4b15      	ldr	r3, [pc, #84]	@ (8007aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007a4a:	617b      	str	r3, [r7, #20]
 8007a4c:	e001      	b.n	8007a52 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007a4e:	4b15      	ldr	r3, [pc, #84]	@ (8007aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007a50:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	3b08      	subs	r3, #8
 8007a5e:	4a12      	ldr	r2, [pc, #72]	@ (8007aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007a60:	fba2 2303 	umull	r2, r3, r2, r3
 8007a64:	091b      	lsrs	r3, r3, #4
 8007a66:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a6c:	089b      	lsrs	r3, r3, #2
 8007a6e:	009a      	lsls	r2, r3, #2
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	4413      	add	r3, r2
 8007a74:	461a      	mov	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8007aac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007a7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f003 031f 	and.w	r3, r3, #31
 8007a86:	2201      	movs	r2, #1
 8007a88:	409a      	lsls	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007a8e:	bf00      	nop
 8007a90:	371c      	adds	r7, #28
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	40020407 	.word	0x40020407
 8007aa0:	40020800 	.word	0x40020800
 8007aa4:	40020820 	.word	0x40020820
 8007aa8:	cccccccd 	.word	0xcccccccd
 8007aac:	40020880 	.word	0x40020880

08007ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8007af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007ac4:	4413      	add	r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	461a      	mov	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a08      	ldr	r2, [pc, #32]	@ (8007af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007ad2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	f003 031f 	and.w	r3, r3, #31
 8007adc:	2201      	movs	r2, #1
 8007ade:	409a      	lsls	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007ae4:	bf00      	nop
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	1000823f 	.word	0x1000823f
 8007af4:	40020940 	.word	0x40020940

08007af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007b06:	e15a      	b.n	8007dbe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	fa01 f303 	lsl.w	r3, r1, r3
 8007b14:	4013      	ands	r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 814c 	beq.w	8007db8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f003 0303 	and.w	r3, r3, #3
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d005      	beq.n	8007b38 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d130      	bne.n	8007b9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	005b      	lsls	r3, r3, #1
 8007b42:	2203      	movs	r2, #3
 8007b44:	fa02 f303 	lsl.w	r3, r2, r3
 8007b48:	43db      	mvns	r3, r3
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	68da      	ldr	r2, [r3, #12]
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b6e:	2201      	movs	r2, #1
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	fa02 f303 	lsl.w	r3, r2, r3
 8007b76:	43db      	mvns	r3, r3
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	091b      	lsrs	r3, r3, #4
 8007b84:	f003 0201 	and.w	r2, r3, #1
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f003 0303 	and.w	r3, r3, #3
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d017      	beq.n	8007bd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	2203      	movs	r2, #3
 8007bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb6:	43db      	mvns	r3, r3
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	689a      	ldr	r2, [r3, #8]
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f003 0303 	and.w	r3, r3, #3
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d123      	bne.n	8007c2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	08da      	lsrs	r2, r3, #3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	3208      	adds	r2, #8
 8007bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f003 0307 	and.w	r3, r3, #7
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	220f      	movs	r2, #15
 8007bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfe:	43db      	mvns	r3, r3
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	4013      	ands	r3, r2
 8007c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	691a      	ldr	r2, [r3, #16]
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f003 0307 	and.w	r3, r3, #7
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	fa02 f303 	lsl.w	r3, r2, r3
 8007c16:	693a      	ldr	r2, [r7, #16]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	08da      	lsrs	r2, r3, #3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3208      	adds	r2, #8
 8007c24:	6939      	ldr	r1, [r7, #16]
 8007c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	2203      	movs	r2, #3
 8007c36:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3a:	43db      	mvns	r3, r3
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f003 0203 	and.w	r2, r3, #3
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 80a6 	beq.w	8007db8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c6c:	4b5b      	ldr	r3, [pc, #364]	@ (8007ddc <HAL_GPIO_Init+0x2e4>)
 8007c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c70:	4a5a      	ldr	r2, [pc, #360]	@ (8007ddc <HAL_GPIO_Init+0x2e4>)
 8007c72:	f043 0301 	orr.w	r3, r3, #1
 8007c76:	6613      	str	r3, [r2, #96]	@ 0x60
 8007c78:	4b58      	ldr	r3, [pc, #352]	@ (8007ddc <HAL_GPIO_Init+0x2e4>)
 8007c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	60bb      	str	r3, [r7, #8]
 8007c82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c84:	4a56      	ldr	r2, [pc, #344]	@ (8007de0 <HAL_GPIO_Init+0x2e8>)
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	089b      	lsrs	r3, r3, #2
 8007c8a:	3302      	adds	r3, #2
 8007c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f003 0303 	and.w	r3, r3, #3
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	220f      	movs	r2, #15
 8007c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca0:	43db      	mvns	r3, r3
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007cae:	d01f      	beq.n	8007cf0 <HAL_GPIO_Init+0x1f8>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a4c      	ldr	r2, [pc, #304]	@ (8007de4 <HAL_GPIO_Init+0x2ec>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d019      	beq.n	8007cec <HAL_GPIO_Init+0x1f4>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a4b      	ldr	r2, [pc, #300]	@ (8007de8 <HAL_GPIO_Init+0x2f0>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d013      	beq.n	8007ce8 <HAL_GPIO_Init+0x1f0>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a4a      	ldr	r2, [pc, #296]	@ (8007dec <HAL_GPIO_Init+0x2f4>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d00d      	beq.n	8007ce4 <HAL_GPIO_Init+0x1ec>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a49      	ldr	r2, [pc, #292]	@ (8007df0 <HAL_GPIO_Init+0x2f8>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d007      	beq.n	8007ce0 <HAL_GPIO_Init+0x1e8>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a48      	ldr	r2, [pc, #288]	@ (8007df4 <HAL_GPIO_Init+0x2fc>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d101      	bne.n	8007cdc <HAL_GPIO_Init+0x1e4>
 8007cd8:	2305      	movs	r3, #5
 8007cda:	e00a      	b.n	8007cf2 <HAL_GPIO_Init+0x1fa>
 8007cdc:	2306      	movs	r3, #6
 8007cde:	e008      	b.n	8007cf2 <HAL_GPIO_Init+0x1fa>
 8007ce0:	2304      	movs	r3, #4
 8007ce2:	e006      	b.n	8007cf2 <HAL_GPIO_Init+0x1fa>
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e004      	b.n	8007cf2 <HAL_GPIO_Init+0x1fa>
 8007ce8:	2302      	movs	r3, #2
 8007cea:	e002      	b.n	8007cf2 <HAL_GPIO_Init+0x1fa>
 8007cec:	2301      	movs	r3, #1
 8007cee:	e000      	b.n	8007cf2 <HAL_GPIO_Init+0x1fa>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	f002 0203 	and.w	r2, r2, #3
 8007cf8:	0092      	lsls	r2, r2, #2
 8007cfa:	4093      	lsls	r3, r2
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d02:	4937      	ldr	r1, [pc, #220]	@ (8007de0 <HAL_GPIO_Init+0x2e8>)
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	089b      	lsrs	r3, r3, #2
 8007d08:	3302      	adds	r3, #2
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d10:	4b39      	ldr	r3, [pc, #228]	@ (8007df8 <HAL_GPIO_Init+0x300>)
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	43db      	mvns	r3, r3
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007d34:	4a30      	ldr	r2, [pc, #192]	@ (8007df8 <HAL_GPIO_Init+0x300>)
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8007df8 <HAL_GPIO_Init+0x300>)
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	43db      	mvns	r3, r3
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	4013      	ands	r3, r2
 8007d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d003      	beq.n	8007d5e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007d5e:	4a26      	ldr	r2, [pc, #152]	@ (8007df8 <HAL_GPIO_Init+0x300>)
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007d64:	4b24      	ldr	r3, [pc, #144]	@ (8007df8 <HAL_GPIO_Init+0x300>)
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	43db      	mvns	r3, r3
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	4013      	ands	r3, r2
 8007d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d003      	beq.n	8007d88 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007d88:	4a1b      	ldr	r2, [pc, #108]	@ (8007df8 <HAL_GPIO_Init+0x300>)
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8007df8 <HAL_GPIO_Init+0x300>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	43db      	mvns	r3, r3
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007db2:	4a11      	ldr	r2, [pc, #68]	@ (8007df8 <HAL_GPIO_Init+0x300>)
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f47f ae9d 	bne.w	8007b08 <HAL_GPIO_Init+0x10>
  }
}
 8007dce:	bf00      	nop
 8007dd0:	bf00      	nop
 8007dd2:	371c      	adds	r7, #28
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	40021000 	.word	0x40021000
 8007de0:	40010000 	.word	0x40010000
 8007de4:	48000400 	.word	0x48000400
 8007de8:	48000800 	.word	0x48000800
 8007dec:	48000c00 	.word	0x48000c00
 8007df0:	48001000 	.word	0x48001000
 8007df4:	48001400 	.word	0x48001400
 8007df8:	40010400 	.word	0x40010400

08007dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	807b      	strh	r3, [r7, #2]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e0c:	787b      	ldrb	r3, [r7, #1]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007e12:	887a      	ldrh	r2, [r7, #2]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007e18:	e002      	b.n	8007e20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007e1a:	887a      	ldrh	r2, [r7, #2]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	4603      	mov	r3, r0
 8007e34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007e36:	4b08      	ldr	r3, [pc, #32]	@ (8007e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e38:	695a      	ldr	r2, [r3, #20]
 8007e3a:	88fb      	ldrh	r3, [r7, #6]
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d006      	beq.n	8007e50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007e42:	4a05      	ldr	r2, [pc, #20]	@ (8007e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e44:	88fb      	ldrh	r3, [r7, #6]
 8007e46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007e48:	88fb      	ldrh	r3, [r7, #6]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 f806 	bl	8007e5c <HAL_GPIO_EXTI_Callback>
  }
}
 8007e50:	bf00      	nop
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	40010400 	.word	0x40010400

08007e5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	4603      	mov	r3, r0
 8007e64:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007e66:	bf00      	nop
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
	...

08007e74 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef *hhrtim)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if (hhrtim == NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d101      	bne.n	8007e86 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e0be      	b.n	8008004 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2202      	movs	r2, #2
 8007e8a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d02e      	beq.n	8007f30 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a4d      	ldr	r2, [pc, #308]	@ (800800c <HAL_HRTIM_Init+0x198>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d10b      	bne.n	8007ef4 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8007edc:	4b4c      	ldr	r3, [pc, #304]	@ (8008010 <HAL_HRTIM_Init+0x19c>)
 8007ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ee0:	4a4b      	ldr	r2, [pc, #300]	@ (8008010 <HAL_HRTIM_Init+0x19c>)
 8007ee2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ee6:	6613      	str	r3, [r2, #96]	@ 0x60
 8007ee8:	4b49      	ldr	r3, [pc, #292]	@ (8008010 <HAL_HRTIM_Init+0x19c>)
 8007eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007eec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8007f02:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007f18:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7fb fc23 	bl	800377c <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d012      	beq.n	8007f68 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f50:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	75fb      	strb	r3, [r7, #23]
 8007f7c:	e03e      	b.n	8007ffc <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8007f7e:	7dfa      	ldrb	r2, [r7, #23]
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	4613      	mov	r3, r2
 8007f84:	00db      	lsls	r3, r3, #3
 8007f86:	1a9b      	subs	r3, r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	440b      	add	r3, r1
 8007f8c:	3318      	adds	r3, #24
 8007f8e:	2200      	movs	r2, #0
 8007f90:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8007f92:	7dfa      	ldrb	r2, [r7, #23]
 8007f94:	6879      	ldr	r1, [r7, #4]
 8007f96:	4613      	mov	r3, r2
 8007f98:	00db      	lsls	r3, r3, #3
 8007f9a:	1a9b      	subs	r3, r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	440b      	add	r3, r1
 8007fa0:	331c      	adds	r3, #28
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8007fa6:	7dfa      	ldrb	r2, [r7, #23]
 8007fa8:	6879      	ldr	r1, [r7, #4]
 8007faa:	4613      	mov	r3, r2
 8007fac:	00db      	lsls	r3, r3, #3
 8007fae:	1a9b      	subs	r3, r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	440b      	add	r3, r1
 8007fb4:	3320      	adds	r3, #32
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8007fba:	7dfa      	ldrb	r2, [r7, #23]
 8007fbc:	6879      	ldr	r1, [r7, #4]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	00db      	lsls	r3, r3, #3
 8007fc2:	1a9b      	subs	r3, r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	440b      	add	r3, r1
 8007fc8:	3324      	adds	r3, #36	@ 0x24
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8007fce:	7dfa      	ldrb	r2, [r7, #23]
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	00db      	lsls	r3, r3, #3
 8007fd6:	1a9b      	subs	r3, r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	440b      	add	r3, r1
 8007fdc:	3328      	adds	r3, #40	@ 0x28
 8007fde:	2200      	movs	r2, #0
 8007fe0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8007fe2:	7dfa      	ldrb	r2, [r7, #23]
 8007fe4:	6879      	ldr	r1, [r7, #4]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	1a9b      	subs	r3, r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	440b      	add	r3, r1
 8007ff0:	3330      	adds	r3, #48	@ 0x30
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8007ffc:	7dfb      	ldrb	r3, [r7, #23]
 8007ffe:	2b06      	cmp	r3, #6
 8008000:	d9bd      	bls.n	8007f7e <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	40016800 	.word	0x40016800
 8008010:	40021000 	.word	0x40021000

08008014 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t CalibrationRate)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8008024:	2b01      	cmp	r3, #1
 8008026:	d101      	bne.n	800802c <HAL_HRTIM_DLLCalibrationStart+0x18>
 8008028:	2302      	movs	r3, #2
 800802a:	e045      	b.n	80080b8 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008042:	d114      	bne.n	800806e <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 0202 	bic.w	r2, r2, #2
 8008054:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f042 0201 	orr.w	r2, r2, #1
 8008068:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 800806c:	e01f      	b.n	80080ae <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f042 0202 	orr.w	r2, r2, #2
 800807e:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 800808a:	f023 010c 	bic.w	r1, r3, #12
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	430a      	orrs	r2, r1
 8008096:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 0201 	orr.w	r2, r2, #1
 80080aa:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t Timeout)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 80080ce:	f7fc fad9 	bl	8004684 <HAL_GetTick>
 80080d2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80080d4:	e014      	b.n	8008100 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080dc:	d010      	beq.n	8008100 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80080de:	f7fc fad1 	bl	8004684 <HAL_GetTick>
 80080e2:	4602      	mov	r2, r0
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d302      	bcc.n	80080f4 <HAL_HRTIM_PollForDLLCalibration+0x30>
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d105      	bne.n	8008100 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2207      	movs	r2, #7
 80080f8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e011      	b.n	8008124 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8008108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800810c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008110:	d1e1      	bne.n	80080d6 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b02      	cmp	r3, #2
 8008142:	d101      	bne.n	8008148 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
    return HAL_BUSY;
 8008144:	2302      	movs	r3, #2
 8008146:	e015      	b.n	8008174 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2202      	movs	r2, #2
 800814c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b06      	cmp	r3, #6
 8008154:	d104      	bne.n	8008160 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8008156:	6879      	ldr	r1, [r7, #4]
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f000 fac6 	bl	80086ea <HRTIM_MasterBase_Config>
 800815e:	e004      	b.n	800816a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	68b9      	ldr	r1, [r7, #8]
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 faef 	bl	8008748 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b02      	cmp	r3, #2
 8008192:	d101      	bne.n	8008198 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
    return HAL_BUSY;
 8008194:	2302      	movs	r3, #2
 8008196:	e07a      	b.n	800828e <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d101      	bne.n	80081a6 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80081a2:	2302      	movs	r3, #2
 80081a4:	e073      	b.n	800828e <HAL_HRTIM_WaveformTimerConfig+0x112>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2202      	movs	r2, #2
 80081b2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2b06      	cmp	r3, #6
 80081ba:	d104      	bne.n	80081c6 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 fb02 	bl	80087c8 <HRTIM_MasterWaveform_Config>
 80081c4:	e004      	b.n	80081d0 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	68b9      	ldr	r1, [r7, #8]
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 fb9a 	bl	8008904 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6819      	ldr	r1, [r3, #0]
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	4613      	mov	r3, r2
 80081da:	00db      	lsls	r3, r3, #3
 80081dc:	1a9b      	subs	r3, r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4403      	add	r3, r0
 80081e2:	3320      	adds	r3, #32
 80081e4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6859      	ldr	r1, [r3, #4]
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	4613      	mov	r3, r2
 80081f0:	00db      	lsls	r3, r3, #3
 80081f2:	1a9b      	subs	r3, r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4403      	add	r3, r0
 80081f8:	3324      	adds	r3, #36	@ 0x24
 80081fa:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6899      	ldr	r1, [r3, #8]
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	4613      	mov	r3, r2
 8008206:	00db      	lsls	r3, r3, #3
 8008208:	1a9b      	subs	r3, r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4403      	add	r3, r0
 800820e:	3328      	adds	r3, #40	@ 0x28
 8008210:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68d9      	ldr	r1, [r3, #12]
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	4613      	mov	r3, r2
 800821c:	00db      	lsls	r3, r3, #3
 800821e:	1a9b      	subs	r3, r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4403      	add	r3, r0
 8008224:	332c      	adds	r3, #44	@ 0x2c
 8008226:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6919      	ldr	r1, [r3, #16]
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	4613      	mov	r3, r2
 8008232:	00db      	lsls	r3, r3, #3
 8008234:	1a9b      	subs	r3, r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4403      	add	r3, r0
 800823a:	3330      	adds	r3, #48	@ 0x30
 800823c:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800823e:	68b9      	ldr	r1, [r7, #8]
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f000 fe2d 	bl	8008ea0 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2b06      	cmp	r3, #6
 800824a:	d017      	beq.n	800827c <HAL_HRTIM_WaveformTimerConfig+0x100>
      && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008250:	2b00      	cmp	r3, #0
 8008252:	d113      	bne.n	800827c <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	3301      	adds	r3, #1
 800825c:	01db      	lsls	r3, r3, #7
 800825e:	4413      	add	r3, r2
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800826a:	025b      	lsls	r3, r3, #9
 800826c:	68f9      	ldr	r1, [r7, #12]
 800826e:	6809      	ldr	r1, [r1, #0]
 8008270:	431a      	orrs	r2, r3
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	3301      	adds	r3, #1
 8008276:	01db      	lsls	r3, r3, #7
 8008278:	440b      	add	r3, r1
 800827a:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	60f8      	str	r0, [r7, #12]
 800829e:	60b9      	str	r1, [r7, #8]
 80082a0:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
  assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
  assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
  assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d101      	bne.n	80082b2 <HAL_HRTIM_WaveformTimerControl+0x1c>
  {
    return HAL_BUSY;
 80082ae:	2302      	movs	r3, #2
 80082b0:	e020      	b.n	80082f4 <HAL_HRTIM_WaveformTimerControl+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d101      	bne.n	80082c0 <HAL_HRTIM_WaveformTimerControl+0x2a>
 80082bc:	2302      	movs	r3, #2
 80082be:	e019      	b.n	80082f4 <HAL_HRTIM_WaveformTimerControl+0x5e>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure timing unit */
  HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	68b9      	ldr	r1, [r7, #8]
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f000 fc9b 	bl	8008c10 <HRTIM_TimingUnitWaveform_Control>

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80082da:	68b9      	ldr	r1, [r7, #8]
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 fddf 	bl	8008ea0 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef *pCompareCfg)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
 8008308:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8008310:	b2db      	uxtb	r3, r3
 8008312:	2b02      	cmp	r3, #2
 8008314:	d101      	bne.n	800831a <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
    return HAL_BUSY;
 8008316:	2302      	movs	r3, #2
 8008318:	e157      	b.n	80085ca <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8008320:	2b01      	cmp	r3, #1
 8008322:	d101      	bne.n	8008328 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8008324:	2302      	movs	r3, #2
 8008326:	e150      	b.n	80085ca <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2202      	movs	r2, #2
 8008334:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b06      	cmp	r3, #6
 800833c:	d140      	bne.n	80083c0 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	3b01      	subs	r3, #1
 8008342:	2b07      	cmp	r3, #7
 8008344:	d82a      	bhi.n	800839c <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8008346:	a201      	add	r2, pc, #4	@ (adr r2, 800834c <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8008348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834c:	0800836d 	.word	0x0800836d
 8008350:	08008379 	.word	0x08008379
 8008354:	0800839d 	.word	0x0800839d
 8008358:	08008385 	.word	0x08008385
 800835c:	0800839d 	.word	0x0800839d
 8008360:	0800839d 	.word	0x0800839d
 8008364:	0800839d 	.word	0x0800839d
 8008368:	08008391 	.word	0x08008391
    {
      case HRTIM_COMPAREUNIT_1:
      {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	6812      	ldr	r2, [r2, #0]
 8008374:	61da      	str	r2, [r3, #28]
        break;
 8008376:	e01a      	b.n	80083ae <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_2:
      {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	6812      	ldr	r2, [r2, #0]
 8008380:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 8008382:	e014      	b.n	80083ae <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	6812      	ldr	r2, [r2, #0]
 800838c:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 800838e:	e00e      	b.n	80083ae <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_4:
      {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	683a      	ldr	r2, [r7, #0]
 8008396:	6812      	ldr	r2, [r2, #0]
 8008398:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 800839a:	e008      	b.n	80083ae <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2207      	movs	r2, #7
 80083a0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 80083ac:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b07      	cmp	r3, #7
 80083b8:	f040 80fe 	bne.w	80085b8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e104      	b.n	80085ca <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	2b07      	cmp	r3, #7
 80083c6:	f200 80e3 	bhi.w	8008590 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80083ca:	a201      	add	r2, pc, #4	@ (adr r2, 80083d0 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80083cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d0:	080083f1 	.word	0x080083f1
 80083d4:	08008405 	.word	0x08008405
 80083d8:	08008591 	.word	0x08008591
 80083dc:	080084c1 	.word	0x080084c1
 80083e0:	08008591 	.word	0x08008591
 80083e4:	08008591 	.word	0x08008591
 80083e8:	08008591 	.word	0x08008591
 80083ec:	080084d5 	.word	0x080084d5
    {
      case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6819      	ldr	r1, [r3, #0]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	01db      	lsls	r3, r3, #7
 80083fc:	440b      	add	r3, r1
 80083fe:	339c      	adds	r3, #156	@ 0x9c
 8008400:	601a      	str	r2, [r3, #0]
        break;
 8008402:	e0d1      	b.n	80085a8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6819      	ldr	r1, [r3, #0]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	01db      	lsls	r3, r3, #7
 8008410:	440b      	add	r3, r1
 8008412:	33a4      	adds	r3, #164	@ 0xa4
 8008414:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d03f      	beq.n	800849e <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	3301      	adds	r3, #1
 8008426:	01db      	lsls	r3, r3, #7
 8008428:	4413      	add	r3, r2
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	6811      	ldr	r1, [r2, #0]
 8008430:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	3301      	adds	r3, #1
 8008438:	01db      	lsls	r3, r3, #7
 800843a:	440b      	add	r3, r1
 800843c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	3301      	adds	r3, #1
 8008446:	01db      	lsls	r3, r3, #7
 8008448:	4413      	add	r3, r2
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	68f9      	ldr	r1, [r7, #12]
 8008452:	6809      	ldr	r1, [r1, #0]
 8008454:	431a      	orrs	r2, r3
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	3301      	adds	r3, #1
 800845a:	01db      	lsls	r3, r3, #7
 800845c:	440b      	add	r3, r1
 800845e:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008468:	d109      	bne.n	800847e <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6819      	ldr	r1, [r3, #0]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	689a      	ldr	r2, [r3, #8]
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	01db      	lsls	r3, r3, #7
 8008476:	440b      	add	r3, r1
 8008478:	339c      	adds	r3, #156	@ 0x9c
 800847a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
        break;
 800847c:	e091      	b.n	80085a2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008486:	f040 808c 	bne.w	80085a2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6819      	ldr	r1, [r3, #0]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	689a      	ldr	r2, [r3, #8]
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	01db      	lsls	r3, r3, #7
 8008496:	440b      	add	r3, r1
 8008498:	33a8      	adds	r3, #168	@ 0xa8
 800849a:	601a      	str	r2, [r3, #0]
        break;
 800849c:	e081      	b.n	80085a2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	3301      	adds	r3, #1
 80084a6:	01db      	lsls	r3, r3, #7
 80084a8:	4413      	add	r3, r2
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	6811      	ldr	r1, [r2, #0]
 80084b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	3301      	adds	r3, #1
 80084b8:	01db      	lsls	r3, r3, #7
 80084ba:	440b      	add	r3, r1
 80084bc:	601a      	str	r2, [r3, #0]
        break;
 80084be:	e070      	b.n	80085a2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6819      	ldr	r1, [r3, #0]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	01db      	lsls	r3, r3, #7
 80084cc:	440b      	add	r3, r1
 80084ce:	33a8      	adds	r3, #168	@ 0xa8
 80084d0:	601a      	str	r2, [r3, #0]
        break;
 80084d2:	e069      	b.n	80085a8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6819      	ldr	r1, [r3, #0]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	01db      	lsls	r3, r3, #7
 80084e0:	440b      	add	r3, r1
 80084e2:	33ac      	adds	r3, #172	@ 0xac
 80084e4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d03f      	beq.n	800856e <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	3301      	adds	r3, #1
 80084f6:	01db      	lsls	r3, r3, #7
 80084f8:	4413      	add	r3, r2
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	6811      	ldr	r1, [r2, #0]
 8008500:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	3301      	adds	r3, #1
 8008508:	01db      	lsls	r3, r3, #7
 800850a:	440b      	add	r3, r1
 800850c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	3301      	adds	r3, #1
 8008516:	01db      	lsls	r3, r3, #7
 8008518:	4413      	add	r3, r2
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	68f9      	ldr	r1, [r7, #12]
 8008524:	6809      	ldr	r1, [r1, #0]
 8008526:	431a      	orrs	r2, r3
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	3301      	adds	r3, #1
 800852c:	01db      	lsls	r3, r3, #7
 800852e:	440b      	add	r3, r1
 8008530:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800853a:	d109      	bne.n	8008550 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6819      	ldr	r1, [r3, #0]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	01db      	lsls	r3, r3, #7
 8008548:	440b      	add	r3, r1
 800854a:	339c      	adds	r3, #156	@ 0x9c
 800854c:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
        break;
 800854e:	e02a      	b.n	80085a6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008558:	d125      	bne.n	80085a6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6819      	ldr	r1, [r3, #0]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	689a      	ldr	r2, [r3, #8]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	01db      	lsls	r3, r3, #7
 8008566:	440b      	add	r3, r1
 8008568:	33a8      	adds	r3, #168	@ 0xa8
 800856a:	601a      	str	r2, [r3, #0]
        break;
 800856c:	e01b      	b.n	80085a6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	3301      	adds	r3, #1
 8008576:	01db      	lsls	r3, r3, #7
 8008578:	4413      	add	r3, r2
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	6811      	ldr	r1, [r2, #0]
 8008580:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	3301      	adds	r3, #1
 8008588:	01db      	lsls	r3, r3, #7
 800858a:	440b      	add	r3, r1
 800858c:	601a      	str	r2, [r3, #0]
        break;
 800858e:	e00a      	b.n	80085a6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2207      	movs	r2, #7
 8008594:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 80085a0:	e002      	b.n	80085a8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 80085a2:	bf00      	nop
 80085a4:	e000      	b.n	80085a8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 80085a6:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	2b07      	cmp	r3, #7
 80085b2:	d101      	bne.n	80085b8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e008      	b.n	80085ca <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop

080085d8 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t Output,
                                                 const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
 80085e4:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d101      	bne.n	80085f6 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
    return HAL_BUSY;
 80085f2:	2302      	movs	r3, #2
 80085f4:	e01d      	b.n	8008632 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d101      	bne.n	8008604 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8008600:	2302      	movs	r3, #2
 8008602:	e016      	b.n	8008632 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	68b9      	ldr	r1, [r7, #8]
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 fb58 	bl	8008cd0 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t OutputsToStart)
{
 800863a:	b480      	push	{r7}
 800863c:	b083      	sub	sp, #12
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800864a:	2b01      	cmp	r3, #1
 800864c:	d101      	bne.n	8008652 <HAL_HRTIM_WaveformOutputStart+0x18>
 800864e:	2302      	movs	r3, #2
 8008650:	e01a      	b.n	8008688 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2202      	movs	r2, #2
 800865e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f8d3 1394 	ldr.w	r1, [r3, #916]	@ 0x394
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	430a      	orrs	r2, r1
 8008672:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef *hhrtim,
                                               uint32_t Timers)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d101      	bne.n	80086ac <HAL_HRTIM_WaveformCountStart+0x18>
 80086a8:	2302      	movs	r3, #2
 80086aa:	e018      	b.n	80086de <HAL_HRTIM_WaveformCountStart+0x4a>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2202      	movs	r2, #2
 80086b8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6819      	ldr	r1, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 80086ea:	b480      	push	{r7}
 80086ec:	b085      	sub	sp, #20
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f023 0307 	bic.w	r3, r3, #7
 8008702:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4313      	orrs	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f023 0318 	bic.w	r3, r3, #24
 8008714:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	4313      	orrs	r3, r2
 800871e:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	6812      	ldr	r2, [r2, #0]
 8008730:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	6852      	ldr	r2, [r2, #4]
 800873a:	619a      	str	r2, [r3, #24]
}
 800873c:	bf00      	nop
 800873e:	3714      	adds	r7, #20
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t TimerIdx,
                                        const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8008748:	b480      	push	{r7}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	3301      	adds	r3, #1
 800875c:	01db      	lsls	r3, r3, #7
 800875e:	4413      	add	r3, r2
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	f023 0307 	bic.w	r3, r3, #7
 800876a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	4313      	orrs	r3, r2
 8008774:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	f023 0318 	bic.w	r3, r3, #24
 800877c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	697a      	ldr	r2, [r7, #20]
 8008784:	4313      	orrs	r3, r2
 8008786:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	3301      	adds	r3, #1
 8008790:	01db      	lsls	r3, r3, #7
 8008792:	4413      	add	r3, r2
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6819      	ldr	r1, [r3, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	01db      	lsls	r3, r3, #7
 80087a4:	440b      	add	r3, r1
 80087a6:	3394      	adds	r3, #148	@ 0x94
 80087a8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6819      	ldr	r1, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	01db      	lsls	r3, r3, #7
 80087b6:	440b      	add	r3, r1
 80087b8:	3398      	adds	r3, #152	@ 0x98
 80087ba:	601a      	str	r2, [r3, #0]
}
 80087bc:	bf00      	nop
 80087be:	371c      	adds	r7, #28
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                        const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80087e2:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 0320 	bic.w	r3, r3, #32
 80087ea:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80087fc:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	2b20      	cmp	r3, #32
 8008804:	d003      	beq.n	800880e <HRTIM_MasterWaveform_Config+0x46>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	2b02      	cmp	r3, #2
 800880c:	d108      	bne.n	8008820 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008814:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f043 0320 	orr.w	r3, r3, #32
 800881c:	60fb      	str	r3, [r7, #12]
 800881e:	e021      	b.n	8008864 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	2b03      	cmp	r3, #3
 8008826:	d108      	bne.n	800883a <HRTIM_MasterWaveform_Config+0x72>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800882e:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008836:	60fb      	str	r3, [r7, #12]
 8008838:	e014      	b.n	8008864 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	2b04      	cmp	r3, #4
 8008840:	d108      	bne.n	8008854 <HRTIM_MasterWaveform_Config+0x8c>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008848:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008850:	60fb      	str	r3, [r7, #12]
 8008852:	e007      	b.n	8008864 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
    hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f023 0320 	bic.w	r3, r3, #32
 800885a:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008862:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800886a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	69db      	ldr	r3, [r3, #28]
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	4313      	orrs	r3, r2
 8008874:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800887c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	4313      	orrs	r3, r2
 8008886:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800888e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	4313      	orrs	r3, r2
 8008898:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80088a0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80088b2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	4313      	orrs	r3, r2
 80088be:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80088c6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088d8:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80088f6:	bf00      	nop
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
	...

08008904 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8008904:	b480      	push	{r7}
 8008906:	b08b      	sub	sp, #44	@ 0x2c
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	3301      	adds	r3, #1
 8008918:	01db      	lsls	r3, r3, #7
 800891a:	4413      	add	r3, r2
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	6811      	ldr	r1, [r2, #0]
 8008922:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	3301      	adds	r3, #1
 800892a:	01db      	lsls	r3, r3, #7
 800892c:	440b      	add	r3, r1
 800892e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	3301      	adds	r3, #1
 8008938:	01db      	lsls	r3, r3, #7
 800893a:	4413      	add	r3, r2
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	01db      	lsls	r3, r3, #7
 8008948:	4413      	add	r3, r2
 800894a:	33e8      	adds	r3, #232	@ 0xe8
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	01db      	lsls	r3, r3, #7
 8008958:	4413      	add	r3, r2
 800895a:	33e4      	adds	r3, #228	@ 0xe4
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8008968:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800896a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896c:	f023 0320 	bic.w	r3, r3, #32
 8008970:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008978:	4313      	orrs	r3, r2
 800897a:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	695b      	ldr	r3, [r3, #20]
 8008980:	2b20      	cmp	r3, #32
 8008982:	d003      	beq.n	800898c <HRTIM_TimingUnitWaveform_Config+0x88>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	2b02      	cmp	r3, #2
 800898a:	d108      	bne.n	800899e <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 800898c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898e:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8008992:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8008994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008996:	f043 0320 	orr.w	r3, r3, #32
 800899a:	627b      	str	r3, [r7, #36]	@ 0x24
 800899c:	e021      	b.n	80089e2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d108      	bne.n	80089b8 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 80089a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ac:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 80089ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80089b6:	e014      	b.n	80089e2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	2b04      	cmp	r3, #4
 80089be:	d108      	bne.n	80089d2 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 80089c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089c6:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 80089c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80089d0:	e007      	b.n	80089e2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
    hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80089d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d4:	f023 0320 	bic.w	r3, r3, #32
 80089d8:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80089da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089dc:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 80089e0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80089e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089e8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089f0:	4313      	orrs	r3, r2
 80089f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 80089f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80089fa:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a1b      	ldr	r3, [r3, #32]
 8008a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a02:	4313      	orrs	r3, r2
 8008a04:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a08:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a14:	4313      	orrs	r3, r2
 8008a16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1a:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8008a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a26:	4313      	orrs	r3, r2
 8008a28:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008a30:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008a42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a4c:	d103      	bne.n	8008a56 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a54:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8008a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a64:	4313      	orrs	r3, r2
 8008a66:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a76:	4313      	orrs	r3, r2
 8008a78:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a7c:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8008a80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a84:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008a96:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008aac:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab2:	69ba      	ldr	r2, [r7, #24]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	61bb      	str	r3, [r7, #24]

  /* Enable/Disable dead time insertion at timer level */
  hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008abe:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ac4:	6a3a      	ldr	r2, [r7, #32]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ace:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8008ad2:	d004      	beq.n	8008ade <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ad8:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8008adc:	d103      	bne.n	8008ae6 <HRTIM_TimingUnitWaveform_Config+0x1e2>
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ae2:	2b40      	cmp	r3, #64	@ 0x40
 8008ae4:	d108      	bne.n	8008af8 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8008aec:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008af2:	6a3a      	ldr	r2, [r7, #32]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8008af8:	6a3b      	ldr	r3, [r7, #32]
 8008afa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008afe:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b04:	6a3a      	ldr	r2, [r7, #32]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b0e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	2b05      	cmp	r3, #5
 8008b14:	d850      	bhi.n	8008bb8 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8008b16:	a201      	add	r2, pc, #4	@ (adr r2, 8008b1c <HRTIM_TimingUnitWaveform_Config+0x218>)
 8008b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1c:	08008b35 	.word	0x08008b35
 8008b20:	08008b4b 	.word	0x08008b4b
 8008b24:	08008b61 	.word	0x08008b61
 8008b28:	08008b77 	.word	0x08008b77
 8008b2c:	08008b8d 	.word	0x08008b8d
 8008b30:	08008ba3 	.word	0x08008ba3
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008b3a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	69fa      	ldr	r2, [r7, #28]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	61fb      	str	r3, [r7, #28]
      break;
 8008b48:	e037      	b.n	8008bba <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b50:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	69fa      	ldr	r2, [r7, #28]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	61fb      	str	r3, [r7, #28]
      break;
 8008b5e:	e02c      	b.n	8008bba <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8008b66:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b6c:	00db      	lsls	r3, r3, #3
 8008b6e:	69fa      	ldr	r2, [r7, #28]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	61fb      	str	r3, [r7, #28]
      break;
 8008b74:	e021      	b.n	8008bba <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008b7c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b82:	011b      	lsls	r3, r3, #4
 8008b84:	69fa      	ldr	r2, [r7, #28]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	61fb      	str	r3, [r7, #28]
      break;
 8008b8a:	e016      	b.n	8008bba <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b92:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b98:	015b      	lsls	r3, r3, #5
 8008b9a:	69fa      	ldr	r2, [r7, #28]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	61fb      	str	r3, [r7, #28]
      break;
 8008ba0:	e00b      	b.n	8008bba <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8008ba8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 6U);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bae:	019b      	lsls	r3, r3, #6
 8008bb0:	69fa      	ldr	r2, [r7, #28]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	61fb      	str	r3, [r7, #28]
      break;
 8008bb6:	e000      	b.n	8008bba <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    default:
      break;
 8008bb8:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	01db      	lsls	r3, r3, #7
 8008bc4:	4413      	add	r3, r2
 8008bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bc8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	01db      	lsls	r3, r3, #7
 8008bd2:	4413      	add	r3, r2
 8008bd4:	33e8      	adds	r3, #232	@ 0xe8
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	01db      	lsls	r3, r3, #7
 8008be2:	4413      	add	r3, r2
 8008be4:	33e4      	adds	r3, #228	@ 0xe4
 8008be6:	6a3a      	ldr	r2, [r7, #32]
 8008be8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	01db      	lsls	r3, r3, #7
 8008bf2:	4413      	add	r3, r2
 8008bf4:	33d4      	adds	r3, #212	@ 0xd4
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	69fa      	ldr	r2, [r7, #28]
 8008c00:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8008c04:	bf00      	nop
 8008c06:	372c      	adds	r7, #44	@ 0x2c
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b087      	sub	sp, #28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr2;

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	01db      	lsls	r3, r3, #7
 8008c24:	4413      	add	r3, r2
 8008c26:	33ec      	adds	r3, #236	@ 0xec
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	617b      	str	r3, [r7, #20]

  /* Set the UpDown counting Mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	f023 0310 	bic.w	r3, r3, #16
 8008c32:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	011b      	lsls	r3, r3, #4
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	617b      	str	r3, [r7, #20]

  /* Set the TrigHalf Mode : requires the counter to be disabled */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008c46:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c58:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008c6a:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	617b      	str	r3, [r7, #20]

  if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d11a      	bne.n	8008cb4 <HRTIM_TimingUnitWaveform_Control+0xa4>
  {
    /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f023 0304 	bic.w	r3, r3, #4
 8008c84:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	617b      	str	r3, [r7, #20]

    /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f023 0302 	bic.w	r3, r3, #2
 8008c96:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	695b      	ldr	r3, [r3, #20]
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	617b      	str	r3, [r7, #20]

    /* Enable the DualChannel DAC trigger */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f023 0301 	bic.w	r3, r3, #1
 8008ca8:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	617b      	str	r3, [r7, #20]
  }
  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	01db      	lsls	r3, r3, #7
 8008cbc:	4413      	add	r3, r2
 8008cbe:	33ec      	adds	r3, #236	@ 0xec
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	601a      	str	r2, [r3, #0]

}
 8008cc4:	bf00      	nop
 8008cc6:	371c      	adds	r7, #28
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b089      	sub	sp, #36	@ 0x24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	01db      	lsls	r3, r3, #7
 8008cea:	4413      	add	r3, r2
 8008cec:	33e4      	adds	r3, #228	@ 0xe4
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	01db      	lsls	r3, r3, #7
 8008cfa:	4413      	add	r3, r2
 8008cfc:	33b8      	adds	r3, #184	@ 0xb8
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	617b      	str	r3, [r7, #20]

  switch (Output)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d08:	d05d      	beq.n	8008dc6 <HRTIM_OutputConfig+0xf6>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d10:	d86e      	bhi.n	8008df0 <HRTIM_OutputConfig+0x120>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d18:	d042      	beq.n	8008da0 <HRTIM_OutputConfig+0xd0>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d20:	d866      	bhi.n	8008df0 <HRTIM_OutputConfig+0x120>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d28:	d04d      	beq.n	8008dc6 <HRTIM_OutputConfig+0xf6>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d30:	d85e      	bhi.n	8008df0 <HRTIM_OutputConfig+0x120>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d38:	d032      	beq.n	8008da0 <HRTIM_OutputConfig+0xd0>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d40:	d856      	bhi.n	8008df0 <HRTIM_OutputConfig+0x120>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b80      	cmp	r3, #128	@ 0x80
 8008d46:	d03e      	beq.n	8008dc6 <HRTIM_OutputConfig+0xf6>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b80      	cmp	r3, #128	@ 0x80
 8008d4c:	d850      	bhi.n	8008df0 <HRTIM_OutputConfig+0x120>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2b40      	cmp	r3, #64	@ 0x40
 8008d52:	d025      	beq.n	8008da0 <HRTIM_OutputConfig+0xd0>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b40      	cmp	r3, #64	@ 0x40
 8008d58:	d84a      	bhi.n	8008df0 <HRTIM_OutputConfig+0x120>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d01f      	beq.n	8008da0 <HRTIM_OutputConfig+0xd0>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d044      	beq.n	8008df0 <HRTIM_OutputConfig+0x120>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2b20      	cmp	r3, #32
 8008d6a:	d841      	bhi.n	8008df0 <HRTIM_OutputConfig+0x120>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d33e      	bcc.n	8008df0 <HRTIM_OutputConfig+0x120>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	3b02      	subs	r3, #2
 8008d76:	2201      	movs	r2, #1
 8008d78:	409a      	lsls	r2, r3
 8008d7a:	4b48      	ldr	r3, [pc, #288]	@ (8008e9c <HRTIM_OutputConfig+0x1cc>)
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bf14      	ite	ne
 8008d82:	2301      	movne	r3, #1
 8008d84:	2300      	moveq	r3, #0
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d11c      	bne.n	8008dc6 <HRTIM_OutputConfig+0xf6>
 8008d8c:	f244 0304 	movw	r3, #16388	@ 0x4004
 8008d90:	4013      	ands	r3, r2
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	bf14      	ite	ne
 8008d96:	2301      	movne	r3, #1
 8008d98:	2300      	moveq	r3, #0
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d027      	beq.n	8008df0 <HRTIM_OutputConfig+0x120>
    case HRTIM_OUTPUT_TD1:
    case HRTIM_OUTPUT_TE1:
    case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6819      	ldr	r1, [r3, #0]
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	01db      	lsls	r3, r3, #7
 8008dac:	440b      	add	r3, r1
 8008dae:	33bc      	adds	r3, #188	@ 0xbc
 8008db0:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6819      	ldr	r1, [r3, #0]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	689a      	ldr	r2, [r3, #8]
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	01db      	lsls	r3, r3, #7
 8008dbe:	440b      	add	r3, r1
 8008dc0:	33c0      	adds	r3, #192	@ 0xc0
 8008dc2:	601a      	str	r2, [r3, #0]
      break;
 8008dc4:	e015      	b.n	8008df2 <HRTIM_OutputConfig+0x122>
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6819      	ldr	r1, [r3, #0]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	685a      	ldr	r2, [r3, #4]
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	01db      	lsls	r3, r3, #7
 8008dd2:	440b      	add	r3, r1
 8008dd4:	33c4      	adds	r3, #196	@ 0xc4
 8008dd6:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6819      	ldr	r1, [r3, #0]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	689a      	ldr	r2, [r3, #8]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	01db      	lsls	r3, r3, #7
 8008de4:	440b      	add	r3, r1
 8008de6:	33c8      	adds	r3, #200	@ 0xc8
 8008de8:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8008dea:	2310      	movs	r3, #16
 8008dec:	61bb      	str	r3, [r7, #24]
      break;
 8008dee:	e000      	b.n	8008df2 <HRTIM_OutputConfig+0x122>
    }

    default:
      break;
 8008df0:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1 |
                   HRTIM_OUTR_FAULT1 |
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8008df2:	22fe      	movs	r2, #254	@ 0xfe
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8008dfa:	43db      	mvns	r3, r3
 8008dfc:	69fa      	ldr	r2, [r7, #28]
 8008dfe:	4013      	ands	r3, r2
 8008e00:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0c:	69fa      	ldr	r2, [r7, #28]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	68da      	ldr	r2, [r3, #12]
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	fa02 f303 	lsl.w	r3, r2, r3
 8008e1c:	69fa      	ldr	r2, [r7, #28]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	691a      	ldr	r2, [r3, #16]
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2c:	69fa      	ldr	r2, [r7, #28]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	695a      	ldr	r2, [r3, #20]
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	fa02 f303 	lsl.w	r3, r2, r3
 8008e3c:	69fa      	ldr	r2, [r7, #28]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	699a      	ldr	r2, [r3, #24]
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4c:	69fa      	ldr	r2, [r7, #28]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	2b08      	cmp	r3, #8
 8008e58:	d111      	bne.n	8008e7e <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10c      	bne.n	8008e7e <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d107      	bne.n	8008e7e <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	69da      	ldr	r2, [r3, #28]
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	fa02 f303 	lsl.w	r3, r2, r3
 8008e78:	69fa      	ldr	r2, [r7, #28]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	01db      	lsls	r3, r3, #7
 8008e86:	4413      	add	r3, r2
 8008e88:	33e4      	adds	r3, #228	@ 0xe4
 8008e8a:	69fa      	ldr	r2, [r7, #28]
 8008e8c:	601a      	str	r2, [r3, #0]
}
 8008e8e:	bf00      	nop
 8008e90:	3724      	adds	r7, #36	@ 0x24
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	40000041 	.word	0x40000041

08008ea0 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2b06      	cmp	r3, #6
 8008eae:	d85e      	bhi.n	8008f6e <HRTIM_ForceRegistersUpdate+0xce>
 8008eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8008eb8 <HRTIM_ForceRegistersUpdate+0x18>)
 8008eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb6:	bf00      	nop
 8008eb8:	08008eeb 	.word	0x08008eeb
 8008ebc:	08008f01 	.word	0x08008f01
 8008ec0:	08008f17 	.word	0x08008f17
 8008ec4:	08008f2d 	.word	0x08008f2d
 8008ec8:	08008f43 	.word	0x08008f43
 8008ecc:	08008f59 	.word	0x08008f59
 8008ed0:	08008ed5 	.word	0x08008ed5
  {
    case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f042 0201 	orr.w	r2, r2, #1
 8008ee4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008ee8:	e042      	b.n	8008f70 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f042 0202 	orr.w	r2, r2, #2
 8008efa:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008efe:	e037      	b.n	8008f70 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f042 0204 	orr.w	r2, r2, #4
 8008f10:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008f14:	e02c      	b.n	8008f70 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f042 0208 	orr.w	r2, r2, #8
 8008f26:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008f2a:	e021      	b.n	8008f70 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f042 0210 	orr.w	r2, r2, #16
 8008f3c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008f40:	e016      	b.n	8008f70 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f042 0220 	orr.w	r2, r2, #32
 8008f52:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008f56:	e00b      	b.n	8008f70 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f68:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008f6c:	e000      	b.n	8008f70 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    default:
      break;
 8008f6e:	bf00      	nop
  }
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d101      	bne.n	8008f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e08d      	b.n	80090aa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d106      	bne.n	8008fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7fa fc42 	bl	800382c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2224      	movs	r2, #36	@ 0x24
 8008fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f022 0201 	bic.w	r2, r2, #1
 8008fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685a      	ldr	r2, [r3, #4]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008fcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689a      	ldr	r2, [r3, #8]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008fdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d107      	bne.n	8008ff6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	689a      	ldr	r2, [r3, #8]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ff2:	609a      	str	r2, [r3, #8]
 8008ff4:	e006      	b.n	8009004 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	689a      	ldr	r2, [r3, #8]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009002:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	2b02      	cmp	r3, #2
 800900a:	d108      	bne.n	800901e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800901a:	605a      	str	r2, [r3, #4]
 800901c:	e007      	b.n	800902e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	685a      	ldr	r2, [r3, #4]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800902c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	6812      	ldr	r2, [r2, #0]
 8009038:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800903c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009040:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68da      	ldr	r2, [r3, #12]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009050:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	691a      	ldr	r2, [r3, #16]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	695b      	ldr	r3, [r3, #20]
 800905a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	699b      	ldr	r3, [r3, #24]
 8009062:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	430a      	orrs	r2, r1
 800906a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	69d9      	ldr	r1, [r3, #28]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a1a      	ldr	r2, [r3, #32]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	430a      	orrs	r2, r1
 800907a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f042 0201 	orr.w	r2, r2, #1
 800908a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2220      	movs	r2, #32
 8009096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
	...

080090b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b088      	sub	sp, #32
 80090b8:	af02      	add	r7, sp, #8
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	4608      	mov	r0, r1
 80090be:	4611      	mov	r1, r2
 80090c0:	461a      	mov	r2, r3
 80090c2:	4603      	mov	r3, r0
 80090c4:	817b      	strh	r3, [r7, #10]
 80090c6:	460b      	mov	r3, r1
 80090c8:	813b      	strh	r3, [r7, #8]
 80090ca:	4613      	mov	r3, r2
 80090cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	2b20      	cmp	r3, #32
 80090d8:	f040 80fd 	bne.w	80092d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80090dc:	6a3b      	ldr	r3, [r7, #32]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d002      	beq.n	80090e8 <HAL_I2C_Mem_Read+0x34>
 80090e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d105      	bne.n	80090f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090ee:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e0f1      	b.n	80092d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d101      	bne.n	8009102 <HAL_I2C_Mem_Read+0x4e>
 80090fe:	2302      	movs	r3, #2
 8009100:	e0ea      	b.n	80092d8 <HAL_I2C_Mem_Read+0x224>
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2201      	movs	r2, #1
 8009106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800910a:	f7fb fabb 	bl	8004684 <HAL_GetTick>
 800910e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	2319      	movs	r3, #25
 8009116:	2201      	movs	r2, #1
 8009118:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f000 f95b 	bl	80093d8 <I2C_WaitOnFlagUntilTimeout>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e0d5      	b.n	80092d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2222      	movs	r2, #34	@ 0x22
 8009130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2240      	movs	r2, #64	@ 0x40
 8009138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6a3a      	ldr	r2, [r7, #32]
 8009146:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800914c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009154:	88f8      	ldrh	r0, [r7, #6]
 8009156:	893a      	ldrh	r2, [r7, #8]
 8009158:	8979      	ldrh	r1, [r7, #10]
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	9301      	str	r3, [sp, #4]
 800915e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	4603      	mov	r3, r0
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 f8bf 	bl	80092e8 <I2C_RequestMemoryRead>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d005      	beq.n	800917c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	e0ad      	b.n	80092d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009180:	b29b      	uxth	r3, r3
 8009182:	2bff      	cmp	r3, #255	@ 0xff
 8009184:	d90e      	bls.n	80091a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	22ff      	movs	r2, #255	@ 0xff
 800918a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009190:	b2da      	uxtb	r2, r3
 8009192:	8979      	ldrh	r1, [r7, #10]
 8009194:	4b52      	ldr	r3, [pc, #328]	@ (80092e0 <HAL_I2C_Mem_Read+0x22c>)
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f000 fadf 	bl	8009760 <I2C_TransferConfig>
 80091a2:	e00f      	b.n	80091c4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091b2:	b2da      	uxtb	r2, r3
 80091b4:	8979      	ldrh	r1, [r7, #10]
 80091b6:	4b4a      	ldr	r3, [pc, #296]	@ (80092e0 <HAL_I2C_Mem_Read+0x22c>)
 80091b8:	9300      	str	r3, [sp, #0]
 80091ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f000 face 	bl	8009760 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ca:	2200      	movs	r2, #0
 80091cc:	2104      	movs	r1, #4
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f000 f902 	bl	80093d8 <I2C_WaitOnFlagUntilTimeout>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d001      	beq.n	80091de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e07c      	b.n	80092d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091e8:	b2d2      	uxtb	r2, r2
 80091ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091f0:	1c5a      	adds	r2, r3, #1
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091fa:	3b01      	subs	r3, #1
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009206:	b29b      	uxth	r3, r3
 8009208:	3b01      	subs	r3, #1
 800920a:	b29a      	uxth	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009214:	b29b      	uxth	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d034      	beq.n	8009284 <HAL_I2C_Mem_Read+0x1d0>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800921e:	2b00      	cmp	r3, #0
 8009220:	d130      	bne.n	8009284 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009228:	2200      	movs	r2, #0
 800922a:	2180      	movs	r1, #128	@ 0x80
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 f8d3 	bl	80093d8 <I2C_WaitOnFlagUntilTimeout>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e04d      	b.n	80092d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009240:	b29b      	uxth	r3, r3
 8009242:	2bff      	cmp	r3, #255	@ 0xff
 8009244:	d90e      	bls.n	8009264 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	22ff      	movs	r2, #255	@ 0xff
 800924a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009250:	b2da      	uxtb	r2, r3
 8009252:	8979      	ldrh	r1, [r7, #10]
 8009254:	2300      	movs	r3, #0
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 fa7f 	bl	8009760 <I2C_TransferConfig>
 8009262:	e00f      	b.n	8009284 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009268:	b29a      	uxth	r2, r3
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009272:	b2da      	uxtb	r2, r3
 8009274:	8979      	ldrh	r1, [r7, #10]
 8009276:	2300      	movs	r3, #0
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 fa6e 	bl	8009760 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009288:	b29b      	uxth	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d19a      	bne.n	80091c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f000 f940 	bl	8009518 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d001      	beq.n	80092a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	e01a      	b.n	80092d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2220      	movs	r2, #32
 80092a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	6859      	ldr	r1, [r3, #4]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	4b0b      	ldr	r3, [pc, #44]	@ (80092e4 <HAL_I2C_Mem_Read+0x230>)
 80092b6:	400b      	ands	r3, r1
 80092b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2220      	movs	r2, #32
 80092be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	e000      	b.n	80092d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80092d6:	2302      	movs	r3, #2
  }
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3718      	adds	r7, #24
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	80002400 	.word	0x80002400
 80092e4:	fe00e800 	.word	0xfe00e800

080092e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af02      	add	r7, sp, #8
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	4608      	mov	r0, r1
 80092f2:	4611      	mov	r1, r2
 80092f4:	461a      	mov	r2, r3
 80092f6:	4603      	mov	r3, r0
 80092f8:	817b      	strh	r3, [r7, #10]
 80092fa:	460b      	mov	r3, r1
 80092fc:	813b      	strh	r3, [r7, #8]
 80092fe:	4613      	mov	r3, r2
 8009300:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009302:	88fb      	ldrh	r3, [r7, #6]
 8009304:	b2da      	uxtb	r2, r3
 8009306:	8979      	ldrh	r1, [r7, #10]
 8009308:	4b20      	ldr	r3, [pc, #128]	@ (800938c <I2C_RequestMemoryRead+0xa4>)
 800930a:	9300      	str	r3, [sp, #0]
 800930c:	2300      	movs	r3, #0
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f000 fa26 	bl	8009760 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009314:	69fa      	ldr	r2, [r7, #28]
 8009316:	69b9      	ldr	r1, [r7, #24]
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f000 f8b6 	bl	800948a <I2C_WaitOnTXISFlagUntilTimeout>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e02c      	b.n	8009382 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009328:	88fb      	ldrh	r3, [r7, #6]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d105      	bne.n	800933a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800932e:	893b      	ldrh	r3, [r7, #8]
 8009330:	b2da      	uxtb	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	629a      	str	r2, [r3, #40]	@ 0x28
 8009338:	e015      	b.n	8009366 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800933a:	893b      	ldrh	r3, [r7, #8]
 800933c:	0a1b      	lsrs	r3, r3, #8
 800933e:	b29b      	uxth	r3, r3
 8009340:	b2da      	uxtb	r2, r3
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009348:	69fa      	ldr	r2, [r7, #28]
 800934a:	69b9      	ldr	r1, [r7, #24]
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f000 f89c 	bl	800948a <I2C_WaitOnTXISFlagUntilTimeout>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	e012      	b.n	8009382 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800935c:	893b      	ldrh	r3, [r7, #8]
 800935e:	b2da      	uxtb	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	2200      	movs	r2, #0
 800936e:	2140      	movs	r1, #64	@ 0x40
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 f831 	bl	80093d8 <I2C_WaitOnFlagUntilTimeout>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e000      	b.n	8009382 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	80002000 	.word	0x80002000

08009390 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	f003 0302 	and.w	r3, r3, #2
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d103      	bne.n	80093ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2200      	movs	r2, #0
 80093ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	f003 0301 	and.w	r3, r3, #1
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d007      	beq.n	80093cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	699a      	ldr	r2, [r3, #24]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f042 0201 	orr.w	r2, r2, #1
 80093ca:	619a      	str	r2, [r3, #24]
  }
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	603b      	str	r3, [r7, #0]
 80093e4:	4613      	mov	r3, r2
 80093e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093e8:	e03b      	b.n	8009462 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80093ea:	69ba      	ldr	r2, [r7, #24]
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f000 f8d6 	bl	80095a0 <I2C_IsErrorOccurred>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d001      	beq.n	80093fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	e041      	b.n	8009482 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009404:	d02d      	beq.n	8009462 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009406:	f7fb f93d 	bl	8004684 <HAL_GetTick>
 800940a:	4602      	mov	r2, r0
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	683a      	ldr	r2, [r7, #0]
 8009412:	429a      	cmp	r2, r3
 8009414:	d302      	bcc.n	800941c <I2C_WaitOnFlagUntilTimeout+0x44>
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d122      	bne.n	8009462 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	699a      	ldr	r2, [r3, #24]
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	4013      	ands	r3, r2
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	429a      	cmp	r2, r3
 800942a:	bf0c      	ite	eq
 800942c:	2301      	moveq	r3, #1
 800942e:	2300      	movne	r3, #0
 8009430:	b2db      	uxtb	r3, r3
 8009432:	461a      	mov	r2, r3
 8009434:	79fb      	ldrb	r3, [r7, #7]
 8009436:	429a      	cmp	r2, r3
 8009438:	d113      	bne.n	8009462 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800943e:	f043 0220 	orr.w	r2, r3, #32
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2220      	movs	r2, #32
 800944a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2200      	movs	r2, #0
 8009452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e00f      	b.n	8009482 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	699a      	ldr	r2, [r3, #24]
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	4013      	ands	r3, r2
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	429a      	cmp	r2, r3
 8009470:	bf0c      	ite	eq
 8009472:	2301      	moveq	r3, #1
 8009474:	2300      	movne	r3, #0
 8009476:	b2db      	uxtb	r3, r3
 8009478:	461a      	mov	r2, r3
 800947a:	79fb      	ldrb	r3, [r7, #7]
 800947c:	429a      	cmp	r2, r3
 800947e:	d0b4      	beq.n	80093ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b084      	sub	sp, #16
 800948e:	af00      	add	r7, sp, #0
 8009490:	60f8      	str	r0, [r7, #12]
 8009492:	60b9      	str	r1, [r7, #8]
 8009494:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009496:	e033      	b.n	8009500 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	68b9      	ldr	r1, [r7, #8]
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f000 f87f 	bl	80095a0 <I2C_IsErrorOccurred>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e031      	b.n	8009510 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b2:	d025      	beq.n	8009500 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094b4:	f7fb f8e6 	bl	8004684 <HAL_GetTick>
 80094b8:	4602      	mov	r2, r0
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d302      	bcc.n	80094ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d11a      	bne.n	8009500 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	f003 0302 	and.w	r3, r3, #2
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d013      	beq.n	8009500 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094dc:	f043 0220 	orr.w	r2, r3, #32
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2220      	movs	r2, #32
 80094e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e007      	b.n	8009510 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	f003 0302 	and.w	r3, r3, #2
 800950a:	2b02      	cmp	r3, #2
 800950c:	d1c4      	bne.n	8009498 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009524:	e02f      	b.n	8009586 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	68b9      	ldr	r1, [r7, #8]
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f000 f838 	bl	80095a0 <I2C_IsErrorOccurred>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e02d      	b.n	8009596 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800953a:	f7fb f8a3 	bl	8004684 <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	429a      	cmp	r2, r3
 8009548:	d302      	bcc.n	8009550 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d11a      	bne.n	8009586 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	f003 0320 	and.w	r3, r3, #32
 800955a:	2b20      	cmp	r3, #32
 800955c:	d013      	beq.n	8009586 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009562:	f043 0220 	orr.w	r2, r3, #32
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2220      	movs	r2, #32
 800956e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e007      	b.n	8009596 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	f003 0320 	and.w	r3, r3, #32
 8009590:	2b20      	cmp	r3, #32
 8009592:	d1c8      	bne.n	8009526 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
	...

080095a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b08a      	sub	sp, #40	@ 0x28
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095ac:	2300      	movs	r3, #0
 80095ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	f003 0310 	and.w	r3, r3, #16
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d068      	beq.n	800969e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2210      	movs	r2, #16
 80095d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80095d4:	e049      	b.n	800966a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095dc:	d045      	beq.n	800966a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80095de:	f7fb f851 	bl	8004684 <HAL_GetTick>
 80095e2:	4602      	mov	r2, r0
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d302      	bcc.n	80095f4 <I2C_IsErrorOccurred+0x54>
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d13a      	bne.n	800966a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80095fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009606:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	699b      	ldr	r3, [r3, #24]
 800960e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009612:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009616:	d121      	bne.n	800965c <I2C_IsErrorOccurred+0xbc>
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800961e:	d01d      	beq.n	800965c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009620:	7cfb      	ldrb	r3, [r7, #19]
 8009622:	2b20      	cmp	r3, #32
 8009624:	d01a      	beq.n	800965c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009634:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009636:	f7fb f825 	bl	8004684 <HAL_GetTick>
 800963a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800963c:	e00e      	b.n	800965c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800963e:	f7fb f821 	bl	8004684 <HAL_GetTick>
 8009642:	4602      	mov	r2, r0
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	2b19      	cmp	r3, #25
 800964a:	d907      	bls.n	800965c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800964c:	6a3b      	ldr	r3, [r7, #32]
 800964e:	f043 0320 	orr.w	r3, r3, #32
 8009652:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800965a:	e006      	b.n	800966a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	f003 0320 	and.w	r3, r3, #32
 8009666:	2b20      	cmp	r3, #32
 8009668:	d1e9      	bne.n	800963e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	f003 0320 	and.w	r3, r3, #32
 8009674:	2b20      	cmp	r3, #32
 8009676:	d003      	beq.n	8009680 <I2C_IsErrorOccurred+0xe0>
 8009678:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800967c:	2b00      	cmp	r3, #0
 800967e:	d0aa      	beq.n	80095d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009684:	2b00      	cmp	r3, #0
 8009686:	d103      	bne.n	8009690 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2220      	movs	r2, #32
 800968e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	f043 0304 	orr.w	r3, r3, #4
 8009696:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00b      	beq.n	80096c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80096b0:	6a3b      	ldr	r3, [r7, #32]
 80096b2:	f043 0301 	orr.w	r3, r3, #1
 80096b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80096c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00b      	beq.n	80096ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80096d2:	6a3b      	ldr	r3, [r7, #32]
 80096d4:	f043 0308 	orr.w	r3, r3, #8
 80096d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80096e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00b      	beq.n	800970c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80096f4:	6a3b      	ldr	r3, [r7, #32]
 80096f6:	f043 0302 	orr.w	r3, r3, #2
 80096fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009704:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800970c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009710:	2b00      	cmp	r3, #0
 8009712:	d01c      	beq.n	800974e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f7ff fe3b 	bl	8009390 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	6859      	ldr	r1, [r3, #4]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	4b0d      	ldr	r3, [pc, #52]	@ (800975c <I2C_IsErrorOccurred+0x1bc>)
 8009726:	400b      	ands	r3, r1
 8009728:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800972e:	6a3b      	ldr	r3, [r7, #32]
 8009730:	431a      	orrs	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2220      	movs	r2, #32
 800973a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800974e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009752:	4618      	mov	r0, r3
 8009754:	3728      	adds	r7, #40	@ 0x28
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	fe00e800 	.word	0xfe00e800

08009760 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009760:	b480      	push	{r7}
 8009762:	b087      	sub	sp, #28
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	607b      	str	r3, [r7, #4]
 800976a:	460b      	mov	r3, r1
 800976c:	817b      	strh	r3, [r7, #10]
 800976e:	4613      	mov	r3, r2
 8009770:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009772:	897b      	ldrh	r3, [r7, #10]
 8009774:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009778:	7a7b      	ldrb	r3, [r7, #9]
 800977a:	041b      	lsls	r3, r3, #16
 800977c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009780:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	4313      	orrs	r3, r2
 800978a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800978e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	0d5b      	lsrs	r3, r3, #21
 800979a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800979e:	4b08      	ldr	r3, [pc, #32]	@ (80097c0 <I2C_TransferConfig+0x60>)
 80097a0:	430b      	orrs	r3, r1
 80097a2:	43db      	mvns	r3, r3
 80097a4:	ea02 0103 	and.w	r1, r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80097b2:	bf00      	nop
 80097b4:	371c      	adds	r7, #28
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	03ff63ff 	.word	0x03ff63ff

080097c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b20      	cmp	r3, #32
 80097d8:	d138      	bne.n	800984c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d101      	bne.n	80097e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80097e4:	2302      	movs	r3, #2
 80097e6:	e032      	b.n	800984e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2224      	movs	r2, #36	@ 0x24
 80097f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f022 0201 	bic.w	r2, r2, #1
 8009806:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009816:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	6819      	ldr	r1, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	430a      	orrs	r2, r1
 8009826:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f042 0201 	orr.w	r2, r2, #1
 8009836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2220      	movs	r2, #32
 800983c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	e000      	b.n	800984e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800984c:	2302      	movs	r3, #2
  }
}
 800984e:	4618      	mov	r0, r3
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800985a:	b480      	push	{r7}
 800985c:	b085      	sub	sp, #20
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b20      	cmp	r3, #32
 800986e:	d139      	bne.n	80098e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009876:	2b01      	cmp	r3, #1
 8009878:	d101      	bne.n	800987e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800987a:	2302      	movs	r3, #2
 800987c:	e033      	b.n	80098e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2224      	movs	r2, #36	@ 0x24
 800988a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f022 0201 	bic.w	r2, r2, #1
 800989c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80098ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	021b      	lsls	r3, r3, #8
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	4313      	orrs	r3, r2
 80098b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f042 0201 	orr.w	r2, r2, #1
 80098ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2220      	movs	r2, #32
 80098d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	e000      	b.n	80098e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80098e4:	2302      	movs	r3, #2
  }
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3714      	adds	r7, #20
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
	...

080098f4 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e0bb      	b.n	8009a82 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b05      	cmp	r3, #5
 8009914:	d101      	bne.n	800991a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	e0b3      	b.n	8009a82 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b02      	cmp	r3, #2
 8009924:	d101      	bne.n	800992a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e0ab      	b.n	8009a82 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800992a:	4b58      	ldr	r3, [pc, #352]	@ (8009a8c <HAL_OPAMP_Init+0x198>)
 800992c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800992e:	4a57      	ldr	r2, [pc, #348]	@ (8009a8c <HAL_OPAMP_Init+0x198>)
 8009930:	f043 0301 	orr.w	r3, r3, #1
 8009934:	6613      	str	r3, [r2, #96]	@ 0x60
 8009936:	4b55      	ldr	r3, [pc, #340]	@ (8009a8c <HAL_OPAMP_Init+0x198>)
 8009938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	60bb      	str	r3, [r7, #8]
 8009940:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b00      	cmp	r3, #0
 800994c:	d103      	bne.n	8009956 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7fa f81c 	bl	8003994 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	2b40      	cmp	r3, #64	@ 0x40
 8009962:	d003      	beq.n	800996c <HAL_OPAMP_Init+0x78>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	2b60      	cmp	r3, #96	@ 0x60
 800996a:	d133      	bne.n	80099d4 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f023 0110 	bic.w	r1, r3, #16
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	430a      	orrs	r2, r1
 8009980:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	4b41      	ldr	r3, [pc, #260]	@ (8009a90 <HAL_OPAMP_Init+0x19c>)
 800998a:	4013      	ands	r3, r2
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	6851      	ldr	r1, [r2, #4]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	6892      	ldr	r2, [r2, #8]
 8009994:	4311      	orrs	r1, r2
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	6912      	ldr	r2, [r2, #16]
 800999a:	430a      	orrs	r2, r1
 800999c:	6879      	ldr	r1, [r7, #4]
 800999e:	7d09      	ldrb	r1, [r1, #20]
 80099a0:	2901      	cmp	r1, #1
 80099a2:	d102      	bne.n	80099aa <HAL_OPAMP_Init+0xb6>
 80099a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80099a8:	e000      	b.n	80099ac <HAL_OPAMP_Init+0xb8>
 80099aa:	2100      	movs	r1, #0
 80099ac:	4311      	orrs	r1, r2
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80099b2:	4311      	orrs	r1, r2
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80099b8:	4311      	orrs	r1, r2
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80099be:	04d2      	lsls	r2, r2, #19
 80099c0:	4311      	orrs	r1, r2
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80099c6:	0612      	lsls	r2, r2, #24
 80099c8:	4311      	orrs	r1, r2
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	6812      	ldr	r2, [r2, #0]
 80099ce:	430b      	orrs	r3, r1
 80099d0:	6013      	str	r3, [r2, #0]
 80099d2:	e035      	b.n	8009a40 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f023 0110 	bic.w	r1, r3, #16
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	430a      	orrs	r2, r1
 80099e8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	4b27      	ldr	r3, [pc, #156]	@ (8009a90 <HAL_OPAMP_Init+0x19c>)
 80099f2:	4013      	ands	r3, r2
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	6851      	ldr	r1, [r2, #4]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	6892      	ldr	r2, [r2, #8]
 80099fc:	4311      	orrs	r1, r2
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	68d2      	ldr	r2, [r2, #12]
 8009a02:	4311      	orrs	r1, r2
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	6912      	ldr	r2, [r2, #16]
 8009a08:	430a      	orrs	r2, r1
 8009a0a:	6879      	ldr	r1, [r7, #4]
 8009a0c:	7d09      	ldrb	r1, [r1, #20]
 8009a0e:	2901      	cmp	r1, #1
 8009a10:	d102      	bne.n	8009a18 <HAL_OPAMP_Init+0x124>
 8009a12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009a16:	e000      	b.n	8009a1a <HAL_OPAMP_Init+0x126>
 8009a18:	2100      	movs	r1, #0
 8009a1a:	4311      	orrs	r1, r2
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009a20:	4311      	orrs	r1, r2
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009a26:	4311      	orrs	r1, r2
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009a2c:	04d2      	lsls	r2, r2, #19
 8009a2e:	4311      	orrs	r1, r2
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009a34:	0612      	lsls	r2, r2, #24
 8009a36:	4311      	orrs	r1, r2
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	6812      	ldr	r2, [r2, #0]
 8009a3c:	430b      	orrs	r3, r1
 8009a3e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	db10      	blt.n	8009a6c <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	699a      	ldr	r2, [r3, #24]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	69db      	ldr	r3, [r3, #28]
 8009a5c:	431a      	orrs	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	431a      	orrs	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d103      	bne.n	8009a80 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	40021000 	.word	0x40021000
 8009a90:	e0003e11 	.word	0xe0003e11

08009a94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d101      	bne.n	8009aa6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e0c0      	b.n	8009c28 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d106      	bne.n	8009ac0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f009 fc62 	bl	8013384 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2203      	movs	r2, #3
 8009ac4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f005 ffe6 	bl	800fa9e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	73fb      	strb	r3, [r7, #15]
 8009ad6:	e03e      	b.n	8009b56 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009ad8:	7bfa      	ldrb	r2, [r7, #15]
 8009ada:	6879      	ldr	r1, [r7, #4]
 8009adc:	4613      	mov	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	00db      	lsls	r3, r3, #3
 8009ae4:	440b      	add	r3, r1
 8009ae6:	3311      	adds	r3, #17
 8009ae8:	2201      	movs	r2, #1
 8009aea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009aec:	7bfa      	ldrb	r2, [r7, #15]
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	4613      	mov	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4413      	add	r3, r2
 8009af6:	00db      	lsls	r3, r3, #3
 8009af8:	440b      	add	r3, r1
 8009afa:	3310      	adds	r3, #16
 8009afc:	7bfa      	ldrb	r2, [r7, #15]
 8009afe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009b00:	7bfa      	ldrb	r2, [r7, #15]
 8009b02:	6879      	ldr	r1, [r7, #4]
 8009b04:	4613      	mov	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	4413      	add	r3, r2
 8009b0a:	00db      	lsls	r3, r3, #3
 8009b0c:	440b      	add	r3, r1
 8009b0e:	3313      	adds	r3, #19
 8009b10:	2200      	movs	r2, #0
 8009b12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009b14:	7bfa      	ldrb	r2, [r7, #15]
 8009b16:	6879      	ldr	r1, [r7, #4]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	4413      	add	r3, r2
 8009b1e:	00db      	lsls	r3, r3, #3
 8009b20:	440b      	add	r3, r1
 8009b22:	3320      	adds	r3, #32
 8009b24:	2200      	movs	r2, #0
 8009b26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009b28:	7bfa      	ldrb	r2, [r7, #15]
 8009b2a:	6879      	ldr	r1, [r7, #4]
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4413      	add	r3, r2
 8009b32:	00db      	lsls	r3, r3, #3
 8009b34:	440b      	add	r3, r1
 8009b36:	3324      	adds	r3, #36	@ 0x24
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009b3c:	7bfb      	ldrb	r3, [r7, #15]
 8009b3e:	6879      	ldr	r1, [r7, #4]
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	4613      	mov	r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4413      	add	r3, r2
 8009b48:	00db      	lsls	r3, r3, #3
 8009b4a:	440b      	add	r3, r1
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
 8009b52:	3301      	adds	r3, #1
 8009b54:	73fb      	strb	r3, [r7, #15]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	791b      	ldrb	r3, [r3, #4]
 8009b5a:	7bfa      	ldrb	r2, [r7, #15]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d3bb      	bcc.n	8009ad8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b60:	2300      	movs	r3, #0
 8009b62:	73fb      	strb	r3, [r7, #15]
 8009b64:	e044      	b.n	8009bf0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009b66:	7bfa      	ldrb	r2, [r7, #15]
 8009b68:	6879      	ldr	r1, [r7, #4]
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	4413      	add	r3, r2
 8009b70:	00db      	lsls	r3, r3, #3
 8009b72:	440b      	add	r3, r1
 8009b74:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8009b78:	2200      	movs	r2, #0
 8009b7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009b7c:	7bfa      	ldrb	r2, [r7, #15]
 8009b7e:	6879      	ldr	r1, [r7, #4]
 8009b80:	4613      	mov	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4413      	add	r3, r2
 8009b86:	00db      	lsls	r3, r3, #3
 8009b88:	440b      	add	r3, r1
 8009b8a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009b8e:	7bfa      	ldrb	r2, [r7, #15]
 8009b90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009b92:	7bfa      	ldrb	r2, [r7, #15]
 8009b94:	6879      	ldr	r1, [r7, #4]
 8009b96:	4613      	mov	r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4413      	add	r3, r2
 8009b9c:	00db      	lsls	r3, r3, #3
 8009b9e:	440b      	add	r3, r1
 8009ba0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009ba8:	7bfa      	ldrb	r2, [r7, #15]
 8009baa:	6879      	ldr	r1, [r7, #4]
 8009bac:	4613      	mov	r3, r2
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	4413      	add	r3, r2
 8009bb2:	00db      	lsls	r3, r3, #3
 8009bb4:	440b      	add	r3, r1
 8009bb6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8009bba:	2200      	movs	r2, #0
 8009bbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009bbe:	7bfa      	ldrb	r2, [r7, #15]
 8009bc0:	6879      	ldr	r1, [r7, #4]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	00db      	lsls	r3, r3, #3
 8009bca:	440b      	add	r3, r1
 8009bcc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009bd4:	7bfa      	ldrb	r2, [r7, #15]
 8009bd6:	6879      	ldr	r1, [r7, #4]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	4413      	add	r3, r2
 8009bde:	00db      	lsls	r3, r3, #3
 8009be0:	440b      	add	r3, r1
 8009be2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8009be6:	2200      	movs	r2, #0
 8009be8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
 8009bec:	3301      	adds	r3, #1
 8009bee:	73fb      	strb	r3, [r7, #15]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	791b      	ldrb	r3, [r3, #4]
 8009bf4:	7bfa      	ldrb	r2, [r7, #15]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d3b5      	bcc.n	8009b66 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6818      	ldr	r0, [r3, #0]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	3304      	adds	r3, #4
 8009c02:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009c06:	f005 ff65 	bl	800fad4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	7a9b      	ldrb	r3, [r3, #10]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d102      	bne.n	8009c26 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f001 fc0e 	bl	800b442 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d101      	bne.n	8009c46 <HAL_PCD_Start+0x16>
 8009c42:	2302      	movs	r3, #2
 8009c44:	e012      	b.n	8009c6c <HAL_PCD_Start+0x3c>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f005 ff0c 	bl	800fa70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f007 fce9 	bl	8011634 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f007 fcee 	bl	8011662 <USB_ReadInterrupts>
 8009c86:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d003      	beq.n	8009c9a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fb06 	bl	800a2a4 <PCD_EP_ISR_Handler>

    return;
 8009c98:	e110      	b.n	8009ebc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d013      	beq.n	8009ccc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009cb6:	b292      	uxth	r2, r2
 8009cb8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f009 fbf2 	bl	80134a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 f8fc 	bl	8009ec2 <HAL_PCD_SetAddress>

    return;
 8009cca:	e0f7      	b.n	8009ebc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00c      	beq.n	8009cf0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009ce8:	b292      	uxth	r2, r2
 8009cea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009cee:	e0e5      	b.n	8009ebc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00c      	beq.n	8009d14 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009d0c:	b292      	uxth	r2, r2
 8009d0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009d12:	e0d3      	b.n	8009ebc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d034      	beq.n	8009d88 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f022 0204 	bic.w	r2, r2, #4
 8009d30:	b292      	uxth	r2, r2
 8009d32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f022 0208 	bic.w	r2, r2, #8
 8009d48:	b292      	uxth	r2, r2
 8009d4a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d107      	bne.n	8009d68 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009d60:	2100      	movs	r1, #0
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f009 fd92 	bl	801388c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f009 fbd5 	bl	8013518 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009d80:	b292      	uxth	r2, r2
 8009d82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009d86:	e099      	b.n	8009ebc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d027      	beq.n	8009de2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f042 0208 	orr.w	r2, r2, #8
 8009da4:	b292      	uxth	r2, r2
 8009da6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009dbc:	b292      	uxth	r2, r2
 8009dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f042 0204 	orr.w	r2, r2, #4
 8009dd4:	b292      	uxth	r2, r2
 8009dd6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f009 fb82 	bl	80134e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009de0:	e06c      	b.n	8009ebc <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d040      	beq.n	8009e6e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009dfe:	b292      	uxth	r2, r2
 8009e00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d12b      	bne.n	8009e66 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f042 0204 	orr.w	r2, r2, #4
 8009e20:	b292      	uxth	r2, r2
 8009e22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f042 0208 	orr.w	r2, r2, #8
 8009e38:	b292      	uxth	r2, r2
 8009e3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	089b      	lsrs	r3, r3, #2
 8009e52:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009e5c:	2101      	movs	r1, #1
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f009 fd14 	bl	801388c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8009e64:	e02a      	b.n	8009ebc <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f009 fb3c 	bl	80134e4 <HAL_PCD_SuspendCallback>
    return;
 8009e6c:	e026      	b.n	8009ebc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00f      	beq.n	8009e98 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009e8a:	b292      	uxth	r2, r2
 8009e8c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f009 fafa 	bl	801348a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009e96:	e011      	b.n	8009ebc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00c      	beq.n	8009ebc <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009eb4:	b292      	uxth	r2, r2
 8009eb6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009eba:	bf00      	nop
  }
}
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b082      	sub	sp, #8
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	460b      	mov	r3, r1
 8009ecc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d101      	bne.n	8009edc <HAL_PCD_SetAddress+0x1a>
 8009ed8:	2302      	movs	r3, #2
 8009eda:	e012      	b.n	8009f02 <HAL_PCD_SetAddress+0x40>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	78fa      	ldrb	r2, [r7, #3]
 8009ee8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	78fa      	ldrb	r2, [r7, #3]
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f007 fb8a 	bl	801160c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b084      	sub	sp, #16
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	4608      	mov	r0, r1
 8009f14:	4611      	mov	r1, r2
 8009f16:	461a      	mov	r2, r3
 8009f18:	4603      	mov	r3, r0
 8009f1a:	70fb      	strb	r3, [r7, #3]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	803b      	strh	r3, [r7, #0]
 8009f20:	4613      	mov	r3, r2
 8009f22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	da0e      	bge.n	8009f4e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f30:	78fb      	ldrb	r3, [r7, #3]
 8009f32:	f003 0207 	and.w	r2, r3, #7
 8009f36:	4613      	mov	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	00db      	lsls	r3, r3, #3
 8009f3e:	3310      	adds	r3, #16
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	4413      	add	r3, r2
 8009f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	705a      	strb	r2, [r3, #1]
 8009f4c:	e00e      	b.n	8009f6c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f4e:	78fb      	ldrb	r3, [r7, #3]
 8009f50:	f003 0207 	and.w	r2, r3, #7
 8009f54:	4613      	mov	r3, r2
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4413      	add	r3, r2
 8009f5a:	00db      	lsls	r3, r3, #3
 8009f5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	4413      	add	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009f6c:	78fb      	ldrb	r3, [r7, #3]
 8009f6e:	f003 0307 	and.w	r3, r3, #7
 8009f72:	b2da      	uxtb	r2, r3
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8009f78:	883b      	ldrh	r3, [r7, #0]
 8009f7a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	78ba      	ldrb	r2, [r7, #2]
 8009f86:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009f88:	78bb      	ldrb	r3, [r7, #2]
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d102      	bne.n	8009f94 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d101      	bne.n	8009fa2 <HAL_PCD_EP_Open+0x98>
 8009f9e:	2302      	movs	r3, #2
 8009fa0:	e00e      	b.n	8009fc0 <HAL_PCD_EP_Open+0xb6>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68f9      	ldr	r1, [r7, #12]
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f005 fdad 	bl	800fb10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8009fbe:	7afb      	ldrb	r3, [r7, #11]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3710      	adds	r7, #16
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009fd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	da0e      	bge.n	8009ffa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009fdc:	78fb      	ldrb	r3, [r7, #3]
 8009fde:	f003 0207 	and.w	r2, r3, #7
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	00db      	lsls	r3, r3, #3
 8009fea:	3310      	adds	r3, #16
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	4413      	add	r3, r2
 8009ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	705a      	strb	r2, [r3, #1]
 8009ff8:	e00e      	b.n	800a018 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009ffa:	78fb      	ldrb	r3, [r7, #3]
 8009ffc:	f003 0207 	and.w	r2, r3, #7
 800a000:	4613      	mov	r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4413      	add	r3, r2
 800a006:	00db      	lsls	r3, r3, #3
 800a008:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	4413      	add	r3, r2
 800a010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a018:	78fb      	ldrb	r3, [r7, #3]
 800a01a:	f003 0307 	and.w	r3, r3, #7
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d101      	bne.n	800a032 <HAL_PCD_EP_Close+0x6a>
 800a02e:	2302      	movs	r3, #2
 800a030:	e00e      	b.n	800a050 <HAL_PCD_EP_Close+0x88>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68f9      	ldr	r1, [r7, #12]
 800a040:	4618      	mov	r0, r3
 800a042:	f006 fa4d 	bl	80104e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	607a      	str	r2, [r7, #4]
 800a062:	603b      	str	r3, [r7, #0]
 800a064:	460b      	mov	r3, r1
 800a066:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a068:	7afb      	ldrb	r3, [r7, #11]
 800a06a:	f003 0207 	and.w	r2, r3, #7
 800a06e:	4613      	mov	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	00db      	lsls	r3, r3, #3
 800a076:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	4413      	add	r3, r2
 800a07e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	2200      	movs	r2, #0
 800a090:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	2200      	movs	r2, #0
 800a096:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a098:	7afb      	ldrb	r3, [r7, #11]
 800a09a:	f003 0307 	and.w	r3, r3, #7
 800a09e:	b2da      	uxtb	r2, r3
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	6979      	ldr	r1, [r7, #20]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f006 fc05 	bl	80108ba <USB_EPStartXfer>

  return HAL_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a0ba:	b480      	push	{r7}
 800a0bc:	b083      	sub	sp, #12
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a0c6:	78fb      	ldrb	r3, [r7, #3]
 800a0c8:	f003 0207 	and.w	r2, r3, #7
 800a0cc:	6879      	ldr	r1, [r7, #4]
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	4413      	add	r3, r2
 800a0d4:	00db      	lsls	r3, r3, #3
 800a0d6:	440b      	add	r3, r1
 800a0d8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800a0dc:	681b      	ldr	r3, [r3, #0]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	370c      	adds	r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b086      	sub	sp, #24
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	60f8      	str	r0, [r7, #12]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	603b      	str	r3, [r7, #0]
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a0fa:	7afb      	ldrb	r3, [r7, #11]
 800a0fc:	f003 0207 	and.w	r2, r3, #7
 800a100:	4613      	mov	r3, r2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4413      	add	r3, r2
 800a106:	00db      	lsls	r3, r3, #3
 800a108:	3310      	adds	r3, #16
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	4413      	add	r3, r2
 800a10e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	683a      	ldr	r2, [r7, #0]
 800a11a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	2201      	movs	r2, #1
 800a120:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	2200      	movs	r2, #0
 800a12e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	2201      	movs	r2, #1
 800a134:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a136:	7afb      	ldrb	r3, [r7, #11]
 800a138:	f003 0307 	and.w	r3, r3, #7
 800a13c:	b2da      	uxtb	r2, r3
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	6979      	ldr	r1, [r7, #20]
 800a148:	4618      	mov	r0, r3
 800a14a:	f006 fbb6 	bl	80108ba <USB_EPStartXfer>

  return HAL_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3718      	adds	r7, #24
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	460b      	mov	r3, r1
 800a162:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a164:	78fb      	ldrb	r3, [r7, #3]
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	7912      	ldrb	r2, [r2, #4]
 800a16e:	4293      	cmp	r3, r2
 800a170:	d901      	bls.n	800a176 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e03e      	b.n	800a1f4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a176:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	da0e      	bge.n	800a19c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a17e:	78fb      	ldrb	r3, [r7, #3]
 800a180:	f003 0207 	and.w	r2, r3, #7
 800a184:	4613      	mov	r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4413      	add	r3, r2
 800a18a:	00db      	lsls	r3, r3, #3
 800a18c:	3310      	adds	r3, #16
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	4413      	add	r3, r2
 800a192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2201      	movs	r2, #1
 800a198:	705a      	strb	r2, [r3, #1]
 800a19a:	e00c      	b.n	800a1b6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a19c:	78fa      	ldrb	r2, [r7, #3]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	00db      	lsls	r3, r3, #3
 800a1a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a1bc:	78fb      	ldrb	r3, [r7, #3]
 800a1be:	f003 0307 	and.w	r3, r3, #7
 800a1c2:	b2da      	uxtb	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d101      	bne.n	800a1d6 <HAL_PCD_EP_SetStall+0x7e>
 800a1d2:	2302      	movs	r3, #2
 800a1d4:	e00e      	b.n	800a1f4 <HAL_PCD_EP_SetStall+0x9c>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68f9      	ldr	r1, [r7, #12]
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f007 f917 	bl	8011418 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	460b      	mov	r3, r1
 800a206:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a208:	78fb      	ldrb	r3, [r7, #3]
 800a20a:	f003 030f 	and.w	r3, r3, #15
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	7912      	ldrb	r2, [r2, #4]
 800a212:	4293      	cmp	r3, r2
 800a214:	d901      	bls.n	800a21a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e040      	b.n	800a29c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a21a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	da0e      	bge.n	800a240 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a222:	78fb      	ldrb	r3, [r7, #3]
 800a224:	f003 0207 	and.w	r2, r3, #7
 800a228:	4613      	mov	r3, r2
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4413      	add	r3, r2
 800a22e:	00db      	lsls	r3, r3, #3
 800a230:	3310      	adds	r3, #16
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	4413      	add	r3, r2
 800a236:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2201      	movs	r2, #1
 800a23c:	705a      	strb	r2, [r3, #1]
 800a23e:	e00e      	b.n	800a25e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a240:	78fb      	ldrb	r3, [r7, #3]
 800a242:	f003 0207 	and.w	r2, r3, #7
 800a246:	4613      	mov	r3, r2
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	4413      	add	r3, r2
 800a24c:	00db      	lsls	r3, r3, #3
 800a24e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	4413      	add	r3, r2
 800a256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2200      	movs	r2, #0
 800a25c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a264:	78fb      	ldrb	r3, [r7, #3]
 800a266:	f003 0307 	and.w	r3, r3, #7
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a276:	2b01      	cmp	r3, #1
 800a278:	d101      	bne.n	800a27e <HAL_PCD_EP_ClrStall+0x82>
 800a27a:	2302      	movs	r3, #2
 800a27c:	e00e      	b.n	800a29c <HAL_PCD_EP_ClrStall+0xa0>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2201      	movs	r2, #1
 800a282:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	68f9      	ldr	r1, [r7, #12]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f007 f914 	bl	80114ba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b092      	sub	sp, #72	@ 0x48
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a2ac:	e333      	b.n	800a916 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a2b6:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a2b8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	f003 030f 	and.w	r3, r3, #15
 800a2c0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800a2c4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f040 8108 	bne.w	800a4de <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a2ce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a2d0:	f003 0310 	and.w	r3, r3, #16
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d14c      	bne.n	800a372 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	881b      	ldrh	r3, [r3, #0]
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800a2e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2e8:	813b      	strh	r3, [r7, #8]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	893b      	ldrh	r3, [r7, #8]
 800a2f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	3310      	adds	r3, #16
 800a300:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	461a      	mov	r2, r3
 800a30e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	00db      	lsls	r3, r3, #3
 800a314:	4413      	add	r3, r2
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	6812      	ldr	r2, [r2, #0]
 800a31a:	4413      	add	r3, r2
 800a31c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a320:	881b      	ldrh	r3, [r3, #0]
 800a322:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a328:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a32a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a32c:	695a      	ldr	r2, [r3, #20]
 800a32e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a330:	69db      	ldr	r3, [r3, #28]
 800a332:	441a      	add	r2, r3
 800a334:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a336:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a338:	2100      	movs	r1, #0
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f009 f88b 	bl	8013456 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	7b1b      	ldrb	r3, [r3, #12]
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b00      	cmp	r3, #0
 800a348:	f000 82e5 	beq.w	800a916 <PCD_EP_ISR_Handler+0x672>
 800a34c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	2b00      	cmp	r3, #0
 800a352:	f040 82e0 	bne.w	800a916 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	7b1b      	ldrb	r3, [r3, #12]
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a360:	b2da      	uxtb	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	731a      	strb	r2, [r3, #12]
 800a370:	e2d1      	b.n	800a916 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a378:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a382:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a384:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d032      	beq.n	800a3f2 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a394:	b29b      	uxth	r3, r3
 800a396:	461a      	mov	r2, r3
 800a398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	00db      	lsls	r3, r3, #3
 800a39e:	4413      	add	r3, r2
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	6812      	ldr	r2, [r2, #0]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a3aa:	881b      	ldrh	r3, [r3, #0]
 800a3ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a3b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3b2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6818      	ldr	r0, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800a3be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3c0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a3c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3c4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	f007 f99d 	bl	8011706 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	881b      	ldrh	r3, [r3, #0]
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a3d8:	4013      	ands	r3, r2
 800a3da:	817b      	strh	r3, [r7, #10]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	897a      	ldrh	r2, [r7, #10]
 800a3e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a3e6:	b292      	uxth	r2, r2
 800a3e8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f009 f806 	bl	80133fc <HAL_PCD_SetupStageCallback>
 800a3f0:	e291      	b.n	800a916 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a3f2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f280 828d 	bge.w	800a916 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	881b      	ldrh	r3, [r3, #0]
 800a402:	b29a      	uxth	r2, r3
 800a404:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a408:	4013      	ands	r3, r2
 800a40a:	81fb      	strh	r3, [r7, #14]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	89fa      	ldrh	r2, [r7, #14]
 800a412:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a416:	b292      	uxth	r2, r2
 800a418:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a422:	b29b      	uxth	r3, r3
 800a424:	461a      	mov	r2, r3
 800a426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	00db      	lsls	r3, r3, #3
 800a42c:	4413      	add	r3, r2
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	6812      	ldr	r2, [r2, #0]
 800a432:	4413      	add	r3, r2
 800a434:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a438:	881b      	ldrh	r3, [r3, #0]
 800a43a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a43e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a440:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800a442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a444:	69db      	ldr	r3, [r3, #28]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d019      	beq.n	800a47e <PCD_EP_ISR_Handler+0x1da>
 800a44a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a44c:	695b      	ldr	r3, [r3, #20]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d015      	beq.n	800a47e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6818      	ldr	r0, [r3, #0]
 800a456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a458:	6959      	ldr	r1, [r3, #20]
 800a45a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a45c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a45e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a460:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a462:	b29b      	uxth	r3, r3
 800a464:	f007 f94f 	bl	8011706 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a46a:	695a      	ldr	r2, [r3, #20]
 800a46c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a46e:	69db      	ldr	r3, [r3, #28]
 800a470:	441a      	add	r2, r3
 800a472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a474:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a476:	2100      	movs	r1, #0
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f008 ffd1 	bl	8013420 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	881b      	ldrh	r3, [r3, #0]
 800a484:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800a486:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a488:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f040 8242 	bne.w	800a916 <PCD_EP_ISR_Handler+0x672>
 800a492:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a494:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a498:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a49c:	f000 823b 	beq.w	800a916 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	881b      	ldrh	r3, [r3, #0]
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a4ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4b0:	81bb      	strh	r3, [r7, #12]
 800a4b2:	89bb      	ldrh	r3, [r7, #12]
 800a4b4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a4b8:	81bb      	strh	r3, [r7, #12]
 800a4ba:	89bb      	ldrh	r3, [r7, #12]
 800a4bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a4c0:	81bb      	strh	r3, [r7, #12]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	89bb      	ldrh	r3, [r7, #12]
 800a4c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	8013      	strh	r3, [r2, #0]
 800a4dc:	e21b      	b.n	800a916 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	881b      	ldrh	r3, [r3, #0]
 800a4ee:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a4f0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f280 80f1 	bge.w	800a6dc <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	461a      	mov	r2, r3
 800a500:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4413      	add	r3, r2
 800a508:	881b      	ldrh	r3, [r3, #0]
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a510:	4013      	ands	r3, r2
 800a512:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	461a      	mov	r2, r3
 800a51a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	4413      	add	r3, r2
 800a522:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a524:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a528:	b292      	uxth	r2, r2
 800a52a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a52c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800a530:	4613      	mov	r3, r2
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	4413      	add	r3, r2
 800a536:	00db      	lsls	r3, r3, #3
 800a538:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	4413      	add	r3, r2
 800a540:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a544:	7b1b      	ldrb	r3, [r3, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d123      	bne.n	800a592 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a552:	b29b      	uxth	r3, r3
 800a554:	461a      	mov	r2, r3
 800a556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	00db      	lsls	r3, r3, #3
 800a55c:	4413      	add	r3, r2
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	6812      	ldr	r2, [r2, #0]
 800a562:	4413      	add	r3, r2
 800a564:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a568:	881b      	ldrh	r3, [r3, #0]
 800a56a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a56e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800a572:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a576:	2b00      	cmp	r3, #0
 800a578:	f000 808b 	beq.w	800a692 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6818      	ldr	r0, [r3, #0]
 800a580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a582:	6959      	ldr	r1, [r3, #20]
 800a584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a586:	88da      	ldrh	r2, [r3, #6]
 800a588:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a58c:	f007 f8bb 	bl	8011706 <USB_ReadPMA>
 800a590:	e07f      	b.n	800a692 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a592:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a594:	78db      	ldrb	r3, [r3, #3]
 800a596:	2b02      	cmp	r3, #2
 800a598:	d109      	bne.n	800a5ae <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a59a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a59c:	461a      	mov	r2, r3
 800a59e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 f9c6 	bl	800a932 <HAL_PCD_EP_DB_Receive>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a5ac:	e071      	b.n	800a692 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	4413      	add	r3, r2
 800a5bc:	881b      	ldrh	r3, [r3, #0]
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5c8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	441a      	add	r2, r3
 800a5d8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a5da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	4413      	add	r3, r2
 800a5fc:	881b      	ldrh	r3, [r3, #0]
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a604:	2b00      	cmp	r3, #0
 800a606:	d022      	beq.n	800a64e <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a610:	b29b      	uxth	r3, r3
 800a612:	461a      	mov	r2, r3
 800a614:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	00db      	lsls	r3, r3, #3
 800a61a:	4413      	add	r3, r2
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	6812      	ldr	r2, [r2, #0]
 800a620:	4413      	add	r3, r2
 800a622:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a626:	881b      	ldrh	r3, [r3, #0]
 800a628:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a62c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800a630:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a634:	2b00      	cmp	r3, #0
 800a636:	d02c      	beq.n	800a692 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6818      	ldr	r0, [r3, #0]
 800a63c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a63e:	6959      	ldr	r1, [r3, #20]
 800a640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a642:	891a      	ldrh	r2, [r3, #8]
 800a644:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a648:	f007 f85d 	bl	8011706 <USB_ReadPMA>
 800a64c:	e021      	b.n	800a692 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a656:	b29b      	uxth	r3, r3
 800a658:	461a      	mov	r2, r3
 800a65a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	00db      	lsls	r3, r3, #3
 800a660:	4413      	add	r3, r2
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	6812      	ldr	r2, [r2, #0]
 800a666:	4413      	add	r3, r2
 800a668:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a66c:	881b      	ldrh	r3, [r3, #0]
 800a66e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a672:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800a676:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d009      	beq.n	800a692 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6818      	ldr	r0, [r3, #0]
 800a682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a684:	6959      	ldr	r1, [r3, #20]
 800a686:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a688:	895a      	ldrh	r2, [r3, #10]
 800a68a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a68e:	f007 f83a 	bl	8011706 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a694:	69da      	ldr	r2, [r3, #28]
 800a696:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a69a:	441a      	add	r2, r3
 800a69c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a69e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a6a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6a2:	695a      	ldr	r2, [r3, #20]
 800a6a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a6a8:	441a      	add	r2, r3
 800a6aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ac:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a6ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6b0:	699b      	ldr	r3, [r3, #24]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d005      	beq.n	800a6c2 <PCD_EP_ISR_Handler+0x41e>
 800a6b6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800a6ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d206      	bcs.n	800a6d0 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a6c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f008 fea9 	bl	8013420 <HAL_PCD_DataOutStageCallback>
 800a6ce:	e005      	b.n	800a6dc <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f006 f8ef 	bl	80108ba <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a6dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a6de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f000 8117 	beq.w	800a916 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800a6e8:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800a6ec:	4613      	mov	r3, r2
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	4413      	add	r3, r2
 800a6f2:	00db      	lsls	r3, r3, #3
 800a6f4:	3310      	adds	r3, #16
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	461a      	mov	r2, r3
 800a702:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	4413      	add	r3, r2
 800a70a:	881b      	ldrh	r3, [r3, #0]
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800a712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a716:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	461a      	mov	r2, r3
 800a71e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	441a      	add	r2, r3
 800a726:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a72c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a730:	b29b      	uxth	r3, r3
 800a732:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800a734:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a736:	78db      	ldrb	r3, [r3, #3]
 800a738:	2b01      	cmp	r3, #1
 800a73a:	f040 80a1 	bne.w	800a880 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800a73e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a740:	2200      	movs	r2, #0
 800a742:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800a744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a746:	7b1b      	ldrb	r3, [r3, #12]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f000 8092 	beq.w	800a872 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a74e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a754:	2b00      	cmp	r3, #0
 800a756:	d046      	beq.n	800a7e6 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a75a:	785b      	ldrb	r3, [r3, #1]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d126      	bne.n	800a7ae <PCD_EP_ISR_Handler+0x50a>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	617b      	str	r3, [r7, #20]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a76e:	b29b      	uxth	r3, r3
 800a770:	461a      	mov	r2, r3
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	4413      	add	r3, r2
 800a776:	617b      	str	r3, [r7, #20]
 800a778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	00da      	lsls	r2, r3, #3
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	4413      	add	r3, r2
 800a782:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a786:	613b      	str	r3, [r7, #16]
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	881b      	ldrh	r3, [r3, #0]
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a792:	b29a      	uxth	r2, r3
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	801a      	strh	r2, [r3, #0]
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	881b      	ldrh	r3, [r3, #0]
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	801a      	strh	r2, [r3, #0]
 800a7ac:	e061      	b.n	800a872 <PCD_EP_ISR_Handler+0x5ce>
 800a7ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7b0:	785b      	ldrb	r3, [r3, #1]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d15d      	bne.n	800a872 <PCD_EP_ISR_Handler+0x5ce>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	61fb      	str	r3, [r7, #28]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	61fb      	str	r3, [r7, #28]
 800a7ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	00da      	lsls	r2, r3, #3
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a7dc:	61bb      	str	r3, [r7, #24]
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	801a      	strh	r2, [r3, #0]
 800a7e4:	e045      	b.n	800a872 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a7ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7ee:	785b      	ldrb	r3, [r3, #1]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d126      	bne.n	800a842 <PCD_EP_ISR_Handler+0x59e>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a802:	b29b      	uxth	r3, r3
 800a804:	461a      	mov	r2, r3
 800a806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a808:	4413      	add	r3, r2
 800a80a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a80c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	00da      	lsls	r2, r3, #3
 800a812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a814:	4413      	add	r3, r2
 800a816:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a81a:	623b      	str	r3, [r7, #32]
 800a81c:	6a3b      	ldr	r3, [r7, #32]
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	b29b      	uxth	r3, r3
 800a822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a826:	b29a      	uxth	r2, r3
 800a828:	6a3b      	ldr	r3, [r7, #32]
 800a82a:	801a      	strh	r2, [r3, #0]
 800a82c:	6a3b      	ldr	r3, [r7, #32]
 800a82e:	881b      	ldrh	r3, [r3, #0]
 800a830:	b29b      	uxth	r3, r3
 800a832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	6a3b      	ldr	r3, [r7, #32]
 800a83e:	801a      	strh	r2, [r3, #0]
 800a840:	e017      	b.n	800a872 <PCD_EP_ISR_Handler+0x5ce>
 800a842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a844:	785b      	ldrb	r3, [r3, #1]
 800a846:	2b01      	cmp	r3, #1
 800a848:	d113      	bne.n	800a872 <PCD_EP_ISR_Handler+0x5ce>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a852:	b29b      	uxth	r3, r3
 800a854:	461a      	mov	r2, r3
 800a856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a858:	4413      	add	r3, r2
 800a85a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a85c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	00da      	lsls	r2, r3, #3
 800a862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a864:	4413      	add	r3, r2
 800a866:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a86a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86e:	2200      	movs	r2, #0
 800a870:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	4619      	mov	r1, r3
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f008 fdec 	bl	8013456 <HAL_PCD_DataInStageCallback>
 800a87e:	e04a      	b.n	800a916 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800a880:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a886:	2b00      	cmp	r3, #0
 800a888:	d13f      	bne.n	800a90a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a892:	b29b      	uxth	r3, r3
 800a894:	461a      	mov	r2, r3
 800a896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	00db      	lsls	r3, r3, #3
 800a89c:	4413      	add	r3, r2
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	6812      	ldr	r2, [r2, #0]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a8a8:	881b      	ldrh	r3, [r3, #0]
 800a8aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8ae:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800a8b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8b2:	699a      	ldr	r2, [r3, #24]
 800a8b4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d906      	bls.n	800a8c8 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800a8ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8bc:	699a      	ldr	r2, [r3, #24]
 800a8be:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a8c0:	1ad2      	subs	r2, r2, r3
 800a8c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8c4:	619a      	str	r2, [r3, #24]
 800a8c6:	e002      	b.n	800a8ce <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800a8c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800a8ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8d0:	699b      	ldr	r3, [r3, #24]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d106      	bne.n	800a8e4 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a8d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	4619      	mov	r1, r3
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f008 fdba 	bl	8013456 <HAL_PCD_DataInStageCallback>
 800a8e2:	e018      	b.n	800a916 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800a8e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8e6:	695a      	ldr	r2, [r3, #20]
 800a8e8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a8ea:	441a      	add	r2, r3
 800a8ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8ee:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800a8f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8f2:	69da      	ldr	r2, [r3, #28]
 800a8f4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a8f6:	441a      	add	r2, r3
 800a8f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8fa:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a902:	4618      	mov	r0, r3
 800a904:	f005 ffd9 	bl	80108ba <USB_EPStartXfer>
 800a908:	e005      	b.n	800a916 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800a90a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a90c:	461a      	mov	r2, r3
 800a90e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 f917 	bl	800ab44 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a91e:	b29b      	uxth	r3, r3
 800a920:	b21b      	sxth	r3, r3
 800a922:	2b00      	cmp	r3, #0
 800a924:	f6ff acc3 	blt.w	800a2ae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3748      	adds	r7, #72	@ 0x48
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b088      	sub	sp, #32
 800a936:	af00      	add	r7, sp, #0
 800a938:	60f8      	str	r0, [r7, #12]
 800a93a:	60b9      	str	r1, [r7, #8]
 800a93c:	4613      	mov	r3, r2
 800a93e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a940:	88fb      	ldrh	r3, [r7, #6]
 800a942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a946:	2b00      	cmp	r3, #0
 800a948:	d07c      	beq.n	800aa44 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a952:	b29b      	uxth	r3, r3
 800a954:	461a      	mov	r2, r3
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	00db      	lsls	r3, r3, #3
 800a95c:	4413      	add	r3, r2
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	6812      	ldr	r2, [r2, #0]
 800a962:	4413      	add	r3, r2
 800a964:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a968:	881b      	ldrh	r3, [r3, #0]
 800a96a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a96e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	699a      	ldr	r2, [r3, #24]
 800a974:	8b7b      	ldrh	r3, [r7, #26]
 800a976:	429a      	cmp	r2, r3
 800a978:	d306      	bcc.n	800a988 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	699a      	ldr	r2, [r3, #24]
 800a97e:	8b7b      	ldrh	r3, [r7, #26]
 800a980:	1ad2      	subs	r2, r2, r3
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	619a      	str	r2, [r3, #24]
 800a986:	e002      	b.n	800a98e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	2200      	movs	r2, #0
 800a98c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	699b      	ldr	r3, [r3, #24]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d123      	bne.n	800a9de <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	461a      	mov	r2, r3
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	4413      	add	r3, r2
 800a9a4:	881b      	ldrh	r3, [r3, #0]
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a9ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9b0:	833b      	strh	r3, [r7, #24]
 800a9b2:	8b3b      	ldrh	r3, [r7, #24]
 800a9b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a9b8:	833b      	strh	r3, [r7, #24]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	461a      	mov	r2, r3
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	441a      	add	r2, r3
 800a9c8:	8b3b      	ldrh	r3, [r7, #24]
 800a9ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a9de:	88fb      	ldrh	r3, [r7, #6]
 800a9e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d01f      	beq.n	800aa28 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	881b      	ldrh	r3, [r3, #0]
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa02:	82fb      	strh	r3, [r7, #22]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	461a      	mov	r2, r3
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	441a      	add	r2, r3
 800aa12:	8afb      	ldrh	r3, [r7, #22]
 800aa14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800aa28:	8b7b      	ldrh	r3, [r7, #26]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f000 8085 	beq.w	800ab3a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6818      	ldr	r0, [r3, #0]
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	6959      	ldr	r1, [r3, #20]
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	891a      	ldrh	r2, [r3, #8]
 800aa3c:	8b7b      	ldrh	r3, [r7, #26]
 800aa3e:	f006 fe62 	bl	8011706 <USB_ReadPMA>
 800aa42:	e07a      	b.n	800ab3a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	461a      	mov	r2, r3
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	00db      	lsls	r3, r3, #3
 800aa56:	4413      	add	r3, r2
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	6812      	ldr	r2, [r2, #0]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa62:	881b      	ldrh	r3, [r3, #0]
 800aa64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa68:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	699a      	ldr	r2, [r3, #24]
 800aa6e:	8b7b      	ldrh	r3, [r7, #26]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d306      	bcc.n	800aa82 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	699a      	ldr	r2, [r3, #24]
 800aa78:	8b7b      	ldrh	r3, [r7, #26]
 800aa7a:	1ad2      	subs	r2, r2, r3
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	619a      	str	r2, [r3, #24]
 800aa80:	e002      	b.n	800aa88 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	2200      	movs	r2, #0
 800aa86:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d123      	bne.n	800aad8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	461a      	mov	r2, r3
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4413      	add	r3, r2
 800aa9e:	881b      	ldrh	r3, [r3, #0]
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aaa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaaa:	83fb      	strh	r3, [r7, #30]
 800aaac:	8bfb      	ldrh	r3, [r7, #30]
 800aaae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aab2:	83fb      	strh	r3, [r7, #30]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	461a      	mov	r2, r3
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	441a      	add	r2, r3
 800aac2:	8bfb      	ldrh	r3, [r7, #30]
 800aac4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aac8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aacc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800aad8:	88fb      	ldrh	r3, [r7, #6]
 800aada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d11f      	bne.n	800ab22 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	461a      	mov	r2, r3
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	4413      	add	r3, r2
 800aaf0:	881b      	ldrh	r3, [r3, #0]
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aaf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aafc:	83bb      	strh	r3, [r7, #28]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	461a      	mov	r2, r3
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	441a      	add	r2, r3
 800ab0c:	8bbb      	ldrh	r3, [r7, #28]
 800ab0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab1a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800ab22:	8b7b      	ldrh	r3, [r7, #26]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d008      	beq.n	800ab3a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6818      	ldr	r0, [r3, #0]
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	6959      	ldr	r1, [r3, #20]
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	895a      	ldrh	r2, [r3, #10]
 800ab34:	8b7b      	ldrh	r3, [r7, #26]
 800ab36:	f006 fde6 	bl	8011706 <USB_ReadPMA>
    }
  }

  return count;
 800ab3a:	8b7b      	ldrh	r3, [r7, #26]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3720      	adds	r7, #32
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b0a6      	sub	sp, #152	@ 0x98
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ab52:	88fb      	ldrh	r3, [r7, #6]
 800ab54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f000 81f7 	beq.w	800af4c <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	461a      	mov	r2, r3
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	00db      	lsls	r3, r3, #3
 800ab70:	4413      	add	r3, r2
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	6812      	ldr	r2, [r2, #0]
 800ab76:	4413      	add	r3, r2
 800ab78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ab7c:	881b      	ldrh	r3, [r3, #0]
 800ab7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab82:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	699a      	ldr	r2, [r3, #24]
 800ab8a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d907      	bls.n	800aba2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	699a      	ldr	r2, [r3, #24]
 800ab96:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ab9a:	1ad2      	subs	r2, r2, r3
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	619a      	str	r2, [r3, #24]
 800aba0:	e002      	b.n	800aba8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	2200      	movs	r2, #0
 800aba6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	699b      	ldr	r3, [r3, #24]
 800abac:	2b00      	cmp	r3, #0
 800abae:	f040 80e1 	bne.w	800ad74 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	785b      	ldrb	r3, [r3, #1]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d126      	bne.n	800ac08 <HAL_PCD_EP_DB_Transmit+0xc4>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	633b      	str	r3, [r7, #48]	@ 0x30
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abc8:	b29b      	uxth	r3, r3
 800abca:	461a      	mov	r2, r3
 800abcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abce:	4413      	add	r3, r2
 800abd0:	633b      	str	r3, [r7, #48]	@ 0x30
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	00da      	lsls	r2, r3, #3
 800abd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abda:	4413      	add	r3, r2
 800abdc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800abe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800abe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abe4:	881b      	ldrh	r3, [r3, #0]
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abec:	b29a      	uxth	r2, r3
 800abee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf0:	801a      	strh	r2, [r3, #0]
 800abf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf4:	881b      	ldrh	r3, [r3, #0]
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac00:	b29a      	uxth	r2, r3
 800ac02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac04:	801a      	strh	r2, [r3, #0]
 800ac06:	e01a      	b.n	800ac3e <HAL_PCD_EP_DB_Transmit+0xfa>
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	785b      	ldrb	r3, [r3, #1]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d116      	bne.n	800ac3e <HAL_PCD_EP_DB_Transmit+0xfa>
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	461a      	mov	r2, r3
 800ac22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac24:	4413      	add	r3, r2
 800ac26:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	00da      	lsls	r2, r3, #3
 800ac2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac30:	4413      	add	r3, r2
 800ac32:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ac36:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	785b      	ldrb	r3, [r3, #1]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d126      	bne.n	800ac9a <HAL_PCD_EP_DB_Transmit+0x156>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	623b      	str	r3, [r7, #32]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	6a3b      	ldr	r3, [r7, #32]
 800ac60:	4413      	add	r3, r2
 800ac62:	623b      	str	r3, [r7, #32]
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	00da      	lsls	r2, r3, #3
 800ac6a:	6a3b      	ldr	r3, [r7, #32]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ac72:	61fb      	str	r3, [r7, #28]
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	881b      	ldrh	r3, [r3, #0]
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	801a      	strh	r2, [r3, #0]
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	881b      	ldrh	r3, [r3, #0]
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	801a      	strh	r2, [r3, #0]
 800ac98:	e017      	b.n	800acca <HAL_PCD_EP_DB_Transmit+0x186>
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	785b      	ldrb	r3, [r3, #1]
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d113      	bne.n	800acca <HAL_PCD_EP_DB_Transmit+0x186>
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800acaa:	b29b      	uxth	r3, r3
 800acac:	461a      	mov	r2, r3
 800acae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb0:	4413      	add	r3, r2
 800acb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	00da      	lsls	r2, r3, #3
 800acba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acbc:	4413      	add	r3, r2
 800acbe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800acc2:	627b      	str	r3, [r7, #36]	@ 0x24
 800acc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc6:	2200      	movs	r2, #0
 800acc8:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	78db      	ldrb	r3, [r3, #3]
 800acce:	2b02      	cmp	r3, #2
 800acd0:	d123      	bne.n	800ad1a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	461a      	mov	r2, r3
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4413      	add	r3, r2
 800ace0:	881b      	ldrh	r3, [r3, #0]
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ace8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acec:	837b      	strh	r3, [r7, #26]
 800acee:	8b7b      	ldrh	r3, [r7, #26]
 800acf0:	f083 0320 	eor.w	r3, r3, #32
 800acf4:	837b      	strh	r3, [r7, #26]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	461a      	mov	r2, r3
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	441a      	add	r2, r3
 800ad04:	8b7b      	ldrh	r3, [r7, #26]
 800ad06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	4619      	mov	r1, r3
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f008 fb98 	bl	8013456 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ad26:	88fb      	ldrh	r3, [r7, #6]
 800ad28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d01f      	beq.n	800ad70 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	461a      	mov	r2, r3
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	4413      	add	r3, r2
 800ad3e:	881b      	ldrh	r3, [r3, #0]
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad4a:	833b      	strh	r3, [r7, #24]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	461a      	mov	r2, r3
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	441a      	add	r2, r3
 800ad5a:	8b3b      	ldrh	r3, [r7, #24]
 800ad5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ad68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800ad70:	2300      	movs	r3, #0
 800ad72:	e31f      	b.n	800b3b4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ad74:	88fb      	ldrh	r3, [r7, #6]
 800ad76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d021      	beq.n	800adc2 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	461a      	mov	r2, r3
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	881b      	ldrh	r3, [r3, #0]
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad98:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	461a      	mov	r2, r3
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	441a      	add	r2, r3
 800adaa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800adae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800adba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800adc8:	2b01      	cmp	r3, #1
 800adca:	f040 82ca 	bne.w	800b362 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	695a      	ldr	r2, [r3, #20]
 800add2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800add6:	441a      	add	r2, r3
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	69da      	ldr	r2, [r3, #28]
 800ade0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ade4:	441a      	add	r2, r3
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	6a1a      	ldr	r2, [r3, #32]
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	691b      	ldr	r3, [r3, #16]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d309      	bcc.n	800ae0a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	691b      	ldr	r3, [r3, #16]
 800adfa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	6a1a      	ldr	r2, [r3, #32]
 800ae00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae02:	1ad2      	subs	r2, r2, r3
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	621a      	str	r2, [r3, #32]
 800ae08:	e015      	b.n	800ae36 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	6a1b      	ldr	r3, [r3, #32]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d107      	bne.n	800ae22 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800ae12:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ae16:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800ae20:	e009      	b.n	800ae36 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	2200      	movs	r2, #0
 800ae26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	2200      	movs	r2, #0
 800ae34:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	785b      	ldrb	r3, [r3, #1]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d15f      	bne.n	800aefe <HAL_PCD_EP_DB_Transmit+0x3ba>
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	461a      	mov	r2, r3
 800ae50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae52:	4413      	add	r3, r2
 800ae54:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	00da      	lsls	r2, r3, #3
 800ae5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae5e:	4413      	add	r3, r2
 800ae60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae68:	881b      	ldrh	r3, [r3, #0]
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae70:	b29a      	uxth	r2, r3
 800ae72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae74:	801a      	strh	r2, [r3, #0]
 800ae76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10a      	bne.n	800ae92 <HAL_PCD_EP_DB_Transmit+0x34e>
 800ae7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae7e:	881b      	ldrh	r3, [r3, #0]
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae8e:	801a      	strh	r2, [r3, #0]
 800ae90:	e051      	b.n	800af36 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800ae92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae94:	2b3e      	cmp	r3, #62	@ 0x3e
 800ae96:	d816      	bhi.n	800aec6 <HAL_PCD_EP_DB_Transmit+0x382>
 800ae98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae9a:	085b      	lsrs	r3, r3, #1
 800ae9c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ae9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aea0:	f003 0301 	and.w	r3, r3, #1
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d002      	beq.n	800aeae <HAL_PCD_EP_DB_Transmit+0x36a>
 800aea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aeaa:	3301      	adds	r3, #1
 800aeac:	653b      	str	r3, [r7, #80]	@ 0x50
 800aeae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeb0:	881b      	ldrh	r3, [r3, #0]
 800aeb2:	b29a      	uxth	r2, r3
 800aeb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	029b      	lsls	r3, r3, #10
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	4313      	orrs	r3, r2
 800aebe:	b29a      	uxth	r2, r3
 800aec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aec2:	801a      	strh	r2, [r3, #0]
 800aec4:	e037      	b.n	800af36 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800aec6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aec8:	095b      	lsrs	r3, r3, #5
 800aeca:	653b      	str	r3, [r7, #80]	@ 0x50
 800aecc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aece:	f003 031f 	and.w	r3, r3, #31
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d102      	bne.n	800aedc <HAL_PCD_EP_DB_Transmit+0x398>
 800aed6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aed8:	3b01      	subs	r3, #1
 800aeda:	653b      	str	r3, [r7, #80]	@ 0x50
 800aedc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aede:	881b      	ldrh	r3, [r3, #0]
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	029b      	lsls	r3, r3, #10
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	4313      	orrs	r3, r2
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aefa:	801a      	strh	r2, [r3, #0]
 800aefc:	e01b      	b.n	800af36 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	785b      	ldrb	r3, [r3, #1]
 800af02:	2b01      	cmp	r3, #1
 800af04:	d117      	bne.n	800af36 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af14:	b29b      	uxth	r3, r3
 800af16:	461a      	mov	r2, r3
 800af18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af1a:	4413      	add	r3, r2
 800af1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	00da      	lsls	r2, r3, #3
 800af24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af26:	4413      	add	r3, r2
 800af28:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800af2c:	647b      	str	r3, [r7, #68]	@ 0x44
 800af2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800af30:	b29a      	uxth	r2, r3
 800af32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af34:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6818      	ldr	r0, [r3, #0]
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	6959      	ldr	r1, [r3, #20]
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	891a      	ldrh	r2, [r3, #8]
 800af42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800af44:	b29b      	uxth	r3, r3
 800af46:	f006 fb9c 	bl	8011682 <USB_WritePMA>
 800af4a:	e20a      	b.n	800b362 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af54:	b29b      	uxth	r3, r3
 800af56:	461a      	mov	r2, r3
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	00db      	lsls	r3, r3, #3
 800af5e:	4413      	add	r3, r2
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	6812      	ldr	r2, [r2, #0]
 800af64:	4413      	add	r3, r2
 800af66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800af6a:	881b      	ldrh	r3, [r3, #0]
 800af6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af70:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	699a      	ldr	r2, [r3, #24]
 800af78:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d307      	bcc.n	800af90 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	699a      	ldr	r2, [r3, #24]
 800af84:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800af88:	1ad2      	subs	r2, r2, r3
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	619a      	str	r2, [r3, #24]
 800af8e:	e002      	b.n	800af96 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	2200      	movs	r2, #0
 800af94:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	699b      	ldr	r3, [r3, #24]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f040 80f6 	bne.w	800b18c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	785b      	ldrb	r3, [r3, #1]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d126      	bne.n	800aff6 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	677b      	str	r3, [r7, #116]	@ 0x74
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	461a      	mov	r2, r3
 800afba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800afbc:	4413      	add	r3, r2
 800afbe:	677b      	str	r3, [r7, #116]	@ 0x74
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	00da      	lsls	r2, r3, #3
 800afc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800afc8:	4413      	add	r3, r2
 800afca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800afce:	673b      	str	r3, [r7, #112]	@ 0x70
 800afd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800afda:	b29a      	uxth	r2, r3
 800afdc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afde:	801a      	strh	r2, [r3, #0]
 800afe0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afe2:	881b      	ldrh	r3, [r3, #0]
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afee:	b29a      	uxth	r2, r3
 800aff0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aff2:	801a      	strh	r2, [r3, #0]
 800aff4:	e01a      	b.n	800b02c <HAL_PCD_EP_DB_Transmit+0x4e8>
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	785b      	ldrb	r3, [r3, #1]
 800affa:	2b01      	cmp	r3, #1
 800affc:	d116      	bne.n	800b02c <HAL_PCD_EP_DB_Transmit+0x4e8>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	461a      	mov	r2, r3
 800b010:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b012:	4413      	add	r3, r2
 800b014:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	00da      	lsls	r2, r3, #3
 800b01c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b01e:	4413      	add	r3, r2
 800b020:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b024:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b026:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b028:	2200      	movs	r2, #0
 800b02a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	785b      	ldrb	r3, [r3, #1]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d12f      	bne.n	800b09c <HAL_PCD_EP_DB_Transmit+0x558>
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	461a      	mov	r2, r3
 800b050:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b054:	4413      	add	r3, r2
 800b056:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	00da      	lsls	r2, r3, #3
 800b060:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b064:	4413      	add	r3, r2
 800b066:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b06a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b06e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b072:	881b      	ldrh	r3, [r3, #0]
 800b074:	b29b      	uxth	r3, r3
 800b076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b07a:	b29a      	uxth	r2, r3
 800b07c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b080:	801a      	strh	r2, [r3, #0]
 800b082:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b086:	881b      	ldrh	r3, [r3, #0]
 800b088:	b29b      	uxth	r3, r3
 800b08a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b08e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b092:	b29a      	uxth	r2, r3
 800b094:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b098:	801a      	strh	r2, [r3, #0]
 800b09a:	e01c      	b.n	800b0d6 <HAL_PCD_EP_DB_Transmit+0x592>
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	785b      	ldrb	r3, [r3, #1]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d118      	bne.n	800b0d6 <HAL_PCD_EP_DB_Transmit+0x592>
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b0b4:	4413      	add	r3, r2
 800b0b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	00da      	lsls	r2, r3, #3
 800b0c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b0c4:	4413      	add	r3, r2
 800b0c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b0ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b0ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	78db      	ldrb	r3, [r3, #3]
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	d127      	bne.n	800b12e <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	881b      	ldrh	r3, [r3, #0]
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0f8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b0fc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b100:	f083 0320 	eor.w	r3, r3, #32
 800b104:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	461a      	mov	r2, r3
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	441a      	add	r2, r3
 800b116:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b11a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b11e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b122:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	4619      	mov	r1, r3
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f008 f98e 	bl	8013456 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b13a:	88fb      	ldrh	r3, [r7, #6]
 800b13c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b140:	2b00      	cmp	r3, #0
 800b142:	d121      	bne.n	800b188 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	461a      	mov	r2, r3
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	4413      	add	r3, r2
 800b152:	881b      	ldrh	r3, [r3, #0]
 800b154:	b29b      	uxth	r3, r3
 800b156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b15a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b15e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	461a      	mov	r2, r3
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	441a      	add	r2, r3
 800b170:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b174:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b178:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b17c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b184:	b29b      	uxth	r3, r3
 800b186:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b188:	2300      	movs	r3, #0
 800b18a:	e113      	b.n	800b3b4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b18c:	88fb      	ldrh	r3, [r7, #6]
 800b18e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b192:	2b00      	cmp	r3, #0
 800b194:	d121      	bne.n	800b1da <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	461a      	mov	r2, r3
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	4413      	add	r3, r2
 800b1a4:	881b      	ldrh	r3, [r3, #0]
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1b0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	441a      	add	r2, r3
 800b1c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b1c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b1d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	f040 80be 	bne.w	800b362 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	695a      	ldr	r2, [r3, #20]
 800b1ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b1ee:	441a      	add	r2, r3
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	69da      	ldr	r2, [r3, #28]
 800b1f8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b1fc:	441a      	add	r2, r3
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	6a1a      	ldr	r2, [r3, #32]
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d309      	bcc.n	800b222 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	6a1a      	ldr	r2, [r3, #32]
 800b218:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b21a:	1ad2      	subs	r2, r2, r3
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	621a      	str	r2, [r3, #32]
 800b220:	e015      	b.n	800b24e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	6a1b      	ldr	r3, [r3, #32]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d107      	bne.n	800b23a <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800b22a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b22e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2200      	movs	r2, #0
 800b234:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b238:	e009      	b.n	800b24e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	6a1b      	ldr	r3, [r3, #32]
 800b23e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	2200      	movs	r2, #0
 800b244:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	2200      	movs	r2, #0
 800b24a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	785b      	ldrb	r3, [r3, #1]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d15f      	bne.n	800b31c <HAL_PCD_EP_DB_Transmit+0x7d8>
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	461a      	mov	r2, r3
 800b26e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b270:	4413      	add	r3, r2
 800b272:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	00da      	lsls	r2, r3, #3
 800b27a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b27c:	4413      	add	r3, r2
 800b27e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b282:	667b      	str	r3, [r7, #100]	@ 0x64
 800b284:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	b29b      	uxth	r3, r3
 800b28a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b28e:	b29a      	uxth	r2, r3
 800b290:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b292:	801a      	strh	r2, [r3, #0]
 800b294:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b296:	2b00      	cmp	r3, #0
 800b298:	d10a      	bne.n	800b2b0 <HAL_PCD_EP_DB_Transmit+0x76c>
 800b29a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b29c:	881b      	ldrh	r3, [r3, #0]
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2a8:	b29a      	uxth	r2, r3
 800b2aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b2ac:	801a      	strh	r2, [r3, #0]
 800b2ae:	e04e      	b.n	800b34e <HAL_PCD_EP_DB_Transmit+0x80a>
 800b2b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b2b2:	2b3e      	cmp	r3, #62	@ 0x3e
 800b2b4:	d816      	bhi.n	800b2e4 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800b2b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b2b8:	085b      	lsrs	r3, r3, #1
 800b2ba:	663b      	str	r3, [r7, #96]	@ 0x60
 800b2bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d002      	beq.n	800b2cc <HAL_PCD_EP_DB_Transmit+0x788>
 800b2c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	663b      	str	r3, [r7, #96]	@ 0x60
 800b2cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b2ce:	881b      	ldrh	r3, [r3, #0]
 800b2d0:	b29a      	uxth	r2, r3
 800b2d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	029b      	lsls	r3, r3, #10
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b2e0:	801a      	strh	r2, [r3, #0]
 800b2e2:	e034      	b.n	800b34e <HAL_PCD_EP_DB_Transmit+0x80a>
 800b2e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b2e6:	095b      	lsrs	r3, r3, #5
 800b2e8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b2ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b2ec:	f003 031f 	and.w	r3, r3, #31
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d102      	bne.n	800b2fa <HAL_PCD_EP_DB_Transmit+0x7b6>
 800b2f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b2fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b2fc:	881b      	ldrh	r3, [r3, #0]
 800b2fe:	b29a      	uxth	r2, r3
 800b300:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b302:	b29b      	uxth	r3, r3
 800b304:	029b      	lsls	r3, r3, #10
 800b306:	b29b      	uxth	r3, r3
 800b308:	4313      	orrs	r3, r2
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b314:	b29a      	uxth	r2, r3
 800b316:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b318:	801a      	strh	r2, [r3, #0]
 800b31a:	e018      	b.n	800b34e <HAL_PCD_EP_DB_Transmit+0x80a>
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	785b      	ldrb	r3, [r3, #1]
 800b320:	2b01      	cmp	r3, #1
 800b322:	d114      	bne.n	800b34e <HAL_PCD_EP_DB_Transmit+0x80a>
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	461a      	mov	r2, r3
 800b330:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b332:	4413      	add	r3, r2
 800b334:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	00da      	lsls	r2, r3, #3
 800b33c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b33e:	4413      	add	r3, r2
 800b340:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b344:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b346:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b348:	b29a      	uxth	r2, r3
 800b34a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b34c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	6818      	ldr	r0, [r3, #0]
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	6959      	ldr	r1, [r3, #20]
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	895a      	ldrh	r2, [r3, #10]
 800b35a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	f006 f990 	bl	8011682 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	461a      	mov	r2, r3
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	4413      	add	r3, r2
 800b370:	881b      	ldrh	r3, [r3, #0]
 800b372:	b29b      	uxth	r3, r3
 800b374:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b378:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b37c:	82fb      	strh	r3, [r7, #22]
 800b37e:	8afb      	ldrh	r3, [r7, #22]
 800b380:	f083 0310 	eor.w	r3, r3, #16
 800b384:	82fb      	strh	r3, [r7, #22]
 800b386:	8afb      	ldrh	r3, [r7, #22]
 800b388:	f083 0320 	eor.w	r3, r3, #32
 800b38c:	82fb      	strh	r3, [r7, #22]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	461a      	mov	r2, r3
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	441a      	add	r2, r3
 800b39c:	8afb      	ldrh	r3, [r7, #22]
 800b39e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b3a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b3a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800b3b2:	2300      	movs	r3, #0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3798      	adds	r7, #152	@ 0x98
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b087      	sub	sp, #28
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	607b      	str	r3, [r7, #4]
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	817b      	strh	r3, [r7, #10]
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b3ce:	897b      	ldrh	r3, [r7, #10]
 800b3d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d00b      	beq.n	800b3f2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b3da:	897b      	ldrh	r3, [r7, #10]
 800b3dc:	f003 0207 	and.w	r2, r3, #7
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4413      	add	r3, r2
 800b3e6:	00db      	lsls	r3, r3, #3
 800b3e8:	3310      	adds	r3, #16
 800b3ea:	68fa      	ldr	r2, [r7, #12]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	617b      	str	r3, [r7, #20]
 800b3f0:	e009      	b.n	800b406 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b3f2:	897a      	ldrh	r2, [r7, #10]
 800b3f4:	4613      	mov	r3, r2
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	4413      	add	r3, r2
 800b3fa:	00db      	lsls	r3, r3, #3
 800b3fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	4413      	add	r3, r2
 800b404:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b406:	893b      	ldrh	r3, [r7, #8]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d107      	bne.n	800b41c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	2200      	movs	r2, #0
 800b410:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	b29a      	uxth	r2, r3
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	80da      	strh	r2, [r3, #6]
 800b41a:	e00b      	b.n	800b434 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	2201      	movs	r2, #1
 800b420:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	b29a      	uxth	r2, r3
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	0c1b      	lsrs	r3, r3, #16
 800b42e:	b29a      	uxth	r2, r3
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	371c      	adds	r7, #28
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b442:	b480      	push	{r7}
 800b444:	b085      	sub	sp, #20
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b466:	b29b      	uxth	r3, r3
 800b468:	f043 0301 	orr.w	r3, r3, #1
 800b46c:	b29a      	uxth	r2, r3
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	f043 0302 	orr.w	r3, r3, #2
 800b480:	b29a      	uxth	r2, r3
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3714      	adds	r7, #20
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr
	...

0800b498 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d141      	bne.n	800b52a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b4a6:	4b4b      	ldr	r3, [pc, #300]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b4ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4b2:	d131      	bne.n	800b518 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b4b4:	4b47      	ldr	r3, [pc, #284]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b4b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4ba:	4a46      	ldr	r2, [pc, #280]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b4bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b4c4:	4b43      	ldr	r3, [pc, #268]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b4cc:	4a41      	ldr	r2, [pc, #260]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b4ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b4d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b4d4:	4b40      	ldr	r3, [pc, #256]	@ (800b5d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2232      	movs	r2, #50	@ 0x32
 800b4da:	fb02 f303 	mul.w	r3, r2, r3
 800b4de:	4a3f      	ldr	r2, [pc, #252]	@ (800b5dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b4e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4e4:	0c9b      	lsrs	r3, r3, #18
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b4ea:	e002      	b.n	800b4f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b4f2:	4b38      	ldr	r3, [pc, #224]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b4f4:	695b      	ldr	r3, [r3, #20]
 800b4f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4fe:	d102      	bne.n	800b506 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d1f2      	bne.n	800b4ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b506:	4b33      	ldr	r3, [pc, #204]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b508:	695b      	ldr	r3, [r3, #20]
 800b50a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b50e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b512:	d158      	bne.n	800b5c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b514:	2303      	movs	r3, #3
 800b516:	e057      	b.n	800b5c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b518:	4b2e      	ldr	r3, [pc, #184]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b51a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b51e:	4a2d      	ldr	r2, [pc, #180]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b520:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b524:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b528:	e04d      	b.n	800b5c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b530:	d141      	bne.n	800b5b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b532:	4b28      	ldr	r3, [pc, #160]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b53a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b53e:	d131      	bne.n	800b5a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b540:	4b24      	ldr	r3, [pc, #144]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b546:	4a23      	ldr	r2, [pc, #140]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b54c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b550:	4b20      	ldr	r3, [pc, #128]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b558:	4a1e      	ldr	r2, [pc, #120]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b55a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b55e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b560:	4b1d      	ldr	r3, [pc, #116]	@ (800b5d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2232      	movs	r2, #50	@ 0x32
 800b566:	fb02 f303 	mul.w	r3, r2, r3
 800b56a:	4a1c      	ldr	r2, [pc, #112]	@ (800b5dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b56c:	fba2 2303 	umull	r2, r3, r2, r3
 800b570:	0c9b      	lsrs	r3, r3, #18
 800b572:	3301      	adds	r3, #1
 800b574:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b576:	e002      	b.n	800b57e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	3b01      	subs	r3, #1
 800b57c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b57e:	4b15      	ldr	r3, [pc, #84]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b580:	695b      	ldr	r3, [r3, #20]
 800b582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b58a:	d102      	bne.n	800b592 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1f2      	bne.n	800b578 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b592:	4b10      	ldr	r3, [pc, #64]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b594:	695b      	ldr	r3, [r3, #20]
 800b596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b59a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b59e:	d112      	bne.n	800b5c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	e011      	b.n	800b5c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b5a4:	4b0b      	ldr	r3, [pc, #44]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b5a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5aa:	4a0a      	ldr	r2, [pc, #40]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b5ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b5b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b5b4:	e007      	b.n	800b5c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b5b6:	4b07      	ldr	r3, [pc, #28]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b5be:	4a05      	ldr	r2, [pc, #20]	@ (800b5d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b5c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b5c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3714      	adds	r7, #20
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr
 800b5d4:	40007000 	.word	0x40007000
 800b5d8:	20000040 	.word	0x20000040
 800b5dc:	431bde83 	.word	0x431bde83

0800b5e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b5e4:	4b05      	ldr	r3, [pc, #20]	@ (800b5fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b5e6:	689b      	ldr	r3, [r3, #8]
 800b5e8:	4a04      	ldr	r2, [pc, #16]	@ (800b5fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b5ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b5ee:	6093      	str	r3, [r2, #8]
}
 800b5f0:	bf00      	nop
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop
 800b5fc:	40007000 	.word	0x40007000

0800b600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b088      	sub	sp, #32
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d101      	bne.n	800b612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	e2fe      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f003 0301 	and.w	r3, r3, #1
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d075      	beq.n	800b70a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b61e:	4b97      	ldr	r3, [pc, #604]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	f003 030c 	and.w	r3, r3, #12
 800b626:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b628:	4b94      	ldr	r3, [pc, #592]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	f003 0303 	and.w	r3, r3, #3
 800b630:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b632:	69bb      	ldr	r3, [r7, #24]
 800b634:	2b0c      	cmp	r3, #12
 800b636:	d102      	bne.n	800b63e <HAL_RCC_OscConfig+0x3e>
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	2b03      	cmp	r3, #3
 800b63c:	d002      	beq.n	800b644 <HAL_RCC_OscConfig+0x44>
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	2b08      	cmp	r3, #8
 800b642:	d10b      	bne.n	800b65c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b644:	4b8d      	ldr	r3, [pc, #564]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d05b      	beq.n	800b708 <HAL_RCC_OscConfig+0x108>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d157      	bne.n	800b708 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	e2d9      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b664:	d106      	bne.n	800b674 <HAL_RCC_OscConfig+0x74>
 800b666:	4b85      	ldr	r3, [pc, #532]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a84      	ldr	r2, [pc, #528]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b66c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b670:	6013      	str	r3, [r2, #0]
 800b672:	e01d      	b.n	800b6b0 <HAL_RCC_OscConfig+0xb0>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b67c:	d10c      	bne.n	800b698 <HAL_RCC_OscConfig+0x98>
 800b67e:	4b7f      	ldr	r3, [pc, #508]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a7e      	ldr	r2, [pc, #504]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b688:	6013      	str	r3, [r2, #0]
 800b68a:	4b7c      	ldr	r3, [pc, #496]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a7b      	ldr	r2, [pc, #492]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b694:	6013      	str	r3, [r2, #0]
 800b696:	e00b      	b.n	800b6b0 <HAL_RCC_OscConfig+0xb0>
 800b698:	4b78      	ldr	r3, [pc, #480]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a77      	ldr	r2, [pc, #476]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b69e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b6a2:	6013      	str	r3, [r2, #0]
 800b6a4:	4b75      	ldr	r3, [pc, #468]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a74      	ldr	r2, [pc, #464]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b6aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b6ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d013      	beq.n	800b6e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6b8:	f7f8 ffe4 	bl	8004684 <HAL_GetTick>
 800b6bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b6be:	e008      	b.n	800b6d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b6c0:	f7f8 ffe0 	bl	8004684 <HAL_GetTick>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	2b64      	cmp	r3, #100	@ 0x64
 800b6cc:	d901      	bls.n	800b6d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b6ce:	2303      	movs	r3, #3
 800b6d0:	e29e      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b6d2:	4b6a      	ldr	r3, [pc, #424]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d0f0      	beq.n	800b6c0 <HAL_RCC_OscConfig+0xc0>
 800b6de:	e014      	b.n	800b70a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6e0:	f7f8 ffd0 	bl	8004684 <HAL_GetTick>
 800b6e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b6e6:	e008      	b.n	800b6fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b6e8:	f7f8 ffcc 	bl	8004684 <HAL_GetTick>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	1ad3      	subs	r3, r2, r3
 800b6f2:	2b64      	cmp	r3, #100	@ 0x64
 800b6f4:	d901      	bls.n	800b6fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b6f6:	2303      	movs	r3, #3
 800b6f8:	e28a      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b6fa:	4b60      	ldr	r3, [pc, #384]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b702:	2b00      	cmp	r3, #0
 800b704:	d1f0      	bne.n	800b6e8 <HAL_RCC_OscConfig+0xe8>
 800b706:	e000      	b.n	800b70a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f003 0302 	and.w	r3, r3, #2
 800b712:	2b00      	cmp	r3, #0
 800b714:	d075      	beq.n	800b802 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b716:	4b59      	ldr	r3, [pc, #356]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	f003 030c 	and.w	r3, r3, #12
 800b71e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b720:	4b56      	ldr	r3, [pc, #344]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	f003 0303 	and.w	r3, r3, #3
 800b728:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	2b0c      	cmp	r3, #12
 800b72e:	d102      	bne.n	800b736 <HAL_RCC_OscConfig+0x136>
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	2b02      	cmp	r3, #2
 800b734:	d002      	beq.n	800b73c <HAL_RCC_OscConfig+0x13c>
 800b736:	69bb      	ldr	r3, [r7, #24]
 800b738:	2b04      	cmp	r3, #4
 800b73a:	d11f      	bne.n	800b77c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b73c:	4b4f      	ldr	r3, [pc, #316]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b744:	2b00      	cmp	r3, #0
 800b746:	d005      	beq.n	800b754 <HAL_RCC_OscConfig+0x154>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d101      	bne.n	800b754 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b750:	2301      	movs	r3, #1
 800b752:	e25d      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b754:	4b49      	ldr	r3, [pc, #292]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	061b      	lsls	r3, r3, #24
 800b762:	4946      	ldr	r1, [pc, #280]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b764:	4313      	orrs	r3, r2
 800b766:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b768:	4b45      	ldr	r3, [pc, #276]	@ (800b880 <HAL_RCC_OscConfig+0x280>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7f8 ff3d 	bl	80045ec <HAL_InitTick>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d043      	beq.n	800b800 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b778:	2301      	movs	r3, #1
 800b77a:	e249      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d023      	beq.n	800b7cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b784:	4b3d      	ldr	r3, [pc, #244]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a3c      	ldr	r2, [pc, #240]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b78a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b78e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b790:	f7f8 ff78 	bl	8004684 <HAL_GetTick>
 800b794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b796:	e008      	b.n	800b7aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b798:	f7f8 ff74 	bl	8004684 <HAL_GetTick>
 800b79c:	4602      	mov	r2, r0
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	1ad3      	subs	r3, r2, r3
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d901      	bls.n	800b7aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b7a6:	2303      	movs	r3, #3
 800b7a8:	e232      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b7aa:	4b34      	ldr	r3, [pc, #208]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d0f0      	beq.n	800b798 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b7b6:	4b31      	ldr	r3, [pc, #196]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	691b      	ldr	r3, [r3, #16]
 800b7c2:	061b      	lsls	r3, r3, #24
 800b7c4:	492d      	ldr	r1, [pc, #180]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	604b      	str	r3, [r1, #4]
 800b7ca:	e01a      	b.n	800b802 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b7cc:	4b2b      	ldr	r3, [pc, #172]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a2a      	ldr	r2, [pc, #168]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b7d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7d8:	f7f8 ff54 	bl	8004684 <HAL_GetTick>
 800b7dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b7de:	e008      	b.n	800b7f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b7e0:	f7f8 ff50 	bl	8004684 <HAL_GetTick>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	1ad3      	subs	r3, r2, r3
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d901      	bls.n	800b7f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b7ee:	2303      	movs	r3, #3
 800b7f0:	e20e      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b7f2:	4b22      	ldr	r3, [pc, #136]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d1f0      	bne.n	800b7e0 <HAL_RCC_OscConfig+0x1e0>
 800b7fe:	e000      	b.n	800b802 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b800:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f003 0308 	and.w	r3, r3, #8
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d041      	beq.n	800b892 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	695b      	ldr	r3, [r3, #20]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d01c      	beq.n	800b850 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b816:	4b19      	ldr	r3, [pc, #100]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b81c:	4a17      	ldr	r2, [pc, #92]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b81e:	f043 0301 	orr.w	r3, r3, #1
 800b822:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b826:	f7f8 ff2d 	bl	8004684 <HAL_GetTick>
 800b82a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b82c:	e008      	b.n	800b840 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b82e:	f7f8 ff29 	bl	8004684 <HAL_GetTick>
 800b832:	4602      	mov	r2, r0
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	2b02      	cmp	r3, #2
 800b83a:	d901      	bls.n	800b840 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b83c:	2303      	movs	r3, #3
 800b83e:	e1e7      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b840:	4b0e      	ldr	r3, [pc, #56]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b842:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b846:	f003 0302 	and.w	r3, r3, #2
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d0ef      	beq.n	800b82e <HAL_RCC_OscConfig+0x22e>
 800b84e:	e020      	b.n	800b892 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b850:	4b0a      	ldr	r3, [pc, #40]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b852:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b856:	4a09      	ldr	r2, [pc, #36]	@ (800b87c <HAL_RCC_OscConfig+0x27c>)
 800b858:	f023 0301 	bic.w	r3, r3, #1
 800b85c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b860:	f7f8 ff10 	bl	8004684 <HAL_GetTick>
 800b864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b866:	e00d      	b.n	800b884 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b868:	f7f8 ff0c 	bl	8004684 <HAL_GetTick>
 800b86c:	4602      	mov	r2, r0
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	1ad3      	subs	r3, r2, r3
 800b872:	2b02      	cmp	r3, #2
 800b874:	d906      	bls.n	800b884 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b876:	2303      	movs	r3, #3
 800b878:	e1ca      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>
 800b87a:	bf00      	nop
 800b87c:	40021000 	.word	0x40021000
 800b880:	20000048 	.word	0x20000048
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b884:	4b8c      	ldr	r3, [pc, #560]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800b886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b88a:	f003 0302 	and.w	r3, r3, #2
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d1ea      	bne.n	800b868 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f003 0304 	and.w	r3, r3, #4
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	f000 80a6 	beq.w	800b9ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b8a4:	4b84      	ldr	r3, [pc, #528]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800b8a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d101      	bne.n	800b8b4 <HAL_RCC_OscConfig+0x2b4>
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e000      	b.n	800b8b6 <HAL_RCC_OscConfig+0x2b6>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00d      	beq.n	800b8d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b8ba:	4b7f      	ldr	r3, [pc, #508]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800b8bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8be:	4a7e      	ldr	r2, [pc, #504]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800b8c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b8c4:	6593      	str	r3, [r2, #88]	@ 0x58
 800b8c6:	4b7c      	ldr	r3, [pc, #496]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800b8c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b8ce:	60fb      	str	r3, [r7, #12]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b8d6:	4b79      	ldr	r3, [pc, #484]	@ (800babc <HAL_RCC_OscConfig+0x4bc>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d118      	bne.n	800b914 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b8e2:	4b76      	ldr	r3, [pc, #472]	@ (800babc <HAL_RCC_OscConfig+0x4bc>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a75      	ldr	r2, [pc, #468]	@ (800babc <HAL_RCC_OscConfig+0x4bc>)
 800b8e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b8ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b8ee:	f7f8 fec9 	bl	8004684 <HAL_GetTick>
 800b8f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b8f4:	e008      	b.n	800b908 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8f6:	f7f8 fec5 	bl	8004684 <HAL_GetTick>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	1ad3      	subs	r3, r2, r3
 800b900:	2b02      	cmp	r3, #2
 800b902:	d901      	bls.n	800b908 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b904:	2303      	movs	r3, #3
 800b906:	e183      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b908:	4b6c      	ldr	r3, [pc, #432]	@ (800babc <HAL_RCC_OscConfig+0x4bc>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b910:	2b00      	cmp	r3, #0
 800b912:	d0f0      	beq.n	800b8f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d108      	bne.n	800b92e <HAL_RCC_OscConfig+0x32e>
 800b91c:	4b66      	ldr	r3, [pc, #408]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800b91e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b922:	4a65      	ldr	r2, [pc, #404]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800b924:	f043 0301 	orr.w	r3, r3, #1
 800b928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b92c:	e024      	b.n	800b978 <HAL_RCC_OscConfig+0x378>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	689b      	ldr	r3, [r3, #8]
 800b932:	2b05      	cmp	r3, #5
 800b934:	d110      	bne.n	800b958 <HAL_RCC_OscConfig+0x358>
 800b936:	4b60      	ldr	r3, [pc, #384]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800b938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b93c:	4a5e      	ldr	r2, [pc, #376]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800b93e:	f043 0304 	orr.w	r3, r3, #4
 800b942:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b946:	4b5c      	ldr	r3, [pc, #368]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800b948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b94c:	4a5a      	ldr	r2, [pc, #360]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800b94e:	f043 0301 	orr.w	r3, r3, #1
 800b952:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b956:	e00f      	b.n	800b978 <HAL_RCC_OscConfig+0x378>
 800b958:	4b57      	ldr	r3, [pc, #348]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800b95a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b95e:	4a56      	ldr	r2, [pc, #344]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800b960:	f023 0301 	bic.w	r3, r3, #1
 800b964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b968:	4b53      	ldr	r3, [pc, #332]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800b96a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b96e:	4a52      	ldr	r2, [pc, #328]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800b970:	f023 0304 	bic.w	r3, r3, #4
 800b974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d016      	beq.n	800b9ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b980:	f7f8 fe80 	bl	8004684 <HAL_GetTick>
 800b984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b986:	e00a      	b.n	800b99e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b988:	f7f8 fe7c 	bl	8004684 <HAL_GetTick>
 800b98c:	4602      	mov	r2, r0
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	1ad3      	subs	r3, r2, r3
 800b992:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b996:	4293      	cmp	r3, r2
 800b998:	d901      	bls.n	800b99e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b99a:	2303      	movs	r3, #3
 800b99c:	e138      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b99e:	4b46      	ldr	r3, [pc, #280]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800b9a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9a4:	f003 0302 	and.w	r3, r3, #2
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d0ed      	beq.n	800b988 <HAL_RCC_OscConfig+0x388>
 800b9ac:	e015      	b.n	800b9da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9ae:	f7f8 fe69 	bl	8004684 <HAL_GetTick>
 800b9b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b9b4:	e00a      	b.n	800b9cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9b6:	f7f8 fe65 	bl	8004684 <HAL_GetTick>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	1ad3      	subs	r3, r2, r3
 800b9c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d901      	bls.n	800b9cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	e121      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b9cc:	4b3a      	ldr	r3, [pc, #232]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800b9ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9d2:	f003 0302 	and.w	r3, r3, #2
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d1ed      	bne.n	800b9b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b9da:	7ffb      	ldrb	r3, [r7, #31]
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d105      	bne.n	800b9ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b9e0:	4b35      	ldr	r3, [pc, #212]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800b9e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9e4:	4a34      	ldr	r2, [pc, #208]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800b9e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f003 0320 	and.w	r3, r3, #32
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d03c      	beq.n	800ba72 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	699b      	ldr	r3, [r3, #24]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d01c      	beq.n	800ba3a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ba00:	4b2d      	ldr	r3, [pc, #180]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800ba02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ba06:	4a2c      	ldr	r2, [pc, #176]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800ba08:	f043 0301 	orr.w	r3, r3, #1
 800ba0c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba10:	f7f8 fe38 	bl	8004684 <HAL_GetTick>
 800ba14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ba16:	e008      	b.n	800ba2a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ba18:	f7f8 fe34 	bl	8004684 <HAL_GetTick>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d901      	bls.n	800ba2a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800ba26:	2303      	movs	r3, #3
 800ba28:	e0f2      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ba2a:	4b23      	ldr	r3, [pc, #140]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800ba2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ba30:	f003 0302 	and.w	r3, r3, #2
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d0ef      	beq.n	800ba18 <HAL_RCC_OscConfig+0x418>
 800ba38:	e01b      	b.n	800ba72 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ba3a:	4b1f      	ldr	r3, [pc, #124]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800ba3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ba40:	4a1d      	ldr	r2, [pc, #116]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800ba42:	f023 0301 	bic.w	r3, r3, #1
 800ba46:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba4a:	f7f8 fe1b 	bl	8004684 <HAL_GetTick>
 800ba4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ba50:	e008      	b.n	800ba64 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ba52:	f7f8 fe17 	bl	8004684 <HAL_GetTick>
 800ba56:	4602      	mov	r2, r0
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	1ad3      	subs	r3, r2, r3
 800ba5c:	2b02      	cmp	r3, #2
 800ba5e:	d901      	bls.n	800ba64 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800ba60:	2303      	movs	r3, #3
 800ba62:	e0d5      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ba64:	4b14      	ldr	r3, [pc, #80]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800ba66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ba6a:	f003 0302 	and.w	r3, r3, #2
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d1ef      	bne.n	800ba52 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	69db      	ldr	r3, [r3, #28]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f000 80c9 	beq.w	800bc0e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ba7c:	4b0e      	ldr	r3, [pc, #56]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	f003 030c 	and.w	r3, r3, #12
 800ba84:	2b0c      	cmp	r3, #12
 800ba86:	f000 8083 	beq.w	800bb90 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	69db      	ldr	r3, [r3, #28]
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d15e      	bne.n	800bb50 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba92:	4b09      	ldr	r3, [pc, #36]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a08      	ldr	r2, [pc, #32]	@ (800bab8 <HAL_RCC_OscConfig+0x4b8>)
 800ba98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ba9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba9e:	f7f8 fdf1 	bl	8004684 <HAL_GetTick>
 800baa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800baa4:	e00c      	b.n	800bac0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800baa6:	f7f8 fded 	bl	8004684 <HAL_GetTick>
 800baaa:	4602      	mov	r2, r0
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	1ad3      	subs	r3, r2, r3
 800bab0:	2b02      	cmp	r3, #2
 800bab2:	d905      	bls.n	800bac0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800bab4:	2303      	movs	r3, #3
 800bab6:	e0ab      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>
 800bab8:	40021000 	.word	0x40021000
 800babc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bac0:	4b55      	ldr	r3, [pc, #340]	@ (800bc18 <HAL_RCC_OscConfig+0x618>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1ec      	bne.n	800baa6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bacc:	4b52      	ldr	r3, [pc, #328]	@ (800bc18 <HAL_RCC_OscConfig+0x618>)
 800bace:	68da      	ldr	r2, [r3, #12]
 800bad0:	4b52      	ldr	r3, [pc, #328]	@ (800bc1c <HAL_RCC_OscConfig+0x61c>)
 800bad2:	4013      	ands	r3, r2
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	6a11      	ldr	r1, [r2, #32]
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800badc:	3a01      	subs	r2, #1
 800bade:	0112      	lsls	r2, r2, #4
 800bae0:	4311      	orrs	r1, r2
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800bae6:	0212      	lsls	r2, r2, #8
 800bae8:	4311      	orrs	r1, r2
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800baee:	0852      	lsrs	r2, r2, #1
 800baf0:	3a01      	subs	r2, #1
 800baf2:	0552      	lsls	r2, r2, #21
 800baf4:	4311      	orrs	r1, r2
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800bafa:	0852      	lsrs	r2, r2, #1
 800bafc:	3a01      	subs	r2, #1
 800bafe:	0652      	lsls	r2, r2, #25
 800bb00:	4311      	orrs	r1, r2
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800bb06:	06d2      	lsls	r2, r2, #27
 800bb08:	430a      	orrs	r2, r1
 800bb0a:	4943      	ldr	r1, [pc, #268]	@ (800bc18 <HAL_RCC_OscConfig+0x618>)
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bb10:	4b41      	ldr	r3, [pc, #260]	@ (800bc18 <HAL_RCC_OscConfig+0x618>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a40      	ldr	r2, [pc, #256]	@ (800bc18 <HAL_RCC_OscConfig+0x618>)
 800bb16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bb1a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bb1c:	4b3e      	ldr	r3, [pc, #248]	@ (800bc18 <HAL_RCC_OscConfig+0x618>)
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	4a3d      	ldr	r2, [pc, #244]	@ (800bc18 <HAL_RCC_OscConfig+0x618>)
 800bb22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bb26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb28:	f7f8 fdac 	bl	8004684 <HAL_GetTick>
 800bb2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bb2e:	e008      	b.n	800bb42 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb30:	f7f8 fda8 	bl	8004684 <HAL_GetTick>
 800bb34:	4602      	mov	r2, r0
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	d901      	bls.n	800bb42 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800bb3e:	2303      	movs	r3, #3
 800bb40:	e066      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bb42:	4b35      	ldr	r3, [pc, #212]	@ (800bc18 <HAL_RCC_OscConfig+0x618>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d0f0      	beq.n	800bb30 <HAL_RCC_OscConfig+0x530>
 800bb4e:	e05e      	b.n	800bc0e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb50:	4b31      	ldr	r3, [pc, #196]	@ (800bc18 <HAL_RCC_OscConfig+0x618>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4a30      	ldr	r2, [pc, #192]	@ (800bc18 <HAL_RCC_OscConfig+0x618>)
 800bb56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bb5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb5c:	f7f8 fd92 	bl	8004684 <HAL_GetTick>
 800bb60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bb62:	e008      	b.n	800bb76 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb64:	f7f8 fd8e 	bl	8004684 <HAL_GetTick>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	1ad3      	subs	r3, r2, r3
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	d901      	bls.n	800bb76 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800bb72:	2303      	movs	r3, #3
 800bb74:	e04c      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bb76:	4b28      	ldr	r3, [pc, #160]	@ (800bc18 <HAL_RCC_OscConfig+0x618>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d1f0      	bne.n	800bb64 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800bb82:	4b25      	ldr	r3, [pc, #148]	@ (800bc18 <HAL_RCC_OscConfig+0x618>)
 800bb84:	68da      	ldr	r2, [r3, #12]
 800bb86:	4924      	ldr	r1, [pc, #144]	@ (800bc18 <HAL_RCC_OscConfig+0x618>)
 800bb88:	4b25      	ldr	r3, [pc, #148]	@ (800bc20 <HAL_RCC_OscConfig+0x620>)
 800bb8a:	4013      	ands	r3, r2
 800bb8c:	60cb      	str	r3, [r1, #12]
 800bb8e:	e03e      	b.n	800bc0e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	69db      	ldr	r3, [r3, #28]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d101      	bne.n	800bb9c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	e039      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800bb9c:	4b1e      	ldr	r3, [pc, #120]	@ (800bc18 <HAL_RCC_OscConfig+0x618>)
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f003 0203 	and.w	r2, r3, #3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6a1b      	ldr	r3, [r3, #32]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d12c      	bne.n	800bc0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d123      	bne.n	800bc0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbcc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d11b      	bne.n	800bc0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbdc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d113      	bne.n	800bc0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbec:	085b      	lsrs	r3, r3, #1
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d109      	bne.n	800bc0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc00:	085b      	lsrs	r3, r3, #1
 800bc02:	3b01      	subs	r3, #1
 800bc04:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d001      	beq.n	800bc0e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	e000      	b.n	800bc10 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3720      	adds	r7, #32
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	40021000 	.word	0x40021000
 800bc1c:	019f800c 	.word	0x019f800c
 800bc20:	feeefffc 	.word	0xfeeefffc

0800bc24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b086      	sub	sp, #24
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d101      	bne.n	800bc3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	e11e      	b.n	800be7a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bc3c:	4b91      	ldr	r3, [pc, #580]	@ (800be84 <HAL_RCC_ClockConfig+0x260>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f003 030f 	and.w	r3, r3, #15
 800bc44:	683a      	ldr	r2, [r7, #0]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d910      	bls.n	800bc6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc4a:	4b8e      	ldr	r3, [pc, #568]	@ (800be84 <HAL_RCC_ClockConfig+0x260>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f023 020f 	bic.w	r2, r3, #15
 800bc52:	498c      	ldr	r1, [pc, #560]	@ (800be84 <HAL_RCC_ClockConfig+0x260>)
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc5a:	4b8a      	ldr	r3, [pc, #552]	@ (800be84 <HAL_RCC_ClockConfig+0x260>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f003 030f 	and.w	r3, r3, #15
 800bc62:	683a      	ldr	r2, [r7, #0]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d001      	beq.n	800bc6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e106      	b.n	800be7a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f003 0301 	and.w	r3, r3, #1
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d073      	beq.n	800bd60 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	2b03      	cmp	r3, #3
 800bc7e:	d129      	bne.n	800bcd4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bc80:	4b81      	ldr	r3, [pc, #516]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d101      	bne.n	800bc90 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e0f4      	b.n	800be7a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800bc90:	f000 f9ca 	bl	800c028 <RCC_GetSysClockFreqFromPLLSource>
 800bc94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	4a7c      	ldr	r2, [pc, #496]	@ (800be8c <HAL_RCC_ClockConfig+0x268>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d93f      	bls.n	800bd1e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800bc9e:	4b7a      	ldr	r3, [pc, #488]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d009      	beq.n	800bcbe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d033      	beq.n	800bd1e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d12f      	bne.n	800bd1e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800bcbe:	4b72      	ldr	r3, [pc, #456]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800bcc0:	689b      	ldr	r3, [r3, #8]
 800bcc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bcc6:	4a70      	ldr	r2, [pc, #448]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800bcc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bccc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800bcce:	2380      	movs	r3, #128	@ 0x80
 800bcd0:	617b      	str	r3, [r7, #20]
 800bcd2:	e024      	b.n	800bd1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	2b02      	cmp	r3, #2
 800bcda:	d107      	bne.n	800bcec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bcdc:	4b6a      	ldr	r3, [pc, #424]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d109      	bne.n	800bcfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800bce8:	2301      	movs	r3, #1
 800bcea:	e0c6      	b.n	800be7a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bcec:	4b66      	ldr	r3, [pc, #408]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d101      	bne.n	800bcfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	e0be      	b.n	800be7a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800bcfc:	f000 f8ce 	bl	800be9c <HAL_RCC_GetSysClockFreq>
 800bd00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	4a61      	ldr	r2, [pc, #388]	@ (800be8c <HAL_RCC_ClockConfig+0x268>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d909      	bls.n	800bd1e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800bd0a:	4b5f      	ldr	r3, [pc, #380]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800bd0c:	689b      	ldr	r3, [r3, #8]
 800bd0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bd12:	4a5d      	ldr	r2, [pc, #372]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800bd14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800bd1a:	2380      	movs	r3, #128	@ 0x80
 800bd1c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bd1e:	4b5a      	ldr	r3, [pc, #360]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	f023 0203 	bic.w	r2, r3, #3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	4957      	ldr	r1, [pc, #348]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd30:	f7f8 fca8 	bl	8004684 <HAL_GetTick>
 800bd34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd36:	e00a      	b.n	800bd4e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bd38:	f7f8 fca4 	bl	8004684 <HAL_GetTick>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	1ad3      	subs	r3, r2, r3
 800bd42:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d901      	bls.n	800bd4e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800bd4a:	2303      	movs	r3, #3
 800bd4c:	e095      	b.n	800be7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd4e:	4b4e      	ldr	r3, [pc, #312]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	f003 020c 	and.w	r2, r3, #12
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d1eb      	bne.n	800bd38 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f003 0302 	and.w	r3, r3, #2
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d023      	beq.n	800bdb4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f003 0304 	and.w	r3, r3, #4
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d005      	beq.n	800bd84 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bd78:	4b43      	ldr	r3, [pc, #268]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	4a42      	ldr	r2, [pc, #264]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800bd7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800bd82:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f003 0308 	and.w	r3, r3, #8
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d007      	beq.n	800bda0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800bd90:	4b3d      	ldr	r3, [pc, #244]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bd98:	4a3b      	ldr	r2, [pc, #236]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800bd9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800bd9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bda0:	4b39      	ldr	r3, [pc, #228]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	4936      	ldr	r1, [pc, #216]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	608b      	str	r3, [r1, #8]
 800bdb2:	e008      	b.n	800bdc6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	2b80      	cmp	r3, #128	@ 0x80
 800bdb8:	d105      	bne.n	800bdc6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800bdba:	4b33      	ldr	r3, [pc, #204]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800bdbc:	689b      	ldr	r3, [r3, #8]
 800bdbe:	4a32      	ldr	r2, [pc, #200]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800bdc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bdc4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bdc6:	4b2f      	ldr	r3, [pc, #188]	@ (800be84 <HAL_RCC_ClockConfig+0x260>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f003 030f 	and.w	r3, r3, #15
 800bdce:	683a      	ldr	r2, [r7, #0]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d21d      	bcs.n	800be10 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdd4:	4b2b      	ldr	r3, [pc, #172]	@ (800be84 <HAL_RCC_ClockConfig+0x260>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f023 020f 	bic.w	r2, r3, #15
 800bddc:	4929      	ldr	r1, [pc, #164]	@ (800be84 <HAL_RCC_ClockConfig+0x260>)
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	4313      	orrs	r3, r2
 800bde2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bde4:	f7f8 fc4e 	bl	8004684 <HAL_GetTick>
 800bde8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdea:	e00a      	b.n	800be02 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bdec:	f7f8 fc4a 	bl	8004684 <HAL_GetTick>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	1ad3      	subs	r3, r2, r3
 800bdf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d901      	bls.n	800be02 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800bdfe:	2303      	movs	r3, #3
 800be00:	e03b      	b.n	800be7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800be02:	4b20      	ldr	r3, [pc, #128]	@ (800be84 <HAL_RCC_ClockConfig+0x260>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f003 030f 	and.w	r3, r3, #15
 800be0a:	683a      	ldr	r2, [r7, #0]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d1ed      	bne.n	800bdec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f003 0304 	and.w	r3, r3, #4
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d008      	beq.n	800be2e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800be1c:	4b1a      	ldr	r3, [pc, #104]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800be1e:	689b      	ldr	r3, [r3, #8]
 800be20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	4917      	ldr	r1, [pc, #92]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800be2a:	4313      	orrs	r3, r2
 800be2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f003 0308 	and.w	r3, r3, #8
 800be36:	2b00      	cmp	r3, #0
 800be38:	d009      	beq.n	800be4e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800be3a:	4b13      	ldr	r3, [pc, #76]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	00db      	lsls	r3, r3, #3
 800be48:	490f      	ldr	r1, [pc, #60]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800be4a:	4313      	orrs	r3, r2
 800be4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800be4e:	f000 f825 	bl	800be9c <HAL_RCC_GetSysClockFreq>
 800be52:	4602      	mov	r2, r0
 800be54:	4b0c      	ldr	r3, [pc, #48]	@ (800be88 <HAL_RCC_ClockConfig+0x264>)
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	091b      	lsrs	r3, r3, #4
 800be5a:	f003 030f 	and.w	r3, r3, #15
 800be5e:	490c      	ldr	r1, [pc, #48]	@ (800be90 <HAL_RCC_ClockConfig+0x26c>)
 800be60:	5ccb      	ldrb	r3, [r1, r3]
 800be62:	f003 031f 	and.w	r3, r3, #31
 800be66:	fa22 f303 	lsr.w	r3, r2, r3
 800be6a:	4a0a      	ldr	r2, [pc, #40]	@ (800be94 <HAL_RCC_ClockConfig+0x270>)
 800be6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800be6e:	4b0a      	ldr	r3, [pc, #40]	@ (800be98 <HAL_RCC_ClockConfig+0x274>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4618      	mov	r0, r3
 800be74:	f7f8 fbba 	bl	80045ec <HAL_InitTick>
 800be78:	4603      	mov	r3, r0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3718      	adds	r7, #24
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	40022000 	.word	0x40022000
 800be88:	40021000 	.word	0x40021000
 800be8c:	04c4b400 	.word	0x04c4b400
 800be90:	08025fcc 	.word	0x08025fcc
 800be94:	20000040 	.word	0x20000040
 800be98:	20000048 	.word	0x20000048

0800be9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b087      	sub	sp, #28
 800bea0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800bea2:	4b2c      	ldr	r3, [pc, #176]	@ (800bf54 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	f003 030c 	and.w	r3, r3, #12
 800beaa:	2b04      	cmp	r3, #4
 800beac:	d102      	bne.n	800beb4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800beae:	4b2a      	ldr	r3, [pc, #168]	@ (800bf58 <HAL_RCC_GetSysClockFreq+0xbc>)
 800beb0:	613b      	str	r3, [r7, #16]
 800beb2:	e047      	b.n	800bf44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800beb4:	4b27      	ldr	r3, [pc, #156]	@ (800bf54 <HAL_RCC_GetSysClockFreq+0xb8>)
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	f003 030c 	and.w	r3, r3, #12
 800bebc:	2b08      	cmp	r3, #8
 800bebe:	d102      	bne.n	800bec6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bec0:	4b26      	ldr	r3, [pc, #152]	@ (800bf5c <HAL_RCC_GetSysClockFreq+0xc0>)
 800bec2:	613b      	str	r3, [r7, #16]
 800bec4:	e03e      	b.n	800bf44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800bec6:	4b23      	ldr	r3, [pc, #140]	@ (800bf54 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	f003 030c 	and.w	r3, r3, #12
 800bece:	2b0c      	cmp	r3, #12
 800bed0:	d136      	bne.n	800bf40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bed2:	4b20      	ldr	r3, [pc, #128]	@ (800bf54 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	f003 0303 	and.w	r3, r3, #3
 800beda:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bedc:	4b1d      	ldr	r3, [pc, #116]	@ (800bf54 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	091b      	lsrs	r3, r3, #4
 800bee2:	f003 030f 	and.w	r3, r3, #15
 800bee6:	3301      	adds	r3, #1
 800bee8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2b03      	cmp	r3, #3
 800beee:	d10c      	bne.n	800bf0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bef0:	4a1a      	ldr	r2, [pc, #104]	@ (800bf5c <HAL_RCC_GetSysClockFreq+0xc0>)
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bef8:	4a16      	ldr	r2, [pc, #88]	@ (800bf54 <HAL_RCC_GetSysClockFreq+0xb8>)
 800befa:	68d2      	ldr	r2, [r2, #12]
 800befc:	0a12      	lsrs	r2, r2, #8
 800befe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bf02:	fb02 f303 	mul.w	r3, r2, r3
 800bf06:	617b      	str	r3, [r7, #20]
      break;
 800bf08:	e00c      	b.n	800bf24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bf0a:	4a13      	ldr	r2, [pc, #76]	@ (800bf58 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf12:	4a10      	ldr	r2, [pc, #64]	@ (800bf54 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bf14:	68d2      	ldr	r2, [r2, #12]
 800bf16:	0a12      	lsrs	r2, r2, #8
 800bf18:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bf1c:	fb02 f303 	mul.w	r3, r2, r3
 800bf20:	617b      	str	r3, [r7, #20]
      break;
 800bf22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bf24:	4b0b      	ldr	r3, [pc, #44]	@ (800bf54 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	0e5b      	lsrs	r3, r3, #25
 800bf2a:	f003 0303 	and.w	r3, r3, #3
 800bf2e:	3301      	adds	r3, #1
 800bf30:	005b      	lsls	r3, r3, #1
 800bf32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800bf34:	697a      	ldr	r2, [r7, #20]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf3c:	613b      	str	r3, [r7, #16]
 800bf3e:	e001      	b.n	800bf44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800bf40:	2300      	movs	r3, #0
 800bf42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bf44:	693b      	ldr	r3, [r7, #16]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	371c      	adds	r7, #28
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr
 800bf52:	bf00      	nop
 800bf54:	40021000 	.word	0x40021000
 800bf58:	00f42400 	.word	0x00f42400
 800bf5c:	007a1200 	.word	0x007a1200

0800bf60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bf60:	b480      	push	{r7}
 800bf62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bf64:	4b03      	ldr	r3, [pc, #12]	@ (800bf74 <HAL_RCC_GetHCLKFreq+0x14>)
 800bf66:	681b      	ldr	r3, [r3, #0]
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop
 800bf74:	20000040 	.word	0x20000040

0800bf78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800bf7c:	f7ff fff0 	bl	800bf60 <HAL_RCC_GetHCLKFreq>
 800bf80:	4602      	mov	r2, r0
 800bf82:	4b06      	ldr	r3, [pc, #24]	@ (800bf9c <HAL_RCC_GetPCLK1Freq+0x24>)
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	0a1b      	lsrs	r3, r3, #8
 800bf88:	f003 0307 	and.w	r3, r3, #7
 800bf8c:	4904      	ldr	r1, [pc, #16]	@ (800bfa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bf8e:	5ccb      	ldrb	r3, [r1, r3]
 800bf90:	f003 031f 	and.w	r3, r3, #31
 800bf94:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	40021000 	.word	0x40021000
 800bfa0:	08025fdc 	.word	0x08025fdc

0800bfa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800bfa8:	f7ff ffda 	bl	800bf60 <HAL_RCC_GetHCLKFreq>
 800bfac:	4602      	mov	r2, r0
 800bfae:	4b06      	ldr	r3, [pc, #24]	@ (800bfc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	0adb      	lsrs	r3, r3, #11
 800bfb4:	f003 0307 	and.w	r3, r3, #7
 800bfb8:	4904      	ldr	r1, [pc, #16]	@ (800bfcc <HAL_RCC_GetPCLK2Freq+0x28>)
 800bfba:	5ccb      	ldrb	r3, [r1, r3]
 800bfbc:	f003 031f 	and.w	r3, r3, #31
 800bfc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	40021000 	.word	0x40021000
 800bfcc:	08025fdc 	.word	0x08025fdc

0800bfd0 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800bfd4:	4b05      	ldr	r3, [pc, #20]	@ (800bfec <HAL_RCC_EnableCSS+0x1c>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a04      	ldr	r2, [pc, #16]	@ (800bfec <HAL_RCC_EnableCSS+0x1c>)
 800bfda:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bfde:	6013      	str	r3, [r2, #0]
}
 800bfe0:	bf00      	nop
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop
 800bfec:	40021000 	.word	0x40021000

0800bff0 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800bff4:	4b07      	ldr	r3, [pc, #28]	@ (800c014 <HAL_RCC_NMI_IRQHandler+0x24>)
 800bff6:	69db      	ldr	r3, [r3, #28]
 800bff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bffc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c000:	d105      	bne.n	800c00e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800c002:	f000 f809 	bl	800c018 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800c006:	4b03      	ldr	r3, [pc, #12]	@ (800c014 <HAL_RCC_NMI_IRQHandler+0x24>)
 800c008:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c00c:	621a      	str	r2, [r3, #32]
  }
}
 800c00e:	bf00      	nop
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	40021000 	.word	0x40021000

0800c018 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800c018:	b480      	push	{r7}
 800c01a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800c01c:	bf00      	nop
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
	...

0800c028 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800c028:	b480      	push	{r7}
 800c02a:	b087      	sub	sp, #28
 800c02c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c02e:	4b1e      	ldr	r3, [pc, #120]	@ (800c0a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	f003 0303 	and.w	r3, r3, #3
 800c036:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c038:	4b1b      	ldr	r3, [pc, #108]	@ (800c0a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c03a:	68db      	ldr	r3, [r3, #12]
 800c03c:	091b      	lsrs	r3, r3, #4
 800c03e:	f003 030f 	and.w	r3, r3, #15
 800c042:	3301      	adds	r3, #1
 800c044:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	2b03      	cmp	r3, #3
 800c04a:	d10c      	bne.n	800c066 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c04c:	4a17      	ldr	r2, [pc, #92]	@ (800c0ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	fbb2 f3f3 	udiv	r3, r2, r3
 800c054:	4a14      	ldr	r2, [pc, #80]	@ (800c0a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c056:	68d2      	ldr	r2, [r2, #12]
 800c058:	0a12      	lsrs	r2, r2, #8
 800c05a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c05e:	fb02 f303 	mul.w	r3, r2, r3
 800c062:	617b      	str	r3, [r7, #20]
    break;
 800c064:	e00c      	b.n	800c080 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c066:	4a12      	ldr	r2, [pc, #72]	@ (800c0b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c06e:	4a0e      	ldr	r2, [pc, #56]	@ (800c0a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c070:	68d2      	ldr	r2, [r2, #12]
 800c072:	0a12      	lsrs	r2, r2, #8
 800c074:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c078:	fb02 f303 	mul.w	r3, r2, r3
 800c07c:	617b      	str	r3, [r7, #20]
    break;
 800c07e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c080:	4b09      	ldr	r3, [pc, #36]	@ (800c0a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	0e5b      	lsrs	r3, r3, #25
 800c086:	f003 0303 	and.w	r3, r3, #3
 800c08a:	3301      	adds	r3, #1
 800c08c:	005b      	lsls	r3, r3, #1
 800c08e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800c090:	697a      	ldr	r2, [r7, #20]
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	fbb2 f3f3 	udiv	r3, r2, r3
 800c098:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800c09a:	687b      	ldr	r3, [r7, #4]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	371c      	adds	r7, #28
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr
 800c0a8:	40021000 	.word	0x40021000
 800c0ac:	007a1200 	.word	0x007a1200
 800c0b0:	00f42400 	.word	0x00f42400

0800c0b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b086      	sub	sp, #24
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c0bc:	2300      	movs	r3, #0
 800c0be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	f000 8098 	beq.w	800c202 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c0d6:	4b43      	ldr	r3, [pc, #268]	@ (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c0d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d10d      	bne.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c0e2:	4b40      	ldr	r3, [pc, #256]	@ (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c0e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0e6:	4a3f      	ldr	r2, [pc, #252]	@ (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c0e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c0ec:	6593      	str	r3, [r2, #88]	@ 0x58
 800c0ee:	4b3d      	ldr	r3, [pc, #244]	@ (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c0f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c0f6:	60bb      	str	r3, [r7, #8]
 800c0f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c0fe:	4b3a      	ldr	r3, [pc, #232]	@ (800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4a39      	ldr	r2, [pc, #228]	@ (800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c108:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c10a:	f7f8 fabb 	bl	8004684 <HAL_GetTick>
 800c10e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c110:	e009      	b.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c112:	f7f8 fab7 	bl	8004684 <HAL_GetTick>
 800c116:	4602      	mov	r2, r0
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	1ad3      	subs	r3, r2, r3
 800c11c:	2b02      	cmp	r3, #2
 800c11e:	d902      	bls.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800c120:	2303      	movs	r3, #3
 800c122:	74fb      	strb	r3, [r7, #19]
        break;
 800c124:	e005      	b.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c126:	4b30      	ldr	r3, [pc, #192]	@ (800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d0ef      	beq.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800c132:	7cfb      	ldrb	r3, [r7, #19]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d159      	bne.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c138:	4b2a      	ldr	r3, [pc, #168]	@ (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c13a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c13e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c142:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d01e      	beq.n	800c188 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c14e:	697a      	ldr	r2, [r7, #20]
 800c150:	429a      	cmp	r2, r3
 800c152:	d019      	beq.n	800c188 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c154:	4b23      	ldr	r3, [pc, #140]	@ (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c15a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c15e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c160:	4b20      	ldr	r3, [pc, #128]	@ (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c166:	4a1f      	ldr	r2, [pc, #124]	@ (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c16c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c170:	4b1c      	ldr	r3, [pc, #112]	@ (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c176:	4a1b      	ldr	r2, [pc, #108]	@ (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c178:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c17c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c180:	4a18      	ldr	r2, [pc, #96]	@ (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	f003 0301 	and.w	r3, r3, #1
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d016      	beq.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c192:	f7f8 fa77 	bl	8004684 <HAL_GetTick>
 800c196:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c198:	e00b      	b.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c19a:	f7f8 fa73 	bl	8004684 <HAL_GetTick>
 800c19e:	4602      	mov	r2, r0
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	1ad3      	subs	r3, r2, r3
 800c1a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d902      	bls.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800c1ac:	2303      	movs	r3, #3
 800c1ae:	74fb      	strb	r3, [r7, #19]
            break;
 800c1b0:	e006      	b.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c1b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c1b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1b8:	f003 0302 	and.w	r3, r3, #2
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d0ec      	beq.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800c1c0:	7cfb      	ldrb	r3, [r7, #19]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d10b      	bne.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c1c6:	4b07      	ldr	r3, [pc, #28]	@ (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c1c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1d4:	4903      	ldr	r1, [pc, #12]	@ (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800c1dc:	e008      	b.n	800c1f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c1de:	7cfb      	ldrb	r3, [r7, #19]
 800c1e0:	74bb      	strb	r3, [r7, #18]
 800c1e2:	e005      	b.n	800c1f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c1e4:	40021000 	.word	0x40021000
 800c1e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1ec:	7cfb      	ldrb	r3, [r7, #19]
 800c1ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c1f0:	7c7b      	ldrb	r3, [r7, #17]
 800c1f2:	2b01      	cmp	r3, #1
 800c1f4:	d105      	bne.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c1f6:	4ba7      	ldr	r3, [pc, #668]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1fa:	4aa6      	ldr	r2, [pc, #664]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c200:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f003 0301 	and.w	r3, r3, #1
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00a      	beq.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c20e:	4ba1      	ldr	r3, [pc, #644]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c214:	f023 0203 	bic.w	r2, r3, #3
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	499d      	ldr	r1, [pc, #628]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c21e:	4313      	orrs	r3, r2
 800c220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f003 0302 	and.w	r3, r3, #2
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00a      	beq.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c230:	4b98      	ldr	r3, [pc, #608]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c236:	f023 020c 	bic.w	r2, r3, #12
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	4995      	ldr	r1, [pc, #596]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c240:	4313      	orrs	r3, r2
 800c242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f003 0304 	and.w	r3, r3, #4
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d00a      	beq.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c252:	4b90      	ldr	r3, [pc, #576]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c258:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	498c      	ldr	r1, [pc, #560]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c262:	4313      	orrs	r3, r2
 800c264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f003 0308 	and.w	r3, r3, #8
 800c270:	2b00      	cmp	r3, #0
 800c272:	d00a      	beq.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c274:	4b87      	ldr	r3, [pc, #540]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c27a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	691b      	ldr	r3, [r3, #16]
 800c282:	4984      	ldr	r1, [pc, #528]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c284:	4313      	orrs	r3, r2
 800c286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f003 0310 	and.w	r3, r3, #16
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00a      	beq.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c296:	4b7f      	ldr	r3, [pc, #508]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c29c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	695b      	ldr	r3, [r3, #20]
 800c2a4:	497b      	ldr	r1, [pc, #492]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f003 0320 	and.w	r3, r3, #32
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00a      	beq.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c2b8:	4b76      	ldr	r3, [pc, #472]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c2ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	699b      	ldr	r3, [r3, #24]
 800c2c6:	4973      	ldr	r1, [pc, #460]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00a      	beq.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c2da:	4b6e      	ldr	r3, [pc, #440]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c2dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2e0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	69db      	ldr	r3, [r3, #28]
 800c2e8:	496a      	ldr	r1, [pc, #424]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d00a      	beq.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c2fc:	4b65      	ldr	r3, [pc, #404]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c2fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c302:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6a1b      	ldr	r3, [r3, #32]
 800c30a:	4962      	ldr	r1, [pc, #392]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c30c:	4313      	orrs	r3, r2
 800c30e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00a      	beq.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c31e:	4b5d      	ldr	r3, [pc, #372]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c324:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c32c:	4959      	ldr	r1, [pc, #356]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c32e:	4313      	orrs	r3, r2
 800c330:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00a      	beq.n	800c356 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c340:	4b54      	ldr	r3, [pc, #336]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c342:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c346:	f023 0203 	bic.w	r2, r3, #3
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c34e:	4951      	ldr	r1, [pc, #324]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c350:	4313      	orrs	r3, r2
 800c352:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d00a      	beq.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c362:	4b4c      	ldr	r3, [pc, #304]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c368:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c370:	4948      	ldr	r1, [pc, #288]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c372:	4313      	orrs	r3, r2
 800c374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c380:	2b00      	cmp	r3, #0
 800c382:	d015      	beq.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c384:	4b43      	ldr	r3, [pc, #268]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c38a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c392:	4940      	ldr	r1, [pc, #256]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c394:	4313      	orrs	r3, r2
 800c396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c39e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c3a2:	d105      	bne.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c3a4:	4b3b      	ldr	r3, [pc, #236]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	4a3a      	ldr	r2, [pc, #232]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c3aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c3ae:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d015      	beq.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c3bc:	4b35      	ldr	r3, [pc, #212]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3ca:	4932      	ldr	r1, [pc, #200]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c3da:	d105      	bne.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c3dc:	4b2d      	ldr	r3, [pc, #180]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c3de:	68db      	ldr	r3, [r3, #12]
 800c3e0:	4a2c      	ldr	r2, [pc, #176]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c3e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c3e6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d015      	beq.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c3f4:	4b27      	ldr	r3, [pc, #156]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c402:	4924      	ldr	r1, [pc, #144]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c404:	4313      	orrs	r3, r2
 800c406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c40e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c412:	d105      	bne.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c414:	4b1f      	ldr	r3, [pc, #124]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	4a1e      	ldr	r2, [pc, #120]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c41a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c41e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d015      	beq.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c42c:	4b19      	ldr	r3, [pc, #100]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c42e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c432:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c43a:	4916      	ldr	r1, [pc, #88]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c43c:	4313      	orrs	r3, r2
 800c43e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c446:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c44a:	d105      	bne.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c44c:	4b11      	ldr	r3, [pc, #68]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	4a10      	ldr	r2, [pc, #64]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c452:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c456:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c460:	2b00      	cmp	r3, #0
 800c462:	d019      	beq.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c464:	4b0b      	ldr	r3, [pc, #44]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c46a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c472:	4908      	ldr	r1, [pc, #32]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c474:	4313      	orrs	r3, r2
 800c476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c47e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c482:	d109      	bne.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c484:	4b03      	ldr	r3, [pc, #12]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	4a02      	ldr	r2, [pc, #8]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c48a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c48e:	60d3      	str	r3, [r2, #12]
 800c490:	e002      	b.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800c492:	bf00      	nop
 800c494:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d015      	beq.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c4a4:	4b29      	ldr	r3, [pc, #164]	@ (800c54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4b2:	4926      	ldr	r1, [pc, #152]	@ (800c54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c4c2:	d105      	bne.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c4c4:	4b21      	ldr	r3, [pc, #132]	@ (800c54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	4a20      	ldr	r2, [pc, #128]	@ (800c54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c4ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c4ce:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d015      	beq.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800c4dc:	4b1b      	ldr	r3, [pc, #108]	@ (800c54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4e2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4ea:	4918      	ldr	r1, [pc, #96]	@ (800c54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4fa:	d105      	bne.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c4fc:	4b13      	ldr	r3, [pc, #76]	@ (800c54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	4a12      	ldr	r2, [pc, #72]	@ (800c54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c506:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c510:	2b00      	cmp	r3, #0
 800c512:	d015      	beq.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c514:	4b0d      	ldr	r3, [pc, #52]	@ (800c54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c516:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c51a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c522:	490a      	ldr	r1, [pc, #40]	@ (800c54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c524:	4313      	orrs	r3, r2
 800c526:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c52e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c532:	d105      	bne.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c534:	4b05      	ldr	r3, [pc, #20]	@ (800c54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	4a04      	ldr	r2, [pc, #16]	@ (800c54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c53a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c53e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c540:	7cbb      	ldrb	r3, [r7, #18]
}
 800c542:	4618      	mov	r0, r3
 800c544:	3718      	adds	r7, #24
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	40021000 	.word	0x40021000

0800c550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d101      	bne.n	800c562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c55e:	2301      	movs	r3, #1
 800c560:	e09d      	b.n	800c69e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c566:	2b00      	cmp	r3, #0
 800c568:	d108      	bne.n	800c57c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c572:	d009      	beq.n	800c588 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	61da      	str	r2, [r3, #28]
 800c57a:	e005      	b.n	800c588 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c594:	b2db      	uxtb	r3, r3
 800c596:	2b00      	cmp	r3, #0
 800c598:	d106      	bne.n	800c5a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2200      	movs	r2, #0
 800c59e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f7f7 fab0 	bl	8003b08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2202      	movs	r2, #2
 800c5ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c5be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c5c8:	d902      	bls.n	800c5d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	60fb      	str	r3, [r7, #12]
 800c5ce:	e002      	b.n	800c5d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c5d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c5d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800c5de:	d007      	beq.n	800c5f0 <HAL_SPI_Init+0xa0>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c5e8:	d002      	beq.n	800c5f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800c600:	431a      	orrs	r2, r3
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	691b      	ldr	r3, [r3, #16]
 800c606:	f003 0302 	and.w	r3, r3, #2
 800c60a:	431a      	orrs	r2, r3
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	695b      	ldr	r3, [r3, #20]
 800c610:	f003 0301 	and.w	r3, r3, #1
 800c614:	431a      	orrs	r2, r3
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	699b      	ldr	r3, [r3, #24]
 800c61a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c61e:	431a      	orrs	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	69db      	ldr	r3, [r3, #28]
 800c624:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c628:	431a      	orrs	r2, r3
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6a1b      	ldr	r3, [r3, #32]
 800c62e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c632:	ea42 0103 	orr.w	r1, r2, r3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c63a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	430a      	orrs	r2, r1
 800c644:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	699b      	ldr	r3, [r3, #24]
 800c64a:	0c1b      	lsrs	r3, r3, #16
 800c64c:	f003 0204 	and.w	r2, r3, #4
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c654:	f003 0310 	and.w	r3, r3, #16
 800c658:	431a      	orrs	r2, r3
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c65e:	f003 0308 	and.w	r3, r3, #8
 800c662:	431a      	orrs	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c66c:	ea42 0103 	orr.w	r1, r2, r3
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	430a      	orrs	r2, r1
 800c67c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	69da      	ldr	r2, [r3, #28]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c68c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2200      	movs	r2, #0
 800c692:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2201      	movs	r2, #1
 800c698:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800c69c:	2300      	movs	r3, #0
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3710      	adds	r7, #16
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}

0800c6a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6a6:	b580      	push	{r7, lr}
 800c6a8:	b088      	sub	sp, #32
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	60f8      	str	r0, [r7, #12]
 800c6ae:	60b9      	str	r1, [r7, #8]
 800c6b0:	603b      	str	r3, [r7, #0]
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c6b6:	f7f7 ffe5 	bl	8004684 <HAL_GetTick>
 800c6ba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800c6bc:	88fb      	ldrh	r3, [r7, #6]
 800c6be:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d001      	beq.n	800c6d0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800c6cc:	2302      	movs	r3, #2
 800c6ce:	e15c      	b.n	800c98a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d002      	beq.n	800c6dc <HAL_SPI_Transmit+0x36>
 800c6d6:	88fb      	ldrh	r3, [r7, #6]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d101      	bne.n	800c6e0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	e154      	b.n	800c98a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d101      	bne.n	800c6ee <HAL_SPI_Transmit+0x48>
 800c6ea:	2302      	movs	r3, #2
 800c6ec:	e14d      	b.n	800c98a <HAL_SPI_Transmit+0x2e4>
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2203      	movs	r2, #3
 800c6fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2200      	movs	r2, #0
 800c702:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	88fa      	ldrh	r2, [r7, #6]
 800c70e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	88fa      	ldrh	r2, [r7, #6]
 800c714:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2200      	movs	r2, #0
 800c71a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2200      	movs	r2, #0
 800c720:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2200      	movs	r2, #0
 800c728:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2200      	movs	r2, #0
 800c730:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2200      	movs	r2, #0
 800c736:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	689b      	ldr	r3, [r3, #8]
 800c73c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c740:	d10f      	bne.n	800c762 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c750:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c760:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c76c:	2b40      	cmp	r3, #64	@ 0x40
 800c76e:	d007      	beq.n	800c780 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c77e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c788:	d952      	bls.n	800c830 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d002      	beq.n	800c798 <HAL_SPI_Transmit+0xf2>
 800c792:	8b7b      	ldrh	r3, [r7, #26]
 800c794:	2b01      	cmp	r3, #1
 800c796:	d145      	bne.n	800c824 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c79c:	881a      	ldrh	r2, [r3, #0]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7a8:	1c9a      	adds	r2, r3, #2
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	3b01      	subs	r3, #1
 800c7b6:	b29a      	uxth	r2, r3
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c7bc:	e032      	b.n	800c824 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	689b      	ldr	r3, [r3, #8]
 800c7c4:	f003 0302 	and.w	r3, r3, #2
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	d112      	bne.n	800c7f2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7d0:	881a      	ldrh	r2, [r3, #0]
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7dc:	1c9a      	adds	r2, r3, #2
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	3b01      	subs	r3, #1
 800c7ea:	b29a      	uxth	r2, r3
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c7f0:	e018      	b.n	800c824 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c7f2:	f7f7 ff47 	bl	8004684 <HAL_GetTick>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	1ad3      	subs	r3, r2, r3
 800c7fc:	683a      	ldr	r2, [r7, #0]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d803      	bhi.n	800c80a <HAL_SPI_Transmit+0x164>
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c808:	d102      	bne.n	800c810 <HAL_SPI_Transmit+0x16a>
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d109      	bne.n	800c824 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2201      	movs	r2, #1
 800c814:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2200      	movs	r2, #0
 800c81c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800c820:	2303      	movs	r3, #3
 800c822:	e0b2      	b.n	800c98a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c828:	b29b      	uxth	r3, r3
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d1c7      	bne.n	800c7be <HAL_SPI_Transmit+0x118>
 800c82e:	e083      	b.n	800c938 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d002      	beq.n	800c83e <HAL_SPI_Transmit+0x198>
 800c838:	8b7b      	ldrh	r3, [r7, #26]
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	d177      	bne.n	800c92e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c842:	b29b      	uxth	r3, r3
 800c844:	2b01      	cmp	r3, #1
 800c846:	d912      	bls.n	800c86e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c84c:	881a      	ldrh	r2, [r3, #0]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c858:	1c9a      	adds	r2, r3, #2
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c862:	b29b      	uxth	r3, r3
 800c864:	3b02      	subs	r3, #2
 800c866:	b29a      	uxth	r2, r3
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c86c:	e05f      	b.n	800c92e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	330c      	adds	r3, #12
 800c878:	7812      	ldrb	r2, [r2, #0]
 800c87a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c880:	1c5a      	adds	r2, r3, #1
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	3b01      	subs	r3, #1
 800c88e:	b29a      	uxth	r2, r3
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c894:	e04b      	b.n	800c92e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	f003 0302 	and.w	r3, r3, #2
 800c8a0:	2b02      	cmp	r3, #2
 800c8a2:	d12b      	bne.n	800c8fc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d912      	bls.n	800c8d4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8b2:	881a      	ldrh	r2, [r3, #0]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8be:	1c9a      	adds	r2, r3, #2
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	3b02      	subs	r3, #2
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c8d2:	e02c      	b.n	800c92e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	330c      	adds	r3, #12
 800c8de:	7812      	ldrb	r2, [r2, #0]
 800c8e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8e6:	1c5a      	adds	r2, r3, #1
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	3b01      	subs	r3, #1
 800c8f4:	b29a      	uxth	r2, r3
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c8fa:	e018      	b.n	800c92e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c8fc:	f7f7 fec2 	bl	8004684 <HAL_GetTick>
 800c900:	4602      	mov	r2, r0
 800c902:	69fb      	ldr	r3, [r7, #28]
 800c904:	1ad3      	subs	r3, r2, r3
 800c906:	683a      	ldr	r2, [r7, #0]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d803      	bhi.n	800c914 <HAL_SPI_Transmit+0x26e>
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c912:	d102      	bne.n	800c91a <HAL_SPI_Transmit+0x274>
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d109      	bne.n	800c92e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2201      	movs	r2, #1
 800c91e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2200      	movs	r2, #0
 800c926:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800c92a:	2303      	movs	r3, #3
 800c92c:	e02d      	b.n	800c98a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c932:	b29b      	uxth	r3, r3
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1ae      	bne.n	800c896 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c938:	69fa      	ldr	r2, [r7, #28]
 800c93a:	6839      	ldr	r1, [r7, #0]
 800c93c:	68f8      	ldr	r0, [r7, #12]
 800c93e:	f000 fad5 	bl	800ceec <SPI_EndRxTxTransaction>
 800c942:	4603      	mov	r3, r0
 800c944:	2b00      	cmp	r3, #0
 800c946:	d002      	beq.n	800c94e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2220      	movs	r2, #32
 800c94c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d10a      	bne.n	800c96c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c956:	2300      	movs	r3, #0
 800c958:	617b      	str	r3, [r7, #20]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	617b      	str	r3, [r7, #20]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	617b      	str	r3, [r7, #20]
 800c96a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2201      	movs	r2, #1
 800c970:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2200      	movs	r2, #0
 800c978:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c980:	2b00      	cmp	r3, #0
 800c982:	d001      	beq.n	800c988 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800c984:	2301      	movs	r3, #1
 800c986:	e000      	b.n	800c98a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800c988:	2300      	movs	r3, #0
  }
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3720      	adds	r7, #32
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
	...

0800c994 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	4613      	mov	r3, r2
 800c9a0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d001      	beq.n	800c9b2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800c9ae:	2302      	movs	r3, #2
 800c9b0:	e0d4      	b.n	800cb5c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d002      	beq.n	800c9be <HAL_SPI_Transmit_DMA+0x2a>
 800c9b8:	88fb      	ldrh	r3, [r7, #6]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d101      	bne.n	800c9c2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e0cc      	b.n	800cb5c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d101      	bne.n	800c9d0 <HAL_SPI_Transmit_DMA+0x3c>
 800c9cc:	2302      	movs	r3, #2
 800c9ce:	e0c5      	b.n	800cb5c <HAL_SPI_Transmit_DMA+0x1c8>
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2203      	movs	r2, #3
 800c9dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	88fa      	ldrh	r2, [r7, #6]
 800c9f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	88fa      	ldrh	r2, [r7, #6]
 800c9f6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2200      	movs	r2, #0
 800ca02:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2200      	movs	r2, #0
 800ca08:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2200      	movs	r2, #0
 800ca16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ca22:	d10f      	bne.n	800ca44 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ca32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	681a      	ldr	r2, [r3, #0]
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ca42:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca48:	4a46      	ldr	r2, [pc, #280]	@ (800cb64 <HAL_SPI_Transmit_DMA+0x1d0>)
 800ca4a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca50:	4a45      	ldr	r2, [pc, #276]	@ (800cb68 <HAL_SPI_Transmit_DMA+0x1d4>)
 800ca52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca58:	4a44      	ldr	r2, [pc, #272]	@ (800cb6c <HAL_SPI_Transmit_DMA+0x1d8>)
 800ca5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca60:	2200      	movs	r2, #0
 800ca62:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	685a      	ldr	r2, [r3, #4]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ca72:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ca7c:	d82d      	bhi.n	800cada <HAL_SPI_Transmit_DMA+0x146>
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca82:	699b      	ldr	r3, [r3, #24]
 800ca84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca88:	d127      	bne.n	800cada <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	f003 0301 	and.w	r3, r3, #1
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10f      	bne.n	800cab8 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	685a      	ldr	r2, [r3, #4]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800caa6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800caac:	b29b      	uxth	r3, r3
 800caae:	085b      	lsrs	r3, r3, #1
 800cab0:	b29a      	uxth	r2, r3
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800cab6:	e010      	b.n	800cada <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	685a      	ldr	r2, [r3, #4]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cac6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cacc:	b29b      	uxth	r3, r3
 800cace:	085b      	lsrs	r3, r3, #1
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	3301      	adds	r3, #1
 800cad4:	b29a      	uxth	r2, r3
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cae2:	4619      	mov	r1, r3
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	330c      	adds	r3, #12
 800caea:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800caf0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800caf2:	f7fa fe37 	bl	8007764 <HAL_DMA_Start_IT>
 800caf6:	4603      	mov	r3, r0
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d00b      	beq.n	800cb14 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb00:	f043 0210 	orr.w	r2, r3, #16
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800cb10:	2301      	movs	r3, #1
 800cb12:	e023      	b.n	800cb5c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb1e:	2b40      	cmp	r3, #64	@ 0x40
 800cb20:	d007      	beq.n	800cb32 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cb30:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2200      	movs	r2, #0
 800cb36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	685a      	ldr	r2, [r3, #4]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f042 0220 	orr.w	r2, r2, #32
 800cb48:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	685a      	ldr	r2, [r3, #4]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f042 0202 	orr.w	r2, r2, #2
 800cb58:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cb5a:	2300      	movs	r3, #0
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3710      	adds	r7, #16
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	0800cc53 	.word	0x0800cc53
 800cb68:	0800cbad 	.word	0x0800cbad
 800cb6c:	0800cc6f 	.word	0x0800cc6f

0800cb70 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b083      	sub	sp, #12
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800cb78:	bf00      	nop
 800cb7a:	370c      	adds	r7, #12
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr

0800cb84 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800cb8c:	bf00      	nop
 800cb8e:	370c      	adds	r7, #12
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr

0800cb98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cba0:	bf00      	nop
 800cba2:	370c      	adds	r7, #12
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr

0800cbac <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b086      	sub	sp, #24
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbb8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cbba:	f7f7 fd63 	bl	8004684 <HAL_GetTick>
 800cbbe:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f003 0320 	and.w	r3, r3, #32
 800cbca:	2b20      	cmp	r3, #32
 800cbcc:	d03b      	beq.n	800cc46 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	685a      	ldr	r2, [r3, #4]
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f022 0220 	bic.w	r2, r2, #32
 800cbdc:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	685a      	ldr	r2, [r3, #4]
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f022 0202 	bic.w	r2, r2, #2
 800cbec:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cbee:	693a      	ldr	r2, [r7, #16]
 800cbf0:	2164      	movs	r1, #100	@ 0x64
 800cbf2:	6978      	ldr	r0, [r7, #20]
 800cbf4:	f000 f97a 	bl	800ceec <SPI_EndRxTxTransaction>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d005      	beq.n	800cc0a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cc02:	f043 0220 	orr.w	r2, r3, #32
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d10a      	bne.n	800cc28 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cc12:	2300      	movs	r3, #0
 800cc14:	60fb      	str	r3, [r7, #12]
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	68db      	ldr	r3, [r3, #12]
 800cc1c:	60fb      	str	r3, [r7, #12]
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	689b      	ldr	r3, [r3, #8]
 800cc24:	60fb      	str	r3, [r7, #12]
 800cc26:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	2201      	movs	r2, #1
 800cc32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d003      	beq.n	800cc46 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cc3e:	6978      	ldr	r0, [r7, #20]
 800cc40:	f7ff ffaa 	bl	800cb98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cc44:	e002      	b.n	800cc4c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800cc46:	6978      	ldr	r0, [r7, #20]
 800cc48:	f7ff ff92 	bl	800cb70 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cc4c:	3718      	adds	r7, #24
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}

0800cc52 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cc52:	b580      	push	{r7, lr}
 800cc54:	b084      	sub	sp, #16
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc5e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800cc60:	68f8      	ldr	r0, [r7, #12]
 800cc62:	f7ff ff8f 	bl	800cb84 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cc66:	bf00      	nop
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b084      	sub	sp, #16
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc7a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	685a      	ldr	r2, [r3, #4]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f022 0203 	bic.w	r2, r2, #3
 800cc8a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cc90:	f043 0210 	orr.w	r2, r3, #16
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cca0:	68f8      	ldr	r0, [r7, #12]
 800cca2:	f7ff ff79 	bl	800cb98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cca6:	bf00      	nop
 800cca8:	3710      	adds	r7, #16
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
	...

0800ccb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b088      	sub	sp, #32
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	603b      	str	r3, [r7, #0]
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ccc0:	f7f7 fce0 	bl	8004684 <HAL_GetTick>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc8:	1a9b      	subs	r3, r3, r2
 800ccca:	683a      	ldr	r2, [r7, #0]
 800cccc:	4413      	add	r3, r2
 800ccce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ccd0:	f7f7 fcd8 	bl	8004684 <HAL_GetTick>
 800ccd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ccd6:	4b39      	ldr	r3, [pc, #228]	@ (800cdbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	015b      	lsls	r3, r3, #5
 800ccdc:	0d1b      	lsrs	r3, r3, #20
 800ccde:	69fa      	ldr	r2, [r7, #28]
 800cce0:	fb02 f303 	mul.w	r3, r2, r3
 800cce4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cce6:	e054      	b.n	800cd92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccee:	d050      	beq.n	800cd92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ccf0:	f7f7 fcc8 	bl	8004684 <HAL_GetTick>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	1ad3      	subs	r3, r2, r3
 800ccfa:	69fa      	ldr	r2, [r7, #28]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d902      	bls.n	800cd06 <SPI_WaitFlagStateUntilTimeout+0x56>
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d13d      	bne.n	800cd82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	685a      	ldr	r2, [r3, #4]
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800cd14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cd1e:	d111      	bne.n	800cd44 <SPI_WaitFlagStateUntilTimeout+0x94>
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	689b      	ldr	r3, [r3, #8]
 800cd24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cd28:	d004      	beq.n	800cd34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	689b      	ldr	r3, [r3, #8]
 800cd2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd32:	d107      	bne.n	800cd44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cd42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd4c:	d10f      	bne.n	800cd6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cd5c:	601a      	str	r2, [r3, #0]
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cd6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2201      	movs	r2, #1
 800cd72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800cd7e:	2303      	movs	r3, #3
 800cd80:	e017      	b.n	800cdb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d101      	bne.n	800cd8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	3b01      	subs	r3, #1
 800cd90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	689a      	ldr	r2, [r3, #8]
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	4013      	ands	r3, r2
 800cd9c:	68ba      	ldr	r2, [r7, #8]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	bf0c      	ite	eq
 800cda2:	2301      	moveq	r3, #1
 800cda4:	2300      	movne	r3, #0
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	461a      	mov	r2, r3
 800cdaa:	79fb      	ldrb	r3, [r7, #7]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d19b      	bne.n	800cce8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cdb0:	2300      	movs	r3, #0
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3720      	adds	r7, #32
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	20000040 	.word	0x20000040

0800cdc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b08a      	sub	sp, #40	@ 0x28
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	607a      	str	r2, [r7, #4]
 800cdcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800cdd2:	f7f7 fc57 	bl	8004684 <HAL_GetTick>
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdda:	1a9b      	subs	r3, r3, r2
 800cddc:	683a      	ldr	r2, [r7, #0]
 800cdde:	4413      	add	r3, r2
 800cde0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800cde2:	f7f7 fc4f 	bl	8004684 <HAL_GetTick>
 800cde6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	330c      	adds	r3, #12
 800cdee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800cdf0:	4b3d      	ldr	r3, [pc, #244]	@ (800cee8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	4413      	add	r3, r2
 800cdfa:	00da      	lsls	r2, r3, #3
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	0d1b      	lsrs	r3, r3, #20
 800ce00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce02:	fb02 f303 	mul.w	r3, r2, r3
 800ce06:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ce08:	e060      	b.n	800cecc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ce10:	d107      	bne.n	800ce22 <SPI_WaitFifoStateUntilTimeout+0x62>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d104      	bne.n	800ce22 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ce20:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce28:	d050      	beq.n	800cecc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ce2a:	f7f7 fc2b 	bl	8004684 <HAL_GetTick>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	6a3b      	ldr	r3, [r7, #32]
 800ce32:	1ad3      	subs	r3, r2, r3
 800ce34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d902      	bls.n	800ce40 <SPI_WaitFifoStateUntilTimeout+0x80>
 800ce3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d13d      	bne.n	800cebc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	685a      	ldr	r2, [r3, #4]
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ce4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ce58:	d111      	bne.n	800ce7e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	689b      	ldr	r3, [r3, #8]
 800ce5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce62:	d004      	beq.n	800ce6e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce6c:	d107      	bne.n	800ce7e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ce7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ce86:	d10f      	bne.n	800cea8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ce96:	601a      	str	r2, [r3, #0]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cea6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ceb8:	2303      	movs	r3, #3
 800ceba:	e010      	b.n	800cede <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cebc:	69bb      	ldr	r3, [r7, #24]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d101      	bne.n	800cec6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800cec2:	2300      	movs	r3, #0
 800cec4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	3b01      	subs	r3, #1
 800ceca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	689a      	ldr	r2, [r3, #8]
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	4013      	ands	r3, r2
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d196      	bne.n	800ce0a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800cedc:	2300      	movs	r3, #0
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3728      	adds	r7, #40	@ 0x28
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	20000040 	.word	0x20000040

0800ceec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b086      	sub	sp, #24
 800cef0:	af02      	add	r7, sp, #8
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	9300      	str	r3, [sp, #0]
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	2200      	movs	r2, #0
 800cf00:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800cf04:	68f8      	ldr	r0, [r7, #12]
 800cf06:	f7ff ff5b 	bl	800cdc0 <SPI_WaitFifoStateUntilTimeout>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d007      	beq.n	800cf20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf14:	f043 0220 	orr.w	r2, r3, #32
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800cf1c:	2303      	movs	r3, #3
 800cf1e:	e027      	b.n	800cf70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	9300      	str	r3, [sp, #0]
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	2200      	movs	r2, #0
 800cf28:	2180      	movs	r1, #128	@ 0x80
 800cf2a:	68f8      	ldr	r0, [r7, #12]
 800cf2c:	f7ff fec0 	bl	800ccb0 <SPI_WaitFlagStateUntilTimeout>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d007      	beq.n	800cf46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf3a:	f043 0220 	orr.w	r2, r3, #32
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800cf42:	2303      	movs	r3, #3
 800cf44:	e014      	b.n	800cf70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	9300      	str	r3, [sp, #0]
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800cf52:	68f8      	ldr	r0, [r7, #12]
 800cf54:	f7ff ff34 	bl	800cdc0 <SPI_WaitFifoStateUntilTimeout>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d007      	beq.n	800cf6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf62:	f043 0220 	orr.w	r2, r3, #32
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800cf6a:	2303      	movs	r3, #3
 800cf6c:	e000      	b.n	800cf70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800cf6e:	2300      	movs	r3, #0
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3710      	adds	r7, #16
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d101      	bne.n	800cf8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cf86:	2301      	movs	r3, #1
 800cf88:	e049      	b.n	800d01e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d106      	bne.n	800cfa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f7f6 ff16 	bl	8003dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2202      	movs	r2, #2
 800cfa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681a      	ldr	r2, [r3, #0]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	3304      	adds	r3, #4
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	4610      	mov	r0, r2
 800cfb8:	f001 f894 	bl	800e0e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2201      	movs	r2, #1
 800cfe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2201      	movs	r2, #1
 800cff0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2201      	movs	r2, #1
 800cff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2201      	movs	r2, #1
 800d000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2201      	movs	r2, #1
 800d008:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2201      	movs	r2, #1
 800d010:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2201      	movs	r2, #1
 800d018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d01c:	2300      	movs	r3, #0
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3708      	adds	r7, #8
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
	...

0800d028 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d028:	b480      	push	{r7}
 800d02a:	b085      	sub	sp, #20
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d036:	b2db      	uxtb	r3, r3
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d001      	beq.n	800d040 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d03c:	2301      	movs	r3, #1
 800d03e:	e04c      	b.n	800d0da <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2202      	movs	r2, #2
 800d044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4a26      	ldr	r2, [pc, #152]	@ (800d0e8 <HAL_TIM_Base_Start+0xc0>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d022      	beq.n	800d098 <HAL_TIM_Base_Start+0x70>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d05a:	d01d      	beq.n	800d098 <HAL_TIM_Base_Start+0x70>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a22      	ldr	r2, [pc, #136]	@ (800d0ec <HAL_TIM_Base_Start+0xc4>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d018      	beq.n	800d098 <HAL_TIM_Base_Start+0x70>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a21      	ldr	r2, [pc, #132]	@ (800d0f0 <HAL_TIM_Base_Start+0xc8>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d013      	beq.n	800d098 <HAL_TIM_Base_Start+0x70>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a1f      	ldr	r2, [pc, #124]	@ (800d0f4 <HAL_TIM_Base_Start+0xcc>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d00e      	beq.n	800d098 <HAL_TIM_Base_Start+0x70>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4a1e      	ldr	r2, [pc, #120]	@ (800d0f8 <HAL_TIM_Base_Start+0xd0>)
 800d080:	4293      	cmp	r3, r2
 800d082:	d009      	beq.n	800d098 <HAL_TIM_Base_Start+0x70>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a1c      	ldr	r2, [pc, #112]	@ (800d0fc <HAL_TIM_Base_Start+0xd4>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d004      	beq.n	800d098 <HAL_TIM_Base_Start+0x70>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	4a1b      	ldr	r2, [pc, #108]	@ (800d100 <HAL_TIM_Base_Start+0xd8>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d115      	bne.n	800d0c4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	689a      	ldr	r2, [r3, #8]
 800d09e:	4b19      	ldr	r3, [pc, #100]	@ (800d104 <HAL_TIM_Base_Start+0xdc>)
 800d0a0:	4013      	ands	r3, r2
 800d0a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2b06      	cmp	r3, #6
 800d0a8:	d015      	beq.n	800d0d6 <HAL_TIM_Base_Start+0xae>
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0b0:	d011      	beq.n	800d0d6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	681a      	ldr	r2, [r3, #0]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f042 0201 	orr.w	r2, r2, #1
 800d0c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0c2:	e008      	b.n	800d0d6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f042 0201 	orr.w	r2, r2, #1
 800d0d2:	601a      	str	r2, [r3, #0]
 800d0d4:	e000      	b.n	800d0d8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d0d8:	2300      	movs	r3, #0
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3714      	adds	r7, #20
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr
 800d0e6:	bf00      	nop
 800d0e8:	40012c00 	.word	0x40012c00
 800d0ec:	40000400 	.word	0x40000400
 800d0f0:	40000800 	.word	0x40000800
 800d0f4:	40000c00 	.word	0x40000c00
 800d0f8:	40013400 	.word	0x40013400
 800d0fc:	40014000 	.word	0x40014000
 800d100:	40015000 	.word	0x40015000
 800d104:	00010007 	.word	0x00010007

0800d108 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d101      	bne.n	800d11a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d116:	2301      	movs	r3, #1
 800d118:	e049      	b.n	800d1ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d120:	b2db      	uxtb	r3, r3
 800d122:	2b00      	cmp	r3, #0
 800d124:	d106      	bne.n	800d134 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2200      	movs	r2, #0
 800d12a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 f841 	bl	800d1b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2202      	movs	r2, #2
 800d138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	3304      	adds	r3, #4
 800d144:	4619      	mov	r1, r3
 800d146:	4610      	mov	r0, r2
 800d148:	f000 ffcc 	bl	800e0e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2201      	movs	r2, #1
 800d150:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2201      	movs	r2, #1
 800d158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2201      	movs	r2, #1
 800d160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2201      	movs	r2, #1
 800d170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2201      	movs	r2, #1
 800d178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2201      	movs	r2, #1
 800d180:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2201      	movs	r2, #1
 800d188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2201      	movs	r2, #1
 800d190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d1ac:	2300      	movs	r3, #0
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3708      	adds	r7, #8
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}

0800d1b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d1b6:	b480      	push	{r7}
 800d1b8:	b083      	sub	sp, #12
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d1be:	bf00      	nop
 800d1c0:	370c      	adds	r7, #12
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr
	...

0800d1cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d109      	bne.n	800d1f0 <HAL_TIM_PWM_Start+0x24>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	bf14      	ite	ne
 800d1e8:	2301      	movne	r3, #1
 800d1ea:	2300      	moveq	r3, #0
 800d1ec:	b2db      	uxtb	r3, r3
 800d1ee:	e03c      	b.n	800d26a <HAL_TIM_PWM_Start+0x9e>
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	2b04      	cmp	r3, #4
 800d1f4:	d109      	bne.n	800d20a <HAL_TIM_PWM_Start+0x3e>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	bf14      	ite	ne
 800d202:	2301      	movne	r3, #1
 800d204:	2300      	moveq	r3, #0
 800d206:	b2db      	uxtb	r3, r3
 800d208:	e02f      	b.n	800d26a <HAL_TIM_PWM_Start+0x9e>
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	2b08      	cmp	r3, #8
 800d20e:	d109      	bne.n	800d224 <HAL_TIM_PWM_Start+0x58>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d216:	b2db      	uxtb	r3, r3
 800d218:	2b01      	cmp	r3, #1
 800d21a:	bf14      	ite	ne
 800d21c:	2301      	movne	r3, #1
 800d21e:	2300      	moveq	r3, #0
 800d220:	b2db      	uxtb	r3, r3
 800d222:	e022      	b.n	800d26a <HAL_TIM_PWM_Start+0x9e>
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	2b0c      	cmp	r3, #12
 800d228:	d109      	bne.n	800d23e <HAL_TIM_PWM_Start+0x72>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d230:	b2db      	uxtb	r3, r3
 800d232:	2b01      	cmp	r3, #1
 800d234:	bf14      	ite	ne
 800d236:	2301      	movne	r3, #1
 800d238:	2300      	moveq	r3, #0
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	e015      	b.n	800d26a <HAL_TIM_PWM_Start+0x9e>
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	2b10      	cmp	r3, #16
 800d242:	d109      	bne.n	800d258 <HAL_TIM_PWM_Start+0x8c>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	bf14      	ite	ne
 800d250:	2301      	movne	r3, #1
 800d252:	2300      	moveq	r3, #0
 800d254:	b2db      	uxtb	r3, r3
 800d256:	e008      	b.n	800d26a <HAL_TIM_PWM_Start+0x9e>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d25e:	b2db      	uxtb	r3, r3
 800d260:	2b01      	cmp	r3, #1
 800d262:	bf14      	ite	ne
 800d264:	2301      	movne	r3, #1
 800d266:	2300      	moveq	r3, #0
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d001      	beq.n	800d272 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d26e:	2301      	movs	r3, #1
 800d270:	e0a6      	b.n	800d3c0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d104      	bne.n	800d282 <HAL_TIM_PWM_Start+0xb6>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2202      	movs	r2, #2
 800d27c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d280:	e023      	b.n	800d2ca <HAL_TIM_PWM_Start+0xfe>
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	2b04      	cmp	r3, #4
 800d286:	d104      	bne.n	800d292 <HAL_TIM_PWM_Start+0xc6>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2202      	movs	r2, #2
 800d28c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d290:	e01b      	b.n	800d2ca <HAL_TIM_PWM_Start+0xfe>
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	2b08      	cmp	r3, #8
 800d296:	d104      	bne.n	800d2a2 <HAL_TIM_PWM_Start+0xd6>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2202      	movs	r2, #2
 800d29c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d2a0:	e013      	b.n	800d2ca <HAL_TIM_PWM_Start+0xfe>
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	2b0c      	cmp	r3, #12
 800d2a6:	d104      	bne.n	800d2b2 <HAL_TIM_PWM_Start+0xe6>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2202      	movs	r2, #2
 800d2ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d2b0:	e00b      	b.n	800d2ca <HAL_TIM_PWM_Start+0xfe>
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	2b10      	cmp	r3, #16
 800d2b6:	d104      	bne.n	800d2c2 <HAL_TIM_PWM_Start+0xf6>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2202      	movs	r2, #2
 800d2bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d2c0:	e003      	b.n	800d2ca <HAL_TIM_PWM_Start+0xfe>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2202      	movs	r2, #2
 800d2c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	6839      	ldr	r1, [r7, #0]
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f001 fb80 	bl	800e9d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a3a      	ldr	r2, [pc, #232]	@ (800d3c8 <HAL_TIM_PWM_Start+0x1fc>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d018      	beq.n	800d314 <HAL_TIM_PWM_Start+0x148>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4a39      	ldr	r2, [pc, #228]	@ (800d3cc <HAL_TIM_PWM_Start+0x200>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d013      	beq.n	800d314 <HAL_TIM_PWM_Start+0x148>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4a37      	ldr	r2, [pc, #220]	@ (800d3d0 <HAL_TIM_PWM_Start+0x204>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d00e      	beq.n	800d314 <HAL_TIM_PWM_Start+0x148>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4a36      	ldr	r2, [pc, #216]	@ (800d3d4 <HAL_TIM_PWM_Start+0x208>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d009      	beq.n	800d314 <HAL_TIM_PWM_Start+0x148>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4a34      	ldr	r2, [pc, #208]	@ (800d3d8 <HAL_TIM_PWM_Start+0x20c>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d004      	beq.n	800d314 <HAL_TIM_PWM_Start+0x148>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	4a33      	ldr	r2, [pc, #204]	@ (800d3dc <HAL_TIM_PWM_Start+0x210>)
 800d310:	4293      	cmp	r3, r2
 800d312:	d101      	bne.n	800d318 <HAL_TIM_PWM_Start+0x14c>
 800d314:	2301      	movs	r3, #1
 800d316:	e000      	b.n	800d31a <HAL_TIM_PWM_Start+0x14e>
 800d318:	2300      	movs	r3, #0
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d007      	beq.n	800d32e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d32c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	4a25      	ldr	r2, [pc, #148]	@ (800d3c8 <HAL_TIM_PWM_Start+0x1fc>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d022      	beq.n	800d37e <HAL_TIM_PWM_Start+0x1b2>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d340:	d01d      	beq.n	800d37e <HAL_TIM_PWM_Start+0x1b2>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4a26      	ldr	r2, [pc, #152]	@ (800d3e0 <HAL_TIM_PWM_Start+0x214>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d018      	beq.n	800d37e <HAL_TIM_PWM_Start+0x1b2>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4a24      	ldr	r2, [pc, #144]	@ (800d3e4 <HAL_TIM_PWM_Start+0x218>)
 800d352:	4293      	cmp	r3, r2
 800d354:	d013      	beq.n	800d37e <HAL_TIM_PWM_Start+0x1b2>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4a23      	ldr	r2, [pc, #140]	@ (800d3e8 <HAL_TIM_PWM_Start+0x21c>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d00e      	beq.n	800d37e <HAL_TIM_PWM_Start+0x1b2>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a19      	ldr	r2, [pc, #100]	@ (800d3cc <HAL_TIM_PWM_Start+0x200>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d009      	beq.n	800d37e <HAL_TIM_PWM_Start+0x1b2>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4a18      	ldr	r2, [pc, #96]	@ (800d3d0 <HAL_TIM_PWM_Start+0x204>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d004      	beq.n	800d37e <HAL_TIM_PWM_Start+0x1b2>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a18      	ldr	r2, [pc, #96]	@ (800d3dc <HAL_TIM_PWM_Start+0x210>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d115      	bne.n	800d3aa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	689a      	ldr	r2, [r3, #8]
 800d384:	4b19      	ldr	r3, [pc, #100]	@ (800d3ec <HAL_TIM_PWM_Start+0x220>)
 800d386:	4013      	ands	r3, r2
 800d388:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	2b06      	cmp	r3, #6
 800d38e:	d015      	beq.n	800d3bc <HAL_TIM_PWM_Start+0x1f0>
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d396:	d011      	beq.n	800d3bc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f042 0201 	orr.w	r2, r2, #1
 800d3a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3a8:	e008      	b.n	800d3bc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f042 0201 	orr.w	r2, r2, #1
 800d3b8:	601a      	str	r2, [r3, #0]
 800d3ba:	e000      	b.n	800d3be <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d3be:	2300      	movs	r3, #0
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3710      	adds	r7, #16
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	40012c00 	.word	0x40012c00
 800d3cc:	40013400 	.word	0x40013400
 800d3d0:	40014000 	.word	0x40014000
 800d3d4:	40014400 	.word	0x40014400
 800d3d8:	40014800 	.word	0x40014800
 800d3dc:	40015000 	.word	0x40015000
 800d3e0:	40000400 	.word	0x40000400
 800d3e4:	40000800 	.word	0x40000800
 800d3e8:	40000c00 	.word	0x40000c00
 800d3ec:	00010007 	.word	0x00010007

0800d3f0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b086      	sub	sp, #24
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	60f8      	str	r0, [r7, #12]
 800d3f8:	60b9      	str	r1, [r7, #8]
 800d3fa:	607a      	str	r2, [r7, #4]
 800d3fc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800d3fe:	2300      	movs	r3, #0
 800d400:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d109      	bne.n	800d41c <HAL_TIM_PWM_Start_DMA+0x2c>
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d40e:	b2db      	uxtb	r3, r3
 800d410:	2b02      	cmp	r3, #2
 800d412:	bf0c      	ite	eq
 800d414:	2301      	moveq	r3, #1
 800d416:	2300      	movne	r3, #0
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	e03c      	b.n	800d496 <HAL_TIM_PWM_Start_DMA+0xa6>
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	2b04      	cmp	r3, #4
 800d420:	d109      	bne.n	800d436 <HAL_TIM_PWM_Start_DMA+0x46>
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	2b02      	cmp	r3, #2
 800d42c:	bf0c      	ite	eq
 800d42e:	2301      	moveq	r3, #1
 800d430:	2300      	movne	r3, #0
 800d432:	b2db      	uxtb	r3, r3
 800d434:	e02f      	b.n	800d496 <HAL_TIM_PWM_Start_DMA+0xa6>
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	2b08      	cmp	r3, #8
 800d43a:	d109      	bne.n	800d450 <HAL_TIM_PWM_Start_DMA+0x60>
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d442:	b2db      	uxtb	r3, r3
 800d444:	2b02      	cmp	r3, #2
 800d446:	bf0c      	ite	eq
 800d448:	2301      	moveq	r3, #1
 800d44a:	2300      	movne	r3, #0
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	e022      	b.n	800d496 <HAL_TIM_PWM_Start_DMA+0xa6>
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	2b0c      	cmp	r3, #12
 800d454:	d109      	bne.n	800d46a <HAL_TIM_PWM_Start_DMA+0x7a>
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	2b02      	cmp	r3, #2
 800d460:	bf0c      	ite	eq
 800d462:	2301      	moveq	r3, #1
 800d464:	2300      	movne	r3, #0
 800d466:	b2db      	uxtb	r3, r3
 800d468:	e015      	b.n	800d496 <HAL_TIM_PWM_Start_DMA+0xa6>
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	2b10      	cmp	r3, #16
 800d46e:	d109      	bne.n	800d484 <HAL_TIM_PWM_Start_DMA+0x94>
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d476:	b2db      	uxtb	r3, r3
 800d478:	2b02      	cmp	r3, #2
 800d47a:	bf0c      	ite	eq
 800d47c:	2301      	moveq	r3, #1
 800d47e:	2300      	movne	r3, #0
 800d480:	b2db      	uxtb	r3, r3
 800d482:	e008      	b.n	800d496 <HAL_TIM_PWM_Start_DMA+0xa6>
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	2b02      	cmp	r3, #2
 800d48e:	bf0c      	ite	eq
 800d490:	2301      	moveq	r3, #1
 800d492:	2300      	movne	r3, #0
 800d494:	b2db      	uxtb	r3, r3
 800d496:	2b00      	cmp	r3, #0
 800d498:	d001      	beq.n	800d49e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800d49a:	2302      	movs	r3, #2
 800d49c:	e1b5      	b.n	800d80a <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d109      	bne.n	800d4b8 <HAL_TIM_PWM_Start_DMA+0xc8>
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d4aa:	b2db      	uxtb	r3, r3
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	bf0c      	ite	eq
 800d4b0:	2301      	moveq	r3, #1
 800d4b2:	2300      	movne	r3, #0
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	e03c      	b.n	800d532 <HAL_TIM_PWM_Start_DMA+0x142>
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	2b04      	cmp	r3, #4
 800d4bc:	d109      	bne.n	800d4d2 <HAL_TIM_PWM_Start_DMA+0xe2>
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d4c4:	b2db      	uxtb	r3, r3
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	bf0c      	ite	eq
 800d4ca:	2301      	moveq	r3, #1
 800d4cc:	2300      	movne	r3, #0
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	e02f      	b.n	800d532 <HAL_TIM_PWM_Start_DMA+0x142>
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	2b08      	cmp	r3, #8
 800d4d6:	d109      	bne.n	800d4ec <HAL_TIM_PWM_Start_DMA+0xfc>
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d4de:	b2db      	uxtb	r3, r3
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	bf0c      	ite	eq
 800d4e4:	2301      	moveq	r3, #1
 800d4e6:	2300      	movne	r3, #0
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	e022      	b.n	800d532 <HAL_TIM_PWM_Start_DMA+0x142>
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	2b0c      	cmp	r3, #12
 800d4f0:	d109      	bne.n	800d506 <HAL_TIM_PWM_Start_DMA+0x116>
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d4f8:	b2db      	uxtb	r3, r3
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	bf0c      	ite	eq
 800d4fe:	2301      	moveq	r3, #1
 800d500:	2300      	movne	r3, #0
 800d502:	b2db      	uxtb	r3, r3
 800d504:	e015      	b.n	800d532 <HAL_TIM_PWM_Start_DMA+0x142>
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	2b10      	cmp	r3, #16
 800d50a:	d109      	bne.n	800d520 <HAL_TIM_PWM_Start_DMA+0x130>
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d512:	b2db      	uxtb	r3, r3
 800d514:	2b01      	cmp	r3, #1
 800d516:	bf0c      	ite	eq
 800d518:	2301      	moveq	r3, #1
 800d51a:	2300      	movne	r3, #0
 800d51c:	b2db      	uxtb	r3, r3
 800d51e:	e008      	b.n	800d532 <HAL_TIM_PWM_Start_DMA+0x142>
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d526:	b2db      	uxtb	r3, r3
 800d528:	2b01      	cmp	r3, #1
 800d52a:	bf0c      	ite	eq
 800d52c:	2301      	moveq	r3, #1
 800d52e:	2300      	movne	r3, #0
 800d530:	b2db      	uxtb	r3, r3
 800d532:	2b00      	cmp	r3, #0
 800d534:	d034      	beq.n	800d5a0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d002      	beq.n	800d542 <HAL_TIM_PWM_Start_DMA+0x152>
 800d53c:	887b      	ldrh	r3, [r7, #2]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d101      	bne.n	800d546 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800d542:	2301      	movs	r3, #1
 800d544:	e161      	b.n	800d80a <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d104      	bne.n	800d556 <HAL_TIM_PWM_Start_DMA+0x166>
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2202      	movs	r2, #2
 800d550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d554:	e026      	b.n	800d5a4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	2b04      	cmp	r3, #4
 800d55a:	d104      	bne.n	800d566 <HAL_TIM_PWM_Start_DMA+0x176>
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2202      	movs	r2, #2
 800d560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d564:	e01e      	b.n	800d5a4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	2b08      	cmp	r3, #8
 800d56a:	d104      	bne.n	800d576 <HAL_TIM_PWM_Start_DMA+0x186>
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2202      	movs	r2, #2
 800d570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d574:	e016      	b.n	800d5a4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	2b0c      	cmp	r3, #12
 800d57a:	d104      	bne.n	800d586 <HAL_TIM_PWM_Start_DMA+0x196>
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2202      	movs	r2, #2
 800d580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d584:	e00e      	b.n	800d5a4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	2b10      	cmp	r3, #16
 800d58a:	d104      	bne.n	800d596 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2202      	movs	r2, #2
 800d590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d594:	e006      	b.n	800d5a4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2202      	movs	r2, #2
 800d59a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d59e:	e001      	b.n	800d5a4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	e132      	b.n	800d80a <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	2b0c      	cmp	r3, #12
 800d5a8:	f200 80ae 	bhi.w	800d708 <HAL_TIM_PWM_Start_DMA+0x318>
 800d5ac:	a201      	add	r2, pc, #4	@ (adr r2, 800d5b4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800d5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5b2:	bf00      	nop
 800d5b4:	0800d5e9 	.word	0x0800d5e9
 800d5b8:	0800d709 	.word	0x0800d709
 800d5bc:	0800d709 	.word	0x0800d709
 800d5c0:	0800d709 	.word	0x0800d709
 800d5c4:	0800d631 	.word	0x0800d631
 800d5c8:	0800d709 	.word	0x0800d709
 800d5cc:	0800d709 	.word	0x0800d709
 800d5d0:	0800d709 	.word	0x0800d709
 800d5d4:	0800d679 	.word	0x0800d679
 800d5d8:	0800d709 	.word	0x0800d709
 800d5dc:	0800d709 	.word	0x0800d709
 800d5e0:	0800d709 	.word	0x0800d709
 800d5e4:	0800d6c1 	.word	0x0800d6c1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5ec:	4a89      	ldr	r2, [pc, #548]	@ (800d814 <HAL_TIM_PWM_Start_DMA+0x424>)
 800d5ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5f4:	4a88      	ldr	r2, [pc, #544]	@ (800d818 <HAL_TIM_PWM_Start_DMA+0x428>)
 800d5f6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5fc:	4a87      	ldr	r2, [pc, #540]	@ (800d81c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800d5fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800d604:	6879      	ldr	r1, [r7, #4]
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	3334      	adds	r3, #52	@ 0x34
 800d60c:	461a      	mov	r2, r3
 800d60e:	887b      	ldrh	r3, [r7, #2]
 800d610:	f7fa f8a8 	bl	8007764 <HAL_DMA_Start_IT>
 800d614:	4603      	mov	r3, r0
 800d616:	2b00      	cmp	r3, #0
 800d618:	d001      	beq.n	800d61e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d61a:	2301      	movs	r3, #1
 800d61c:	e0f5      	b.n	800d80a <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	68da      	ldr	r2, [r3, #12]
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d62c:	60da      	str	r2, [r3, #12]
      break;
 800d62e:	e06e      	b.n	800d70e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d634:	4a77      	ldr	r2, [pc, #476]	@ (800d814 <HAL_TIM_PWM_Start_DMA+0x424>)
 800d636:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d63c:	4a76      	ldr	r2, [pc, #472]	@ (800d818 <HAL_TIM_PWM_Start_DMA+0x428>)
 800d63e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d644:	4a75      	ldr	r2, [pc, #468]	@ (800d81c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800d646:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800d64c:	6879      	ldr	r1, [r7, #4]
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	3338      	adds	r3, #56	@ 0x38
 800d654:	461a      	mov	r2, r3
 800d656:	887b      	ldrh	r3, [r7, #2]
 800d658:	f7fa f884 	bl	8007764 <HAL_DMA_Start_IT>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d001      	beq.n	800d666 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d662:	2301      	movs	r3, #1
 800d664:	e0d1      	b.n	800d80a <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	68da      	ldr	r2, [r3, #12]
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d674:	60da      	str	r2, [r3, #12]
      break;
 800d676:	e04a      	b.n	800d70e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d67c:	4a65      	ldr	r2, [pc, #404]	@ (800d814 <HAL_TIM_PWM_Start_DMA+0x424>)
 800d67e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d684:	4a64      	ldr	r2, [pc, #400]	@ (800d818 <HAL_TIM_PWM_Start_DMA+0x428>)
 800d686:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d68c:	4a63      	ldr	r2, [pc, #396]	@ (800d81c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800d68e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800d694:	6879      	ldr	r1, [r7, #4]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	333c      	adds	r3, #60	@ 0x3c
 800d69c:	461a      	mov	r2, r3
 800d69e:	887b      	ldrh	r3, [r7, #2]
 800d6a0:	f7fa f860 	bl	8007764 <HAL_DMA_Start_IT>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d001      	beq.n	800d6ae <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e0ad      	b.n	800d80a <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	68da      	ldr	r2, [r3, #12]
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d6bc:	60da      	str	r2, [r3, #12]
      break;
 800d6be:	e026      	b.n	800d70e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6c4:	4a53      	ldr	r2, [pc, #332]	@ (800d814 <HAL_TIM_PWM_Start_DMA+0x424>)
 800d6c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6cc:	4a52      	ldr	r2, [pc, #328]	@ (800d818 <HAL_TIM_PWM_Start_DMA+0x428>)
 800d6ce:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6d4:	4a51      	ldr	r2, [pc, #324]	@ (800d81c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800d6d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d6dc:	6879      	ldr	r1, [r7, #4]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	3340      	adds	r3, #64	@ 0x40
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	887b      	ldrh	r3, [r7, #2]
 800d6e8:	f7fa f83c 	bl	8007764 <HAL_DMA_Start_IT>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d001      	beq.n	800d6f6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e089      	b.n	800d80a <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	68da      	ldr	r2, [r3, #12]
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d704:	60da      	str	r2, [r3, #12]
      break;
 800d706:	e002      	b.n	800d70e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800d708:	2301      	movs	r3, #1
 800d70a:	75fb      	strb	r3, [r7, #23]
      break;
 800d70c:	bf00      	nop
  }

  if (status == HAL_OK)
 800d70e:	7dfb      	ldrb	r3, [r7, #23]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d179      	bne.n	800d808 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2201      	movs	r2, #1
 800d71a:	68b9      	ldr	r1, [r7, #8]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f001 f95b 	bl	800e9d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4a3e      	ldr	r2, [pc, #248]	@ (800d820 <HAL_TIM_PWM_Start_DMA+0x430>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d018      	beq.n	800d75e <HAL_TIM_PWM_Start_DMA+0x36e>
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a3c      	ldr	r2, [pc, #240]	@ (800d824 <HAL_TIM_PWM_Start_DMA+0x434>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d013      	beq.n	800d75e <HAL_TIM_PWM_Start_DMA+0x36e>
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4a3b      	ldr	r2, [pc, #236]	@ (800d828 <HAL_TIM_PWM_Start_DMA+0x438>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d00e      	beq.n	800d75e <HAL_TIM_PWM_Start_DMA+0x36e>
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a39      	ldr	r2, [pc, #228]	@ (800d82c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d009      	beq.n	800d75e <HAL_TIM_PWM_Start_DMA+0x36e>
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4a38      	ldr	r2, [pc, #224]	@ (800d830 <HAL_TIM_PWM_Start_DMA+0x440>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d004      	beq.n	800d75e <HAL_TIM_PWM_Start_DMA+0x36e>
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4a36      	ldr	r2, [pc, #216]	@ (800d834 <HAL_TIM_PWM_Start_DMA+0x444>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d101      	bne.n	800d762 <HAL_TIM_PWM_Start_DMA+0x372>
 800d75e:	2301      	movs	r3, #1
 800d760:	e000      	b.n	800d764 <HAL_TIM_PWM_Start_DMA+0x374>
 800d762:	2300      	movs	r3, #0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d007      	beq.n	800d778 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d776:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4a28      	ldr	r2, [pc, #160]	@ (800d820 <HAL_TIM_PWM_Start_DMA+0x430>)
 800d77e:	4293      	cmp	r3, r2
 800d780:	d022      	beq.n	800d7c8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d78a:	d01d      	beq.n	800d7c8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4a29      	ldr	r2, [pc, #164]	@ (800d838 <HAL_TIM_PWM_Start_DMA+0x448>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d018      	beq.n	800d7c8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	4a28      	ldr	r2, [pc, #160]	@ (800d83c <HAL_TIM_PWM_Start_DMA+0x44c>)
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d013      	beq.n	800d7c8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a26      	ldr	r2, [pc, #152]	@ (800d840 <HAL_TIM_PWM_Start_DMA+0x450>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d00e      	beq.n	800d7c8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4a1d      	ldr	r2, [pc, #116]	@ (800d824 <HAL_TIM_PWM_Start_DMA+0x434>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d009      	beq.n	800d7c8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	4a1b      	ldr	r2, [pc, #108]	@ (800d828 <HAL_TIM_PWM_Start_DMA+0x438>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d004      	beq.n	800d7c8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	4a1c      	ldr	r2, [pc, #112]	@ (800d834 <HAL_TIM_PWM_Start_DMA+0x444>)
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d115      	bne.n	800d7f4 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	689a      	ldr	r2, [r3, #8]
 800d7ce:	4b1d      	ldr	r3, [pc, #116]	@ (800d844 <HAL_TIM_PWM_Start_DMA+0x454>)
 800d7d0:	4013      	ands	r3, r2
 800d7d2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	2b06      	cmp	r3, #6
 800d7d8:	d015      	beq.n	800d806 <HAL_TIM_PWM_Start_DMA+0x416>
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7e0:	d011      	beq.n	800d806 <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f042 0201 	orr.w	r2, r2, #1
 800d7f0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7f2:	e008      	b.n	800d806 <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f042 0201 	orr.w	r2, r2, #1
 800d802:	601a      	str	r2, [r3, #0]
 800d804:	e000      	b.n	800d808 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d806:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d808:	7dfb      	ldrb	r3, [r7, #23]
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3718      	adds	r7, #24
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	0800dfd3 	.word	0x0800dfd3
 800d818:	0800e07b 	.word	0x0800e07b
 800d81c:	0800df41 	.word	0x0800df41
 800d820:	40012c00 	.word	0x40012c00
 800d824:	40013400 	.word	0x40013400
 800d828:	40014000 	.word	0x40014000
 800d82c:	40014400 	.word	0x40014400
 800d830:	40014800 	.word	0x40014800
 800d834:	40015000 	.word	0x40015000
 800d838:	40000400 	.word	0x40000400
 800d83c:	40000800 	.word	0x40000800
 800d840:	40000c00 	.word	0x40000c00
 800d844:	00010007 	.word	0x00010007

0800d848 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b086      	sub	sp, #24
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d101      	bne.n	800d85c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d858:	2301      	movs	r3, #1
 800d85a:	e097      	b.n	800d98c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d862:	b2db      	uxtb	r3, r3
 800d864:	2b00      	cmp	r3, #0
 800d866:	d106      	bne.n	800d876 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2200      	movs	r2, #0
 800d86c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f7f6 f9bb 	bl	8003bec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2202      	movs	r2, #2
 800d87a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	689b      	ldr	r3, [r3, #8]
 800d884:	687a      	ldr	r2, [r7, #4]
 800d886:	6812      	ldr	r2, [r2, #0]
 800d888:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800d88c:	f023 0307 	bic.w	r3, r3, #7
 800d890:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	3304      	adds	r3, #4
 800d89a:	4619      	mov	r1, r3
 800d89c:	4610      	mov	r0, r2
 800d89e:	f000 fc21 	bl	800e0e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	689b      	ldr	r3, [r3, #8]
 800d8a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	699b      	ldr	r3, [r3, #24]
 800d8b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	6a1b      	ldr	r3, [r3, #32]
 800d8b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	697a      	ldr	r2, [r7, #20]
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d8ca:	f023 0303 	bic.w	r3, r3, #3
 800d8ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	689a      	ldr	r2, [r3, #8]
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	699b      	ldr	r3, [r3, #24]
 800d8d8:	021b      	lsls	r3, r3, #8
 800d8da:	4313      	orrs	r3, r2
 800d8dc:	693a      	ldr	r2, [r7, #16]
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800d8e8:	f023 030c 	bic.w	r3, r3, #12
 800d8ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d8f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d8f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	68da      	ldr	r2, [r3, #12]
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	69db      	ldr	r3, [r3, #28]
 800d902:	021b      	lsls	r3, r3, #8
 800d904:	4313      	orrs	r3, r2
 800d906:	693a      	ldr	r2, [r7, #16]
 800d908:	4313      	orrs	r3, r2
 800d90a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	691b      	ldr	r3, [r3, #16]
 800d910:	011a      	lsls	r2, r3, #4
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	6a1b      	ldr	r3, [r3, #32]
 800d916:	031b      	lsls	r3, r3, #12
 800d918:	4313      	orrs	r3, r2
 800d91a:	693a      	ldr	r2, [r7, #16]
 800d91c:	4313      	orrs	r3, r2
 800d91e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800d926:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800d92e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	685a      	ldr	r2, [r3, #4]
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	695b      	ldr	r3, [r3, #20]
 800d938:	011b      	lsls	r3, r3, #4
 800d93a:	4313      	orrs	r3, r2
 800d93c:	68fa      	ldr	r2, [r7, #12]
 800d93e:	4313      	orrs	r3, r2
 800d940:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	697a      	ldr	r2, [r7, #20]
 800d948:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	693a      	ldr	r2, [r7, #16]
 800d950:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2201      	movs	r2, #1
 800d95e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2201      	movs	r2, #1
 800d966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2201      	movs	r2, #1
 800d96e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2201      	movs	r2, #1
 800d976:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2201      	movs	r2, #1
 800d97e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2201      	movs	r2, #1
 800d986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d98a:	2300      	movs	r3, #0
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3718      	adds	r7, #24
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d9a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d9ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d9b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d9bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d110      	bne.n	800d9e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d9c4:	7bfb      	ldrb	r3, [r7, #15]
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	d102      	bne.n	800d9d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d9ca:	7b7b      	ldrb	r3, [r7, #13]
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d001      	beq.n	800d9d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	e069      	b.n	800daa8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2202      	movs	r2, #2
 800d9d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2202      	movs	r2, #2
 800d9e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d9e4:	e031      	b.n	800da4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	2b04      	cmp	r3, #4
 800d9ea:	d110      	bne.n	800da0e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d9ec:	7bbb      	ldrb	r3, [r7, #14]
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d102      	bne.n	800d9f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d9f2:	7b3b      	ldrb	r3, [r7, #12]
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d001      	beq.n	800d9fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	e055      	b.n	800daa8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2202      	movs	r2, #2
 800da00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2202      	movs	r2, #2
 800da08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da0c:	e01d      	b.n	800da4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800da0e:	7bfb      	ldrb	r3, [r7, #15]
 800da10:	2b01      	cmp	r3, #1
 800da12:	d108      	bne.n	800da26 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800da14:	7bbb      	ldrb	r3, [r7, #14]
 800da16:	2b01      	cmp	r3, #1
 800da18:	d105      	bne.n	800da26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800da1a:	7b7b      	ldrb	r3, [r7, #13]
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d102      	bne.n	800da26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800da20:	7b3b      	ldrb	r3, [r7, #12]
 800da22:	2b01      	cmp	r3, #1
 800da24:	d001      	beq.n	800da2a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800da26:	2301      	movs	r3, #1
 800da28:	e03e      	b.n	800daa8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2202      	movs	r2, #2
 800da2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2202      	movs	r2, #2
 800da36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2202      	movs	r2, #2
 800da3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2202      	movs	r2, #2
 800da46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d003      	beq.n	800da58 <HAL_TIM_Encoder_Start+0xc4>
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	2b04      	cmp	r3, #4
 800da54:	d008      	beq.n	800da68 <HAL_TIM_Encoder_Start+0xd4>
 800da56:	e00f      	b.n	800da78 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	2201      	movs	r2, #1
 800da5e:	2100      	movs	r1, #0
 800da60:	4618      	mov	r0, r3
 800da62:	f000 ffb9 	bl	800e9d8 <TIM_CCxChannelCmd>
      break;
 800da66:	e016      	b.n	800da96 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	2201      	movs	r2, #1
 800da6e:	2104      	movs	r1, #4
 800da70:	4618      	mov	r0, r3
 800da72:	f000 ffb1 	bl	800e9d8 <TIM_CCxChannelCmd>
      break;
 800da76:	e00e      	b.n	800da96 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	2201      	movs	r2, #1
 800da7e:	2100      	movs	r1, #0
 800da80:	4618      	mov	r0, r3
 800da82:	f000 ffa9 	bl	800e9d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	2201      	movs	r2, #1
 800da8c:	2104      	movs	r1, #4
 800da8e:	4618      	mov	r0, r3
 800da90:	f000 ffa2 	bl	800e9d8 <TIM_CCxChannelCmd>
      break;
 800da94:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f042 0201 	orr.w	r2, r2, #1
 800daa4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800daa6:	2300      	movs	r3, #0
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3710      	adds	r7, #16
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b086      	sub	sp, #24
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	60f8      	str	r0, [r7, #12]
 800dab8:	60b9      	str	r1, [r7, #8]
 800daba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dabc:	2300      	movs	r3, #0
 800dabe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dac6:	2b01      	cmp	r3, #1
 800dac8:	d101      	bne.n	800dace <HAL_TIM_PWM_ConfigChannel+0x1e>
 800daca:	2302      	movs	r3, #2
 800dacc:	e0ff      	b.n	800dcce <HAL_TIM_PWM_ConfigChannel+0x21e>
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2201      	movs	r2, #1
 800dad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2b14      	cmp	r3, #20
 800dada:	f200 80f0 	bhi.w	800dcbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800dade:	a201      	add	r2, pc, #4	@ (adr r2, 800dae4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae4:	0800db39 	.word	0x0800db39
 800dae8:	0800dcbf 	.word	0x0800dcbf
 800daec:	0800dcbf 	.word	0x0800dcbf
 800daf0:	0800dcbf 	.word	0x0800dcbf
 800daf4:	0800db79 	.word	0x0800db79
 800daf8:	0800dcbf 	.word	0x0800dcbf
 800dafc:	0800dcbf 	.word	0x0800dcbf
 800db00:	0800dcbf 	.word	0x0800dcbf
 800db04:	0800dbbb 	.word	0x0800dbbb
 800db08:	0800dcbf 	.word	0x0800dcbf
 800db0c:	0800dcbf 	.word	0x0800dcbf
 800db10:	0800dcbf 	.word	0x0800dcbf
 800db14:	0800dbfb 	.word	0x0800dbfb
 800db18:	0800dcbf 	.word	0x0800dcbf
 800db1c:	0800dcbf 	.word	0x0800dcbf
 800db20:	0800dcbf 	.word	0x0800dcbf
 800db24:	0800dc3d 	.word	0x0800dc3d
 800db28:	0800dcbf 	.word	0x0800dcbf
 800db2c:	0800dcbf 	.word	0x0800dcbf
 800db30:	0800dcbf 	.word	0x0800dcbf
 800db34:	0800dc7d 	.word	0x0800dc7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	68b9      	ldr	r1, [r7, #8]
 800db3e:	4618      	mov	r0, r3
 800db40:	f000 fb84 	bl	800e24c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	699a      	ldr	r2, [r3, #24]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f042 0208 	orr.w	r2, r2, #8
 800db52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	699a      	ldr	r2, [r3, #24]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f022 0204 	bic.w	r2, r2, #4
 800db62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	6999      	ldr	r1, [r3, #24]
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	691a      	ldr	r2, [r3, #16]
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	430a      	orrs	r2, r1
 800db74:	619a      	str	r2, [r3, #24]
      break;
 800db76:	e0a5      	b.n	800dcc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	68b9      	ldr	r1, [r7, #8]
 800db7e:	4618      	mov	r0, r3
 800db80:	f000 fbfe 	bl	800e380 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	699a      	ldr	r2, [r3, #24]
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800db92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	699a      	ldr	r2, [r3, #24]
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	6999      	ldr	r1, [r3, #24]
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	691b      	ldr	r3, [r3, #16]
 800dbae:	021a      	lsls	r2, r3, #8
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	430a      	orrs	r2, r1
 800dbb6:	619a      	str	r2, [r3, #24]
      break;
 800dbb8:	e084      	b.n	800dcc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	68b9      	ldr	r1, [r7, #8]
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f000 fc71 	bl	800e4a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	69da      	ldr	r2, [r3, #28]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f042 0208 	orr.w	r2, r2, #8
 800dbd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	69da      	ldr	r2, [r3, #28]
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f022 0204 	bic.w	r2, r2, #4
 800dbe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	69d9      	ldr	r1, [r3, #28]
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	691a      	ldr	r2, [r3, #16]
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	430a      	orrs	r2, r1
 800dbf6:	61da      	str	r2, [r3, #28]
      break;
 800dbf8:	e064      	b.n	800dcc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	68b9      	ldr	r1, [r7, #8]
 800dc00:	4618      	mov	r0, r3
 800dc02:	f000 fce3 	bl	800e5cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	69da      	ldr	r2, [r3, #28]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dc14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	69da      	ldr	r2, [r3, #28]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dc24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	69d9      	ldr	r1, [r3, #28]
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	691b      	ldr	r3, [r3, #16]
 800dc30:	021a      	lsls	r2, r3, #8
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	430a      	orrs	r2, r1
 800dc38:	61da      	str	r2, [r3, #28]
      break;
 800dc3a:	e043      	b.n	800dcc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	68b9      	ldr	r1, [r7, #8]
 800dc42:	4618      	mov	r0, r3
 800dc44:	f000 fd56 	bl	800e6f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f042 0208 	orr.w	r2, r2, #8
 800dc56:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f022 0204 	bic.w	r2, r2, #4
 800dc66:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	691a      	ldr	r2, [r3, #16]
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	430a      	orrs	r2, r1
 800dc78:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800dc7a:	e023      	b.n	800dcc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	68b9      	ldr	r1, [r7, #8]
 800dc82:	4618      	mov	r0, r3
 800dc84:	f000 fda0 	bl	800e7c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dc96:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dca6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	691b      	ldr	r3, [r3, #16]
 800dcb2:	021a      	lsls	r2, r3, #8
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	430a      	orrs	r2, r1
 800dcba:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800dcbc:	e002      	b.n	800dcc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	75fb      	strb	r3, [r7, #23]
      break;
 800dcc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dccc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3718      	adds	r7, #24
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop

0800dcd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dce2:	2300      	movs	r3, #0
 800dce4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dcec:	2b01      	cmp	r3, #1
 800dcee:	d101      	bne.n	800dcf4 <HAL_TIM_ConfigClockSource+0x1c>
 800dcf0:	2302      	movs	r3, #2
 800dcf2:	e0f6      	b.n	800dee2 <HAL_TIM_ConfigClockSource+0x20a>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2202      	movs	r2, #2
 800dd00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	689b      	ldr	r3, [r3, #8]
 800dd0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800dd12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800dd16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dd1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	68ba      	ldr	r2, [r7, #8]
 800dd26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4a6f      	ldr	r2, [pc, #444]	@ (800deec <HAL_TIM_ConfigClockSource+0x214>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	f000 80c1 	beq.w	800deb6 <HAL_TIM_ConfigClockSource+0x1de>
 800dd34:	4a6d      	ldr	r2, [pc, #436]	@ (800deec <HAL_TIM_ConfigClockSource+0x214>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	f200 80c6 	bhi.w	800dec8 <HAL_TIM_ConfigClockSource+0x1f0>
 800dd3c:	4a6c      	ldr	r2, [pc, #432]	@ (800def0 <HAL_TIM_ConfigClockSource+0x218>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	f000 80b9 	beq.w	800deb6 <HAL_TIM_ConfigClockSource+0x1de>
 800dd44:	4a6a      	ldr	r2, [pc, #424]	@ (800def0 <HAL_TIM_ConfigClockSource+0x218>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	f200 80be 	bhi.w	800dec8 <HAL_TIM_ConfigClockSource+0x1f0>
 800dd4c:	4a69      	ldr	r2, [pc, #420]	@ (800def4 <HAL_TIM_ConfigClockSource+0x21c>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	f000 80b1 	beq.w	800deb6 <HAL_TIM_ConfigClockSource+0x1de>
 800dd54:	4a67      	ldr	r2, [pc, #412]	@ (800def4 <HAL_TIM_ConfigClockSource+0x21c>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	f200 80b6 	bhi.w	800dec8 <HAL_TIM_ConfigClockSource+0x1f0>
 800dd5c:	4a66      	ldr	r2, [pc, #408]	@ (800def8 <HAL_TIM_ConfigClockSource+0x220>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	f000 80a9 	beq.w	800deb6 <HAL_TIM_ConfigClockSource+0x1de>
 800dd64:	4a64      	ldr	r2, [pc, #400]	@ (800def8 <HAL_TIM_ConfigClockSource+0x220>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	f200 80ae 	bhi.w	800dec8 <HAL_TIM_ConfigClockSource+0x1f0>
 800dd6c:	4a63      	ldr	r2, [pc, #396]	@ (800defc <HAL_TIM_ConfigClockSource+0x224>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	f000 80a1 	beq.w	800deb6 <HAL_TIM_ConfigClockSource+0x1de>
 800dd74:	4a61      	ldr	r2, [pc, #388]	@ (800defc <HAL_TIM_ConfigClockSource+0x224>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	f200 80a6 	bhi.w	800dec8 <HAL_TIM_ConfigClockSource+0x1f0>
 800dd7c:	4a60      	ldr	r2, [pc, #384]	@ (800df00 <HAL_TIM_ConfigClockSource+0x228>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	f000 8099 	beq.w	800deb6 <HAL_TIM_ConfigClockSource+0x1de>
 800dd84:	4a5e      	ldr	r2, [pc, #376]	@ (800df00 <HAL_TIM_ConfigClockSource+0x228>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	f200 809e 	bhi.w	800dec8 <HAL_TIM_ConfigClockSource+0x1f0>
 800dd8c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dd90:	f000 8091 	beq.w	800deb6 <HAL_TIM_ConfigClockSource+0x1de>
 800dd94:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dd98:	f200 8096 	bhi.w	800dec8 <HAL_TIM_ConfigClockSource+0x1f0>
 800dd9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dda0:	f000 8089 	beq.w	800deb6 <HAL_TIM_ConfigClockSource+0x1de>
 800dda4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dda8:	f200 808e 	bhi.w	800dec8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ddac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ddb0:	d03e      	beq.n	800de30 <HAL_TIM_ConfigClockSource+0x158>
 800ddb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ddb6:	f200 8087 	bhi.w	800dec8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ddba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ddbe:	f000 8086 	beq.w	800dece <HAL_TIM_ConfigClockSource+0x1f6>
 800ddc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ddc6:	d87f      	bhi.n	800dec8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ddc8:	2b70      	cmp	r3, #112	@ 0x70
 800ddca:	d01a      	beq.n	800de02 <HAL_TIM_ConfigClockSource+0x12a>
 800ddcc:	2b70      	cmp	r3, #112	@ 0x70
 800ddce:	d87b      	bhi.n	800dec8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ddd0:	2b60      	cmp	r3, #96	@ 0x60
 800ddd2:	d050      	beq.n	800de76 <HAL_TIM_ConfigClockSource+0x19e>
 800ddd4:	2b60      	cmp	r3, #96	@ 0x60
 800ddd6:	d877      	bhi.n	800dec8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ddd8:	2b50      	cmp	r3, #80	@ 0x50
 800ddda:	d03c      	beq.n	800de56 <HAL_TIM_ConfigClockSource+0x17e>
 800dddc:	2b50      	cmp	r3, #80	@ 0x50
 800ddde:	d873      	bhi.n	800dec8 <HAL_TIM_ConfigClockSource+0x1f0>
 800dde0:	2b40      	cmp	r3, #64	@ 0x40
 800dde2:	d058      	beq.n	800de96 <HAL_TIM_ConfigClockSource+0x1be>
 800dde4:	2b40      	cmp	r3, #64	@ 0x40
 800dde6:	d86f      	bhi.n	800dec8 <HAL_TIM_ConfigClockSource+0x1f0>
 800dde8:	2b30      	cmp	r3, #48	@ 0x30
 800ddea:	d064      	beq.n	800deb6 <HAL_TIM_ConfigClockSource+0x1de>
 800ddec:	2b30      	cmp	r3, #48	@ 0x30
 800ddee:	d86b      	bhi.n	800dec8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ddf0:	2b20      	cmp	r3, #32
 800ddf2:	d060      	beq.n	800deb6 <HAL_TIM_ConfigClockSource+0x1de>
 800ddf4:	2b20      	cmp	r3, #32
 800ddf6:	d867      	bhi.n	800dec8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d05c      	beq.n	800deb6 <HAL_TIM_ConfigClockSource+0x1de>
 800ddfc:	2b10      	cmp	r3, #16
 800ddfe:	d05a      	beq.n	800deb6 <HAL_TIM_ConfigClockSource+0x1de>
 800de00:	e062      	b.n	800dec8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800de12:	f000 fdc1 	bl	800e998 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	689b      	ldr	r3, [r3, #8]
 800de1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800de24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	68ba      	ldr	r2, [r7, #8]
 800de2c:	609a      	str	r2, [r3, #8]
      break;
 800de2e:	e04f      	b.n	800ded0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800de40:	f000 fdaa 	bl	800e998 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	689a      	ldr	r2, [r3, #8]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800de52:	609a      	str	r2, [r3, #8]
      break;
 800de54:	e03c      	b.n	800ded0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800de62:	461a      	mov	r2, r3
 800de64:	f000 fd1c 	bl	800e8a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2150      	movs	r1, #80	@ 0x50
 800de6e:	4618      	mov	r0, r3
 800de70:	f000 fd75 	bl	800e95e <TIM_ITRx_SetConfig>
      break;
 800de74:	e02c      	b.n	800ded0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800de82:	461a      	mov	r2, r3
 800de84:	f000 fd3b 	bl	800e8fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2160      	movs	r1, #96	@ 0x60
 800de8e:	4618      	mov	r0, r3
 800de90:	f000 fd65 	bl	800e95e <TIM_ITRx_SetConfig>
      break;
 800de94:	e01c      	b.n	800ded0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dea2:	461a      	mov	r2, r3
 800dea4:	f000 fcfc 	bl	800e8a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	2140      	movs	r1, #64	@ 0x40
 800deae:	4618      	mov	r0, r3
 800deb0:	f000 fd55 	bl	800e95e <TIM_ITRx_SetConfig>
      break;
 800deb4:	e00c      	b.n	800ded0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	4619      	mov	r1, r3
 800dec0:	4610      	mov	r0, r2
 800dec2:	f000 fd4c 	bl	800e95e <TIM_ITRx_SetConfig>
      break;
 800dec6:	e003      	b.n	800ded0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800dec8:	2301      	movs	r3, #1
 800deca:	73fb      	strb	r3, [r7, #15]
      break;
 800decc:	e000      	b.n	800ded0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800dece:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2201      	movs	r2, #1
 800ded4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2200      	movs	r2, #0
 800dedc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3710      	adds	r7, #16
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	00100070 	.word	0x00100070
 800def0:	00100060 	.word	0x00100060
 800def4:	00100050 	.word	0x00100050
 800def8:	00100040 	.word	0x00100040
 800defc:	00100030 	.word	0x00100030
 800df00:	00100020 	.word	0x00100020

0800df04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800df0c:	bf00      	nop
 800df0e:	370c      	adds	r7, #12
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr

0800df18 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800df18:	b480      	push	{r7}
 800df1a:	b083      	sub	sp, #12
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800df20:	bf00      	nop
 800df22:	370c      	adds	r7, #12
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr

0800df2c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800df2c:	b480      	push	{r7}
 800df2e:	b083      	sub	sp, #12
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800df34:	bf00      	nop
 800df36:	370c      	adds	r7, #12
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr

0800df40 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b084      	sub	sp, #16
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df4c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	429a      	cmp	r2, r3
 800df56:	d107      	bne.n	800df68 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2201      	movs	r2, #1
 800df5c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2201      	movs	r2, #1
 800df62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800df66:	e02a      	b.n	800dfbe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df6c:	687a      	ldr	r2, [r7, #4]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d107      	bne.n	800df82 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2202      	movs	r2, #2
 800df76:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2201      	movs	r2, #1
 800df7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800df80:	e01d      	b.n	800dfbe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d107      	bne.n	800df9c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2204      	movs	r2, #4
 800df90:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2201      	movs	r2, #1
 800df96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800df9a:	e010      	b.n	800dfbe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d107      	bne.n	800dfb6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2208      	movs	r2, #8
 800dfaa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2201      	movs	r2, #1
 800dfb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dfb4:	e003      	b.n	800dfbe <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2201      	movs	r2, #1
 800dfba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800dfbe:	68f8      	ldr	r0, [r7, #12]
 800dfc0:	f7ff ffb4 	bl	800df2c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	771a      	strb	r2, [r3, #28]
}
 800dfca:	bf00      	nop
 800dfcc:	3710      	adds	r7, #16
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b084      	sub	sp, #16
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfde:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d10b      	bne.n	800e002 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2201      	movs	r2, #1
 800dfee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	69db      	ldr	r3, [r3, #28]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d136      	bne.n	800e066 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2201      	movs	r2, #1
 800dffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e000:	e031      	b.n	800e066 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e006:	687a      	ldr	r2, [r7, #4]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d10b      	bne.n	800e024 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2202      	movs	r2, #2
 800e010:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	69db      	ldr	r3, [r3, #28]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d125      	bne.n	800e066 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2201      	movs	r2, #1
 800e01e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e022:	e020      	b.n	800e066 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d10b      	bne.n	800e046 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2204      	movs	r2, #4
 800e032:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	69db      	ldr	r3, [r3, #28]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d114      	bne.n	800e066 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2201      	movs	r2, #1
 800e040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e044:	e00f      	b.n	800e066 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e04a:	687a      	ldr	r2, [r7, #4]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d10a      	bne.n	800e066 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2208      	movs	r2, #8
 800e054:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	69db      	ldr	r3, [r3, #28]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d103      	bne.n	800e066 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	2201      	movs	r2, #1
 800e062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e066:	68f8      	ldr	r0, [r7, #12]
 800e068:	f7ff ff4c 	bl	800df04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2200      	movs	r2, #0
 800e070:	771a      	strb	r2, [r3, #28]
}
 800e072:	bf00      	nop
 800e074:	3710      	adds	r7, #16
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}

0800e07a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e07a:	b580      	push	{r7, lr}
 800e07c:	b084      	sub	sp, #16
 800e07e:	af00      	add	r7, sp, #0
 800e080:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e086:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	429a      	cmp	r2, r3
 800e090:	d103      	bne.n	800e09a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2201      	movs	r2, #1
 800e096:	771a      	strb	r2, [r3, #28]
 800e098:	e019      	b.n	800e0ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e09e:	687a      	ldr	r2, [r7, #4]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d103      	bne.n	800e0ac <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2202      	movs	r2, #2
 800e0a8:	771a      	strb	r2, [r3, #28]
 800e0aa:	e010      	b.n	800e0ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d103      	bne.n	800e0be <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2204      	movs	r2, #4
 800e0ba:	771a      	strb	r2, [r3, #28]
 800e0bc:	e007      	b.n	800e0ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d102      	bne.n	800e0ce <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2208      	movs	r2, #8
 800e0cc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	f7ff ff22 	bl	800df18 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	771a      	strb	r2, [r3, #28]
}
 800e0da:	bf00      	nop
 800e0dc:	3710      	adds	r7, #16
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
	...

0800e0e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b085      	sub	sp, #20
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	4a4c      	ldr	r2, [pc, #304]	@ (800e228 <TIM_Base_SetConfig+0x144>)
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	d017      	beq.n	800e12c <TIM_Base_SetConfig+0x48>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e102:	d013      	beq.n	800e12c <TIM_Base_SetConfig+0x48>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	4a49      	ldr	r2, [pc, #292]	@ (800e22c <TIM_Base_SetConfig+0x148>)
 800e108:	4293      	cmp	r3, r2
 800e10a:	d00f      	beq.n	800e12c <TIM_Base_SetConfig+0x48>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	4a48      	ldr	r2, [pc, #288]	@ (800e230 <TIM_Base_SetConfig+0x14c>)
 800e110:	4293      	cmp	r3, r2
 800e112:	d00b      	beq.n	800e12c <TIM_Base_SetConfig+0x48>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	4a47      	ldr	r2, [pc, #284]	@ (800e234 <TIM_Base_SetConfig+0x150>)
 800e118:	4293      	cmp	r3, r2
 800e11a:	d007      	beq.n	800e12c <TIM_Base_SetConfig+0x48>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	4a46      	ldr	r2, [pc, #280]	@ (800e238 <TIM_Base_SetConfig+0x154>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d003      	beq.n	800e12c <TIM_Base_SetConfig+0x48>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	4a45      	ldr	r2, [pc, #276]	@ (800e23c <TIM_Base_SetConfig+0x158>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	d108      	bne.n	800e13e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	68fa      	ldr	r2, [r7, #12]
 800e13a:	4313      	orrs	r3, r2
 800e13c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	4a39      	ldr	r2, [pc, #228]	@ (800e228 <TIM_Base_SetConfig+0x144>)
 800e142:	4293      	cmp	r3, r2
 800e144:	d023      	beq.n	800e18e <TIM_Base_SetConfig+0xaa>
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e14c:	d01f      	beq.n	800e18e <TIM_Base_SetConfig+0xaa>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	4a36      	ldr	r2, [pc, #216]	@ (800e22c <TIM_Base_SetConfig+0x148>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d01b      	beq.n	800e18e <TIM_Base_SetConfig+0xaa>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	4a35      	ldr	r2, [pc, #212]	@ (800e230 <TIM_Base_SetConfig+0x14c>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d017      	beq.n	800e18e <TIM_Base_SetConfig+0xaa>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	4a34      	ldr	r2, [pc, #208]	@ (800e234 <TIM_Base_SetConfig+0x150>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d013      	beq.n	800e18e <TIM_Base_SetConfig+0xaa>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4a33      	ldr	r2, [pc, #204]	@ (800e238 <TIM_Base_SetConfig+0x154>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d00f      	beq.n	800e18e <TIM_Base_SetConfig+0xaa>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	4a33      	ldr	r2, [pc, #204]	@ (800e240 <TIM_Base_SetConfig+0x15c>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d00b      	beq.n	800e18e <TIM_Base_SetConfig+0xaa>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	4a32      	ldr	r2, [pc, #200]	@ (800e244 <TIM_Base_SetConfig+0x160>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d007      	beq.n	800e18e <TIM_Base_SetConfig+0xaa>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	4a31      	ldr	r2, [pc, #196]	@ (800e248 <TIM_Base_SetConfig+0x164>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d003      	beq.n	800e18e <TIM_Base_SetConfig+0xaa>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	4a2c      	ldr	r2, [pc, #176]	@ (800e23c <TIM_Base_SetConfig+0x158>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d108      	bne.n	800e1a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	68fa      	ldr	r2, [r7, #12]
 800e19c:	4313      	orrs	r3, r2
 800e19e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	695b      	ldr	r3, [r3, #20]
 800e1aa:	4313      	orrs	r3, r2
 800e1ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	68fa      	ldr	r2, [r7, #12]
 800e1b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	689a      	ldr	r2, [r3, #8]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	4a18      	ldr	r2, [pc, #96]	@ (800e228 <TIM_Base_SetConfig+0x144>)
 800e1c8:	4293      	cmp	r3, r2
 800e1ca:	d013      	beq.n	800e1f4 <TIM_Base_SetConfig+0x110>
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	4a1a      	ldr	r2, [pc, #104]	@ (800e238 <TIM_Base_SetConfig+0x154>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d00f      	beq.n	800e1f4 <TIM_Base_SetConfig+0x110>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	4a1a      	ldr	r2, [pc, #104]	@ (800e240 <TIM_Base_SetConfig+0x15c>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d00b      	beq.n	800e1f4 <TIM_Base_SetConfig+0x110>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	4a19      	ldr	r2, [pc, #100]	@ (800e244 <TIM_Base_SetConfig+0x160>)
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	d007      	beq.n	800e1f4 <TIM_Base_SetConfig+0x110>
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	4a18      	ldr	r2, [pc, #96]	@ (800e248 <TIM_Base_SetConfig+0x164>)
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	d003      	beq.n	800e1f4 <TIM_Base_SetConfig+0x110>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	4a13      	ldr	r2, [pc, #76]	@ (800e23c <TIM_Base_SetConfig+0x158>)
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	d103      	bne.n	800e1fc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	691a      	ldr	r2, [r3, #16]
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2201      	movs	r2, #1
 800e200:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	691b      	ldr	r3, [r3, #16]
 800e206:	f003 0301 	and.w	r3, r3, #1
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d105      	bne.n	800e21a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	691b      	ldr	r3, [r3, #16]
 800e212:	f023 0201 	bic.w	r2, r3, #1
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	611a      	str	r2, [r3, #16]
  }
}
 800e21a:	bf00      	nop
 800e21c:	3714      	adds	r7, #20
 800e21e:	46bd      	mov	sp, r7
 800e220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e224:	4770      	bx	lr
 800e226:	bf00      	nop
 800e228:	40012c00 	.word	0x40012c00
 800e22c:	40000400 	.word	0x40000400
 800e230:	40000800 	.word	0x40000800
 800e234:	40000c00 	.word	0x40000c00
 800e238:	40013400 	.word	0x40013400
 800e23c:	40015000 	.word	0x40015000
 800e240:	40014000 	.word	0x40014000
 800e244:	40014400 	.word	0x40014400
 800e248:	40014800 	.word	0x40014800

0800e24c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b087      	sub	sp, #28
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6a1b      	ldr	r3, [r3, #32]
 800e25a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6a1b      	ldr	r3, [r3, #32]
 800e260:	f023 0201 	bic.w	r2, r3, #1
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	699b      	ldr	r3, [r3, #24]
 800e272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e27a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e27e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	f023 0303 	bic.w	r3, r3, #3
 800e286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	68fa      	ldr	r2, [r7, #12]
 800e28e:	4313      	orrs	r3, r2
 800e290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	f023 0302 	bic.w	r3, r3, #2
 800e298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	689b      	ldr	r3, [r3, #8]
 800e29e:	697a      	ldr	r2, [r7, #20]
 800e2a0:	4313      	orrs	r3, r2
 800e2a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	4a30      	ldr	r2, [pc, #192]	@ (800e368 <TIM_OC1_SetConfig+0x11c>)
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d013      	beq.n	800e2d4 <TIM_OC1_SetConfig+0x88>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	4a2f      	ldr	r2, [pc, #188]	@ (800e36c <TIM_OC1_SetConfig+0x120>)
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d00f      	beq.n	800e2d4 <TIM_OC1_SetConfig+0x88>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	4a2e      	ldr	r2, [pc, #184]	@ (800e370 <TIM_OC1_SetConfig+0x124>)
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	d00b      	beq.n	800e2d4 <TIM_OC1_SetConfig+0x88>
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	4a2d      	ldr	r2, [pc, #180]	@ (800e374 <TIM_OC1_SetConfig+0x128>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d007      	beq.n	800e2d4 <TIM_OC1_SetConfig+0x88>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	4a2c      	ldr	r2, [pc, #176]	@ (800e378 <TIM_OC1_SetConfig+0x12c>)
 800e2c8:	4293      	cmp	r3, r2
 800e2ca:	d003      	beq.n	800e2d4 <TIM_OC1_SetConfig+0x88>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	4a2b      	ldr	r2, [pc, #172]	@ (800e37c <TIM_OC1_SetConfig+0x130>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d10c      	bne.n	800e2ee <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	f023 0308 	bic.w	r3, r3, #8
 800e2da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	68db      	ldr	r3, [r3, #12]
 800e2e0:	697a      	ldr	r2, [r7, #20]
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	f023 0304 	bic.w	r3, r3, #4
 800e2ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	4a1d      	ldr	r2, [pc, #116]	@ (800e368 <TIM_OC1_SetConfig+0x11c>)
 800e2f2:	4293      	cmp	r3, r2
 800e2f4:	d013      	beq.n	800e31e <TIM_OC1_SetConfig+0xd2>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	4a1c      	ldr	r2, [pc, #112]	@ (800e36c <TIM_OC1_SetConfig+0x120>)
 800e2fa:	4293      	cmp	r3, r2
 800e2fc:	d00f      	beq.n	800e31e <TIM_OC1_SetConfig+0xd2>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	4a1b      	ldr	r2, [pc, #108]	@ (800e370 <TIM_OC1_SetConfig+0x124>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d00b      	beq.n	800e31e <TIM_OC1_SetConfig+0xd2>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	4a1a      	ldr	r2, [pc, #104]	@ (800e374 <TIM_OC1_SetConfig+0x128>)
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d007      	beq.n	800e31e <TIM_OC1_SetConfig+0xd2>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	4a19      	ldr	r2, [pc, #100]	@ (800e378 <TIM_OC1_SetConfig+0x12c>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d003      	beq.n	800e31e <TIM_OC1_SetConfig+0xd2>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	4a18      	ldr	r2, [pc, #96]	@ (800e37c <TIM_OC1_SetConfig+0x130>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d111      	bne.n	800e342 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e32c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	695b      	ldr	r3, [r3, #20]
 800e332:	693a      	ldr	r2, [r7, #16]
 800e334:	4313      	orrs	r3, r2
 800e336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	699b      	ldr	r3, [r3, #24]
 800e33c:	693a      	ldr	r2, [r7, #16]
 800e33e:	4313      	orrs	r3, r2
 800e340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	693a      	ldr	r2, [r7, #16]
 800e346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	68fa      	ldr	r2, [r7, #12]
 800e34c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	685a      	ldr	r2, [r3, #4]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	697a      	ldr	r2, [r7, #20]
 800e35a:	621a      	str	r2, [r3, #32]
}
 800e35c:	bf00      	nop
 800e35e:	371c      	adds	r7, #28
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr
 800e368:	40012c00 	.word	0x40012c00
 800e36c:	40013400 	.word	0x40013400
 800e370:	40014000 	.word	0x40014000
 800e374:	40014400 	.word	0x40014400
 800e378:	40014800 	.word	0x40014800
 800e37c:	40015000 	.word	0x40015000

0800e380 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e380:	b480      	push	{r7}
 800e382:	b087      	sub	sp, #28
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6a1b      	ldr	r3, [r3, #32]
 800e38e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6a1b      	ldr	r3, [r3, #32]
 800e394:	f023 0210 	bic.w	r2, r3, #16
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	699b      	ldr	r3, [r3, #24]
 800e3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e3ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e3b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e3ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	021b      	lsls	r3, r3, #8
 800e3c2:	68fa      	ldr	r2, [r7, #12]
 800e3c4:	4313      	orrs	r3, r2
 800e3c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	f023 0320 	bic.w	r3, r3, #32
 800e3ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	689b      	ldr	r3, [r3, #8]
 800e3d4:	011b      	lsls	r3, r3, #4
 800e3d6:	697a      	ldr	r2, [r7, #20]
 800e3d8:	4313      	orrs	r3, r2
 800e3da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	4a2c      	ldr	r2, [pc, #176]	@ (800e490 <TIM_OC2_SetConfig+0x110>)
 800e3e0:	4293      	cmp	r3, r2
 800e3e2:	d007      	beq.n	800e3f4 <TIM_OC2_SetConfig+0x74>
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	4a2b      	ldr	r2, [pc, #172]	@ (800e494 <TIM_OC2_SetConfig+0x114>)
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d003      	beq.n	800e3f4 <TIM_OC2_SetConfig+0x74>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	4a2a      	ldr	r2, [pc, #168]	@ (800e498 <TIM_OC2_SetConfig+0x118>)
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	d10d      	bne.n	800e410 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e3fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	68db      	ldr	r3, [r3, #12]
 800e400:	011b      	lsls	r3, r3, #4
 800e402:	697a      	ldr	r2, [r7, #20]
 800e404:	4313      	orrs	r3, r2
 800e406:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e40e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	4a1f      	ldr	r2, [pc, #124]	@ (800e490 <TIM_OC2_SetConfig+0x110>)
 800e414:	4293      	cmp	r3, r2
 800e416:	d013      	beq.n	800e440 <TIM_OC2_SetConfig+0xc0>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	4a1e      	ldr	r2, [pc, #120]	@ (800e494 <TIM_OC2_SetConfig+0x114>)
 800e41c:	4293      	cmp	r3, r2
 800e41e:	d00f      	beq.n	800e440 <TIM_OC2_SetConfig+0xc0>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	4a1e      	ldr	r2, [pc, #120]	@ (800e49c <TIM_OC2_SetConfig+0x11c>)
 800e424:	4293      	cmp	r3, r2
 800e426:	d00b      	beq.n	800e440 <TIM_OC2_SetConfig+0xc0>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	4a1d      	ldr	r2, [pc, #116]	@ (800e4a0 <TIM_OC2_SetConfig+0x120>)
 800e42c:	4293      	cmp	r3, r2
 800e42e:	d007      	beq.n	800e440 <TIM_OC2_SetConfig+0xc0>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	4a1c      	ldr	r2, [pc, #112]	@ (800e4a4 <TIM_OC2_SetConfig+0x124>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d003      	beq.n	800e440 <TIM_OC2_SetConfig+0xc0>
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	4a17      	ldr	r2, [pc, #92]	@ (800e498 <TIM_OC2_SetConfig+0x118>)
 800e43c:	4293      	cmp	r3, r2
 800e43e:	d113      	bne.n	800e468 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e446:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e44e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	695b      	ldr	r3, [r3, #20]
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	693a      	ldr	r2, [r7, #16]
 800e458:	4313      	orrs	r3, r2
 800e45a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	699b      	ldr	r3, [r3, #24]
 800e460:	009b      	lsls	r3, r3, #2
 800e462:	693a      	ldr	r2, [r7, #16]
 800e464:	4313      	orrs	r3, r2
 800e466:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	693a      	ldr	r2, [r7, #16]
 800e46c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	68fa      	ldr	r2, [r7, #12]
 800e472:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	685a      	ldr	r2, [r3, #4]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	697a      	ldr	r2, [r7, #20]
 800e480:	621a      	str	r2, [r3, #32]
}
 800e482:	bf00      	nop
 800e484:	371c      	adds	r7, #28
 800e486:	46bd      	mov	sp, r7
 800e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48c:	4770      	bx	lr
 800e48e:	bf00      	nop
 800e490:	40012c00 	.word	0x40012c00
 800e494:	40013400 	.word	0x40013400
 800e498:	40015000 	.word	0x40015000
 800e49c:	40014000 	.word	0x40014000
 800e4a0:	40014400 	.word	0x40014400
 800e4a4:	40014800 	.word	0x40014800

0800e4a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	b087      	sub	sp, #28
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6a1b      	ldr	r3, [r3, #32]
 800e4b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6a1b      	ldr	r3, [r3, #32]
 800e4bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	69db      	ldr	r3, [r3, #28]
 800e4ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e4d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e4da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	f023 0303 	bic.w	r3, r3, #3
 800e4e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	68fa      	ldr	r2, [r7, #12]
 800e4ea:	4313      	orrs	r3, r2
 800e4ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e4f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	689b      	ldr	r3, [r3, #8]
 800e4fa:	021b      	lsls	r3, r3, #8
 800e4fc:	697a      	ldr	r2, [r7, #20]
 800e4fe:	4313      	orrs	r3, r2
 800e500:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	4a2b      	ldr	r2, [pc, #172]	@ (800e5b4 <TIM_OC3_SetConfig+0x10c>)
 800e506:	4293      	cmp	r3, r2
 800e508:	d007      	beq.n	800e51a <TIM_OC3_SetConfig+0x72>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	4a2a      	ldr	r2, [pc, #168]	@ (800e5b8 <TIM_OC3_SetConfig+0x110>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d003      	beq.n	800e51a <TIM_OC3_SetConfig+0x72>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	4a29      	ldr	r2, [pc, #164]	@ (800e5bc <TIM_OC3_SetConfig+0x114>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d10d      	bne.n	800e536 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e520:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	68db      	ldr	r3, [r3, #12]
 800e526:	021b      	lsls	r3, r3, #8
 800e528:	697a      	ldr	r2, [r7, #20]
 800e52a:	4313      	orrs	r3, r2
 800e52c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	4a1e      	ldr	r2, [pc, #120]	@ (800e5b4 <TIM_OC3_SetConfig+0x10c>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d013      	beq.n	800e566 <TIM_OC3_SetConfig+0xbe>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4a1d      	ldr	r2, [pc, #116]	@ (800e5b8 <TIM_OC3_SetConfig+0x110>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d00f      	beq.n	800e566 <TIM_OC3_SetConfig+0xbe>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	4a1d      	ldr	r2, [pc, #116]	@ (800e5c0 <TIM_OC3_SetConfig+0x118>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d00b      	beq.n	800e566 <TIM_OC3_SetConfig+0xbe>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	4a1c      	ldr	r2, [pc, #112]	@ (800e5c4 <TIM_OC3_SetConfig+0x11c>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d007      	beq.n	800e566 <TIM_OC3_SetConfig+0xbe>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	4a1b      	ldr	r2, [pc, #108]	@ (800e5c8 <TIM_OC3_SetConfig+0x120>)
 800e55a:	4293      	cmp	r3, r2
 800e55c:	d003      	beq.n	800e566 <TIM_OC3_SetConfig+0xbe>
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	4a16      	ldr	r2, [pc, #88]	@ (800e5bc <TIM_OC3_SetConfig+0x114>)
 800e562:	4293      	cmp	r3, r2
 800e564:	d113      	bne.n	800e58e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e56c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	695b      	ldr	r3, [r3, #20]
 800e57a:	011b      	lsls	r3, r3, #4
 800e57c:	693a      	ldr	r2, [r7, #16]
 800e57e:	4313      	orrs	r3, r2
 800e580:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	699b      	ldr	r3, [r3, #24]
 800e586:	011b      	lsls	r3, r3, #4
 800e588:	693a      	ldr	r2, [r7, #16]
 800e58a:	4313      	orrs	r3, r2
 800e58c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	693a      	ldr	r2, [r7, #16]
 800e592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	68fa      	ldr	r2, [r7, #12]
 800e598:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	685a      	ldr	r2, [r3, #4]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	697a      	ldr	r2, [r7, #20]
 800e5a6:	621a      	str	r2, [r3, #32]
}
 800e5a8:	bf00      	nop
 800e5aa:	371c      	adds	r7, #28
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr
 800e5b4:	40012c00 	.word	0x40012c00
 800e5b8:	40013400 	.word	0x40013400
 800e5bc:	40015000 	.word	0x40015000
 800e5c0:	40014000 	.word	0x40014000
 800e5c4:	40014400 	.word	0x40014400
 800e5c8:	40014800 	.word	0x40014800

0800e5cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b087      	sub	sp, #28
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6a1b      	ldr	r3, [r3, #32]
 800e5da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6a1b      	ldr	r3, [r3, #32]
 800e5e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	685b      	ldr	r3, [r3, #4]
 800e5ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	69db      	ldr	r3, [r3, #28]
 800e5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e5fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e5fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	021b      	lsls	r3, r3, #8
 800e60e:	68fa      	ldr	r2, [r7, #12]
 800e610:	4313      	orrs	r3, r2
 800e612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e61a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	689b      	ldr	r3, [r3, #8]
 800e620:	031b      	lsls	r3, r3, #12
 800e622:	697a      	ldr	r2, [r7, #20]
 800e624:	4313      	orrs	r3, r2
 800e626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	4a2c      	ldr	r2, [pc, #176]	@ (800e6dc <TIM_OC4_SetConfig+0x110>)
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d007      	beq.n	800e640 <TIM_OC4_SetConfig+0x74>
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	4a2b      	ldr	r2, [pc, #172]	@ (800e6e0 <TIM_OC4_SetConfig+0x114>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d003      	beq.n	800e640 <TIM_OC4_SetConfig+0x74>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	4a2a      	ldr	r2, [pc, #168]	@ (800e6e4 <TIM_OC4_SetConfig+0x118>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d10d      	bne.n	800e65c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	68db      	ldr	r3, [r3, #12]
 800e64c:	031b      	lsls	r3, r3, #12
 800e64e:	697a      	ldr	r2, [r7, #20]
 800e650:	4313      	orrs	r3, r2
 800e652:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e65a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	4a1f      	ldr	r2, [pc, #124]	@ (800e6dc <TIM_OC4_SetConfig+0x110>)
 800e660:	4293      	cmp	r3, r2
 800e662:	d013      	beq.n	800e68c <TIM_OC4_SetConfig+0xc0>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	4a1e      	ldr	r2, [pc, #120]	@ (800e6e0 <TIM_OC4_SetConfig+0x114>)
 800e668:	4293      	cmp	r3, r2
 800e66a:	d00f      	beq.n	800e68c <TIM_OC4_SetConfig+0xc0>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	4a1e      	ldr	r2, [pc, #120]	@ (800e6e8 <TIM_OC4_SetConfig+0x11c>)
 800e670:	4293      	cmp	r3, r2
 800e672:	d00b      	beq.n	800e68c <TIM_OC4_SetConfig+0xc0>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	4a1d      	ldr	r2, [pc, #116]	@ (800e6ec <TIM_OC4_SetConfig+0x120>)
 800e678:	4293      	cmp	r3, r2
 800e67a:	d007      	beq.n	800e68c <TIM_OC4_SetConfig+0xc0>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	4a1c      	ldr	r2, [pc, #112]	@ (800e6f0 <TIM_OC4_SetConfig+0x124>)
 800e680:	4293      	cmp	r3, r2
 800e682:	d003      	beq.n	800e68c <TIM_OC4_SetConfig+0xc0>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	4a17      	ldr	r2, [pc, #92]	@ (800e6e4 <TIM_OC4_SetConfig+0x118>)
 800e688:	4293      	cmp	r3, r2
 800e68a:	d113      	bne.n	800e6b4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e692:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e69a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	695b      	ldr	r3, [r3, #20]
 800e6a0:	019b      	lsls	r3, r3, #6
 800e6a2:	693a      	ldr	r2, [r7, #16]
 800e6a4:	4313      	orrs	r3, r2
 800e6a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	699b      	ldr	r3, [r3, #24]
 800e6ac:	019b      	lsls	r3, r3, #6
 800e6ae:	693a      	ldr	r2, [r7, #16]
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	693a      	ldr	r2, [r7, #16]
 800e6b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	68fa      	ldr	r2, [r7, #12]
 800e6be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	685a      	ldr	r2, [r3, #4]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	697a      	ldr	r2, [r7, #20]
 800e6cc:	621a      	str	r2, [r3, #32]
}
 800e6ce:	bf00      	nop
 800e6d0:	371c      	adds	r7, #28
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d8:	4770      	bx	lr
 800e6da:	bf00      	nop
 800e6dc:	40012c00 	.word	0x40012c00
 800e6e0:	40013400 	.word	0x40013400
 800e6e4:	40015000 	.word	0x40015000
 800e6e8:	40014000 	.word	0x40014000
 800e6ec:	40014400 	.word	0x40014400
 800e6f0:	40014800 	.word	0x40014800

0800e6f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b087      	sub	sp, #28
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6a1b      	ldr	r3, [r3, #32]
 800e702:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6a1b      	ldr	r3, [r3, #32]
 800e708:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	685b      	ldr	r3, [r3, #4]
 800e714:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e71a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	68fa      	ldr	r2, [r7, #12]
 800e72e:	4313      	orrs	r3, r2
 800e730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e738:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	041b      	lsls	r3, r3, #16
 800e740:	693a      	ldr	r2, [r7, #16]
 800e742:	4313      	orrs	r3, r2
 800e744:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	4a19      	ldr	r2, [pc, #100]	@ (800e7b0 <TIM_OC5_SetConfig+0xbc>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d013      	beq.n	800e776 <TIM_OC5_SetConfig+0x82>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	4a18      	ldr	r2, [pc, #96]	@ (800e7b4 <TIM_OC5_SetConfig+0xc0>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d00f      	beq.n	800e776 <TIM_OC5_SetConfig+0x82>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	4a17      	ldr	r2, [pc, #92]	@ (800e7b8 <TIM_OC5_SetConfig+0xc4>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d00b      	beq.n	800e776 <TIM_OC5_SetConfig+0x82>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	4a16      	ldr	r2, [pc, #88]	@ (800e7bc <TIM_OC5_SetConfig+0xc8>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d007      	beq.n	800e776 <TIM_OC5_SetConfig+0x82>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	4a15      	ldr	r2, [pc, #84]	@ (800e7c0 <TIM_OC5_SetConfig+0xcc>)
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d003      	beq.n	800e776 <TIM_OC5_SetConfig+0x82>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	4a14      	ldr	r2, [pc, #80]	@ (800e7c4 <TIM_OC5_SetConfig+0xd0>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d109      	bne.n	800e78a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e77c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	695b      	ldr	r3, [r3, #20]
 800e782:	021b      	lsls	r3, r3, #8
 800e784:	697a      	ldr	r2, [r7, #20]
 800e786:	4313      	orrs	r3, r2
 800e788:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	697a      	ldr	r2, [r7, #20]
 800e78e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	68fa      	ldr	r2, [r7, #12]
 800e794:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	685a      	ldr	r2, [r3, #4]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	693a      	ldr	r2, [r7, #16]
 800e7a2:	621a      	str	r2, [r3, #32]
}
 800e7a4:	bf00      	nop
 800e7a6:	371c      	adds	r7, #28
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr
 800e7b0:	40012c00 	.word	0x40012c00
 800e7b4:	40013400 	.word	0x40013400
 800e7b8:	40014000 	.word	0x40014000
 800e7bc:	40014400 	.word	0x40014400
 800e7c0:	40014800 	.word	0x40014800
 800e7c4:	40015000 	.word	0x40015000

0800e7c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b087      	sub	sp, #28
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6a1b      	ldr	r3, [r3, #32]
 800e7d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6a1b      	ldr	r3, [r3, #32]
 800e7dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e7f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e7fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	021b      	lsls	r3, r3, #8
 800e802:	68fa      	ldr	r2, [r7, #12]
 800e804:	4313      	orrs	r3, r2
 800e806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e80e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	689b      	ldr	r3, [r3, #8]
 800e814:	051b      	lsls	r3, r3, #20
 800e816:	693a      	ldr	r2, [r7, #16]
 800e818:	4313      	orrs	r3, r2
 800e81a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	4a1a      	ldr	r2, [pc, #104]	@ (800e888 <TIM_OC6_SetConfig+0xc0>)
 800e820:	4293      	cmp	r3, r2
 800e822:	d013      	beq.n	800e84c <TIM_OC6_SetConfig+0x84>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	4a19      	ldr	r2, [pc, #100]	@ (800e88c <TIM_OC6_SetConfig+0xc4>)
 800e828:	4293      	cmp	r3, r2
 800e82a:	d00f      	beq.n	800e84c <TIM_OC6_SetConfig+0x84>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	4a18      	ldr	r2, [pc, #96]	@ (800e890 <TIM_OC6_SetConfig+0xc8>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d00b      	beq.n	800e84c <TIM_OC6_SetConfig+0x84>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	4a17      	ldr	r2, [pc, #92]	@ (800e894 <TIM_OC6_SetConfig+0xcc>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d007      	beq.n	800e84c <TIM_OC6_SetConfig+0x84>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	4a16      	ldr	r2, [pc, #88]	@ (800e898 <TIM_OC6_SetConfig+0xd0>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d003      	beq.n	800e84c <TIM_OC6_SetConfig+0x84>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	4a15      	ldr	r2, [pc, #84]	@ (800e89c <TIM_OC6_SetConfig+0xd4>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d109      	bne.n	800e860 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e852:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	695b      	ldr	r3, [r3, #20]
 800e858:	029b      	lsls	r3, r3, #10
 800e85a:	697a      	ldr	r2, [r7, #20]
 800e85c:	4313      	orrs	r3, r2
 800e85e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	697a      	ldr	r2, [r7, #20]
 800e864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	68fa      	ldr	r2, [r7, #12]
 800e86a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	685a      	ldr	r2, [r3, #4]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	693a      	ldr	r2, [r7, #16]
 800e878:	621a      	str	r2, [r3, #32]
}
 800e87a:	bf00      	nop
 800e87c:	371c      	adds	r7, #28
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop
 800e888:	40012c00 	.word	0x40012c00
 800e88c:	40013400 	.word	0x40013400
 800e890:	40014000 	.word	0x40014000
 800e894:	40014400 	.word	0x40014400
 800e898:	40014800 	.word	0x40014800
 800e89c:	40015000 	.word	0x40015000

0800e8a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b087      	sub	sp, #28
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	60f8      	str	r0, [r7, #12]
 800e8a8:	60b9      	str	r1, [r7, #8]
 800e8aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	6a1b      	ldr	r3, [r3, #32]
 800e8b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	6a1b      	ldr	r3, [r3, #32]
 800e8b6:	f023 0201 	bic.w	r2, r3, #1
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	699b      	ldr	r3, [r3, #24]
 800e8c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e8ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	011b      	lsls	r3, r3, #4
 800e8d0:	693a      	ldr	r2, [r7, #16]
 800e8d2:	4313      	orrs	r3, r2
 800e8d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	f023 030a 	bic.w	r3, r3, #10
 800e8dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e8de:	697a      	ldr	r2, [r7, #20]
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	4313      	orrs	r3, r2
 800e8e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	693a      	ldr	r2, [r7, #16]
 800e8ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	697a      	ldr	r2, [r7, #20]
 800e8f0:	621a      	str	r2, [r3, #32]
}
 800e8f2:	bf00      	nop
 800e8f4:	371c      	adds	r7, #28
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr

0800e8fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e8fe:	b480      	push	{r7}
 800e900:	b087      	sub	sp, #28
 800e902:	af00      	add	r7, sp, #0
 800e904:	60f8      	str	r0, [r7, #12]
 800e906:	60b9      	str	r1, [r7, #8]
 800e908:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	6a1b      	ldr	r3, [r3, #32]
 800e90e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	6a1b      	ldr	r3, [r3, #32]
 800e914:	f023 0210 	bic.w	r2, r3, #16
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	699b      	ldr	r3, [r3, #24]
 800e920:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e928:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	031b      	lsls	r3, r3, #12
 800e92e:	693a      	ldr	r2, [r7, #16]
 800e930:	4313      	orrs	r3, r2
 800e932:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e93a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	011b      	lsls	r3, r3, #4
 800e940:	697a      	ldr	r2, [r7, #20]
 800e942:	4313      	orrs	r3, r2
 800e944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	693a      	ldr	r2, [r7, #16]
 800e94a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	697a      	ldr	r2, [r7, #20]
 800e950:	621a      	str	r2, [r3, #32]
}
 800e952:	bf00      	nop
 800e954:	371c      	adds	r7, #28
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr

0800e95e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e95e:	b480      	push	{r7}
 800e960:	b085      	sub	sp, #20
 800e962:	af00      	add	r7, sp, #0
 800e964:	6078      	str	r0, [r7, #4]
 800e966:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	689b      	ldr	r3, [r3, #8]
 800e96c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800e974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e97a:	683a      	ldr	r2, [r7, #0]
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	4313      	orrs	r3, r2
 800e980:	f043 0307 	orr.w	r3, r3, #7
 800e984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	68fa      	ldr	r2, [r7, #12]
 800e98a:	609a      	str	r2, [r3, #8]
}
 800e98c:	bf00      	nop
 800e98e:	3714      	adds	r7, #20
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr

0800e998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e998:	b480      	push	{r7}
 800e99a:	b087      	sub	sp, #28
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	607a      	str	r2, [r7, #4]
 800e9a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	689b      	ldr	r3, [r3, #8]
 800e9aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e9b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	021a      	lsls	r2, r3, #8
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	431a      	orrs	r2, r3
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	697a      	ldr	r2, [r7, #20]
 800e9c2:	4313      	orrs	r3, r2
 800e9c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	697a      	ldr	r2, [r7, #20]
 800e9ca:	609a      	str	r2, [r3, #8]
}
 800e9cc:	bf00      	nop
 800e9ce:	371c      	adds	r7, #28
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr

0800e9d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b087      	sub	sp, #28
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	f003 031f 	and.w	r3, r3, #31
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	fa02 f303 	lsl.w	r3, r2, r3
 800e9f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	6a1a      	ldr	r2, [r3, #32]
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	43db      	mvns	r3, r3
 800e9fa:	401a      	ands	r2, r3
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	6a1a      	ldr	r2, [r3, #32]
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	f003 031f 	and.w	r3, r3, #31
 800ea0a:	6879      	ldr	r1, [r7, #4]
 800ea0c:	fa01 f303 	lsl.w	r3, r1, r3
 800ea10:	431a      	orrs	r2, r3
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	621a      	str	r2, [r3, #32]
}
 800ea16:	bf00      	nop
 800ea18:	371c      	adds	r7, #28
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea20:	4770      	bx	lr
	...

0800ea24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ea24:	b480      	push	{r7}
 800ea26:	b085      	sub	sp, #20
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d101      	bne.n	800ea3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ea38:	2302      	movs	r3, #2
 800ea3a:	e074      	b.n	800eb26 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2201      	movs	r2, #1
 800ea40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2202      	movs	r2, #2
 800ea48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	689b      	ldr	r3, [r3, #8]
 800ea5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	4a34      	ldr	r2, [pc, #208]	@ (800eb34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d009      	beq.n	800ea7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	4a33      	ldr	r2, [pc, #204]	@ (800eb38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	d004      	beq.n	800ea7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	4a31      	ldr	r2, [pc, #196]	@ (800eb3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ea76:	4293      	cmp	r3, r2
 800ea78:	d108      	bne.n	800ea8c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ea80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	68fa      	ldr	r2, [r7, #12]
 800ea88:	4313      	orrs	r3, r2
 800ea8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ea92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	68fa      	ldr	r2, [r7, #12]
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	68fa      	ldr	r2, [r7, #12]
 800eaa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	4a21      	ldr	r2, [pc, #132]	@ (800eb34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d022      	beq.n	800eafa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eabc:	d01d      	beq.n	800eafa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4a1f      	ldr	r2, [pc, #124]	@ (800eb40 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d018      	beq.n	800eafa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4a1d      	ldr	r2, [pc, #116]	@ (800eb44 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800eace:	4293      	cmp	r3, r2
 800ead0:	d013      	beq.n	800eafa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	4a1c      	ldr	r2, [pc, #112]	@ (800eb48 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ead8:	4293      	cmp	r3, r2
 800eada:	d00e      	beq.n	800eafa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4a15      	ldr	r2, [pc, #84]	@ (800eb38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d009      	beq.n	800eafa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4a18      	ldr	r2, [pc, #96]	@ (800eb4c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800eaec:	4293      	cmp	r3, r2
 800eaee:	d004      	beq.n	800eafa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	4a11      	ldr	r2, [pc, #68]	@ (800eb3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eaf6:	4293      	cmp	r3, r2
 800eaf8:	d10c      	bne.n	800eb14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	689b      	ldr	r3, [r3, #8]
 800eb06:	68ba      	ldr	r2, [r7, #8]
 800eb08:	4313      	orrs	r3, r2
 800eb0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	68ba      	ldr	r2, [r7, #8]
 800eb12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2201      	movs	r2, #1
 800eb18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800eb24:	2300      	movs	r3, #0
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3714      	adds	r7, #20
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
 800eb34:	40012c00 	.word	0x40012c00
 800eb38:	40013400 	.word	0x40013400
 800eb3c:	40015000 	.word	0x40015000
 800eb40:	40000400 	.word	0x40000400
 800eb44:	40000800 	.word	0x40000800
 800eb48:	40000c00 	.word	0x40000c00
 800eb4c:	40014000 	.word	0x40014000

0800eb50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b085      	sub	sp, #20
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d101      	bne.n	800eb6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800eb68:	2302      	movs	r3, #2
 800eb6a:	e078      	b.n	800ec5e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2201      	movs	r2, #1
 800eb70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	68db      	ldr	r3, [r3, #12]
 800eb7e:	4313      	orrs	r3, r2
 800eb80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	689b      	ldr	r3, [r3, #8]
 800eb8c:	4313      	orrs	r3, r2
 800eb8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	685b      	ldr	r3, [r3, #4]
 800eb9a:	4313      	orrs	r3, r2
 800eb9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4313      	orrs	r3, r2
 800ebaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	691b      	ldr	r3, [r3, #16]
 800ebb6:	4313      	orrs	r3, r2
 800ebb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	695b      	ldr	r3, [r3, #20]
 800ebc4:	4313      	orrs	r3, r2
 800ebc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	699b      	ldr	r3, [r3, #24]
 800ebe0:	041b      	lsls	r3, r3, #16
 800ebe2:	4313      	orrs	r3, r2
 800ebe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	69db      	ldr	r3, [r3, #28]
 800ebf0:	4313      	orrs	r3, r2
 800ebf2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	4a1c      	ldr	r2, [pc, #112]	@ (800ec6c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ebfa:	4293      	cmp	r3, r2
 800ebfc:	d009      	beq.n	800ec12 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	4a1b      	ldr	r2, [pc, #108]	@ (800ec70 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800ec04:	4293      	cmp	r3, r2
 800ec06:	d004      	beq.n	800ec12 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4a19      	ldr	r2, [pc, #100]	@ (800ec74 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d11c      	bne.n	800ec4c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec1c:	051b      	lsls	r3, r3, #20
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	6a1b      	ldr	r3, [r3, #32]
 800ec2c:	4313      	orrs	r3, r2
 800ec2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec48:	4313      	orrs	r3, r2
 800ec4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	68fa      	ldr	r2, [r7, #12]
 800ec52:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2200      	movs	r2, #0
 800ec58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ec5c:	2300      	movs	r3, #0
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3714      	adds	r7, #20
 800ec62:	46bd      	mov	sp, r7
 800ec64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec68:	4770      	bx	lr
 800ec6a:	bf00      	nop
 800ec6c:	40012c00 	.word	0x40012c00
 800ec70:	40013400 	.word	0x40013400
 800ec74:	40015000 	.word	0x40015000

0800ec78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d101      	bne.n	800ec8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ec86:	2301      	movs	r3, #1
 800ec88:	e042      	b.n	800ed10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d106      	bne.n	800eca2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2200      	movs	r2, #0
 800ec98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f7f4 fe1f 	bl	80038e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2224      	movs	r2, #36	@ 0x24
 800eca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	681a      	ldr	r2, [r3, #0]
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f022 0201 	bic.w	r2, r2, #1
 800ecb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d002      	beq.n	800ecc8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f000 fbb2 	bl	800f42c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f000 f8b3 	bl	800ee34 <UART_SetConfig>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b01      	cmp	r3, #1
 800ecd2:	d101      	bne.n	800ecd8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	e01b      	b.n	800ed10 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	685a      	ldr	r2, [r3, #4]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ece6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	689a      	ldr	r2, [r3, #8]
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ecf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	681a      	ldr	r2, [r3, #0]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f042 0201 	orr.w	r2, r2, #1
 800ed06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f000 fc31 	bl	800f570 <UART_CheckIdleState>
 800ed0e:	4603      	mov	r3, r0
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3708      	adds	r7, #8
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}

0800ed18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b08a      	sub	sp, #40	@ 0x28
 800ed1c:	af02      	add	r7, sp, #8
 800ed1e:	60f8      	str	r0, [r7, #12]
 800ed20:	60b9      	str	r1, [r7, #8]
 800ed22:	603b      	str	r3, [r7, #0]
 800ed24:	4613      	mov	r3, r2
 800ed26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed2e:	2b20      	cmp	r3, #32
 800ed30:	d17b      	bne.n	800ee2a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d002      	beq.n	800ed3e <HAL_UART_Transmit+0x26>
 800ed38:	88fb      	ldrh	r3, [r7, #6]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d101      	bne.n	800ed42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ed3e:	2301      	movs	r3, #1
 800ed40:	e074      	b.n	800ee2c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	2200      	movs	r2, #0
 800ed46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	2221      	movs	r2, #33	@ 0x21
 800ed4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ed52:	f7f5 fc97 	bl	8004684 <HAL_GetTick>
 800ed56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	88fa      	ldrh	r2, [r7, #6]
 800ed5c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	88fa      	ldrh	r2, [r7, #6]
 800ed64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	689b      	ldr	r3, [r3, #8]
 800ed6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed70:	d108      	bne.n	800ed84 <HAL_UART_Transmit+0x6c>
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	691b      	ldr	r3, [r3, #16]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d104      	bne.n	800ed84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	61bb      	str	r3, [r7, #24]
 800ed82:	e003      	b.n	800ed8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ed8c:	e030      	b.n	800edf0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	9300      	str	r3, [sp, #0]
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	2200      	movs	r2, #0
 800ed96:	2180      	movs	r1, #128	@ 0x80
 800ed98:	68f8      	ldr	r0, [r7, #12]
 800ed9a:	f000 fc93 	bl	800f6c4 <UART_WaitOnFlagUntilTimeout>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d005      	beq.n	800edb0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2220      	movs	r2, #32
 800eda8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800edac:	2303      	movs	r3, #3
 800edae:	e03d      	b.n	800ee2c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800edb0:	69fb      	ldr	r3, [r7, #28]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d10b      	bne.n	800edce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800edb6:	69bb      	ldr	r3, [r7, #24]
 800edb8:	881b      	ldrh	r3, [r3, #0]
 800edba:	461a      	mov	r2, r3
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800edc4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	3302      	adds	r3, #2
 800edca:	61bb      	str	r3, [r7, #24]
 800edcc:	e007      	b.n	800edde <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800edce:	69fb      	ldr	r3, [r7, #28]
 800edd0:	781a      	ldrb	r2, [r3, #0]
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800edd8:	69fb      	ldr	r3, [r7, #28]
 800edda:	3301      	adds	r3, #1
 800eddc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	3b01      	subs	r3, #1
 800ede8:	b29a      	uxth	r2, r3
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800edf6:	b29b      	uxth	r3, r3
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d1c8      	bne.n	800ed8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	9300      	str	r3, [sp, #0]
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	2200      	movs	r2, #0
 800ee04:	2140      	movs	r1, #64	@ 0x40
 800ee06:	68f8      	ldr	r0, [r7, #12]
 800ee08:	f000 fc5c 	bl	800f6c4 <UART_WaitOnFlagUntilTimeout>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d005      	beq.n	800ee1e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	2220      	movs	r2, #32
 800ee16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ee1a:	2303      	movs	r3, #3
 800ee1c:	e006      	b.n	800ee2c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	2220      	movs	r2, #32
 800ee22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ee26:	2300      	movs	r3, #0
 800ee28:	e000      	b.n	800ee2c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ee2a:	2302      	movs	r3, #2
  }
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3720      	adds	r7, #32
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ee34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee38:	b08c      	sub	sp, #48	@ 0x30
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ee3e:	2300      	movs	r3, #0
 800ee40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	689a      	ldr	r2, [r3, #8]
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	691b      	ldr	r3, [r3, #16]
 800ee4c:	431a      	orrs	r2, r3
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	695b      	ldr	r3, [r3, #20]
 800ee52:	431a      	orrs	r2, r3
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	69db      	ldr	r3, [r3, #28]
 800ee58:	4313      	orrs	r3, r2
 800ee5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	4baa      	ldr	r3, [pc, #680]	@ (800f10c <UART_SetConfig+0x2d8>)
 800ee64:	4013      	ands	r3, r2
 800ee66:	697a      	ldr	r2, [r7, #20]
 800ee68:	6812      	ldr	r2, [r2, #0]
 800ee6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ee6c:	430b      	orrs	r3, r1
 800ee6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	68da      	ldr	r2, [r3, #12]
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	430a      	orrs	r2, r1
 800ee84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	699b      	ldr	r3, [r3, #24]
 800ee8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4a9f      	ldr	r2, [pc, #636]	@ (800f110 <UART_SetConfig+0x2dc>)
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d004      	beq.n	800eea0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	6a1b      	ldr	r3, [r3, #32]
 800ee9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee9c:	4313      	orrs	r3, r2
 800ee9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	689b      	ldr	r3, [r3, #8]
 800eea6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800eeaa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800eeae:	697a      	ldr	r2, [r7, #20]
 800eeb0:	6812      	ldr	r2, [r2, #0]
 800eeb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eeb4:	430b      	orrs	r3, r1
 800eeb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eebe:	f023 010f 	bic.w	r1, r3, #15
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	430a      	orrs	r2, r1
 800eecc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	4a90      	ldr	r2, [pc, #576]	@ (800f114 <UART_SetConfig+0x2e0>)
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d125      	bne.n	800ef24 <UART_SetConfig+0xf0>
 800eed8:	4b8f      	ldr	r3, [pc, #572]	@ (800f118 <UART_SetConfig+0x2e4>)
 800eeda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eede:	f003 0303 	and.w	r3, r3, #3
 800eee2:	2b03      	cmp	r3, #3
 800eee4:	d81a      	bhi.n	800ef1c <UART_SetConfig+0xe8>
 800eee6:	a201      	add	r2, pc, #4	@ (adr r2, 800eeec <UART_SetConfig+0xb8>)
 800eee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeec:	0800eefd 	.word	0x0800eefd
 800eef0:	0800ef0d 	.word	0x0800ef0d
 800eef4:	0800ef05 	.word	0x0800ef05
 800eef8:	0800ef15 	.word	0x0800ef15
 800eefc:	2301      	movs	r3, #1
 800eefe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ef02:	e116      	b.n	800f132 <UART_SetConfig+0x2fe>
 800ef04:	2302      	movs	r3, #2
 800ef06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ef0a:	e112      	b.n	800f132 <UART_SetConfig+0x2fe>
 800ef0c:	2304      	movs	r3, #4
 800ef0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ef12:	e10e      	b.n	800f132 <UART_SetConfig+0x2fe>
 800ef14:	2308      	movs	r3, #8
 800ef16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ef1a:	e10a      	b.n	800f132 <UART_SetConfig+0x2fe>
 800ef1c:	2310      	movs	r3, #16
 800ef1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ef22:	e106      	b.n	800f132 <UART_SetConfig+0x2fe>
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	4a7c      	ldr	r2, [pc, #496]	@ (800f11c <UART_SetConfig+0x2e8>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d138      	bne.n	800efa0 <UART_SetConfig+0x16c>
 800ef2e:	4b7a      	ldr	r3, [pc, #488]	@ (800f118 <UART_SetConfig+0x2e4>)
 800ef30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ef34:	f003 030c 	and.w	r3, r3, #12
 800ef38:	2b0c      	cmp	r3, #12
 800ef3a:	d82d      	bhi.n	800ef98 <UART_SetConfig+0x164>
 800ef3c:	a201      	add	r2, pc, #4	@ (adr r2, 800ef44 <UART_SetConfig+0x110>)
 800ef3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef42:	bf00      	nop
 800ef44:	0800ef79 	.word	0x0800ef79
 800ef48:	0800ef99 	.word	0x0800ef99
 800ef4c:	0800ef99 	.word	0x0800ef99
 800ef50:	0800ef99 	.word	0x0800ef99
 800ef54:	0800ef89 	.word	0x0800ef89
 800ef58:	0800ef99 	.word	0x0800ef99
 800ef5c:	0800ef99 	.word	0x0800ef99
 800ef60:	0800ef99 	.word	0x0800ef99
 800ef64:	0800ef81 	.word	0x0800ef81
 800ef68:	0800ef99 	.word	0x0800ef99
 800ef6c:	0800ef99 	.word	0x0800ef99
 800ef70:	0800ef99 	.word	0x0800ef99
 800ef74:	0800ef91 	.word	0x0800ef91
 800ef78:	2300      	movs	r3, #0
 800ef7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ef7e:	e0d8      	b.n	800f132 <UART_SetConfig+0x2fe>
 800ef80:	2302      	movs	r3, #2
 800ef82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ef86:	e0d4      	b.n	800f132 <UART_SetConfig+0x2fe>
 800ef88:	2304      	movs	r3, #4
 800ef8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ef8e:	e0d0      	b.n	800f132 <UART_SetConfig+0x2fe>
 800ef90:	2308      	movs	r3, #8
 800ef92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ef96:	e0cc      	b.n	800f132 <UART_SetConfig+0x2fe>
 800ef98:	2310      	movs	r3, #16
 800ef9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ef9e:	e0c8      	b.n	800f132 <UART_SetConfig+0x2fe>
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4a5e      	ldr	r2, [pc, #376]	@ (800f120 <UART_SetConfig+0x2ec>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d125      	bne.n	800eff6 <UART_SetConfig+0x1c2>
 800efaa:	4b5b      	ldr	r3, [pc, #364]	@ (800f118 <UART_SetConfig+0x2e4>)
 800efac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800efb0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800efb4:	2b30      	cmp	r3, #48	@ 0x30
 800efb6:	d016      	beq.n	800efe6 <UART_SetConfig+0x1b2>
 800efb8:	2b30      	cmp	r3, #48	@ 0x30
 800efba:	d818      	bhi.n	800efee <UART_SetConfig+0x1ba>
 800efbc:	2b20      	cmp	r3, #32
 800efbe:	d00a      	beq.n	800efd6 <UART_SetConfig+0x1a2>
 800efc0:	2b20      	cmp	r3, #32
 800efc2:	d814      	bhi.n	800efee <UART_SetConfig+0x1ba>
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d002      	beq.n	800efce <UART_SetConfig+0x19a>
 800efc8:	2b10      	cmp	r3, #16
 800efca:	d008      	beq.n	800efde <UART_SetConfig+0x1aa>
 800efcc:	e00f      	b.n	800efee <UART_SetConfig+0x1ba>
 800efce:	2300      	movs	r3, #0
 800efd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800efd4:	e0ad      	b.n	800f132 <UART_SetConfig+0x2fe>
 800efd6:	2302      	movs	r3, #2
 800efd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800efdc:	e0a9      	b.n	800f132 <UART_SetConfig+0x2fe>
 800efde:	2304      	movs	r3, #4
 800efe0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800efe4:	e0a5      	b.n	800f132 <UART_SetConfig+0x2fe>
 800efe6:	2308      	movs	r3, #8
 800efe8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800efec:	e0a1      	b.n	800f132 <UART_SetConfig+0x2fe>
 800efee:	2310      	movs	r3, #16
 800eff0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eff4:	e09d      	b.n	800f132 <UART_SetConfig+0x2fe>
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	4a4a      	ldr	r2, [pc, #296]	@ (800f124 <UART_SetConfig+0x2f0>)
 800effc:	4293      	cmp	r3, r2
 800effe:	d125      	bne.n	800f04c <UART_SetConfig+0x218>
 800f000:	4b45      	ldr	r3, [pc, #276]	@ (800f118 <UART_SetConfig+0x2e4>)
 800f002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f006:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f00a:	2bc0      	cmp	r3, #192	@ 0xc0
 800f00c:	d016      	beq.n	800f03c <UART_SetConfig+0x208>
 800f00e:	2bc0      	cmp	r3, #192	@ 0xc0
 800f010:	d818      	bhi.n	800f044 <UART_SetConfig+0x210>
 800f012:	2b80      	cmp	r3, #128	@ 0x80
 800f014:	d00a      	beq.n	800f02c <UART_SetConfig+0x1f8>
 800f016:	2b80      	cmp	r3, #128	@ 0x80
 800f018:	d814      	bhi.n	800f044 <UART_SetConfig+0x210>
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d002      	beq.n	800f024 <UART_SetConfig+0x1f0>
 800f01e:	2b40      	cmp	r3, #64	@ 0x40
 800f020:	d008      	beq.n	800f034 <UART_SetConfig+0x200>
 800f022:	e00f      	b.n	800f044 <UART_SetConfig+0x210>
 800f024:	2300      	movs	r3, #0
 800f026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f02a:	e082      	b.n	800f132 <UART_SetConfig+0x2fe>
 800f02c:	2302      	movs	r3, #2
 800f02e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f032:	e07e      	b.n	800f132 <UART_SetConfig+0x2fe>
 800f034:	2304      	movs	r3, #4
 800f036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f03a:	e07a      	b.n	800f132 <UART_SetConfig+0x2fe>
 800f03c:	2308      	movs	r3, #8
 800f03e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f042:	e076      	b.n	800f132 <UART_SetConfig+0x2fe>
 800f044:	2310      	movs	r3, #16
 800f046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f04a:	e072      	b.n	800f132 <UART_SetConfig+0x2fe>
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	4a35      	ldr	r2, [pc, #212]	@ (800f128 <UART_SetConfig+0x2f4>)
 800f052:	4293      	cmp	r3, r2
 800f054:	d12a      	bne.n	800f0ac <UART_SetConfig+0x278>
 800f056:	4b30      	ldr	r3, [pc, #192]	@ (800f118 <UART_SetConfig+0x2e4>)
 800f058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f05c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f060:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f064:	d01a      	beq.n	800f09c <UART_SetConfig+0x268>
 800f066:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f06a:	d81b      	bhi.n	800f0a4 <UART_SetConfig+0x270>
 800f06c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f070:	d00c      	beq.n	800f08c <UART_SetConfig+0x258>
 800f072:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f076:	d815      	bhi.n	800f0a4 <UART_SetConfig+0x270>
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d003      	beq.n	800f084 <UART_SetConfig+0x250>
 800f07c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f080:	d008      	beq.n	800f094 <UART_SetConfig+0x260>
 800f082:	e00f      	b.n	800f0a4 <UART_SetConfig+0x270>
 800f084:	2300      	movs	r3, #0
 800f086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f08a:	e052      	b.n	800f132 <UART_SetConfig+0x2fe>
 800f08c:	2302      	movs	r3, #2
 800f08e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f092:	e04e      	b.n	800f132 <UART_SetConfig+0x2fe>
 800f094:	2304      	movs	r3, #4
 800f096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f09a:	e04a      	b.n	800f132 <UART_SetConfig+0x2fe>
 800f09c:	2308      	movs	r3, #8
 800f09e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0a2:	e046      	b.n	800f132 <UART_SetConfig+0x2fe>
 800f0a4:	2310      	movs	r3, #16
 800f0a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0aa:	e042      	b.n	800f132 <UART_SetConfig+0x2fe>
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	4a17      	ldr	r2, [pc, #92]	@ (800f110 <UART_SetConfig+0x2dc>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d13a      	bne.n	800f12c <UART_SetConfig+0x2f8>
 800f0b6:	4b18      	ldr	r3, [pc, #96]	@ (800f118 <UART_SetConfig+0x2e4>)
 800f0b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f0bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f0c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f0c4:	d01a      	beq.n	800f0fc <UART_SetConfig+0x2c8>
 800f0c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f0ca:	d81b      	bhi.n	800f104 <UART_SetConfig+0x2d0>
 800f0cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f0d0:	d00c      	beq.n	800f0ec <UART_SetConfig+0x2b8>
 800f0d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f0d6:	d815      	bhi.n	800f104 <UART_SetConfig+0x2d0>
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d003      	beq.n	800f0e4 <UART_SetConfig+0x2b0>
 800f0dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f0e0:	d008      	beq.n	800f0f4 <UART_SetConfig+0x2c0>
 800f0e2:	e00f      	b.n	800f104 <UART_SetConfig+0x2d0>
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0ea:	e022      	b.n	800f132 <UART_SetConfig+0x2fe>
 800f0ec:	2302      	movs	r3, #2
 800f0ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0f2:	e01e      	b.n	800f132 <UART_SetConfig+0x2fe>
 800f0f4:	2304      	movs	r3, #4
 800f0f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0fa:	e01a      	b.n	800f132 <UART_SetConfig+0x2fe>
 800f0fc:	2308      	movs	r3, #8
 800f0fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f102:	e016      	b.n	800f132 <UART_SetConfig+0x2fe>
 800f104:	2310      	movs	r3, #16
 800f106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f10a:	e012      	b.n	800f132 <UART_SetConfig+0x2fe>
 800f10c:	cfff69f3 	.word	0xcfff69f3
 800f110:	40008000 	.word	0x40008000
 800f114:	40013800 	.word	0x40013800
 800f118:	40021000 	.word	0x40021000
 800f11c:	40004400 	.word	0x40004400
 800f120:	40004800 	.word	0x40004800
 800f124:	40004c00 	.word	0x40004c00
 800f128:	40005000 	.word	0x40005000
 800f12c:	2310      	movs	r3, #16
 800f12e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	4aae      	ldr	r2, [pc, #696]	@ (800f3f0 <UART_SetConfig+0x5bc>)
 800f138:	4293      	cmp	r3, r2
 800f13a:	f040 8097 	bne.w	800f26c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f13e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f142:	2b08      	cmp	r3, #8
 800f144:	d823      	bhi.n	800f18e <UART_SetConfig+0x35a>
 800f146:	a201      	add	r2, pc, #4	@ (adr r2, 800f14c <UART_SetConfig+0x318>)
 800f148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f14c:	0800f171 	.word	0x0800f171
 800f150:	0800f18f 	.word	0x0800f18f
 800f154:	0800f179 	.word	0x0800f179
 800f158:	0800f18f 	.word	0x0800f18f
 800f15c:	0800f17f 	.word	0x0800f17f
 800f160:	0800f18f 	.word	0x0800f18f
 800f164:	0800f18f 	.word	0x0800f18f
 800f168:	0800f18f 	.word	0x0800f18f
 800f16c:	0800f187 	.word	0x0800f187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f170:	f7fc ff02 	bl	800bf78 <HAL_RCC_GetPCLK1Freq>
 800f174:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f176:	e010      	b.n	800f19a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f178:	4b9e      	ldr	r3, [pc, #632]	@ (800f3f4 <UART_SetConfig+0x5c0>)
 800f17a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f17c:	e00d      	b.n	800f19a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f17e:	f7fc fe8d 	bl	800be9c <HAL_RCC_GetSysClockFreq>
 800f182:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f184:	e009      	b.n	800f19a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f18a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f18c:	e005      	b.n	800f19a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800f18e:	2300      	movs	r3, #0
 800f190:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f192:	2301      	movs	r3, #1
 800f194:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f198:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	f000 8130 	beq.w	800f402 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1a6:	4a94      	ldr	r2, [pc, #592]	@ (800f3f8 <UART_SetConfig+0x5c4>)
 800f1a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1ac:	461a      	mov	r2, r3
 800f1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f1b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	685a      	ldr	r2, [r3, #4]
 800f1ba:	4613      	mov	r3, r2
 800f1bc:	005b      	lsls	r3, r3, #1
 800f1be:	4413      	add	r3, r2
 800f1c0:	69ba      	ldr	r2, [r7, #24]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d305      	bcc.n	800f1d2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f1cc:	69ba      	ldr	r2, [r7, #24]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d903      	bls.n	800f1da <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f1d8:	e113      	b.n	800f402 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1dc:	2200      	movs	r2, #0
 800f1de:	60bb      	str	r3, [r7, #8]
 800f1e0:	60fa      	str	r2, [r7, #12]
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1e6:	4a84      	ldr	r2, [pc, #528]	@ (800f3f8 <UART_SetConfig+0x5c4>)
 800f1e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1ec:	b29b      	uxth	r3, r3
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	603b      	str	r3, [r7, #0]
 800f1f2:	607a      	str	r2, [r7, #4]
 800f1f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f1fc:	f7f1 fd6c 	bl	8000cd8 <__aeabi_uldivmod>
 800f200:	4602      	mov	r2, r0
 800f202:	460b      	mov	r3, r1
 800f204:	4610      	mov	r0, r2
 800f206:	4619      	mov	r1, r3
 800f208:	f04f 0200 	mov.w	r2, #0
 800f20c:	f04f 0300 	mov.w	r3, #0
 800f210:	020b      	lsls	r3, r1, #8
 800f212:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f216:	0202      	lsls	r2, r0, #8
 800f218:	6979      	ldr	r1, [r7, #20]
 800f21a:	6849      	ldr	r1, [r1, #4]
 800f21c:	0849      	lsrs	r1, r1, #1
 800f21e:	2000      	movs	r0, #0
 800f220:	460c      	mov	r4, r1
 800f222:	4605      	mov	r5, r0
 800f224:	eb12 0804 	adds.w	r8, r2, r4
 800f228:	eb43 0905 	adc.w	r9, r3, r5
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	2200      	movs	r2, #0
 800f232:	469a      	mov	sl, r3
 800f234:	4693      	mov	fp, r2
 800f236:	4652      	mov	r2, sl
 800f238:	465b      	mov	r3, fp
 800f23a:	4640      	mov	r0, r8
 800f23c:	4649      	mov	r1, r9
 800f23e:	f7f1 fd4b 	bl	8000cd8 <__aeabi_uldivmod>
 800f242:	4602      	mov	r2, r0
 800f244:	460b      	mov	r3, r1
 800f246:	4613      	mov	r3, r2
 800f248:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f24a:	6a3b      	ldr	r3, [r7, #32]
 800f24c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f250:	d308      	bcc.n	800f264 <UART_SetConfig+0x430>
 800f252:	6a3b      	ldr	r3, [r7, #32]
 800f254:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f258:	d204      	bcs.n	800f264 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	6a3a      	ldr	r2, [r7, #32]
 800f260:	60da      	str	r2, [r3, #12]
 800f262:	e0ce      	b.n	800f402 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800f264:	2301      	movs	r3, #1
 800f266:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f26a:	e0ca      	b.n	800f402 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	69db      	ldr	r3, [r3, #28]
 800f270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f274:	d166      	bne.n	800f344 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800f276:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f27a:	2b08      	cmp	r3, #8
 800f27c:	d827      	bhi.n	800f2ce <UART_SetConfig+0x49a>
 800f27e:	a201      	add	r2, pc, #4	@ (adr r2, 800f284 <UART_SetConfig+0x450>)
 800f280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f284:	0800f2a9 	.word	0x0800f2a9
 800f288:	0800f2b1 	.word	0x0800f2b1
 800f28c:	0800f2b9 	.word	0x0800f2b9
 800f290:	0800f2cf 	.word	0x0800f2cf
 800f294:	0800f2bf 	.word	0x0800f2bf
 800f298:	0800f2cf 	.word	0x0800f2cf
 800f29c:	0800f2cf 	.word	0x0800f2cf
 800f2a0:	0800f2cf 	.word	0x0800f2cf
 800f2a4:	0800f2c7 	.word	0x0800f2c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f2a8:	f7fc fe66 	bl	800bf78 <HAL_RCC_GetPCLK1Freq>
 800f2ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f2ae:	e014      	b.n	800f2da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f2b0:	f7fc fe78 	bl	800bfa4 <HAL_RCC_GetPCLK2Freq>
 800f2b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f2b6:	e010      	b.n	800f2da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f2b8:	4b4e      	ldr	r3, [pc, #312]	@ (800f3f4 <UART_SetConfig+0x5c0>)
 800f2ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f2bc:	e00d      	b.n	800f2da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f2be:	f7fc fded 	bl	800be9c <HAL_RCC_GetSysClockFreq>
 800f2c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f2c4:	e009      	b.n	800f2da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f2ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f2cc:	e005      	b.n	800f2da <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f2d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	f000 8090 	beq.w	800f402 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2e6:	4a44      	ldr	r2, [pc, #272]	@ (800f3f8 <UART_SetConfig+0x5c4>)
 800f2e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2ec:	461a      	mov	r2, r3
 800f2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2f4:	005a      	lsls	r2, r3, #1
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	085b      	lsrs	r3, r3, #1
 800f2fc:	441a      	add	r2, r3
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	685b      	ldr	r3, [r3, #4]
 800f302:	fbb2 f3f3 	udiv	r3, r2, r3
 800f306:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f308:	6a3b      	ldr	r3, [r7, #32]
 800f30a:	2b0f      	cmp	r3, #15
 800f30c:	d916      	bls.n	800f33c <UART_SetConfig+0x508>
 800f30e:	6a3b      	ldr	r3, [r7, #32]
 800f310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f314:	d212      	bcs.n	800f33c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f316:	6a3b      	ldr	r3, [r7, #32]
 800f318:	b29b      	uxth	r3, r3
 800f31a:	f023 030f 	bic.w	r3, r3, #15
 800f31e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f320:	6a3b      	ldr	r3, [r7, #32]
 800f322:	085b      	lsrs	r3, r3, #1
 800f324:	b29b      	uxth	r3, r3
 800f326:	f003 0307 	and.w	r3, r3, #7
 800f32a:	b29a      	uxth	r2, r3
 800f32c:	8bfb      	ldrh	r3, [r7, #30]
 800f32e:	4313      	orrs	r3, r2
 800f330:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	8bfa      	ldrh	r2, [r7, #30]
 800f338:	60da      	str	r2, [r3, #12]
 800f33a:	e062      	b.n	800f402 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800f33c:	2301      	movs	r3, #1
 800f33e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f342:	e05e      	b.n	800f402 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f344:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f348:	2b08      	cmp	r3, #8
 800f34a:	d828      	bhi.n	800f39e <UART_SetConfig+0x56a>
 800f34c:	a201      	add	r2, pc, #4	@ (adr r2, 800f354 <UART_SetConfig+0x520>)
 800f34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f352:	bf00      	nop
 800f354:	0800f379 	.word	0x0800f379
 800f358:	0800f381 	.word	0x0800f381
 800f35c:	0800f389 	.word	0x0800f389
 800f360:	0800f39f 	.word	0x0800f39f
 800f364:	0800f38f 	.word	0x0800f38f
 800f368:	0800f39f 	.word	0x0800f39f
 800f36c:	0800f39f 	.word	0x0800f39f
 800f370:	0800f39f 	.word	0x0800f39f
 800f374:	0800f397 	.word	0x0800f397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f378:	f7fc fdfe 	bl	800bf78 <HAL_RCC_GetPCLK1Freq>
 800f37c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f37e:	e014      	b.n	800f3aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f380:	f7fc fe10 	bl	800bfa4 <HAL_RCC_GetPCLK2Freq>
 800f384:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f386:	e010      	b.n	800f3aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f388:	4b1a      	ldr	r3, [pc, #104]	@ (800f3f4 <UART_SetConfig+0x5c0>)
 800f38a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f38c:	e00d      	b.n	800f3aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f38e:	f7fc fd85 	bl	800be9c <HAL_RCC_GetSysClockFreq>
 800f392:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f394:	e009      	b.n	800f3aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f39a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f39c:	e005      	b.n	800f3aa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f3a8:	bf00      	nop
    }

    if (pclk != 0U)
 800f3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d028      	beq.n	800f402 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3b4:	4a10      	ldr	r2, [pc, #64]	@ (800f3f8 <UART_SetConfig+0x5c4>)
 800f3b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3be:	fbb3 f2f2 	udiv	r2, r3, r2
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	085b      	lsrs	r3, r3, #1
 800f3c8:	441a      	add	r2, r3
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f3d4:	6a3b      	ldr	r3, [r7, #32]
 800f3d6:	2b0f      	cmp	r3, #15
 800f3d8:	d910      	bls.n	800f3fc <UART_SetConfig+0x5c8>
 800f3da:	6a3b      	ldr	r3, [r7, #32]
 800f3dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f3e0:	d20c      	bcs.n	800f3fc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f3e2:	6a3b      	ldr	r3, [r7, #32]
 800f3e4:	b29a      	uxth	r2, r3
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	60da      	str	r2, [r3, #12]
 800f3ec:	e009      	b.n	800f402 <UART_SetConfig+0x5ce>
 800f3ee:	bf00      	nop
 800f3f0:	40008000 	.word	0x40008000
 800f3f4:	00f42400 	.word	0x00f42400
 800f3f8:	08025fe4 	.word	0x08025fe4
      }
      else
      {
        ret = HAL_ERROR;
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	2201      	movs	r2, #1
 800f406:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	2201      	movs	r2, #1
 800f40e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	2200      	movs	r2, #0
 800f416:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	2200      	movs	r2, #0
 800f41c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f41e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800f422:	4618      	mov	r0, r3
 800f424:	3730      	adds	r7, #48	@ 0x30
 800f426:	46bd      	mov	sp, r7
 800f428:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f42c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b083      	sub	sp, #12
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f438:	f003 0308 	and.w	r3, r3, #8
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d00a      	beq.n	800f456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	430a      	orrs	r2, r1
 800f454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f45a:	f003 0301 	and.w	r3, r3, #1
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d00a      	beq.n	800f478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	430a      	orrs	r2, r1
 800f476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f47c:	f003 0302 	and.w	r3, r3, #2
 800f480:	2b00      	cmp	r3, #0
 800f482:	d00a      	beq.n	800f49a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	685b      	ldr	r3, [r3, #4]
 800f48a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	430a      	orrs	r2, r1
 800f498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f49e:	f003 0304 	and.w	r3, r3, #4
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d00a      	beq.n	800f4bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	685b      	ldr	r3, [r3, #4]
 800f4ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	430a      	orrs	r2, r1
 800f4ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4c0:	f003 0310 	and.w	r3, r3, #16
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d00a      	beq.n	800f4de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	689b      	ldr	r3, [r3, #8]
 800f4ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	430a      	orrs	r2, r1
 800f4dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4e2:	f003 0320 	and.w	r3, r3, #32
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d00a      	beq.n	800f500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	689b      	ldr	r3, [r3, #8]
 800f4f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	430a      	orrs	r2, r1
 800f4fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d01a      	beq.n	800f542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	685b      	ldr	r3, [r3, #4]
 800f512:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	430a      	orrs	r2, r1
 800f520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f526:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f52a:	d10a      	bne.n	800f542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	685b      	ldr	r3, [r3, #4]
 800f532:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	430a      	orrs	r2, r1
 800f540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d00a      	beq.n	800f564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	430a      	orrs	r2, r1
 800f562:	605a      	str	r2, [r3, #4]
  }
}
 800f564:	bf00      	nop
 800f566:	370c      	adds	r7, #12
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr

0800f570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b098      	sub	sp, #96	@ 0x60
 800f574:	af02      	add	r7, sp, #8
 800f576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2200      	movs	r2, #0
 800f57c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f580:	f7f5 f880 	bl	8004684 <HAL_GetTick>
 800f584:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	f003 0308 	and.w	r3, r3, #8
 800f590:	2b08      	cmp	r3, #8
 800f592:	d12f      	bne.n	800f5f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f594:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f598:	9300      	str	r3, [sp, #0]
 800f59a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f59c:	2200      	movs	r2, #0
 800f59e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f000 f88e 	bl	800f6c4 <UART_WaitOnFlagUntilTimeout>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d022      	beq.n	800f5f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5b6:	e853 3f00 	ldrex	r3, [r3]
 800f5ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f5bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f5c2:	653b      	str	r3, [r7, #80]	@ 0x50
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f5cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800f5ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f5d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f5d4:	e841 2300 	strex	r3, r2, [r1]
 800f5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f5da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d1e6      	bne.n	800f5ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2220      	movs	r2, #32
 800f5e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f5f0:	2303      	movs	r3, #3
 800f5f2:	e063      	b.n	800f6bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	f003 0304 	and.w	r3, r3, #4
 800f5fe:	2b04      	cmp	r3, #4
 800f600:	d149      	bne.n	800f696 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f602:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f606:	9300      	str	r3, [sp, #0]
 800f608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f60a:	2200      	movs	r2, #0
 800f60c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f000 f857 	bl	800f6c4 <UART_WaitOnFlagUntilTimeout>
 800f616:	4603      	mov	r3, r0
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d03c      	beq.n	800f696 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f624:	e853 3f00 	ldrex	r3, [r3]
 800f628:	623b      	str	r3, [r7, #32]
   return(result);
 800f62a:	6a3b      	ldr	r3, [r7, #32]
 800f62c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f630:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	461a      	mov	r2, r3
 800f638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f63a:	633b      	str	r3, [r7, #48]	@ 0x30
 800f63c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f63e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f640:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f642:	e841 2300 	strex	r3, r2, [r1]
 800f646:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d1e6      	bne.n	800f61c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	3308      	adds	r3, #8
 800f654:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f656:	693b      	ldr	r3, [r7, #16]
 800f658:	e853 3f00 	ldrex	r3, [r3]
 800f65c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	f023 0301 	bic.w	r3, r3, #1
 800f664:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	3308      	adds	r3, #8
 800f66c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f66e:	61fa      	str	r2, [r7, #28]
 800f670:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f672:	69b9      	ldr	r1, [r7, #24]
 800f674:	69fa      	ldr	r2, [r7, #28]
 800f676:	e841 2300 	strex	r3, r2, [r1]
 800f67a:	617b      	str	r3, [r7, #20]
   return(result);
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d1e5      	bne.n	800f64e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2220      	movs	r2, #32
 800f686:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2200      	movs	r2, #0
 800f68e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f692:	2303      	movs	r3, #3
 800f694:	e012      	b.n	800f6bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2220      	movs	r2, #32
 800f69a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2220      	movs	r2, #32
 800f6a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f6ba:	2300      	movs	r3, #0
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3758      	adds	r7, #88	@ 0x58
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}

0800f6c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b084      	sub	sp, #16
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	60b9      	str	r1, [r7, #8]
 800f6ce:	603b      	str	r3, [r7, #0]
 800f6d0:	4613      	mov	r3, r2
 800f6d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f6d4:	e04f      	b.n	800f776 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f6d6:	69bb      	ldr	r3, [r7, #24]
 800f6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6dc:	d04b      	beq.n	800f776 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f6de:	f7f4 ffd1 	bl	8004684 <HAL_GetTick>
 800f6e2:	4602      	mov	r2, r0
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	1ad3      	subs	r3, r2, r3
 800f6e8:	69ba      	ldr	r2, [r7, #24]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d302      	bcc.n	800f6f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800f6ee:	69bb      	ldr	r3, [r7, #24]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d101      	bne.n	800f6f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f6f4:	2303      	movs	r3, #3
 800f6f6:	e04e      	b.n	800f796 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	f003 0304 	and.w	r3, r3, #4
 800f702:	2b00      	cmp	r3, #0
 800f704:	d037      	beq.n	800f776 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	2b80      	cmp	r3, #128	@ 0x80
 800f70a:	d034      	beq.n	800f776 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	2b40      	cmp	r3, #64	@ 0x40
 800f710:	d031      	beq.n	800f776 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	69db      	ldr	r3, [r3, #28]
 800f718:	f003 0308 	and.w	r3, r3, #8
 800f71c:	2b08      	cmp	r3, #8
 800f71e:	d110      	bne.n	800f742 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	2208      	movs	r2, #8
 800f726:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f728:	68f8      	ldr	r0, [r7, #12]
 800f72a:	f000 f838 	bl	800f79e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2208      	movs	r2, #8
 800f732:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2200      	movs	r2, #0
 800f73a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f73e:	2301      	movs	r3, #1
 800f740:	e029      	b.n	800f796 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	69db      	ldr	r3, [r3, #28]
 800f748:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f74c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f750:	d111      	bne.n	800f776 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f75a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f75c:	68f8      	ldr	r0, [r7, #12]
 800f75e:	f000 f81e 	bl	800f79e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2220      	movs	r2, #32
 800f766:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	2200      	movs	r2, #0
 800f76e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f772:	2303      	movs	r3, #3
 800f774:	e00f      	b.n	800f796 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	69da      	ldr	r2, [r3, #28]
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	4013      	ands	r3, r2
 800f780:	68ba      	ldr	r2, [r7, #8]
 800f782:	429a      	cmp	r2, r3
 800f784:	bf0c      	ite	eq
 800f786:	2301      	moveq	r3, #1
 800f788:	2300      	movne	r3, #0
 800f78a:	b2db      	uxtb	r3, r3
 800f78c:	461a      	mov	r2, r3
 800f78e:	79fb      	ldrb	r3, [r7, #7]
 800f790:	429a      	cmp	r2, r3
 800f792:	d0a0      	beq.n	800f6d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f794:	2300      	movs	r3, #0
}
 800f796:	4618      	mov	r0, r3
 800f798:	3710      	adds	r7, #16
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}

0800f79e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f79e:	b480      	push	{r7}
 800f7a0:	b095      	sub	sp, #84	@ 0x54
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7ae:	e853 3f00 	ldrex	r3, [r3]
 800f7b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f7ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f7c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800f7c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f7ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f7cc:	e841 2300 	strex	r3, r2, [r1]
 800f7d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d1e6      	bne.n	800f7a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	3308      	adds	r3, #8
 800f7de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7e0:	6a3b      	ldr	r3, [r7, #32]
 800f7e2:	e853 3f00 	ldrex	r3, [r3]
 800f7e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800f7e8:	69fb      	ldr	r3, [r7, #28]
 800f7ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f7ee:	f023 0301 	bic.w	r3, r3, #1
 800f7f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	3308      	adds	r3, #8
 800f7fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f7fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f7fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f800:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f804:	e841 2300 	strex	r3, r2, [r1]
 800f808:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d1e3      	bne.n	800f7d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f814:	2b01      	cmp	r3, #1
 800f816:	d118      	bne.n	800f84a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	e853 3f00 	ldrex	r3, [r3]
 800f824:	60bb      	str	r3, [r7, #8]
   return(result);
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	f023 0310 	bic.w	r3, r3, #16
 800f82c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	461a      	mov	r2, r3
 800f834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f836:	61bb      	str	r3, [r7, #24]
 800f838:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f83a:	6979      	ldr	r1, [r7, #20]
 800f83c:	69ba      	ldr	r2, [r7, #24]
 800f83e:	e841 2300 	strex	r3, r2, [r1]
 800f842:	613b      	str	r3, [r7, #16]
   return(result);
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d1e6      	bne.n	800f818 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2220      	movs	r2, #32
 800f84e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2200      	movs	r2, #0
 800f856:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2200      	movs	r2, #0
 800f85c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f85e:	bf00      	nop
 800f860:	3754      	adds	r7, #84	@ 0x54
 800f862:	46bd      	mov	sp, r7
 800f864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f868:	4770      	bx	lr

0800f86a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f86a:	b480      	push	{r7}
 800f86c:	b085      	sub	sp, #20
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f878:	2b01      	cmp	r3, #1
 800f87a:	d101      	bne.n	800f880 <HAL_UARTEx_DisableFifoMode+0x16>
 800f87c:	2302      	movs	r3, #2
 800f87e:	e027      	b.n	800f8d0 <HAL_UARTEx_DisableFifoMode+0x66>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2201      	movs	r2, #1
 800f884:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2224      	movs	r2, #36	@ 0x24
 800f88c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	681a      	ldr	r2, [r3, #0]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f022 0201 	bic.w	r2, r2, #1
 800f8a6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f8ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	68fa      	ldr	r2, [r7, #12]
 800f8bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2220      	movs	r2, #32
 800f8c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f8ce:	2300      	movs	r3, #0
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3714      	adds	r7, #20
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8da:	4770      	bx	lr

0800f8dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b084      	sub	sp, #16
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f8ec:	2b01      	cmp	r3, #1
 800f8ee:	d101      	bne.n	800f8f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f8f0:	2302      	movs	r3, #2
 800f8f2:	e02d      	b.n	800f950 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2201      	movs	r2, #1
 800f8f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2224      	movs	r2, #36	@ 0x24
 800f900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	681a      	ldr	r2, [r3, #0]
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	f022 0201 	bic.w	r2, r2, #1
 800f91a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	689b      	ldr	r3, [r3, #8]
 800f922:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	683a      	ldr	r2, [r7, #0]
 800f92c:	430a      	orrs	r2, r1
 800f92e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f000 f84f 	bl	800f9d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	68fa      	ldr	r2, [r7, #12]
 800f93c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2220      	movs	r2, #32
 800f942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2200      	movs	r2, #0
 800f94a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f94e:	2300      	movs	r3, #0
}
 800f950:	4618      	mov	r0, r3
 800f952:	3710      	adds	r7, #16
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}

0800f958 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b084      	sub	sp, #16
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
 800f960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d101      	bne.n	800f970 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f96c:	2302      	movs	r3, #2
 800f96e:	e02d      	b.n	800f9cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2201      	movs	r2, #1
 800f974:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2224      	movs	r2, #36	@ 0x24
 800f97c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	681a      	ldr	r2, [r3, #0]
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	f022 0201 	bic.w	r2, r2, #1
 800f996:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	689b      	ldr	r3, [r3, #8]
 800f99e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	683a      	ldr	r2, [r7, #0]
 800f9a8:	430a      	orrs	r2, r1
 800f9aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f000 f811 	bl	800f9d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	68fa      	ldr	r2, [r7, #12]
 800f9b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2220      	movs	r2, #32
 800f9be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f9ca:	2300      	movs	r3, #0
}
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	3710      	adds	r7, #16
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}

0800f9d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f9d4:	b480      	push	{r7}
 800f9d6:	b085      	sub	sp, #20
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d108      	bne.n	800f9f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2201      	movs	r2, #1
 800f9e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f9f4:	e031      	b.n	800fa5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f9f6:	2308      	movs	r3, #8
 800f9f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f9fa:	2308      	movs	r3, #8
 800f9fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	689b      	ldr	r3, [r3, #8]
 800fa04:	0e5b      	lsrs	r3, r3, #25
 800fa06:	b2db      	uxtb	r3, r3
 800fa08:	f003 0307 	and.w	r3, r3, #7
 800fa0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	689b      	ldr	r3, [r3, #8]
 800fa14:	0f5b      	lsrs	r3, r3, #29
 800fa16:	b2db      	uxtb	r3, r3
 800fa18:	f003 0307 	and.w	r3, r3, #7
 800fa1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fa1e:	7bbb      	ldrb	r3, [r7, #14]
 800fa20:	7b3a      	ldrb	r2, [r7, #12]
 800fa22:	4911      	ldr	r1, [pc, #68]	@ (800fa68 <UARTEx_SetNbDataToProcess+0x94>)
 800fa24:	5c8a      	ldrb	r2, [r1, r2]
 800fa26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fa2a:	7b3a      	ldrb	r2, [r7, #12]
 800fa2c:	490f      	ldr	r1, [pc, #60]	@ (800fa6c <UARTEx_SetNbDataToProcess+0x98>)
 800fa2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fa30:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa34:	b29a      	uxth	r2, r3
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fa3c:	7bfb      	ldrb	r3, [r7, #15]
 800fa3e:	7b7a      	ldrb	r2, [r7, #13]
 800fa40:	4909      	ldr	r1, [pc, #36]	@ (800fa68 <UARTEx_SetNbDataToProcess+0x94>)
 800fa42:	5c8a      	ldrb	r2, [r1, r2]
 800fa44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fa48:	7b7a      	ldrb	r2, [r7, #13]
 800fa4a:	4908      	ldr	r1, [pc, #32]	@ (800fa6c <UARTEx_SetNbDataToProcess+0x98>)
 800fa4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fa4e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa52:	b29a      	uxth	r2, r3
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fa5a:	bf00      	nop
 800fa5c:	3714      	adds	r7, #20
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr
 800fa66:	bf00      	nop
 800fa68:	08025ffc 	.word	0x08025ffc
 800fa6c:	08026004 	.word	0x08026004

0800fa70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800fa70:	b480      	push	{r7}
 800fa72:	b085      	sub	sp, #20
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800fa80:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800fa84:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	b29a      	uxth	r2, r3
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fa90:	2300      	movs	r3, #0
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3714      	adds	r7, #20
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr

0800fa9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800fa9e:	b480      	push	{r7}
 800faa0:	b085      	sub	sp, #20
 800faa2:	af00      	add	r7, sp, #0
 800faa4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800faa6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800faaa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800fab2:	b29a      	uxth	r2, r3
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	43db      	mvns	r3, r3
 800faba:	b29b      	uxth	r3, r3
 800fabc:	4013      	ands	r3, r2
 800fabe:	b29a      	uxth	r2, r3
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fac6:	2300      	movs	r3, #0
}
 800fac8:	4618      	mov	r0, r3
 800faca:	3714      	adds	r7, #20
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr

0800fad4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800fad4:	b480      	push	{r7}
 800fad6:	b085      	sub	sp, #20
 800fad8:	af00      	add	r7, sp, #0
 800fada:	60f8      	str	r0, [r7, #12]
 800fadc:	1d3b      	adds	r3, r7, #4
 800fade:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	2201      	movs	r2, #1
 800fae6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	2200      	movs	r2, #0
 800faee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	2200      	movs	r2, #0
 800faf6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	2200      	movs	r2, #0
 800fafe:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800fb02:	2300      	movs	r3, #0
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3714      	adds	r7, #20
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0e:	4770      	bx	lr

0800fb10 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fb10:	b480      	push	{r7}
 800fb12:	b0a7      	sub	sp, #156	@ 0x9c
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800fb20:	687a      	ldr	r2, [r7, #4]
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	009b      	lsls	r3, r3, #2
 800fb28:	4413      	add	r3, r2
 800fb2a:	881b      	ldrh	r3, [r3, #0]
 800fb2c:	b29b      	uxth	r3, r3
 800fb2e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800fb32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fb36:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	78db      	ldrb	r3, [r3, #3]
 800fb3e:	2b03      	cmp	r3, #3
 800fb40:	d81f      	bhi.n	800fb82 <USB_ActivateEndpoint+0x72>
 800fb42:	a201      	add	r2, pc, #4	@ (adr r2, 800fb48 <USB_ActivateEndpoint+0x38>)
 800fb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb48:	0800fb59 	.word	0x0800fb59
 800fb4c:	0800fb75 	.word	0x0800fb75
 800fb50:	0800fb8b 	.word	0x0800fb8b
 800fb54:	0800fb67 	.word	0x0800fb67
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800fb58:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800fb5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800fb60:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800fb64:	e012      	b.n	800fb8c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800fb66:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800fb6a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800fb6e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800fb72:	e00b      	b.n	800fb8c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800fb74:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800fb78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800fb7c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800fb80:	e004      	b.n	800fb8c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800fb82:	2301      	movs	r3, #1
 800fb84:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800fb88:	e000      	b.n	800fb8c <USB_ActivateEndpoint+0x7c>
      break;
 800fb8a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	009b      	lsls	r3, r3, #2
 800fb94:	441a      	add	r2, r3
 800fb96:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800fb9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fb9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fbaa:	b29b      	uxth	r3, r3
 800fbac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800fbae:	687a      	ldr	r2, [r7, #4]
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	781b      	ldrb	r3, [r3, #0]
 800fbb4:	009b      	lsls	r3, r3, #2
 800fbb6:	4413      	add	r3, r2
 800fbb8:	881b      	ldrh	r3, [r3, #0]
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	b21b      	sxth	r3, r3
 800fbbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fbc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fbc6:	b21a      	sxth	r2, r3
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	781b      	ldrb	r3, [r3, #0]
 800fbcc:	b21b      	sxth	r3, r3
 800fbce:	4313      	orrs	r3, r2
 800fbd0:	b21b      	sxth	r3, r3
 800fbd2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800fbd6:	687a      	ldr	r2, [r7, #4]
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	781b      	ldrb	r3, [r3, #0]
 800fbdc:	009b      	lsls	r3, r3, #2
 800fbde:	441a      	add	r2, r3
 800fbe0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800fbe4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fbe8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fbec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fbf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fbf4:	b29b      	uxth	r3, r3
 800fbf6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	7b1b      	ldrb	r3, [r3, #12]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	f040 8180 	bne.w	800ff02 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	785b      	ldrb	r3, [r3, #1]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	f000 8084 	beq.w	800fd14 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	61bb      	str	r3, [r7, #24]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	461a      	mov	r2, r3
 800fc1a:	69bb      	ldr	r3, [r7, #24]
 800fc1c:	4413      	add	r3, r2
 800fc1e:	61bb      	str	r3, [r7, #24]
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	781b      	ldrb	r3, [r3, #0]
 800fc24:	00da      	lsls	r2, r3, #3
 800fc26:	69bb      	ldr	r3, [r7, #24]
 800fc28:	4413      	add	r3, r2
 800fc2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fc2e:	617b      	str	r3, [r7, #20]
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	88db      	ldrh	r3, [r3, #6]
 800fc34:	085b      	lsrs	r3, r3, #1
 800fc36:	b29b      	uxth	r3, r3
 800fc38:	005b      	lsls	r3, r3, #1
 800fc3a:	b29a      	uxth	r2, r3
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fc40:	687a      	ldr	r2, [r7, #4]
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	009b      	lsls	r3, r3, #2
 800fc48:	4413      	add	r3, r2
 800fc4a:	881b      	ldrh	r3, [r3, #0]
 800fc4c:	827b      	strh	r3, [r7, #18]
 800fc4e:	8a7b      	ldrh	r3, [r7, #18]
 800fc50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d01b      	beq.n	800fc90 <USB_ActivateEndpoint+0x180>
 800fc58:	687a      	ldr	r2, [r7, #4]
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	781b      	ldrb	r3, [r3, #0]
 800fc5e:	009b      	lsls	r3, r3, #2
 800fc60:	4413      	add	r3, r2
 800fc62:	881b      	ldrh	r3, [r3, #0]
 800fc64:	b29b      	uxth	r3, r3
 800fc66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fc6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fc6e:	823b      	strh	r3, [r7, #16]
 800fc70:	687a      	ldr	r2, [r7, #4]
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	781b      	ldrb	r3, [r3, #0]
 800fc76:	009b      	lsls	r3, r3, #2
 800fc78:	441a      	add	r2, r3
 800fc7a:	8a3b      	ldrh	r3, [r7, #16]
 800fc7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fc80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fc84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fc88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	78db      	ldrb	r3, [r3, #3]
 800fc94:	2b01      	cmp	r3, #1
 800fc96:	d020      	beq.n	800fcda <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fc98:	687a      	ldr	r2, [r7, #4]
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	781b      	ldrb	r3, [r3, #0]
 800fc9e:	009b      	lsls	r3, r3, #2
 800fca0:	4413      	add	r3, r2
 800fca2:	881b      	ldrh	r3, [r3, #0]
 800fca4:	b29b      	uxth	r3, r3
 800fca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fcaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fcae:	81bb      	strh	r3, [r7, #12]
 800fcb0:	89bb      	ldrh	r3, [r7, #12]
 800fcb2:	f083 0320 	eor.w	r3, r3, #32
 800fcb6:	81bb      	strh	r3, [r7, #12]
 800fcb8:	687a      	ldr	r2, [r7, #4]
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	009b      	lsls	r3, r3, #2
 800fcc0:	441a      	add	r2, r3
 800fcc2:	89bb      	ldrh	r3, [r7, #12]
 800fcc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fcc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fccc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fcd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fcd4:	b29b      	uxth	r3, r3
 800fcd6:	8013      	strh	r3, [r2, #0]
 800fcd8:	e3f9      	b.n	80104ce <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fcda:	687a      	ldr	r2, [r7, #4]
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	009b      	lsls	r3, r3, #2
 800fce2:	4413      	add	r3, r2
 800fce4:	881b      	ldrh	r3, [r3, #0]
 800fce6:	b29b      	uxth	r3, r3
 800fce8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fcec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fcf0:	81fb      	strh	r3, [r7, #14]
 800fcf2:	687a      	ldr	r2, [r7, #4]
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	781b      	ldrb	r3, [r3, #0]
 800fcf8:	009b      	lsls	r3, r3, #2
 800fcfa:	441a      	add	r2, r3
 800fcfc:	89fb      	ldrh	r3, [r7, #14]
 800fcfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fd02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fd06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fd0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd0e:	b29b      	uxth	r3, r3
 800fd10:	8013      	strh	r3, [r2, #0]
 800fd12:	e3dc      	b.n	80104ce <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	633b      	str	r3, [r7, #48]	@ 0x30
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fd1e:	b29b      	uxth	r3, r3
 800fd20:	461a      	mov	r2, r3
 800fd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd24:	4413      	add	r3, r2
 800fd26:	633b      	str	r3, [r7, #48]	@ 0x30
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	781b      	ldrb	r3, [r3, #0]
 800fd2c:	00da      	lsls	r2, r3, #3
 800fd2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd30:	4413      	add	r3, r2
 800fd32:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800fd36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	88db      	ldrh	r3, [r3, #6]
 800fd3c:	085b      	lsrs	r3, r3, #1
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	005b      	lsls	r3, r3, #1
 800fd42:	b29a      	uxth	r2, r3
 800fd44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd46:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	461a      	mov	r2, r3
 800fd56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd58:	4413      	add	r3, r2
 800fd5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	781b      	ldrb	r3, [r3, #0]
 800fd60:	00da      	lsls	r2, r3, #3
 800fd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd64:	4413      	add	r3, r2
 800fd66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800fd6a:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd6e:	881b      	ldrh	r3, [r3, #0]
 800fd70:	b29b      	uxth	r3, r3
 800fd72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fd76:	b29a      	uxth	r2, r3
 800fd78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd7a:	801a      	strh	r2, [r3, #0]
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	691b      	ldr	r3, [r3, #16]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d10a      	bne.n	800fd9a <USB_ActivateEndpoint+0x28a>
 800fd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd86:	881b      	ldrh	r3, [r3, #0]
 800fd88:	b29b      	uxth	r3, r3
 800fd8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd92:	b29a      	uxth	r2, r3
 800fd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd96:	801a      	strh	r2, [r3, #0]
 800fd98:	e041      	b.n	800fe1e <USB_ActivateEndpoint+0x30e>
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	691b      	ldr	r3, [r3, #16]
 800fd9e:	2b3e      	cmp	r3, #62	@ 0x3e
 800fda0:	d81c      	bhi.n	800fddc <USB_ActivateEndpoint+0x2cc>
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	691b      	ldr	r3, [r3, #16]
 800fda6:	085b      	lsrs	r3, r3, #1
 800fda8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	691b      	ldr	r3, [r3, #16]
 800fdb0:	f003 0301 	and.w	r3, r3, #1
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d004      	beq.n	800fdc2 <USB_ActivateEndpoint+0x2b2>
 800fdb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fdbc:	3301      	adds	r3, #1
 800fdbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fdc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdc4:	881b      	ldrh	r3, [r3, #0]
 800fdc6:	b29a      	uxth	r2, r3
 800fdc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	029b      	lsls	r3, r3, #10
 800fdd0:	b29b      	uxth	r3, r3
 800fdd2:	4313      	orrs	r3, r2
 800fdd4:	b29a      	uxth	r2, r3
 800fdd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdd8:	801a      	strh	r2, [r3, #0]
 800fdda:	e020      	b.n	800fe1e <USB_ActivateEndpoint+0x30e>
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	691b      	ldr	r3, [r3, #16]
 800fde0:	095b      	lsrs	r3, r3, #5
 800fde2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	691b      	ldr	r3, [r3, #16]
 800fdea:	f003 031f 	and.w	r3, r3, #31
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d104      	bne.n	800fdfc <USB_ActivateEndpoint+0x2ec>
 800fdf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fdf6:	3b01      	subs	r3, #1
 800fdf8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fdfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdfe:	881b      	ldrh	r3, [r3, #0]
 800fe00:	b29a      	uxth	r2, r3
 800fe02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fe06:	b29b      	uxth	r3, r3
 800fe08:	029b      	lsls	r3, r3, #10
 800fe0a:	b29b      	uxth	r3, r3
 800fe0c:	4313      	orrs	r3, r2
 800fe0e:	b29b      	uxth	r3, r3
 800fe10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe18:	b29a      	uxth	r2, r3
 800fe1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe1c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fe1e:	687a      	ldr	r2, [r7, #4]
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	009b      	lsls	r3, r3, #2
 800fe26:	4413      	add	r3, r2
 800fe28:	881b      	ldrh	r3, [r3, #0]
 800fe2a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800fe2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fe2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d01b      	beq.n	800fe6e <USB_ActivateEndpoint+0x35e>
 800fe36:	687a      	ldr	r2, [r7, #4]
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	781b      	ldrb	r3, [r3, #0]
 800fe3c:	009b      	lsls	r3, r3, #2
 800fe3e:	4413      	add	r3, r2
 800fe40:	881b      	ldrh	r3, [r3, #0]
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fe48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe4c:	843b      	strh	r3, [r7, #32]
 800fe4e:	687a      	ldr	r2, [r7, #4]
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	009b      	lsls	r3, r3, #2
 800fe56:	441a      	add	r2, r3
 800fe58:	8c3b      	ldrh	r3, [r7, #32]
 800fe5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fe5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fe62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fe66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe6a:	b29b      	uxth	r3, r3
 800fe6c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	781b      	ldrb	r3, [r3, #0]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d124      	bne.n	800fec0 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	009b      	lsls	r3, r3, #2
 800fe7e:	4413      	add	r3, r2
 800fe80:	881b      	ldrh	r3, [r3, #0]
 800fe82:	b29b      	uxth	r3, r3
 800fe84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fe88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe8c:	83bb      	strh	r3, [r7, #28]
 800fe8e:	8bbb      	ldrh	r3, [r7, #28]
 800fe90:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800fe94:	83bb      	strh	r3, [r7, #28]
 800fe96:	8bbb      	ldrh	r3, [r7, #28]
 800fe98:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800fe9c:	83bb      	strh	r3, [r7, #28]
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	009b      	lsls	r3, r3, #2
 800fea6:	441a      	add	r2, r3
 800fea8:	8bbb      	ldrh	r3, [r7, #28]
 800feaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800feae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800feb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800feb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800feba:	b29b      	uxth	r3, r3
 800febc:	8013      	strh	r3, [r2, #0]
 800febe:	e306      	b.n	80104ce <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800fec0:	687a      	ldr	r2, [r7, #4]
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	009b      	lsls	r3, r3, #2
 800fec8:	4413      	add	r3, r2
 800feca:	881b      	ldrh	r3, [r3, #0]
 800fecc:	b29b      	uxth	r3, r3
 800fece:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fed6:	83fb      	strh	r3, [r7, #30]
 800fed8:	8bfb      	ldrh	r3, [r7, #30]
 800feda:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800fede:	83fb      	strh	r3, [r7, #30]
 800fee0:	687a      	ldr	r2, [r7, #4]
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	009b      	lsls	r3, r3, #2
 800fee8:	441a      	add	r2, r3
 800feea:	8bfb      	ldrh	r3, [r7, #30]
 800feec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fef0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fef4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fefc:	b29b      	uxth	r3, r3
 800fefe:	8013      	strh	r3, [r2, #0]
 800ff00:	e2e5      	b.n	80104ce <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	78db      	ldrb	r3, [r3, #3]
 800ff06:	2b02      	cmp	r3, #2
 800ff08:	d11e      	bne.n	800ff48 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ff0a:	687a      	ldr	r2, [r7, #4]
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	009b      	lsls	r3, r3, #2
 800ff12:	4413      	add	r3, r2
 800ff14:	881b      	ldrh	r3, [r3, #0]
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ff1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ff20:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	781b      	ldrb	r3, [r3, #0]
 800ff2a:	009b      	lsls	r3, r3, #2
 800ff2c:	441a      	add	r2, r3
 800ff2e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800ff32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ff36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ff3a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ff3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff42:	b29b      	uxth	r3, r3
 800ff44:	8013      	strh	r3, [r2, #0]
 800ff46:	e01d      	b.n	800ff84 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ff48:	687a      	ldr	r2, [r7, #4]
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	781b      	ldrb	r3, [r3, #0]
 800ff4e:	009b      	lsls	r3, r3, #2
 800ff50:	4413      	add	r3, r2
 800ff52:	881b      	ldrh	r3, [r3, #0]
 800ff54:	b29b      	uxth	r3, r3
 800ff56:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ff5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ff5e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800ff62:	687a      	ldr	r2, [r7, #4]
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	009b      	lsls	r3, r3, #2
 800ff6a:	441a      	add	r2, r3
 800ff6c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800ff70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ff74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ff78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ff7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff80:	b29b      	uxth	r3, r3
 800ff82:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ff8e:	b29b      	uxth	r3, r3
 800ff90:	461a      	mov	r2, r3
 800ff92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ff94:	4413      	add	r3, r2
 800ff96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	00da      	lsls	r2, r3, #3
 800ff9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ffa0:	4413      	add	r3, r2
 800ffa2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ffa6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	891b      	ldrh	r3, [r3, #8]
 800ffac:	085b      	lsrs	r3, r3, #1
 800ffae:	b29b      	uxth	r3, r3
 800ffb0:	005b      	lsls	r3, r3, #1
 800ffb2:	b29a      	uxth	r2, r3
 800ffb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ffb6:	801a      	strh	r2, [r3, #0]
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	677b      	str	r3, [r7, #116]	@ 0x74
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ffc2:	b29b      	uxth	r3, r3
 800ffc4:	461a      	mov	r2, r3
 800ffc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ffc8:	4413      	add	r3, r2
 800ffca:	677b      	str	r3, [r7, #116]	@ 0x74
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	781b      	ldrb	r3, [r3, #0]
 800ffd0:	00da      	lsls	r2, r3, #3
 800ffd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ffd4:	4413      	add	r3, r2
 800ffd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ffda:	673b      	str	r3, [r7, #112]	@ 0x70
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	895b      	ldrh	r3, [r3, #10]
 800ffe0:	085b      	lsrs	r3, r3, #1
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	005b      	lsls	r3, r3, #1
 800ffe6:	b29a      	uxth	r2, r3
 800ffe8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ffea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	785b      	ldrb	r3, [r3, #1]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	f040 81af 	bne.w	8010354 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	009b      	lsls	r3, r3, #2
 800fffe:	4413      	add	r3, r2
 8010000:	881b      	ldrh	r3, [r3, #0]
 8010002:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8010006:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 801000a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801000e:	2b00      	cmp	r3, #0
 8010010:	d01d      	beq.n	801004e <USB_ActivateEndpoint+0x53e>
 8010012:	687a      	ldr	r2, [r7, #4]
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	009b      	lsls	r3, r3, #2
 801001a:	4413      	add	r3, r2
 801001c:	881b      	ldrh	r3, [r3, #0]
 801001e:	b29b      	uxth	r3, r3
 8010020:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010028:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 801002c:	687a      	ldr	r2, [r7, #4]
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	009b      	lsls	r3, r3, #2
 8010034:	441a      	add	r2, r3
 8010036:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801003a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801003e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010042:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801004a:	b29b      	uxth	r3, r3
 801004c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801004e:	687a      	ldr	r2, [r7, #4]
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	781b      	ldrb	r3, [r3, #0]
 8010054:	009b      	lsls	r3, r3, #2
 8010056:	4413      	add	r3, r2
 8010058:	881b      	ldrh	r3, [r3, #0]
 801005a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 801005e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8010062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010066:	2b00      	cmp	r3, #0
 8010068:	d01d      	beq.n	80100a6 <USB_ActivateEndpoint+0x596>
 801006a:	687a      	ldr	r2, [r7, #4]
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	781b      	ldrb	r3, [r3, #0]
 8010070:	009b      	lsls	r3, r3, #2
 8010072:	4413      	add	r3, r2
 8010074:	881b      	ldrh	r3, [r3, #0]
 8010076:	b29b      	uxth	r3, r3
 8010078:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801007c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010080:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	781b      	ldrb	r3, [r3, #0]
 801008a:	009b      	lsls	r3, r3, #2
 801008c:	441a      	add	r2, r3
 801008e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8010092:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010096:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801009a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801009e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80100a2:	b29b      	uxth	r3, r3
 80100a4:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	785b      	ldrb	r3, [r3, #1]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d16b      	bne.n	8010186 <USB_ActivateEndpoint+0x676>
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80100b8:	b29b      	uxth	r3, r3
 80100ba:	461a      	mov	r2, r3
 80100bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80100be:	4413      	add	r3, r2
 80100c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	781b      	ldrb	r3, [r3, #0]
 80100c6:	00da      	lsls	r2, r3, #3
 80100c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80100ca:	4413      	add	r3, r2
 80100cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80100d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80100d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80100d4:	881b      	ldrh	r3, [r3, #0]
 80100d6:	b29b      	uxth	r3, r3
 80100d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80100dc:	b29a      	uxth	r2, r3
 80100de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80100e0:	801a      	strh	r2, [r3, #0]
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	691b      	ldr	r3, [r3, #16]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d10a      	bne.n	8010100 <USB_ActivateEndpoint+0x5f0>
 80100ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80100ec:	881b      	ldrh	r3, [r3, #0]
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80100f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80100f8:	b29a      	uxth	r2, r3
 80100fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80100fc:	801a      	strh	r2, [r3, #0]
 80100fe:	e05d      	b.n	80101bc <USB_ActivateEndpoint+0x6ac>
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	691b      	ldr	r3, [r3, #16]
 8010104:	2b3e      	cmp	r3, #62	@ 0x3e
 8010106:	d81c      	bhi.n	8010142 <USB_ActivateEndpoint+0x632>
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	691b      	ldr	r3, [r3, #16]
 801010c:	085b      	lsrs	r3, r3, #1
 801010e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	691b      	ldr	r3, [r3, #16]
 8010116:	f003 0301 	and.w	r3, r3, #1
 801011a:	2b00      	cmp	r3, #0
 801011c:	d004      	beq.n	8010128 <USB_ActivateEndpoint+0x618>
 801011e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010122:	3301      	adds	r3, #1
 8010124:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010128:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801012a:	881b      	ldrh	r3, [r3, #0]
 801012c:	b29a      	uxth	r2, r3
 801012e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010132:	b29b      	uxth	r3, r3
 8010134:	029b      	lsls	r3, r3, #10
 8010136:	b29b      	uxth	r3, r3
 8010138:	4313      	orrs	r3, r2
 801013a:	b29a      	uxth	r2, r3
 801013c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801013e:	801a      	strh	r2, [r3, #0]
 8010140:	e03c      	b.n	80101bc <USB_ActivateEndpoint+0x6ac>
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	691b      	ldr	r3, [r3, #16]
 8010146:	095b      	lsrs	r3, r3, #5
 8010148:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	691b      	ldr	r3, [r3, #16]
 8010150:	f003 031f 	and.w	r3, r3, #31
 8010154:	2b00      	cmp	r3, #0
 8010156:	d104      	bne.n	8010162 <USB_ActivateEndpoint+0x652>
 8010158:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801015c:	3b01      	subs	r3, #1
 801015e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010164:	881b      	ldrh	r3, [r3, #0]
 8010166:	b29a      	uxth	r2, r3
 8010168:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801016c:	b29b      	uxth	r3, r3
 801016e:	029b      	lsls	r3, r3, #10
 8010170:	b29b      	uxth	r3, r3
 8010172:	4313      	orrs	r3, r2
 8010174:	b29b      	uxth	r3, r3
 8010176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801017a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801017e:	b29a      	uxth	r2, r3
 8010180:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010182:	801a      	strh	r2, [r3, #0]
 8010184:	e01a      	b.n	80101bc <USB_ActivateEndpoint+0x6ac>
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	785b      	ldrb	r3, [r3, #1]
 801018a:	2b01      	cmp	r3, #1
 801018c:	d116      	bne.n	80101bc <USB_ActivateEndpoint+0x6ac>
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	657b      	str	r3, [r7, #84]	@ 0x54
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010198:	b29b      	uxth	r3, r3
 801019a:	461a      	mov	r2, r3
 801019c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801019e:	4413      	add	r3, r2
 80101a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	00da      	lsls	r2, r3, #3
 80101a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80101aa:	4413      	add	r3, r2
 80101ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80101b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	691b      	ldr	r3, [r3, #16]
 80101b6:	b29a      	uxth	r2, r3
 80101b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80101ba:	801a      	strh	r2, [r3, #0]
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	647b      	str	r3, [r7, #68]	@ 0x44
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	785b      	ldrb	r3, [r3, #1]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d16b      	bne.n	80102a0 <USB_ActivateEndpoint+0x790>
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80101d2:	b29b      	uxth	r3, r3
 80101d4:	461a      	mov	r2, r3
 80101d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101d8:	4413      	add	r3, r2
 80101da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	781b      	ldrb	r3, [r3, #0]
 80101e0:	00da      	lsls	r2, r3, #3
 80101e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101e4:	4413      	add	r3, r2
 80101e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80101ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80101ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101ee:	881b      	ldrh	r3, [r3, #0]
 80101f0:	b29b      	uxth	r3, r3
 80101f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80101f6:	b29a      	uxth	r2, r3
 80101f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101fa:	801a      	strh	r2, [r3, #0]
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	691b      	ldr	r3, [r3, #16]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d10a      	bne.n	801021a <USB_ActivateEndpoint+0x70a>
 8010204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010206:	881b      	ldrh	r3, [r3, #0]
 8010208:	b29b      	uxth	r3, r3
 801020a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801020e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010212:	b29a      	uxth	r2, r3
 8010214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010216:	801a      	strh	r2, [r3, #0]
 8010218:	e05b      	b.n	80102d2 <USB_ActivateEndpoint+0x7c2>
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	691b      	ldr	r3, [r3, #16]
 801021e:	2b3e      	cmp	r3, #62	@ 0x3e
 8010220:	d81c      	bhi.n	801025c <USB_ActivateEndpoint+0x74c>
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	691b      	ldr	r3, [r3, #16]
 8010226:	085b      	lsrs	r3, r3, #1
 8010228:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	691b      	ldr	r3, [r3, #16]
 8010230:	f003 0301 	and.w	r3, r3, #1
 8010234:	2b00      	cmp	r3, #0
 8010236:	d004      	beq.n	8010242 <USB_ActivateEndpoint+0x732>
 8010238:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801023c:	3301      	adds	r3, #1
 801023e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010244:	881b      	ldrh	r3, [r3, #0]
 8010246:	b29a      	uxth	r2, r3
 8010248:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801024c:	b29b      	uxth	r3, r3
 801024e:	029b      	lsls	r3, r3, #10
 8010250:	b29b      	uxth	r3, r3
 8010252:	4313      	orrs	r3, r2
 8010254:	b29a      	uxth	r2, r3
 8010256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010258:	801a      	strh	r2, [r3, #0]
 801025a:	e03a      	b.n	80102d2 <USB_ActivateEndpoint+0x7c2>
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	691b      	ldr	r3, [r3, #16]
 8010260:	095b      	lsrs	r3, r3, #5
 8010262:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	691b      	ldr	r3, [r3, #16]
 801026a:	f003 031f 	and.w	r3, r3, #31
 801026e:	2b00      	cmp	r3, #0
 8010270:	d104      	bne.n	801027c <USB_ActivateEndpoint+0x76c>
 8010272:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010276:	3b01      	subs	r3, #1
 8010278:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801027c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801027e:	881b      	ldrh	r3, [r3, #0]
 8010280:	b29a      	uxth	r2, r3
 8010282:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010286:	b29b      	uxth	r3, r3
 8010288:	029b      	lsls	r3, r3, #10
 801028a:	b29b      	uxth	r3, r3
 801028c:	4313      	orrs	r3, r2
 801028e:	b29b      	uxth	r3, r3
 8010290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010298:	b29a      	uxth	r2, r3
 801029a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801029c:	801a      	strh	r2, [r3, #0]
 801029e:	e018      	b.n	80102d2 <USB_ActivateEndpoint+0x7c2>
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	785b      	ldrb	r3, [r3, #1]
 80102a4:	2b01      	cmp	r3, #1
 80102a6:	d114      	bne.n	80102d2 <USB_ActivateEndpoint+0x7c2>
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80102ae:	b29b      	uxth	r3, r3
 80102b0:	461a      	mov	r2, r3
 80102b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102b4:	4413      	add	r3, r2
 80102b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	781b      	ldrb	r3, [r3, #0]
 80102bc:	00da      	lsls	r2, r3, #3
 80102be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102c0:	4413      	add	r3, r2
 80102c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80102c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	691b      	ldr	r3, [r3, #16]
 80102cc:	b29a      	uxth	r2, r3
 80102ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80102d0:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80102d2:	687a      	ldr	r2, [r7, #4]
 80102d4:	683b      	ldr	r3, [r7, #0]
 80102d6:	781b      	ldrb	r3, [r3, #0]
 80102d8:	009b      	lsls	r3, r3, #2
 80102da:	4413      	add	r3, r2
 80102dc:	881b      	ldrh	r3, [r3, #0]
 80102de:	b29b      	uxth	r3, r3
 80102e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80102e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80102e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80102ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80102ec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80102f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80102f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80102f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80102f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80102fa:	687a      	ldr	r2, [r7, #4]
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	781b      	ldrb	r3, [r3, #0]
 8010300:	009b      	lsls	r3, r3, #2
 8010302:	441a      	add	r2, r3
 8010304:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801030a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801030e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010316:	b29b      	uxth	r3, r3
 8010318:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801031a:	687a      	ldr	r2, [r7, #4]
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	781b      	ldrb	r3, [r3, #0]
 8010320:	009b      	lsls	r3, r3, #2
 8010322:	4413      	add	r3, r2
 8010324:	881b      	ldrh	r3, [r3, #0]
 8010326:	b29b      	uxth	r3, r3
 8010328:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801032c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010330:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8010332:	687a      	ldr	r2, [r7, #4]
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	781b      	ldrb	r3, [r3, #0]
 8010338:	009b      	lsls	r3, r3, #2
 801033a:	441a      	add	r2, r3
 801033c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801033e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010342:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801034a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801034e:	b29b      	uxth	r3, r3
 8010350:	8013      	strh	r3, [r2, #0]
 8010352:	e0bc      	b.n	80104ce <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010354:	687a      	ldr	r2, [r7, #4]
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	781b      	ldrb	r3, [r3, #0]
 801035a:	009b      	lsls	r3, r3, #2
 801035c:	4413      	add	r3, r2
 801035e:	881b      	ldrh	r3, [r3, #0]
 8010360:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8010364:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010368:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801036c:	2b00      	cmp	r3, #0
 801036e:	d01d      	beq.n	80103ac <USB_ActivateEndpoint+0x89c>
 8010370:	687a      	ldr	r2, [r7, #4]
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	009b      	lsls	r3, r3, #2
 8010378:	4413      	add	r3, r2
 801037a:	881b      	ldrh	r3, [r3, #0]
 801037c:	b29b      	uxth	r3, r3
 801037e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010386:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 801038a:	687a      	ldr	r2, [r7, #4]
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	009b      	lsls	r3, r3, #2
 8010392:	441a      	add	r2, r3
 8010394:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010398:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801039c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80103a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80103a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80103a8:	b29b      	uxth	r3, r3
 80103aa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80103ac:	687a      	ldr	r2, [r7, #4]
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	781b      	ldrb	r3, [r3, #0]
 80103b2:	009b      	lsls	r3, r3, #2
 80103b4:	4413      	add	r3, r2
 80103b6:	881b      	ldrh	r3, [r3, #0]
 80103b8:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80103bc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80103c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d01d      	beq.n	8010404 <USB_ActivateEndpoint+0x8f4>
 80103c8:	687a      	ldr	r2, [r7, #4]
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	009b      	lsls	r3, r3, #2
 80103d0:	4413      	add	r3, r2
 80103d2:	881b      	ldrh	r3, [r3, #0]
 80103d4:	b29b      	uxth	r3, r3
 80103d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80103da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80103de:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80103e2:	687a      	ldr	r2, [r7, #4]
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	781b      	ldrb	r3, [r3, #0]
 80103e8:	009b      	lsls	r3, r3, #2
 80103ea:	441a      	add	r2, r3
 80103ec:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80103f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80103f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80103f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80103fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010400:	b29b      	uxth	r3, r3
 8010402:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	78db      	ldrb	r3, [r3, #3]
 8010408:	2b01      	cmp	r3, #1
 801040a:	d024      	beq.n	8010456 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801040c:	687a      	ldr	r2, [r7, #4]
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	009b      	lsls	r3, r3, #2
 8010414:	4413      	add	r3, r2
 8010416:	881b      	ldrh	r3, [r3, #0]
 8010418:	b29b      	uxth	r3, r3
 801041a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801041e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010422:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8010426:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 801042a:	f083 0320 	eor.w	r3, r3, #32
 801042e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8010432:	687a      	ldr	r2, [r7, #4]
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	009b      	lsls	r3, r3, #2
 801043a:	441a      	add	r2, r3
 801043c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010440:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010444:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010448:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801044c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010450:	b29b      	uxth	r3, r3
 8010452:	8013      	strh	r3, [r2, #0]
 8010454:	e01d      	b.n	8010492 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	009b      	lsls	r3, r3, #2
 801045e:	4413      	add	r3, r2
 8010460:	881b      	ldrh	r3, [r3, #0]
 8010462:	b29b      	uxth	r3, r3
 8010464:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010468:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801046c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8010470:	687a      	ldr	r2, [r7, #4]
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	009b      	lsls	r3, r3, #2
 8010478:	441a      	add	r2, r3
 801047a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 801047e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010482:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010486:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801048a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801048e:	b29b      	uxth	r3, r3
 8010490:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010492:	687a      	ldr	r2, [r7, #4]
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	009b      	lsls	r3, r3, #2
 801049a:	4413      	add	r3, r2
 801049c:	881b      	ldrh	r3, [r3, #0]
 801049e:	b29b      	uxth	r3, r3
 80104a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80104a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80104a8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80104ac:	687a      	ldr	r2, [r7, #4]
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	009b      	lsls	r3, r3, #2
 80104b4:	441a      	add	r2, r3
 80104b6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80104ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80104be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80104c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80104c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104ca:	b29b      	uxth	r3, r3
 80104cc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80104ce:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	379c      	adds	r7, #156	@ 0x9c
 80104d6:	46bd      	mov	sp, r7
 80104d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104dc:	4770      	bx	lr
 80104de:	bf00      	nop

080104e0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80104e0:	b480      	push	{r7}
 80104e2:	b08d      	sub	sp, #52	@ 0x34
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
 80104e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	7b1b      	ldrb	r3, [r3, #12]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	f040 808e 	bne.w	8010610 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	785b      	ldrb	r3, [r3, #1]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d044      	beq.n	8010586 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80104fc:	687a      	ldr	r2, [r7, #4]
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	009b      	lsls	r3, r3, #2
 8010504:	4413      	add	r3, r2
 8010506:	881b      	ldrh	r3, [r3, #0]
 8010508:	81bb      	strh	r3, [r7, #12]
 801050a:	89bb      	ldrh	r3, [r7, #12]
 801050c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010510:	2b00      	cmp	r3, #0
 8010512:	d01b      	beq.n	801054c <USB_DeactivateEndpoint+0x6c>
 8010514:	687a      	ldr	r2, [r7, #4]
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	781b      	ldrb	r3, [r3, #0]
 801051a:	009b      	lsls	r3, r3, #2
 801051c:	4413      	add	r3, r2
 801051e:	881b      	ldrh	r3, [r3, #0]
 8010520:	b29b      	uxth	r3, r3
 8010522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801052a:	817b      	strh	r3, [r7, #10]
 801052c:	687a      	ldr	r2, [r7, #4]
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	009b      	lsls	r3, r3, #2
 8010534:	441a      	add	r2, r3
 8010536:	897b      	ldrh	r3, [r7, #10]
 8010538:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801053c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010540:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010544:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010548:	b29b      	uxth	r3, r3
 801054a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801054c:	687a      	ldr	r2, [r7, #4]
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	781b      	ldrb	r3, [r3, #0]
 8010552:	009b      	lsls	r3, r3, #2
 8010554:	4413      	add	r3, r2
 8010556:	881b      	ldrh	r3, [r3, #0]
 8010558:	b29b      	uxth	r3, r3
 801055a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801055e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010562:	813b      	strh	r3, [r7, #8]
 8010564:	687a      	ldr	r2, [r7, #4]
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	781b      	ldrb	r3, [r3, #0]
 801056a:	009b      	lsls	r3, r3, #2
 801056c:	441a      	add	r2, r3
 801056e:	893b      	ldrh	r3, [r7, #8]
 8010570:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010574:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010578:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801057c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010580:	b29b      	uxth	r3, r3
 8010582:	8013      	strh	r3, [r2, #0]
 8010584:	e192      	b.n	80108ac <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	781b      	ldrb	r3, [r3, #0]
 801058c:	009b      	lsls	r3, r3, #2
 801058e:	4413      	add	r3, r2
 8010590:	881b      	ldrh	r3, [r3, #0]
 8010592:	827b      	strh	r3, [r7, #18]
 8010594:	8a7b      	ldrh	r3, [r7, #18]
 8010596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801059a:	2b00      	cmp	r3, #0
 801059c:	d01b      	beq.n	80105d6 <USB_DeactivateEndpoint+0xf6>
 801059e:	687a      	ldr	r2, [r7, #4]
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	781b      	ldrb	r3, [r3, #0]
 80105a4:	009b      	lsls	r3, r3, #2
 80105a6:	4413      	add	r3, r2
 80105a8:	881b      	ldrh	r3, [r3, #0]
 80105aa:	b29b      	uxth	r3, r3
 80105ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80105b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80105b4:	823b      	strh	r3, [r7, #16]
 80105b6:	687a      	ldr	r2, [r7, #4]
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	781b      	ldrb	r3, [r3, #0]
 80105bc:	009b      	lsls	r3, r3, #2
 80105be:	441a      	add	r2, r3
 80105c0:	8a3b      	ldrh	r3, [r7, #16]
 80105c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80105c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80105ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80105ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80105d2:	b29b      	uxth	r3, r3
 80105d4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80105d6:	687a      	ldr	r2, [r7, #4]
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	009b      	lsls	r3, r3, #2
 80105de:	4413      	add	r3, r2
 80105e0:	881b      	ldrh	r3, [r3, #0]
 80105e2:	b29b      	uxth	r3, r3
 80105e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80105e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80105ec:	81fb      	strh	r3, [r7, #14]
 80105ee:	687a      	ldr	r2, [r7, #4]
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	009b      	lsls	r3, r3, #2
 80105f6:	441a      	add	r2, r3
 80105f8:	89fb      	ldrh	r3, [r7, #14]
 80105fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80105fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801060a:	b29b      	uxth	r3, r3
 801060c:	8013      	strh	r3, [r2, #0]
 801060e:	e14d      	b.n	80108ac <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	785b      	ldrb	r3, [r3, #1]
 8010614:	2b00      	cmp	r3, #0
 8010616:	f040 80a5 	bne.w	8010764 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801061a:	687a      	ldr	r2, [r7, #4]
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	009b      	lsls	r3, r3, #2
 8010622:	4413      	add	r3, r2
 8010624:	881b      	ldrh	r3, [r3, #0]
 8010626:	843b      	strh	r3, [r7, #32]
 8010628:	8c3b      	ldrh	r3, [r7, #32]
 801062a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801062e:	2b00      	cmp	r3, #0
 8010630:	d01b      	beq.n	801066a <USB_DeactivateEndpoint+0x18a>
 8010632:	687a      	ldr	r2, [r7, #4]
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	009b      	lsls	r3, r3, #2
 801063a:	4413      	add	r3, r2
 801063c:	881b      	ldrh	r3, [r3, #0]
 801063e:	b29b      	uxth	r3, r3
 8010640:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010648:	83fb      	strh	r3, [r7, #30]
 801064a:	687a      	ldr	r2, [r7, #4]
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	009b      	lsls	r3, r3, #2
 8010652:	441a      	add	r2, r3
 8010654:	8bfb      	ldrh	r3, [r7, #30]
 8010656:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801065a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801065e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010666:	b29b      	uxth	r3, r3
 8010668:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801066a:	687a      	ldr	r2, [r7, #4]
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	009b      	lsls	r3, r3, #2
 8010672:	4413      	add	r3, r2
 8010674:	881b      	ldrh	r3, [r3, #0]
 8010676:	83bb      	strh	r3, [r7, #28]
 8010678:	8bbb      	ldrh	r3, [r7, #28]
 801067a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801067e:	2b00      	cmp	r3, #0
 8010680:	d01b      	beq.n	80106ba <USB_DeactivateEndpoint+0x1da>
 8010682:	687a      	ldr	r2, [r7, #4]
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	009b      	lsls	r3, r3, #2
 801068a:	4413      	add	r3, r2
 801068c:	881b      	ldrh	r3, [r3, #0]
 801068e:	b29b      	uxth	r3, r3
 8010690:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010698:	837b      	strh	r3, [r7, #26]
 801069a:	687a      	ldr	r2, [r7, #4]
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	009b      	lsls	r3, r3, #2
 80106a2:	441a      	add	r2, r3
 80106a4:	8b7b      	ldrh	r3, [r7, #26]
 80106a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80106aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80106ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80106b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80106b6:	b29b      	uxth	r3, r3
 80106b8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80106ba:	687a      	ldr	r2, [r7, #4]
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	781b      	ldrb	r3, [r3, #0]
 80106c0:	009b      	lsls	r3, r3, #2
 80106c2:	4413      	add	r3, r2
 80106c4:	881b      	ldrh	r3, [r3, #0]
 80106c6:	b29b      	uxth	r3, r3
 80106c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80106cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80106d0:	833b      	strh	r3, [r7, #24]
 80106d2:	687a      	ldr	r2, [r7, #4]
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	781b      	ldrb	r3, [r3, #0]
 80106d8:	009b      	lsls	r3, r3, #2
 80106da:	441a      	add	r2, r3
 80106dc:	8b3b      	ldrh	r3, [r7, #24]
 80106de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80106e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80106e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80106ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80106ee:	b29b      	uxth	r3, r3
 80106f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80106f2:	687a      	ldr	r2, [r7, #4]
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	009b      	lsls	r3, r3, #2
 80106fa:	4413      	add	r3, r2
 80106fc:	881b      	ldrh	r3, [r3, #0]
 80106fe:	b29b      	uxth	r3, r3
 8010700:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010704:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010708:	82fb      	strh	r3, [r7, #22]
 801070a:	687a      	ldr	r2, [r7, #4]
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	781b      	ldrb	r3, [r3, #0]
 8010710:	009b      	lsls	r3, r3, #2
 8010712:	441a      	add	r2, r3
 8010714:	8afb      	ldrh	r3, [r7, #22]
 8010716:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801071a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801071e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010726:	b29b      	uxth	r3, r3
 8010728:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801072a:	687a      	ldr	r2, [r7, #4]
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	781b      	ldrb	r3, [r3, #0]
 8010730:	009b      	lsls	r3, r3, #2
 8010732:	4413      	add	r3, r2
 8010734:	881b      	ldrh	r3, [r3, #0]
 8010736:	b29b      	uxth	r3, r3
 8010738:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801073c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010740:	82bb      	strh	r3, [r7, #20]
 8010742:	687a      	ldr	r2, [r7, #4]
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	781b      	ldrb	r3, [r3, #0]
 8010748:	009b      	lsls	r3, r3, #2
 801074a:	441a      	add	r2, r3
 801074c:	8abb      	ldrh	r3, [r7, #20]
 801074e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010752:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010756:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801075a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801075e:	b29b      	uxth	r3, r3
 8010760:	8013      	strh	r3, [r2, #0]
 8010762:	e0a3      	b.n	80108ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010764:	687a      	ldr	r2, [r7, #4]
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	781b      	ldrb	r3, [r3, #0]
 801076a:	009b      	lsls	r3, r3, #2
 801076c:	4413      	add	r3, r2
 801076e:	881b      	ldrh	r3, [r3, #0]
 8010770:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8010772:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010778:	2b00      	cmp	r3, #0
 801077a:	d01b      	beq.n	80107b4 <USB_DeactivateEndpoint+0x2d4>
 801077c:	687a      	ldr	r2, [r7, #4]
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	009b      	lsls	r3, r3, #2
 8010784:	4413      	add	r3, r2
 8010786:	881b      	ldrh	r3, [r3, #0]
 8010788:	b29b      	uxth	r3, r3
 801078a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801078e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010792:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	009b      	lsls	r3, r3, #2
 801079c:	441a      	add	r2, r3
 801079e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80107a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80107a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80107a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80107ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80107b0:	b29b      	uxth	r3, r3
 80107b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80107b4:	687a      	ldr	r2, [r7, #4]
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	781b      	ldrb	r3, [r3, #0]
 80107ba:	009b      	lsls	r3, r3, #2
 80107bc:	4413      	add	r3, r2
 80107be:	881b      	ldrh	r3, [r3, #0]
 80107c0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80107c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80107c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d01b      	beq.n	8010804 <USB_DeactivateEndpoint+0x324>
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	781b      	ldrb	r3, [r3, #0]
 80107d2:	009b      	lsls	r3, r3, #2
 80107d4:	4413      	add	r3, r2
 80107d6:	881b      	ldrh	r3, [r3, #0]
 80107d8:	b29b      	uxth	r3, r3
 80107da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80107de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80107e2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80107e4:	687a      	ldr	r2, [r7, #4]
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	781b      	ldrb	r3, [r3, #0]
 80107ea:	009b      	lsls	r3, r3, #2
 80107ec:	441a      	add	r2, r3
 80107ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80107f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80107f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80107f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80107fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010800:	b29b      	uxth	r3, r3
 8010802:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8010804:	687a      	ldr	r2, [r7, #4]
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	781b      	ldrb	r3, [r3, #0]
 801080a:	009b      	lsls	r3, r3, #2
 801080c:	4413      	add	r3, r2
 801080e:	881b      	ldrh	r3, [r3, #0]
 8010810:	b29b      	uxth	r3, r3
 8010812:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801081a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801081c:	687a      	ldr	r2, [r7, #4]
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	009b      	lsls	r3, r3, #2
 8010824:	441a      	add	r2, r3
 8010826:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010828:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801082c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010830:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010838:	b29b      	uxth	r3, r3
 801083a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801083c:	687a      	ldr	r2, [r7, #4]
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	009b      	lsls	r3, r3, #2
 8010844:	4413      	add	r3, r2
 8010846:	881b      	ldrh	r3, [r3, #0]
 8010848:	b29b      	uxth	r3, r3
 801084a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801084e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010852:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8010854:	687a      	ldr	r2, [r7, #4]
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	009b      	lsls	r3, r3, #2
 801085c:	441a      	add	r2, r3
 801085e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010860:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010864:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010868:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801086c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010870:	b29b      	uxth	r3, r3
 8010872:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010874:	687a      	ldr	r2, [r7, #4]
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	009b      	lsls	r3, r3, #2
 801087c:	4413      	add	r3, r2
 801087e:	881b      	ldrh	r3, [r3, #0]
 8010880:	b29b      	uxth	r3, r3
 8010882:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801088a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801088c:	687a      	ldr	r2, [r7, #4]
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	781b      	ldrb	r3, [r3, #0]
 8010892:	009b      	lsls	r3, r3, #2
 8010894:	441a      	add	r2, r3
 8010896:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010898:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801089c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80108a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80108a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80108a8:	b29b      	uxth	r3, r3
 80108aa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80108ac:	2300      	movs	r3, #0
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3734      	adds	r7, #52	@ 0x34
 80108b2:	46bd      	mov	sp, r7
 80108b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b8:	4770      	bx	lr

080108ba <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80108ba:	b580      	push	{r7, lr}
 80108bc:	b0ac      	sub	sp, #176	@ 0xb0
 80108be:	af00      	add	r7, sp, #0
 80108c0:	6078      	str	r0, [r7, #4]
 80108c2:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	785b      	ldrb	r3, [r3, #1]
 80108c8:	2b01      	cmp	r3, #1
 80108ca:	f040 84ca 	bne.w	8011262 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	699a      	ldr	r2, [r3, #24]
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	691b      	ldr	r3, [r3, #16]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d904      	bls.n	80108e4 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	691b      	ldr	r3, [r3, #16]
 80108de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80108e2:	e003      	b.n	80108ec <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	699b      	ldr	r3, [r3, #24]
 80108e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	7b1b      	ldrb	r3, [r3, #12]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d122      	bne.n	801093a <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	6959      	ldr	r1, [r3, #20]
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	88da      	ldrh	r2, [r3, #6]
 80108fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010900:	b29b      	uxth	r3, r3
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f000 febd 	bl	8011682 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	613b      	str	r3, [r7, #16]
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010912:	b29b      	uxth	r3, r3
 8010914:	461a      	mov	r2, r3
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	4413      	add	r3, r2
 801091a:	613b      	str	r3, [r7, #16]
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	781b      	ldrb	r3, [r3, #0]
 8010920:	00da      	lsls	r2, r3, #3
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	4413      	add	r3, r2
 8010926:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801092a:	60fb      	str	r3, [r7, #12]
 801092c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010930:	b29a      	uxth	r2, r3
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	801a      	strh	r2, [r3, #0]
 8010936:	f000 bc6f 	b.w	8011218 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	78db      	ldrb	r3, [r3, #3]
 801093e:	2b02      	cmp	r3, #2
 8010940:	f040 831e 	bne.w	8010f80 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	6a1a      	ldr	r2, [r3, #32]
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	691b      	ldr	r3, [r3, #16]
 801094c:	429a      	cmp	r2, r3
 801094e:	f240 82cf 	bls.w	8010ef0 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010952:	687a      	ldr	r2, [r7, #4]
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	781b      	ldrb	r3, [r3, #0]
 8010958:	009b      	lsls	r3, r3, #2
 801095a:	4413      	add	r3, r2
 801095c:	881b      	ldrh	r3, [r3, #0]
 801095e:	b29b      	uxth	r3, r3
 8010960:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010968:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 801096c:	687a      	ldr	r2, [r7, #4]
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	781b      	ldrb	r3, [r3, #0]
 8010972:	009b      	lsls	r3, r3, #2
 8010974:	441a      	add	r2, r3
 8010976:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 801097a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801097e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010982:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8010986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801098a:	b29b      	uxth	r3, r3
 801098c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801098e:	683b      	ldr	r3, [r7, #0]
 8010990:	6a1a      	ldr	r2, [r3, #32]
 8010992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010996:	1ad2      	subs	r2, r2, r3
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801099c:	687a      	ldr	r2, [r7, #4]
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	781b      	ldrb	r3, [r3, #0]
 80109a2:	009b      	lsls	r3, r3, #2
 80109a4:	4413      	add	r3, r2
 80109a6:	881b      	ldrh	r3, [r3, #0]
 80109a8:	b29b      	uxth	r3, r3
 80109aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	f000 814f 	beq.w	8010c52 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	785b      	ldrb	r3, [r3, #1]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d16b      	bne.n	8010a98 <USB_EPStartXfer+0x1de>
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80109ca:	b29b      	uxth	r3, r3
 80109cc:	461a      	mov	r2, r3
 80109ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109d0:	4413      	add	r3, r2
 80109d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80109d4:	683b      	ldr	r3, [r7, #0]
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	00da      	lsls	r2, r3, #3
 80109da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109dc:	4413      	add	r3, r2
 80109de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80109e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80109e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109e6:	881b      	ldrh	r3, [r3, #0]
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80109ee:	b29a      	uxth	r2, r3
 80109f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109f2:	801a      	strh	r2, [r3, #0]
 80109f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d10a      	bne.n	8010a12 <USB_EPStartXfer+0x158>
 80109fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109fe:	881b      	ldrh	r3, [r3, #0]
 8010a00:	b29b      	uxth	r3, r3
 8010a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a0e:	801a      	strh	r2, [r3, #0]
 8010a10:	e05b      	b.n	8010aca <USB_EPStartXfer+0x210>
 8010a12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010a16:	2b3e      	cmp	r3, #62	@ 0x3e
 8010a18:	d81c      	bhi.n	8010a54 <USB_EPStartXfer+0x19a>
 8010a1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010a1e:	085b      	lsrs	r3, r3, #1
 8010a20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010a24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010a28:	f003 0301 	and.w	r3, r3, #1
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d004      	beq.n	8010a3a <USB_EPStartXfer+0x180>
 8010a30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010a34:	3301      	adds	r3, #1
 8010a36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a3c:	881b      	ldrh	r3, [r3, #0]
 8010a3e:	b29a      	uxth	r2, r3
 8010a40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010a44:	b29b      	uxth	r3, r3
 8010a46:	029b      	lsls	r3, r3, #10
 8010a48:	b29b      	uxth	r3, r3
 8010a4a:	4313      	orrs	r3, r2
 8010a4c:	b29a      	uxth	r2, r3
 8010a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a50:	801a      	strh	r2, [r3, #0]
 8010a52:	e03a      	b.n	8010aca <USB_EPStartXfer+0x210>
 8010a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010a58:	095b      	lsrs	r3, r3, #5
 8010a5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010a62:	f003 031f 	and.w	r3, r3, #31
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d104      	bne.n	8010a74 <USB_EPStartXfer+0x1ba>
 8010a6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010a6e:	3b01      	subs	r3, #1
 8010a70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a76:	881b      	ldrh	r3, [r3, #0]
 8010a78:	b29a      	uxth	r2, r3
 8010a7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010a7e:	b29b      	uxth	r3, r3
 8010a80:	029b      	lsls	r3, r3, #10
 8010a82:	b29b      	uxth	r3, r3
 8010a84:	4313      	orrs	r3, r2
 8010a86:	b29b      	uxth	r3, r3
 8010a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a90:	b29a      	uxth	r2, r3
 8010a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a94:	801a      	strh	r2, [r3, #0]
 8010a96:	e018      	b.n	8010aca <USB_EPStartXfer+0x210>
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	785b      	ldrb	r3, [r3, #1]
 8010a9c:	2b01      	cmp	r3, #1
 8010a9e:	d114      	bne.n	8010aca <USB_EPStartXfer+0x210>
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010aa6:	b29b      	uxth	r3, r3
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aac:	4413      	add	r3, r2
 8010aae:	633b      	str	r3, [r7, #48]	@ 0x30
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	00da      	lsls	r2, r3, #3
 8010ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ab8:	4413      	add	r3, r2
 8010aba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010ac0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ac4:	b29a      	uxth	r2, r3
 8010ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ac8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	895b      	ldrh	r3, [r3, #10]
 8010ace:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	6959      	ldr	r1, [r3, #20]
 8010ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f000 fdce 	bl	8011682 <USB_WritePMA>
            ep->xfer_buff += len;
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	695a      	ldr	r2, [r3, #20]
 8010aea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010aee:	441a      	add	r2, r3
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	6a1a      	ldr	r2, [r3, #32]
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	691b      	ldr	r3, [r3, #16]
 8010afc:	429a      	cmp	r2, r3
 8010afe:	d907      	bls.n	8010b10 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	6a1a      	ldr	r2, [r3, #32]
 8010b04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010b08:	1ad2      	subs	r2, r2, r3
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	621a      	str	r2, [r3, #32]
 8010b0e:	e006      	b.n	8010b1e <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	6a1b      	ldr	r3, [r3, #32]
 8010b14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	785b      	ldrb	r3, [r3, #1]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d16b      	bne.n	8010bfe <USB_EPStartXfer+0x344>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	61bb      	str	r3, [r7, #24]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	461a      	mov	r2, r3
 8010b34:	69bb      	ldr	r3, [r7, #24]
 8010b36:	4413      	add	r3, r2
 8010b38:	61bb      	str	r3, [r7, #24]
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	781b      	ldrb	r3, [r3, #0]
 8010b3e:	00da      	lsls	r2, r3, #3
 8010b40:	69bb      	ldr	r3, [r7, #24]
 8010b42:	4413      	add	r3, r2
 8010b44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010b48:	617b      	str	r3, [r7, #20]
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	881b      	ldrh	r3, [r3, #0]
 8010b4e:	b29b      	uxth	r3, r3
 8010b50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010b54:	b29a      	uxth	r2, r3
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	801a      	strh	r2, [r3, #0]
 8010b5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d10a      	bne.n	8010b78 <USB_EPStartXfer+0x2be>
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	881b      	ldrh	r3, [r3, #0]
 8010b66:	b29b      	uxth	r3, r3
 8010b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010b70:	b29a      	uxth	r2, r3
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	801a      	strh	r2, [r3, #0]
 8010b76:	e05d      	b.n	8010c34 <USB_EPStartXfer+0x37a>
 8010b78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010b7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8010b7e:	d81c      	bhi.n	8010bba <USB_EPStartXfer+0x300>
 8010b80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010b84:	085b      	lsrs	r3, r3, #1
 8010b86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010b8e:	f003 0301 	and.w	r3, r3, #1
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d004      	beq.n	8010ba0 <USB_EPStartXfer+0x2e6>
 8010b96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010b9a:	3301      	adds	r3, #1
 8010b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	881b      	ldrh	r3, [r3, #0]
 8010ba4:	b29a      	uxth	r2, r3
 8010ba6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010baa:	b29b      	uxth	r3, r3
 8010bac:	029b      	lsls	r3, r3, #10
 8010bae:	b29b      	uxth	r3, r3
 8010bb0:	4313      	orrs	r3, r2
 8010bb2:	b29a      	uxth	r2, r3
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	801a      	strh	r2, [r3, #0]
 8010bb8:	e03c      	b.n	8010c34 <USB_EPStartXfer+0x37a>
 8010bba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010bbe:	095b      	lsrs	r3, r3, #5
 8010bc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010bc8:	f003 031f 	and.w	r3, r3, #31
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d104      	bne.n	8010bda <USB_EPStartXfer+0x320>
 8010bd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010bd4:	3b01      	subs	r3, #1
 8010bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	881b      	ldrh	r3, [r3, #0]
 8010bde:	b29a      	uxth	r2, r3
 8010be0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010be4:	b29b      	uxth	r3, r3
 8010be6:	029b      	lsls	r3, r3, #10
 8010be8:	b29b      	uxth	r3, r3
 8010bea:	4313      	orrs	r3, r2
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010bf6:	b29a      	uxth	r2, r3
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	801a      	strh	r2, [r3, #0]
 8010bfc:	e01a      	b.n	8010c34 <USB_EPStartXfer+0x37a>
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	785b      	ldrb	r3, [r3, #1]
 8010c02:	2b01      	cmp	r3, #1
 8010c04:	d116      	bne.n	8010c34 <USB_EPStartXfer+0x37a>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	623b      	str	r3, [r7, #32]
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	461a      	mov	r2, r3
 8010c14:	6a3b      	ldr	r3, [r7, #32]
 8010c16:	4413      	add	r3, r2
 8010c18:	623b      	str	r3, [r7, #32]
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	781b      	ldrb	r3, [r3, #0]
 8010c1e:	00da      	lsls	r2, r3, #3
 8010c20:	6a3b      	ldr	r3, [r7, #32]
 8010c22:	4413      	add	r3, r2
 8010c24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010c28:	61fb      	str	r3, [r7, #28]
 8010c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010c2e:	b29a      	uxth	r2, r3
 8010c30:	69fb      	ldr	r3, [r7, #28]
 8010c32:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	891b      	ldrh	r3, [r3, #8]
 8010c38:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	6959      	ldr	r1, [r3, #20]
 8010c40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f000 fd19 	bl	8011682 <USB_WritePMA>
 8010c50:	e2e2      	b.n	8011218 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	785b      	ldrb	r3, [r3, #1]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d16b      	bne.n	8010d32 <USB_EPStartXfer+0x478>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010c64:	b29b      	uxth	r3, r3
 8010c66:	461a      	mov	r2, r3
 8010c68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c6a:	4413      	add	r3, r2
 8010c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	00da      	lsls	r2, r3, #3
 8010c74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c76:	4413      	add	r3, r2
 8010c78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8010c7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c80:	881b      	ldrh	r3, [r3, #0]
 8010c82:	b29b      	uxth	r3, r3
 8010c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010c88:	b29a      	uxth	r2, r3
 8010c8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c8c:	801a      	strh	r2, [r3, #0]
 8010c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d10a      	bne.n	8010cac <USB_EPStartXfer+0x3f2>
 8010c96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c98:	881b      	ldrh	r3, [r3, #0]
 8010c9a:	b29b      	uxth	r3, r3
 8010c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ca4:	b29a      	uxth	r2, r3
 8010ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ca8:	801a      	strh	r2, [r3, #0]
 8010caa:	e05d      	b.n	8010d68 <USB_EPStartXfer+0x4ae>
 8010cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010cb0:	2b3e      	cmp	r3, #62	@ 0x3e
 8010cb2:	d81c      	bhi.n	8010cee <USB_EPStartXfer+0x434>
 8010cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010cb8:	085b      	lsrs	r3, r3, #1
 8010cba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010cc2:	f003 0301 	and.w	r3, r3, #1
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d004      	beq.n	8010cd4 <USB_EPStartXfer+0x41a>
 8010cca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010cce:	3301      	adds	r3, #1
 8010cd0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010cd6:	881b      	ldrh	r3, [r3, #0]
 8010cd8:	b29a      	uxth	r2, r3
 8010cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010cde:	b29b      	uxth	r3, r3
 8010ce0:	029b      	lsls	r3, r3, #10
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	4313      	orrs	r3, r2
 8010ce6:	b29a      	uxth	r2, r3
 8010ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010cea:	801a      	strh	r2, [r3, #0]
 8010cec:	e03c      	b.n	8010d68 <USB_EPStartXfer+0x4ae>
 8010cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010cf2:	095b      	lsrs	r3, r3, #5
 8010cf4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010cf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010cfc:	f003 031f 	and.w	r3, r3, #31
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d104      	bne.n	8010d0e <USB_EPStartXfer+0x454>
 8010d04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010d08:	3b01      	subs	r3, #1
 8010d0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d10:	881b      	ldrh	r3, [r3, #0]
 8010d12:	b29a      	uxth	r2, r3
 8010d14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	029b      	lsls	r3, r3, #10
 8010d1c:	b29b      	uxth	r3, r3
 8010d1e:	4313      	orrs	r3, r2
 8010d20:	b29b      	uxth	r3, r3
 8010d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010d2a:	b29a      	uxth	r2, r3
 8010d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d2e:	801a      	strh	r2, [r3, #0]
 8010d30:	e01a      	b.n	8010d68 <USB_EPStartXfer+0x4ae>
 8010d32:	683b      	ldr	r3, [r7, #0]
 8010d34:	785b      	ldrb	r3, [r3, #1]
 8010d36:	2b01      	cmp	r3, #1
 8010d38:	d116      	bne.n	8010d68 <USB_EPStartXfer+0x4ae>
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010d44:	b29b      	uxth	r3, r3
 8010d46:	461a      	mov	r2, r3
 8010d48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d4a:	4413      	add	r3, r2
 8010d4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	781b      	ldrb	r3, [r3, #0]
 8010d52:	00da      	lsls	r2, r3, #3
 8010d54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d56:	4413      	add	r3, r2
 8010d58:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d62:	b29a      	uxth	r2, r3
 8010d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d66:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	891b      	ldrh	r3, [r3, #8]
 8010d6c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	6959      	ldr	r1, [r3, #20]
 8010d74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f000 fc7f 	bl	8011682 <USB_WritePMA>
            ep->xfer_buff += len;
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	695a      	ldr	r2, [r3, #20]
 8010d88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d8c:	441a      	add	r2, r3
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	6a1a      	ldr	r2, [r3, #32]
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	691b      	ldr	r3, [r3, #16]
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d907      	bls.n	8010dae <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8010d9e:	683b      	ldr	r3, [r7, #0]
 8010da0:	6a1a      	ldr	r2, [r3, #32]
 8010da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010da6:	1ad2      	subs	r2, r2, r3
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	621a      	str	r2, [r3, #32]
 8010dac:	e006      	b.n	8010dbc <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	6a1b      	ldr	r3, [r3, #32]
 8010db2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	2200      	movs	r2, #0
 8010dba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	785b      	ldrb	r3, [r3, #1]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d16b      	bne.n	8010ea0 <USB_EPStartXfer+0x5e6>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010dd2:	b29b      	uxth	r3, r3
 8010dd4:	461a      	mov	r2, r3
 8010dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dd8:	4413      	add	r3, r2
 8010dda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	781b      	ldrb	r3, [r3, #0]
 8010de0:	00da      	lsls	r2, r3, #3
 8010de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010de4:	4413      	add	r3, r2
 8010de6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8010dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dee:	881b      	ldrh	r3, [r3, #0]
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010df6:	b29a      	uxth	r2, r3
 8010df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dfa:	801a      	strh	r2, [r3, #0]
 8010dfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d10a      	bne.n	8010e1a <USB_EPStartXfer+0x560>
 8010e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e06:	881b      	ldrh	r3, [r3, #0]
 8010e08:	b29b      	uxth	r3, r3
 8010e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e12:	b29a      	uxth	r2, r3
 8010e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e16:	801a      	strh	r2, [r3, #0]
 8010e18:	e05b      	b.n	8010ed2 <USB_EPStartXfer+0x618>
 8010e1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8010e20:	d81c      	bhi.n	8010e5c <USB_EPStartXfer+0x5a2>
 8010e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e26:	085b      	lsrs	r3, r3, #1
 8010e28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010e2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e30:	f003 0301 	and.w	r3, r3, #1
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d004      	beq.n	8010e42 <USB_EPStartXfer+0x588>
 8010e38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010e3c:	3301      	adds	r3, #1
 8010e3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e44:	881b      	ldrh	r3, [r3, #0]
 8010e46:	b29a      	uxth	r2, r3
 8010e48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010e4c:	b29b      	uxth	r3, r3
 8010e4e:	029b      	lsls	r3, r3, #10
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	4313      	orrs	r3, r2
 8010e54:	b29a      	uxth	r2, r3
 8010e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e58:	801a      	strh	r2, [r3, #0]
 8010e5a:	e03a      	b.n	8010ed2 <USB_EPStartXfer+0x618>
 8010e5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e60:	095b      	lsrs	r3, r3, #5
 8010e62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e6a:	f003 031f 	and.w	r3, r3, #31
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d104      	bne.n	8010e7c <USB_EPStartXfer+0x5c2>
 8010e72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010e76:	3b01      	subs	r3, #1
 8010e78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e7e:	881b      	ldrh	r3, [r3, #0]
 8010e80:	b29a      	uxth	r2, r3
 8010e82:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010e86:	b29b      	uxth	r3, r3
 8010e88:	029b      	lsls	r3, r3, #10
 8010e8a:	b29b      	uxth	r3, r3
 8010e8c:	4313      	orrs	r3, r2
 8010e8e:	b29b      	uxth	r3, r3
 8010e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e98:	b29a      	uxth	r2, r3
 8010e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e9c:	801a      	strh	r2, [r3, #0]
 8010e9e:	e018      	b.n	8010ed2 <USB_EPStartXfer+0x618>
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	785b      	ldrb	r3, [r3, #1]
 8010ea4:	2b01      	cmp	r3, #1
 8010ea6:	d114      	bne.n	8010ed2 <USB_EPStartXfer+0x618>
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	461a      	mov	r2, r3
 8010eb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010eb4:	4413      	add	r3, r2
 8010eb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	781b      	ldrb	r3, [r3, #0]
 8010ebc:	00da      	lsls	r2, r3, #3
 8010ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ec0:	4413      	add	r3, r2
 8010ec2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010ec8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ecc:	b29a      	uxth	r2, r3
 8010ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ed0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010ed2:	683b      	ldr	r3, [r7, #0]
 8010ed4:	895b      	ldrh	r3, [r3, #10]
 8010ed6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	6959      	ldr	r1, [r3, #20]
 8010ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ee2:	b29b      	uxth	r3, r3
 8010ee4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f000 fbca 	bl	8011682 <USB_WritePMA>
 8010eee:	e193      	b.n	8011218 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	6a1b      	ldr	r3, [r3, #32]
 8010ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8010ef8:	687a      	ldr	r2, [r7, #4]
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	781b      	ldrb	r3, [r3, #0]
 8010efe:	009b      	lsls	r3, r3, #2
 8010f00:	4413      	add	r3, r2
 8010f02:	881b      	ldrh	r3, [r3, #0]
 8010f04:	b29b      	uxth	r3, r3
 8010f06:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8010f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010f0e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8010f12:	687a      	ldr	r2, [r7, #4]
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	009b      	lsls	r3, r3, #2
 8010f1a:	441a      	add	r2, r3
 8010f1c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8010f20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010f24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010f28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	461a      	mov	r2, r3
 8010f42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010f44:	4413      	add	r3, r2
 8010f46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	781b      	ldrb	r3, [r3, #0]
 8010f4c:	00da      	lsls	r2, r3, #3
 8010f4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010f50:	4413      	add	r3, r2
 8010f52:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010f56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010f58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f5c:	b29a      	uxth	r2, r3
 8010f5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010f60:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	891b      	ldrh	r3, [r3, #8]
 8010f66:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	6959      	ldr	r1, [r3, #20]
 8010f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f72:	b29b      	uxth	r3, r3
 8010f74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f000 fb82 	bl	8011682 <USB_WritePMA>
 8010f7e:	e14b      	b.n	8011218 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	6a1a      	ldr	r2, [r3, #32]
 8010f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f88:	1ad2      	subs	r2, r2, r3
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010f8e:	687a      	ldr	r2, [r7, #4]
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	781b      	ldrb	r3, [r3, #0]
 8010f94:	009b      	lsls	r3, r3, #2
 8010f96:	4413      	add	r3, r2
 8010f98:	881b      	ldrh	r3, [r3, #0]
 8010f9a:	b29b      	uxth	r3, r3
 8010f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	f000 809a 	beq.w	80110da <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	673b      	str	r3, [r7, #112]	@ 0x70
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	785b      	ldrb	r3, [r3, #1]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d16b      	bne.n	801108a <USB_EPStartXfer+0x7d0>
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010fbc:	b29b      	uxth	r3, r3
 8010fbe:	461a      	mov	r2, r3
 8010fc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010fc2:	4413      	add	r3, r2
 8010fc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	781b      	ldrb	r3, [r3, #0]
 8010fca:	00da      	lsls	r2, r3, #3
 8010fcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010fce:	4413      	add	r3, r2
 8010fd0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010fd4:	667b      	str	r3, [r7, #100]	@ 0x64
 8010fd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010fd8:	881b      	ldrh	r3, [r3, #0]
 8010fda:	b29b      	uxth	r3, r3
 8010fdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010fe0:	b29a      	uxth	r2, r3
 8010fe2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010fe4:	801a      	strh	r2, [r3, #0]
 8010fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d10a      	bne.n	8011004 <USB_EPStartXfer+0x74a>
 8010fee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010ff0:	881b      	ldrh	r3, [r3, #0]
 8010ff2:	b29b      	uxth	r3, r3
 8010ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ffc:	b29a      	uxth	r2, r3
 8010ffe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011000:	801a      	strh	r2, [r3, #0]
 8011002:	e05b      	b.n	80110bc <USB_EPStartXfer+0x802>
 8011004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011008:	2b3e      	cmp	r3, #62	@ 0x3e
 801100a:	d81c      	bhi.n	8011046 <USB_EPStartXfer+0x78c>
 801100c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011010:	085b      	lsrs	r3, r3, #1
 8011012:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801101a:	f003 0301 	and.w	r3, r3, #1
 801101e:	2b00      	cmp	r3, #0
 8011020:	d004      	beq.n	801102c <USB_EPStartXfer+0x772>
 8011022:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011026:	3301      	adds	r3, #1
 8011028:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801102c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801102e:	881b      	ldrh	r3, [r3, #0]
 8011030:	b29a      	uxth	r2, r3
 8011032:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011036:	b29b      	uxth	r3, r3
 8011038:	029b      	lsls	r3, r3, #10
 801103a:	b29b      	uxth	r3, r3
 801103c:	4313      	orrs	r3, r2
 801103e:	b29a      	uxth	r2, r3
 8011040:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011042:	801a      	strh	r2, [r3, #0]
 8011044:	e03a      	b.n	80110bc <USB_EPStartXfer+0x802>
 8011046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801104a:	095b      	lsrs	r3, r3, #5
 801104c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011054:	f003 031f 	and.w	r3, r3, #31
 8011058:	2b00      	cmp	r3, #0
 801105a:	d104      	bne.n	8011066 <USB_EPStartXfer+0x7ac>
 801105c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011060:	3b01      	subs	r3, #1
 8011062:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011066:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011068:	881b      	ldrh	r3, [r3, #0]
 801106a:	b29a      	uxth	r2, r3
 801106c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011070:	b29b      	uxth	r3, r3
 8011072:	029b      	lsls	r3, r3, #10
 8011074:	b29b      	uxth	r3, r3
 8011076:	4313      	orrs	r3, r2
 8011078:	b29b      	uxth	r3, r3
 801107a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801107e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011082:	b29a      	uxth	r2, r3
 8011084:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011086:	801a      	strh	r2, [r3, #0]
 8011088:	e018      	b.n	80110bc <USB_EPStartXfer+0x802>
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	785b      	ldrb	r3, [r3, #1]
 801108e:	2b01      	cmp	r3, #1
 8011090:	d114      	bne.n	80110bc <USB_EPStartXfer+0x802>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011098:	b29b      	uxth	r3, r3
 801109a:	461a      	mov	r2, r3
 801109c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801109e:	4413      	add	r3, r2
 80110a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	00da      	lsls	r2, r3, #3
 80110a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80110aa:	4413      	add	r3, r2
 80110ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80110b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80110b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80110b6:	b29a      	uxth	r2, r3
 80110b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	895b      	ldrh	r3, [r3, #10]
 80110c0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	6959      	ldr	r1, [r3, #20]
 80110c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80110cc:	b29b      	uxth	r3, r3
 80110ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f000 fad5 	bl	8011682 <USB_WritePMA>
 80110d8:	e09e      	b.n	8011218 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	785b      	ldrb	r3, [r3, #1]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d16b      	bne.n	80111ba <USB_EPStartXfer+0x900>
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80110ec:	b29b      	uxth	r3, r3
 80110ee:	461a      	mov	r2, r3
 80110f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80110f2:	4413      	add	r3, r2
 80110f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	781b      	ldrb	r3, [r3, #0]
 80110fa:	00da      	lsls	r2, r3, #3
 80110fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80110fe:	4413      	add	r3, r2
 8011100:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011104:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011106:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011108:	881b      	ldrh	r3, [r3, #0]
 801110a:	b29b      	uxth	r3, r3
 801110c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011110:	b29a      	uxth	r2, r3
 8011112:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011114:	801a      	strh	r2, [r3, #0]
 8011116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801111a:	2b00      	cmp	r3, #0
 801111c:	d10a      	bne.n	8011134 <USB_EPStartXfer+0x87a>
 801111e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011120:	881b      	ldrh	r3, [r3, #0]
 8011122:	b29b      	uxth	r3, r3
 8011124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801112c:	b29a      	uxth	r2, r3
 801112e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011130:	801a      	strh	r2, [r3, #0]
 8011132:	e063      	b.n	80111fc <USB_EPStartXfer+0x942>
 8011134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011138:	2b3e      	cmp	r3, #62	@ 0x3e
 801113a:	d81c      	bhi.n	8011176 <USB_EPStartXfer+0x8bc>
 801113c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011140:	085b      	lsrs	r3, r3, #1
 8011142:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801114a:	f003 0301 	and.w	r3, r3, #1
 801114e:	2b00      	cmp	r3, #0
 8011150:	d004      	beq.n	801115c <USB_EPStartXfer+0x8a2>
 8011152:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011156:	3301      	adds	r3, #1
 8011158:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801115c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801115e:	881b      	ldrh	r3, [r3, #0]
 8011160:	b29a      	uxth	r2, r3
 8011162:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011166:	b29b      	uxth	r3, r3
 8011168:	029b      	lsls	r3, r3, #10
 801116a:	b29b      	uxth	r3, r3
 801116c:	4313      	orrs	r3, r2
 801116e:	b29a      	uxth	r2, r3
 8011170:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011172:	801a      	strh	r2, [r3, #0]
 8011174:	e042      	b.n	80111fc <USB_EPStartXfer+0x942>
 8011176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801117a:	095b      	lsrs	r3, r3, #5
 801117c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011184:	f003 031f 	and.w	r3, r3, #31
 8011188:	2b00      	cmp	r3, #0
 801118a:	d104      	bne.n	8011196 <USB_EPStartXfer+0x8dc>
 801118c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011190:	3b01      	subs	r3, #1
 8011192:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011196:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011198:	881b      	ldrh	r3, [r3, #0]
 801119a:	b29a      	uxth	r2, r3
 801119c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80111a0:	b29b      	uxth	r3, r3
 80111a2:	029b      	lsls	r3, r3, #10
 80111a4:	b29b      	uxth	r3, r3
 80111a6:	4313      	orrs	r3, r2
 80111a8:	b29b      	uxth	r3, r3
 80111aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80111ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80111b2:	b29a      	uxth	r2, r3
 80111b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80111b6:	801a      	strh	r2, [r3, #0]
 80111b8:	e020      	b.n	80111fc <USB_EPStartXfer+0x942>
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	785b      	ldrb	r3, [r3, #1]
 80111be:	2b01      	cmp	r3, #1
 80111c0:	d11c      	bne.n	80111fc <USB_EPStartXfer+0x942>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80111ce:	b29b      	uxth	r3, r3
 80111d0:	461a      	mov	r2, r3
 80111d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80111d6:	4413      	add	r3, r2
 80111d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	781b      	ldrb	r3, [r3, #0]
 80111e0:	00da      	lsls	r2, r3, #3
 80111e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80111e6:	4413      	add	r3, r2
 80111e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80111ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80111f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111f4:	b29a      	uxth	r2, r3
 80111f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80111fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	891b      	ldrh	r3, [r3, #8]
 8011200:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	6959      	ldr	r1, [r3, #20]
 8011208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801120c:	b29b      	uxth	r3, r3
 801120e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f000 fa35 	bl	8011682 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8011218:	687a      	ldr	r2, [r7, #4]
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	781b      	ldrb	r3, [r3, #0]
 801121e:	009b      	lsls	r3, r3, #2
 8011220:	4413      	add	r3, r2
 8011222:	881b      	ldrh	r3, [r3, #0]
 8011224:	b29b      	uxth	r3, r3
 8011226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801122a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801122e:	817b      	strh	r3, [r7, #10]
 8011230:	897b      	ldrh	r3, [r7, #10]
 8011232:	f083 0310 	eor.w	r3, r3, #16
 8011236:	817b      	strh	r3, [r7, #10]
 8011238:	897b      	ldrh	r3, [r7, #10]
 801123a:	f083 0320 	eor.w	r3, r3, #32
 801123e:	817b      	strh	r3, [r7, #10]
 8011240:	687a      	ldr	r2, [r7, #4]
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	781b      	ldrb	r3, [r3, #0]
 8011246:	009b      	lsls	r3, r3, #2
 8011248:	441a      	add	r2, r3
 801124a:	897b      	ldrh	r3, [r7, #10]
 801124c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011250:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011254:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801125c:	b29b      	uxth	r3, r3
 801125e:	8013      	strh	r3, [r2, #0]
 8011260:	e0d5      	b.n	801140e <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	7b1b      	ldrb	r3, [r3, #12]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d156      	bne.n	8011318 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	699b      	ldr	r3, [r3, #24]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d122      	bne.n	80112b8 <USB_EPStartXfer+0x9fe>
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	78db      	ldrb	r3, [r3, #3]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d11e      	bne.n	80112b8 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 801127a:	687a      	ldr	r2, [r7, #4]
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	781b      	ldrb	r3, [r3, #0]
 8011280:	009b      	lsls	r3, r3, #2
 8011282:	4413      	add	r3, r2
 8011284:	881b      	ldrh	r3, [r3, #0]
 8011286:	b29b      	uxth	r3, r3
 8011288:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801128c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011290:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8011294:	687a      	ldr	r2, [r7, #4]
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	781b      	ldrb	r3, [r3, #0]
 801129a:	009b      	lsls	r3, r3, #2
 801129c:	441a      	add	r2, r3
 801129e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80112a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80112a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80112aa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80112ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112b2:	b29b      	uxth	r3, r3
 80112b4:	8013      	strh	r3, [r2, #0]
 80112b6:	e01d      	b.n	80112f4 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 80112b8:	687a      	ldr	r2, [r7, #4]
 80112ba:	683b      	ldr	r3, [r7, #0]
 80112bc:	781b      	ldrb	r3, [r3, #0]
 80112be:	009b      	lsls	r3, r3, #2
 80112c0:	4413      	add	r3, r2
 80112c2:	881b      	ldrh	r3, [r3, #0]
 80112c4:	b29b      	uxth	r3, r3
 80112c6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80112ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80112ce:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 80112d2:	687a      	ldr	r2, [r7, #4]
 80112d4:	683b      	ldr	r3, [r7, #0]
 80112d6:	781b      	ldrb	r3, [r3, #0]
 80112d8:	009b      	lsls	r3, r3, #2
 80112da:	441a      	add	r2, r3
 80112dc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80112e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80112e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80112e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80112ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112f0:	b29b      	uxth	r3, r3
 80112f2:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	699a      	ldr	r2, [r3, #24]
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	691b      	ldr	r3, [r3, #16]
 80112fc:	429a      	cmp	r2, r3
 80112fe:	d907      	bls.n	8011310 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	699a      	ldr	r2, [r3, #24]
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	691b      	ldr	r3, [r3, #16]
 8011308:	1ad2      	subs	r2, r2, r3
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	619a      	str	r2, [r3, #24]
 801130e:	e054      	b.n	80113ba <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	2200      	movs	r2, #0
 8011314:	619a      	str	r2, [r3, #24]
 8011316:	e050      	b.n	80113ba <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	78db      	ldrb	r3, [r3, #3]
 801131c:	2b02      	cmp	r3, #2
 801131e:	d142      	bne.n	80113a6 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	69db      	ldr	r3, [r3, #28]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d048      	beq.n	80113ba <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8011328:	687a      	ldr	r2, [r7, #4]
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	781b      	ldrb	r3, [r3, #0]
 801132e:	009b      	lsls	r3, r3, #2
 8011330:	4413      	add	r3, r2
 8011332:	881b      	ldrh	r3, [r3, #0]
 8011334:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011338:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 801133c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011340:	2b00      	cmp	r3, #0
 8011342:	d005      	beq.n	8011350 <USB_EPStartXfer+0xa96>
 8011344:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801134c:	2b00      	cmp	r3, #0
 801134e:	d10b      	bne.n	8011368 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011350:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011354:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011358:	2b00      	cmp	r3, #0
 801135a:	d12e      	bne.n	80113ba <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801135c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011364:	2b00      	cmp	r3, #0
 8011366:	d128      	bne.n	80113ba <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8011368:	687a      	ldr	r2, [r7, #4]
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	009b      	lsls	r3, r3, #2
 8011370:	4413      	add	r3, r2
 8011372:	881b      	ldrh	r3, [r3, #0]
 8011374:	b29b      	uxth	r3, r3
 8011376:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801137a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801137e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8011382:	687a      	ldr	r2, [r7, #4]
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	009b      	lsls	r3, r3, #2
 801138a:	441a      	add	r2, r3
 801138c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8011390:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011394:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011398:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801139c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80113a0:	b29b      	uxth	r3, r3
 80113a2:	8013      	strh	r3, [r2, #0]
 80113a4:	e009      	b.n	80113ba <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	78db      	ldrb	r3, [r3, #3]
 80113aa:	2b01      	cmp	r3, #1
 80113ac:	d103      	bne.n	80113b6 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	2200      	movs	r2, #0
 80113b2:	619a      	str	r2, [r3, #24]
 80113b4:	e001      	b.n	80113ba <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 80113b6:	2301      	movs	r3, #1
 80113b8:	e02a      	b.n	8011410 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80113ba:	687a      	ldr	r2, [r7, #4]
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	781b      	ldrb	r3, [r3, #0]
 80113c0:	009b      	lsls	r3, r3, #2
 80113c2:	4413      	add	r3, r2
 80113c4:	881b      	ldrh	r3, [r3, #0]
 80113c6:	b29b      	uxth	r3, r3
 80113c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80113cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80113d0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80113d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80113d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80113dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80113e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80113e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80113e8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80113ec:	687a      	ldr	r2, [r7, #4]
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	009b      	lsls	r3, r3, #2
 80113f4:	441a      	add	r2, r3
 80113f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80113fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80113fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011402:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801140a:	b29b      	uxth	r3, r3
 801140c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801140e:	2300      	movs	r3, #0
}
 8011410:	4618      	mov	r0, r3
 8011412:	37b0      	adds	r7, #176	@ 0xb0
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}

08011418 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011418:	b480      	push	{r7}
 801141a:	b085      	sub	sp, #20
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
 8011420:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	785b      	ldrb	r3, [r3, #1]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d020      	beq.n	801146c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	009b      	lsls	r3, r3, #2
 8011432:	4413      	add	r3, r2
 8011434:	881b      	ldrh	r3, [r3, #0]
 8011436:	b29b      	uxth	r3, r3
 8011438:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801143c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011440:	81bb      	strh	r3, [r7, #12]
 8011442:	89bb      	ldrh	r3, [r7, #12]
 8011444:	f083 0310 	eor.w	r3, r3, #16
 8011448:	81bb      	strh	r3, [r7, #12]
 801144a:	687a      	ldr	r2, [r7, #4]
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	781b      	ldrb	r3, [r3, #0]
 8011450:	009b      	lsls	r3, r3, #2
 8011452:	441a      	add	r2, r3
 8011454:	89bb      	ldrh	r3, [r7, #12]
 8011456:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801145a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801145e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011466:	b29b      	uxth	r3, r3
 8011468:	8013      	strh	r3, [r2, #0]
 801146a:	e01f      	b.n	80114ac <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801146c:	687a      	ldr	r2, [r7, #4]
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	781b      	ldrb	r3, [r3, #0]
 8011472:	009b      	lsls	r3, r3, #2
 8011474:	4413      	add	r3, r2
 8011476:	881b      	ldrh	r3, [r3, #0]
 8011478:	b29b      	uxth	r3, r3
 801147a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801147e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011482:	81fb      	strh	r3, [r7, #14]
 8011484:	89fb      	ldrh	r3, [r7, #14]
 8011486:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801148a:	81fb      	strh	r3, [r7, #14]
 801148c:	687a      	ldr	r2, [r7, #4]
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	009b      	lsls	r3, r3, #2
 8011494:	441a      	add	r2, r3
 8011496:	89fb      	ldrh	r3, [r7, #14]
 8011498:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801149c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80114a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80114a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114a8:	b29b      	uxth	r3, r3
 80114aa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80114ac:	2300      	movs	r3, #0
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	3714      	adds	r7, #20
 80114b2:	46bd      	mov	sp, r7
 80114b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b8:	4770      	bx	lr

080114ba <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80114ba:	b480      	push	{r7}
 80114bc:	b087      	sub	sp, #28
 80114be:	af00      	add	r7, sp, #0
 80114c0:	6078      	str	r0, [r7, #4]
 80114c2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	785b      	ldrb	r3, [r3, #1]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d04c      	beq.n	8011566 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80114cc:	687a      	ldr	r2, [r7, #4]
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	009b      	lsls	r3, r3, #2
 80114d4:	4413      	add	r3, r2
 80114d6:	881b      	ldrh	r3, [r3, #0]
 80114d8:	823b      	strh	r3, [r7, #16]
 80114da:	8a3b      	ldrh	r3, [r7, #16]
 80114dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d01b      	beq.n	801151c <USB_EPClearStall+0x62>
 80114e4:	687a      	ldr	r2, [r7, #4]
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	781b      	ldrb	r3, [r3, #0]
 80114ea:	009b      	lsls	r3, r3, #2
 80114ec:	4413      	add	r3, r2
 80114ee:	881b      	ldrh	r3, [r3, #0]
 80114f0:	b29b      	uxth	r3, r3
 80114f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80114f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80114fa:	81fb      	strh	r3, [r7, #14]
 80114fc:	687a      	ldr	r2, [r7, #4]
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	781b      	ldrb	r3, [r3, #0]
 8011502:	009b      	lsls	r3, r3, #2
 8011504:	441a      	add	r2, r3
 8011506:	89fb      	ldrh	r3, [r7, #14]
 8011508:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801150c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011510:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011514:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011518:	b29b      	uxth	r3, r3
 801151a:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	78db      	ldrb	r3, [r3, #3]
 8011520:	2b01      	cmp	r3, #1
 8011522:	d06c      	beq.n	80115fe <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011524:	687a      	ldr	r2, [r7, #4]
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	781b      	ldrb	r3, [r3, #0]
 801152a:	009b      	lsls	r3, r3, #2
 801152c:	4413      	add	r3, r2
 801152e:	881b      	ldrh	r3, [r3, #0]
 8011530:	b29b      	uxth	r3, r3
 8011532:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011536:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801153a:	81bb      	strh	r3, [r7, #12]
 801153c:	89bb      	ldrh	r3, [r7, #12]
 801153e:	f083 0320 	eor.w	r3, r3, #32
 8011542:	81bb      	strh	r3, [r7, #12]
 8011544:	687a      	ldr	r2, [r7, #4]
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	781b      	ldrb	r3, [r3, #0]
 801154a:	009b      	lsls	r3, r3, #2
 801154c:	441a      	add	r2, r3
 801154e:	89bb      	ldrh	r3, [r7, #12]
 8011550:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011554:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011558:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801155c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011560:	b29b      	uxth	r3, r3
 8011562:	8013      	strh	r3, [r2, #0]
 8011564:	e04b      	b.n	80115fe <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011566:	687a      	ldr	r2, [r7, #4]
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	009b      	lsls	r3, r3, #2
 801156e:	4413      	add	r3, r2
 8011570:	881b      	ldrh	r3, [r3, #0]
 8011572:	82fb      	strh	r3, [r7, #22]
 8011574:	8afb      	ldrh	r3, [r7, #22]
 8011576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801157a:	2b00      	cmp	r3, #0
 801157c:	d01b      	beq.n	80115b6 <USB_EPClearStall+0xfc>
 801157e:	687a      	ldr	r2, [r7, #4]
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	781b      	ldrb	r3, [r3, #0]
 8011584:	009b      	lsls	r3, r3, #2
 8011586:	4413      	add	r3, r2
 8011588:	881b      	ldrh	r3, [r3, #0]
 801158a:	b29b      	uxth	r3, r3
 801158c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011590:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011594:	82bb      	strh	r3, [r7, #20]
 8011596:	687a      	ldr	r2, [r7, #4]
 8011598:	683b      	ldr	r3, [r7, #0]
 801159a:	781b      	ldrb	r3, [r3, #0]
 801159c:	009b      	lsls	r3, r3, #2
 801159e:	441a      	add	r2, r3
 80115a0:	8abb      	ldrh	r3, [r7, #20]
 80115a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80115a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80115aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80115ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80115b2:	b29b      	uxth	r3, r3
 80115b4:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80115b6:	687a      	ldr	r2, [r7, #4]
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	781b      	ldrb	r3, [r3, #0]
 80115bc:	009b      	lsls	r3, r3, #2
 80115be:	4413      	add	r3, r2
 80115c0:	881b      	ldrh	r3, [r3, #0]
 80115c2:	b29b      	uxth	r3, r3
 80115c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80115c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80115cc:	827b      	strh	r3, [r7, #18]
 80115ce:	8a7b      	ldrh	r3, [r7, #18]
 80115d0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80115d4:	827b      	strh	r3, [r7, #18]
 80115d6:	8a7b      	ldrh	r3, [r7, #18]
 80115d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80115dc:	827b      	strh	r3, [r7, #18]
 80115de:	687a      	ldr	r2, [r7, #4]
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	781b      	ldrb	r3, [r3, #0]
 80115e4:	009b      	lsls	r3, r3, #2
 80115e6:	441a      	add	r2, r3
 80115e8:	8a7b      	ldrh	r3, [r7, #18]
 80115ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80115ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80115f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80115f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80115fa:	b29b      	uxth	r3, r3
 80115fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80115fe:	2300      	movs	r3, #0
}
 8011600:	4618      	mov	r0, r3
 8011602:	371c      	adds	r7, #28
 8011604:	46bd      	mov	sp, r7
 8011606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160a:	4770      	bx	lr

0801160c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801160c:	b480      	push	{r7}
 801160e:	b083      	sub	sp, #12
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
 8011614:	460b      	mov	r3, r1
 8011616:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8011618:	78fb      	ldrb	r3, [r7, #3]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d103      	bne.n	8011626 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2280      	movs	r2, #128	@ 0x80
 8011622:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8011626:	2300      	movs	r3, #0
}
 8011628:	4618      	mov	r0, r3
 801162a:	370c      	adds	r7, #12
 801162c:	46bd      	mov	sp, r7
 801162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011632:	4770      	bx	lr

08011634 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8011634:	b480      	push	{r7}
 8011636:	b083      	sub	sp, #12
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8011642:	b29b      	uxth	r3, r3
 8011644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801164c:	b29a      	uxth	r2, r3
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8011654:	2300      	movs	r3, #0
}
 8011656:	4618      	mov	r0, r3
 8011658:	370c      	adds	r7, #12
 801165a:	46bd      	mov	sp, r7
 801165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011660:	4770      	bx	lr

08011662 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8011662:	b480      	push	{r7}
 8011664:	b085      	sub	sp, #20
 8011666:	af00      	add	r7, sp, #0
 8011668:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8011670:	b29b      	uxth	r3, r3
 8011672:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8011674:	68fb      	ldr	r3, [r7, #12]
}
 8011676:	4618      	mov	r0, r3
 8011678:	3714      	adds	r7, #20
 801167a:	46bd      	mov	sp, r7
 801167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011680:	4770      	bx	lr

08011682 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011682:	b480      	push	{r7}
 8011684:	b08b      	sub	sp, #44	@ 0x2c
 8011686:	af00      	add	r7, sp, #0
 8011688:	60f8      	str	r0, [r7, #12]
 801168a:	60b9      	str	r1, [r7, #8]
 801168c:	4611      	mov	r1, r2
 801168e:	461a      	mov	r2, r3
 8011690:	460b      	mov	r3, r1
 8011692:	80fb      	strh	r3, [r7, #6]
 8011694:	4613      	mov	r3, r2
 8011696:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011698:	88bb      	ldrh	r3, [r7, #4]
 801169a:	3301      	adds	r3, #1
 801169c:	085b      	lsrs	r3, r3, #1
 801169e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80116a8:	88fa      	ldrh	r2, [r7, #6]
 80116aa:	697b      	ldr	r3, [r7, #20]
 80116ac:	4413      	add	r3, r2
 80116ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80116b2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80116b4:	69bb      	ldr	r3, [r7, #24]
 80116b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80116b8:	e01b      	b.n	80116f2 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80116ba:	69fb      	ldr	r3, [r7, #28]
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80116c0:	69fb      	ldr	r3, [r7, #28]
 80116c2:	3301      	adds	r3, #1
 80116c4:	781b      	ldrb	r3, [r3, #0]
 80116c6:	021b      	lsls	r3, r3, #8
 80116c8:	b21a      	sxth	r2, r3
 80116ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80116ce:	4313      	orrs	r3, r2
 80116d0:	b21b      	sxth	r3, r3
 80116d2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80116d4:	6a3b      	ldr	r3, [r7, #32]
 80116d6:	8a7a      	ldrh	r2, [r7, #18]
 80116d8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80116da:	6a3b      	ldr	r3, [r7, #32]
 80116dc:	3302      	adds	r3, #2
 80116de:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80116e0:	69fb      	ldr	r3, [r7, #28]
 80116e2:	3301      	adds	r3, #1
 80116e4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80116e6:	69fb      	ldr	r3, [r7, #28]
 80116e8:	3301      	adds	r3, #1
 80116ea:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80116ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ee:	3b01      	subs	r3, #1
 80116f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80116f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d1e0      	bne.n	80116ba <USB_WritePMA+0x38>
  }
}
 80116f8:	bf00      	nop
 80116fa:	bf00      	nop
 80116fc:	372c      	adds	r7, #44	@ 0x2c
 80116fe:	46bd      	mov	sp, r7
 8011700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011704:	4770      	bx	lr

08011706 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011706:	b480      	push	{r7}
 8011708:	b08b      	sub	sp, #44	@ 0x2c
 801170a:	af00      	add	r7, sp, #0
 801170c:	60f8      	str	r0, [r7, #12]
 801170e:	60b9      	str	r1, [r7, #8]
 8011710:	4611      	mov	r1, r2
 8011712:	461a      	mov	r2, r3
 8011714:	460b      	mov	r3, r1
 8011716:	80fb      	strh	r3, [r7, #6]
 8011718:	4613      	mov	r3, r2
 801171a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801171c:	88bb      	ldrh	r3, [r7, #4]
 801171e:	085b      	lsrs	r3, r3, #1
 8011720:	b29b      	uxth	r3, r3
 8011722:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011728:	68bb      	ldr	r3, [r7, #8]
 801172a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801172c:	88fa      	ldrh	r2, [r7, #6]
 801172e:	697b      	ldr	r3, [r7, #20]
 8011730:	4413      	add	r3, r2
 8011732:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011736:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011738:	69bb      	ldr	r3, [r7, #24]
 801173a:	627b      	str	r3, [r7, #36]	@ 0x24
 801173c:	e018      	b.n	8011770 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801173e:	6a3b      	ldr	r3, [r7, #32]
 8011740:	881b      	ldrh	r3, [r3, #0]
 8011742:	b29b      	uxth	r3, r3
 8011744:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8011746:	6a3b      	ldr	r3, [r7, #32]
 8011748:	3302      	adds	r3, #2
 801174a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801174c:	693b      	ldr	r3, [r7, #16]
 801174e:	b2da      	uxtb	r2, r3
 8011750:	69fb      	ldr	r3, [r7, #28]
 8011752:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011754:	69fb      	ldr	r3, [r7, #28]
 8011756:	3301      	adds	r3, #1
 8011758:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801175a:	693b      	ldr	r3, [r7, #16]
 801175c:	0a1b      	lsrs	r3, r3, #8
 801175e:	b2da      	uxtb	r2, r3
 8011760:	69fb      	ldr	r3, [r7, #28]
 8011762:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011764:	69fb      	ldr	r3, [r7, #28]
 8011766:	3301      	adds	r3, #1
 8011768:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801176c:	3b01      	subs	r3, #1
 801176e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011772:	2b00      	cmp	r3, #0
 8011774:	d1e3      	bne.n	801173e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8011776:	88bb      	ldrh	r3, [r7, #4]
 8011778:	f003 0301 	and.w	r3, r3, #1
 801177c:	b29b      	uxth	r3, r3
 801177e:	2b00      	cmp	r3, #0
 8011780:	d007      	beq.n	8011792 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8011782:	6a3b      	ldr	r3, [r7, #32]
 8011784:	881b      	ldrh	r3, [r3, #0]
 8011786:	b29b      	uxth	r3, r3
 8011788:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801178a:	693b      	ldr	r3, [r7, #16]
 801178c:	b2da      	uxtb	r2, r3
 801178e:	69fb      	ldr	r3, [r7, #28]
 8011790:	701a      	strb	r2, [r3, #0]
  }
}
 8011792:	bf00      	nop
 8011794:	372c      	adds	r7, #44	@ 0x2c
 8011796:	46bd      	mov	sp, r7
 8011798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179c:	4770      	bx	lr

0801179e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801179e:	b580      	push	{r7, lr}
 80117a0:	b084      	sub	sp, #16
 80117a2:	af00      	add	r7, sp, #0
 80117a4:	6078      	str	r0, [r7, #4]
 80117a6:	460b      	mov	r3, r1
 80117a8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80117aa:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80117ae:	f002 f8a3 	bl	80138f8 <USBD_static_malloc>
 80117b2:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d105      	bne.n	80117c6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2200      	movs	r2, #0
 80117be:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80117c2:	2302      	movs	r3, #2
 80117c4:	e066      	b.n	8011894 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	68fa      	ldr	r2, [r7, #12]
 80117ca:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	7c1b      	ldrb	r3, [r3, #16]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d119      	bne.n	801180a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80117d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80117da:	2202      	movs	r2, #2
 80117dc:	2181      	movs	r1, #129	@ 0x81
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f001 ff31 	bl	8013646 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2201      	movs	r2, #1
 80117e8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80117ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80117ee:	2202      	movs	r2, #2
 80117f0:	2101      	movs	r1, #1
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f001 ff27 	bl	8013646 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2201      	movs	r2, #1
 80117fc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2210      	movs	r2, #16
 8011804:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8011808:	e016      	b.n	8011838 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801180a:	2340      	movs	r3, #64	@ 0x40
 801180c:	2202      	movs	r2, #2
 801180e:	2181      	movs	r1, #129	@ 0x81
 8011810:	6878      	ldr	r0, [r7, #4]
 8011812:	f001 ff18 	bl	8013646 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	2201      	movs	r2, #1
 801181a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801181c:	2340      	movs	r3, #64	@ 0x40
 801181e:	2202      	movs	r2, #2
 8011820:	2101      	movs	r1, #1
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f001 ff0f 	bl	8013646 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2201      	movs	r2, #1
 801182c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2210      	movs	r2, #16
 8011834:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011838:	2308      	movs	r3, #8
 801183a:	2203      	movs	r2, #3
 801183c:	2182      	movs	r1, #130	@ 0x82
 801183e:	6878      	ldr	r0, [r7, #4]
 8011840:	f001 ff01 	bl	8013646 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	2201      	movs	r2, #1
 8011848:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	2200      	movs	r2, #0
 801185a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	2200      	movs	r2, #0
 8011862:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	7c1b      	ldrb	r3, [r3, #16]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d109      	bne.n	8011882 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011874:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011878:	2101      	movs	r1, #1
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f001 ffd2 	bl	8013824 <USBD_LL_PrepareReceive>
 8011880:	e007      	b.n	8011892 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011888:	2340      	movs	r3, #64	@ 0x40
 801188a:	2101      	movs	r1, #1
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	f001 ffc9 	bl	8013824 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011892:	2300      	movs	r3, #0
}
 8011894:	4618      	mov	r0, r3
 8011896:	3710      	adds	r7, #16
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}

0801189c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b082      	sub	sp, #8
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
 80118a4:	460b      	mov	r3, r1
 80118a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80118a8:	2181      	movs	r1, #129	@ 0x81
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	f001 fef1 	bl	8013692 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2200      	movs	r2, #0
 80118b4:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80118b6:	2101      	movs	r1, #1
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f001 feea 	bl	8013692 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2200      	movs	r2, #0
 80118c2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80118c6:	2182      	movs	r1, #130	@ 0x82
 80118c8:	6878      	ldr	r0, [r7, #4]
 80118ca:	f001 fee2 	bl	8013692 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2200      	movs	r2, #0
 80118d2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2200      	movs	r2, #0
 80118da:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d00e      	beq.n	8011906 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80118ee:	685b      	ldr	r3, [r3, #4]
 80118f0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80118f8:	4618      	mov	r0, r3
 80118fa:	f002 f80b 	bl	8013914 <USBD_static_free>
    pdev->pClassData = NULL;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2200      	movs	r2, #0
 8011902:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011906:	2300      	movs	r3, #0
}
 8011908:	4618      	mov	r0, r3
 801190a:	3708      	adds	r7, #8
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}

08011910 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b086      	sub	sp, #24
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
 8011918:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011920:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011922:	2300      	movs	r3, #0
 8011924:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011926:	2300      	movs	r3, #0
 8011928:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801192a:	2300      	movs	r3, #0
 801192c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d101      	bne.n	8011938 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8011934:	2303      	movs	r3, #3
 8011936:	e0af      	b.n	8011a98 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	781b      	ldrb	r3, [r3, #0]
 801193c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011940:	2b00      	cmp	r3, #0
 8011942:	d03f      	beq.n	80119c4 <USBD_CDC_Setup+0xb4>
 8011944:	2b20      	cmp	r3, #32
 8011946:	f040 809f 	bne.w	8011a88 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	88db      	ldrh	r3, [r3, #6]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d02e      	beq.n	80119b0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	781b      	ldrb	r3, [r3, #0]
 8011956:	b25b      	sxtb	r3, r3
 8011958:	2b00      	cmp	r3, #0
 801195a:	da16      	bge.n	801198a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8011962:	689b      	ldr	r3, [r3, #8]
 8011964:	683a      	ldr	r2, [r7, #0]
 8011966:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8011968:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801196a:	683a      	ldr	r2, [r7, #0]
 801196c:	88d2      	ldrh	r2, [r2, #6]
 801196e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	88db      	ldrh	r3, [r3, #6]
 8011974:	2b07      	cmp	r3, #7
 8011976:	bf28      	it	cs
 8011978:	2307      	movcs	r3, #7
 801197a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801197c:	693b      	ldr	r3, [r7, #16]
 801197e:	89fa      	ldrh	r2, [r7, #14]
 8011980:	4619      	mov	r1, r3
 8011982:	6878      	ldr	r0, [r7, #4]
 8011984:	f001 fa9d 	bl	8012ec2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8011988:	e085      	b.n	8011a96 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	785a      	ldrb	r2, [r3, #1]
 801198e:	693b      	ldr	r3, [r7, #16]
 8011990:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	88db      	ldrh	r3, [r3, #6]
 8011998:	b2da      	uxtb	r2, r3
 801199a:	693b      	ldr	r3, [r7, #16]
 801199c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80119a0:	6939      	ldr	r1, [r7, #16]
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	88db      	ldrh	r3, [r3, #6]
 80119a6:	461a      	mov	r2, r3
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f001 fab6 	bl	8012f1a <USBD_CtlPrepareRx>
      break;
 80119ae:	e072      	b.n	8011a96 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80119b6:	689b      	ldr	r3, [r3, #8]
 80119b8:	683a      	ldr	r2, [r7, #0]
 80119ba:	7850      	ldrb	r0, [r2, #1]
 80119bc:	2200      	movs	r2, #0
 80119be:	6839      	ldr	r1, [r7, #0]
 80119c0:	4798      	blx	r3
      break;
 80119c2:	e068      	b.n	8011a96 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80119c4:	683b      	ldr	r3, [r7, #0]
 80119c6:	785b      	ldrb	r3, [r3, #1]
 80119c8:	2b0b      	cmp	r3, #11
 80119ca:	d852      	bhi.n	8011a72 <USBD_CDC_Setup+0x162>
 80119cc:	a201      	add	r2, pc, #4	@ (adr r2, 80119d4 <USBD_CDC_Setup+0xc4>)
 80119ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119d2:	bf00      	nop
 80119d4:	08011a05 	.word	0x08011a05
 80119d8:	08011a81 	.word	0x08011a81
 80119dc:	08011a73 	.word	0x08011a73
 80119e0:	08011a73 	.word	0x08011a73
 80119e4:	08011a73 	.word	0x08011a73
 80119e8:	08011a73 	.word	0x08011a73
 80119ec:	08011a73 	.word	0x08011a73
 80119f0:	08011a73 	.word	0x08011a73
 80119f4:	08011a73 	.word	0x08011a73
 80119f8:	08011a73 	.word	0x08011a73
 80119fc:	08011a2f 	.word	0x08011a2f
 8011a00:	08011a59 	.word	0x08011a59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a0a:	b2db      	uxtb	r3, r3
 8011a0c:	2b03      	cmp	r3, #3
 8011a0e:	d107      	bne.n	8011a20 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011a10:	f107 030a 	add.w	r3, r7, #10
 8011a14:	2202      	movs	r2, #2
 8011a16:	4619      	mov	r1, r3
 8011a18:	6878      	ldr	r0, [r7, #4]
 8011a1a:	f001 fa52 	bl	8012ec2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011a1e:	e032      	b.n	8011a86 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011a20:	6839      	ldr	r1, [r7, #0]
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f001 f9dc 	bl	8012de0 <USBD_CtlError>
            ret = USBD_FAIL;
 8011a28:	2303      	movs	r3, #3
 8011a2a:	75fb      	strb	r3, [r7, #23]
          break;
 8011a2c:	e02b      	b.n	8011a86 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a34:	b2db      	uxtb	r3, r3
 8011a36:	2b03      	cmp	r3, #3
 8011a38:	d107      	bne.n	8011a4a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011a3a:	f107 030d 	add.w	r3, r7, #13
 8011a3e:	2201      	movs	r2, #1
 8011a40:	4619      	mov	r1, r3
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f001 fa3d 	bl	8012ec2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011a48:	e01d      	b.n	8011a86 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011a4a:	6839      	ldr	r1, [r7, #0]
 8011a4c:	6878      	ldr	r0, [r7, #4]
 8011a4e:	f001 f9c7 	bl	8012de0 <USBD_CtlError>
            ret = USBD_FAIL;
 8011a52:	2303      	movs	r3, #3
 8011a54:	75fb      	strb	r3, [r7, #23]
          break;
 8011a56:	e016      	b.n	8011a86 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a5e:	b2db      	uxtb	r3, r3
 8011a60:	2b03      	cmp	r3, #3
 8011a62:	d00f      	beq.n	8011a84 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8011a64:	6839      	ldr	r1, [r7, #0]
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f001 f9ba 	bl	8012de0 <USBD_CtlError>
            ret = USBD_FAIL;
 8011a6c:	2303      	movs	r3, #3
 8011a6e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011a70:	e008      	b.n	8011a84 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011a72:	6839      	ldr	r1, [r7, #0]
 8011a74:	6878      	ldr	r0, [r7, #4]
 8011a76:	f001 f9b3 	bl	8012de0 <USBD_CtlError>
          ret = USBD_FAIL;
 8011a7a:	2303      	movs	r3, #3
 8011a7c:	75fb      	strb	r3, [r7, #23]
          break;
 8011a7e:	e002      	b.n	8011a86 <USBD_CDC_Setup+0x176>
          break;
 8011a80:	bf00      	nop
 8011a82:	e008      	b.n	8011a96 <USBD_CDC_Setup+0x186>
          break;
 8011a84:	bf00      	nop
      }
      break;
 8011a86:	e006      	b.n	8011a96 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8011a88:	6839      	ldr	r1, [r7, #0]
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f001 f9a8 	bl	8012de0 <USBD_CtlError>
      ret = USBD_FAIL;
 8011a90:	2303      	movs	r3, #3
 8011a92:	75fb      	strb	r3, [r7, #23]
      break;
 8011a94:	bf00      	nop
  }

  return (uint8_t)ret;
 8011a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3718      	adds	r7, #24
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b084      	sub	sp, #16
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011ab2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d101      	bne.n	8011ac2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011abe:	2303      	movs	r3, #3
 8011ac0:	e04f      	b.n	8011b62 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011ac8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011aca:	78fa      	ldrb	r2, [r7, #3]
 8011acc:	6879      	ldr	r1, [r7, #4]
 8011ace:	4613      	mov	r3, r2
 8011ad0:	009b      	lsls	r3, r3, #2
 8011ad2:	4413      	add	r3, r2
 8011ad4:	009b      	lsls	r3, r3, #2
 8011ad6:	440b      	add	r3, r1
 8011ad8:	3318      	adds	r3, #24
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d029      	beq.n	8011b34 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011ae0:	78fa      	ldrb	r2, [r7, #3]
 8011ae2:	6879      	ldr	r1, [r7, #4]
 8011ae4:	4613      	mov	r3, r2
 8011ae6:	009b      	lsls	r3, r3, #2
 8011ae8:	4413      	add	r3, r2
 8011aea:	009b      	lsls	r3, r3, #2
 8011aec:	440b      	add	r3, r1
 8011aee:	3318      	adds	r3, #24
 8011af0:	681a      	ldr	r2, [r3, #0]
 8011af2:	78f9      	ldrb	r1, [r7, #3]
 8011af4:	68f8      	ldr	r0, [r7, #12]
 8011af6:	460b      	mov	r3, r1
 8011af8:	009b      	lsls	r3, r3, #2
 8011afa:	440b      	add	r3, r1
 8011afc:	00db      	lsls	r3, r3, #3
 8011afe:	4403      	add	r3, r0
 8011b00:	3320      	adds	r3, #32
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	fbb2 f1f3 	udiv	r1, r2, r3
 8011b08:	fb01 f303 	mul.w	r3, r1, r3
 8011b0c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d110      	bne.n	8011b34 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8011b12:	78fa      	ldrb	r2, [r7, #3]
 8011b14:	6879      	ldr	r1, [r7, #4]
 8011b16:	4613      	mov	r3, r2
 8011b18:	009b      	lsls	r3, r3, #2
 8011b1a:	4413      	add	r3, r2
 8011b1c:	009b      	lsls	r3, r3, #2
 8011b1e:	440b      	add	r3, r1
 8011b20:	3318      	adds	r3, #24
 8011b22:	2200      	movs	r2, #0
 8011b24:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011b26:	78f9      	ldrb	r1, [r7, #3]
 8011b28:	2300      	movs	r3, #0
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f001 fe58 	bl	80137e2 <USBD_LL_Transmit>
 8011b32:	e015      	b.n	8011b60 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8011b34:	68bb      	ldr	r3, [r7, #8]
 8011b36:	2200      	movs	r2, #0
 8011b38:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8011b42:	691b      	ldr	r3, [r3, #16]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d00b      	beq.n	8011b60 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8011b4e:	691b      	ldr	r3, [r3, #16]
 8011b50:	68ba      	ldr	r2, [r7, #8]
 8011b52:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8011b56:	68ba      	ldr	r2, [r7, #8]
 8011b58:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8011b5c:	78fa      	ldrb	r2, [r7, #3]
 8011b5e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011b60:	2300      	movs	r3, #0
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	3710      	adds	r7, #16
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}

08011b6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011b6a:	b580      	push	{r7, lr}
 8011b6c:	b084      	sub	sp, #16
 8011b6e:	af00      	add	r7, sp, #0
 8011b70:	6078      	str	r0, [r7, #4]
 8011b72:	460b      	mov	r3, r1
 8011b74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011b7c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d101      	bne.n	8011b8c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011b88:	2303      	movs	r3, #3
 8011b8a:	e015      	b.n	8011bb8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011b8c:	78fb      	ldrb	r3, [r7, #3]
 8011b8e:	4619      	mov	r1, r3
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f001 fe68 	bl	8013866 <USBD_LL_GetRxDataSize>
 8011b96:	4602      	mov	r2, r0
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8011ba4:	68db      	ldr	r3, [r3, #12]
 8011ba6:	68fa      	ldr	r2, [r7, #12]
 8011ba8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8011bac:	68fa      	ldr	r2, [r7, #12]
 8011bae:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8011bb2:	4611      	mov	r1, r2
 8011bb4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011bb6:	2300      	movs	r3, #0
}
 8011bb8:	4618      	mov	r0, r3
 8011bba:	3710      	adds	r7, #16
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bd80      	pop	{r7, pc}

08011bc0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b084      	sub	sp, #16
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011bce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d101      	bne.n	8011bda <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8011bd6:	2303      	movs	r3, #3
 8011bd8:	e01a      	b.n	8011c10 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d014      	beq.n	8011c0e <USBD_CDC_EP0_RxReady+0x4e>
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8011bea:	2bff      	cmp	r3, #255	@ 0xff
 8011bec:	d00f      	beq.n	8011c0e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8011bf4:	689b      	ldr	r3, [r3, #8]
 8011bf6:	68fa      	ldr	r2, [r7, #12]
 8011bf8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8011bfc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011bfe:	68fa      	ldr	r2, [r7, #12]
 8011c00:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011c04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	22ff      	movs	r2, #255	@ 0xff
 8011c0a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8011c0e:	2300      	movs	r3, #0
}
 8011c10:	4618      	mov	r0, r3
 8011c12:	3710      	adds	r7, #16
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}

08011c18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011c18:	b480      	push	{r7}
 8011c1a:	b083      	sub	sp, #12
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	2243      	movs	r2, #67	@ 0x43
 8011c24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011c26:	4b03      	ldr	r3, [pc, #12]	@ (8011c34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	370c      	adds	r7, #12
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c32:	4770      	bx	lr
 8011c34:	200000d8 	.word	0x200000d8

08011c38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011c38:	b480      	push	{r7}
 8011c3a:	b083      	sub	sp, #12
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2243      	movs	r2, #67	@ 0x43
 8011c44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011c46:	4b03      	ldr	r3, [pc, #12]	@ (8011c54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011c48:	4618      	mov	r0, r3
 8011c4a:	370c      	adds	r7, #12
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c52:	4770      	bx	lr
 8011c54:	20000094 	.word	0x20000094

08011c58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b083      	sub	sp, #12
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2243      	movs	r2, #67	@ 0x43
 8011c64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011c66:	4b03      	ldr	r3, [pc, #12]	@ (8011c74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011c68:	4618      	mov	r0, r3
 8011c6a:	370c      	adds	r7, #12
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c72:	4770      	bx	lr
 8011c74:	2000011c 	.word	0x2000011c

08011c78 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011c78:	b480      	push	{r7}
 8011c7a:	b083      	sub	sp, #12
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	220a      	movs	r2, #10
 8011c84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011c86:	4b03      	ldr	r3, [pc, #12]	@ (8011c94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	370c      	adds	r7, #12
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c92:	4770      	bx	lr
 8011c94:	20000050 	.word	0x20000050

08011c98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b083      	sub	sp, #12
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d101      	bne.n	8011cac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011ca8:	2303      	movs	r3, #3
 8011caa:	e004      	b.n	8011cb6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	683a      	ldr	r2, [r7, #0]
 8011cb0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8011cb4:	2300      	movs	r3, #0
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	370c      	adds	r7, #12
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc0:	4770      	bx	lr

08011cc2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011cc2:	b480      	push	{r7}
 8011cc4:	b087      	sub	sp, #28
 8011cc6:	af00      	add	r7, sp, #0
 8011cc8:	60f8      	str	r0, [r7, #12]
 8011cca:	60b9      	str	r1, [r7, #8]
 8011ccc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011cd4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8011cd6:	697b      	ldr	r3, [r7, #20]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d101      	bne.n	8011ce0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011cdc:	2303      	movs	r3, #3
 8011cde:	e008      	b.n	8011cf2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8011ce0:	697b      	ldr	r3, [r7, #20]
 8011ce2:	68ba      	ldr	r2, [r7, #8]
 8011ce4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	687a      	ldr	r2, [r7, #4]
 8011cec:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8011cf0:	2300      	movs	r3, #0
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	371c      	adds	r7, #28
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfc:	4770      	bx	lr

08011cfe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011cfe:	b480      	push	{r7}
 8011d00:	b085      	sub	sp, #20
 8011d02:	af00      	add	r7, sp, #0
 8011d04:	6078      	str	r0, [r7, #4]
 8011d06:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011d0e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d101      	bne.n	8011d1a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8011d16:	2303      	movs	r3, #3
 8011d18:	e004      	b.n	8011d24 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	683a      	ldr	r2, [r7, #0]
 8011d1e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8011d22:	2300      	movs	r3, #0
}
 8011d24:	4618      	mov	r0, r3
 8011d26:	3714      	adds	r7, #20
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2e:	4770      	bx	lr

08011d30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b084      	sub	sp, #16
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011d3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d101      	bne.n	8011d4e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011d4a:	2303      	movs	r3, #3
 8011d4c:	e016      	b.n	8011d7c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	7c1b      	ldrb	r3, [r3, #16]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d109      	bne.n	8011d6a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011d5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011d60:	2101      	movs	r1, #1
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f001 fd5e 	bl	8013824 <USBD_LL_PrepareReceive>
 8011d68:	e007      	b.n	8011d7a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011d70:	2340      	movs	r3, #64	@ 0x40
 8011d72:	2101      	movs	r1, #1
 8011d74:	6878      	ldr	r0, [r7, #4]
 8011d76:	f001 fd55 	bl	8013824 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011d7a:	2300      	movs	r3, #0
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3710      	adds	r7, #16
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}

08011d84 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b086      	sub	sp, #24
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	60f8      	str	r0, [r7, #12]
 8011d8c:	60b9      	str	r1, [r7, #8]
 8011d8e:	4613      	mov	r3, r2
 8011d90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d101      	bne.n	8011d9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011d98:	2303      	movs	r3, #3
 8011d9a:	e01f      	b.n	8011ddc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	2200      	movs	r2, #0
 8011da8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	2200      	movs	r2, #0
 8011db0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d003      	beq.n	8011dc2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	68ba      	ldr	r2, [r7, #8]
 8011dbe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	2201      	movs	r2, #1
 8011dc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	79fa      	ldrb	r2, [r7, #7]
 8011dce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011dd0:	68f8      	ldr	r0, [r7, #12]
 8011dd2:	f001 fbbd 	bl	8013550 <USBD_LL_Init>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3718      	adds	r7, #24
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}

08011de4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b084      	sub	sp, #16
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011dee:	2300      	movs	r3, #0
 8011df0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d101      	bne.n	8011dfc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011df8:	2303      	movs	r3, #3
 8011dfa:	e016      	b.n	8011e2a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	683a      	ldr	r2, [r7, #0]
 8011e00:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d00b      	beq.n	8011e28 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e18:	f107 020e 	add.w	r2, r7, #14
 8011e1c:	4610      	mov	r0, r2
 8011e1e:	4798      	blx	r3
 8011e20:	4602      	mov	r2, r0
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8011e28:	2300      	movs	r3, #0
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3710      	adds	r7, #16
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}

08011e32 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011e32:	b580      	push	{r7, lr}
 8011e34:	b082      	sub	sp, #8
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f001 fbe8 	bl	8013610 <USBD_LL_Start>
 8011e40:	4603      	mov	r3, r0
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	3708      	adds	r7, #8
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}

08011e4a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011e4a:	b480      	push	{r7}
 8011e4c:	b083      	sub	sp, #12
 8011e4e:	af00      	add	r7, sp, #0
 8011e50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011e52:	2300      	movs	r3, #0
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	370c      	adds	r7, #12
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5e:	4770      	bx	lr

08011e60 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b084      	sub	sp, #16
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	460b      	mov	r3, r1
 8011e6a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011e6c:	2303      	movs	r3, #3
 8011e6e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d009      	beq.n	8011e8e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	78fa      	ldrb	r2, [r7, #3]
 8011e84:	4611      	mov	r1, r2
 8011e86:	6878      	ldr	r0, [r7, #4]
 8011e88:	4798      	blx	r3
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e90:	4618      	mov	r0, r3
 8011e92:	3710      	adds	r7, #16
 8011e94:	46bd      	mov	sp, r7
 8011e96:	bd80      	pop	{r7, pc}

08011e98 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b082      	sub	sp, #8
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
 8011ea0:	460b      	mov	r3, r1
 8011ea2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d007      	beq.n	8011ebe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011eb4:	685b      	ldr	r3, [r3, #4]
 8011eb6:	78fa      	ldrb	r2, [r7, #3]
 8011eb8:	4611      	mov	r1, r2
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	4798      	blx	r3
  }

  return USBD_OK;
 8011ebe:	2300      	movs	r3, #0
}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	3708      	adds	r7, #8
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}

08011ec8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b084      	sub	sp, #16
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
 8011ed0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011ed8:	6839      	ldr	r1, [r7, #0]
 8011eda:	4618      	mov	r0, r3
 8011edc:	f000 ff46 	bl	8012d6c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2201      	movs	r2, #1
 8011ee4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011eee:	461a      	mov	r2, r3
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011efc:	f003 031f 	and.w	r3, r3, #31
 8011f00:	2b02      	cmp	r3, #2
 8011f02:	d01a      	beq.n	8011f3a <USBD_LL_SetupStage+0x72>
 8011f04:	2b02      	cmp	r3, #2
 8011f06:	d822      	bhi.n	8011f4e <USBD_LL_SetupStage+0x86>
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d002      	beq.n	8011f12 <USBD_LL_SetupStage+0x4a>
 8011f0c:	2b01      	cmp	r3, #1
 8011f0e:	d00a      	beq.n	8011f26 <USBD_LL_SetupStage+0x5e>
 8011f10:	e01d      	b.n	8011f4e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011f18:	4619      	mov	r1, r3
 8011f1a:	6878      	ldr	r0, [r7, #4]
 8011f1c:	f000 f9ee 	bl	80122fc <USBD_StdDevReq>
 8011f20:	4603      	mov	r3, r0
 8011f22:	73fb      	strb	r3, [r7, #15]
      break;
 8011f24:	e020      	b.n	8011f68 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011f2c:	4619      	mov	r1, r3
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f000 fa52 	bl	80123d8 <USBD_StdItfReq>
 8011f34:	4603      	mov	r3, r0
 8011f36:	73fb      	strb	r3, [r7, #15]
      break;
 8011f38:	e016      	b.n	8011f68 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011f40:	4619      	mov	r1, r3
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f000 fa91 	bl	801246a <USBD_StdEPReq>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8011f4c:	e00c      	b.n	8011f68 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011f54:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011f58:	b2db      	uxtb	r3, r3
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f001 fbb7 	bl	80136d0 <USBD_LL_StallEP>
 8011f62:	4603      	mov	r3, r0
 8011f64:	73fb      	strb	r3, [r7, #15]
      break;
 8011f66:	bf00      	nop
  }

  return ret;
 8011f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3710      	adds	r7, #16
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}

08011f72 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011f72:	b580      	push	{r7, lr}
 8011f74:	b086      	sub	sp, #24
 8011f76:	af00      	add	r7, sp, #0
 8011f78:	60f8      	str	r0, [r7, #12]
 8011f7a:	460b      	mov	r3, r1
 8011f7c:	607a      	str	r2, [r7, #4]
 8011f7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011f80:	7afb      	ldrb	r3, [r7, #11]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d138      	bne.n	8011ff8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8011f8c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011f94:	2b03      	cmp	r3, #3
 8011f96:	d14a      	bne.n	801202e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	689a      	ldr	r2, [r3, #8]
 8011f9c:	693b      	ldr	r3, [r7, #16]
 8011f9e:	68db      	ldr	r3, [r3, #12]
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	d913      	bls.n	8011fcc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	689a      	ldr	r2, [r3, #8]
 8011fa8:	693b      	ldr	r3, [r7, #16]
 8011faa:	68db      	ldr	r3, [r3, #12]
 8011fac:	1ad2      	subs	r2, r2, r3
 8011fae:	693b      	ldr	r3, [r7, #16]
 8011fb0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011fb2:	693b      	ldr	r3, [r7, #16]
 8011fb4:	68da      	ldr	r2, [r3, #12]
 8011fb6:	693b      	ldr	r3, [r7, #16]
 8011fb8:	689b      	ldr	r3, [r3, #8]
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	bf28      	it	cs
 8011fbe:	4613      	movcs	r3, r2
 8011fc0:	461a      	mov	r2, r3
 8011fc2:	6879      	ldr	r1, [r7, #4]
 8011fc4:	68f8      	ldr	r0, [r7, #12]
 8011fc6:	f000 ffc5 	bl	8012f54 <USBD_CtlContinueRx>
 8011fca:	e030      	b.n	801202e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011fd2:	b2db      	uxtb	r3, r3
 8011fd4:	2b03      	cmp	r3, #3
 8011fd6:	d10b      	bne.n	8011ff0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011fde:	691b      	ldr	r3, [r3, #16]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d005      	beq.n	8011ff0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011fea:	691b      	ldr	r3, [r3, #16]
 8011fec:	68f8      	ldr	r0, [r7, #12]
 8011fee:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011ff0:	68f8      	ldr	r0, [r7, #12]
 8011ff2:	f000 ffc0 	bl	8012f76 <USBD_CtlSendStatus>
 8011ff6:	e01a      	b.n	801202e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ffe:	b2db      	uxtb	r3, r3
 8012000:	2b03      	cmp	r3, #3
 8012002:	d114      	bne.n	801202e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801200a:	699b      	ldr	r3, [r3, #24]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d00e      	beq.n	801202e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012016:	699b      	ldr	r3, [r3, #24]
 8012018:	7afa      	ldrb	r2, [r7, #11]
 801201a:	4611      	mov	r1, r2
 801201c:	68f8      	ldr	r0, [r7, #12]
 801201e:	4798      	blx	r3
 8012020:	4603      	mov	r3, r0
 8012022:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012024:	7dfb      	ldrb	r3, [r7, #23]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d001      	beq.n	801202e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801202a:	7dfb      	ldrb	r3, [r7, #23]
 801202c:	e000      	b.n	8012030 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801202e:	2300      	movs	r3, #0
}
 8012030:	4618      	mov	r0, r3
 8012032:	3718      	adds	r7, #24
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}

08012038 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b086      	sub	sp, #24
 801203c:	af00      	add	r7, sp, #0
 801203e:	60f8      	str	r0, [r7, #12]
 8012040:	460b      	mov	r3, r1
 8012042:	607a      	str	r2, [r7, #4]
 8012044:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012046:	7afb      	ldrb	r3, [r7, #11]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d16b      	bne.n	8012124 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	3314      	adds	r3, #20
 8012050:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012058:	2b02      	cmp	r3, #2
 801205a:	d156      	bne.n	801210a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801205c:	693b      	ldr	r3, [r7, #16]
 801205e:	689a      	ldr	r2, [r3, #8]
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	68db      	ldr	r3, [r3, #12]
 8012064:	429a      	cmp	r2, r3
 8012066:	d914      	bls.n	8012092 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012068:	693b      	ldr	r3, [r7, #16]
 801206a:	689a      	ldr	r2, [r3, #8]
 801206c:	693b      	ldr	r3, [r7, #16]
 801206e:	68db      	ldr	r3, [r3, #12]
 8012070:	1ad2      	subs	r2, r2, r3
 8012072:	693b      	ldr	r3, [r7, #16]
 8012074:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	689b      	ldr	r3, [r3, #8]
 801207a:	461a      	mov	r2, r3
 801207c:	6879      	ldr	r1, [r7, #4]
 801207e:	68f8      	ldr	r0, [r7, #12]
 8012080:	f000 ff3a 	bl	8012ef8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012084:	2300      	movs	r3, #0
 8012086:	2200      	movs	r2, #0
 8012088:	2100      	movs	r1, #0
 801208a:	68f8      	ldr	r0, [r7, #12]
 801208c:	f001 fbca 	bl	8013824 <USBD_LL_PrepareReceive>
 8012090:	e03b      	b.n	801210a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012092:	693b      	ldr	r3, [r7, #16]
 8012094:	68da      	ldr	r2, [r3, #12]
 8012096:	693b      	ldr	r3, [r7, #16]
 8012098:	689b      	ldr	r3, [r3, #8]
 801209a:	429a      	cmp	r2, r3
 801209c:	d11c      	bne.n	80120d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801209e:	693b      	ldr	r3, [r7, #16]
 80120a0:	685a      	ldr	r2, [r3, #4]
 80120a2:	693b      	ldr	r3, [r7, #16]
 80120a4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d316      	bcc.n	80120d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80120aa:	693b      	ldr	r3, [r7, #16]
 80120ac:	685a      	ldr	r2, [r3, #4]
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80120b4:	429a      	cmp	r2, r3
 80120b6:	d20f      	bcs.n	80120d8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80120b8:	2200      	movs	r2, #0
 80120ba:	2100      	movs	r1, #0
 80120bc:	68f8      	ldr	r0, [r7, #12]
 80120be:	f000 ff1b 	bl	8012ef8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	2200      	movs	r2, #0
 80120c6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80120ca:	2300      	movs	r3, #0
 80120cc:	2200      	movs	r2, #0
 80120ce:	2100      	movs	r1, #0
 80120d0:	68f8      	ldr	r0, [r7, #12]
 80120d2:	f001 fba7 	bl	8013824 <USBD_LL_PrepareReceive>
 80120d6:	e018      	b.n	801210a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80120de:	b2db      	uxtb	r3, r3
 80120e0:	2b03      	cmp	r3, #3
 80120e2:	d10b      	bne.n	80120fc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80120ea:	68db      	ldr	r3, [r3, #12]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d005      	beq.n	80120fc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80120f6:	68db      	ldr	r3, [r3, #12]
 80120f8:	68f8      	ldr	r0, [r7, #12]
 80120fa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80120fc:	2180      	movs	r1, #128	@ 0x80
 80120fe:	68f8      	ldr	r0, [r7, #12]
 8012100:	f001 fae6 	bl	80136d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012104:	68f8      	ldr	r0, [r7, #12]
 8012106:	f000 ff49 	bl	8012f9c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8012110:	2b01      	cmp	r3, #1
 8012112:	d122      	bne.n	801215a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8012114:	68f8      	ldr	r0, [r7, #12]
 8012116:	f7ff fe98 	bl	8011e4a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	2200      	movs	r2, #0
 801211e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8012122:	e01a      	b.n	801215a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801212a:	b2db      	uxtb	r3, r3
 801212c:	2b03      	cmp	r3, #3
 801212e:	d114      	bne.n	801215a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012136:	695b      	ldr	r3, [r3, #20]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d00e      	beq.n	801215a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012142:	695b      	ldr	r3, [r3, #20]
 8012144:	7afa      	ldrb	r2, [r7, #11]
 8012146:	4611      	mov	r1, r2
 8012148:	68f8      	ldr	r0, [r7, #12]
 801214a:	4798      	blx	r3
 801214c:	4603      	mov	r3, r0
 801214e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012150:	7dfb      	ldrb	r3, [r7, #23]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d001      	beq.n	801215a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8012156:	7dfb      	ldrb	r3, [r7, #23]
 8012158:	e000      	b.n	801215c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801215a:	2300      	movs	r3, #0
}
 801215c:	4618      	mov	r0, r3
 801215e:	3718      	adds	r7, #24
 8012160:	46bd      	mov	sp, r7
 8012162:	bd80      	pop	{r7, pc}

08012164 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012164:	b580      	push	{r7, lr}
 8012166:	b082      	sub	sp, #8
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2201      	movs	r2, #1
 8012170:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2200      	movs	r2, #0
 8012178:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2200      	movs	r2, #0
 8012180:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2200      	movs	r2, #0
 8012186:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012190:	2b00      	cmp	r3, #0
 8012192:	d101      	bne.n	8012198 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8012194:	2303      	movs	r3, #3
 8012196:	e02f      	b.n	80121f8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d00f      	beq.n	80121c2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80121a8:	685b      	ldr	r3, [r3, #4]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d009      	beq.n	80121c2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80121b4:	685b      	ldr	r3, [r3, #4]
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	6852      	ldr	r2, [r2, #4]
 80121ba:	b2d2      	uxtb	r2, r2
 80121bc:	4611      	mov	r1, r2
 80121be:	6878      	ldr	r0, [r7, #4]
 80121c0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80121c2:	2340      	movs	r3, #64	@ 0x40
 80121c4:	2200      	movs	r2, #0
 80121c6:	2100      	movs	r1, #0
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f001 fa3c 	bl	8013646 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	2201      	movs	r2, #1
 80121d2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2240      	movs	r2, #64	@ 0x40
 80121da:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80121de:	2340      	movs	r3, #64	@ 0x40
 80121e0:	2200      	movs	r2, #0
 80121e2:	2180      	movs	r1, #128	@ 0x80
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f001 fa2e 	bl	8013646 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2201      	movs	r2, #1
 80121ee:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2240      	movs	r2, #64	@ 0x40
 80121f4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80121f6:	2300      	movs	r3, #0
}
 80121f8:	4618      	mov	r0, r3
 80121fa:	3708      	adds	r7, #8
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}

08012200 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012200:	b480      	push	{r7}
 8012202:	b083      	sub	sp, #12
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
 8012208:	460b      	mov	r3, r1
 801220a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	78fa      	ldrb	r2, [r7, #3]
 8012210:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012212:	2300      	movs	r3, #0
}
 8012214:	4618      	mov	r0, r3
 8012216:	370c      	adds	r7, #12
 8012218:	46bd      	mov	sp, r7
 801221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221e:	4770      	bx	lr

08012220 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012220:	b480      	push	{r7}
 8012222:	b083      	sub	sp, #12
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801222e:	b2da      	uxtb	r2, r3
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	2204      	movs	r2, #4
 801223a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801223e:	2300      	movs	r3, #0
}
 8012240:	4618      	mov	r0, r3
 8012242:	370c      	adds	r7, #12
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	4770      	bx	lr

0801224c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801224c:	b480      	push	{r7}
 801224e:	b083      	sub	sp, #12
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801225a:	b2db      	uxtb	r3, r3
 801225c:	2b04      	cmp	r3, #4
 801225e:	d106      	bne.n	801226e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8012266:	b2da      	uxtb	r2, r3
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801226e:	2300      	movs	r3, #0
}
 8012270:	4618      	mov	r0, r3
 8012272:	370c      	adds	r7, #12
 8012274:	46bd      	mov	sp, r7
 8012276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227a:	4770      	bx	lr

0801227c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b082      	sub	sp, #8
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801228a:	2b00      	cmp	r3, #0
 801228c:	d101      	bne.n	8012292 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801228e:	2303      	movs	r3, #3
 8012290:	e012      	b.n	80122b8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012298:	b2db      	uxtb	r3, r3
 801229a:	2b03      	cmp	r3, #3
 801229c:	d10b      	bne.n	80122b6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80122a4:	69db      	ldr	r3, [r3, #28]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d005      	beq.n	80122b6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80122b0:	69db      	ldr	r3, [r3, #28]
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80122b6:	2300      	movs	r3, #0
}
 80122b8:	4618      	mov	r0, r3
 80122ba:	3708      	adds	r7, #8
 80122bc:	46bd      	mov	sp, r7
 80122be:	bd80      	pop	{r7, pc}

080122c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80122c0:	b480      	push	{r7}
 80122c2:	b087      	sub	sp, #28
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80122cc:	697b      	ldr	r3, [r7, #20]
 80122ce:	781b      	ldrb	r3, [r3, #0]
 80122d0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	3301      	adds	r3, #1
 80122d6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80122de:	8a3b      	ldrh	r3, [r7, #16]
 80122e0:	021b      	lsls	r3, r3, #8
 80122e2:	b21a      	sxth	r2, r3
 80122e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80122e8:	4313      	orrs	r3, r2
 80122ea:	b21b      	sxth	r3, r3
 80122ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80122ee:	89fb      	ldrh	r3, [r7, #14]
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	371c      	adds	r7, #28
 80122f4:	46bd      	mov	sp, r7
 80122f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fa:	4770      	bx	lr

080122fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b084      	sub	sp, #16
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
 8012304:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012306:	2300      	movs	r3, #0
 8012308:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	781b      	ldrb	r3, [r3, #0]
 801230e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012312:	2b40      	cmp	r3, #64	@ 0x40
 8012314:	d005      	beq.n	8012322 <USBD_StdDevReq+0x26>
 8012316:	2b40      	cmp	r3, #64	@ 0x40
 8012318:	d853      	bhi.n	80123c2 <USBD_StdDevReq+0xc6>
 801231a:	2b00      	cmp	r3, #0
 801231c:	d00b      	beq.n	8012336 <USBD_StdDevReq+0x3a>
 801231e:	2b20      	cmp	r3, #32
 8012320:	d14f      	bne.n	80123c2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012328:	689b      	ldr	r3, [r3, #8]
 801232a:	6839      	ldr	r1, [r7, #0]
 801232c:	6878      	ldr	r0, [r7, #4]
 801232e:	4798      	blx	r3
 8012330:	4603      	mov	r3, r0
 8012332:	73fb      	strb	r3, [r7, #15]
      break;
 8012334:	e04a      	b.n	80123cc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	785b      	ldrb	r3, [r3, #1]
 801233a:	2b09      	cmp	r3, #9
 801233c:	d83b      	bhi.n	80123b6 <USBD_StdDevReq+0xba>
 801233e:	a201      	add	r2, pc, #4	@ (adr r2, 8012344 <USBD_StdDevReq+0x48>)
 8012340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012344:	08012399 	.word	0x08012399
 8012348:	080123ad 	.word	0x080123ad
 801234c:	080123b7 	.word	0x080123b7
 8012350:	080123a3 	.word	0x080123a3
 8012354:	080123b7 	.word	0x080123b7
 8012358:	08012377 	.word	0x08012377
 801235c:	0801236d 	.word	0x0801236d
 8012360:	080123b7 	.word	0x080123b7
 8012364:	0801238f 	.word	0x0801238f
 8012368:	08012381 	.word	0x08012381
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801236c:	6839      	ldr	r1, [r7, #0]
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f000 f9de 	bl	8012730 <USBD_GetDescriptor>
          break;
 8012374:	e024      	b.n	80123c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012376:	6839      	ldr	r1, [r7, #0]
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f000 fb6d 	bl	8012a58 <USBD_SetAddress>
          break;
 801237e:	e01f      	b.n	80123c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012380:	6839      	ldr	r1, [r7, #0]
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f000 fbac 	bl	8012ae0 <USBD_SetConfig>
 8012388:	4603      	mov	r3, r0
 801238a:	73fb      	strb	r3, [r7, #15]
          break;
 801238c:	e018      	b.n	80123c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801238e:	6839      	ldr	r1, [r7, #0]
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f000 fc4b 	bl	8012c2c <USBD_GetConfig>
          break;
 8012396:	e013      	b.n	80123c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012398:	6839      	ldr	r1, [r7, #0]
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	f000 fc7c 	bl	8012c98 <USBD_GetStatus>
          break;
 80123a0:	e00e      	b.n	80123c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80123a2:	6839      	ldr	r1, [r7, #0]
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f000 fcab 	bl	8012d00 <USBD_SetFeature>
          break;
 80123aa:	e009      	b.n	80123c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80123ac:	6839      	ldr	r1, [r7, #0]
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f000 fcba 	bl	8012d28 <USBD_ClrFeature>
          break;
 80123b4:	e004      	b.n	80123c0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80123b6:	6839      	ldr	r1, [r7, #0]
 80123b8:	6878      	ldr	r0, [r7, #4]
 80123ba:	f000 fd11 	bl	8012de0 <USBD_CtlError>
          break;
 80123be:	bf00      	nop
      }
      break;
 80123c0:	e004      	b.n	80123cc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80123c2:	6839      	ldr	r1, [r7, #0]
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	f000 fd0b 	bl	8012de0 <USBD_CtlError>
      break;
 80123ca:	bf00      	nop
  }

  return ret;
 80123cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	3710      	adds	r7, #16
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}
 80123d6:	bf00      	nop

080123d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b084      	sub	sp, #16
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
 80123e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80123e2:	2300      	movs	r3, #0
 80123e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	781b      	ldrb	r3, [r3, #0]
 80123ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80123ee:	2b40      	cmp	r3, #64	@ 0x40
 80123f0:	d005      	beq.n	80123fe <USBD_StdItfReq+0x26>
 80123f2:	2b40      	cmp	r3, #64	@ 0x40
 80123f4:	d82f      	bhi.n	8012456 <USBD_StdItfReq+0x7e>
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d001      	beq.n	80123fe <USBD_StdItfReq+0x26>
 80123fa:	2b20      	cmp	r3, #32
 80123fc:	d12b      	bne.n	8012456 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012404:	b2db      	uxtb	r3, r3
 8012406:	3b01      	subs	r3, #1
 8012408:	2b02      	cmp	r3, #2
 801240a:	d81d      	bhi.n	8012448 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801240c:	683b      	ldr	r3, [r7, #0]
 801240e:	889b      	ldrh	r3, [r3, #4]
 8012410:	b2db      	uxtb	r3, r3
 8012412:	2b01      	cmp	r3, #1
 8012414:	d813      	bhi.n	801243e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801241c:	689b      	ldr	r3, [r3, #8]
 801241e:	6839      	ldr	r1, [r7, #0]
 8012420:	6878      	ldr	r0, [r7, #4]
 8012422:	4798      	blx	r3
 8012424:	4603      	mov	r3, r0
 8012426:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	88db      	ldrh	r3, [r3, #6]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d110      	bne.n	8012452 <USBD_StdItfReq+0x7a>
 8012430:	7bfb      	ldrb	r3, [r7, #15]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d10d      	bne.n	8012452 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f000 fd9d 	bl	8012f76 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801243c:	e009      	b.n	8012452 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801243e:	6839      	ldr	r1, [r7, #0]
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	f000 fccd 	bl	8012de0 <USBD_CtlError>
          break;
 8012446:	e004      	b.n	8012452 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8012448:	6839      	ldr	r1, [r7, #0]
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f000 fcc8 	bl	8012de0 <USBD_CtlError>
          break;
 8012450:	e000      	b.n	8012454 <USBD_StdItfReq+0x7c>
          break;
 8012452:	bf00      	nop
      }
      break;
 8012454:	e004      	b.n	8012460 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8012456:	6839      	ldr	r1, [r7, #0]
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f000 fcc1 	bl	8012de0 <USBD_CtlError>
      break;
 801245e:	bf00      	nop
  }

  return ret;
 8012460:	7bfb      	ldrb	r3, [r7, #15]
}
 8012462:	4618      	mov	r0, r3
 8012464:	3710      	adds	r7, #16
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}

0801246a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801246a:	b580      	push	{r7, lr}
 801246c:	b084      	sub	sp, #16
 801246e:	af00      	add	r7, sp, #0
 8012470:	6078      	str	r0, [r7, #4]
 8012472:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012474:	2300      	movs	r3, #0
 8012476:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	889b      	ldrh	r3, [r3, #4]
 801247c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	781b      	ldrb	r3, [r3, #0]
 8012482:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012486:	2b40      	cmp	r3, #64	@ 0x40
 8012488:	d007      	beq.n	801249a <USBD_StdEPReq+0x30>
 801248a:	2b40      	cmp	r3, #64	@ 0x40
 801248c:	f200 8145 	bhi.w	801271a <USBD_StdEPReq+0x2b0>
 8012490:	2b00      	cmp	r3, #0
 8012492:	d00c      	beq.n	80124ae <USBD_StdEPReq+0x44>
 8012494:	2b20      	cmp	r3, #32
 8012496:	f040 8140 	bne.w	801271a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80124a0:	689b      	ldr	r3, [r3, #8]
 80124a2:	6839      	ldr	r1, [r7, #0]
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	4798      	blx	r3
 80124a8:	4603      	mov	r3, r0
 80124aa:	73fb      	strb	r3, [r7, #15]
      break;
 80124ac:	e13a      	b.n	8012724 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	785b      	ldrb	r3, [r3, #1]
 80124b2:	2b03      	cmp	r3, #3
 80124b4:	d007      	beq.n	80124c6 <USBD_StdEPReq+0x5c>
 80124b6:	2b03      	cmp	r3, #3
 80124b8:	f300 8129 	bgt.w	801270e <USBD_StdEPReq+0x2a4>
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d07f      	beq.n	80125c0 <USBD_StdEPReq+0x156>
 80124c0:	2b01      	cmp	r3, #1
 80124c2:	d03c      	beq.n	801253e <USBD_StdEPReq+0xd4>
 80124c4:	e123      	b.n	801270e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80124cc:	b2db      	uxtb	r3, r3
 80124ce:	2b02      	cmp	r3, #2
 80124d0:	d002      	beq.n	80124d8 <USBD_StdEPReq+0x6e>
 80124d2:	2b03      	cmp	r3, #3
 80124d4:	d016      	beq.n	8012504 <USBD_StdEPReq+0x9a>
 80124d6:	e02c      	b.n	8012532 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80124d8:	7bbb      	ldrb	r3, [r7, #14]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d00d      	beq.n	80124fa <USBD_StdEPReq+0x90>
 80124de:	7bbb      	ldrb	r3, [r7, #14]
 80124e0:	2b80      	cmp	r3, #128	@ 0x80
 80124e2:	d00a      	beq.n	80124fa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80124e4:	7bbb      	ldrb	r3, [r7, #14]
 80124e6:	4619      	mov	r1, r3
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	f001 f8f1 	bl	80136d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80124ee:	2180      	movs	r1, #128	@ 0x80
 80124f0:	6878      	ldr	r0, [r7, #4]
 80124f2:	f001 f8ed 	bl	80136d0 <USBD_LL_StallEP>
 80124f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80124f8:	e020      	b.n	801253c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80124fa:	6839      	ldr	r1, [r7, #0]
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f000 fc6f 	bl	8012de0 <USBD_CtlError>
              break;
 8012502:	e01b      	b.n	801253c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012504:	683b      	ldr	r3, [r7, #0]
 8012506:	885b      	ldrh	r3, [r3, #2]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d10e      	bne.n	801252a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801250c:	7bbb      	ldrb	r3, [r7, #14]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d00b      	beq.n	801252a <USBD_StdEPReq+0xc0>
 8012512:	7bbb      	ldrb	r3, [r7, #14]
 8012514:	2b80      	cmp	r3, #128	@ 0x80
 8012516:	d008      	beq.n	801252a <USBD_StdEPReq+0xc0>
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	88db      	ldrh	r3, [r3, #6]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d104      	bne.n	801252a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012520:	7bbb      	ldrb	r3, [r7, #14]
 8012522:	4619      	mov	r1, r3
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f001 f8d3 	bl	80136d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f000 fd23 	bl	8012f76 <USBD_CtlSendStatus>

              break;
 8012530:	e004      	b.n	801253c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8012532:	6839      	ldr	r1, [r7, #0]
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	f000 fc53 	bl	8012de0 <USBD_CtlError>
              break;
 801253a:	bf00      	nop
          }
          break;
 801253c:	e0ec      	b.n	8012718 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012544:	b2db      	uxtb	r3, r3
 8012546:	2b02      	cmp	r3, #2
 8012548:	d002      	beq.n	8012550 <USBD_StdEPReq+0xe6>
 801254a:	2b03      	cmp	r3, #3
 801254c:	d016      	beq.n	801257c <USBD_StdEPReq+0x112>
 801254e:	e030      	b.n	80125b2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012550:	7bbb      	ldrb	r3, [r7, #14]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d00d      	beq.n	8012572 <USBD_StdEPReq+0x108>
 8012556:	7bbb      	ldrb	r3, [r7, #14]
 8012558:	2b80      	cmp	r3, #128	@ 0x80
 801255a:	d00a      	beq.n	8012572 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801255c:	7bbb      	ldrb	r3, [r7, #14]
 801255e:	4619      	mov	r1, r3
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f001 f8b5 	bl	80136d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012566:	2180      	movs	r1, #128	@ 0x80
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	f001 f8b1 	bl	80136d0 <USBD_LL_StallEP>
 801256e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012570:	e025      	b.n	80125be <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8012572:	6839      	ldr	r1, [r7, #0]
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f000 fc33 	bl	8012de0 <USBD_CtlError>
              break;
 801257a:	e020      	b.n	80125be <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	885b      	ldrh	r3, [r3, #2]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d11b      	bne.n	80125bc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012584:	7bbb      	ldrb	r3, [r7, #14]
 8012586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801258a:	2b00      	cmp	r3, #0
 801258c:	d004      	beq.n	8012598 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801258e:	7bbb      	ldrb	r3, [r7, #14]
 8012590:	4619      	mov	r1, r3
 8012592:	6878      	ldr	r0, [r7, #4]
 8012594:	f001 f8bb 	bl	801370e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012598:	6878      	ldr	r0, [r7, #4]
 801259a:	f000 fcec 	bl	8012f76 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80125a4:	689b      	ldr	r3, [r3, #8]
 80125a6:	6839      	ldr	r1, [r7, #0]
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	4798      	blx	r3
 80125ac:	4603      	mov	r3, r0
 80125ae:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80125b0:	e004      	b.n	80125bc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80125b2:	6839      	ldr	r1, [r7, #0]
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f000 fc13 	bl	8012de0 <USBD_CtlError>
              break;
 80125ba:	e000      	b.n	80125be <USBD_StdEPReq+0x154>
              break;
 80125bc:	bf00      	nop
          }
          break;
 80125be:	e0ab      	b.n	8012718 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80125c6:	b2db      	uxtb	r3, r3
 80125c8:	2b02      	cmp	r3, #2
 80125ca:	d002      	beq.n	80125d2 <USBD_StdEPReq+0x168>
 80125cc:	2b03      	cmp	r3, #3
 80125ce:	d032      	beq.n	8012636 <USBD_StdEPReq+0x1cc>
 80125d0:	e097      	b.n	8012702 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80125d2:	7bbb      	ldrb	r3, [r7, #14]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d007      	beq.n	80125e8 <USBD_StdEPReq+0x17e>
 80125d8:	7bbb      	ldrb	r3, [r7, #14]
 80125da:	2b80      	cmp	r3, #128	@ 0x80
 80125dc:	d004      	beq.n	80125e8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80125de:	6839      	ldr	r1, [r7, #0]
 80125e0:	6878      	ldr	r0, [r7, #4]
 80125e2:	f000 fbfd 	bl	8012de0 <USBD_CtlError>
                break;
 80125e6:	e091      	b.n	801270c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80125e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	da0b      	bge.n	8012608 <USBD_StdEPReq+0x19e>
 80125f0:	7bbb      	ldrb	r3, [r7, #14]
 80125f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80125f6:	4613      	mov	r3, r2
 80125f8:	009b      	lsls	r3, r3, #2
 80125fa:	4413      	add	r3, r2
 80125fc:	009b      	lsls	r3, r3, #2
 80125fe:	3310      	adds	r3, #16
 8012600:	687a      	ldr	r2, [r7, #4]
 8012602:	4413      	add	r3, r2
 8012604:	3304      	adds	r3, #4
 8012606:	e00b      	b.n	8012620 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012608:	7bbb      	ldrb	r3, [r7, #14]
 801260a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801260e:	4613      	mov	r3, r2
 8012610:	009b      	lsls	r3, r3, #2
 8012612:	4413      	add	r3, r2
 8012614:	009b      	lsls	r3, r3, #2
 8012616:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801261a:	687a      	ldr	r2, [r7, #4]
 801261c:	4413      	add	r3, r2
 801261e:	3304      	adds	r3, #4
 8012620:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	2200      	movs	r2, #0
 8012626:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012628:	68bb      	ldr	r3, [r7, #8]
 801262a:	2202      	movs	r2, #2
 801262c:	4619      	mov	r1, r3
 801262e:	6878      	ldr	r0, [r7, #4]
 8012630:	f000 fc47 	bl	8012ec2 <USBD_CtlSendData>
              break;
 8012634:	e06a      	b.n	801270c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012636:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801263a:	2b00      	cmp	r3, #0
 801263c:	da11      	bge.n	8012662 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801263e:	7bbb      	ldrb	r3, [r7, #14]
 8012640:	f003 020f 	and.w	r2, r3, #15
 8012644:	6879      	ldr	r1, [r7, #4]
 8012646:	4613      	mov	r3, r2
 8012648:	009b      	lsls	r3, r3, #2
 801264a:	4413      	add	r3, r2
 801264c:	009b      	lsls	r3, r3, #2
 801264e:	440b      	add	r3, r1
 8012650:	3324      	adds	r3, #36	@ 0x24
 8012652:	881b      	ldrh	r3, [r3, #0]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d117      	bne.n	8012688 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012658:	6839      	ldr	r1, [r7, #0]
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f000 fbc0 	bl	8012de0 <USBD_CtlError>
                  break;
 8012660:	e054      	b.n	801270c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012662:	7bbb      	ldrb	r3, [r7, #14]
 8012664:	f003 020f 	and.w	r2, r3, #15
 8012668:	6879      	ldr	r1, [r7, #4]
 801266a:	4613      	mov	r3, r2
 801266c:	009b      	lsls	r3, r3, #2
 801266e:	4413      	add	r3, r2
 8012670:	009b      	lsls	r3, r3, #2
 8012672:	440b      	add	r3, r1
 8012674:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012678:	881b      	ldrh	r3, [r3, #0]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d104      	bne.n	8012688 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801267e:	6839      	ldr	r1, [r7, #0]
 8012680:	6878      	ldr	r0, [r7, #4]
 8012682:	f000 fbad 	bl	8012de0 <USBD_CtlError>
                  break;
 8012686:	e041      	b.n	801270c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801268c:	2b00      	cmp	r3, #0
 801268e:	da0b      	bge.n	80126a8 <USBD_StdEPReq+0x23e>
 8012690:	7bbb      	ldrb	r3, [r7, #14]
 8012692:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012696:	4613      	mov	r3, r2
 8012698:	009b      	lsls	r3, r3, #2
 801269a:	4413      	add	r3, r2
 801269c:	009b      	lsls	r3, r3, #2
 801269e:	3310      	adds	r3, #16
 80126a0:	687a      	ldr	r2, [r7, #4]
 80126a2:	4413      	add	r3, r2
 80126a4:	3304      	adds	r3, #4
 80126a6:	e00b      	b.n	80126c0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80126a8:	7bbb      	ldrb	r3, [r7, #14]
 80126aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80126ae:	4613      	mov	r3, r2
 80126b0:	009b      	lsls	r3, r3, #2
 80126b2:	4413      	add	r3, r2
 80126b4:	009b      	lsls	r3, r3, #2
 80126b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80126ba:	687a      	ldr	r2, [r7, #4]
 80126bc:	4413      	add	r3, r2
 80126be:	3304      	adds	r3, #4
 80126c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80126c2:	7bbb      	ldrb	r3, [r7, #14]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d002      	beq.n	80126ce <USBD_StdEPReq+0x264>
 80126c8:	7bbb      	ldrb	r3, [r7, #14]
 80126ca:	2b80      	cmp	r3, #128	@ 0x80
 80126cc:	d103      	bne.n	80126d6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80126ce:	68bb      	ldr	r3, [r7, #8]
 80126d0:	2200      	movs	r2, #0
 80126d2:	601a      	str	r2, [r3, #0]
 80126d4:	e00e      	b.n	80126f4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80126d6:	7bbb      	ldrb	r3, [r7, #14]
 80126d8:	4619      	mov	r1, r3
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f001 f836 	bl	801374c <USBD_LL_IsStallEP>
 80126e0:	4603      	mov	r3, r0
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d003      	beq.n	80126ee <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80126e6:	68bb      	ldr	r3, [r7, #8]
 80126e8:	2201      	movs	r2, #1
 80126ea:	601a      	str	r2, [r3, #0]
 80126ec:	e002      	b.n	80126f4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80126ee:	68bb      	ldr	r3, [r7, #8]
 80126f0:	2200      	movs	r2, #0
 80126f2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80126f4:	68bb      	ldr	r3, [r7, #8]
 80126f6:	2202      	movs	r2, #2
 80126f8:	4619      	mov	r1, r3
 80126fa:	6878      	ldr	r0, [r7, #4]
 80126fc:	f000 fbe1 	bl	8012ec2 <USBD_CtlSendData>
              break;
 8012700:	e004      	b.n	801270c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8012702:	6839      	ldr	r1, [r7, #0]
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f000 fb6b 	bl	8012de0 <USBD_CtlError>
              break;
 801270a:	bf00      	nop
          }
          break;
 801270c:	e004      	b.n	8012718 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801270e:	6839      	ldr	r1, [r7, #0]
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f000 fb65 	bl	8012de0 <USBD_CtlError>
          break;
 8012716:	bf00      	nop
      }
      break;
 8012718:	e004      	b.n	8012724 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801271a:	6839      	ldr	r1, [r7, #0]
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f000 fb5f 	bl	8012de0 <USBD_CtlError>
      break;
 8012722:	bf00      	nop
  }

  return ret;
 8012724:	7bfb      	ldrb	r3, [r7, #15]
}
 8012726:	4618      	mov	r0, r3
 8012728:	3710      	adds	r7, #16
 801272a:	46bd      	mov	sp, r7
 801272c:	bd80      	pop	{r7, pc}
	...

08012730 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b084      	sub	sp, #16
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801273a:	2300      	movs	r3, #0
 801273c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801273e:	2300      	movs	r3, #0
 8012740:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012742:	2300      	movs	r3, #0
 8012744:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	885b      	ldrh	r3, [r3, #2]
 801274a:	0a1b      	lsrs	r3, r3, #8
 801274c:	b29b      	uxth	r3, r3
 801274e:	3b01      	subs	r3, #1
 8012750:	2b0e      	cmp	r3, #14
 8012752:	f200 8152 	bhi.w	80129fa <USBD_GetDescriptor+0x2ca>
 8012756:	a201      	add	r2, pc, #4	@ (adr r2, 801275c <USBD_GetDescriptor+0x2c>)
 8012758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801275c:	080127cd 	.word	0x080127cd
 8012760:	080127e5 	.word	0x080127e5
 8012764:	08012825 	.word	0x08012825
 8012768:	080129fb 	.word	0x080129fb
 801276c:	080129fb 	.word	0x080129fb
 8012770:	0801299b 	.word	0x0801299b
 8012774:	080129c7 	.word	0x080129c7
 8012778:	080129fb 	.word	0x080129fb
 801277c:	080129fb 	.word	0x080129fb
 8012780:	080129fb 	.word	0x080129fb
 8012784:	080129fb 	.word	0x080129fb
 8012788:	080129fb 	.word	0x080129fb
 801278c:	080129fb 	.word	0x080129fb
 8012790:	080129fb 	.word	0x080129fb
 8012794:	08012799 	.word	0x08012799
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801279e:	69db      	ldr	r3, [r3, #28]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d00b      	beq.n	80127bc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80127aa:	69db      	ldr	r3, [r3, #28]
 80127ac:	687a      	ldr	r2, [r7, #4]
 80127ae:	7c12      	ldrb	r2, [r2, #16]
 80127b0:	f107 0108 	add.w	r1, r7, #8
 80127b4:	4610      	mov	r0, r2
 80127b6:	4798      	blx	r3
 80127b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80127ba:	e126      	b.n	8012a0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80127bc:	6839      	ldr	r1, [r7, #0]
 80127be:	6878      	ldr	r0, [r7, #4]
 80127c0:	f000 fb0e 	bl	8012de0 <USBD_CtlError>
        err++;
 80127c4:	7afb      	ldrb	r3, [r7, #11]
 80127c6:	3301      	adds	r3, #1
 80127c8:	72fb      	strb	r3, [r7, #11]
      break;
 80127ca:	e11e      	b.n	8012a0a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	687a      	ldr	r2, [r7, #4]
 80127d6:	7c12      	ldrb	r2, [r2, #16]
 80127d8:	f107 0108 	add.w	r1, r7, #8
 80127dc:	4610      	mov	r0, r2
 80127de:	4798      	blx	r3
 80127e0:	60f8      	str	r0, [r7, #12]
      break;
 80127e2:	e112      	b.n	8012a0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	7c1b      	ldrb	r3, [r3, #16]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d10d      	bne.n	8012808 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80127f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127f4:	f107 0208 	add.w	r2, r7, #8
 80127f8:	4610      	mov	r0, r2
 80127fa:	4798      	blx	r3
 80127fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	3301      	adds	r3, #1
 8012802:	2202      	movs	r2, #2
 8012804:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012806:	e100      	b.n	8012a0a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801280e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012810:	f107 0208 	add.w	r2, r7, #8
 8012814:	4610      	mov	r0, r2
 8012816:	4798      	blx	r3
 8012818:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	3301      	adds	r3, #1
 801281e:	2202      	movs	r2, #2
 8012820:	701a      	strb	r2, [r3, #0]
      break;
 8012822:	e0f2      	b.n	8012a0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012824:	683b      	ldr	r3, [r7, #0]
 8012826:	885b      	ldrh	r3, [r3, #2]
 8012828:	b2db      	uxtb	r3, r3
 801282a:	2b05      	cmp	r3, #5
 801282c:	f200 80ac 	bhi.w	8012988 <USBD_GetDescriptor+0x258>
 8012830:	a201      	add	r2, pc, #4	@ (adr r2, 8012838 <USBD_GetDescriptor+0x108>)
 8012832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012836:	bf00      	nop
 8012838:	08012851 	.word	0x08012851
 801283c:	08012885 	.word	0x08012885
 8012840:	080128b9 	.word	0x080128b9
 8012844:	080128ed 	.word	0x080128ed
 8012848:	08012921 	.word	0x08012921
 801284c:	08012955 	.word	0x08012955
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012856:	685b      	ldr	r3, [r3, #4]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d00b      	beq.n	8012874 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	687a      	ldr	r2, [r7, #4]
 8012866:	7c12      	ldrb	r2, [r2, #16]
 8012868:	f107 0108 	add.w	r1, r7, #8
 801286c:	4610      	mov	r0, r2
 801286e:	4798      	blx	r3
 8012870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012872:	e091      	b.n	8012998 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012874:	6839      	ldr	r1, [r7, #0]
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f000 fab2 	bl	8012de0 <USBD_CtlError>
            err++;
 801287c:	7afb      	ldrb	r3, [r7, #11]
 801287e:	3301      	adds	r3, #1
 8012880:	72fb      	strb	r3, [r7, #11]
          break;
 8012882:	e089      	b.n	8012998 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801288a:	689b      	ldr	r3, [r3, #8]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d00b      	beq.n	80128a8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012896:	689b      	ldr	r3, [r3, #8]
 8012898:	687a      	ldr	r2, [r7, #4]
 801289a:	7c12      	ldrb	r2, [r2, #16]
 801289c:	f107 0108 	add.w	r1, r7, #8
 80128a0:	4610      	mov	r0, r2
 80128a2:	4798      	blx	r3
 80128a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80128a6:	e077      	b.n	8012998 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80128a8:	6839      	ldr	r1, [r7, #0]
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f000 fa98 	bl	8012de0 <USBD_CtlError>
            err++;
 80128b0:	7afb      	ldrb	r3, [r7, #11]
 80128b2:	3301      	adds	r3, #1
 80128b4:	72fb      	strb	r3, [r7, #11]
          break;
 80128b6:	e06f      	b.n	8012998 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80128be:	68db      	ldr	r3, [r3, #12]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d00b      	beq.n	80128dc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80128ca:	68db      	ldr	r3, [r3, #12]
 80128cc:	687a      	ldr	r2, [r7, #4]
 80128ce:	7c12      	ldrb	r2, [r2, #16]
 80128d0:	f107 0108 	add.w	r1, r7, #8
 80128d4:	4610      	mov	r0, r2
 80128d6:	4798      	blx	r3
 80128d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80128da:	e05d      	b.n	8012998 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80128dc:	6839      	ldr	r1, [r7, #0]
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f000 fa7e 	bl	8012de0 <USBD_CtlError>
            err++;
 80128e4:	7afb      	ldrb	r3, [r7, #11]
 80128e6:	3301      	adds	r3, #1
 80128e8:	72fb      	strb	r3, [r7, #11]
          break;
 80128ea:	e055      	b.n	8012998 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80128f2:	691b      	ldr	r3, [r3, #16]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d00b      	beq.n	8012910 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80128fe:	691b      	ldr	r3, [r3, #16]
 8012900:	687a      	ldr	r2, [r7, #4]
 8012902:	7c12      	ldrb	r2, [r2, #16]
 8012904:	f107 0108 	add.w	r1, r7, #8
 8012908:	4610      	mov	r0, r2
 801290a:	4798      	blx	r3
 801290c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801290e:	e043      	b.n	8012998 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012910:	6839      	ldr	r1, [r7, #0]
 8012912:	6878      	ldr	r0, [r7, #4]
 8012914:	f000 fa64 	bl	8012de0 <USBD_CtlError>
            err++;
 8012918:	7afb      	ldrb	r3, [r7, #11]
 801291a:	3301      	adds	r3, #1
 801291c:	72fb      	strb	r3, [r7, #11]
          break;
 801291e:	e03b      	b.n	8012998 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012926:	695b      	ldr	r3, [r3, #20]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d00b      	beq.n	8012944 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012932:	695b      	ldr	r3, [r3, #20]
 8012934:	687a      	ldr	r2, [r7, #4]
 8012936:	7c12      	ldrb	r2, [r2, #16]
 8012938:	f107 0108 	add.w	r1, r7, #8
 801293c:	4610      	mov	r0, r2
 801293e:	4798      	blx	r3
 8012940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012942:	e029      	b.n	8012998 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012944:	6839      	ldr	r1, [r7, #0]
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f000 fa4a 	bl	8012de0 <USBD_CtlError>
            err++;
 801294c:	7afb      	ldrb	r3, [r7, #11]
 801294e:	3301      	adds	r3, #1
 8012950:	72fb      	strb	r3, [r7, #11]
          break;
 8012952:	e021      	b.n	8012998 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801295a:	699b      	ldr	r3, [r3, #24]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d00b      	beq.n	8012978 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012966:	699b      	ldr	r3, [r3, #24]
 8012968:	687a      	ldr	r2, [r7, #4]
 801296a:	7c12      	ldrb	r2, [r2, #16]
 801296c:	f107 0108 	add.w	r1, r7, #8
 8012970:	4610      	mov	r0, r2
 8012972:	4798      	blx	r3
 8012974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012976:	e00f      	b.n	8012998 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012978:	6839      	ldr	r1, [r7, #0]
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f000 fa30 	bl	8012de0 <USBD_CtlError>
            err++;
 8012980:	7afb      	ldrb	r3, [r7, #11]
 8012982:	3301      	adds	r3, #1
 8012984:	72fb      	strb	r3, [r7, #11]
          break;
 8012986:	e007      	b.n	8012998 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012988:	6839      	ldr	r1, [r7, #0]
 801298a:	6878      	ldr	r0, [r7, #4]
 801298c:	f000 fa28 	bl	8012de0 <USBD_CtlError>
          err++;
 8012990:	7afb      	ldrb	r3, [r7, #11]
 8012992:	3301      	adds	r3, #1
 8012994:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8012996:	bf00      	nop
      }
      break;
 8012998:	e037      	b.n	8012a0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	7c1b      	ldrb	r3, [r3, #16]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d109      	bne.n	80129b6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80129a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80129aa:	f107 0208 	add.w	r2, r7, #8
 80129ae:	4610      	mov	r0, r2
 80129b0:	4798      	blx	r3
 80129b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80129b4:	e029      	b.n	8012a0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80129b6:	6839      	ldr	r1, [r7, #0]
 80129b8:	6878      	ldr	r0, [r7, #4]
 80129ba:	f000 fa11 	bl	8012de0 <USBD_CtlError>
        err++;
 80129be:	7afb      	ldrb	r3, [r7, #11]
 80129c0:	3301      	adds	r3, #1
 80129c2:	72fb      	strb	r3, [r7, #11]
      break;
 80129c4:	e021      	b.n	8012a0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	7c1b      	ldrb	r3, [r3, #16]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d10d      	bne.n	80129ea <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80129d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80129d6:	f107 0208 	add.w	r2, r7, #8
 80129da:	4610      	mov	r0, r2
 80129dc:	4798      	blx	r3
 80129de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	3301      	adds	r3, #1
 80129e4:	2207      	movs	r2, #7
 80129e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80129e8:	e00f      	b.n	8012a0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80129ea:	6839      	ldr	r1, [r7, #0]
 80129ec:	6878      	ldr	r0, [r7, #4]
 80129ee:	f000 f9f7 	bl	8012de0 <USBD_CtlError>
        err++;
 80129f2:	7afb      	ldrb	r3, [r7, #11]
 80129f4:	3301      	adds	r3, #1
 80129f6:	72fb      	strb	r3, [r7, #11]
      break;
 80129f8:	e007      	b.n	8012a0a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80129fa:	6839      	ldr	r1, [r7, #0]
 80129fc:	6878      	ldr	r0, [r7, #4]
 80129fe:	f000 f9ef 	bl	8012de0 <USBD_CtlError>
      err++;
 8012a02:	7afb      	ldrb	r3, [r7, #11]
 8012a04:	3301      	adds	r3, #1
 8012a06:	72fb      	strb	r3, [r7, #11]
      break;
 8012a08:	bf00      	nop
  }

  if (err != 0U)
 8012a0a:	7afb      	ldrb	r3, [r7, #11]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d11e      	bne.n	8012a4e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012a10:	683b      	ldr	r3, [r7, #0]
 8012a12:	88db      	ldrh	r3, [r3, #6]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d016      	beq.n	8012a46 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012a18:	893b      	ldrh	r3, [r7, #8]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d00e      	beq.n	8012a3c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	88da      	ldrh	r2, [r3, #6]
 8012a22:	893b      	ldrh	r3, [r7, #8]
 8012a24:	4293      	cmp	r3, r2
 8012a26:	bf28      	it	cs
 8012a28:	4613      	movcs	r3, r2
 8012a2a:	b29b      	uxth	r3, r3
 8012a2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012a2e:	893b      	ldrh	r3, [r7, #8]
 8012a30:	461a      	mov	r2, r3
 8012a32:	68f9      	ldr	r1, [r7, #12]
 8012a34:	6878      	ldr	r0, [r7, #4]
 8012a36:	f000 fa44 	bl	8012ec2 <USBD_CtlSendData>
 8012a3a:	e009      	b.n	8012a50 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012a3c:	6839      	ldr	r1, [r7, #0]
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f000 f9ce 	bl	8012de0 <USBD_CtlError>
 8012a44:	e004      	b.n	8012a50 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f000 fa95 	bl	8012f76 <USBD_CtlSendStatus>
 8012a4c:	e000      	b.n	8012a50 <USBD_GetDescriptor+0x320>
    return;
 8012a4e:	bf00      	nop
  }
}
 8012a50:	3710      	adds	r7, #16
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}
 8012a56:	bf00      	nop

08012a58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b084      	sub	sp, #16
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
 8012a60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	889b      	ldrh	r3, [r3, #4]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d131      	bne.n	8012ace <USBD_SetAddress+0x76>
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	88db      	ldrh	r3, [r3, #6]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d12d      	bne.n	8012ace <USBD_SetAddress+0x76>
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	885b      	ldrh	r3, [r3, #2]
 8012a76:	2b7f      	cmp	r3, #127	@ 0x7f
 8012a78:	d829      	bhi.n	8012ace <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	885b      	ldrh	r3, [r3, #2]
 8012a7e:	b2db      	uxtb	r3, r3
 8012a80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012a84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012a8c:	b2db      	uxtb	r3, r3
 8012a8e:	2b03      	cmp	r3, #3
 8012a90:	d104      	bne.n	8012a9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012a92:	6839      	ldr	r1, [r7, #0]
 8012a94:	6878      	ldr	r0, [r7, #4]
 8012a96:	f000 f9a3 	bl	8012de0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a9a:	e01d      	b.n	8012ad8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	7bfa      	ldrb	r2, [r7, #15]
 8012aa0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012aa4:	7bfb      	ldrb	r3, [r7, #15]
 8012aa6:	4619      	mov	r1, r3
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f000 fe7b 	bl	80137a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f000 fa61 	bl	8012f76 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012ab4:	7bfb      	ldrb	r3, [r7, #15]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d004      	beq.n	8012ac4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	2202      	movs	r2, #2
 8012abe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ac2:	e009      	b.n	8012ad8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	2201      	movs	r2, #1
 8012ac8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012acc:	e004      	b.n	8012ad8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012ace:	6839      	ldr	r1, [r7, #0]
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f000 f985 	bl	8012de0 <USBD_CtlError>
  }
}
 8012ad6:	bf00      	nop
 8012ad8:	bf00      	nop
 8012ada:	3710      	adds	r7, #16
 8012adc:	46bd      	mov	sp, r7
 8012ade:	bd80      	pop	{r7, pc}

08012ae0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b084      	sub	sp, #16
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
 8012ae8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012aea:	2300      	movs	r3, #0
 8012aec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012aee:	683b      	ldr	r3, [r7, #0]
 8012af0:	885b      	ldrh	r3, [r3, #2]
 8012af2:	b2da      	uxtb	r2, r3
 8012af4:	4b4c      	ldr	r3, [pc, #304]	@ (8012c28 <USBD_SetConfig+0x148>)
 8012af6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012af8:	4b4b      	ldr	r3, [pc, #300]	@ (8012c28 <USBD_SetConfig+0x148>)
 8012afa:	781b      	ldrb	r3, [r3, #0]
 8012afc:	2b01      	cmp	r3, #1
 8012afe:	d905      	bls.n	8012b0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012b00:	6839      	ldr	r1, [r7, #0]
 8012b02:	6878      	ldr	r0, [r7, #4]
 8012b04:	f000 f96c 	bl	8012de0 <USBD_CtlError>
    return USBD_FAIL;
 8012b08:	2303      	movs	r3, #3
 8012b0a:	e088      	b.n	8012c1e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012b12:	b2db      	uxtb	r3, r3
 8012b14:	2b02      	cmp	r3, #2
 8012b16:	d002      	beq.n	8012b1e <USBD_SetConfig+0x3e>
 8012b18:	2b03      	cmp	r3, #3
 8012b1a:	d025      	beq.n	8012b68 <USBD_SetConfig+0x88>
 8012b1c:	e071      	b.n	8012c02 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012b1e:	4b42      	ldr	r3, [pc, #264]	@ (8012c28 <USBD_SetConfig+0x148>)
 8012b20:	781b      	ldrb	r3, [r3, #0]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d01c      	beq.n	8012b60 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8012b26:	4b40      	ldr	r3, [pc, #256]	@ (8012c28 <USBD_SetConfig+0x148>)
 8012b28:	781b      	ldrb	r3, [r3, #0]
 8012b2a:	461a      	mov	r2, r3
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012b30:	4b3d      	ldr	r3, [pc, #244]	@ (8012c28 <USBD_SetConfig+0x148>)
 8012b32:	781b      	ldrb	r3, [r3, #0]
 8012b34:	4619      	mov	r1, r3
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	f7ff f992 	bl	8011e60 <USBD_SetClassConfig>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012b40:	7bfb      	ldrb	r3, [r7, #15]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d004      	beq.n	8012b50 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8012b46:	6839      	ldr	r1, [r7, #0]
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	f000 f949 	bl	8012de0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012b4e:	e065      	b.n	8012c1c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f000 fa10 	bl	8012f76 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	2203      	movs	r2, #3
 8012b5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012b5e:	e05d      	b.n	8012c1c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f000 fa08 	bl	8012f76 <USBD_CtlSendStatus>
      break;
 8012b66:	e059      	b.n	8012c1c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012b68:	4b2f      	ldr	r3, [pc, #188]	@ (8012c28 <USBD_SetConfig+0x148>)
 8012b6a:	781b      	ldrb	r3, [r3, #0]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d112      	bne.n	8012b96 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	2202      	movs	r2, #2
 8012b74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8012b78:	4b2b      	ldr	r3, [pc, #172]	@ (8012c28 <USBD_SetConfig+0x148>)
 8012b7a:	781b      	ldrb	r3, [r3, #0]
 8012b7c:	461a      	mov	r2, r3
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012b82:	4b29      	ldr	r3, [pc, #164]	@ (8012c28 <USBD_SetConfig+0x148>)
 8012b84:	781b      	ldrb	r3, [r3, #0]
 8012b86:	4619      	mov	r1, r3
 8012b88:	6878      	ldr	r0, [r7, #4]
 8012b8a:	f7ff f985 	bl	8011e98 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	f000 f9f1 	bl	8012f76 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012b94:	e042      	b.n	8012c1c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012b96:	4b24      	ldr	r3, [pc, #144]	@ (8012c28 <USBD_SetConfig+0x148>)
 8012b98:	781b      	ldrb	r3, [r3, #0]
 8012b9a:	461a      	mov	r2, r3
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	685b      	ldr	r3, [r3, #4]
 8012ba0:	429a      	cmp	r2, r3
 8012ba2:	d02a      	beq.n	8012bfa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	685b      	ldr	r3, [r3, #4]
 8012ba8:	b2db      	uxtb	r3, r3
 8012baa:	4619      	mov	r1, r3
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f7ff f973 	bl	8011e98 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8012c28 <USBD_SetConfig+0x148>)
 8012bb4:	781b      	ldrb	r3, [r3, #0]
 8012bb6:	461a      	mov	r2, r3
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8012c28 <USBD_SetConfig+0x148>)
 8012bbe:	781b      	ldrb	r3, [r3, #0]
 8012bc0:	4619      	mov	r1, r3
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	f7ff f94c 	bl	8011e60 <USBD_SetClassConfig>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012bcc:	7bfb      	ldrb	r3, [r7, #15]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d00f      	beq.n	8012bf2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8012bd2:	6839      	ldr	r1, [r7, #0]
 8012bd4:	6878      	ldr	r0, [r7, #4]
 8012bd6:	f000 f903 	bl	8012de0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	685b      	ldr	r3, [r3, #4]
 8012bde:	b2db      	uxtb	r3, r3
 8012be0:	4619      	mov	r1, r3
 8012be2:	6878      	ldr	r0, [r7, #4]
 8012be4:	f7ff f958 	bl	8011e98 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2202      	movs	r2, #2
 8012bec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012bf0:	e014      	b.n	8012c1c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f000 f9bf 	bl	8012f76 <USBD_CtlSendStatus>
      break;
 8012bf8:	e010      	b.n	8012c1c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	f000 f9bb 	bl	8012f76 <USBD_CtlSendStatus>
      break;
 8012c00:	e00c      	b.n	8012c1c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8012c02:	6839      	ldr	r1, [r7, #0]
 8012c04:	6878      	ldr	r0, [r7, #4]
 8012c06:	f000 f8eb 	bl	8012de0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012c0a:	4b07      	ldr	r3, [pc, #28]	@ (8012c28 <USBD_SetConfig+0x148>)
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	4619      	mov	r1, r3
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f7ff f941 	bl	8011e98 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012c16:	2303      	movs	r3, #3
 8012c18:	73fb      	strb	r3, [r7, #15]
      break;
 8012c1a:	bf00      	nop
  }

  return ret;
 8012c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3710      	adds	r7, #16
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}
 8012c26:	bf00      	nop
 8012c28:	20003cc0 	.word	0x20003cc0

08012c2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b082      	sub	sp, #8
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	88db      	ldrh	r3, [r3, #6]
 8012c3a:	2b01      	cmp	r3, #1
 8012c3c:	d004      	beq.n	8012c48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012c3e:	6839      	ldr	r1, [r7, #0]
 8012c40:	6878      	ldr	r0, [r7, #4]
 8012c42:	f000 f8cd 	bl	8012de0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012c46:	e023      	b.n	8012c90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012c4e:	b2db      	uxtb	r3, r3
 8012c50:	2b02      	cmp	r3, #2
 8012c52:	dc02      	bgt.n	8012c5a <USBD_GetConfig+0x2e>
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	dc03      	bgt.n	8012c60 <USBD_GetConfig+0x34>
 8012c58:	e015      	b.n	8012c86 <USBD_GetConfig+0x5a>
 8012c5a:	2b03      	cmp	r3, #3
 8012c5c:	d00b      	beq.n	8012c76 <USBD_GetConfig+0x4a>
 8012c5e:	e012      	b.n	8012c86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2200      	movs	r2, #0
 8012c64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	3308      	adds	r3, #8
 8012c6a:	2201      	movs	r2, #1
 8012c6c:	4619      	mov	r1, r3
 8012c6e:	6878      	ldr	r0, [r7, #4]
 8012c70:	f000 f927 	bl	8012ec2 <USBD_CtlSendData>
        break;
 8012c74:	e00c      	b.n	8012c90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	3304      	adds	r3, #4
 8012c7a:	2201      	movs	r2, #1
 8012c7c:	4619      	mov	r1, r3
 8012c7e:	6878      	ldr	r0, [r7, #4]
 8012c80:	f000 f91f 	bl	8012ec2 <USBD_CtlSendData>
        break;
 8012c84:	e004      	b.n	8012c90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012c86:	6839      	ldr	r1, [r7, #0]
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f000 f8a9 	bl	8012de0 <USBD_CtlError>
        break;
 8012c8e:	bf00      	nop
}
 8012c90:	bf00      	nop
 8012c92:	3708      	adds	r7, #8
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd80      	pop	{r7, pc}

08012c98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b082      	sub	sp, #8
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
 8012ca0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ca8:	b2db      	uxtb	r3, r3
 8012caa:	3b01      	subs	r3, #1
 8012cac:	2b02      	cmp	r3, #2
 8012cae:	d81e      	bhi.n	8012cee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	88db      	ldrh	r3, [r3, #6]
 8012cb4:	2b02      	cmp	r3, #2
 8012cb6:	d004      	beq.n	8012cc2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012cb8:	6839      	ldr	r1, [r7, #0]
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f000 f890 	bl	8012de0 <USBD_CtlError>
        break;
 8012cc0:	e01a      	b.n	8012cf8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2201      	movs	r2, #1
 8012cc6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d005      	beq.n	8012cde <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	68db      	ldr	r3, [r3, #12]
 8012cd6:	f043 0202 	orr.w	r2, r3, #2
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	330c      	adds	r3, #12
 8012ce2:	2202      	movs	r2, #2
 8012ce4:	4619      	mov	r1, r3
 8012ce6:	6878      	ldr	r0, [r7, #4]
 8012ce8:	f000 f8eb 	bl	8012ec2 <USBD_CtlSendData>
      break;
 8012cec:	e004      	b.n	8012cf8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012cee:	6839      	ldr	r1, [r7, #0]
 8012cf0:	6878      	ldr	r0, [r7, #4]
 8012cf2:	f000 f875 	bl	8012de0 <USBD_CtlError>
      break;
 8012cf6:	bf00      	nop
  }
}
 8012cf8:	bf00      	nop
 8012cfa:	3708      	adds	r7, #8
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}

08012d00 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	885b      	ldrh	r3, [r3, #2]
 8012d0e:	2b01      	cmp	r3, #1
 8012d10:	d106      	bne.n	8012d20 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	2201      	movs	r2, #1
 8012d16:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	f000 f92b 	bl	8012f76 <USBD_CtlSendStatus>
  }
}
 8012d20:	bf00      	nop
 8012d22:	3708      	adds	r7, #8
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}

08012d28 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b082      	sub	sp, #8
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
 8012d30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012d38:	b2db      	uxtb	r3, r3
 8012d3a:	3b01      	subs	r3, #1
 8012d3c:	2b02      	cmp	r3, #2
 8012d3e:	d80b      	bhi.n	8012d58 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	885b      	ldrh	r3, [r3, #2]
 8012d44:	2b01      	cmp	r3, #1
 8012d46:	d10c      	bne.n	8012d62 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012d50:	6878      	ldr	r0, [r7, #4]
 8012d52:	f000 f910 	bl	8012f76 <USBD_CtlSendStatus>
      }
      break;
 8012d56:	e004      	b.n	8012d62 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012d58:	6839      	ldr	r1, [r7, #0]
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f000 f840 	bl	8012de0 <USBD_CtlError>
      break;
 8012d60:	e000      	b.n	8012d64 <USBD_ClrFeature+0x3c>
      break;
 8012d62:	bf00      	nop
  }
}
 8012d64:	bf00      	nop
 8012d66:	3708      	adds	r7, #8
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}

08012d6c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b084      	sub	sp, #16
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
 8012d74:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	781a      	ldrb	r2, [r3, #0]
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	3301      	adds	r3, #1
 8012d86:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	781a      	ldrb	r2, [r3, #0]
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	3301      	adds	r3, #1
 8012d94:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012d96:	68f8      	ldr	r0, [r7, #12]
 8012d98:	f7ff fa92 	bl	80122c0 <SWAPBYTE>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	461a      	mov	r2, r3
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	3301      	adds	r3, #1
 8012da8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	3301      	adds	r3, #1
 8012dae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012db0:	68f8      	ldr	r0, [r7, #12]
 8012db2:	f7ff fa85 	bl	80122c0 <SWAPBYTE>
 8012db6:	4603      	mov	r3, r0
 8012db8:	461a      	mov	r2, r3
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	3301      	adds	r3, #1
 8012dc2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012dca:	68f8      	ldr	r0, [r7, #12]
 8012dcc:	f7ff fa78 	bl	80122c0 <SWAPBYTE>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	461a      	mov	r2, r3
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	80da      	strh	r2, [r3, #6]
}
 8012dd8:	bf00      	nop
 8012dda:	3710      	adds	r7, #16
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}

08012de0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b082      	sub	sp, #8
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012dea:	2180      	movs	r1, #128	@ 0x80
 8012dec:	6878      	ldr	r0, [r7, #4]
 8012dee:	f000 fc6f 	bl	80136d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012df2:	2100      	movs	r1, #0
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f000 fc6b 	bl	80136d0 <USBD_LL_StallEP>
}
 8012dfa:	bf00      	nop
 8012dfc:	3708      	adds	r7, #8
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}

08012e02 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012e02:	b580      	push	{r7, lr}
 8012e04:	b086      	sub	sp, #24
 8012e06:	af00      	add	r7, sp, #0
 8012e08:	60f8      	str	r0, [r7, #12]
 8012e0a:	60b9      	str	r1, [r7, #8]
 8012e0c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012e0e:	2300      	movs	r3, #0
 8012e10:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d036      	beq.n	8012e86 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012e1c:	6938      	ldr	r0, [r7, #16]
 8012e1e:	f000 f836 	bl	8012e8e <USBD_GetLen>
 8012e22:	4603      	mov	r3, r0
 8012e24:	3301      	adds	r3, #1
 8012e26:	b29b      	uxth	r3, r3
 8012e28:	005b      	lsls	r3, r3, #1
 8012e2a:	b29a      	uxth	r2, r3
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012e30:	7dfb      	ldrb	r3, [r7, #23]
 8012e32:	68ba      	ldr	r2, [r7, #8]
 8012e34:	4413      	add	r3, r2
 8012e36:	687a      	ldr	r2, [r7, #4]
 8012e38:	7812      	ldrb	r2, [r2, #0]
 8012e3a:	701a      	strb	r2, [r3, #0]
  idx++;
 8012e3c:	7dfb      	ldrb	r3, [r7, #23]
 8012e3e:	3301      	adds	r3, #1
 8012e40:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012e42:	7dfb      	ldrb	r3, [r7, #23]
 8012e44:	68ba      	ldr	r2, [r7, #8]
 8012e46:	4413      	add	r3, r2
 8012e48:	2203      	movs	r2, #3
 8012e4a:	701a      	strb	r2, [r3, #0]
  idx++;
 8012e4c:	7dfb      	ldrb	r3, [r7, #23]
 8012e4e:	3301      	adds	r3, #1
 8012e50:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012e52:	e013      	b.n	8012e7c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012e54:	7dfb      	ldrb	r3, [r7, #23]
 8012e56:	68ba      	ldr	r2, [r7, #8]
 8012e58:	4413      	add	r3, r2
 8012e5a:	693a      	ldr	r2, [r7, #16]
 8012e5c:	7812      	ldrb	r2, [r2, #0]
 8012e5e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012e60:	693b      	ldr	r3, [r7, #16]
 8012e62:	3301      	adds	r3, #1
 8012e64:	613b      	str	r3, [r7, #16]
    idx++;
 8012e66:	7dfb      	ldrb	r3, [r7, #23]
 8012e68:	3301      	adds	r3, #1
 8012e6a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012e6c:	7dfb      	ldrb	r3, [r7, #23]
 8012e6e:	68ba      	ldr	r2, [r7, #8]
 8012e70:	4413      	add	r3, r2
 8012e72:	2200      	movs	r2, #0
 8012e74:	701a      	strb	r2, [r3, #0]
    idx++;
 8012e76:	7dfb      	ldrb	r3, [r7, #23]
 8012e78:	3301      	adds	r3, #1
 8012e7a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012e7c:	693b      	ldr	r3, [r7, #16]
 8012e7e:	781b      	ldrb	r3, [r3, #0]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d1e7      	bne.n	8012e54 <USBD_GetString+0x52>
 8012e84:	e000      	b.n	8012e88 <USBD_GetString+0x86>
    return;
 8012e86:	bf00      	nop
  }
}
 8012e88:	3718      	adds	r7, #24
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}

08012e8e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012e8e:	b480      	push	{r7}
 8012e90:	b085      	sub	sp, #20
 8012e92:	af00      	add	r7, sp, #0
 8012e94:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012e96:	2300      	movs	r3, #0
 8012e98:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012e9e:	e005      	b.n	8012eac <USBD_GetLen+0x1e>
  {
    len++;
 8012ea0:	7bfb      	ldrb	r3, [r7, #15]
 8012ea2:	3301      	adds	r3, #1
 8012ea4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	3301      	adds	r3, #1
 8012eaa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012eac:	68bb      	ldr	r3, [r7, #8]
 8012eae:	781b      	ldrb	r3, [r3, #0]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d1f5      	bne.n	8012ea0 <USBD_GetLen+0x12>
  }

  return len;
 8012eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	3714      	adds	r7, #20
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec0:	4770      	bx	lr

08012ec2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012ec2:	b580      	push	{r7, lr}
 8012ec4:	b084      	sub	sp, #16
 8012ec6:	af00      	add	r7, sp, #0
 8012ec8:	60f8      	str	r0, [r7, #12]
 8012eca:	60b9      	str	r1, [r7, #8]
 8012ecc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	2202      	movs	r2, #2
 8012ed2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	687a      	ldr	r2, [r7, #4]
 8012eda:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	687a      	ldr	r2, [r7, #4]
 8012ee0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	68ba      	ldr	r2, [r7, #8]
 8012ee6:	2100      	movs	r1, #0
 8012ee8:	68f8      	ldr	r0, [r7, #12]
 8012eea:	f000 fc7a 	bl	80137e2 <USBD_LL_Transmit>

  return USBD_OK;
 8012eee:	2300      	movs	r3, #0
}
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	3710      	adds	r7, #16
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd80      	pop	{r7, pc}

08012ef8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b084      	sub	sp, #16
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	60f8      	str	r0, [r7, #12]
 8012f00:	60b9      	str	r1, [r7, #8]
 8012f02:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	68ba      	ldr	r2, [r7, #8]
 8012f08:	2100      	movs	r1, #0
 8012f0a:	68f8      	ldr	r0, [r7, #12]
 8012f0c:	f000 fc69 	bl	80137e2 <USBD_LL_Transmit>

  return USBD_OK;
 8012f10:	2300      	movs	r3, #0
}
 8012f12:	4618      	mov	r0, r3
 8012f14:	3710      	adds	r7, #16
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}

08012f1a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012f1a:	b580      	push	{r7, lr}
 8012f1c:	b084      	sub	sp, #16
 8012f1e:	af00      	add	r7, sp, #0
 8012f20:	60f8      	str	r0, [r7, #12]
 8012f22:	60b9      	str	r1, [r7, #8]
 8012f24:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	2203      	movs	r2, #3
 8012f2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	687a      	ldr	r2, [r7, #4]
 8012f32:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	687a      	ldr	r2, [r7, #4]
 8012f3a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	68ba      	ldr	r2, [r7, #8]
 8012f42:	2100      	movs	r1, #0
 8012f44:	68f8      	ldr	r0, [r7, #12]
 8012f46:	f000 fc6d 	bl	8013824 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012f4a:	2300      	movs	r3, #0
}
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	3710      	adds	r7, #16
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd80      	pop	{r7, pc}

08012f54 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b084      	sub	sp, #16
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	60f8      	str	r0, [r7, #12]
 8012f5c:	60b9      	str	r1, [r7, #8]
 8012f5e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	68ba      	ldr	r2, [r7, #8]
 8012f64:	2100      	movs	r1, #0
 8012f66:	68f8      	ldr	r0, [r7, #12]
 8012f68:	f000 fc5c 	bl	8013824 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012f6c:	2300      	movs	r3, #0
}
 8012f6e:	4618      	mov	r0, r3
 8012f70:	3710      	adds	r7, #16
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}

08012f76 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012f76:	b580      	push	{r7, lr}
 8012f78:	b082      	sub	sp, #8
 8012f7a:	af00      	add	r7, sp, #0
 8012f7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	2204      	movs	r2, #4
 8012f82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012f86:	2300      	movs	r3, #0
 8012f88:	2200      	movs	r2, #0
 8012f8a:	2100      	movs	r1, #0
 8012f8c:	6878      	ldr	r0, [r7, #4]
 8012f8e:	f000 fc28 	bl	80137e2 <USBD_LL_Transmit>

  return USBD_OK;
 8012f92:	2300      	movs	r3, #0
}
 8012f94:	4618      	mov	r0, r3
 8012f96:	3708      	adds	r7, #8
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}

08012f9c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b082      	sub	sp, #8
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	2205      	movs	r2, #5
 8012fa8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012fac:	2300      	movs	r3, #0
 8012fae:	2200      	movs	r2, #0
 8012fb0:	2100      	movs	r1, #0
 8012fb2:	6878      	ldr	r0, [r7, #4]
 8012fb4:	f000 fc36 	bl	8013824 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012fb8:	2300      	movs	r3, #0
}
 8012fba:	4618      	mov	r0, r3
 8012fbc:	3708      	adds	r7, #8
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}
	...

08012fc4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8012fc8:	2200      	movs	r2, #0
 8012fca:	4912      	ldr	r1, [pc, #72]	@ (8013014 <MX_USB_Device_Init+0x50>)
 8012fcc:	4812      	ldr	r0, [pc, #72]	@ (8013018 <MX_USB_Device_Init+0x54>)
 8012fce:	f7fe fed9 	bl	8011d84 <USBD_Init>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d001      	beq.n	8012fdc <MX_USB_Device_Init+0x18>
    Error_Handler();
 8012fd8:	f7ef fe52 	bl	8002c80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8012fdc:	490f      	ldr	r1, [pc, #60]	@ (801301c <MX_USB_Device_Init+0x58>)
 8012fde:	480e      	ldr	r0, [pc, #56]	@ (8013018 <MX_USB_Device_Init+0x54>)
 8012fe0:	f7fe ff00 	bl	8011de4 <USBD_RegisterClass>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d001      	beq.n	8012fee <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8012fea:	f7ef fe49 	bl	8002c80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8012fee:	490c      	ldr	r1, [pc, #48]	@ (8013020 <MX_USB_Device_Init+0x5c>)
 8012ff0:	4809      	ldr	r0, [pc, #36]	@ (8013018 <MX_USB_Device_Init+0x54>)
 8012ff2:	f7fe fe51 	bl	8011c98 <USBD_CDC_RegisterInterface>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d001      	beq.n	8013000 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8012ffc:	f7ef fe40 	bl	8002c80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8013000:	4805      	ldr	r0, [pc, #20]	@ (8013018 <MX_USB_Device_Init+0x54>)
 8013002:	f7fe ff16 	bl	8011e32 <USBD_Start>
 8013006:	4603      	mov	r3, r0
 8013008:	2b00      	cmp	r3, #0
 801300a:	d001      	beq.n	8013010 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 801300c:	f7ef fe38 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8013010:	bf00      	nop
 8013012:	bd80      	pop	{r7, pc}
 8013014:	20000174 	.word	0x20000174
 8013018:	20003cc4 	.word	0x20003cc4
 801301c:	2000005c 	.word	0x2000005c
 8013020:	20000160 	.word	0x20000160

08013024 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013028:	2200      	movs	r2, #0
 801302a:	4905      	ldr	r1, [pc, #20]	@ (8013040 <CDC_Init_FS+0x1c>)
 801302c:	4805      	ldr	r0, [pc, #20]	@ (8013044 <CDC_Init_FS+0x20>)
 801302e:	f7fe fe48 	bl	8011cc2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013032:	4905      	ldr	r1, [pc, #20]	@ (8013048 <CDC_Init_FS+0x24>)
 8013034:	4803      	ldr	r0, [pc, #12]	@ (8013044 <CDC_Init_FS+0x20>)
 8013036:	f7fe fe62 	bl	8011cfe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801303a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801303c:	4618      	mov	r0, r3
 801303e:	bd80      	pop	{r7, pc}
 8013040:	20004394 	.word	0x20004394
 8013044:	20003cc4 	.word	0x20003cc4
 8013048:	20003f94 	.word	0x20003f94

0801304c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801304c:	b480      	push	{r7}
 801304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013050:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013052:	4618      	mov	r0, r3
 8013054:	46bd      	mov	sp, r7
 8013056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305a:	4770      	bx	lr

0801305c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801305c:	b480      	push	{r7}
 801305e:	b083      	sub	sp, #12
 8013060:	af00      	add	r7, sp, #0
 8013062:	4603      	mov	r3, r0
 8013064:	6039      	str	r1, [r7, #0]
 8013066:	71fb      	strb	r3, [r7, #7]
 8013068:	4613      	mov	r3, r2
 801306a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801306c:	79fb      	ldrb	r3, [r7, #7]
 801306e:	2b23      	cmp	r3, #35	@ 0x23
 8013070:	d84a      	bhi.n	8013108 <CDC_Control_FS+0xac>
 8013072:	a201      	add	r2, pc, #4	@ (adr r2, 8013078 <CDC_Control_FS+0x1c>)
 8013074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013078:	08013109 	.word	0x08013109
 801307c:	08013109 	.word	0x08013109
 8013080:	08013109 	.word	0x08013109
 8013084:	08013109 	.word	0x08013109
 8013088:	08013109 	.word	0x08013109
 801308c:	08013109 	.word	0x08013109
 8013090:	08013109 	.word	0x08013109
 8013094:	08013109 	.word	0x08013109
 8013098:	08013109 	.word	0x08013109
 801309c:	08013109 	.word	0x08013109
 80130a0:	08013109 	.word	0x08013109
 80130a4:	08013109 	.word	0x08013109
 80130a8:	08013109 	.word	0x08013109
 80130ac:	08013109 	.word	0x08013109
 80130b0:	08013109 	.word	0x08013109
 80130b4:	08013109 	.word	0x08013109
 80130b8:	08013109 	.word	0x08013109
 80130bc:	08013109 	.word	0x08013109
 80130c0:	08013109 	.word	0x08013109
 80130c4:	08013109 	.word	0x08013109
 80130c8:	08013109 	.word	0x08013109
 80130cc:	08013109 	.word	0x08013109
 80130d0:	08013109 	.word	0x08013109
 80130d4:	08013109 	.word	0x08013109
 80130d8:	08013109 	.word	0x08013109
 80130dc:	08013109 	.word	0x08013109
 80130e0:	08013109 	.word	0x08013109
 80130e4:	08013109 	.word	0x08013109
 80130e8:	08013109 	.word	0x08013109
 80130ec:	08013109 	.word	0x08013109
 80130f0:	08013109 	.word	0x08013109
 80130f4:	08013109 	.word	0x08013109
 80130f8:	08013109 	.word	0x08013109
 80130fc:	08013109 	.word	0x08013109
 8013100:	08013109 	.word	0x08013109
 8013104:	08013109 	.word	0x08013109
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013108:	bf00      	nop
  }

  return (USBD_OK);
 801310a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801310c:	4618      	mov	r0, r3
 801310e:	370c      	adds	r7, #12
 8013110:	46bd      	mov	sp, r7
 8013112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013116:	4770      	bx	lr

08013118 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b082      	sub	sp, #8
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013122:	6879      	ldr	r1, [r7, #4]
 8013124:	4805      	ldr	r0, [pc, #20]	@ (801313c <CDC_Receive_FS+0x24>)
 8013126:	f7fe fdea 	bl	8011cfe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801312a:	4804      	ldr	r0, [pc, #16]	@ (801313c <CDC_Receive_FS+0x24>)
 801312c:	f7fe fe00 	bl	8011d30 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013130:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013132:	4618      	mov	r0, r3
 8013134:	3708      	adds	r7, #8
 8013136:	46bd      	mov	sp, r7
 8013138:	bd80      	pop	{r7, pc}
 801313a:	bf00      	nop
 801313c:	20003cc4 	.word	0x20003cc4

08013140 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013140:	b480      	push	{r7}
 8013142:	b087      	sub	sp, #28
 8013144:	af00      	add	r7, sp, #0
 8013146:	60f8      	str	r0, [r7, #12]
 8013148:	60b9      	str	r1, [r7, #8]
 801314a:	4613      	mov	r3, r2
 801314c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801314e:	2300      	movs	r3, #0
 8013150:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8013152:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013156:	4618      	mov	r0, r3
 8013158:	371c      	adds	r7, #28
 801315a:	46bd      	mov	sp, r7
 801315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013160:	4770      	bx	lr
	...

08013164 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013164:	b480      	push	{r7}
 8013166:	b083      	sub	sp, #12
 8013168:	af00      	add	r7, sp, #0
 801316a:	4603      	mov	r3, r0
 801316c:	6039      	str	r1, [r7, #0]
 801316e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	2212      	movs	r2, #18
 8013174:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8013176:	4b03      	ldr	r3, [pc, #12]	@ (8013184 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8013178:	4618      	mov	r0, r3
 801317a:	370c      	adds	r7, #12
 801317c:	46bd      	mov	sp, r7
 801317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013182:	4770      	bx	lr
 8013184:	20000194 	.word	0x20000194

08013188 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013188:	b480      	push	{r7}
 801318a:	b083      	sub	sp, #12
 801318c:	af00      	add	r7, sp, #0
 801318e:	4603      	mov	r3, r0
 8013190:	6039      	str	r1, [r7, #0]
 8013192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	2204      	movs	r2, #4
 8013198:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801319a:	4b03      	ldr	r3, [pc, #12]	@ (80131a8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801319c:	4618      	mov	r0, r3
 801319e:	370c      	adds	r7, #12
 80131a0:	46bd      	mov	sp, r7
 80131a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a6:	4770      	bx	lr
 80131a8:	200001a8 	.word	0x200001a8

080131ac <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b082      	sub	sp, #8
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	4603      	mov	r3, r0
 80131b4:	6039      	str	r1, [r7, #0]
 80131b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80131b8:	79fb      	ldrb	r3, [r7, #7]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d105      	bne.n	80131ca <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80131be:	683a      	ldr	r2, [r7, #0]
 80131c0:	4907      	ldr	r1, [pc, #28]	@ (80131e0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80131c2:	4808      	ldr	r0, [pc, #32]	@ (80131e4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80131c4:	f7ff fe1d 	bl	8012e02 <USBD_GetString>
 80131c8:	e004      	b.n	80131d4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80131ca:	683a      	ldr	r2, [r7, #0]
 80131cc:	4904      	ldr	r1, [pc, #16]	@ (80131e0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80131ce:	4805      	ldr	r0, [pc, #20]	@ (80131e4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80131d0:	f7ff fe17 	bl	8012e02 <USBD_GetString>
  }
  return USBD_StrDesc;
 80131d4:	4b02      	ldr	r3, [pc, #8]	@ (80131e0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80131d6:	4618      	mov	r0, r3
 80131d8:	3708      	adds	r7, #8
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}
 80131de:	bf00      	nop
 80131e0:	20004794 	.word	0x20004794
 80131e4:	080181b8 	.word	0x080181b8

080131e8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b082      	sub	sp, #8
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	4603      	mov	r3, r0
 80131f0:	6039      	str	r1, [r7, #0]
 80131f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80131f4:	683a      	ldr	r2, [r7, #0]
 80131f6:	4904      	ldr	r1, [pc, #16]	@ (8013208 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80131f8:	4804      	ldr	r0, [pc, #16]	@ (801320c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80131fa:	f7ff fe02 	bl	8012e02 <USBD_GetString>
  return USBD_StrDesc;
 80131fe:	4b02      	ldr	r3, [pc, #8]	@ (8013208 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8013200:	4618      	mov	r0, r3
 8013202:	3708      	adds	r7, #8
 8013204:	46bd      	mov	sp, r7
 8013206:	bd80      	pop	{r7, pc}
 8013208:	20004794 	.word	0x20004794
 801320c:	080181d0 	.word	0x080181d0

08013210 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013210:	b580      	push	{r7, lr}
 8013212:	b082      	sub	sp, #8
 8013214:	af00      	add	r7, sp, #0
 8013216:	4603      	mov	r3, r0
 8013218:	6039      	str	r1, [r7, #0]
 801321a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	221a      	movs	r2, #26
 8013220:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013222:	f000 f843 	bl	80132ac <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8013226:	4b02      	ldr	r3, [pc, #8]	@ (8013230 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8013228:	4618      	mov	r0, r3
 801322a:	3708      	adds	r7, #8
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}
 8013230:	200001ac 	.word	0x200001ac

08013234 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b082      	sub	sp, #8
 8013238:	af00      	add	r7, sp, #0
 801323a:	4603      	mov	r3, r0
 801323c:	6039      	str	r1, [r7, #0]
 801323e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013240:	79fb      	ldrb	r3, [r7, #7]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d105      	bne.n	8013252 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8013246:	683a      	ldr	r2, [r7, #0]
 8013248:	4907      	ldr	r1, [pc, #28]	@ (8013268 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801324a:	4808      	ldr	r0, [pc, #32]	@ (801326c <USBD_CDC_ConfigStrDescriptor+0x38>)
 801324c:	f7ff fdd9 	bl	8012e02 <USBD_GetString>
 8013250:	e004      	b.n	801325c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8013252:	683a      	ldr	r2, [r7, #0]
 8013254:	4904      	ldr	r1, [pc, #16]	@ (8013268 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8013256:	4805      	ldr	r0, [pc, #20]	@ (801326c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013258:	f7ff fdd3 	bl	8012e02 <USBD_GetString>
  }
  return USBD_StrDesc;
 801325c:	4b02      	ldr	r3, [pc, #8]	@ (8013268 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801325e:	4618      	mov	r0, r3
 8013260:	3708      	adds	r7, #8
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}
 8013266:	bf00      	nop
 8013268:	20004794 	.word	0x20004794
 801326c:	080181e4 	.word	0x080181e4

08013270 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b082      	sub	sp, #8
 8013274:	af00      	add	r7, sp, #0
 8013276:	4603      	mov	r3, r0
 8013278:	6039      	str	r1, [r7, #0]
 801327a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801327c:	79fb      	ldrb	r3, [r7, #7]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d105      	bne.n	801328e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8013282:	683a      	ldr	r2, [r7, #0]
 8013284:	4907      	ldr	r1, [pc, #28]	@ (80132a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8013286:	4808      	ldr	r0, [pc, #32]	@ (80132a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8013288:	f7ff fdbb 	bl	8012e02 <USBD_GetString>
 801328c:	e004      	b.n	8013298 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801328e:	683a      	ldr	r2, [r7, #0]
 8013290:	4904      	ldr	r1, [pc, #16]	@ (80132a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8013292:	4805      	ldr	r0, [pc, #20]	@ (80132a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8013294:	f7ff fdb5 	bl	8012e02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013298:	4b02      	ldr	r3, [pc, #8]	@ (80132a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801329a:	4618      	mov	r0, r3
 801329c:	3708      	adds	r7, #8
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}
 80132a2:	bf00      	nop
 80132a4:	20004794 	.word	0x20004794
 80132a8:	080181f0 	.word	0x080181f0

080132ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b084      	sub	sp, #16
 80132b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80132b2:	4b0f      	ldr	r3, [pc, #60]	@ (80132f0 <Get_SerialNum+0x44>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80132b8:	4b0e      	ldr	r3, [pc, #56]	@ (80132f4 <Get_SerialNum+0x48>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80132be:	4b0e      	ldr	r3, [pc, #56]	@ (80132f8 <Get_SerialNum+0x4c>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80132c4:	68fa      	ldr	r2, [r7, #12]
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	4413      	add	r3, r2
 80132ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d009      	beq.n	80132e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80132d2:	2208      	movs	r2, #8
 80132d4:	4909      	ldr	r1, [pc, #36]	@ (80132fc <Get_SerialNum+0x50>)
 80132d6:	68f8      	ldr	r0, [r7, #12]
 80132d8:	f000 f814 	bl	8013304 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80132dc:	2204      	movs	r2, #4
 80132de:	4908      	ldr	r1, [pc, #32]	@ (8013300 <Get_SerialNum+0x54>)
 80132e0:	68b8      	ldr	r0, [r7, #8]
 80132e2:	f000 f80f 	bl	8013304 <IntToUnicode>
  }
}
 80132e6:	bf00      	nop
 80132e8:	3710      	adds	r7, #16
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}
 80132ee:	bf00      	nop
 80132f0:	1fff7590 	.word	0x1fff7590
 80132f4:	1fff7594 	.word	0x1fff7594
 80132f8:	1fff7598 	.word	0x1fff7598
 80132fc:	200001ae 	.word	0x200001ae
 8013300:	200001be 	.word	0x200001be

08013304 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013304:	b480      	push	{r7}
 8013306:	b087      	sub	sp, #28
 8013308:	af00      	add	r7, sp, #0
 801330a:	60f8      	str	r0, [r7, #12]
 801330c:	60b9      	str	r1, [r7, #8]
 801330e:	4613      	mov	r3, r2
 8013310:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013312:	2300      	movs	r3, #0
 8013314:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013316:	2300      	movs	r3, #0
 8013318:	75fb      	strb	r3, [r7, #23]
 801331a:	e027      	b.n	801336c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	0f1b      	lsrs	r3, r3, #28
 8013320:	2b09      	cmp	r3, #9
 8013322:	d80b      	bhi.n	801333c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	0f1b      	lsrs	r3, r3, #28
 8013328:	b2da      	uxtb	r2, r3
 801332a:	7dfb      	ldrb	r3, [r7, #23]
 801332c:	005b      	lsls	r3, r3, #1
 801332e:	4619      	mov	r1, r3
 8013330:	68bb      	ldr	r3, [r7, #8]
 8013332:	440b      	add	r3, r1
 8013334:	3230      	adds	r2, #48	@ 0x30
 8013336:	b2d2      	uxtb	r2, r2
 8013338:	701a      	strb	r2, [r3, #0]
 801333a:	e00a      	b.n	8013352 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	0f1b      	lsrs	r3, r3, #28
 8013340:	b2da      	uxtb	r2, r3
 8013342:	7dfb      	ldrb	r3, [r7, #23]
 8013344:	005b      	lsls	r3, r3, #1
 8013346:	4619      	mov	r1, r3
 8013348:	68bb      	ldr	r3, [r7, #8]
 801334a:	440b      	add	r3, r1
 801334c:	3237      	adds	r2, #55	@ 0x37
 801334e:	b2d2      	uxtb	r2, r2
 8013350:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	011b      	lsls	r3, r3, #4
 8013356:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013358:	7dfb      	ldrb	r3, [r7, #23]
 801335a:	005b      	lsls	r3, r3, #1
 801335c:	3301      	adds	r3, #1
 801335e:	68ba      	ldr	r2, [r7, #8]
 8013360:	4413      	add	r3, r2
 8013362:	2200      	movs	r2, #0
 8013364:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013366:	7dfb      	ldrb	r3, [r7, #23]
 8013368:	3301      	adds	r3, #1
 801336a:	75fb      	strb	r3, [r7, #23]
 801336c:	7dfa      	ldrb	r2, [r7, #23]
 801336e:	79fb      	ldrb	r3, [r7, #7]
 8013370:	429a      	cmp	r2, r3
 8013372:	d3d3      	bcc.n	801331c <IntToUnicode+0x18>
  }
}
 8013374:	bf00      	nop
 8013376:	bf00      	nop
 8013378:	371c      	adds	r7, #28
 801337a:	46bd      	mov	sp, r7
 801337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013380:	4770      	bx	lr
	...

08013384 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b098      	sub	sp, #96	@ 0x60
 8013388:	af00      	add	r7, sp, #0
 801338a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801338c:	f107 030c 	add.w	r3, r7, #12
 8013390:	2254      	movs	r2, #84	@ 0x54
 8013392:	2100      	movs	r1, #0
 8013394:	4618      	mov	r0, r3
 8013396:	f001 fa9c 	bl	80148d2 <memset>
  if(pcdHandle->Instance==USB)
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	4a15      	ldr	r2, [pc, #84]	@ (80133f4 <HAL_PCD_MspInit+0x70>)
 80133a0:	4293      	cmp	r3, r2
 80133a2:	d122      	bne.n	80133ea <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80133a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80133a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80133aa:	2300      	movs	r3, #0
 80133ac:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80133ae:	f107 030c 	add.w	r3, r7, #12
 80133b2:	4618      	mov	r0, r3
 80133b4:	f7f8 fe7e 	bl	800c0b4 <HAL_RCCEx_PeriphCLKConfig>
 80133b8:	4603      	mov	r3, r0
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d001      	beq.n	80133c2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80133be:	f7ef fc5f 	bl	8002c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80133c2:	4b0d      	ldr	r3, [pc, #52]	@ (80133f8 <HAL_PCD_MspInit+0x74>)
 80133c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80133c6:	4a0c      	ldr	r2, [pc, #48]	@ (80133f8 <HAL_PCD_MspInit+0x74>)
 80133c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80133cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80133ce:	4b0a      	ldr	r3, [pc, #40]	@ (80133f8 <HAL_PCD_MspInit+0x74>)
 80133d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80133d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80133d6:	60bb      	str	r3, [r7, #8]
 80133d8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80133da:	2200      	movs	r2, #0
 80133dc:	2100      	movs	r1, #0
 80133de:	2014      	movs	r0, #20
 80133e0:	f7f3 fe6d 	bl	80070be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80133e4:	2014      	movs	r0, #20
 80133e6:	f7f3 fe84 	bl	80070f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80133ea:	bf00      	nop
 80133ec:	3760      	adds	r7, #96	@ 0x60
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
 80133f2:	bf00      	nop
 80133f4:	40005c00 	.word	0x40005c00
 80133f8:	40021000 	.word	0x40021000

080133fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b082      	sub	sp, #8
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8013410:	4619      	mov	r1, r3
 8013412:	4610      	mov	r0, r2
 8013414:	f7fe fd58 	bl	8011ec8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8013418:	bf00      	nop
 801341a:	3708      	adds	r7, #8
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}

08013420 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b082      	sub	sp, #8
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
 8013428:	460b      	mov	r3, r1
 801342a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8013432:	78fa      	ldrb	r2, [r7, #3]
 8013434:	6879      	ldr	r1, [r7, #4]
 8013436:	4613      	mov	r3, r2
 8013438:	009b      	lsls	r3, r3, #2
 801343a:	4413      	add	r3, r2
 801343c:	00db      	lsls	r3, r3, #3
 801343e:	440b      	add	r3, r1
 8013440:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013444:	681a      	ldr	r2, [r3, #0]
 8013446:	78fb      	ldrb	r3, [r7, #3]
 8013448:	4619      	mov	r1, r3
 801344a:	f7fe fd92 	bl	8011f72 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801344e:	bf00      	nop
 8013450:	3708      	adds	r7, #8
 8013452:	46bd      	mov	sp, r7
 8013454:	bd80      	pop	{r7, pc}

08013456 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013456:	b580      	push	{r7, lr}
 8013458:	b082      	sub	sp, #8
 801345a:	af00      	add	r7, sp, #0
 801345c:	6078      	str	r0, [r7, #4]
 801345e:	460b      	mov	r3, r1
 8013460:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8013468:	78fa      	ldrb	r2, [r7, #3]
 801346a:	6879      	ldr	r1, [r7, #4]
 801346c:	4613      	mov	r3, r2
 801346e:	009b      	lsls	r3, r3, #2
 8013470:	4413      	add	r3, r2
 8013472:	00db      	lsls	r3, r3, #3
 8013474:	440b      	add	r3, r1
 8013476:	3324      	adds	r3, #36	@ 0x24
 8013478:	681a      	ldr	r2, [r3, #0]
 801347a:	78fb      	ldrb	r3, [r7, #3]
 801347c:	4619      	mov	r1, r3
 801347e:	f7fe fddb 	bl	8012038 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8013482:	bf00      	nop
 8013484:	3708      	adds	r7, #8
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}

0801348a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801348a:	b580      	push	{r7, lr}
 801348c:	b082      	sub	sp, #8
 801348e:	af00      	add	r7, sp, #0
 8013490:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013498:	4618      	mov	r0, r3
 801349a:	f7fe feef 	bl	801227c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801349e:	bf00      	nop
 80134a0:	3708      	adds	r7, #8
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}

080134a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80134a6:	b580      	push	{r7, lr}
 80134a8:	b084      	sub	sp, #16
 80134aa:	af00      	add	r7, sp, #0
 80134ac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80134ae:	2301      	movs	r3, #1
 80134b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	795b      	ldrb	r3, [r3, #5]
 80134b6:	2b02      	cmp	r3, #2
 80134b8:	d001      	beq.n	80134be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80134ba:	f7ef fbe1 	bl	8002c80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80134c4:	7bfa      	ldrb	r2, [r7, #15]
 80134c6:	4611      	mov	r1, r2
 80134c8:	4618      	mov	r0, r3
 80134ca:	f7fe fe99 	bl	8012200 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80134d4:	4618      	mov	r0, r3
 80134d6:	f7fe fe45 	bl	8012164 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80134da:	bf00      	nop
 80134dc:	3710      	adds	r7, #16
 80134de:	46bd      	mov	sp, r7
 80134e0:	bd80      	pop	{r7, pc}
	...

080134e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b082      	sub	sp, #8
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80134f2:	4618      	mov	r0, r3
 80134f4:	f7fe fe94 	bl	8012220 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	7a5b      	ldrb	r3, [r3, #9]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d005      	beq.n	801350c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013500:	4b04      	ldr	r3, [pc, #16]	@ (8013514 <HAL_PCD_SuspendCallback+0x30>)
 8013502:	691b      	ldr	r3, [r3, #16]
 8013504:	4a03      	ldr	r2, [pc, #12]	@ (8013514 <HAL_PCD_SuspendCallback+0x30>)
 8013506:	f043 0306 	orr.w	r3, r3, #6
 801350a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801350c:	bf00      	nop
 801350e:	3708      	adds	r7, #8
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}
 8013514:	e000ed00 	.word	0xe000ed00

08013518 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b082      	sub	sp, #8
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	7a5b      	ldrb	r3, [r3, #9]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d007      	beq.n	8013538 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013528:	4b08      	ldr	r3, [pc, #32]	@ (801354c <HAL_PCD_ResumeCallback+0x34>)
 801352a:	691b      	ldr	r3, [r3, #16]
 801352c:	4a07      	ldr	r2, [pc, #28]	@ (801354c <HAL_PCD_ResumeCallback+0x34>)
 801352e:	f023 0306 	bic.w	r3, r3, #6
 8013532:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013534:	f000 f9f8 	bl	8013928 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801353e:	4618      	mov	r0, r3
 8013540:	f7fe fe84 	bl	801224c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8013544:	bf00      	nop
 8013546:	3708      	adds	r7, #8
 8013548:	46bd      	mov	sp, r7
 801354a:	bd80      	pop	{r7, pc}
 801354c:	e000ed00 	.word	0xe000ed00

08013550 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013550:	b580      	push	{r7, lr}
 8013552:	b082      	sub	sp, #8
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8013558:	4a2b      	ldr	r2, [pc, #172]	@ (8013608 <USBD_LL_Init+0xb8>)
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	4a29      	ldr	r2, [pc, #164]	@ (8013608 <USBD_LL_Init+0xb8>)
 8013564:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8013568:	4b27      	ldr	r3, [pc, #156]	@ (8013608 <USBD_LL_Init+0xb8>)
 801356a:	4a28      	ldr	r2, [pc, #160]	@ (801360c <USBD_LL_Init+0xbc>)
 801356c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801356e:	4b26      	ldr	r3, [pc, #152]	@ (8013608 <USBD_LL_Init+0xb8>)
 8013570:	2208      	movs	r2, #8
 8013572:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8013574:	4b24      	ldr	r3, [pc, #144]	@ (8013608 <USBD_LL_Init+0xb8>)
 8013576:	2202      	movs	r2, #2
 8013578:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801357a:	4b23      	ldr	r3, [pc, #140]	@ (8013608 <USBD_LL_Init+0xb8>)
 801357c:	2202      	movs	r2, #2
 801357e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8013580:	4b21      	ldr	r3, [pc, #132]	@ (8013608 <USBD_LL_Init+0xb8>)
 8013582:	2200      	movs	r2, #0
 8013584:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8013586:	4b20      	ldr	r3, [pc, #128]	@ (8013608 <USBD_LL_Init+0xb8>)
 8013588:	2200      	movs	r2, #0
 801358a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801358c:	4b1e      	ldr	r3, [pc, #120]	@ (8013608 <USBD_LL_Init+0xb8>)
 801358e:	2200      	movs	r2, #0
 8013590:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8013592:	4b1d      	ldr	r3, [pc, #116]	@ (8013608 <USBD_LL_Init+0xb8>)
 8013594:	2200      	movs	r2, #0
 8013596:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8013598:	481b      	ldr	r0, [pc, #108]	@ (8013608 <USBD_LL_Init+0xb8>)
 801359a:	f7f6 fa7b 	bl	8009a94 <HAL_PCD_Init>
 801359e:	4603      	mov	r3, r0
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d001      	beq.n	80135a8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80135a4:	f7ef fb6c 	bl	8002c80 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80135ae:	2318      	movs	r3, #24
 80135b0:	2200      	movs	r2, #0
 80135b2:	2100      	movs	r1, #0
 80135b4:	f7f7 ff02 	bl	800b3bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80135be:	2358      	movs	r3, #88	@ 0x58
 80135c0:	2200      	movs	r2, #0
 80135c2:	2180      	movs	r1, #128	@ 0x80
 80135c4:	f7f7 fefa 	bl	800b3bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80135ce:	23c0      	movs	r3, #192	@ 0xc0
 80135d0:	2200      	movs	r2, #0
 80135d2:	2181      	movs	r1, #129	@ 0x81
 80135d4:	f7f7 fef2 	bl	800b3bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80135de:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80135e2:	2200      	movs	r2, #0
 80135e4:	2101      	movs	r1, #1
 80135e6:	f7f7 fee9 	bl	800b3bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80135f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80135f4:	2200      	movs	r2, #0
 80135f6:	2182      	movs	r1, #130	@ 0x82
 80135f8:	f7f7 fee0 	bl	800b3bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80135fc:	2300      	movs	r3, #0
}
 80135fe:	4618      	mov	r0, r3
 8013600:	3708      	adds	r7, #8
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
 8013606:	bf00      	nop
 8013608:	20004994 	.word	0x20004994
 801360c:	40005c00 	.word	0x40005c00

08013610 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b084      	sub	sp, #16
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013618:	2300      	movs	r3, #0
 801361a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801361c:	2300      	movs	r3, #0
 801361e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8013626:	4618      	mov	r0, r3
 8013628:	f7f6 fb02 	bl	8009c30 <HAL_PCD_Start>
 801362c:	4603      	mov	r3, r0
 801362e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013630:	7bfb      	ldrb	r3, [r7, #15]
 8013632:	4618      	mov	r0, r3
 8013634:	f000 f97e 	bl	8013934 <USBD_Get_USB_Status>
 8013638:	4603      	mov	r3, r0
 801363a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801363c:	7bbb      	ldrb	r3, [r7, #14]
}
 801363e:	4618      	mov	r0, r3
 8013640:	3710      	adds	r7, #16
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}

08013646 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013646:	b580      	push	{r7, lr}
 8013648:	b084      	sub	sp, #16
 801364a:	af00      	add	r7, sp, #0
 801364c:	6078      	str	r0, [r7, #4]
 801364e:	4608      	mov	r0, r1
 8013650:	4611      	mov	r1, r2
 8013652:	461a      	mov	r2, r3
 8013654:	4603      	mov	r3, r0
 8013656:	70fb      	strb	r3, [r7, #3]
 8013658:	460b      	mov	r3, r1
 801365a:	70bb      	strb	r3, [r7, #2]
 801365c:	4613      	mov	r3, r2
 801365e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013660:	2300      	movs	r3, #0
 8013662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013664:	2300      	movs	r3, #0
 8013666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801366e:	78bb      	ldrb	r3, [r7, #2]
 8013670:	883a      	ldrh	r2, [r7, #0]
 8013672:	78f9      	ldrb	r1, [r7, #3]
 8013674:	f7f6 fc49 	bl	8009f0a <HAL_PCD_EP_Open>
 8013678:	4603      	mov	r3, r0
 801367a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801367c:	7bfb      	ldrb	r3, [r7, #15]
 801367e:	4618      	mov	r0, r3
 8013680:	f000 f958 	bl	8013934 <USBD_Get_USB_Status>
 8013684:	4603      	mov	r3, r0
 8013686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013688:	7bbb      	ldrb	r3, [r7, #14]
}
 801368a:	4618      	mov	r0, r3
 801368c:	3710      	adds	r7, #16
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}

08013692 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013692:	b580      	push	{r7, lr}
 8013694:	b084      	sub	sp, #16
 8013696:	af00      	add	r7, sp, #0
 8013698:	6078      	str	r0, [r7, #4]
 801369a:	460b      	mov	r3, r1
 801369c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801369e:	2300      	movs	r3, #0
 80136a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136a2:	2300      	movs	r3, #0
 80136a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80136ac:	78fa      	ldrb	r2, [r7, #3]
 80136ae:	4611      	mov	r1, r2
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7f6 fc89 	bl	8009fc8 <HAL_PCD_EP_Close>
 80136b6:	4603      	mov	r3, r0
 80136b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80136ba:	7bfb      	ldrb	r3, [r7, #15]
 80136bc:	4618      	mov	r0, r3
 80136be:	f000 f939 	bl	8013934 <USBD_Get_USB_Status>
 80136c2:	4603      	mov	r3, r0
 80136c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80136c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80136c8:	4618      	mov	r0, r3
 80136ca:	3710      	adds	r7, #16
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}

080136d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b084      	sub	sp, #16
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
 80136d8:	460b      	mov	r3, r1
 80136da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136dc:	2300      	movs	r3, #0
 80136de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136e0:	2300      	movs	r3, #0
 80136e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80136ea:	78fa      	ldrb	r2, [r7, #3]
 80136ec:	4611      	mov	r1, r2
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7f6 fd32 	bl	800a158 <HAL_PCD_EP_SetStall>
 80136f4:	4603      	mov	r3, r0
 80136f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80136f8:	7bfb      	ldrb	r3, [r7, #15]
 80136fa:	4618      	mov	r0, r3
 80136fc:	f000 f91a 	bl	8013934 <USBD_Get_USB_Status>
 8013700:	4603      	mov	r3, r0
 8013702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013704:	7bbb      	ldrb	r3, [r7, #14]
}
 8013706:	4618      	mov	r0, r3
 8013708:	3710      	adds	r7, #16
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}

0801370e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801370e:	b580      	push	{r7, lr}
 8013710:	b084      	sub	sp, #16
 8013712:	af00      	add	r7, sp, #0
 8013714:	6078      	str	r0, [r7, #4]
 8013716:	460b      	mov	r3, r1
 8013718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801371a:	2300      	movs	r3, #0
 801371c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801371e:	2300      	movs	r3, #0
 8013720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8013728:	78fa      	ldrb	r2, [r7, #3]
 801372a:	4611      	mov	r1, r2
 801372c:	4618      	mov	r0, r3
 801372e:	f7f6 fd65 	bl	800a1fc <HAL_PCD_EP_ClrStall>
 8013732:	4603      	mov	r3, r0
 8013734:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013736:	7bfb      	ldrb	r3, [r7, #15]
 8013738:	4618      	mov	r0, r3
 801373a:	f000 f8fb 	bl	8013934 <USBD_Get_USB_Status>
 801373e:	4603      	mov	r3, r0
 8013740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013742:	7bbb      	ldrb	r3, [r7, #14]
}
 8013744:	4618      	mov	r0, r3
 8013746:	3710      	adds	r7, #16
 8013748:	46bd      	mov	sp, r7
 801374a:	bd80      	pop	{r7, pc}

0801374c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801374c:	b480      	push	{r7}
 801374e:	b085      	sub	sp, #20
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	460b      	mov	r3, r1
 8013756:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801375e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013764:	2b00      	cmp	r3, #0
 8013766:	da0b      	bge.n	8013780 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013768:	78fb      	ldrb	r3, [r7, #3]
 801376a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801376e:	68f9      	ldr	r1, [r7, #12]
 8013770:	4613      	mov	r3, r2
 8013772:	009b      	lsls	r3, r3, #2
 8013774:	4413      	add	r3, r2
 8013776:	00db      	lsls	r3, r3, #3
 8013778:	440b      	add	r3, r1
 801377a:	3312      	adds	r3, #18
 801377c:	781b      	ldrb	r3, [r3, #0]
 801377e:	e00b      	b.n	8013798 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013780:	78fb      	ldrb	r3, [r7, #3]
 8013782:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013786:	68f9      	ldr	r1, [r7, #12]
 8013788:	4613      	mov	r3, r2
 801378a:	009b      	lsls	r3, r3, #2
 801378c:	4413      	add	r3, r2
 801378e:	00db      	lsls	r3, r3, #3
 8013790:	440b      	add	r3, r1
 8013792:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8013796:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013798:	4618      	mov	r0, r3
 801379a:	3714      	adds	r7, #20
 801379c:	46bd      	mov	sp, r7
 801379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a2:	4770      	bx	lr

080137a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b084      	sub	sp, #16
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
 80137ac:	460b      	mov	r3, r1
 80137ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80137b0:	2300      	movs	r3, #0
 80137b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80137b4:	2300      	movs	r3, #0
 80137b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80137be:	78fa      	ldrb	r2, [r7, #3]
 80137c0:	4611      	mov	r1, r2
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7f6 fb7d 	bl	8009ec2 <HAL_PCD_SetAddress>
 80137c8:	4603      	mov	r3, r0
 80137ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80137cc:	7bfb      	ldrb	r3, [r7, #15]
 80137ce:	4618      	mov	r0, r3
 80137d0:	f000 f8b0 	bl	8013934 <USBD_Get_USB_Status>
 80137d4:	4603      	mov	r3, r0
 80137d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80137d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80137da:	4618      	mov	r0, r3
 80137dc:	3710      	adds	r7, #16
 80137de:	46bd      	mov	sp, r7
 80137e0:	bd80      	pop	{r7, pc}

080137e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80137e2:	b580      	push	{r7, lr}
 80137e4:	b086      	sub	sp, #24
 80137e6:	af00      	add	r7, sp, #0
 80137e8:	60f8      	str	r0, [r7, #12]
 80137ea:	607a      	str	r2, [r7, #4]
 80137ec:	603b      	str	r3, [r7, #0]
 80137ee:	460b      	mov	r3, r1
 80137f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80137f2:	2300      	movs	r3, #0
 80137f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80137f6:	2300      	movs	r3, #0
 80137f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8013800:	7af9      	ldrb	r1, [r7, #11]
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	687a      	ldr	r2, [r7, #4]
 8013806:	f7f6 fc70 	bl	800a0ea <HAL_PCD_EP_Transmit>
 801380a:	4603      	mov	r3, r0
 801380c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801380e:	7dfb      	ldrb	r3, [r7, #23]
 8013810:	4618      	mov	r0, r3
 8013812:	f000 f88f 	bl	8013934 <USBD_Get_USB_Status>
 8013816:	4603      	mov	r3, r0
 8013818:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801381a:	7dbb      	ldrb	r3, [r7, #22]
}
 801381c:	4618      	mov	r0, r3
 801381e:	3718      	adds	r7, #24
 8013820:	46bd      	mov	sp, r7
 8013822:	bd80      	pop	{r7, pc}

08013824 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b086      	sub	sp, #24
 8013828:	af00      	add	r7, sp, #0
 801382a:	60f8      	str	r0, [r7, #12]
 801382c:	607a      	str	r2, [r7, #4]
 801382e:	603b      	str	r3, [r7, #0]
 8013830:	460b      	mov	r3, r1
 8013832:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013834:	2300      	movs	r3, #0
 8013836:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013838:	2300      	movs	r3, #0
 801383a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8013842:	7af9      	ldrb	r1, [r7, #11]
 8013844:	683b      	ldr	r3, [r7, #0]
 8013846:	687a      	ldr	r2, [r7, #4]
 8013848:	f7f6 fc06 	bl	800a058 <HAL_PCD_EP_Receive>
 801384c:	4603      	mov	r3, r0
 801384e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013850:	7dfb      	ldrb	r3, [r7, #23]
 8013852:	4618      	mov	r0, r3
 8013854:	f000 f86e 	bl	8013934 <USBD_Get_USB_Status>
 8013858:	4603      	mov	r3, r0
 801385a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801385c:	7dbb      	ldrb	r3, [r7, #22]
}
 801385e:	4618      	mov	r0, r3
 8013860:	3718      	adds	r7, #24
 8013862:	46bd      	mov	sp, r7
 8013864:	bd80      	pop	{r7, pc}

08013866 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013866:	b580      	push	{r7, lr}
 8013868:	b082      	sub	sp, #8
 801386a:	af00      	add	r7, sp, #0
 801386c:	6078      	str	r0, [r7, #4]
 801386e:	460b      	mov	r3, r1
 8013870:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8013878:	78fa      	ldrb	r2, [r7, #3]
 801387a:	4611      	mov	r1, r2
 801387c:	4618      	mov	r0, r3
 801387e:	f7f6 fc1c 	bl	800a0ba <HAL_PCD_EP_GetRxCount>
 8013882:	4603      	mov	r3, r0
}
 8013884:	4618      	mov	r0, r3
 8013886:	3708      	adds	r7, #8
 8013888:	46bd      	mov	sp, r7
 801388a:	bd80      	pop	{r7, pc}

0801388c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801388c:	b580      	push	{r7, lr}
 801388e:	b082      	sub	sp, #8
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
 8013894:	460b      	mov	r3, r1
 8013896:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8013898:	78fb      	ldrb	r3, [r7, #3]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d002      	beq.n	80138a4 <HAL_PCDEx_LPM_Callback+0x18>
 801389e:	2b01      	cmp	r3, #1
 80138a0:	d013      	beq.n	80138ca <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80138a2:	e023      	b.n	80138ec <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	7a5b      	ldrb	r3, [r3, #9]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d007      	beq.n	80138bc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80138ac:	f000 f83c 	bl	8013928 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80138b0:	4b10      	ldr	r3, [pc, #64]	@ (80138f4 <HAL_PCDEx_LPM_Callback+0x68>)
 80138b2:	691b      	ldr	r3, [r3, #16]
 80138b4:	4a0f      	ldr	r2, [pc, #60]	@ (80138f4 <HAL_PCDEx_LPM_Callback+0x68>)
 80138b6:	f023 0306 	bic.w	r3, r3, #6
 80138ba:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80138c2:	4618      	mov	r0, r3
 80138c4:	f7fe fcc2 	bl	801224c <USBD_LL_Resume>
    break;
 80138c8:	e010      	b.n	80138ec <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80138d0:	4618      	mov	r0, r3
 80138d2:	f7fe fca5 	bl	8012220 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	7a5b      	ldrb	r3, [r3, #9]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d005      	beq.n	80138ea <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80138de:	4b05      	ldr	r3, [pc, #20]	@ (80138f4 <HAL_PCDEx_LPM_Callback+0x68>)
 80138e0:	691b      	ldr	r3, [r3, #16]
 80138e2:	4a04      	ldr	r2, [pc, #16]	@ (80138f4 <HAL_PCDEx_LPM_Callback+0x68>)
 80138e4:	f043 0306 	orr.w	r3, r3, #6
 80138e8:	6113      	str	r3, [r2, #16]
    break;
 80138ea:	bf00      	nop
}
 80138ec:	bf00      	nop
 80138ee:	3708      	adds	r7, #8
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}
 80138f4:	e000ed00 	.word	0xe000ed00

080138f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80138f8:	b480      	push	{r7}
 80138fa:	b083      	sub	sp, #12
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013900:	4b03      	ldr	r3, [pc, #12]	@ (8013910 <USBD_static_malloc+0x18>)
}
 8013902:	4618      	mov	r0, r3
 8013904:	370c      	adds	r7, #12
 8013906:	46bd      	mov	sp, r7
 8013908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390c:	4770      	bx	lr
 801390e:	bf00      	nop
 8013910:	20004c70 	.word	0x20004c70

08013914 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013914:	b480      	push	{r7}
 8013916:	b083      	sub	sp, #12
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]

}
 801391c:	bf00      	nop
 801391e:	370c      	adds	r7, #12
 8013920:	46bd      	mov	sp, r7
 8013922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013926:	4770      	bx	lr

08013928 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801392c:	f7ed ff84 	bl	8001838 <SystemClock_Config>
}
 8013930:	bf00      	nop
 8013932:	bd80      	pop	{r7, pc}

08013934 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013934:	b480      	push	{r7}
 8013936:	b085      	sub	sp, #20
 8013938:	af00      	add	r7, sp, #0
 801393a:	4603      	mov	r3, r0
 801393c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801393e:	2300      	movs	r3, #0
 8013940:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013942:	79fb      	ldrb	r3, [r7, #7]
 8013944:	2b03      	cmp	r3, #3
 8013946:	d817      	bhi.n	8013978 <USBD_Get_USB_Status+0x44>
 8013948:	a201      	add	r2, pc, #4	@ (adr r2, 8013950 <USBD_Get_USB_Status+0x1c>)
 801394a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801394e:	bf00      	nop
 8013950:	08013961 	.word	0x08013961
 8013954:	08013967 	.word	0x08013967
 8013958:	0801396d 	.word	0x0801396d
 801395c:	08013973 	.word	0x08013973
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013960:	2300      	movs	r3, #0
 8013962:	73fb      	strb	r3, [r7, #15]
    break;
 8013964:	e00b      	b.n	801397e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013966:	2303      	movs	r3, #3
 8013968:	73fb      	strb	r3, [r7, #15]
    break;
 801396a:	e008      	b.n	801397e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801396c:	2301      	movs	r3, #1
 801396e:	73fb      	strb	r3, [r7, #15]
    break;
 8013970:	e005      	b.n	801397e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013972:	2303      	movs	r3, #3
 8013974:	73fb      	strb	r3, [r7, #15]
    break;
 8013976:	e002      	b.n	801397e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013978:	2303      	movs	r3, #3
 801397a:	73fb      	strb	r3, [r7, #15]
    break;
 801397c:	bf00      	nop
  }
  return usb_status;
 801397e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013980:	4618      	mov	r0, r3
 8013982:	3714      	adds	r7, #20
 8013984:	46bd      	mov	sp, r7
 8013986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398a:	4770      	bx	lr

0801398c <__cvt>:
 801398c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013990:	ec57 6b10 	vmov	r6, r7, d0
 8013994:	2f00      	cmp	r7, #0
 8013996:	460c      	mov	r4, r1
 8013998:	4619      	mov	r1, r3
 801399a:	463b      	mov	r3, r7
 801399c:	bfbb      	ittet	lt
 801399e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80139a2:	461f      	movlt	r7, r3
 80139a4:	2300      	movge	r3, #0
 80139a6:	232d      	movlt	r3, #45	@ 0x2d
 80139a8:	700b      	strb	r3, [r1, #0]
 80139aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80139ac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80139b0:	4691      	mov	r9, r2
 80139b2:	f023 0820 	bic.w	r8, r3, #32
 80139b6:	bfbc      	itt	lt
 80139b8:	4632      	movlt	r2, r6
 80139ba:	4616      	movlt	r6, r2
 80139bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80139c0:	d005      	beq.n	80139ce <__cvt+0x42>
 80139c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80139c6:	d100      	bne.n	80139ca <__cvt+0x3e>
 80139c8:	3401      	adds	r4, #1
 80139ca:	2102      	movs	r1, #2
 80139cc:	e000      	b.n	80139d0 <__cvt+0x44>
 80139ce:	2103      	movs	r1, #3
 80139d0:	ab03      	add	r3, sp, #12
 80139d2:	9301      	str	r3, [sp, #4]
 80139d4:	ab02      	add	r3, sp, #8
 80139d6:	9300      	str	r3, [sp, #0]
 80139d8:	ec47 6b10 	vmov	d0, r6, r7
 80139dc:	4653      	mov	r3, sl
 80139de:	4622      	mov	r2, r4
 80139e0:	f001 f886 	bl	8014af0 <_dtoa_r>
 80139e4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80139e8:	4605      	mov	r5, r0
 80139ea:	d119      	bne.n	8013a20 <__cvt+0x94>
 80139ec:	f019 0f01 	tst.w	r9, #1
 80139f0:	d00e      	beq.n	8013a10 <__cvt+0x84>
 80139f2:	eb00 0904 	add.w	r9, r0, r4
 80139f6:	2200      	movs	r2, #0
 80139f8:	2300      	movs	r3, #0
 80139fa:	4630      	mov	r0, r6
 80139fc:	4639      	mov	r1, r7
 80139fe:	f7ed f88b 	bl	8000b18 <__aeabi_dcmpeq>
 8013a02:	b108      	cbz	r0, 8013a08 <__cvt+0x7c>
 8013a04:	f8cd 900c 	str.w	r9, [sp, #12]
 8013a08:	2230      	movs	r2, #48	@ 0x30
 8013a0a:	9b03      	ldr	r3, [sp, #12]
 8013a0c:	454b      	cmp	r3, r9
 8013a0e:	d31e      	bcc.n	8013a4e <__cvt+0xc2>
 8013a10:	9b03      	ldr	r3, [sp, #12]
 8013a12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013a14:	1b5b      	subs	r3, r3, r5
 8013a16:	4628      	mov	r0, r5
 8013a18:	6013      	str	r3, [r2, #0]
 8013a1a:	b004      	add	sp, #16
 8013a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013a24:	eb00 0904 	add.w	r9, r0, r4
 8013a28:	d1e5      	bne.n	80139f6 <__cvt+0x6a>
 8013a2a:	7803      	ldrb	r3, [r0, #0]
 8013a2c:	2b30      	cmp	r3, #48	@ 0x30
 8013a2e:	d10a      	bne.n	8013a46 <__cvt+0xba>
 8013a30:	2200      	movs	r2, #0
 8013a32:	2300      	movs	r3, #0
 8013a34:	4630      	mov	r0, r6
 8013a36:	4639      	mov	r1, r7
 8013a38:	f7ed f86e 	bl	8000b18 <__aeabi_dcmpeq>
 8013a3c:	b918      	cbnz	r0, 8013a46 <__cvt+0xba>
 8013a3e:	f1c4 0401 	rsb	r4, r4, #1
 8013a42:	f8ca 4000 	str.w	r4, [sl]
 8013a46:	f8da 3000 	ldr.w	r3, [sl]
 8013a4a:	4499      	add	r9, r3
 8013a4c:	e7d3      	b.n	80139f6 <__cvt+0x6a>
 8013a4e:	1c59      	adds	r1, r3, #1
 8013a50:	9103      	str	r1, [sp, #12]
 8013a52:	701a      	strb	r2, [r3, #0]
 8013a54:	e7d9      	b.n	8013a0a <__cvt+0x7e>

08013a56 <__exponent>:
 8013a56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a58:	2900      	cmp	r1, #0
 8013a5a:	bfba      	itte	lt
 8013a5c:	4249      	neglt	r1, r1
 8013a5e:	232d      	movlt	r3, #45	@ 0x2d
 8013a60:	232b      	movge	r3, #43	@ 0x2b
 8013a62:	2909      	cmp	r1, #9
 8013a64:	7002      	strb	r2, [r0, #0]
 8013a66:	7043      	strb	r3, [r0, #1]
 8013a68:	dd29      	ble.n	8013abe <__exponent+0x68>
 8013a6a:	f10d 0307 	add.w	r3, sp, #7
 8013a6e:	461d      	mov	r5, r3
 8013a70:	270a      	movs	r7, #10
 8013a72:	461a      	mov	r2, r3
 8013a74:	fbb1 f6f7 	udiv	r6, r1, r7
 8013a78:	fb07 1416 	mls	r4, r7, r6, r1
 8013a7c:	3430      	adds	r4, #48	@ 0x30
 8013a7e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013a82:	460c      	mov	r4, r1
 8013a84:	2c63      	cmp	r4, #99	@ 0x63
 8013a86:	f103 33ff 	add.w	r3, r3, #4294967295
 8013a8a:	4631      	mov	r1, r6
 8013a8c:	dcf1      	bgt.n	8013a72 <__exponent+0x1c>
 8013a8e:	3130      	adds	r1, #48	@ 0x30
 8013a90:	1e94      	subs	r4, r2, #2
 8013a92:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013a96:	1c41      	adds	r1, r0, #1
 8013a98:	4623      	mov	r3, r4
 8013a9a:	42ab      	cmp	r3, r5
 8013a9c:	d30a      	bcc.n	8013ab4 <__exponent+0x5e>
 8013a9e:	f10d 0309 	add.w	r3, sp, #9
 8013aa2:	1a9b      	subs	r3, r3, r2
 8013aa4:	42ac      	cmp	r4, r5
 8013aa6:	bf88      	it	hi
 8013aa8:	2300      	movhi	r3, #0
 8013aaa:	3302      	adds	r3, #2
 8013aac:	4403      	add	r3, r0
 8013aae:	1a18      	subs	r0, r3, r0
 8013ab0:	b003      	add	sp, #12
 8013ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ab4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013ab8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013abc:	e7ed      	b.n	8013a9a <__exponent+0x44>
 8013abe:	2330      	movs	r3, #48	@ 0x30
 8013ac0:	3130      	adds	r1, #48	@ 0x30
 8013ac2:	7083      	strb	r3, [r0, #2]
 8013ac4:	70c1      	strb	r1, [r0, #3]
 8013ac6:	1d03      	adds	r3, r0, #4
 8013ac8:	e7f1      	b.n	8013aae <__exponent+0x58>
	...

08013acc <_printf_float>:
 8013acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ad0:	b08d      	sub	sp, #52	@ 0x34
 8013ad2:	460c      	mov	r4, r1
 8013ad4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013ad8:	4616      	mov	r6, r2
 8013ada:	461f      	mov	r7, r3
 8013adc:	4605      	mov	r5, r0
 8013ade:	f000 ff01 	bl	80148e4 <_localeconv_r>
 8013ae2:	6803      	ldr	r3, [r0, #0]
 8013ae4:	9304      	str	r3, [sp, #16]
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f7ec fbea 	bl	80002c0 <strlen>
 8013aec:	2300      	movs	r3, #0
 8013aee:	930a      	str	r3, [sp, #40]	@ 0x28
 8013af0:	f8d8 3000 	ldr.w	r3, [r8]
 8013af4:	9005      	str	r0, [sp, #20]
 8013af6:	3307      	adds	r3, #7
 8013af8:	f023 0307 	bic.w	r3, r3, #7
 8013afc:	f103 0208 	add.w	r2, r3, #8
 8013b00:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013b04:	f8d4 b000 	ldr.w	fp, [r4]
 8013b08:	f8c8 2000 	str.w	r2, [r8]
 8013b0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013b10:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013b14:	9307      	str	r3, [sp, #28]
 8013b16:	f8cd 8018 	str.w	r8, [sp, #24]
 8013b1a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013b1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b22:	4b9c      	ldr	r3, [pc, #624]	@ (8013d94 <_printf_float+0x2c8>)
 8013b24:	f04f 32ff 	mov.w	r2, #4294967295
 8013b28:	f7ed f828 	bl	8000b7c <__aeabi_dcmpun>
 8013b2c:	bb70      	cbnz	r0, 8013b8c <_printf_float+0xc0>
 8013b2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b32:	4b98      	ldr	r3, [pc, #608]	@ (8013d94 <_printf_float+0x2c8>)
 8013b34:	f04f 32ff 	mov.w	r2, #4294967295
 8013b38:	f7ed f802 	bl	8000b40 <__aeabi_dcmple>
 8013b3c:	bb30      	cbnz	r0, 8013b8c <_printf_float+0xc0>
 8013b3e:	2200      	movs	r2, #0
 8013b40:	2300      	movs	r3, #0
 8013b42:	4640      	mov	r0, r8
 8013b44:	4649      	mov	r1, r9
 8013b46:	f7ec fff1 	bl	8000b2c <__aeabi_dcmplt>
 8013b4a:	b110      	cbz	r0, 8013b52 <_printf_float+0x86>
 8013b4c:	232d      	movs	r3, #45	@ 0x2d
 8013b4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013b52:	4a91      	ldr	r2, [pc, #580]	@ (8013d98 <_printf_float+0x2cc>)
 8013b54:	4b91      	ldr	r3, [pc, #580]	@ (8013d9c <_printf_float+0x2d0>)
 8013b56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013b5a:	bf94      	ite	ls
 8013b5c:	4690      	movls	r8, r2
 8013b5e:	4698      	movhi	r8, r3
 8013b60:	2303      	movs	r3, #3
 8013b62:	6123      	str	r3, [r4, #16]
 8013b64:	f02b 0304 	bic.w	r3, fp, #4
 8013b68:	6023      	str	r3, [r4, #0]
 8013b6a:	f04f 0900 	mov.w	r9, #0
 8013b6e:	9700      	str	r7, [sp, #0]
 8013b70:	4633      	mov	r3, r6
 8013b72:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013b74:	4621      	mov	r1, r4
 8013b76:	4628      	mov	r0, r5
 8013b78:	f000 f9d2 	bl	8013f20 <_printf_common>
 8013b7c:	3001      	adds	r0, #1
 8013b7e:	f040 808d 	bne.w	8013c9c <_printf_float+0x1d0>
 8013b82:	f04f 30ff 	mov.w	r0, #4294967295
 8013b86:	b00d      	add	sp, #52	@ 0x34
 8013b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b8c:	4642      	mov	r2, r8
 8013b8e:	464b      	mov	r3, r9
 8013b90:	4640      	mov	r0, r8
 8013b92:	4649      	mov	r1, r9
 8013b94:	f7ec fff2 	bl	8000b7c <__aeabi_dcmpun>
 8013b98:	b140      	cbz	r0, 8013bac <_printf_float+0xe0>
 8013b9a:	464b      	mov	r3, r9
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	bfbc      	itt	lt
 8013ba0:	232d      	movlt	r3, #45	@ 0x2d
 8013ba2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013ba6:	4a7e      	ldr	r2, [pc, #504]	@ (8013da0 <_printf_float+0x2d4>)
 8013ba8:	4b7e      	ldr	r3, [pc, #504]	@ (8013da4 <_printf_float+0x2d8>)
 8013baa:	e7d4      	b.n	8013b56 <_printf_float+0x8a>
 8013bac:	6863      	ldr	r3, [r4, #4]
 8013bae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8013bb2:	9206      	str	r2, [sp, #24]
 8013bb4:	1c5a      	adds	r2, r3, #1
 8013bb6:	d13b      	bne.n	8013c30 <_printf_float+0x164>
 8013bb8:	2306      	movs	r3, #6
 8013bba:	6063      	str	r3, [r4, #4]
 8013bbc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	6022      	str	r2, [r4, #0]
 8013bc4:	9303      	str	r3, [sp, #12]
 8013bc6:	ab0a      	add	r3, sp, #40	@ 0x28
 8013bc8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013bcc:	ab09      	add	r3, sp, #36	@ 0x24
 8013bce:	9300      	str	r3, [sp, #0]
 8013bd0:	6861      	ldr	r1, [r4, #4]
 8013bd2:	ec49 8b10 	vmov	d0, r8, r9
 8013bd6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013bda:	4628      	mov	r0, r5
 8013bdc:	f7ff fed6 	bl	801398c <__cvt>
 8013be0:	9b06      	ldr	r3, [sp, #24]
 8013be2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013be4:	2b47      	cmp	r3, #71	@ 0x47
 8013be6:	4680      	mov	r8, r0
 8013be8:	d129      	bne.n	8013c3e <_printf_float+0x172>
 8013bea:	1cc8      	adds	r0, r1, #3
 8013bec:	db02      	blt.n	8013bf4 <_printf_float+0x128>
 8013bee:	6863      	ldr	r3, [r4, #4]
 8013bf0:	4299      	cmp	r1, r3
 8013bf2:	dd41      	ble.n	8013c78 <_printf_float+0x1ac>
 8013bf4:	f1aa 0a02 	sub.w	sl, sl, #2
 8013bf8:	fa5f fa8a 	uxtb.w	sl, sl
 8013bfc:	3901      	subs	r1, #1
 8013bfe:	4652      	mov	r2, sl
 8013c00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013c04:	9109      	str	r1, [sp, #36]	@ 0x24
 8013c06:	f7ff ff26 	bl	8013a56 <__exponent>
 8013c0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013c0c:	1813      	adds	r3, r2, r0
 8013c0e:	2a01      	cmp	r2, #1
 8013c10:	4681      	mov	r9, r0
 8013c12:	6123      	str	r3, [r4, #16]
 8013c14:	dc02      	bgt.n	8013c1c <_printf_float+0x150>
 8013c16:	6822      	ldr	r2, [r4, #0]
 8013c18:	07d2      	lsls	r2, r2, #31
 8013c1a:	d501      	bpl.n	8013c20 <_printf_float+0x154>
 8013c1c:	3301      	adds	r3, #1
 8013c1e:	6123      	str	r3, [r4, #16]
 8013c20:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d0a2      	beq.n	8013b6e <_printf_float+0xa2>
 8013c28:	232d      	movs	r3, #45	@ 0x2d
 8013c2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013c2e:	e79e      	b.n	8013b6e <_printf_float+0xa2>
 8013c30:	9a06      	ldr	r2, [sp, #24]
 8013c32:	2a47      	cmp	r2, #71	@ 0x47
 8013c34:	d1c2      	bne.n	8013bbc <_printf_float+0xf0>
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d1c0      	bne.n	8013bbc <_printf_float+0xf0>
 8013c3a:	2301      	movs	r3, #1
 8013c3c:	e7bd      	b.n	8013bba <_printf_float+0xee>
 8013c3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013c42:	d9db      	bls.n	8013bfc <_printf_float+0x130>
 8013c44:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8013c48:	d118      	bne.n	8013c7c <_printf_float+0x1b0>
 8013c4a:	2900      	cmp	r1, #0
 8013c4c:	6863      	ldr	r3, [r4, #4]
 8013c4e:	dd0b      	ble.n	8013c68 <_printf_float+0x19c>
 8013c50:	6121      	str	r1, [r4, #16]
 8013c52:	b913      	cbnz	r3, 8013c5a <_printf_float+0x18e>
 8013c54:	6822      	ldr	r2, [r4, #0]
 8013c56:	07d0      	lsls	r0, r2, #31
 8013c58:	d502      	bpl.n	8013c60 <_printf_float+0x194>
 8013c5a:	3301      	adds	r3, #1
 8013c5c:	440b      	add	r3, r1
 8013c5e:	6123      	str	r3, [r4, #16]
 8013c60:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013c62:	f04f 0900 	mov.w	r9, #0
 8013c66:	e7db      	b.n	8013c20 <_printf_float+0x154>
 8013c68:	b913      	cbnz	r3, 8013c70 <_printf_float+0x1a4>
 8013c6a:	6822      	ldr	r2, [r4, #0]
 8013c6c:	07d2      	lsls	r2, r2, #31
 8013c6e:	d501      	bpl.n	8013c74 <_printf_float+0x1a8>
 8013c70:	3302      	adds	r3, #2
 8013c72:	e7f4      	b.n	8013c5e <_printf_float+0x192>
 8013c74:	2301      	movs	r3, #1
 8013c76:	e7f2      	b.n	8013c5e <_printf_float+0x192>
 8013c78:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013c7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c7e:	4299      	cmp	r1, r3
 8013c80:	db05      	blt.n	8013c8e <_printf_float+0x1c2>
 8013c82:	6823      	ldr	r3, [r4, #0]
 8013c84:	6121      	str	r1, [r4, #16]
 8013c86:	07d8      	lsls	r0, r3, #31
 8013c88:	d5ea      	bpl.n	8013c60 <_printf_float+0x194>
 8013c8a:	1c4b      	adds	r3, r1, #1
 8013c8c:	e7e7      	b.n	8013c5e <_printf_float+0x192>
 8013c8e:	2900      	cmp	r1, #0
 8013c90:	bfd4      	ite	le
 8013c92:	f1c1 0202 	rsble	r2, r1, #2
 8013c96:	2201      	movgt	r2, #1
 8013c98:	4413      	add	r3, r2
 8013c9a:	e7e0      	b.n	8013c5e <_printf_float+0x192>
 8013c9c:	6823      	ldr	r3, [r4, #0]
 8013c9e:	055a      	lsls	r2, r3, #21
 8013ca0:	d407      	bmi.n	8013cb2 <_printf_float+0x1e6>
 8013ca2:	6923      	ldr	r3, [r4, #16]
 8013ca4:	4642      	mov	r2, r8
 8013ca6:	4631      	mov	r1, r6
 8013ca8:	4628      	mov	r0, r5
 8013caa:	47b8      	blx	r7
 8013cac:	3001      	adds	r0, #1
 8013cae:	d12b      	bne.n	8013d08 <_printf_float+0x23c>
 8013cb0:	e767      	b.n	8013b82 <_printf_float+0xb6>
 8013cb2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013cb6:	f240 80dd 	bls.w	8013e74 <_printf_float+0x3a8>
 8013cba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	f7ec ff29 	bl	8000b18 <__aeabi_dcmpeq>
 8013cc6:	2800      	cmp	r0, #0
 8013cc8:	d033      	beq.n	8013d32 <_printf_float+0x266>
 8013cca:	4a37      	ldr	r2, [pc, #220]	@ (8013da8 <_printf_float+0x2dc>)
 8013ccc:	2301      	movs	r3, #1
 8013cce:	4631      	mov	r1, r6
 8013cd0:	4628      	mov	r0, r5
 8013cd2:	47b8      	blx	r7
 8013cd4:	3001      	adds	r0, #1
 8013cd6:	f43f af54 	beq.w	8013b82 <_printf_float+0xb6>
 8013cda:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013cde:	4543      	cmp	r3, r8
 8013ce0:	db02      	blt.n	8013ce8 <_printf_float+0x21c>
 8013ce2:	6823      	ldr	r3, [r4, #0]
 8013ce4:	07d8      	lsls	r0, r3, #31
 8013ce6:	d50f      	bpl.n	8013d08 <_printf_float+0x23c>
 8013ce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013cec:	4631      	mov	r1, r6
 8013cee:	4628      	mov	r0, r5
 8013cf0:	47b8      	blx	r7
 8013cf2:	3001      	adds	r0, #1
 8013cf4:	f43f af45 	beq.w	8013b82 <_printf_float+0xb6>
 8013cf8:	f04f 0900 	mov.w	r9, #0
 8013cfc:	f108 38ff 	add.w	r8, r8, #4294967295
 8013d00:	f104 0a1a 	add.w	sl, r4, #26
 8013d04:	45c8      	cmp	r8, r9
 8013d06:	dc09      	bgt.n	8013d1c <_printf_float+0x250>
 8013d08:	6823      	ldr	r3, [r4, #0]
 8013d0a:	079b      	lsls	r3, r3, #30
 8013d0c:	f100 8103 	bmi.w	8013f16 <_printf_float+0x44a>
 8013d10:	68e0      	ldr	r0, [r4, #12]
 8013d12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013d14:	4298      	cmp	r0, r3
 8013d16:	bfb8      	it	lt
 8013d18:	4618      	movlt	r0, r3
 8013d1a:	e734      	b.n	8013b86 <_printf_float+0xba>
 8013d1c:	2301      	movs	r3, #1
 8013d1e:	4652      	mov	r2, sl
 8013d20:	4631      	mov	r1, r6
 8013d22:	4628      	mov	r0, r5
 8013d24:	47b8      	blx	r7
 8013d26:	3001      	adds	r0, #1
 8013d28:	f43f af2b 	beq.w	8013b82 <_printf_float+0xb6>
 8013d2c:	f109 0901 	add.w	r9, r9, #1
 8013d30:	e7e8      	b.n	8013d04 <_printf_float+0x238>
 8013d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	dc39      	bgt.n	8013dac <_printf_float+0x2e0>
 8013d38:	4a1b      	ldr	r2, [pc, #108]	@ (8013da8 <_printf_float+0x2dc>)
 8013d3a:	2301      	movs	r3, #1
 8013d3c:	4631      	mov	r1, r6
 8013d3e:	4628      	mov	r0, r5
 8013d40:	47b8      	blx	r7
 8013d42:	3001      	adds	r0, #1
 8013d44:	f43f af1d 	beq.w	8013b82 <_printf_float+0xb6>
 8013d48:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013d4c:	ea59 0303 	orrs.w	r3, r9, r3
 8013d50:	d102      	bne.n	8013d58 <_printf_float+0x28c>
 8013d52:	6823      	ldr	r3, [r4, #0]
 8013d54:	07d9      	lsls	r1, r3, #31
 8013d56:	d5d7      	bpl.n	8013d08 <_printf_float+0x23c>
 8013d58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013d5c:	4631      	mov	r1, r6
 8013d5e:	4628      	mov	r0, r5
 8013d60:	47b8      	blx	r7
 8013d62:	3001      	adds	r0, #1
 8013d64:	f43f af0d 	beq.w	8013b82 <_printf_float+0xb6>
 8013d68:	f04f 0a00 	mov.w	sl, #0
 8013d6c:	f104 0b1a 	add.w	fp, r4, #26
 8013d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d72:	425b      	negs	r3, r3
 8013d74:	4553      	cmp	r3, sl
 8013d76:	dc01      	bgt.n	8013d7c <_printf_float+0x2b0>
 8013d78:	464b      	mov	r3, r9
 8013d7a:	e793      	b.n	8013ca4 <_printf_float+0x1d8>
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	465a      	mov	r2, fp
 8013d80:	4631      	mov	r1, r6
 8013d82:	4628      	mov	r0, r5
 8013d84:	47b8      	blx	r7
 8013d86:	3001      	adds	r0, #1
 8013d88:	f43f aefb 	beq.w	8013b82 <_printf_float+0xb6>
 8013d8c:	f10a 0a01 	add.w	sl, sl, #1
 8013d90:	e7ee      	b.n	8013d70 <_printf_float+0x2a4>
 8013d92:	bf00      	nop
 8013d94:	7fefffff 	.word	0x7fefffff
 8013d98:	0802600c 	.word	0x0802600c
 8013d9c:	08026010 	.word	0x08026010
 8013da0:	08026014 	.word	0x08026014
 8013da4:	08026018 	.word	0x08026018
 8013da8:	0802601c 	.word	0x0802601c
 8013dac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013dae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013db2:	4553      	cmp	r3, sl
 8013db4:	bfa8      	it	ge
 8013db6:	4653      	movge	r3, sl
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	4699      	mov	r9, r3
 8013dbc:	dc36      	bgt.n	8013e2c <_printf_float+0x360>
 8013dbe:	f04f 0b00 	mov.w	fp, #0
 8013dc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013dc6:	f104 021a 	add.w	r2, r4, #26
 8013dca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013dcc:	9306      	str	r3, [sp, #24]
 8013dce:	eba3 0309 	sub.w	r3, r3, r9
 8013dd2:	455b      	cmp	r3, fp
 8013dd4:	dc31      	bgt.n	8013e3a <_printf_float+0x36e>
 8013dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013dd8:	459a      	cmp	sl, r3
 8013dda:	dc3a      	bgt.n	8013e52 <_printf_float+0x386>
 8013ddc:	6823      	ldr	r3, [r4, #0]
 8013dde:	07da      	lsls	r2, r3, #31
 8013de0:	d437      	bmi.n	8013e52 <_printf_float+0x386>
 8013de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013de4:	ebaa 0903 	sub.w	r9, sl, r3
 8013de8:	9b06      	ldr	r3, [sp, #24]
 8013dea:	ebaa 0303 	sub.w	r3, sl, r3
 8013dee:	4599      	cmp	r9, r3
 8013df0:	bfa8      	it	ge
 8013df2:	4699      	movge	r9, r3
 8013df4:	f1b9 0f00 	cmp.w	r9, #0
 8013df8:	dc33      	bgt.n	8013e62 <_printf_float+0x396>
 8013dfa:	f04f 0800 	mov.w	r8, #0
 8013dfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013e02:	f104 0b1a 	add.w	fp, r4, #26
 8013e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e08:	ebaa 0303 	sub.w	r3, sl, r3
 8013e0c:	eba3 0309 	sub.w	r3, r3, r9
 8013e10:	4543      	cmp	r3, r8
 8013e12:	f77f af79 	ble.w	8013d08 <_printf_float+0x23c>
 8013e16:	2301      	movs	r3, #1
 8013e18:	465a      	mov	r2, fp
 8013e1a:	4631      	mov	r1, r6
 8013e1c:	4628      	mov	r0, r5
 8013e1e:	47b8      	blx	r7
 8013e20:	3001      	adds	r0, #1
 8013e22:	f43f aeae 	beq.w	8013b82 <_printf_float+0xb6>
 8013e26:	f108 0801 	add.w	r8, r8, #1
 8013e2a:	e7ec      	b.n	8013e06 <_printf_float+0x33a>
 8013e2c:	4642      	mov	r2, r8
 8013e2e:	4631      	mov	r1, r6
 8013e30:	4628      	mov	r0, r5
 8013e32:	47b8      	blx	r7
 8013e34:	3001      	adds	r0, #1
 8013e36:	d1c2      	bne.n	8013dbe <_printf_float+0x2f2>
 8013e38:	e6a3      	b.n	8013b82 <_printf_float+0xb6>
 8013e3a:	2301      	movs	r3, #1
 8013e3c:	4631      	mov	r1, r6
 8013e3e:	4628      	mov	r0, r5
 8013e40:	9206      	str	r2, [sp, #24]
 8013e42:	47b8      	blx	r7
 8013e44:	3001      	adds	r0, #1
 8013e46:	f43f ae9c 	beq.w	8013b82 <_printf_float+0xb6>
 8013e4a:	9a06      	ldr	r2, [sp, #24]
 8013e4c:	f10b 0b01 	add.w	fp, fp, #1
 8013e50:	e7bb      	b.n	8013dca <_printf_float+0x2fe>
 8013e52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e56:	4631      	mov	r1, r6
 8013e58:	4628      	mov	r0, r5
 8013e5a:	47b8      	blx	r7
 8013e5c:	3001      	adds	r0, #1
 8013e5e:	d1c0      	bne.n	8013de2 <_printf_float+0x316>
 8013e60:	e68f      	b.n	8013b82 <_printf_float+0xb6>
 8013e62:	9a06      	ldr	r2, [sp, #24]
 8013e64:	464b      	mov	r3, r9
 8013e66:	4442      	add	r2, r8
 8013e68:	4631      	mov	r1, r6
 8013e6a:	4628      	mov	r0, r5
 8013e6c:	47b8      	blx	r7
 8013e6e:	3001      	adds	r0, #1
 8013e70:	d1c3      	bne.n	8013dfa <_printf_float+0x32e>
 8013e72:	e686      	b.n	8013b82 <_printf_float+0xb6>
 8013e74:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013e78:	f1ba 0f01 	cmp.w	sl, #1
 8013e7c:	dc01      	bgt.n	8013e82 <_printf_float+0x3b6>
 8013e7e:	07db      	lsls	r3, r3, #31
 8013e80:	d536      	bpl.n	8013ef0 <_printf_float+0x424>
 8013e82:	2301      	movs	r3, #1
 8013e84:	4642      	mov	r2, r8
 8013e86:	4631      	mov	r1, r6
 8013e88:	4628      	mov	r0, r5
 8013e8a:	47b8      	blx	r7
 8013e8c:	3001      	adds	r0, #1
 8013e8e:	f43f ae78 	beq.w	8013b82 <_printf_float+0xb6>
 8013e92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e96:	4631      	mov	r1, r6
 8013e98:	4628      	mov	r0, r5
 8013e9a:	47b8      	blx	r7
 8013e9c:	3001      	adds	r0, #1
 8013e9e:	f43f ae70 	beq.w	8013b82 <_printf_float+0xb6>
 8013ea2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013eae:	f7ec fe33 	bl	8000b18 <__aeabi_dcmpeq>
 8013eb2:	b9c0      	cbnz	r0, 8013ee6 <_printf_float+0x41a>
 8013eb4:	4653      	mov	r3, sl
 8013eb6:	f108 0201 	add.w	r2, r8, #1
 8013eba:	4631      	mov	r1, r6
 8013ebc:	4628      	mov	r0, r5
 8013ebe:	47b8      	blx	r7
 8013ec0:	3001      	adds	r0, #1
 8013ec2:	d10c      	bne.n	8013ede <_printf_float+0x412>
 8013ec4:	e65d      	b.n	8013b82 <_printf_float+0xb6>
 8013ec6:	2301      	movs	r3, #1
 8013ec8:	465a      	mov	r2, fp
 8013eca:	4631      	mov	r1, r6
 8013ecc:	4628      	mov	r0, r5
 8013ece:	47b8      	blx	r7
 8013ed0:	3001      	adds	r0, #1
 8013ed2:	f43f ae56 	beq.w	8013b82 <_printf_float+0xb6>
 8013ed6:	f108 0801 	add.w	r8, r8, #1
 8013eda:	45d0      	cmp	r8, sl
 8013edc:	dbf3      	blt.n	8013ec6 <_printf_float+0x3fa>
 8013ede:	464b      	mov	r3, r9
 8013ee0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013ee4:	e6df      	b.n	8013ca6 <_printf_float+0x1da>
 8013ee6:	f04f 0800 	mov.w	r8, #0
 8013eea:	f104 0b1a 	add.w	fp, r4, #26
 8013eee:	e7f4      	b.n	8013eda <_printf_float+0x40e>
 8013ef0:	2301      	movs	r3, #1
 8013ef2:	4642      	mov	r2, r8
 8013ef4:	e7e1      	b.n	8013eba <_printf_float+0x3ee>
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	464a      	mov	r2, r9
 8013efa:	4631      	mov	r1, r6
 8013efc:	4628      	mov	r0, r5
 8013efe:	47b8      	blx	r7
 8013f00:	3001      	adds	r0, #1
 8013f02:	f43f ae3e 	beq.w	8013b82 <_printf_float+0xb6>
 8013f06:	f108 0801 	add.w	r8, r8, #1
 8013f0a:	68e3      	ldr	r3, [r4, #12]
 8013f0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013f0e:	1a5b      	subs	r3, r3, r1
 8013f10:	4543      	cmp	r3, r8
 8013f12:	dcf0      	bgt.n	8013ef6 <_printf_float+0x42a>
 8013f14:	e6fc      	b.n	8013d10 <_printf_float+0x244>
 8013f16:	f04f 0800 	mov.w	r8, #0
 8013f1a:	f104 0919 	add.w	r9, r4, #25
 8013f1e:	e7f4      	b.n	8013f0a <_printf_float+0x43e>

08013f20 <_printf_common>:
 8013f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f24:	4616      	mov	r6, r2
 8013f26:	4698      	mov	r8, r3
 8013f28:	688a      	ldr	r2, [r1, #8]
 8013f2a:	690b      	ldr	r3, [r1, #16]
 8013f2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013f30:	4293      	cmp	r3, r2
 8013f32:	bfb8      	it	lt
 8013f34:	4613      	movlt	r3, r2
 8013f36:	6033      	str	r3, [r6, #0]
 8013f38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013f3c:	4607      	mov	r7, r0
 8013f3e:	460c      	mov	r4, r1
 8013f40:	b10a      	cbz	r2, 8013f46 <_printf_common+0x26>
 8013f42:	3301      	adds	r3, #1
 8013f44:	6033      	str	r3, [r6, #0]
 8013f46:	6823      	ldr	r3, [r4, #0]
 8013f48:	0699      	lsls	r1, r3, #26
 8013f4a:	bf42      	ittt	mi
 8013f4c:	6833      	ldrmi	r3, [r6, #0]
 8013f4e:	3302      	addmi	r3, #2
 8013f50:	6033      	strmi	r3, [r6, #0]
 8013f52:	6825      	ldr	r5, [r4, #0]
 8013f54:	f015 0506 	ands.w	r5, r5, #6
 8013f58:	d106      	bne.n	8013f68 <_printf_common+0x48>
 8013f5a:	f104 0a19 	add.w	sl, r4, #25
 8013f5e:	68e3      	ldr	r3, [r4, #12]
 8013f60:	6832      	ldr	r2, [r6, #0]
 8013f62:	1a9b      	subs	r3, r3, r2
 8013f64:	42ab      	cmp	r3, r5
 8013f66:	dc26      	bgt.n	8013fb6 <_printf_common+0x96>
 8013f68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013f6c:	6822      	ldr	r2, [r4, #0]
 8013f6e:	3b00      	subs	r3, #0
 8013f70:	bf18      	it	ne
 8013f72:	2301      	movne	r3, #1
 8013f74:	0692      	lsls	r2, r2, #26
 8013f76:	d42b      	bmi.n	8013fd0 <_printf_common+0xb0>
 8013f78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013f7c:	4641      	mov	r1, r8
 8013f7e:	4638      	mov	r0, r7
 8013f80:	47c8      	blx	r9
 8013f82:	3001      	adds	r0, #1
 8013f84:	d01e      	beq.n	8013fc4 <_printf_common+0xa4>
 8013f86:	6823      	ldr	r3, [r4, #0]
 8013f88:	6922      	ldr	r2, [r4, #16]
 8013f8a:	f003 0306 	and.w	r3, r3, #6
 8013f8e:	2b04      	cmp	r3, #4
 8013f90:	bf02      	ittt	eq
 8013f92:	68e5      	ldreq	r5, [r4, #12]
 8013f94:	6833      	ldreq	r3, [r6, #0]
 8013f96:	1aed      	subeq	r5, r5, r3
 8013f98:	68a3      	ldr	r3, [r4, #8]
 8013f9a:	bf0c      	ite	eq
 8013f9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013fa0:	2500      	movne	r5, #0
 8013fa2:	4293      	cmp	r3, r2
 8013fa4:	bfc4      	itt	gt
 8013fa6:	1a9b      	subgt	r3, r3, r2
 8013fa8:	18ed      	addgt	r5, r5, r3
 8013faa:	2600      	movs	r6, #0
 8013fac:	341a      	adds	r4, #26
 8013fae:	42b5      	cmp	r5, r6
 8013fb0:	d11a      	bne.n	8013fe8 <_printf_common+0xc8>
 8013fb2:	2000      	movs	r0, #0
 8013fb4:	e008      	b.n	8013fc8 <_printf_common+0xa8>
 8013fb6:	2301      	movs	r3, #1
 8013fb8:	4652      	mov	r2, sl
 8013fba:	4641      	mov	r1, r8
 8013fbc:	4638      	mov	r0, r7
 8013fbe:	47c8      	blx	r9
 8013fc0:	3001      	adds	r0, #1
 8013fc2:	d103      	bne.n	8013fcc <_printf_common+0xac>
 8013fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8013fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fcc:	3501      	adds	r5, #1
 8013fce:	e7c6      	b.n	8013f5e <_printf_common+0x3e>
 8013fd0:	18e1      	adds	r1, r4, r3
 8013fd2:	1c5a      	adds	r2, r3, #1
 8013fd4:	2030      	movs	r0, #48	@ 0x30
 8013fd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013fda:	4422      	add	r2, r4
 8013fdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013fe0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013fe4:	3302      	adds	r3, #2
 8013fe6:	e7c7      	b.n	8013f78 <_printf_common+0x58>
 8013fe8:	2301      	movs	r3, #1
 8013fea:	4622      	mov	r2, r4
 8013fec:	4641      	mov	r1, r8
 8013fee:	4638      	mov	r0, r7
 8013ff0:	47c8      	blx	r9
 8013ff2:	3001      	adds	r0, #1
 8013ff4:	d0e6      	beq.n	8013fc4 <_printf_common+0xa4>
 8013ff6:	3601      	adds	r6, #1
 8013ff8:	e7d9      	b.n	8013fae <_printf_common+0x8e>
	...

08013ffc <_printf_i>:
 8013ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014000:	7e0f      	ldrb	r7, [r1, #24]
 8014002:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014004:	2f78      	cmp	r7, #120	@ 0x78
 8014006:	4691      	mov	r9, r2
 8014008:	4680      	mov	r8, r0
 801400a:	460c      	mov	r4, r1
 801400c:	469a      	mov	sl, r3
 801400e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014012:	d807      	bhi.n	8014024 <_printf_i+0x28>
 8014014:	2f62      	cmp	r7, #98	@ 0x62
 8014016:	d80a      	bhi.n	801402e <_printf_i+0x32>
 8014018:	2f00      	cmp	r7, #0
 801401a:	f000 80d2 	beq.w	80141c2 <_printf_i+0x1c6>
 801401e:	2f58      	cmp	r7, #88	@ 0x58
 8014020:	f000 80b9 	beq.w	8014196 <_printf_i+0x19a>
 8014024:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014028:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801402c:	e03a      	b.n	80140a4 <_printf_i+0xa8>
 801402e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014032:	2b15      	cmp	r3, #21
 8014034:	d8f6      	bhi.n	8014024 <_printf_i+0x28>
 8014036:	a101      	add	r1, pc, #4	@ (adr r1, 801403c <_printf_i+0x40>)
 8014038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801403c:	08014095 	.word	0x08014095
 8014040:	080140a9 	.word	0x080140a9
 8014044:	08014025 	.word	0x08014025
 8014048:	08014025 	.word	0x08014025
 801404c:	08014025 	.word	0x08014025
 8014050:	08014025 	.word	0x08014025
 8014054:	080140a9 	.word	0x080140a9
 8014058:	08014025 	.word	0x08014025
 801405c:	08014025 	.word	0x08014025
 8014060:	08014025 	.word	0x08014025
 8014064:	08014025 	.word	0x08014025
 8014068:	080141a9 	.word	0x080141a9
 801406c:	080140d3 	.word	0x080140d3
 8014070:	08014163 	.word	0x08014163
 8014074:	08014025 	.word	0x08014025
 8014078:	08014025 	.word	0x08014025
 801407c:	080141cb 	.word	0x080141cb
 8014080:	08014025 	.word	0x08014025
 8014084:	080140d3 	.word	0x080140d3
 8014088:	08014025 	.word	0x08014025
 801408c:	08014025 	.word	0x08014025
 8014090:	0801416b 	.word	0x0801416b
 8014094:	6833      	ldr	r3, [r6, #0]
 8014096:	1d1a      	adds	r2, r3, #4
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	6032      	str	r2, [r6, #0]
 801409c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80140a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80140a4:	2301      	movs	r3, #1
 80140a6:	e09d      	b.n	80141e4 <_printf_i+0x1e8>
 80140a8:	6833      	ldr	r3, [r6, #0]
 80140aa:	6820      	ldr	r0, [r4, #0]
 80140ac:	1d19      	adds	r1, r3, #4
 80140ae:	6031      	str	r1, [r6, #0]
 80140b0:	0606      	lsls	r6, r0, #24
 80140b2:	d501      	bpl.n	80140b8 <_printf_i+0xbc>
 80140b4:	681d      	ldr	r5, [r3, #0]
 80140b6:	e003      	b.n	80140c0 <_printf_i+0xc4>
 80140b8:	0645      	lsls	r5, r0, #25
 80140ba:	d5fb      	bpl.n	80140b4 <_printf_i+0xb8>
 80140bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80140c0:	2d00      	cmp	r5, #0
 80140c2:	da03      	bge.n	80140cc <_printf_i+0xd0>
 80140c4:	232d      	movs	r3, #45	@ 0x2d
 80140c6:	426d      	negs	r5, r5
 80140c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80140cc:	4859      	ldr	r0, [pc, #356]	@ (8014234 <_printf_i+0x238>)
 80140ce:	230a      	movs	r3, #10
 80140d0:	e011      	b.n	80140f6 <_printf_i+0xfa>
 80140d2:	6821      	ldr	r1, [r4, #0]
 80140d4:	6833      	ldr	r3, [r6, #0]
 80140d6:	0608      	lsls	r0, r1, #24
 80140d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80140dc:	d402      	bmi.n	80140e4 <_printf_i+0xe8>
 80140de:	0649      	lsls	r1, r1, #25
 80140e0:	bf48      	it	mi
 80140e2:	b2ad      	uxthmi	r5, r5
 80140e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80140e6:	4853      	ldr	r0, [pc, #332]	@ (8014234 <_printf_i+0x238>)
 80140e8:	6033      	str	r3, [r6, #0]
 80140ea:	bf14      	ite	ne
 80140ec:	230a      	movne	r3, #10
 80140ee:	2308      	moveq	r3, #8
 80140f0:	2100      	movs	r1, #0
 80140f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80140f6:	6866      	ldr	r6, [r4, #4]
 80140f8:	60a6      	str	r6, [r4, #8]
 80140fa:	2e00      	cmp	r6, #0
 80140fc:	bfa2      	ittt	ge
 80140fe:	6821      	ldrge	r1, [r4, #0]
 8014100:	f021 0104 	bicge.w	r1, r1, #4
 8014104:	6021      	strge	r1, [r4, #0]
 8014106:	b90d      	cbnz	r5, 801410c <_printf_i+0x110>
 8014108:	2e00      	cmp	r6, #0
 801410a:	d04b      	beq.n	80141a4 <_printf_i+0x1a8>
 801410c:	4616      	mov	r6, r2
 801410e:	fbb5 f1f3 	udiv	r1, r5, r3
 8014112:	fb03 5711 	mls	r7, r3, r1, r5
 8014116:	5dc7      	ldrb	r7, [r0, r7]
 8014118:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801411c:	462f      	mov	r7, r5
 801411e:	42bb      	cmp	r3, r7
 8014120:	460d      	mov	r5, r1
 8014122:	d9f4      	bls.n	801410e <_printf_i+0x112>
 8014124:	2b08      	cmp	r3, #8
 8014126:	d10b      	bne.n	8014140 <_printf_i+0x144>
 8014128:	6823      	ldr	r3, [r4, #0]
 801412a:	07df      	lsls	r7, r3, #31
 801412c:	d508      	bpl.n	8014140 <_printf_i+0x144>
 801412e:	6923      	ldr	r3, [r4, #16]
 8014130:	6861      	ldr	r1, [r4, #4]
 8014132:	4299      	cmp	r1, r3
 8014134:	bfde      	ittt	le
 8014136:	2330      	movle	r3, #48	@ 0x30
 8014138:	f806 3c01 	strble.w	r3, [r6, #-1]
 801413c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014140:	1b92      	subs	r2, r2, r6
 8014142:	6122      	str	r2, [r4, #16]
 8014144:	f8cd a000 	str.w	sl, [sp]
 8014148:	464b      	mov	r3, r9
 801414a:	aa03      	add	r2, sp, #12
 801414c:	4621      	mov	r1, r4
 801414e:	4640      	mov	r0, r8
 8014150:	f7ff fee6 	bl	8013f20 <_printf_common>
 8014154:	3001      	adds	r0, #1
 8014156:	d14a      	bne.n	80141ee <_printf_i+0x1f2>
 8014158:	f04f 30ff 	mov.w	r0, #4294967295
 801415c:	b004      	add	sp, #16
 801415e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014162:	6823      	ldr	r3, [r4, #0]
 8014164:	f043 0320 	orr.w	r3, r3, #32
 8014168:	6023      	str	r3, [r4, #0]
 801416a:	4833      	ldr	r0, [pc, #204]	@ (8014238 <_printf_i+0x23c>)
 801416c:	2778      	movs	r7, #120	@ 0x78
 801416e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014172:	6823      	ldr	r3, [r4, #0]
 8014174:	6831      	ldr	r1, [r6, #0]
 8014176:	061f      	lsls	r7, r3, #24
 8014178:	f851 5b04 	ldr.w	r5, [r1], #4
 801417c:	d402      	bmi.n	8014184 <_printf_i+0x188>
 801417e:	065f      	lsls	r7, r3, #25
 8014180:	bf48      	it	mi
 8014182:	b2ad      	uxthmi	r5, r5
 8014184:	6031      	str	r1, [r6, #0]
 8014186:	07d9      	lsls	r1, r3, #31
 8014188:	bf44      	itt	mi
 801418a:	f043 0320 	orrmi.w	r3, r3, #32
 801418e:	6023      	strmi	r3, [r4, #0]
 8014190:	b11d      	cbz	r5, 801419a <_printf_i+0x19e>
 8014192:	2310      	movs	r3, #16
 8014194:	e7ac      	b.n	80140f0 <_printf_i+0xf4>
 8014196:	4827      	ldr	r0, [pc, #156]	@ (8014234 <_printf_i+0x238>)
 8014198:	e7e9      	b.n	801416e <_printf_i+0x172>
 801419a:	6823      	ldr	r3, [r4, #0]
 801419c:	f023 0320 	bic.w	r3, r3, #32
 80141a0:	6023      	str	r3, [r4, #0]
 80141a2:	e7f6      	b.n	8014192 <_printf_i+0x196>
 80141a4:	4616      	mov	r6, r2
 80141a6:	e7bd      	b.n	8014124 <_printf_i+0x128>
 80141a8:	6833      	ldr	r3, [r6, #0]
 80141aa:	6825      	ldr	r5, [r4, #0]
 80141ac:	6961      	ldr	r1, [r4, #20]
 80141ae:	1d18      	adds	r0, r3, #4
 80141b0:	6030      	str	r0, [r6, #0]
 80141b2:	062e      	lsls	r6, r5, #24
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	d501      	bpl.n	80141bc <_printf_i+0x1c0>
 80141b8:	6019      	str	r1, [r3, #0]
 80141ba:	e002      	b.n	80141c2 <_printf_i+0x1c6>
 80141bc:	0668      	lsls	r0, r5, #25
 80141be:	d5fb      	bpl.n	80141b8 <_printf_i+0x1bc>
 80141c0:	8019      	strh	r1, [r3, #0]
 80141c2:	2300      	movs	r3, #0
 80141c4:	6123      	str	r3, [r4, #16]
 80141c6:	4616      	mov	r6, r2
 80141c8:	e7bc      	b.n	8014144 <_printf_i+0x148>
 80141ca:	6833      	ldr	r3, [r6, #0]
 80141cc:	1d1a      	adds	r2, r3, #4
 80141ce:	6032      	str	r2, [r6, #0]
 80141d0:	681e      	ldr	r6, [r3, #0]
 80141d2:	6862      	ldr	r2, [r4, #4]
 80141d4:	2100      	movs	r1, #0
 80141d6:	4630      	mov	r0, r6
 80141d8:	f7ec f822 	bl	8000220 <memchr>
 80141dc:	b108      	cbz	r0, 80141e2 <_printf_i+0x1e6>
 80141de:	1b80      	subs	r0, r0, r6
 80141e0:	6060      	str	r0, [r4, #4]
 80141e2:	6863      	ldr	r3, [r4, #4]
 80141e4:	6123      	str	r3, [r4, #16]
 80141e6:	2300      	movs	r3, #0
 80141e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80141ec:	e7aa      	b.n	8014144 <_printf_i+0x148>
 80141ee:	6923      	ldr	r3, [r4, #16]
 80141f0:	4632      	mov	r2, r6
 80141f2:	4649      	mov	r1, r9
 80141f4:	4640      	mov	r0, r8
 80141f6:	47d0      	blx	sl
 80141f8:	3001      	adds	r0, #1
 80141fa:	d0ad      	beq.n	8014158 <_printf_i+0x15c>
 80141fc:	6823      	ldr	r3, [r4, #0]
 80141fe:	079b      	lsls	r3, r3, #30
 8014200:	d413      	bmi.n	801422a <_printf_i+0x22e>
 8014202:	68e0      	ldr	r0, [r4, #12]
 8014204:	9b03      	ldr	r3, [sp, #12]
 8014206:	4298      	cmp	r0, r3
 8014208:	bfb8      	it	lt
 801420a:	4618      	movlt	r0, r3
 801420c:	e7a6      	b.n	801415c <_printf_i+0x160>
 801420e:	2301      	movs	r3, #1
 8014210:	4632      	mov	r2, r6
 8014212:	4649      	mov	r1, r9
 8014214:	4640      	mov	r0, r8
 8014216:	47d0      	blx	sl
 8014218:	3001      	adds	r0, #1
 801421a:	d09d      	beq.n	8014158 <_printf_i+0x15c>
 801421c:	3501      	adds	r5, #1
 801421e:	68e3      	ldr	r3, [r4, #12]
 8014220:	9903      	ldr	r1, [sp, #12]
 8014222:	1a5b      	subs	r3, r3, r1
 8014224:	42ab      	cmp	r3, r5
 8014226:	dcf2      	bgt.n	801420e <_printf_i+0x212>
 8014228:	e7eb      	b.n	8014202 <_printf_i+0x206>
 801422a:	2500      	movs	r5, #0
 801422c:	f104 0619 	add.w	r6, r4, #25
 8014230:	e7f5      	b.n	801421e <_printf_i+0x222>
 8014232:	bf00      	nop
 8014234:	0802601e 	.word	0x0802601e
 8014238:	0802602f 	.word	0x0802602f

0801423c <_scanf_float>:
 801423c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014240:	b087      	sub	sp, #28
 8014242:	4617      	mov	r7, r2
 8014244:	9303      	str	r3, [sp, #12]
 8014246:	688b      	ldr	r3, [r1, #8]
 8014248:	1e5a      	subs	r2, r3, #1
 801424a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801424e:	bf81      	itttt	hi
 8014250:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014254:	eb03 0b05 	addhi.w	fp, r3, r5
 8014258:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801425c:	608b      	strhi	r3, [r1, #8]
 801425e:	680b      	ldr	r3, [r1, #0]
 8014260:	460a      	mov	r2, r1
 8014262:	f04f 0500 	mov.w	r5, #0
 8014266:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801426a:	f842 3b1c 	str.w	r3, [r2], #28
 801426e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014272:	4680      	mov	r8, r0
 8014274:	460c      	mov	r4, r1
 8014276:	bf98      	it	ls
 8014278:	f04f 0b00 	movls.w	fp, #0
 801427c:	9201      	str	r2, [sp, #4]
 801427e:	4616      	mov	r6, r2
 8014280:	46aa      	mov	sl, r5
 8014282:	46a9      	mov	r9, r5
 8014284:	9502      	str	r5, [sp, #8]
 8014286:	68a2      	ldr	r2, [r4, #8]
 8014288:	b152      	cbz	r2, 80142a0 <_scanf_float+0x64>
 801428a:	683b      	ldr	r3, [r7, #0]
 801428c:	781b      	ldrb	r3, [r3, #0]
 801428e:	2b4e      	cmp	r3, #78	@ 0x4e
 8014290:	d864      	bhi.n	801435c <_scanf_float+0x120>
 8014292:	2b40      	cmp	r3, #64	@ 0x40
 8014294:	d83c      	bhi.n	8014310 <_scanf_float+0xd4>
 8014296:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801429a:	b2c8      	uxtb	r0, r1
 801429c:	280e      	cmp	r0, #14
 801429e:	d93a      	bls.n	8014316 <_scanf_float+0xda>
 80142a0:	f1b9 0f00 	cmp.w	r9, #0
 80142a4:	d003      	beq.n	80142ae <_scanf_float+0x72>
 80142a6:	6823      	ldr	r3, [r4, #0]
 80142a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80142ac:	6023      	str	r3, [r4, #0]
 80142ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80142b2:	f1ba 0f01 	cmp.w	sl, #1
 80142b6:	f200 8117 	bhi.w	80144e8 <_scanf_float+0x2ac>
 80142ba:	9b01      	ldr	r3, [sp, #4]
 80142bc:	429e      	cmp	r6, r3
 80142be:	f200 8108 	bhi.w	80144d2 <_scanf_float+0x296>
 80142c2:	2001      	movs	r0, #1
 80142c4:	b007      	add	sp, #28
 80142c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142ca:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80142ce:	2a0d      	cmp	r2, #13
 80142d0:	d8e6      	bhi.n	80142a0 <_scanf_float+0x64>
 80142d2:	a101      	add	r1, pc, #4	@ (adr r1, 80142d8 <_scanf_float+0x9c>)
 80142d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80142d8:	0801441f 	.word	0x0801441f
 80142dc:	080142a1 	.word	0x080142a1
 80142e0:	080142a1 	.word	0x080142a1
 80142e4:	080142a1 	.word	0x080142a1
 80142e8:	0801447f 	.word	0x0801447f
 80142ec:	08014457 	.word	0x08014457
 80142f0:	080142a1 	.word	0x080142a1
 80142f4:	080142a1 	.word	0x080142a1
 80142f8:	0801442d 	.word	0x0801442d
 80142fc:	080142a1 	.word	0x080142a1
 8014300:	080142a1 	.word	0x080142a1
 8014304:	080142a1 	.word	0x080142a1
 8014308:	080142a1 	.word	0x080142a1
 801430c:	080143e5 	.word	0x080143e5
 8014310:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8014314:	e7db      	b.n	80142ce <_scanf_float+0x92>
 8014316:	290e      	cmp	r1, #14
 8014318:	d8c2      	bhi.n	80142a0 <_scanf_float+0x64>
 801431a:	a001      	add	r0, pc, #4	@ (adr r0, 8014320 <_scanf_float+0xe4>)
 801431c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014320:	080143d5 	.word	0x080143d5
 8014324:	080142a1 	.word	0x080142a1
 8014328:	080143d5 	.word	0x080143d5
 801432c:	0801446b 	.word	0x0801446b
 8014330:	080142a1 	.word	0x080142a1
 8014334:	0801437d 	.word	0x0801437d
 8014338:	080143bb 	.word	0x080143bb
 801433c:	080143bb 	.word	0x080143bb
 8014340:	080143bb 	.word	0x080143bb
 8014344:	080143bb 	.word	0x080143bb
 8014348:	080143bb 	.word	0x080143bb
 801434c:	080143bb 	.word	0x080143bb
 8014350:	080143bb 	.word	0x080143bb
 8014354:	080143bb 	.word	0x080143bb
 8014358:	080143bb 	.word	0x080143bb
 801435c:	2b6e      	cmp	r3, #110	@ 0x6e
 801435e:	d809      	bhi.n	8014374 <_scanf_float+0x138>
 8014360:	2b60      	cmp	r3, #96	@ 0x60
 8014362:	d8b2      	bhi.n	80142ca <_scanf_float+0x8e>
 8014364:	2b54      	cmp	r3, #84	@ 0x54
 8014366:	d07b      	beq.n	8014460 <_scanf_float+0x224>
 8014368:	2b59      	cmp	r3, #89	@ 0x59
 801436a:	d199      	bne.n	80142a0 <_scanf_float+0x64>
 801436c:	2d07      	cmp	r5, #7
 801436e:	d197      	bne.n	80142a0 <_scanf_float+0x64>
 8014370:	2508      	movs	r5, #8
 8014372:	e02c      	b.n	80143ce <_scanf_float+0x192>
 8014374:	2b74      	cmp	r3, #116	@ 0x74
 8014376:	d073      	beq.n	8014460 <_scanf_float+0x224>
 8014378:	2b79      	cmp	r3, #121	@ 0x79
 801437a:	e7f6      	b.n	801436a <_scanf_float+0x12e>
 801437c:	6821      	ldr	r1, [r4, #0]
 801437e:	05c8      	lsls	r0, r1, #23
 8014380:	d51b      	bpl.n	80143ba <_scanf_float+0x17e>
 8014382:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8014386:	6021      	str	r1, [r4, #0]
 8014388:	f109 0901 	add.w	r9, r9, #1
 801438c:	f1bb 0f00 	cmp.w	fp, #0
 8014390:	d003      	beq.n	801439a <_scanf_float+0x15e>
 8014392:	3201      	adds	r2, #1
 8014394:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014398:	60a2      	str	r2, [r4, #8]
 801439a:	68a3      	ldr	r3, [r4, #8]
 801439c:	3b01      	subs	r3, #1
 801439e:	60a3      	str	r3, [r4, #8]
 80143a0:	6923      	ldr	r3, [r4, #16]
 80143a2:	3301      	adds	r3, #1
 80143a4:	6123      	str	r3, [r4, #16]
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	3b01      	subs	r3, #1
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	607b      	str	r3, [r7, #4]
 80143ae:	f340 8087 	ble.w	80144c0 <_scanf_float+0x284>
 80143b2:	683b      	ldr	r3, [r7, #0]
 80143b4:	3301      	adds	r3, #1
 80143b6:	603b      	str	r3, [r7, #0]
 80143b8:	e765      	b.n	8014286 <_scanf_float+0x4a>
 80143ba:	eb1a 0105 	adds.w	r1, sl, r5
 80143be:	f47f af6f 	bne.w	80142a0 <_scanf_float+0x64>
 80143c2:	6822      	ldr	r2, [r4, #0]
 80143c4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80143c8:	6022      	str	r2, [r4, #0]
 80143ca:	460d      	mov	r5, r1
 80143cc:	468a      	mov	sl, r1
 80143ce:	f806 3b01 	strb.w	r3, [r6], #1
 80143d2:	e7e2      	b.n	801439a <_scanf_float+0x15e>
 80143d4:	6822      	ldr	r2, [r4, #0]
 80143d6:	0610      	lsls	r0, r2, #24
 80143d8:	f57f af62 	bpl.w	80142a0 <_scanf_float+0x64>
 80143dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80143e0:	6022      	str	r2, [r4, #0]
 80143e2:	e7f4      	b.n	80143ce <_scanf_float+0x192>
 80143e4:	f1ba 0f00 	cmp.w	sl, #0
 80143e8:	d10e      	bne.n	8014408 <_scanf_float+0x1cc>
 80143ea:	f1b9 0f00 	cmp.w	r9, #0
 80143ee:	d10e      	bne.n	801440e <_scanf_float+0x1d2>
 80143f0:	6822      	ldr	r2, [r4, #0]
 80143f2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80143f6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80143fa:	d108      	bne.n	801440e <_scanf_float+0x1d2>
 80143fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014400:	6022      	str	r2, [r4, #0]
 8014402:	f04f 0a01 	mov.w	sl, #1
 8014406:	e7e2      	b.n	80143ce <_scanf_float+0x192>
 8014408:	f1ba 0f02 	cmp.w	sl, #2
 801440c:	d055      	beq.n	80144ba <_scanf_float+0x27e>
 801440e:	2d01      	cmp	r5, #1
 8014410:	d002      	beq.n	8014418 <_scanf_float+0x1dc>
 8014412:	2d04      	cmp	r5, #4
 8014414:	f47f af44 	bne.w	80142a0 <_scanf_float+0x64>
 8014418:	3501      	adds	r5, #1
 801441a:	b2ed      	uxtb	r5, r5
 801441c:	e7d7      	b.n	80143ce <_scanf_float+0x192>
 801441e:	f1ba 0f01 	cmp.w	sl, #1
 8014422:	f47f af3d 	bne.w	80142a0 <_scanf_float+0x64>
 8014426:	f04f 0a02 	mov.w	sl, #2
 801442a:	e7d0      	b.n	80143ce <_scanf_float+0x192>
 801442c:	b97d      	cbnz	r5, 801444e <_scanf_float+0x212>
 801442e:	f1b9 0f00 	cmp.w	r9, #0
 8014432:	f47f af38 	bne.w	80142a6 <_scanf_float+0x6a>
 8014436:	6822      	ldr	r2, [r4, #0]
 8014438:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801443c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014440:	f040 8108 	bne.w	8014654 <_scanf_float+0x418>
 8014444:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014448:	6022      	str	r2, [r4, #0]
 801444a:	2501      	movs	r5, #1
 801444c:	e7bf      	b.n	80143ce <_scanf_float+0x192>
 801444e:	2d03      	cmp	r5, #3
 8014450:	d0e2      	beq.n	8014418 <_scanf_float+0x1dc>
 8014452:	2d05      	cmp	r5, #5
 8014454:	e7de      	b.n	8014414 <_scanf_float+0x1d8>
 8014456:	2d02      	cmp	r5, #2
 8014458:	f47f af22 	bne.w	80142a0 <_scanf_float+0x64>
 801445c:	2503      	movs	r5, #3
 801445e:	e7b6      	b.n	80143ce <_scanf_float+0x192>
 8014460:	2d06      	cmp	r5, #6
 8014462:	f47f af1d 	bne.w	80142a0 <_scanf_float+0x64>
 8014466:	2507      	movs	r5, #7
 8014468:	e7b1      	b.n	80143ce <_scanf_float+0x192>
 801446a:	6822      	ldr	r2, [r4, #0]
 801446c:	0591      	lsls	r1, r2, #22
 801446e:	f57f af17 	bpl.w	80142a0 <_scanf_float+0x64>
 8014472:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8014476:	6022      	str	r2, [r4, #0]
 8014478:	f8cd 9008 	str.w	r9, [sp, #8]
 801447c:	e7a7      	b.n	80143ce <_scanf_float+0x192>
 801447e:	6822      	ldr	r2, [r4, #0]
 8014480:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8014484:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8014488:	d006      	beq.n	8014498 <_scanf_float+0x25c>
 801448a:	0550      	lsls	r0, r2, #21
 801448c:	f57f af08 	bpl.w	80142a0 <_scanf_float+0x64>
 8014490:	f1b9 0f00 	cmp.w	r9, #0
 8014494:	f000 80de 	beq.w	8014654 <_scanf_float+0x418>
 8014498:	0591      	lsls	r1, r2, #22
 801449a:	bf58      	it	pl
 801449c:	9902      	ldrpl	r1, [sp, #8]
 801449e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80144a2:	bf58      	it	pl
 80144a4:	eba9 0101 	subpl.w	r1, r9, r1
 80144a8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80144ac:	bf58      	it	pl
 80144ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80144b2:	6022      	str	r2, [r4, #0]
 80144b4:	f04f 0900 	mov.w	r9, #0
 80144b8:	e789      	b.n	80143ce <_scanf_float+0x192>
 80144ba:	f04f 0a03 	mov.w	sl, #3
 80144be:	e786      	b.n	80143ce <_scanf_float+0x192>
 80144c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80144c4:	4639      	mov	r1, r7
 80144c6:	4640      	mov	r0, r8
 80144c8:	4798      	blx	r3
 80144ca:	2800      	cmp	r0, #0
 80144cc:	f43f aedb 	beq.w	8014286 <_scanf_float+0x4a>
 80144d0:	e6e6      	b.n	80142a0 <_scanf_float+0x64>
 80144d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80144d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80144da:	463a      	mov	r2, r7
 80144dc:	4640      	mov	r0, r8
 80144de:	4798      	blx	r3
 80144e0:	6923      	ldr	r3, [r4, #16]
 80144e2:	3b01      	subs	r3, #1
 80144e4:	6123      	str	r3, [r4, #16]
 80144e6:	e6e8      	b.n	80142ba <_scanf_float+0x7e>
 80144e8:	1e6b      	subs	r3, r5, #1
 80144ea:	2b06      	cmp	r3, #6
 80144ec:	d824      	bhi.n	8014538 <_scanf_float+0x2fc>
 80144ee:	2d02      	cmp	r5, #2
 80144f0:	d836      	bhi.n	8014560 <_scanf_float+0x324>
 80144f2:	9b01      	ldr	r3, [sp, #4]
 80144f4:	429e      	cmp	r6, r3
 80144f6:	f67f aee4 	bls.w	80142c2 <_scanf_float+0x86>
 80144fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80144fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014502:	463a      	mov	r2, r7
 8014504:	4640      	mov	r0, r8
 8014506:	4798      	blx	r3
 8014508:	6923      	ldr	r3, [r4, #16]
 801450a:	3b01      	subs	r3, #1
 801450c:	6123      	str	r3, [r4, #16]
 801450e:	e7f0      	b.n	80144f2 <_scanf_float+0x2b6>
 8014510:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014514:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8014518:	463a      	mov	r2, r7
 801451a:	4640      	mov	r0, r8
 801451c:	4798      	blx	r3
 801451e:	6923      	ldr	r3, [r4, #16]
 8014520:	3b01      	subs	r3, #1
 8014522:	6123      	str	r3, [r4, #16]
 8014524:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014528:	fa5f fa8a 	uxtb.w	sl, sl
 801452c:	f1ba 0f02 	cmp.w	sl, #2
 8014530:	d1ee      	bne.n	8014510 <_scanf_float+0x2d4>
 8014532:	3d03      	subs	r5, #3
 8014534:	b2ed      	uxtb	r5, r5
 8014536:	1b76      	subs	r6, r6, r5
 8014538:	6823      	ldr	r3, [r4, #0]
 801453a:	05da      	lsls	r2, r3, #23
 801453c:	d530      	bpl.n	80145a0 <_scanf_float+0x364>
 801453e:	055b      	lsls	r3, r3, #21
 8014540:	d511      	bpl.n	8014566 <_scanf_float+0x32a>
 8014542:	9b01      	ldr	r3, [sp, #4]
 8014544:	429e      	cmp	r6, r3
 8014546:	f67f aebc 	bls.w	80142c2 <_scanf_float+0x86>
 801454a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801454e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014552:	463a      	mov	r2, r7
 8014554:	4640      	mov	r0, r8
 8014556:	4798      	blx	r3
 8014558:	6923      	ldr	r3, [r4, #16]
 801455a:	3b01      	subs	r3, #1
 801455c:	6123      	str	r3, [r4, #16]
 801455e:	e7f0      	b.n	8014542 <_scanf_float+0x306>
 8014560:	46aa      	mov	sl, r5
 8014562:	46b3      	mov	fp, r6
 8014564:	e7de      	b.n	8014524 <_scanf_float+0x2e8>
 8014566:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801456a:	6923      	ldr	r3, [r4, #16]
 801456c:	2965      	cmp	r1, #101	@ 0x65
 801456e:	f103 33ff 	add.w	r3, r3, #4294967295
 8014572:	f106 35ff 	add.w	r5, r6, #4294967295
 8014576:	6123      	str	r3, [r4, #16]
 8014578:	d00c      	beq.n	8014594 <_scanf_float+0x358>
 801457a:	2945      	cmp	r1, #69	@ 0x45
 801457c:	d00a      	beq.n	8014594 <_scanf_float+0x358>
 801457e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014582:	463a      	mov	r2, r7
 8014584:	4640      	mov	r0, r8
 8014586:	4798      	blx	r3
 8014588:	6923      	ldr	r3, [r4, #16]
 801458a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801458e:	3b01      	subs	r3, #1
 8014590:	1eb5      	subs	r5, r6, #2
 8014592:	6123      	str	r3, [r4, #16]
 8014594:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014598:	463a      	mov	r2, r7
 801459a:	4640      	mov	r0, r8
 801459c:	4798      	blx	r3
 801459e:	462e      	mov	r6, r5
 80145a0:	6822      	ldr	r2, [r4, #0]
 80145a2:	f012 0210 	ands.w	r2, r2, #16
 80145a6:	d001      	beq.n	80145ac <_scanf_float+0x370>
 80145a8:	2000      	movs	r0, #0
 80145aa:	e68b      	b.n	80142c4 <_scanf_float+0x88>
 80145ac:	7032      	strb	r2, [r6, #0]
 80145ae:	6823      	ldr	r3, [r4, #0]
 80145b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80145b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80145b8:	d11c      	bne.n	80145f4 <_scanf_float+0x3b8>
 80145ba:	9b02      	ldr	r3, [sp, #8]
 80145bc:	454b      	cmp	r3, r9
 80145be:	eba3 0209 	sub.w	r2, r3, r9
 80145c2:	d123      	bne.n	801460c <_scanf_float+0x3d0>
 80145c4:	9901      	ldr	r1, [sp, #4]
 80145c6:	2200      	movs	r2, #0
 80145c8:	4640      	mov	r0, r8
 80145ca:	f002 fc09 	bl	8016de0 <_strtod_r>
 80145ce:	9b03      	ldr	r3, [sp, #12]
 80145d0:	6821      	ldr	r1, [r4, #0]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	f011 0f02 	tst.w	r1, #2
 80145d8:	ec57 6b10 	vmov	r6, r7, d0
 80145dc:	f103 0204 	add.w	r2, r3, #4
 80145e0:	d01f      	beq.n	8014622 <_scanf_float+0x3e6>
 80145e2:	9903      	ldr	r1, [sp, #12]
 80145e4:	600a      	str	r2, [r1, #0]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	e9c3 6700 	strd	r6, r7, [r3]
 80145ec:	68e3      	ldr	r3, [r4, #12]
 80145ee:	3301      	adds	r3, #1
 80145f0:	60e3      	str	r3, [r4, #12]
 80145f2:	e7d9      	b.n	80145a8 <_scanf_float+0x36c>
 80145f4:	9b04      	ldr	r3, [sp, #16]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d0e4      	beq.n	80145c4 <_scanf_float+0x388>
 80145fa:	9905      	ldr	r1, [sp, #20]
 80145fc:	230a      	movs	r3, #10
 80145fe:	3101      	adds	r1, #1
 8014600:	4640      	mov	r0, r8
 8014602:	f002 fc6d 	bl	8016ee0 <_strtol_r>
 8014606:	9b04      	ldr	r3, [sp, #16]
 8014608:	9e05      	ldr	r6, [sp, #20]
 801460a:	1ac2      	subs	r2, r0, r3
 801460c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8014610:	429e      	cmp	r6, r3
 8014612:	bf28      	it	cs
 8014614:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8014618:	4910      	ldr	r1, [pc, #64]	@ (801465c <_scanf_float+0x420>)
 801461a:	4630      	mov	r0, r6
 801461c:	f000 f8f6 	bl	801480c <siprintf>
 8014620:	e7d0      	b.n	80145c4 <_scanf_float+0x388>
 8014622:	f011 0f04 	tst.w	r1, #4
 8014626:	9903      	ldr	r1, [sp, #12]
 8014628:	600a      	str	r2, [r1, #0]
 801462a:	d1dc      	bne.n	80145e6 <_scanf_float+0x3aa>
 801462c:	681d      	ldr	r5, [r3, #0]
 801462e:	4632      	mov	r2, r6
 8014630:	463b      	mov	r3, r7
 8014632:	4630      	mov	r0, r6
 8014634:	4639      	mov	r1, r7
 8014636:	f7ec faa1 	bl	8000b7c <__aeabi_dcmpun>
 801463a:	b128      	cbz	r0, 8014648 <_scanf_float+0x40c>
 801463c:	4808      	ldr	r0, [pc, #32]	@ (8014660 <_scanf_float+0x424>)
 801463e:	f000 f9c9 	bl	80149d4 <nanf>
 8014642:	ed85 0a00 	vstr	s0, [r5]
 8014646:	e7d1      	b.n	80145ec <_scanf_float+0x3b0>
 8014648:	4630      	mov	r0, r6
 801464a:	4639      	mov	r1, r7
 801464c:	f7ec faf4 	bl	8000c38 <__aeabi_d2f>
 8014650:	6028      	str	r0, [r5, #0]
 8014652:	e7cb      	b.n	80145ec <_scanf_float+0x3b0>
 8014654:	f04f 0900 	mov.w	r9, #0
 8014658:	e629      	b.n	80142ae <_scanf_float+0x72>
 801465a:	bf00      	nop
 801465c:	08026040 	.word	0x08026040
 8014660:	080263d5 	.word	0x080263d5

08014664 <std>:
 8014664:	2300      	movs	r3, #0
 8014666:	b510      	push	{r4, lr}
 8014668:	4604      	mov	r4, r0
 801466a:	e9c0 3300 	strd	r3, r3, [r0]
 801466e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014672:	6083      	str	r3, [r0, #8]
 8014674:	8181      	strh	r1, [r0, #12]
 8014676:	6643      	str	r3, [r0, #100]	@ 0x64
 8014678:	81c2      	strh	r2, [r0, #14]
 801467a:	6183      	str	r3, [r0, #24]
 801467c:	4619      	mov	r1, r3
 801467e:	2208      	movs	r2, #8
 8014680:	305c      	adds	r0, #92	@ 0x5c
 8014682:	f000 f926 	bl	80148d2 <memset>
 8014686:	4b0d      	ldr	r3, [pc, #52]	@ (80146bc <std+0x58>)
 8014688:	6263      	str	r3, [r4, #36]	@ 0x24
 801468a:	4b0d      	ldr	r3, [pc, #52]	@ (80146c0 <std+0x5c>)
 801468c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801468e:	4b0d      	ldr	r3, [pc, #52]	@ (80146c4 <std+0x60>)
 8014690:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014692:	4b0d      	ldr	r3, [pc, #52]	@ (80146c8 <std+0x64>)
 8014694:	6323      	str	r3, [r4, #48]	@ 0x30
 8014696:	4b0d      	ldr	r3, [pc, #52]	@ (80146cc <std+0x68>)
 8014698:	6224      	str	r4, [r4, #32]
 801469a:	429c      	cmp	r4, r3
 801469c:	d006      	beq.n	80146ac <std+0x48>
 801469e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80146a2:	4294      	cmp	r4, r2
 80146a4:	d002      	beq.n	80146ac <std+0x48>
 80146a6:	33d0      	adds	r3, #208	@ 0xd0
 80146a8:	429c      	cmp	r4, r3
 80146aa:	d105      	bne.n	80146b8 <std+0x54>
 80146ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80146b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146b4:	f000 b98a 	b.w	80149cc <__retarget_lock_init_recursive>
 80146b8:	bd10      	pop	{r4, pc}
 80146ba:	bf00      	nop
 80146bc:	0801484d 	.word	0x0801484d
 80146c0:	0801486f 	.word	0x0801486f
 80146c4:	080148a7 	.word	0x080148a7
 80146c8:	080148cb 	.word	0x080148cb
 80146cc:	20004e90 	.word	0x20004e90

080146d0 <stdio_exit_handler>:
 80146d0:	4a02      	ldr	r2, [pc, #8]	@ (80146dc <stdio_exit_handler+0xc>)
 80146d2:	4903      	ldr	r1, [pc, #12]	@ (80146e0 <stdio_exit_handler+0x10>)
 80146d4:	4803      	ldr	r0, [pc, #12]	@ (80146e4 <stdio_exit_handler+0x14>)
 80146d6:	f000 b869 	b.w	80147ac <_fwalk_sglue>
 80146da:	bf00      	nop
 80146dc:	200001c8 	.word	0x200001c8
 80146e0:	08017521 	.word	0x08017521
 80146e4:	200001d8 	.word	0x200001d8

080146e8 <cleanup_stdio>:
 80146e8:	6841      	ldr	r1, [r0, #4]
 80146ea:	4b0c      	ldr	r3, [pc, #48]	@ (801471c <cleanup_stdio+0x34>)
 80146ec:	4299      	cmp	r1, r3
 80146ee:	b510      	push	{r4, lr}
 80146f0:	4604      	mov	r4, r0
 80146f2:	d001      	beq.n	80146f8 <cleanup_stdio+0x10>
 80146f4:	f002 ff14 	bl	8017520 <_fflush_r>
 80146f8:	68a1      	ldr	r1, [r4, #8]
 80146fa:	4b09      	ldr	r3, [pc, #36]	@ (8014720 <cleanup_stdio+0x38>)
 80146fc:	4299      	cmp	r1, r3
 80146fe:	d002      	beq.n	8014706 <cleanup_stdio+0x1e>
 8014700:	4620      	mov	r0, r4
 8014702:	f002 ff0d 	bl	8017520 <_fflush_r>
 8014706:	68e1      	ldr	r1, [r4, #12]
 8014708:	4b06      	ldr	r3, [pc, #24]	@ (8014724 <cleanup_stdio+0x3c>)
 801470a:	4299      	cmp	r1, r3
 801470c:	d004      	beq.n	8014718 <cleanup_stdio+0x30>
 801470e:	4620      	mov	r0, r4
 8014710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014714:	f002 bf04 	b.w	8017520 <_fflush_r>
 8014718:	bd10      	pop	{r4, pc}
 801471a:	bf00      	nop
 801471c:	20004e90 	.word	0x20004e90
 8014720:	20004ef8 	.word	0x20004ef8
 8014724:	20004f60 	.word	0x20004f60

08014728 <global_stdio_init.part.0>:
 8014728:	b510      	push	{r4, lr}
 801472a:	4b0b      	ldr	r3, [pc, #44]	@ (8014758 <global_stdio_init.part.0+0x30>)
 801472c:	4c0b      	ldr	r4, [pc, #44]	@ (801475c <global_stdio_init.part.0+0x34>)
 801472e:	4a0c      	ldr	r2, [pc, #48]	@ (8014760 <global_stdio_init.part.0+0x38>)
 8014730:	601a      	str	r2, [r3, #0]
 8014732:	4620      	mov	r0, r4
 8014734:	2200      	movs	r2, #0
 8014736:	2104      	movs	r1, #4
 8014738:	f7ff ff94 	bl	8014664 <std>
 801473c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014740:	2201      	movs	r2, #1
 8014742:	2109      	movs	r1, #9
 8014744:	f7ff ff8e 	bl	8014664 <std>
 8014748:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801474c:	2202      	movs	r2, #2
 801474e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014752:	2112      	movs	r1, #18
 8014754:	f7ff bf86 	b.w	8014664 <std>
 8014758:	20004fc8 	.word	0x20004fc8
 801475c:	20004e90 	.word	0x20004e90
 8014760:	080146d1 	.word	0x080146d1

08014764 <__sfp_lock_acquire>:
 8014764:	4801      	ldr	r0, [pc, #4]	@ (801476c <__sfp_lock_acquire+0x8>)
 8014766:	f000 b932 	b.w	80149ce <__retarget_lock_acquire_recursive>
 801476a:	bf00      	nop
 801476c:	20004fd1 	.word	0x20004fd1

08014770 <__sfp_lock_release>:
 8014770:	4801      	ldr	r0, [pc, #4]	@ (8014778 <__sfp_lock_release+0x8>)
 8014772:	f000 b92d 	b.w	80149d0 <__retarget_lock_release_recursive>
 8014776:	bf00      	nop
 8014778:	20004fd1 	.word	0x20004fd1

0801477c <__sinit>:
 801477c:	b510      	push	{r4, lr}
 801477e:	4604      	mov	r4, r0
 8014780:	f7ff fff0 	bl	8014764 <__sfp_lock_acquire>
 8014784:	6a23      	ldr	r3, [r4, #32]
 8014786:	b11b      	cbz	r3, 8014790 <__sinit+0x14>
 8014788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801478c:	f7ff bff0 	b.w	8014770 <__sfp_lock_release>
 8014790:	4b04      	ldr	r3, [pc, #16]	@ (80147a4 <__sinit+0x28>)
 8014792:	6223      	str	r3, [r4, #32]
 8014794:	4b04      	ldr	r3, [pc, #16]	@ (80147a8 <__sinit+0x2c>)
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d1f5      	bne.n	8014788 <__sinit+0xc>
 801479c:	f7ff ffc4 	bl	8014728 <global_stdio_init.part.0>
 80147a0:	e7f2      	b.n	8014788 <__sinit+0xc>
 80147a2:	bf00      	nop
 80147a4:	080146e9 	.word	0x080146e9
 80147a8:	20004fc8 	.word	0x20004fc8

080147ac <_fwalk_sglue>:
 80147ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147b0:	4607      	mov	r7, r0
 80147b2:	4688      	mov	r8, r1
 80147b4:	4614      	mov	r4, r2
 80147b6:	2600      	movs	r6, #0
 80147b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80147bc:	f1b9 0901 	subs.w	r9, r9, #1
 80147c0:	d505      	bpl.n	80147ce <_fwalk_sglue+0x22>
 80147c2:	6824      	ldr	r4, [r4, #0]
 80147c4:	2c00      	cmp	r4, #0
 80147c6:	d1f7      	bne.n	80147b8 <_fwalk_sglue+0xc>
 80147c8:	4630      	mov	r0, r6
 80147ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147ce:	89ab      	ldrh	r3, [r5, #12]
 80147d0:	2b01      	cmp	r3, #1
 80147d2:	d907      	bls.n	80147e4 <_fwalk_sglue+0x38>
 80147d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80147d8:	3301      	adds	r3, #1
 80147da:	d003      	beq.n	80147e4 <_fwalk_sglue+0x38>
 80147dc:	4629      	mov	r1, r5
 80147de:	4638      	mov	r0, r7
 80147e0:	47c0      	blx	r8
 80147e2:	4306      	orrs	r6, r0
 80147e4:	3568      	adds	r5, #104	@ 0x68
 80147e6:	e7e9      	b.n	80147bc <_fwalk_sglue+0x10>

080147e8 <iprintf>:
 80147e8:	b40f      	push	{r0, r1, r2, r3}
 80147ea:	b507      	push	{r0, r1, r2, lr}
 80147ec:	4906      	ldr	r1, [pc, #24]	@ (8014808 <iprintf+0x20>)
 80147ee:	ab04      	add	r3, sp, #16
 80147f0:	6808      	ldr	r0, [r1, #0]
 80147f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80147f6:	6881      	ldr	r1, [r0, #8]
 80147f8:	9301      	str	r3, [sp, #4]
 80147fa:	f002 fcf5 	bl	80171e8 <_vfiprintf_r>
 80147fe:	b003      	add	sp, #12
 8014800:	f85d eb04 	ldr.w	lr, [sp], #4
 8014804:	b004      	add	sp, #16
 8014806:	4770      	bx	lr
 8014808:	200001d4 	.word	0x200001d4

0801480c <siprintf>:
 801480c:	b40e      	push	{r1, r2, r3}
 801480e:	b500      	push	{lr}
 8014810:	b09c      	sub	sp, #112	@ 0x70
 8014812:	ab1d      	add	r3, sp, #116	@ 0x74
 8014814:	9002      	str	r0, [sp, #8]
 8014816:	9006      	str	r0, [sp, #24]
 8014818:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801481c:	4809      	ldr	r0, [pc, #36]	@ (8014844 <siprintf+0x38>)
 801481e:	9107      	str	r1, [sp, #28]
 8014820:	9104      	str	r1, [sp, #16]
 8014822:	4909      	ldr	r1, [pc, #36]	@ (8014848 <siprintf+0x3c>)
 8014824:	f853 2b04 	ldr.w	r2, [r3], #4
 8014828:	9105      	str	r1, [sp, #20]
 801482a:	6800      	ldr	r0, [r0, #0]
 801482c:	9301      	str	r3, [sp, #4]
 801482e:	a902      	add	r1, sp, #8
 8014830:	f002 fbb4 	bl	8016f9c <_svfiprintf_r>
 8014834:	9b02      	ldr	r3, [sp, #8]
 8014836:	2200      	movs	r2, #0
 8014838:	701a      	strb	r2, [r3, #0]
 801483a:	b01c      	add	sp, #112	@ 0x70
 801483c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014840:	b003      	add	sp, #12
 8014842:	4770      	bx	lr
 8014844:	200001d4 	.word	0x200001d4
 8014848:	ffff0208 	.word	0xffff0208

0801484c <__sread>:
 801484c:	b510      	push	{r4, lr}
 801484e:	460c      	mov	r4, r1
 8014850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014854:	f000 f86c 	bl	8014930 <_read_r>
 8014858:	2800      	cmp	r0, #0
 801485a:	bfab      	itete	ge
 801485c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801485e:	89a3      	ldrhlt	r3, [r4, #12]
 8014860:	181b      	addge	r3, r3, r0
 8014862:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014866:	bfac      	ite	ge
 8014868:	6563      	strge	r3, [r4, #84]	@ 0x54
 801486a:	81a3      	strhlt	r3, [r4, #12]
 801486c:	bd10      	pop	{r4, pc}

0801486e <__swrite>:
 801486e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014872:	461f      	mov	r7, r3
 8014874:	898b      	ldrh	r3, [r1, #12]
 8014876:	05db      	lsls	r3, r3, #23
 8014878:	4605      	mov	r5, r0
 801487a:	460c      	mov	r4, r1
 801487c:	4616      	mov	r6, r2
 801487e:	d505      	bpl.n	801488c <__swrite+0x1e>
 8014880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014884:	2302      	movs	r3, #2
 8014886:	2200      	movs	r2, #0
 8014888:	f000 f840 	bl	801490c <_lseek_r>
 801488c:	89a3      	ldrh	r3, [r4, #12]
 801488e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014892:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014896:	81a3      	strh	r3, [r4, #12]
 8014898:	4632      	mov	r2, r6
 801489a:	463b      	mov	r3, r7
 801489c:	4628      	mov	r0, r5
 801489e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148a2:	f000 b857 	b.w	8014954 <_write_r>

080148a6 <__sseek>:
 80148a6:	b510      	push	{r4, lr}
 80148a8:	460c      	mov	r4, r1
 80148aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148ae:	f000 f82d 	bl	801490c <_lseek_r>
 80148b2:	1c43      	adds	r3, r0, #1
 80148b4:	89a3      	ldrh	r3, [r4, #12]
 80148b6:	bf15      	itete	ne
 80148b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80148ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80148be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80148c2:	81a3      	strheq	r3, [r4, #12]
 80148c4:	bf18      	it	ne
 80148c6:	81a3      	strhne	r3, [r4, #12]
 80148c8:	bd10      	pop	{r4, pc}

080148ca <__sclose>:
 80148ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148ce:	f000 b80d 	b.w	80148ec <_close_r>

080148d2 <memset>:
 80148d2:	4402      	add	r2, r0
 80148d4:	4603      	mov	r3, r0
 80148d6:	4293      	cmp	r3, r2
 80148d8:	d100      	bne.n	80148dc <memset+0xa>
 80148da:	4770      	bx	lr
 80148dc:	f803 1b01 	strb.w	r1, [r3], #1
 80148e0:	e7f9      	b.n	80148d6 <memset+0x4>
	...

080148e4 <_localeconv_r>:
 80148e4:	4800      	ldr	r0, [pc, #0]	@ (80148e8 <_localeconv_r+0x4>)
 80148e6:	4770      	bx	lr
 80148e8:	20000314 	.word	0x20000314

080148ec <_close_r>:
 80148ec:	b538      	push	{r3, r4, r5, lr}
 80148ee:	4d06      	ldr	r5, [pc, #24]	@ (8014908 <_close_r+0x1c>)
 80148f0:	2300      	movs	r3, #0
 80148f2:	4604      	mov	r4, r0
 80148f4:	4608      	mov	r0, r1
 80148f6:	602b      	str	r3, [r5, #0]
 80148f8:	f7ef fd0c 	bl	8004314 <_close>
 80148fc:	1c43      	adds	r3, r0, #1
 80148fe:	d102      	bne.n	8014906 <_close_r+0x1a>
 8014900:	682b      	ldr	r3, [r5, #0]
 8014902:	b103      	cbz	r3, 8014906 <_close_r+0x1a>
 8014904:	6023      	str	r3, [r4, #0]
 8014906:	bd38      	pop	{r3, r4, r5, pc}
 8014908:	20004fcc 	.word	0x20004fcc

0801490c <_lseek_r>:
 801490c:	b538      	push	{r3, r4, r5, lr}
 801490e:	4d07      	ldr	r5, [pc, #28]	@ (801492c <_lseek_r+0x20>)
 8014910:	4604      	mov	r4, r0
 8014912:	4608      	mov	r0, r1
 8014914:	4611      	mov	r1, r2
 8014916:	2200      	movs	r2, #0
 8014918:	602a      	str	r2, [r5, #0]
 801491a:	461a      	mov	r2, r3
 801491c:	f7ef fd21 	bl	8004362 <_lseek>
 8014920:	1c43      	adds	r3, r0, #1
 8014922:	d102      	bne.n	801492a <_lseek_r+0x1e>
 8014924:	682b      	ldr	r3, [r5, #0]
 8014926:	b103      	cbz	r3, 801492a <_lseek_r+0x1e>
 8014928:	6023      	str	r3, [r4, #0]
 801492a:	bd38      	pop	{r3, r4, r5, pc}
 801492c:	20004fcc 	.word	0x20004fcc

08014930 <_read_r>:
 8014930:	b538      	push	{r3, r4, r5, lr}
 8014932:	4d07      	ldr	r5, [pc, #28]	@ (8014950 <_read_r+0x20>)
 8014934:	4604      	mov	r4, r0
 8014936:	4608      	mov	r0, r1
 8014938:	4611      	mov	r1, r2
 801493a:	2200      	movs	r2, #0
 801493c:	602a      	str	r2, [r5, #0]
 801493e:	461a      	mov	r2, r3
 8014940:	f7ef fcaf 	bl	80042a2 <_read>
 8014944:	1c43      	adds	r3, r0, #1
 8014946:	d102      	bne.n	801494e <_read_r+0x1e>
 8014948:	682b      	ldr	r3, [r5, #0]
 801494a:	b103      	cbz	r3, 801494e <_read_r+0x1e>
 801494c:	6023      	str	r3, [r4, #0]
 801494e:	bd38      	pop	{r3, r4, r5, pc}
 8014950:	20004fcc 	.word	0x20004fcc

08014954 <_write_r>:
 8014954:	b538      	push	{r3, r4, r5, lr}
 8014956:	4d07      	ldr	r5, [pc, #28]	@ (8014974 <_write_r+0x20>)
 8014958:	4604      	mov	r4, r0
 801495a:	4608      	mov	r0, r1
 801495c:	4611      	mov	r1, r2
 801495e:	2200      	movs	r2, #0
 8014960:	602a      	str	r2, [r5, #0]
 8014962:	461a      	mov	r2, r3
 8014964:	f7ef fcba 	bl	80042dc <_write>
 8014968:	1c43      	adds	r3, r0, #1
 801496a:	d102      	bne.n	8014972 <_write_r+0x1e>
 801496c:	682b      	ldr	r3, [r5, #0]
 801496e:	b103      	cbz	r3, 8014972 <_write_r+0x1e>
 8014970:	6023      	str	r3, [r4, #0]
 8014972:	bd38      	pop	{r3, r4, r5, pc}
 8014974:	20004fcc 	.word	0x20004fcc

08014978 <__errno>:
 8014978:	4b01      	ldr	r3, [pc, #4]	@ (8014980 <__errno+0x8>)
 801497a:	6818      	ldr	r0, [r3, #0]
 801497c:	4770      	bx	lr
 801497e:	bf00      	nop
 8014980:	200001d4 	.word	0x200001d4

08014984 <__libc_init_array>:
 8014984:	b570      	push	{r4, r5, r6, lr}
 8014986:	4d0d      	ldr	r5, [pc, #52]	@ (80149bc <__libc_init_array+0x38>)
 8014988:	4c0d      	ldr	r4, [pc, #52]	@ (80149c0 <__libc_init_array+0x3c>)
 801498a:	1b64      	subs	r4, r4, r5
 801498c:	10a4      	asrs	r4, r4, #2
 801498e:	2600      	movs	r6, #0
 8014990:	42a6      	cmp	r6, r4
 8014992:	d109      	bne.n	80149a8 <__libc_init_array+0x24>
 8014994:	4d0b      	ldr	r5, [pc, #44]	@ (80149c4 <__libc_init_array+0x40>)
 8014996:	4c0c      	ldr	r4, [pc, #48]	@ (80149c8 <__libc_init_array+0x44>)
 8014998:	f003 fb74 	bl	8018084 <_init>
 801499c:	1b64      	subs	r4, r4, r5
 801499e:	10a4      	asrs	r4, r4, #2
 80149a0:	2600      	movs	r6, #0
 80149a2:	42a6      	cmp	r6, r4
 80149a4:	d105      	bne.n	80149b2 <__libc_init_array+0x2e>
 80149a6:	bd70      	pop	{r4, r5, r6, pc}
 80149a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80149ac:	4798      	blx	r3
 80149ae:	3601      	adds	r6, #1
 80149b0:	e7ee      	b.n	8014990 <__libc_init_array+0xc>
 80149b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80149b6:	4798      	blx	r3
 80149b8:	3601      	adds	r6, #1
 80149ba:	e7f2      	b.n	80149a2 <__libc_init_array+0x1e>
 80149bc:	08026440 	.word	0x08026440
 80149c0:	08026440 	.word	0x08026440
 80149c4:	08026440 	.word	0x08026440
 80149c8:	08026444 	.word	0x08026444

080149cc <__retarget_lock_init_recursive>:
 80149cc:	4770      	bx	lr

080149ce <__retarget_lock_acquire_recursive>:
 80149ce:	4770      	bx	lr

080149d0 <__retarget_lock_release_recursive>:
 80149d0:	4770      	bx	lr
	...

080149d4 <nanf>:
 80149d4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80149dc <nanf+0x8>
 80149d8:	4770      	bx	lr
 80149da:	bf00      	nop
 80149dc:	7fc00000 	.word	0x7fc00000

080149e0 <quorem>:
 80149e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149e4:	6903      	ldr	r3, [r0, #16]
 80149e6:	690c      	ldr	r4, [r1, #16]
 80149e8:	42a3      	cmp	r3, r4
 80149ea:	4607      	mov	r7, r0
 80149ec:	db7e      	blt.n	8014aec <quorem+0x10c>
 80149ee:	3c01      	subs	r4, #1
 80149f0:	f101 0814 	add.w	r8, r1, #20
 80149f4:	00a3      	lsls	r3, r4, #2
 80149f6:	f100 0514 	add.w	r5, r0, #20
 80149fa:	9300      	str	r3, [sp, #0]
 80149fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014a00:	9301      	str	r3, [sp, #4]
 8014a02:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014a06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014a0a:	3301      	adds	r3, #1
 8014a0c:	429a      	cmp	r2, r3
 8014a0e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014a12:	fbb2 f6f3 	udiv	r6, r2, r3
 8014a16:	d32e      	bcc.n	8014a76 <quorem+0x96>
 8014a18:	f04f 0a00 	mov.w	sl, #0
 8014a1c:	46c4      	mov	ip, r8
 8014a1e:	46ae      	mov	lr, r5
 8014a20:	46d3      	mov	fp, sl
 8014a22:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014a26:	b298      	uxth	r0, r3
 8014a28:	fb06 a000 	mla	r0, r6, r0, sl
 8014a2c:	0c02      	lsrs	r2, r0, #16
 8014a2e:	0c1b      	lsrs	r3, r3, #16
 8014a30:	fb06 2303 	mla	r3, r6, r3, r2
 8014a34:	f8de 2000 	ldr.w	r2, [lr]
 8014a38:	b280      	uxth	r0, r0
 8014a3a:	b292      	uxth	r2, r2
 8014a3c:	1a12      	subs	r2, r2, r0
 8014a3e:	445a      	add	r2, fp
 8014a40:	f8de 0000 	ldr.w	r0, [lr]
 8014a44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014a48:	b29b      	uxth	r3, r3
 8014a4a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014a4e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014a52:	b292      	uxth	r2, r2
 8014a54:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014a58:	45e1      	cmp	r9, ip
 8014a5a:	f84e 2b04 	str.w	r2, [lr], #4
 8014a5e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014a62:	d2de      	bcs.n	8014a22 <quorem+0x42>
 8014a64:	9b00      	ldr	r3, [sp, #0]
 8014a66:	58eb      	ldr	r3, [r5, r3]
 8014a68:	b92b      	cbnz	r3, 8014a76 <quorem+0x96>
 8014a6a:	9b01      	ldr	r3, [sp, #4]
 8014a6c:	3b04      	subs	r3, #4
 8014a6e:	429d      	cmp	r5, r3
 8014a70:	461a      	mov	r2, r3
 8014a72:	d32f      	bcc.n	8014ad4 <quorem+0xf4>
 8014a74:	613c      	str	r4, [r7, #16]
 8014a76:	4638      	mov	r0, r7
 8014a78:	f001 f9c2 	bl	8015e00 <__mcmp>
 8014a7c:	2800      	cmp	r0, #0
 8014a7e:	db25      	blt.n	8014acc <quorem+0xec>
 8014a80:	4629      	mov	r1, r5
 8014a82:	2000      	movs	r0, #0
 8014a84:	f858 2b04 	ldr.w	r2, [r8], #4
 8014a88:	f8d1 c000 	ldr.w	ip, [r1]
 8014a8c:	fa1f fe82 	uxth.w	lr, r2
 8014a90:	fa1f f38c 	uxth.w	r3, ip
 8014a94:	eba3 030e 	sub.w	r3, r3, lr
 8014a98:	4403      	add	r3, r0
 8014a9a:	0c12      	lsrs	r2, r2, #16
 8014a9c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014aa0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014aa4:	b29b      	uxth	r3, r3
 8014aa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014aaa:	45c1      	cmp	r9, r8
 8014aac:	f841 3b04 	str.w	r3, [r1], #4
 8014ab0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014ab4:	d2e6      	bcs.n	8014a84 <quorem+0xa4>
 8014ab6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014aba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014abe:	b922      	cbnz	r2, 8014aca <quorem+0xea>
 8014ac0:	3b04      	subs	r3, #4
 8014ac2:	429d      	cmp	r5, r3
 8014ac4:	461a      	mov	r2, r3
 8014ac6:	d30b      	bcc.n	8014ae0 <quorem+0x100>
 8014ac8:	613c      	str	r4, [r7, #16]
 8014aca:	3601      	adds	r6, #1
 8014acc:	4630      	mov	r0, r6
 8014ace:	b003      	add	sp, #12
 8014ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ad4:	6812      	ldr	r2, [r2, #0]
 8014ad6:	3b04      	subs	r3, #4
 8014ad8:	2a00      	cmp	r2, #0
 8014ada:	d1cb      	bne.n	8014a74 <quorem+0x94>
 8014adc:	3c01      	subs	r4, #1
 8014ade:	e7c6      	b.n	8014a6e <quorem+0x8e>
 8014ae0:	6812      	ldr	r2, [r2, #0]
 8014ae2:	3b04      	subs	r3, #4
 8014ae4:	2a00      	cmp	r2, #0
 8014ae6:	d1ef      	bne.n	8014ac8 <quorem+0xe8>
 8014ae8:	3c01      	subs	r4, #1
 8014aea:	e7ea      	b.n	8014ac2 <quorem+0xe2>
 8014aec:	2000      	movs	r0, #0
 8014aee:	e7ee      	b.n	8014ace <quorem+0xee>

08014af0 <_dtoa_r>:
 8014af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014af4:	69c7      	ldr	r7, [r0, #28]
 8014af6:	b099      	sub	sp, #100	@ 0x64
 8014af8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014afc:	ec55 4b10 	vmov	r4, r5, d0
 8014b00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8014b02:	9109      	str	r1, [sp, #36]	@ 0x24
 8014b04:	4683      	mov	fp, r0
 8014b06:	920e      	str	r2, [sp, #56]	@ 0x38
 8014b08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014b0a:	b97f      	cbnz	r7, 8014b2c <_dtoa_r+0x3c>
 8014b0c:	2010      	movs	r0, #16
 8014b0e:	f000 fdfd 	bl	801570c <malloc>
 8014b12:	4602      	mov	r2, r0
 8014b14:	f8cb 001c 	str.w	r0, [fp, #28]
 8014b18:	b920      	cbnz	r0, 8014b24 <_dtoa_r+0x34>
 8014b1a:	4ba7      	ldr	r3, [pc, #668]	@ (8014db8 <_dtoa_r+0x2c8>)
 8014b1c:	21ef      	movs	r1, #239	@ 0xef
 8014b1e:	48a7      	ldr	r0, [pc, #668]	@ (8014dbc <_dtoa_r+0x2cc>)
 8014b20:	f002 fe0e 	bl	8017740 <__assert_func>
 8014b24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014b28:	6007      	str	r7, [r0, #0]
 8014b2a:	60c7      	str	r7, [r0, #12]
 8014b2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014b30:	6819      	ldr	r1, [r3, #0]
 8014b32:	b159      	cbz	r1, 8014b4c <_dtoa_r+0x5c>
 8014b34:	685a      	ldr	r2, [r3, #4]
 8014b36:	604a      	str	r2, [r1, #4]
 8014b38:	2301      	movs	r3, #1
 8014b3a:	4093      	lsls	r3, r2
 8014b3c:	608b      	str	r3, [r1, #8]
 8014b3e:	4658      	mov	r0, fp
 8014b40:	f000 feda 	bl	80158f8 <_Bfree>
 8014b44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014b48:	2200      	movs	r2, #0
 8014b4a:	601a      	str	r2, [r3, #0]
 8014b4c:	1e2b      	subs	r3, r5, #0
 8014b4e:	bfb9      	ittee	lt
 8014b50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014b54:	9303      	strlt	r3, [sp, #12]
 8014b56:	2300      	movge	r3, #0
 8014b58:	6033      	strge	r3, [r6, #0]
 8014b5a:	9f03      	ldr	r7, [sp, #12]
 8014b5c:	4b98      	ldr	r3, [pc, #608]	@ (8014dc0 <_dtoa_r+0x2d0>)
 8014b5e:	bfbc      	itt	lt
 8014b60:	2201      	movlt	r2, #1
 8014b62:	6032      	strlt	r2, [r6, #0]
 8014b64:	43bb      	bics	r3, r7
 8014b66:	d112      	bne.n	8014b8e <_dtoa_r+0x9e>
 8014b68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014b6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014b6e:	6013      	str	r3, [r2, #0]
 8014b70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014b74:	4323      	orrs	r3, r4
 8014b76:	f000 854d 	beq.w	8015614 <_dtoa_r+0xb24>
 8014b7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014b7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8014dd4 <_dtoa_r+0x2e4>
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	f000 854f 	beq.w	8015624 <_dtoa_r+0xb34>
 8014b86:	f10a 0303 	add.w	r3, sl, #3
 8014b8a:	f000 bd49 	b.w	8015620 <_dtoa_r+0xb30>
 8014b8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014b92:	2200      	movs	r2, #0
 8014b94:	ec51 0b17 	vmov	r0, r1, d7
 8014b98:	2300      	movs	r3, #0
 8014b9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8014b9e:	f7eb ffbb 	bl	8000b18 <__aeabi_dcmpeq>
 8014ba2:	4680      	mov	r8, r0
 8014ba4:	b158      	cbz	r0, 8014bbe <_dtoa_r+0xce>
 8014ba6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014ba8:	2301      	movs	r3, #1
 8014baa:	6013      	str	r3, [r2, #0]
 8014bac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014bae:	b113      	cbz	r3, 8014bb6 <_dtoa_r+0xc6>
 8014bb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014bb2:	4b84      	ldr	r3, [pc, #528]	@ (8014dc4 <_dtoa_r+0x2d4>)
 8014bb4:	6013      	str	r3, [r2, #0]
 8014bb6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8014dd8 <_dtoa_r+0x2e8>
 8014bba:	f000 bd33 	b.w	8015624 <_dtoa_r+0xb34>
 8014bbe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8014bc2:	aa16      	add	r2, sp, #88	@ 0x58
 8014bc4:	a917      	add	r1, sp, #92	@ 0x5c
 8014bc6:	4658      	mov	r0, fp
 8014bc8:	f001 fa3a 	bl	8016040 <__d2b>
 8014bcc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014bd0:	4681      	mov	r9, r0
 8014bd2:	2e00      	cmp	r6, #0
 8014bd4:	d077      	beq.n	8014cc6 <_dtoa_r+0x1d6>
 8014bd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014bd8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8014bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014be0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014be4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014be8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014bec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014bf0:	4619      	mov	r1, r3
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	4b74      	ldr	r3, [pc, #464]	@ (8014dc8 <_dtoa_r+0x2d8>)
 8014bf6:	f7eb fb6f 	bl	80002d8 <__aeabi_dsub>
 8014bfa:	a369      	add	r3, pc, #420	@ (adr r3, 8014da0 <_dtoa_r+0x2b0>)
 8014bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c00:	f7eb fd22 	bl	8000648 <__aeabi_dmul>
 8014c04:	a368      	add	r3, pc, #416	@ (adr r3, 8014da8 <_dtoa_r+0x2b8>)
 8014c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c0a:	f7eb fb67 	bl	80002dc <__adddf3>
 8014c0e:	4604      	mov	r4, r0
 8014c10:	4630      	mov	r0, r6
 8014c12:	460d      	mov	r5, r1
 8014c14:	f7eb fcae 	bl	8000574 <__aeabi_i2d>
 8014c18:	a365      	add	r3, pc, #404	@ (adr r3, 8014db0 <_dtoa_r+0x2c0>)
 8014c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c1e:	f7eb fd13 	bl	8000648 <__aeabi_dmul>
 8014c22:	4602      	mov	r2, r0
 8014c24:	460b      	mov	r3, r1
 8014c26:	4620      	mov	r0, r4
 8014c28:	4629      	mov	r1, r5
 8014c2a:	f7eb fb57 	bl	80002dc <__adddf3>
 8014c2e:	4604      	mov	r4, r0
 8014c30:	460d      	mov	r5, r1
 8014c32:	f7eb ffb9 	bl	8000ba8 <__aeabi_d2iz>
 8014c36:	2200      	movs	r2, #0
 8014c38:	4607      	mov	r7, r0
 8014c3a:	2300      	movs	r3, #0
 8014c3c:	4620      	mov	r0, r4
 8014c3e:	4629      	mov	r1, r5
 8014c40:	f7eb ff74 	bl	8000b2c <__aeabi_dcmplt>
 8014c44:	b140      	cbz	r0, 8014c58 <_dtoa_r+0x168>
 8014c46:	4638      	mov	r0, r7
 8014c48:	f7eb fc94 	bl	8000574 <__aeabi_i2d>
 8014c4c:	4622      	mov	r2, r4
 8014c4e:	462b      	mov	r3, r5
 8014c50:	f7eb ff62 	bl	8000b18 <__aeabi_dcmpeq>
 8014c54:	b900      	cbnz	r0, 8014c58 <_dtoa_r+0x168>
 8014c56:	3f01      	subs	r7, #1
 8014c58:	2f16      	cmp	r7, #22
 8014c5a:	d851      	bhi.n	8014d00 <_dtoa_r+0x210>
 8014c5c:	4b5b      	ldr	r3, [pc, #364]	@ (8014dcc <_dtoa_r+0x2dc>)
 8014c5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014c6a:	f7eb ff5f 	bl	8000b2c <__aeabi_dcmplt>
 8014c6e:	2800      	cmp	r0, #0
 8014c70:	d048      	beq.n	8014d04 <_dtoa_r+0x214>
 8014c72:	3f01      	subs	r7, #1
 8014c74:	2300      	movs	r3, #0
 8014c76:	9312      	str	r3, [sp, #72]	@ 0x48
 8014c78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014c7a:	1b9b      	subs	r3, r3, r6
 8014c7c:	1e5a      	subs	r2, r3, #1
 8014c7e:	bf44      	itt	mi
 8014c80:	f1c3 0801 	rsbmi	r8, r3, #1
 8014c84:	2300      	movmi	r3, #0
 8014c86:	9208      	str	r2, [sp, #32]
 8014c88:	bf54      	ite	pl
 8014c8a:	f04f 0800 	movpl.w	r8, #0
 8014c8e:	9308      	strmi	r3, [sp, #32]
 8014c90:	2f00      	cmp	r7, #0
 8014c92:	db39      	blt.n	8014d08 <_dtoa_r+0x218>
 8014c94:	9b08      	ldr	r3, [sp, #32]
 8014c96:	970f      	str	r7, [sp, #60]	@ 0x3c
 8014c98:	443b      	add	r3, r7
 8014c9a:	9308      	str	r3, [sp, #32]
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ca2:	2b09      	cmp	r3, #9
 8014ca4:	d864      	bhi.n	8014d70 <_dtoa_r+0x280>
 8014ca6:	2b05      	cmp	r3, #5
 8014ca8:	bfc4      	itt	gt
 8014caa:	3b04      	subgt	r3, #4
 8014cac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8014cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014cb0:	f1a3 0302 	sub.w	r3, r3, #2
 8014cb4:	bfcc      	ite	gt
 8014cb6:	2400      	movgt	r4, #0
 8014cb8:	2401      	movle	r4, #1
 8014cba:	2b03      	cmp	r3, #3
 8014cbc:	d863      	bhi.n	8014d86 <_dtoa_r+0x296>
 8014cbe:	e8df f003 	tbb	[pc, r3]
 8014cc2:	372a      	.short	0x372a
 8014cc4:	5535      	.short	0x5535
 8014cc6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8014cca:	441e      	add	r6, r3
 8014ccc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014cd0:	2b20      	cmp	r3, #32
 8014cd2:	bfc1      	itttt	gt
 8014cd4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014cd8:	409f      	lslgt	r7, r3
 8014cda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014cde:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014ce2:	bfd6      	itet	le
 8014ce4:	f1c3 0320 	rsble	r3, r3, #32
 8014ce8:	ea47 0003 	orrgt.w	r0, r7, r3
 8014cec:	fa04 f003 	lslle.w	r0, r4, r3
 8014cf0:	f7eb fc30 	bl	8000554 <__aeabi_ui2d>
 8014cf4:	2201      	movs	r2, #1
 8014cf6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8014cfa:	3e01      	subs	r6, #1
 8014cfc:	9214      	str	r2, [sp, #80]	@ 0x50
 8014cfe:	e777      	b.n	8014bf0 <_dtoa_r+0x100>
 8014d00:	2301      	movs	r3, #1
 8014d02:	e7b8      	b.n	8014c76 <_dtoa_r+0x186>
 8014d04:	9012      	str	r0, [sp, #72]	@ 0x48
 8014d06:	e7b7      	b.n	8014c78 <_dtoa_r+0x188>
 8014d08:	427b      	negs	r3, r7
 8014d0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	eba8 0807 	sub.w	r8, r8, r7
 8014d12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014d14:	e7c4      	b.n	8014ca0 <_dtoa_r+0x1b0>
 8014d16:	2300      	movs	r3, #0
 8014d18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014d1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	dc35      	bgt.n	8014d8c <_dtoa_r+0x29c>
 8014d20:	2301      	movs	r3, #1
 8014d22:	9300      	str	r3, [sp, #0]
 8014d24:	9307      	str	r3, [sp, #28]
 8014d26:	461a      	mov	r2, r3
 8014d28:	920e      	str	r2, [sp, #56]	@ 0x38
 8014d2a:	e00b      	b.n	8014d44 <_dtoa_r+0x254>
 8014d2c:	2301      	movs	r3, #1
 8014d2e:	e7f3      	b.n	8014d18 <_dtoa_r+0x228>
 8014d30:	2300      	movs	r3, #0
 8014d32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014d34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014d36:	18fb      	adds	r3, r7, r3
 8014d38:	9300      	str	r3, [sp, #0]
 8014d3a:	3301      	adds	r3, #1
 8014d3c:	2b01      	cmp	r3, #1
 8014d3e:	9307      	str	r3, [sp, #28]
 8014d40:	bfb8      	it	lt
 8014d42:	2301      	movlt	r3, #1
 8014d44:	f8db 001c 	ldr.w	r0, [fp, #28]
 8014d48:	2100      	movs	r1, #0
 8014d4a:	2204      	movs	r2, #4
 8014d4c:	f102 0514 	add.w	r5, r2, #20
 8014d50:	429d      	cmp	r5, r3
 8014d52:	d91f      	bls.n	8014d94 <_dtoa_r+0x2a4>
 8014d54:	6041      	str	r1, [r0, #4]
 8014d56:	4658      	mov	r0, fp
 8014d58:	f000 fd8e 	bl	8015878 <_Balloc>
 8014d5c:	4682      	mov	sl, r0
 8014d5e:	2800      	cmp	r0, #0
 8014d60:	d13c      	bne.n	8014ddc <_dtoa_r+0x2ec>
 8014d62:	4b1b      	ldr	r3, [pc, #108]	@ (8014dd0 <_dtoa_r+0x2e0>)
 8014d64:	4602      	mov	r2, r0
 8014d66:	f240 11af 	movw	r1, #431	@ 0x1af
 8014d6a:	e6d8      	b.n	8014b1e <_dtoa_r+0x2e>
 8014d6c:	2301      	movs	r3, #1
 8014d6e:	e7e0      	b.n	8014d32 <_dtoa_r+0x242>
 8014d70:	2401      	movs	r4, #1
 8014d72:	2300      	movs	r3, #0
 8014d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d76:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014d78:	f04f 33ff 	mov.w	r3, #4294967295
 8014d7c:	9300      	str	r3, [sp, #0]
 8014d7e:	9307      	str	r3, [sp, #28]
 8014d80:	2200      	movs	r2, #0
 8014d82:	2312      	movs	r3, #18
 8014d84:	e7d0      	b.n	8014d28 <_dtoa_r+0x238>
 8014d86:	2301      	movs	r3, #1
 8014d88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014d8a:	e7f5      	b.n	8014d78 <_dtoa_r+0x288>
 8014d8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014d8e:	9300      	str	r3, [sp, #0]
 8014d90:	9307      	str	r3, [sp, #28]
 8014d92:	e7d7      	b.n	8014d44 <_dtoa_r+0x254>
 8014d94:	3101      	adds	r1, #1
 8014d96:	0052      	lsls	r2, r2, #1
 8014d98:	e7d8      	b.n	8014d4c <_dtoa_r+0x25c>
 8014d9a:	bf00      	nop
 8014d9c:	f3af 8000 	nop.w
 8014da0:	636f4361 	.word	0x636f4361
 8014da4:	3fd287a7 	.word	0x3fd287a7
 8014da8:	8b60c8b3 	.word	0x8b60c8b3
 8014dac:	3fc68a28 	.word	0x3fc68a28
 8014db0:	509f79fb 	.word	0x509f79fb
 8014db4:	3fd34413 	.word	0x3fd34413
 8014db8:	08026052 	.word	0x08026052
 8014dbc:	08026069 	.word	0x08026069
 8014dc0:	7ff00000 	.word	0x7ff00000
 8014dc4:	0802601d 	.word	0x0802601d
 8014dc8:	3ff80000 	.word	0x3ff80000
 8014dcc:	08026160 	.word	0x08026160
 8014dd0:	080260c1 	.word	0x080260c1
 8014dd4:	0802604e 	.word	0x0802604e
 8014dd8:	0802601c 	.word	0x0802601c
 8014ddc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014de0:	6018      	str	r0, [r3, #0]
 8014de2:	9b07      	ldr	r3, [sp, #28]
 8014de4:	2b0e      	cmp	r3, #14
 8014de6:	f200 80a4 	bhi.w	8014f32 <_dtoa_r+0x442>
 8014dea:	2c00      	cmp	r4, #0
 8014dec:	f000 80a1 	beq.w	8014f32 <_dtoa_r+0x442>
 8014df0:	2f00      	cmp	r7, #0
 8014df2:	dd33      	ble.n	8014e5c <_dtoa_r+0x36c>
 8014df4:	4bad      	ldr	r3, [pc, #692]	@ (80150ac <_dtoa_r+0x5bc>)
 8014df6:	f007 020f 	and.w	r2, r7, #15
 8014dfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014dfe:	ed93 7b00 	vldr	d7, [r3]
 8014e02:	05f8      	lsls	r0, r7, #23
 8014e04:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014e08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8014e0c:	d516      	bpl.n	8014e3c <_dtoa_r+0x34c>
 8014e0e:	4ba8      	ldr	r3, [pc, #672]	@ (80150b0 <_dtoa_r+0x5c0>)
 8014e10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014e14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014e18:	f7eb fd40 	bl	800089c <__aeabi_ddiv>
 8014e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014e20:	f004 040f 	and.w	r4, r4, #15
 8014e24:	2603      	movs	r6, #3
 8014e26:	4da2      	ldr	r5, [pc, #648]	@ (80150b0 <_dtoa_r+0x5c0>)
 8014e28:	b954      	cbnz	r4, 8014e40 <_dtoa_r+0x350>
 8014e2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014e32:	f7eb fd33 	bl	800089c <__aeabi_ddiv>
 8014e36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014e3a:	e028      	b.n	8014e8e <_dtoa_r+0x39e>
 8014e3c:	2602      	movs	r6, #2
 8014e3e:	e7f2      	b.n	8014e26 <_dtoa_r+0x336>
 8014e40:	07e1      	lsls	r1, r4, #31
 8014e42:	d508      	bpl.n	8014e56 <_dtoa_r+0x366>
 8014e44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014e48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014e4c:	f7eb fbfc 	bl	8000648 <__aeabi_dmul>
 8014e50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014e54:	3601      	adds	r6, #1
 8014e56:	1064      	asrs	r4, r4, #1
 8014e58:	3508      	adds	r5, #8
 8014e5a:	e7e5      	b.n	8014e28 <_dtoa_r+0x338>
 8014e5c:	f000 80d2 	beq.w	8015004 <_dtoa_r+0x514>
 8014e60:	427c      	negs	r4, r7
 8014e62:	4b92      	ldr	r3, [pc, #584]	@ (80150ac <_dtoa_r+0x5bc>)
 8014e64:	4d92      	ldr	r5, [pc, #584]	@ (80150b0 <_dtoa_r+0x5c0>)
 8014e66:	f004 020f 	and.w	r2, r4, #15
 8014e6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014e76:	f7eb fbe7 	bl	8000648 <__aeabi_dmul>
 8014e7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014e7e:	1124      	asrs	r4, r4, #4
 8014e80:	2300      	movs	r3, #0
 8014e82:	2602      	movs	r6, #2
 8014e84:	2c00      	cmp	r4, #0
 8014e86:	f040 80b2 	bne.w	8014fee <_dtoa_r+0x4fe>
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d1d3      	bne.n	8014e36 <_dtoa_r+0x346>
 8014e8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014e90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	f000 80b7 	beq.w	8015008 <_dtoa_r+0x518>
 8014e9a:	4b86      	ldr	r3, [pc, #536]	@ (80150b4 <_dtoa_r+0x5c4>)
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	4620      	mov	r0, r4
 8014ea0:	4629      	mov	r1, r5
 8014ea2:	f7eb fe43 	bl	8000b2c <__aeabi_dcmplt>
 8014ea6:	2800      	cmp	r0, #0
 8014ea8:	f000 80ae 	beq.w	8015008 <_dtoa_r+0x518>
 8014eac:	9b07      	ldr	r3, [sp, #28]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	f000 80aa 	beq.w	8015008 <_dtoa_r+0x518>
 8014eb4:	9b00      	ldr	r3, [sp, #0]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	dd37      	ble.n	8014f2a <_dtoa_r+0x43a>
 8014eba:	1e7b      	subs	r3, r7, #1
 8014ebc:	9304      	str	r3, [sp, #16]
 8014ebe:	4620      	mov	r0, r4
 8014ec0:	4b7d      	ldr	r3, [pc, #500]	@ (80150b8 <_dtoa_r+0x5c8>)
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	4629      	mov	r1, r5
 8014ec6:	f7eb fbbf 	bl	8000648 <__aeabi_dmul>
 8014eca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014ece:	9c00      	ldr	r4, [sp, #0]
 8014ed0:	3601      	adds	r6, #1
 8014ed2:	4630      	mov	r0, r6
 8014ed4:	f7eb fb4e 	bl	8000574 <__aeabi_i2d>
 8014ed8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014edc:	f7eb fbb4 	bl	8000648 <__aeabi_dmul>
 8014ee0:	4b76      	ldr	r3, [pc, #472]	@ (80150bc <_dtoa_r+0x5cc>)
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	f7eb f9fa 	bl	80002dc <__adddf3>
 8014ee8:	4605      	mov	r5, r0
 8014eea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8014eee:	2c00      	cmp	r4, #0
 8014ef0:	f040 808d 	bne.w	801500e <_dtoa_r+0x51e>
 8014ef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ef8:	4b71      	ldr	r3, [pc, #452]	@ (80150c0 <_dtoa_r+0x5d0>)
 8014efa:	2200      	movs	r2, #0
 8014efc:	f7eb f9ec 	bl	80002d8 <__aeabi_dsub>
 8014f00:	4602      	mov	r2, r0
 8014f02:	460b      	mov	r3, r1
 8014f04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014f08:	462a      	mov	r2, r5
 8014f0a:	4633      	mov	r3, r6
 8014f0c:	f7eb fe2c 	bl	8000b68 <__aeabi_dcmpgt>
 8014f10:	2800      	cmp	r0, #0
 8014f12:	f040 828b 	bne.w	801542c <_dtoa_r+0x93c>
 8014f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014f1a:	462a      	mov	r2, r5
 8014f1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014f20:	f7eb fe04 	bl	8000b2c <__aeabi_dcmplt>
 8014f24:	2800      	cmp	r0, #0
 8014f26:	f040 8128 	bne.w	801517a <_dtoa_r+0x68a>
 8014f2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8014f2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014f32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	f2c0 815a 	blt.w	80151ee <_dtoa_r+0x6fe>
 8014f3a:	2f0e      	cmp	r7, #14
 8014f3c:	f300 8157 	bgt.w	80151ee <_dtoa_r+0x6fe>
 8014f40:	4b5a      	ldr	r3, [pc, #360]	@ (80150ac <_dtoa_r+0x5bc>)
 8014f42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014f46:	ed93 7b00 	vldr	d7, [r3]
 8014f4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	ed8d 7b00 	vstr	d7, [sp]
 8014f52:	da03      	bge.n	8014f5c <_dtoa_r+0x46c>
 8014f54:	9b07      	ldr	r3, [sp, #28]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	f340 8101 	ble.w	801515e <_dtoa_r+0x66e>
 8014f5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014f60:	4656      	mov	r6, sl
 8014f62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014f66:	4620      	mov	r0, r4
 8014f68:	4629      	mov	r1, r5
 8014f6a:	f7eb fc97 	bl	800089c <__aeabi_ddiv>
 8014f6e:	f7eb fe1b 	bl	8000ba8 <__aeabi_d2iz>
 8014f72:	4680      	mov	r8, r0
 8014f74:	f7eb fafe 	bl	8000574 <__aeabi_i2d>
 8014f78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014f7c:	f7eb fb64 	bl	8000648 <__aeabi_dmul>
 8014f80:	4602      	mov	r2, r0
 8014f82:	460b      	mov	r3, r1
 8014f84:	4620      	mov	r0, r4
 8014f86:	4629      	mov	r1, r5
 8014f88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8014f8c:	f7eb f9a4 	bl	80002d8 <__aeabi_dsub>
 8014f90:	f806 4b01 	strb.w	r4, [r6], #1
 8014f94:	9d07      	ldr	r5, [sp, #28]
 8014f96:	eba6 040a 	sub.w	r4, r6, sl
 8014f9a:	42a5      	cmp	r5, r4
 8014f9c:	4602      	mov	r2, r0
 8014f9e:	460b      	mov	r3, r1
 8014fa0:	f040 8117 	bne.w	80151d2 <_dtoa_r+0x6e2>
 8014fa4:	f7eb f99a 	bl	80002dc <__adddf3>
 8014fa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014fac:	4604      	mov	r4, r0
 8014fae:	460d      	mov	r5, r1
 8014fb0:	f7eb fdda 	bl	8000b68 <__aeabi_dcmpgt>
 8014fb4:	2800      	cmp	r0, #0
 8014fb6:	f040 80f9 	bne.w	80151ac <_dtoa_r+0x6bc>
 8014fba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014fbe:	4620      	mov	r0, r4
 8014fc0:	4629      	mov	r1, r5
 8014fc2:	f7eb fda9 	bl	8000b18 <__aeabi_dcmpeq>
 8014fc6:	b118      	cbz	r0, 8014fd0 <_dtoa_r+0x4e0>
 8014fc8:	f018 0f01 	tst.w	r8, #1
 8014fcc:	f040 80ee 	bne.w	80151ac <_dtoa_r+0x6bc>
 8014fd0:	4649      	mov	r1, r9
 8014fd2:	4658      	mov	r0, fp
 8014fd4:	f000 fc90 	bl	80158f8 <_Bfree>
 8014fd8:	2300      	movs	r3, #0
 8014fda:	7033      	strb	r3, [r6, #0]
 8014fdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014fde:	3701      	adds	r7, #1
 8014fe0:	601f      	str	r7, [r3, #0]
 8014fe2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	f000 831d 	beq.w	8015624 <_dtoa_r+0xb34>
 8014fea:	601e      	str	r6, [r3, #0]
 8014fec:	e31a      	b.n	8015624 <_dtoa_r+0xb34>
 8014fee:	07e2      	lsls	r2, r4, #31
 8014ff0:	d505      	bpl.n	8014ffe <_dtoa_r+0x50e>
 8014ff2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014ff6:	f7eb fb27 	bl	8000648 <__aeabi_dmul>
 8014ffa:	3601      	adds	r6, #1
 8014ffc:	2301      	movs	r3, #1
 8014ffe:	1064      	asrs	r4, r4, #1
 8015000:	3508      	adds	r5, #8
 8015002:	e73f      	b.n	8014e84 <_dtoa_r+0x394>
 8015004:	2602      	movs	r6, #2
 8015006:	e742      	b.n	8014e8e <_dtoa_r+0x39e>
 8015008:	9c07      	ldr	r4, [sp, #28]
 801500a:	9704      	str	r7, [sp, #16]
 801500c:	e761      	b.n	8014ed2 <_dtoa_r+0x3e2>
 801500e:	4b27      	ldr	r3, [pc, #156]	@ (80150ac <_dtoa_r+0x5bc>)
 8015010:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015012:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015016:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801501a:	4454      	add	r4, sl
 801501c:	2900      	cmp	r1, #0
 801501e:	d053      	beq.n	80150c8 <_dtoa_r+0x5d8>
 8015020:	4928      	ldr	r1, [pc, #160]	@ (80150c4 <_dtoa_r+0x5d4>)
 8015022:	2000      	movs	r0, #0
 8015024:	f7eb fc3a 	bl	800089c <__aeabi_ddiv>
 8015028:	4633      	mov	r3, r6
 801502a:	462a      	mov	r2, r5
 801502c:	f7eb f954 	bl	80002d8 <__aeabi_dsub>
 8015030:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015034:	4656      	mov	r6, sl
 8015036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801503a:	f7eb fdb5 	bl	8000ba8 <__aeabi_d2iz>
 801503e:	4605      	mov	r5, r0
 8015040:	f7eb fa98 	bl	8000574 <__aeabi_i2d>
 8015044:	4602      	mov	r2, r0
 8015046:	460b      	mov	r3, r1
 8015048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801504c:	f7eb f944 	bl	80002d8 <__aeabi_dsub>
 8015050:	3530      	adds	r5, #48	@ 0x30
 8015052:	4602      	mov	r2, r0
 8015054:	460b      	mov	r3, r1
 8015056:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801505a:	f806 5b01 	strb.w	r5, [r6], #1
 801505e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015062:	f7eb fd63 	bl	8000b2c <__aeabi_dcmplt>
 8015066:	2800      	cmp	r0, #0
 8015068:	d171      	bne.n	801514e <_dtoa_r+0x65e>
 801506a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801506e:	4911      	ldr	r1, [pc, #68]	@ (80150b4 <_dtoa_r+0x5c4>)
 8015070:	2000      	movs	r0, #0
 8015072:	f7eb f931 	bl	80002d8 <__aeabi_dsub>
 8015076:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801507a:	f7eb fd57 	bl	8000b2c <__aeabi_dcmplt>
 801507e:	2800      	cmp	r0, #0
 8015080:	f040 8095 	bne.w	80151ae <_dtoa_r+0x6be>
 8015084:	42a6      	cmp	r6, r4
 8015086:	f43f af50 	beq.w	8014f2a <_dtoa_r+0x43a>
 801508a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801508e:	4b0a      	ldr	r3, [pc, #40]	@ (80150b8 <_dtoa_r+0x5c8>)
 8015090:	2200      	movs	r2, #0
 8015092:	f7eb fad9 	bl	8000648 <__aeabi_dmul>
 8015096:	4b08      	ldr	r3, [pc, #32]	@ (80150b8 <_dtoa_r+0x5c8>)
 8015098:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801509c:	2200      	movs	r2, #0
 801509e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150a2:	f7eb fad1 	bl	8000648 <__aeabi_dmul>
 80150a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80150aa:	e7c4      	b.n	8015036 <_dtoa_r+0x546>
 80150ac:	08026160 	.word	0x08026160
 80150b0:	08026138 	.word	0x08026138
 80150b4:	3ff00000 	.word	0x3ff00000
 80150b8:	40240000 	.word	0x40240000
 80150bc:	401c0000 	.word	0x401c0000
 80150c0:	40140000 	.word	0x40140000
 80150c4:	3fe00000 	.word	0x3fe00000
 80150c8:	4631      	mov	r1, r6
 80150ca:	4628      	mov	r0, r5
 80150cc:	f7eb fabc 	bl	8000648 <__aeabi_dmul>
 80150d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80150d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80150d6:	4656      	mov	r6, sl
 80150d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150dc:	f7eb fd64 	bl	8000ba8 <__aeabi_d2iz>
 80150e0:	4605      	mov	r5, r0
 80150e2:	f7eb fa47 	bl	8000574 <__aeabi_i2d>
 80150e6:	4602      	mov	r2, r0
 80150e8:	460b      	mov	r3, r1
 80150ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150ee:	f7eb f8f3 	bl	80002d8 <__aeabi_dsub>
 80150f2:	3530      	adds	r5, #48	@ 0x30
 80150f4:	f806 5b01 	strb.w	r5, [r6], #1
 80150f8:	4602      	mov	r2, r0
 80150fa:	460b      	mov	r3, r1
 80150fc:	42a6      	cmp	r6, r4
 80150fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015102:	f04f 0200 	mov.w	r2, #0
 8015106:	d124      	bne.n	8015152 <_dtoa_r+0x662>
 8015108:	4bac      	ldr	r3, [pc, #688]	@ (80153bc <_dtoa_r+0x8cc>)
 801510a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801510e:	f7eb f8e5 	bl	80002dc <__adddf3>
 8015112:	4602      	mov	r2, r0
 8015114:	460b      	mov	r3, r1
 8015116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801511a:	f7eb fd25 	bl	8000b68 <__aeabi_dcmpgt>
 801511e:	2800      	cmp	r0, #0
 8015120:	d145      	bne.n	80151ae <_dtoa_r+0x6be>
 8015122:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015126:	49a5      	ldr	r1, [pc, #660]	@ (80153bc <_dtoa_r+0x8cc>)
 8015128:	2000      	movs	r0, #0
 801512a:	f7eb f8d5 	bl	80002d8 <__aeabi_dsub>
 801512e:	4602      	mov	r2, r0
 8015130:	460b      	mov	r3, r1
 8015132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015136:	f7eb fcf9 	bl	8000b2c <__aeabi_dcmplt>
 801513a:	2800      	cmp	r0, #0
 801513c:	f43f aef5 	beq.w	8014f2a <_dtoa_r+0x43a>
 8015140:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8015142:	1e73      	subs	r3, r6, #1
 8015144:	9315      	str	r3, [sp, #84]	@ 0x54
 8015146:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801514a:	2b30      	cmp	r3, #48	@ 0x30
 801514c:	d0f8      	beq.n	8015140 <_dtoa_r+0x650>
 801514e:	9f04      	ldr	r7, [sp, #16]
 8015150:	e73e      	b.n	8014fd0 <_dtoa_r+0x4e0>
 8015152:	4b9b      	ldr	r3, [pc, #620]	@ (80153c0 <_dtoa_r+0x8d0>)
 8015154:	f7eb fa78 	bl	8000648 <__aeabi_dmul>
 8015158:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801515c:	e7bc      	b.n	80150d8 <_dtoa_r+0x5e8>
 801515e:	d10c      	bne.n	801517a <_dtoa_r+0x68a>
 8015160:	4b98      	ldr	r3, [pc, #608]	@ (80153c4 <_dtoa_r+0x8d4>)
 8015162:	2200      	movs	r2, #0
 8015164:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015168:	f7eb fa6e 	bl	8000648 <__aeabi_dmul>
 801516c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015170:	f7eb fcf0 	bl	8000b54 <__aeabi_dcmpge>
 8015174:	2800      	cmp	r0, #0
 8015176:	f000 8157 	beq.w	8015428 <_dtoa_r+0x938>
 801517a:	2400      	movs	r4, #0
 801517c:	4625      	mov	r5, r4
 801517e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015180:	43db      	mvns	r3, r3
 8015182:	9304      	str	r3, [sp, #16]
 8015184:	4656      	mov	r6, sl
 8015186:	2700      	movs	r7, #0
 8015188:	4621      	mov	r1, r4
 801518a:	4658      	mov	r0, fp
 801518c:	f000 fbb4 	bl	80158f8 <_Bfree>
 8015190:	2d00      	cmp	r5, #0
 8015192:	d0dc      	beq.n	801514e <_dtoa_r+0x65e>
 8015194:	b12f      	cbz	r7, 80151a2 <_dtoa_r+0x6b2>
 8015196:	42af      	cmp	r7, r5
 8015198:	d003      	beq.n	80151a2 <_dtoa_r+0x6b2>
 801519a:	4639      	mov	r1, r7
 801519c:	4658      	mov	r0, fp
 801519e:	f000 fbab 	bl	80158f8 <_Bfree>
 80151a2:	4629      	mov	r1, r5
 80151a4:	4658      	mov	r0, fp
 80151a6:	f000 fba7 	bl	80158f8 <_Bfree>
 80151aa:	e7d0      	b.n	801514e <_dtoa_r+0x65e>
 80151ac:	9704      	str	r7, [sp, #16]
 80151ae:	4633      	mov	r3, r6
 80151b0:	461e      	mov	r6, r3
 80151b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80151b6:	2a39      	cmp	r2, #57	@ 0x39
 80151b8:	d107      	bne.n	80151ca <_dtoa_r+0x6da>
 80151ba:	459a      	cmp	sl, r3
 80151bc:	d1f8      	bne.n	80151b0 <_dtoa_r+0x6c0>
 80151be:	9a04      	ldr	r2, [sp, #16]
 80151c0:	3201      	adds	r2, #1
 80151c2:	9204      	str	r2, [sp, #16]
 80151c4:	2230      	movs	r2, #48	@ 0x30
 80151c6:	f88a 2000 	strb.w	r2, [sl]
 80151ca:	781a      	ldrb	r2, [r3, #0]
 80151cc:	3201      	adds	r2, #1
 80151ce:	701a      	strb	r2, [r3, #0]
 80151d0:	e7bd      	b.n	801514e <_dtoa_r+0x65e>
 80151d2:	4b7b      	ldr	r3, [pc, #492]	@ (80153c0 <_dtoa_r+0x8d0>)
 80151d4:	2200      	movs	r2, #0
 80151d6:	f7eb fa37 	bl	8000648 <__aeabi_dmul>
 80151da:	2200      	movs	r2, #0
 80151dc:	2300      	movs	r3, #0
 80151de:	4604      	mov	r4, r0
 80151e0:	460d      	mov	r5, r1
 80151e2:	f7eb fc99 	bl	8000b18 <__aeabi_dcmpeq>
 80151e6:	2800      	cmp	r0, #0
 80151e8:	f43f aebb 	beq.w	8014f62 <_dtoa_r+0x472>
 80151ec:	e6f0      	b.n	8014fd0 <_dtoa_r+0x4e0>
 80151ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80151f0:	2a00      	cmp	r2, #0
 80151f2:	f000 80db 	beq.w	80153ac <_dtoa_r+0x8bc>
 80151f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80151f8:	2a01      	cmp	r2, #1
 80151fa:	f300 80bf 	bgt.w	801537c <_dtoa_r+0x88c>
 80151fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015200:	2a00      	cmp	r2, #0
 8015202:	f000 80b7 	beq.w	8015374 <_dtoa_r+0x884>
 8015206:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801520a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801520c:	4646      	mov	r6, r8
 801520e:	9a08      	ldr	r2, [sp, #32]
 8015210:	2101      	movs	r1, #1
 8015212:	441a      	add	r2, r3
 8015214:	4658      	mov	r0, fp
 8015216:	4498      	add	r8, r3
 8015218:	9208      	str	r2, [sp, #32]
 801521a:	f000 fc6b 	bl	8015af4 <__i2b>
 801521e:	4605      	mov	r5, r0
 8015220:	b15e      	cbz	r6, 801523a <_dtoa_r+0x74a>
 8015222:	9b08      	ldr	r3, [sp, #32]
 8015224:	2b00      	cmp	r3, #0
 8015226:	dd08      	ble.n	801523a <_dtoa_r+0x74a>
 8015228:	42b3      	cmp	r3, r6
 801522a:	9a08      	ldr	r2, [sp, #32]
 801522c:	bfa8      	it	ge
 801522e:	4633      	movge	r3, r6
 8015230:	eba8 0803 	sub.w	r8, r8, r3
 8015234:	1af6      	subs	r6, r6, r3
 8015236:	1ad3      	subs	r3, r2, r3
 8015238:	9308      	str	r3, [sp, #32]
 801523a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801523c:	b1f3      	cbz	r3, 801527c <_dtoa_r+0x78c>
 801523e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015240:	2b00      	cmp	r3, #0
 8015242:	f000 80b7 	beq.w	80153b4 <_dtoa_r+0x8c4>
 8015246:	b18c      	cbz	r4, 801526c <_dtoa_r+0x77c>
 8015248:	4629      	mov	r1, r5
 801524a:	4622      	mov	r2, r4
 801524c:	4658      	mov	r0, fp
 801524e:	f000 fd11 	bl	8015c74 <__pow5mult>
 8015252:	464a      	mov	r2, r9
 8015254:	4601      	mov	r1, r0
 8015256:	4605      	mov	r5, r0
 8015258:	4658      	mov	r0, fp
 801525a:	f000 fc61 	bl	8015b20 <__multiply>
 801525e:	4649      	mov	r1, r9
 8015260:	9004      	str	r0, [sp, #16]
 8015262:	4658      	mov	r0, fp
 8015264:	f000 fb48 	bl	80158f8 <_Bfree>
 8015268:	9b04      	ldr	r3, [sp, #16]
 801526a:	4699      	mov	r9, r3
 801526c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801526e:	1b1a      	subs	r2, r3, r4
 8015270:	d004      	beq.n	801527c <_dtoa_r+0x78c>
 8015272:	4649      	mov	r1, r9
 8015274:	4658      	mov	r0, fp
 8015276:	f000 fcfd 	bl	8015c74 <__pow5mult>
 801527a:	4681      	mov	r9, r0
 801527c:	2101      	movs	r1, #1
 801527e:	4658      	mov	r0, fp
 8015280:	f000 fc38 	bl	8015af4 <__i2b>
 8015284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015286:	4604      	mov	r4, r0
 8015288:	2b00      	cmp	r3, #0
 801528a:	f000 81cf 	beq.w	801562c <_dtoa_r+0xb3c>
 801528e:	461a      	mov	r2, r3
 8015290:	4601      	mov	r1, r0
 8015292:	4658      	mov	r0, fp
 8015294:	f000 fcee 	bl	8015c74 <__pow5mult>
 8015298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801529a:	2b01      	cmp	r3, #1
 801529c:	4604      	mov	r4, r0
 801529e:	f300 8095 	bgt.w	80153cc <_dtoa_r+0x8dc>
 80152a2:	9b02      	ldr	r3, [sp, #8]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	f040 8087 	bne.w	80153b8 <_dtoa_r+0x8c8>
 80152aa:	9b03      	ldr	r3, [sp, #12]
 80152ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	f040 8089 	bne.w	80153c8 <_dtoa_r+0x8d8>
 80152b6:	9b03      	ldr	r3, [sp, #12]
 80152b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80152bc:	0d1b      	lsrs	r3, r3, #20
 80152be:	051b      	lsls	r3, r3, #20
 80152c0:	b12b      	cbz	r3, 80152ce <_dtoa_r+0x7de>
 80152c2:	9b08      	ldr	r3, [sp, #32]
 80152c4:	3301      	adds	r3, #1
 80152c6:	9308      	str	r3, [sp, #32]
 80152c8:	f108 0801 	add.w	r8, r8, #1
 80152cc:	2301      	movs	r3, #1
 80152ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80152d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	f000 81b0 	beq.w	8015638 <_dtoa_r+0xb48>
 80152d8:	6923      	ldr	r3, [r4, #16]
 80152da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80152de:	6918      	ldr	r0, [r3, #16]
 80152e0:	f000 fbbc 	bl	8015a5c <__hi0bits>
 80152e4:	f1c0 0020 	rsb	r0, r0, #32
 80152e8:	9b08      	ldr	r3, [sp, #32]
 80152ea:	4418      	add	r0, r3
 80152ec:	f010 001f 	ands.w	r0, r0, #31
 80152f0:	d077      	beq.n	80153e2 <_dtoa_r+0x8f2>
 80152f2:	f1c0 0320 	rsb	r3, r0, #32
 80152f6:	2b04      	cmp	r3, #4
 80152f8:	dd6b      	ble.n	80153d2 <_dtoa_r+0x8e2>
 80152fa:	9b08      	ldr	r3, [sp, #32]
 80152fc:	f1c0 001c 	rsb	r0, r0, #28
 8015300:	4403      	add	r3, r0
 8015302:	4480      	add	r8, r0
 8015304:	4406      	add	r6, r0
 8015306:	9308      	str	r3, [sp, #32]
 8015308:	f1b8 0f00 	cmp.w	r8, #0
 801530c:	dd05      	ble.n	801531a <_dtoa_r+0x82a>
 801530e:	4649      	mov	r1, r9
 8015310:	4642      	mov	r2, r8
 8015312:	4658      	mov	r0, fp
 8015314:	f000 fd08 	bl	8015d28 <__lshift>
 8015318:	4681      	mov	r9, r0
 801531a:	9b08      	ldr	r3, [sp, #32]
 801531c:	2b00      	cmp	r3, #0
 801531e:	dd05      	ble.n	801532c <_dtoa_r+0x83c>
 8015320:	4621      	mov	r1, r4
 8015322:	461a      	mov	r2, r3
 8015324:	4658      	mov	r0, fp
 8015326:	f000 fcff 	bl	8015d28 <__lshift>
 801532a:	4604      	mov	r4, r0
 801532c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801532e:	2b00      	cmp	r3, #0
 8015330:	d059      	beq.n	80153e6 <_dtoa_r+0x8f6>
 8015332:	4621      	mov	r1, r4
 8015334:	4648      	mov	r0, r9
 8015336:	f000 fd63 	bl	8015e00 <__mcmp>
 801533a:	2800      	cmp	r0, #0
 801533c:	da53      	bge.n	80153e6 <_dtoa_r+0x8f6>
 801533e:	1e7b      	subs	r3, r7, #1
 8015340:	9304      	str	r3, [sp, #16]
 8015342:	4649      	mov	r1, r9
 8015344:	2300      	movs	r3, #0
 8015346:	220a      	movs	r2, #10
 8015348:	4658      	mov	r0, fp
 801534a:	f000 faf7 	bl	801593c <__multadd>
 801534e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015350:	4681      	mov	r9, r0
 8015352:	2b00      	cmp	r3, #0
 8015354:	f000 8172 	beq.w	801563c <_dtoa_r+0xb4c>
 8015358:	2300      	movs	r3, #0
 801535a:	4629      	mov	r1, r5
 801535c:	220a      	movs	r2, #10
 801535e:	4658      	mov	r0, fp
 8015360:	f000 faec 	bl	801593c <__multadd>
 8015364:	9b00      	ldr	r3, [sp, #0]
 8015366:	2b00      	cmp	r3, #0
 8015368:	4605      	mov	r5, r0
 801536a:	dc67      	bgt.n	801543c <_dtoa_r+0x94c>
 801536c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801536e:	2b02      	cmp	r3, #2
 8015370:	dc41      	bgt.n	80153f6 <_dtoa_r+0x906>
 8015372:	e063      	b.n	801543c <_dtoa_r+0x94c>
 8015374:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015376:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801537a:	e746      	b.n	801520a <_dtoa_r+0x71a>
 801537c:	9b07      	ldr	r3, [sp, #28]
 801537e:	1e5c      	subs	r4, r3, #1
 8015380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015382:	42a3      	cmp	r3, r4
 8015384:	bfbf      	itttt	lt
 8015386:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015388:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801538a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801538c:	1ae3      	sublt	r3, r4, r3
 801538e:	bfb4      	ite	lt
 8015390:	18d2      	addlt	r2, r2, r3
 8015392:	1b1c      	subge	r4, r3, r4
 8015394:	9b07      	ldr	r3, [sp, #28]
 8015396:	bfbc      	itt	lt
 8015398:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801539a:	2400      	movlt	r4, #0
 801539c:	2b00      	cmp	r3, #0
 801539e:	bfb5      	itete	lt
 80153a0:	eba8 0603 	sublt.w	r6, r8, r3
 80153a4:	9b07      	ldrge	r3, [sp, #28]
 80153a6:	2300      	movlt	r3, #0
 80153a8:	4646      	movge	r6, r8
 80153aa:	e730      	b.n	801520e <_dtoa_r+0x71e>
 80153ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80153ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80153b0:	4646      	mov	r6, r8
 80153b2:	e735      	b.n	8015220 <_dtoa_r+0x730>
 80153b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80153b6:	e75c      	b.n	8015272 <_dtoa_r+0x782>
 80153b8:	2300      	movs	r3, #0
 80153ba:	e788      	b.n	80152ce <_dtoa_r+0x7de>
 80153bc:	3fe00000 	.word	0x3fe00000
 80153c0:	40240000 	.word	0x40240000
 80153c4:	40140000 	.word	0x40140000
 80153c8:	9b02      	ldr	r3, [sp, #8]
 80153ca:	e780      	b.n	80152ce <_dtoa_r+0x7de>
 80153cc:	2300      	movs	r3, #0
 80153ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80153d0:	e782      	b.n	80152d8 <_dtoa_r+0x7e8>
 80153d2:	d099      	beq.n	8015308 <_dtoa_r+0x818>
 80153d4:	9a08      	ldr	r2, [sp, #32]
 80153d6:	331c      	adds	r3, #28
 80153d8:	441a      	add	r2, r3
 80153da:	4498      	add	r8, r3
 80153dc:	441e      	add	r6, r3
 80153de:	9208      	str	r2, [sp, #32]
 80153e0:	e792      	b.n	8015308 <_dtoa_r+0x818>
 80153e2:	4603      	mov	r3, r0
 80153e4:	e7f6      	b.n	80153d4 <_dtoa_r+0x8e4>
 80153e6:	9b07      	ldr	r3, [sp, #28]
 80153e8:	9704      	str	r7, [sp, #16]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	dc20      	bgt.n	8015430 <_dtoa_r+0x940>
 80153ee:	9300      	str	r3, [sp, #0]
 80153f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80153f2:	2b02      	cmp	r3, #2
 80153f4:	dd1e      	ble.n	8015434 <_dtoa_r+0x944>
 80153f6:	9b00      	ldr	r3, [sp, #0]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	f47f aec0 	bne.w	801517e <_dtoa_r+0x68e>
 80153fe:	4621      	mov	r1, r4
 8015400:	2205      	movs	r2, #5
 8015402:	4658      	mov	r0, fp
 8015404:	f000 fa9a 	bl	801593c <__multadd>
 8015408:	4601      	mov	r1, r0
 801540a:	4604      	mov	r4, r0
 801540c:	4648      	mov	r0, r9
 801540e:	f000 fcf7 	bl	8015e00 <__mcmp>
 8015412:	2800      	cmp	r0, #0
 8015414:	f77f aeb3 	ble.w	801517e <_dtoa_r+0x68e>
 8015418:	4656      	mov	r6, sl
 801541a:	2331      	movs	r3, #49	@ 0x31
 801541c:	f806 3b01 	strb.w	r3, [r6], #1
 8015420:	9b04      	ldr	r3, [sp, #16]
 8015422:	3301      	adds	r3, #1
 8015424:	9304      	str	r3, [sp, #16]
 8015426:	e6ae      	b.n	8015186 <_dtoa_r+0x696>
 8015428:	9c07      	ldr	r4, [sp, #28]
 801542a:	9704      	str	r7, [sp, #16]
 801542c:	4625      	mov	r5, r4
 801542e:	e7f3      	b.n	8015418 <_dtoa_r+0x928>
 8015430:	9b07      	ldr	r3, [sp, #28]
 8015432:	9300      	str	r3, [sp, #0]
 8015434:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015436:	2b00      	cmp	r3, #0
 8015438:	f000 8104 	beq.w	8015644 <_dtoa_r+0xb54>
 801543c:	2e00      	cmp	r6, #0
 801543e:	dd05      	ble.n	801544c <_dtoa_r+0x95c>
 8015440:	4629      	mov	r1, r5
 8015442:	4632      	mov	r2, r6
 8015444:	4658      	mov	r0, fp
 8015446:	f000 fc6f 	bl	8015d28 <__lshift>
 801544a:	4605      	mov	r5, r0
 801544c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801544e:	2b00      	cmp	r3, #0
 8015450:	d05a      	beq.n	8015508 <_dtoa_r+0xa18>
 8015452:	6869      	ldr	r1, [r5, #4]
 8015454:	4658      	mov	r0, fp
 8015456:	f000 fa0f 	bl	8015878 <_Balloc>
 801545a:	4606      	mov	r6, r0
 801545c:	b928      	cbnz	r0, 801546a <_dtoa_r+0x97a>
 801545e:	4b84      	ldr	r3, [pc, #528]	@ (8015670 <_dtoa_r+0xb80>)
 8015460:	4602      	mov	r2, r0
 8015462:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015466:	f7ff bb5a 	b.w	8014b1e <_dtoa_r+0x2e>
 801546a:	692a      	ldr	r2, [r5, #16]
 801546c:	3202      	adds	r2, #2
 801546e:	0092      	lsls	r2, r2, #2
 8015470:	f105 010c 	add.w	r1, r5, #12
 8015474:	300c      	adds	r0, #12
 8015476:	f002 f94b 	bl	8017710 <memcpy>
 801547a:	2201      	movs	r2, #1
 801547c:	4631      	mov	r1, r6
 801547e:	4658      	mov	r0, fp
 8015480:	f000 fc52 	bl	8015d28 <__lshift>
 8015484:	f10a 0301 	add.w	r3, sl, #1
 8015488:	9307      	str	r3, [sp, #28]
 801548a:	9b00      	ldr	r3, [sp, #0]
 801548c:	4453      	add	r3, sl
 801548e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015490:	9b02      	ldr	r3, [sp, #8]
 8015492:	f003 0301 	and.w	r3, r3, #1
 8015496:	462f      	mov	r7, r5
 8015498:	930a      	str	r3, [sp, #40]	@ 0x28
 801549a:	4605      	mov	r5, r0
 801549c:	9b07      	ldr	r3, [sp, #28]
 801549e:	4621      	mov	r1, r4
 80154a0:	3b01      	subs	r3, #1
 80154a2:	4648      	mov	r0, r9
 80154a4:	9300      	str	r3, [sp, #0]
 80154a6:	f7ff fa9b 	bl	80149e0 <quorem>
 80154aa:	4639      	mov	r1, r7
 80154ac:	9002      	str	r0, [sp, #8]
 80154ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80154b2:	4648      	mov	r0, r9
 80154b4:	f000 fca4 	bl	8015e00 <__mcmp>
 80154b8:	462a      	mov	r2, r5
 80154ba:	9008      	str	r0, [sp, #32]
 80154bc:	4621      	mov	r1, r4
 80154be:	4658      	mov	r0, fp
 80154c0:	f000 fcba 	bl	8015e38 <__mdiff>
 80154c4:	68c2      	ldr	r2, [r0, #12]
 80154c6:	4606      	mov	r6, r0
 80154c8:	bb02      	cbnz	r2, 801550c <_dtoa_r+0xa1c>
 80154ca:	4601      	mov	r1, r0
 80154cc:	4648      	mov	r0, r9
 80154ce:	f000 fc97 	bl	8015e00 <__mcmp>
 80154d2:	4602      	mov	r2, r0
 80154d4:	4631      	mov	r1, r6
 80154d6:	4658      	mov	r0, fp
 80154d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80154da:	f000 fa0d 	bl	80158f8 <_Bfree>
 80154de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80154e2:	9e07      	ldr	r6, [sp, #28]
 80154e4:	ea43 0102 	orr.w	r1, r3, r2
 80154e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80154ea:	4319      	orrs	r1, r3
 80154ec:	d110      	bne.n	8015510 <_dtoa_r+0xa20>
 80154ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80154f2:	d029      	beq.n	8015548 <_dtoa_r+0xa58>
 80154f4:	9b08      	ldr	r3, [sp, #32]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	dd02      	ble.n	8015500 <_dtoa_r+0xa10>
 80154fa:	9b02      	ldr	r3, [sp, #8]
 80154fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8015500:	9b00      	ldr	r3, [sp, #0]
 8015502:	f883 8000 	strb.w	r8, [r3]
 8015506:	e63f      	b.n	8015188 <_dtoa_r+0x698>
 8015508:	4628      	mov	r0, r5
 801550a:	e7bb      	b.n	8015484 <_dtoa_r+0x994>
 801550c:	2201      	movs	r2, #1
 801550e:	e7e1      	b.n	80154d4 <_dtoa_r+0x9e4>
 8015510:	9b08      	ldr	r3, [sp, #32]
 8015512:	2b00      	cmp	r3, #0
 8015514:	db04      	blt.n	8015520 <_dtoa_r+0xa30>
 8015516:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015518:	430b      	orrs	r3, r1
 801551a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801551c:	430b      	orrs	r3, r1
 801551e:	d120      	bne.n	8015562 <_dtoa_r+0xa72>
 8015520:	2a00      	cmp	r2, #0
 8015522:	dded      	ble.n	8015500 <_dtoa_r+0xa10>
 8015524:	4649      	mov	r1, r9
 8015526:	2201      	movs	r2, #1
 8015528:	4658      	mov	r0, fp
 801552a:	f000 fbfd 	bl	8015d28 <__lshift>
 801552e:	4621      	mov	r1, r4
 8015530:	4681      	mov	r9, r0
 8015532:	f000 fc65 	bl	8015e00 <__mcmp>
 8015536:	2800      	cmp	r0, #0
 8015538:	dc03      	bgt.n	8015542 <_dtoa_r+0xa52>
 801553a:	d1e1      	bne.n	8015500 <_dtoa_r+0xa10>
 801553c:	f018 0f01 	tst.w	r8, #1
 8015540:	d0de      	beq.n	8015500 <_dtoa_r+0xa10>
 8015542:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015546:	d1d8      	bne.n	80154fa <_dtoa_r+0xa0a>
 8015548:	9a00      	ldr	r2, [sp, #0]
 801554a:	2339      	movs	r3, #57	@ 0x39
 801554c:	7013      	strb	r3, [r2, #0]
 801554e:	4633      	mov	r3, r6
 8015550:	461e      	mov	r6, r3
 8015552:	3b01      	subs	r3, #1
 8015554:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015558:	2a39      	cmp	r2, #57	@ 0x39
 801555a:	d052      	beq.n	8015602 <_dtoa_r+0xb12>
 801555c:	3201      	adds	r2, #1
 801555e:	701a      	strb	r2, [r3, #0]
 8015560:	e612      	b.n	8015188 <_dtoa_r+0x698>
 8015562:	2a00      	cmp	r2, #0
 8015564:	dd07      	ble.n	8015576 <_dtoa_r+0xa86>
 8015566:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801556a:	d0ed      	beq.n	8015548 <_dtoa_r+0xa58>
 801556c:	9a00      	ldr	r2, [sp, #0]
 801556e:	f108 0301 	add.w	r3, r8, #1
 8015572:	7013      	strb	r3, [r2, #0]
 8015574:	e608      	b.n	8015188 <_dtoa_r+0x698>
 8015576:	9b07      	ldr	r3, [sp, #28]
 8015578:	9a07      	ldr	r2, [sp, #28]
 801557a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801557e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015580:	4293      	cmp	r3, r2
 8015582:	d028      	beq.n	80155d6 <_dtoa_r+0xae6>
 8015584:	4649      	mov	r1, r9
 8015586:	2300      	movs	r3, #0
 8015588:	220a      	movs	r2, #10
 801558a:	4658      	mov	r0, fp
 801558c:	f000 f9d6 	bl	801593c <__multadd>
 8015590:	42af      	cmp	r7, r5
 8015592:	4681      	mov	r9, r0
 8015594:	f04f 0300 	mov.w	r3, #0
 8015598:	f04f 020a 	mov.w	r2, #10
 801559c:	4639      	mov	r1, r7
 801559e:	4658      	mov	r0, fp
 80155a0:	d107      	bne.n	80155b2 <_dtoa_r+0xac2>
 80155a2:	f000 f9cb 	bl	801593c <__multadd>
 80155a6:	4607      	mov	r7, r0
 80155a8:	4605      	mov	r5, r0
 80155aa:	9b07      	ldr	r3, [sp, #28]
 80155ac:	3301      	adds	r3, #1
 80155ae:	9307      	str	r3, [sp, #28]
 80155b0:	e774      	b.n	801549c <_dtoa_r+0x9ac>
 80155b2:	f000 f9c3 	bl	801593c <__multadd>
 80155b6:	4629      	mov	r1, r5
 80155b8:	4607      	mov	r7, r0
 80155ba:	2300      	movs	r3, #0
 80155bc:	220a      	movs	r2, #10
 80155be:	4658      	mov	r0, fp
 80155c0:	f000 f9bc 	bl	801593c <__multadd>
 80155c4:	4605      	mov	r5, r0
 80155c6:	e7f0      	b.n	80155aa <_dtoa_r+0xaba>
 80155c8:	9b00      	ldr	r3, [sp, #0]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	bfcc      	ite	gt
 80155ce:	461e      	movgt	r6, r3
 80155d0:	2601      	movle	r6, #1
 80155d2:	4456      	add	r6, sl
 80155d4:	2700      	movs	r7, #0
 80155d6:	4649      	mov	r1, r9
 80155d8:	2201      	movs	r2, #1
 80155da:	4658      	mov	r0, fp
 80155dc:	f000 fba4 	bl	8015d28 <__lshift>
 80155e0:	4621      	mov	r1, r4
 80155e2:	4681      	mov	r9, r0
 80155e4:	f000 fc0c 	bl	8015e00 <__mcmp>
 80155e8:	2800      	cmp	r0, #0
 80155ea:	dcb0      	bgt.n	801554e <_dtoa_r+0xa5e>
 80155ec:	d102      	bne.n	80155f4 <_dtoa_r+0xb04>
 80155ee:	f018 0f01 	tst.w	r8, #1
 80155f2:	d1ac      	bne.n	801554e <_dtoa_r+0xa5e>
 80155f4:	4633      	mov	r3, r6
 80155f6:	461e      	mov	r6, r3
 80155f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80155fc:	2a30      	cmp	r2, #48	@ 0x30
 80155fe:	d0fa      	beq.n	80155f6 <_dtoa_r+0xb06>
 8015600:	e5c2      	b.n	8015188 <_dtoa_r+0x698>
 8015602:	459a      	cmp	sl, r3
 8015604:	d1a4      	bne.n	8015550 <_dtoa_r+0xa60>
 8015606:	9b04      	ldr	r3, [sp, #16]
 8015608:	3301      	adds	r3, #1
 801560a:	9304      	str	r3, [sp, #16]
 801560c:	2331      	movs	r3, #49	@ 0x31
 801560e:	f88a 3000 	strb.w	r3, [sl]
 8015612:	e5b9      	b.n	8015188 <_dtoa_r+0x698>
 8015614:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015616:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8015674 <_dtoa_r+0xb84>
 801561a:	b11b      	cbz	r3, 8015624 <_dtoa_r+0xb34>
 801561c:	f10a 0308 	add.w	r3, sl, #8
 8015620:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015622:	6013      	str	r3, [r2, #0]
 8015624:	4650      	mov	r0, sl
 8015626:	b019      	add	sp, #100	@ 0x64
 8015628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801562c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801562e:	2b01      	cmp	r3, #1
 8015630:	f77f ae37 	ble.w	80152a2 <_dtoa_r+0x7b2>
 8015634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015636:	930a      	str	r3, [sp, #40]	@ 0x28
 8015638:	2001      	movs	r0, #1
 801563a:	e655      	b.n	80152e8 <_dtoa_r+0x7f8>
 801563c:	9b00      	ldr	r3, [sp, #0]
 801563e:	2b00      	cmp	r3, #0
 8015640:	f77f aed6 	ble.w	80153f0 <_dtoa_r+0x900>
 8015644:	4656      	mov	r6, sl
 8015646:	4621      	mov	r1, r4
 8015648:	4648      	mov	r0, r9
 801564a:	f7ff f9c9 	bl	80149e0 <quorem>
 801564e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8015652:	f806 8b01 	strb.w	r8, [r6], #1
 8015656:	9b00      	ldr	r3, [sp, #0]
 8015658:	eba6 020a 	sub.w	r2, r6, sl
 801565c:	4293      	cmp	r3, r2
 801565e:	ddb3      	ble.n	80155c8 <_dtoa_r+0xad8>
 8015660:	4649      	mov	r1, r9
 8015662:	2300      	movs	r3, #0
 8015664:	220a      	movs	r2, #10
 8015666:	4658      	mov	r0, fp
 8015668:	f000 f968 	bl	801593c <__multadd>
 801566c:	4681      	mov	r9, r0
 801566e:	e7ea      	b.n	8015646 <_dtoa_r+0xb56>
 8015670:	080260c1 	.word	0x080260c1
 8015674:	08026045 	.word	0x08026045

08015678 <_free_r>:
 8015678:	b538      	push	{r3, r4, r5, lr}
 801567a:	4605      	mov	r5, r0
 801567c:	2900      	cmp	r1, #0
 801567e:	d041      	beq.n	8015704 <_free_r+0x8c>
 8015680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015684:	1f0c      	subs	r4, r1, #4
 8015686:	2b00      	cmp	r3, #0
 8015688:	bfb8      	it	lt
 801568a:	18e4      	addlt	r4, r4, r3
 801568c:	f000 f8e8 	bl	8015860 <__malloc_lock>
 8015690:	4a1d      	ldr	r2, [pc, #116]	@ (8015708 <_free_r+0x90>)
 8015692:	6813      	ldr	r3, [r2, #0]
 8015694:	b933      	cbnz	r3, 80156a4 <_free_r+0x2c>
 8015696:	6063      	str	r3, [r4, #4]
 8015698:	6014      	str	r4, [r2, #0]
 801569a:	4628      	mov	r0, r5
 801569c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156a0:	f000 b8e4 	b.w	801586c <__malloc_unlock>
 80156a4:	42a3      	cmp	r3, r4
 80156a6:	d908      	bls.n	80156ba <_free_r+0x42>
 80156a8:	6820      	ldr	r0, [r4, #0]
 80156aa:	1821      	adds	r1, r4, r0
 80156ac:	428b      	cmp	r3, r1
 80156ae:	bf01      	itttt	eq
 80156b0:	6819      	ldreq	r1, [r3, #0]
 80156b2:	685b      	ldreq	r3, [r3, #4]
 80156b4:	1809      	addeq	r1, r1, r0
 80156b6:	6021      	streq	r1, [r4, #0]
 80156b8:	e7ed      	b.n	8015696 <_free_r+0x1e>
 80156ba:	461a      	mov	r2, r3
 80156bc:	685b      	ldr	r3, [r3, #4]
 80156be:	b10b      	cbz	r3, 80156c4 <_free_r+0x4c>
 80156c0:	42a3      	cmp	r3, r4
 80156c2:	d9fa      	bls.n	80156ba <_free_r+0x42>
 80156c4:	6811      	ldr	r1, [r2, #0]
 80156c6:	1850      	adds	r0, r2, r1
 80156c8:	42a0      	cmp	r0, r4
 80156ca:	d10b      	bne.n	80156e4 <_free_r+0x6c>
 80156cc:	6820      	ldr	r0, [r4, #0]
 80156ce:	4401      	add	r1, r0
 80156d0:	1850      	adds	r0, r2, r1
 80156d2:	4283      	cmp	r3, r0
 80156d4:	6011      	str	r1, [r2, #0]
 80156d6:	d1e0      	bne.n	801569a <_free_r+0x22>
 80156d8:	6818      	ldr	r0, [r3, #0]
 80156da:	685b      	ldr	r3, [r3, #4]
 80156dc:	6053      	str	r3, [r2, #4]
 80156de:	4408      	add	r0, r1
 80156e0:	6010      	str	r0, [r2, #0]
 80156e2:	e7da      	b.n	801569a <_free_r+0x22>
 80156e4:	d902      	bls.n	80156ec <_free_r+0x74>
 80156e6:	230c      	movs	r3, #12
 80156e8:	602b      	str	r3, [r5, #0]
 80156ea:	e7d6      	b.n	801569a <_free_r+0x22>
 80156ec:	6820      	ldr	r0, [r4, #0]
 80156ee:	1821      	adds	r1, r4, r0
 80156f0:	428b      	cmp	r3, r1
 80156f2:	bf04      	itt	eq
 80156f4:	6819      	ldreq	r1, [r3, #0]
 80156f6:	685b      	ldreq	r3, [r3, #4]
 80156f8:	6063      	str	r3, [r4, #4]
 80156fa:	bf04      	itt	eq
 80156fc:	1809      	addeq	r1, r1, r0
 80156fe:	6021      	streq	r1, [r4, #0]
 8015700:	6054      	str	r4, [r2, #4]
 8015702:	e7ca      	b.n	801569a <_free_r+0x22>
 8015704:	bd38      	pop	{r3, r4, r5, pc}
 8015706:	bf00      	nop
 8015708:	20004fd8 	.word	0x20004fd8

0801570c <malloc>:
 801570c:	4b02      	ldr	r3, [pc, #8]	@ (8015718 <malloc+0xc>)
 801570e:	4601      	mov	r1, r0
 8015710:	6818      	ldr	r0, [r3, #0]
 8015712:	f000 b825 	b.w	8015760 <_malloc_r>
 8015716:	bf00      	nop
 8015718:	200001d4 	.word	0x200001d4

0801571c <sbrk_aligned>:
 801571c:	b570      	push	{r4, r5, r6, lr}
 801571e:	4e0f      	ldr	r6, [pc, #60]	@ (801575c <sbrk_aligned+0x40>)
 8015720:	460c      	mov	r4, r1
 8015722:	6831      	ldr	r1, [r6, #0]
 8015724:	4605      	mov	r5, r0
 8015726:	b911      	cbnz	r1, 801572e <sbrk_aligned+0x12>
 8015728:	f001 ffe2 	bl	80176f0 <_sbrk_r>
 801572c:	6030      	str	r0, [r6, #0]
 801572e:	4621      	mov	r1, r4
 8015730:	4628      	mov	r0, r5
 8015732:	f001 ffdd 	bl	80176f0 <_sbrk_r>
 8015736:	1c43      	adds	r3, r0, #1
 8015738:	d103      	bne.n	8015742 <sbrk_aligned+0x26>
 801573a:	f04f 34ff 	mov.w	r4, #4294967295
 801573e:	4620      	mov	r0, r4
 8015740:	bd70      	pop	{r4, r5, r6, pc}
 8015742:	1cc4      	adds	r4, r0, #3
 8015744:	f024 0403 	bic.w	r4, r4, #3
 8015748:	42a0      	cmp	r0, r4
 801574a:	d0f8      	beq.n	801573e <sbrk_aligned+0x22>
 801574c:	1a21      	subs	r1, r4, r0
 801574e:	4628      	mov	r0, r5
 8015750:	f001 ffce 	bl	80176f0 <_sbrk_r>
 8015754:	3001      	adds	r0, #1
 8015756:	d1f2      	bne.n	801573e <sbrk_aligned+0x22>
 8015758:	e7ef      	b.n	801573a <sbrk_aligned+0x1e>
 801575a:	bf00      	nop
 801575c:	20004fd4 	.word	0x20004fd4

08015760 <_malloc_r>:
 8015760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015764:	1ccd      	adds	r5, r1, #3
 8015766:	f025 0503 	bic.w	r5, r5, #3
 801576a:	3508      	adds	r5, #8
 801576c:	2d0c      	cmp	r5, #12
 801576e:	bf38      	it	cc
 8015770:	250c      	movcc	r5, #12
 8015772:	2d00      	cmp	r5, #0
 8015774:	4606      	mov	r6, r0
 8015776:	db01      	blt.n	801577c <_malloc_r+0x1c>
 8015778:	42a9      	cmp	r1, r5
 801577a:	d904      	bls.n	8015786 <_malloc_r+0x26>
 801577c:	230c      	movs	r3, #12
 801577e:	6033      	str	r3, [r6, #0]
 8015780:	2000      	movs	r0, #0
 8015782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015786:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801585c <_malloc_r+0xfc>
 801578a:	f000 f869 	bl	8015860 <__malloc_lock>
 801578e:	f8d8 3000 	ldr.w	r3, [r8]
 8015792:	461c      	mov	r4, r3
 8015794:	bb44      	cbnz	r4, 80157e8 <_malloc_r+0x88>
 8015796:	4629      	mov	r1, r5
 8015798:	4630      	mov	r0, r6
 801579a:	f7ff ffbf 	bl	801571c <sbrk_aligned>
 801579e:	1c43      	adds	r3, r0, #1
 80157a0:	4604      	mov	r4, r0
 80157a2:	d158      	bne.n	8015856 <_malloc_r+0xf6>
 80157a4:	f8d8 4000 	ldr.w	r4, [r8]
 80157a8:	4627      	mov	r7, r4
 80157aa:	2f00      	cmp	r7, #0
 80157ac:	d143      	bne.n	8015836 <_malloc_r+0xd6>
 80157ae:	2c00      	cmp	r4, #0
 80157b0:	d04b      	beq.n	801584a <_malloc_r+0xea>
 80157b2:	6823      	ldr	r3, [r4, #0]
 80157b4:	4639      	mov	r1, r7
 80157b6:	4630      	mov	r0, r6
 80157b8:	eb04 0903 	add.w	r9, r4, r3
 80157bc:	f001 ff98 	bl	80176f0 <_sbrk_r>
 80157c0:	4581      	cmp	r9, r0
 80157c2:	d142      	bne.n	801584a <_malloc_r+0xea>
 80157c4:	6821      	ldr	r1, [r4, #0]
 80157c6:	1a6d      	subs	r5, r5, r1
 80157c8:	4629      	mov	r1, r5
 80157ca:	4630      	mov	r0, r6
 80157cc:	f7ff ffa6 	bl	801571c <sbrk_aligned>
 80157d0:	3001      	adds	r0, #1
 80157d2:	d03a      	beq.n	801584a <_malloc_r+0xea>
 80157d4:	6823      	ldr	r3, [r4, #0]
 80157d6:	442b      	add	r3, r5
 80157d8:	6023      	str	r3, [r4, #0]
 80157da:	f8d8 3000 	ldr.w	r3, [r8]
 80157de:	685a      	ldr	r2, [r3, #4]
 80157e0:	bb62      	cbnz	r2, 801583c <_malloc_r+0xdc>
 80157e2:	f8c8 7000 	str.w	r7, [r8]
 80157e6:	e00f      	b.n	8015808 <_malloc_r+0xa8>
 80157e8:	6822      	ldr	r2, [r4, #0]
 80157ea:	1b52      	subs	r2, r2, r5
 80157ec:	d420      	bmi.n	8015830 <_malloc_r+0xd0>
 80157ee:	2a0b      	cmp	r2, #11
 80157f0:	d917      	bls.n	8015822 <_malloc_r+0xc2>
 80157f2:	1961      	adds	r1, r4, r5
 80157f4:	42a3      	cmp	r3, r4
 80157f6:	6025      	str	r5, [r4, #0]
 80157f8:	bf18      	it	ne
 80157fa:	6059      	strne	r1, [r3, #4]
 80157fc:	6863      	ldr	r3, [r4, #4]
 80157fe:	bf08      	it	eq
 8015800:	f8c8 1000 	streq.w	r1, [r8]
 8015804:	5162      	str	r2, [r4, r5]
 8015806:	604b      	str	r3, [r1, #4]
 8015808:	4630      	mov	r0, r6
 801580a:	f000 f82f 	bl	801586c <__malloc_unlock>
 801580e:	f104 000b 	add.w	r0, r4, #11
 8015812:	1d23      	adds	r3, r4, #4
 8015814:	f020 0007 	bic.w	r0, r0, #7
 8015818:	1ac2      	subs	r2, r0, r3
 801581a:	bf1c      	itt	ne
 801581c:	1a1b      	subne	r3, r3, r0
 801581e:	50a3      	strne	r3, [r4, r2]
 8015820:	e7af      	b.n	8015782 <_malloc_r+0x22>
 8015822:	6862      	ldr	r2, [r4, #4]
 8015824:	42a3      	cmp	r3, r4
 8015826:	bf0c      	ite	eq
 8015828:	f8c8 2000 	streq.w	r2, [r8]
 801582c:	605a      	strne	r2, [r3, #4]
 801582e:	e7eb      	b.n	8015808 <_malloc_r+0xa8>
 8015830:	4623      	mov	r3, r4
 8015832:	6864      	ldr	r4, [r4, #4]
 8015834:	e7ae      	b.n	8015794 <_malloc_r+0x34>
 8015836:	463c      	mov	r4, r7
 8015838:	687f      	ldr	r7, [r7, #4]
 801583a:	e7b6      	b.n	80157aa <_malloc_r+0x4a>
 801583c:	461a      	mov	r2, r3
 801583e:	685b      	ldr	r3, [r3, #4]
 8015840:	42a3      	cmp	r3, r4
 8015842:	d1fb      	bne.n	801583c <_malloc_r+0xdc>
 8015844:	2300      	movs	r3, #0
 8015846:	6053      	str	r3, [r2, #4]
 8015848:	e7de      	b.n	8015808 <_malloc_r+0xa8>
 801584a:	230c      	movs	r3, #12
 801584c:	6033      	str	r3, [r6, #0]
 801584e:	4630      	mov	r0, r6
 8015850:	f000 f80c 	bl	801586c <__malloc_unlock>
 8015854:	e794      	b.n	8015780 <_malloc_r+0x20>
 8015856:	6005      	str	r5, [r0, #0]
 8015858:	e7d6      	b.n	8015808 <_malloc_r+0xa8>
 801585a:	bf00      	nop
 801585c:	20004fd8 	.word	0x20004fd8

08015860 <__malloc_lock>:
 8015860:	4801      	ldr	r0, [pc, #4]	@ (8015868 <__malloc_lock+0x8>)
 8015862:	f7ff b8b4 	b.w	80149ce <__retarget_lock_acquire_recursive>
 8015866:	bf00      	nop
 8015868:	20004fd0 	.word	0x20004fd0

0801586c <__malloc_unlock>:
 801586c:	4801      	ldr	r0, [pc, #4]	@ (8015874 <__malloc_unlock+0x8>)
 801586e:	f7ff b8af 	b.w	80149d0 <__retarget_lock_release_recursive>
 8015872:	bf00      	nop
 8015874:	20004fd0 	.word	0x20004fd0

08015878 <_Balloc>:
 8015878:	b570      	push	{r4, r5, r6, lr}
 801587a:	69c6      	ldr	r6, [r0, #28]
 801587c:	4604      	mov	r4, r0
 801587e:	460d      	mov	r5, r1
 8015880:	b976      	cbnz	r6, 80158a0 <_Balloc+0x28>
 8015882:	2010      	movs	r0, #16
 8015884:	f7ff ff42 	bl	801570c <malloc>
 8015888:	4602      	mov	r2, r0
 801588a:	61e0      	str	r0, [r4, #28]
 801588c:	b920      	cbnz	r0, 8015898 <_Balloc+0x20>
 801588e:	4b18      	ldr	r3, [pc, #96]	@ (80158f0 <_Balloc+0x78>)
 8015890:	4818      	ldr	r0, [pc, #96]	@ (80158f4 <_Balloc+0x7c>)
 8015892:	216b      	movs	r1, #107	@ 0x6b
 8015894:	f001 ff54 	bl	8017740 <__assert_func>
 8015898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801589c:	6006      	str	r6, [r0, #0]
 801589e:	60c6      	str	r6, [r0, #12]
 80158a0:	69e6      	ldr	r6, [r4, #28]
 80158a2:	68f3      	ldr	r3, [r6, #12]
 80158a4:	b183      	cbz	r3, 80158c8 <_Balloc+0x50>
 80158a6:	69e3      	ldr	r3, [r4, #28]
 80158a8:	68db      	ldr	r3, [r3, #12]
 80158aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80158ae:	b9b8      	cbnz	r0, 80158e0 <_Balloc+0x68>
 80158b0:	2101      	movs	r1, #1
 80158b2:	fa01 f605 	lsl.w	r6, r1, r5
 80158b6:	1d72      	adds	r2, r6, #5
 80158b8:	0092      	lsls	r2, r2, #2
 80158ba:	4620      	mov	r0, r4
 80158bc:	f001 ff5e 	bl	801777c <_calloc_r>
 80158c0:	b160      	cbz	r0, 80158dc <_Balloc+0x64>
 80158c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80158c6:	e00e      	b.n	80158e6 <_Balloc+0x6e>
 80158c8:	2221      	movs	r2, #33	@ 0x21
 80158ca:	2104      	movs	r1, #4
 80158cc:	4620      	mov	r0, r4
 80158ce:	f001 ff55 	bl	801777c <_calloc_r>
 80158d2:	69e3      	ldr	r3, [r4, #28]
 80158d4:	60f0      	str	r0, [r6, #12]
 80158d6:	68db      	ldr	r3, [r3, #12]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d1e4      	bne.n	80158a6 <_Balloc+0x2e>
 80158dc:	2000      	movs	r0, #0
 80158de:	bd70      	pop	{r4, r5, r6, pc}
 80158e0:	6802      	ldr	r2, [r0, #0]
 80158e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80158e6:	2300      	movs	r3, #0
 80158e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80158ec:	e7f7      	b.n	80158de <_Balloc+0x66>
 80158ee:	bf00      	nop
 80158f0:	08026052 	.word	0x08026052
 80158f4:	080260d2 	.word	0x080260d2

080158f8 <_Bfree>:
 80158f8:	b570      	push	{r4, r5, r6, lr}
 80158fa:	69c6      	ldr	r6, [r0, #28]
 80158fc:	4605      	mov	r5, r0
 80158fe:	460c      	mov	r4, r1
 8015900:	b976      	cbnz	r6, 8015920 <_Bfree+0x28>
 8015902:	2010      	movs	r0, #16
 8015904:	f7ff ff02 	bl	801570c <malloc>
 8015908:	4602      	mov	r2, r0
 801590a:	61e8      	str	r0, [r5, #28]
 801590c:	b920      	cbnz	r0, 8015918 <_Bfree+0x20>
 801590e:	4b09      	ldr	r3, [pc, #36]	@ (8015934 <_Bfree+0x3c>)
 8015910:	4809      	ldr	r0, [pc, #36]	@ (8015938 <_Bfree+0x40>)
 8015912:	218f      	movs	r1, #143	@ 0x8f
 8015914:	f001 ff14 	bl	8017740 <__assert_func>
 8015918:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801591c:	6006      	str	r6, [r0, #0]
 801591e:	60c6      	str	r6, [r0, #12]
 8015920:	b13c      	cbz	r4, 8015932 <_Bfree+0x3a>
 8015922:	69eb      	ldr	r3, [r5, #28]
 8015924:	6862      	ldr	r2, [r4, #4]
 8015926:	68db      	ldr	r3, [r3, #12]
 8015928:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801592c:	6021      	str	r1, [r4, #0]
 801592e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015932:	bd70      	pop	{r4, r5, r6, pc}
 8015934:	08026052 	.word	0x08026052
 8015938:	080260d2 	.word	0x080260d2

0801593c <__multadd>:
 801593c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015940:	690d      	ldr	r5, [r1, #16]
 8015942:	4607      	mov	r7, r0
 8015944:	460c      	mov	r4, r1
 8015946:	461e      	mov	r6, r3
 8015948:	f101 0c14 	add.w	ip, r1, #20
 801594c:	2000      	movs	r0, #0
 801594e:	f8dc 3000 	ldr.w	r3, [ip]
 8015952:	b299      	uxth	r1, r3
 8015954:	fb02 6101 	mla	r1, r2, r1, r6
 8015958:	0c1e      	lsrs	r6, r3, #16
 801595a:	0c0b      	lsrs	r3, r1, #16
 801595c:	fb02 3306 	mla	r3, r2, r6, r3
 8015960:	b289      	uxth	r1, r1
 8015962:	3001      	adds	r0, #1
 8015964:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015968:	4285      	cmp	r5, r0
 801596a:	f84c 1b04 	str.w	r1, [ip], #4
 801596e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015972:	dcec      	bgt.n	801594e <__multadd+0x12>
 8015974:	b30e      	cbz	r6, 80159ba <__multadd+0x7e>
 8015976:	68a3      	ldr	r3, [r4, #8]
 8015978:	42ab      	cmp	r3, r5
 801597a:	dc19      	bgt.n	80159b0 <__multadd+0x74>
 801597c:	6861      	ldr	r1, [r4, #4]
 801597e:	4638      	mov	r0, r7
 8015980:	3101      	adds	r1, #1
 8015982:	f7ff ff79 	bl	8015878 <_Balloc>
 8015986:	4680      	mov	r8, r0
 8015988:	b928      	cbnz	r0, 8015996 <__multadd+0x5a>
 801598a:	4602      	mov	r2, r0
 801598c:	4b0c      	ldr	r3, [pc, #48]	@ (80159c0 <__multadd+0x84>)
 801598e:	480d      	ldr	r0, [pc, #52]	@ (80159c4 <__multadd+0x88>)
 8015990:	21ba      	movs	r1, #186	@ 0xba
 8015992:	f001 fed5 	bl	8017740 <__assert_func>
 8015996:	6922      	ldr	r2, [r4, #16]
 8015998:	3202      	adds	r2, #2
 801599a:	f104 010c 	add.w	r1, r4, #12
 801599e:	0092      	lsls	r2, r2, #2
 80159a0:	300c      	adds	r0, #12
 80159a2:	f001 feb5 	bl	8017710 <memcpy>
 80159a6:	4621      	mov	r1, r4
 80159a8:	4638      	mov	r0, r7
 80159aa:	f7ff ffa5 	bl	80158f8 <_Bfree>
 80159ae:	4644      	mov	r4, r8
 80159b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80159b4:	3501      	adds	r5, #1
 80159b6:	615e      	str	r6, [r3, #20]
 80159b8:	6125      	str	r5, [r4, #16]
 80159ba:	4620      	mov	r0, r4
 80159bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159c0:	080260c1 	.word	0x080260c1
 80159c4:	080260d2 	.word	0x080260d2

080159c8 <__s2b>:
 80159c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159cc:	460c      	mov	r4, r1
 80159ce:	4615      	mov	r5, r2
 80159d0:	461f      	mov	r7, r3
 80159d2:	2209      	movs	r2, #9
 80159d4:	3308      	adds	r3, #8
 80159d6:	4606      	mov	r6, r0
 80159d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80159dc:	2100      	movs	r1, #0
 80159de:	2201      	movs	r2, #1
 80159e0:	429a      	cmp	r2, r3
 80159e2:	db09      	blt.n	80159f8 <__s2b+0x30>
 80159e4:	4630      	mov	r0, r6
 80159e6:	f7ff ff47 	bl	8015878 <_Balloc>
 80159ea:	b940      	cbnz	r0, 80159fe <__s2b+0x36>
 80159ec:	4602      	mov	r2, r0
 80159ee:	4b19      	ldr	r3, [pc, #100]	@ (8015a54 <__s2b+0x8c>)
 80159f0:	4819      	ldr	r0, [pc, #100]	@ (8015a58 <__s2b+0x90>)
 80159f2:	21d3      	movs	r1, #211	@ 0xd3
 80159f4:	f001 fea4 	bl	8017740 <__assert_func>
 80159f8:	0052      	lsls	r2, r2, #1
 80159fa:	3101      	adds	r1, #1
 80159fc:	e7f0      	b.n	80159e0 <__s2b+0x18>
 80159fe:	9b08      	ldr	r3, [sp, #32]
 8015a00:	6143      	str	r3, [r0, #20]
 8015a02:	2d09      	cmp	r5, #9
 8015a04:	f04f 0301 	mov.w	r3, #1
 8015a08:	6103      	str	r3, [r0, #16]
 8015a0a:	dd16      	ble.n	8015a3a <__s2b+0x72>
 8015a0c:	f104 0909 	add.w	r9, r4, #9
 8015a10:	46c8      	mov	r8, r9
 8015a12:	442c      	add	r4, r5
 8015a14:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015a18:	4601      	mov	r1, r0
 8015a1a:	3b30      	subs	r3, #48	@ 0x30
 8015a1c:	220a      	movs	r2, #10
 8015a1e:	4630      	mov	r0, r6
 8015a20:	f7ff ff8c 	bl	801593c <__multadd>
 8015a24:	45a0      	cmp	r8, r4
 8015a26:	d1f5      	bne.n	8015a14 <__s2b+0x4c>
 8015a28:	f1a5 0408 	sub.w	r4, r5, #8
 8015a2c:	444c      	add	r4, r9
 8015a2e:	1b2d      	subs	r5, r5, r4
 8015a30:	1963      	adds	r3, r4, r5
 8015a32:	42bb      	cmp	r3, r7
 8015a34:	db04      	blt.n	8015a40 <__s2b+0x78>
 8015a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a3a:	340a      	adds	r4, #10
 8015a3c:	2509      	movs	r5, #9
 8015a3e:	e7f6      	b.n	8015a2e <__s2b+0x66>
 8015a40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015a44:	4601      	mov	r1, r0
 8015a46:	3b30      	subs	r3, #48	@ 0x30
 8015a48:	220a      	movs	r2, #10
 8015a4a:	4630      	mov	r0, r6
 8015a4c:	f7ff ff76 	bl	801593c <__multadd>
 8015a50:	e7ee      	b.n	8015a30 <__s2b+0x68>
 8015a52:	bf00      	nop
 8015a54:	080260c1 	.word	0x080260c1
 8015a58:	080260d2 	.word	0x080260d2

08015a5c <__hi0bits>:
 8015a5c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015a60:	4603      	mov	r3, r0
 8015a62:	bf36      	itet	cc
 8015a64:	0403      	lslcc	r3, r0, #16
 8015a66:	2000      	movcs	r0, #0
 8015a68:	2010      	movcc	r0, #16
 8015a6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015a6e:	bf3c      	itt	cc
 8015a70:	021b      	lslcc	r3, r3, #8
 8015a72:	3008      	addcc	r0, #8
 8015a74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015a78:	bf3c      	itt	cc
 8015a7a:	011b      	lslcc	r3, r3, #4
 8015a7c:	3004      	addcc	r0, #4
 8015a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015a82:	bf3c      	itt	cc
 8015a84:	009b      	lslcc	r3, r3, #2
 8015a86:	3002      	addcc	r0, #2
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	db05      	blt.n	8015a98 <__hi0bits+0x3c>
 8015a8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015a90:	f100 0001 	add.w	r0, r0, #1
 8015a94:	bf08      	it	eq
 8015a96:	2020      	moveq	r0, #32
 8015a98:	4770      	bx	lr

08015a9a <__lo0bits>:
 8015a9a:	6803      	ldr	r3, [r0, #0]
 8015a9c:	4602      	mov	r2, r0
 8015a9e:	f013 0007 	ands.w	r0, r3, #7
 8015aa2:	d00b      	beq.n	8015abc <__lo0bits+0x22>
 8015aa4:	07d9      	lsls	r1, r3, #31
 8015aa6:	d421      	bmi.n	8015aec <__lo0bits+0x52>
 8015aa8:	0798      	lsls	r0, r3, #30
 8015aaa:	bf49      	itett	mi
 8015aac:	085b      	lsrmi	r3, r3, #1
 8015aae:	089b      	lsrpl	r3, r3, #2
 8015ab0:	2001      	movmi	r0, #1
 8015ab2:	6013      	strmi	r3, [r2, #0]
 8015ab4:	bf5c      	itt	pl
 8015ab6:	6013      	strpl	r3, [r2, #0]
 8015ab8:	2002      	movpl	r0, #2
 8015aba:	4770      	bx	lr
 8015abc:	b299      	uxth	r1, r3
 8015abe:	b909      	cbnz	r1, 8015ac4 <__lo0bits+0x2a>
 8015ac0:	0c1b      	lsrs	r3, r3, #16
 8015ac2:	2010      	movs	r0, #16
 8015ac4:	b2d9      	uxtb	r1, r3
 8015ac6:	b909      	cbnz	r1, 8015acc <__lo0bits+0x32>
 8015ac8:	3008      	adds	r0, #8
 8015aca:	0a1b      	lsrs	r3, r3, #8
 8015acc:	0719      	lsls	r1, r3, #28
 8015ace:	bf04      	itt	eq
 8015ad0:	091b      	lsreq	r3, r3, #4
 8015ad2:	3004      	addeq	r0, #4
 8015ad4:	0799      	lsls	r1, r3, #30
 8015ad6:	bf04      	itt	eq
 8015ad8:	089b      	lsreq	r3, r3, #2
 8015ada:	3002      	addeq	r0, #2
 8015adc:	07d9      	lsls	r1, r3, #31
 8015ade:	d403      	bmi.n	8015ae8 <__lo0bits+0x4e>
 8015ae0:	085b      	lsrs	r3, r3, #1
 8015ae2:	f100 0001 	add.w	r0, r0, #1
 8015ae6:	d003      	beq.n	8015af0 <__lo0bits+0x56>
 8015ae8:	6013      	str	r3, [r2, #0]
 8015aea:	4770      	bx	lr
 8015aec:	2000      	movs	r0, #0
 8015aee:	4770      	bx	lr
 8015af0:	2020      	movs	r0, #32
 8015af2:	4770      	bx	lr

08015af4 <__i2b>:
 8015af4:	b510      	push	{r4, lr}
 8015af6:	460c      	mov	r4, r1
 8015af8:	2101      	movs	r1, #1
 8015afa:	f7ff febd 	bl	8015878 <_Balloc>
 8015afe:	4602      	mov	r2, r0
 8015b00:	b928      	cbnz	r0, 8015b0e <__i2b+0x1a>
 8015b02:	4b05      	ldr	r3, [pc, #20]	@ (8015b18 <__i2b+0x24>)
 8015b04:	4805      	ldr	r0, [pc, #20]	@ (8015b1c <__i2b+0x28>)
 8015b06:	f240 1145 	movw	r1, #325	@ 0x145
 8015b0a:	f001 fe19 	bl	8017740 <__assert_func>
 8015b0e:	2301      	movs	r3, #1
 8015b10:	6144      	str	r4, [r0, #20]
 8015b12:	6103      	str	r3, [r0, #16]
 8015b14:	bd10      	pop	{r4, pc}
 8015b16:	bf00      	nop
 8015b18:	080260c1 	.word	0x080260c1
 8015b1c:	080260d2 	.word	0x080260d2

08015b20 <__multiply>:
 8015b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b24:	4614      	mov	r4, r2
 8015b26:	690a      	ldr	r2, [r1, #16]
 8015b28:	6923      	ldr	r3, [r4, #16]
 8015b2a:	429a      	cmp	r2, r3
 8015b2c:	bfa8      	it	ge
 8015b2e:	4623      	movge	r3, r4
 8015b30:	460f      	mov	r7, r1
 8015b32:	bfa4      	itt	ge
 8015b34:	460c      	movge	r4, r1
 8015b36:	461f      	movge	r7, r3
 8015b38:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8015b3c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8015b40:	68a3      	ldr	r3, [r4, #8]
 8015b42:	6861      	ldr	r1, [r4, #4]
 8015b44:	eb0a 0609 	add.w	r6, sl, r9
 8015b48:	42b3      	cmp	r3, r6
 8015b4a:	b085      	sub	sp, #20
 8015b4c:	bfb8      	it	lt
 8015b4e:	3101      	addlt	r1, #1
 8015b50:	f7ff fe92 	bl	8015878 <_Balloc>
 8015b54:	b930      	cbnz	r0, 8015b64 <__multiply+0x44>
 8015b56:	4602      	mov	r2, r0
 8015b58:	4b44      	ldr	r3, [pc, #272]	@ (8015c6c <__multiply+0x14c>)
 8015b5a:	4845      	ldr	r0, [pc, #276]	@ (8015c70 <__multiply+0x150>)
 8015b5c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015b60:	f001 fdee 	bl	8017740 <__assert_func>
 8015b64:	f100 0514 	add.w	r5, r0, #20
 8015b68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015b6c:	462b      	mov	r3, r5
 8015b6e:	2200      	movs	r2, #0
 8015b70:	4543      	cmp	r3, r8
 8015b72:	d321      	bcc.n	8015bb8 <__multiply+0x98>
 8015b74:	f107 0114 	add.w	r1, r7, #20
 8015b78:	f104 0214 	add.w	r2, r4, #20
 8015b7c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8015b80:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8015b84:	9302      	str	r3, [sp, #8]
 8015b86:	1b13      	subs	r3, r2, r4
 8015b88:	3b15      	subs	r3, #21
 8015b8a:	f023 0303 	bic.w	r3, r3, #3
 8015b8e:	3304      	adds	r3, #4
 8015b90:	f104 0715 	add.w	r7, r4, #21
 8015b94:	42ba      	cmp	r2, r7
 8015b96:	bf38      	it	cc
 8015b98:	2304      	movcc	r3, #4
 8015b9a:	9301      	str	r3, [sp, #4]
 8015b9c:	9b02      	ldr	r3, [sp, #8]
 8015b9e:	9103      	str	r1, [sp, #12]
 8015ba0:	428b      	cmp	r3, r1
 8015ba2:	d80c      	bhi.n	8015bbe <__multiply+0x9e>
 8015ba4:	2e00      	cmp	r6, #0
 8015ba6:	dd03      	ble.n	8015bb0 <__multiply+0x90>
 8015ba8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d05b      	beq.n	8015c68 <__multiply+0x148>
 8015bb0:	6106      	str	r6, [r0, #16]
 8015bb2:	b005      	add	sp, #20
 8015bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bb8:	f843 2b04 	str.w	r2, [r3], #4
 8015bbc:	e7d8      	b.n	8015b70 <__multiply+0x50>
 8015bbe:	f8b1 a000 	ldrh.w	sl, [r1]
 8015bc2:	f1ba 0f00 	cmp.w	sl, #0
 8015bc6:	d024      	beq.n	8015c12 <__multiply+0xf2>
 8015bc8:	f104 0e14 	add.w	lr, r4, #20
 8015bcc:	46a9      	mov	r9, r5
 8015bce:	f04f 0c00 	mov.w	ip, #0
 8015bd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015bd6:	f8d9 3000 	ldr.w	r3, [r9]
 8015bda:	fa1f fb87 	uxth.w	fp, r7
 8015bde:	b29b      	uxth	r3, r3
 8015be0:	fb0a 330b 	mla	r3, sl, fp, r3
 8015be4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8015be8:	f8d9 7000 	ldr.w	r7, [r9]
 8015bec:	4463      	add	r3, ip
 8015bee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015bf2:	fb0a c70b 	mla	r7, sl, fp, ip
 8015bf6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8015bfa:	b29b      	uxth	r3, r3
 8015bfc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015c00:	4572      	cmp	r2, lr
 8015c02:	f849 3b04 	str.w	r3, [r9], #4
 8015c06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015c0a:	d8e2      	bhi.n	8015bd2 <__multiply+0xb2>
 8015c0c:	9b01      	ldr	r3, [sp, #4]
 8015c0e:	f845 c003 	str.w	ip, [r5, r3]
 8015c12:	9b03      	ldr	r3, [sp, #12]
 8015c14:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015c18:	3104      	adds	r1, #4
 8015c1a:	f1b9 0f00 	cmp.w	r9, #0
 8015c1e:	d021      	beq.n	8015c64 <__multiply+0x144>
 8015c20:	682b      	ldr	r3, [r5, #0]
 8015c22:	f104 0c14 	add.w	ip, r4, #20
 8015c26:	46ae      	mov	lr, r5
 8015c28:	f04f 0a00 	mov.w	sl, #0
 8015c2c:	f8bc b000 	ldrh.w	fp, [ip]
 8015c30:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8015c34:	fb09 770b 	mla	r7, r9, fp, r7
 8015c38:	4457      	add	r7, sl
 8015c3a:	b29b      	uxth	r3, r3
 8015c3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015c40:	f84e 3b04 	str.w	r3, [lr], #4
 8015c44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015c48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015c4c:	f8be 3000 	ldrh.w	r3, [lr]
 8015c50:	fb09 330a 	mla	r3, r9, sl, r3
 8015c54:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8015c58:	4562      	cmp	r2, ip
 8015c5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015c5e:	d8e5      	bhi.n	8015c2c <__multiply+0x10c>
 8015c60:	9f01      	ldr	r7, [sp, #4]
 8015c62:	51eb      	str	r3, [r5, r7]
 8015c64:	3504      	adds	r5, #4
 8015c66:	e799      	b.n	8015b9c <__multiply+0x7c>
 8015c68:	3e01      	subs	r6, #1
 8015c6a:	e79b      	b.n	8015ba4 <__multiply+0x84>
 8015c6c:	080260c1 	.word	0x080260c1
 8015c70:	080260d2 	.word	0x080260d2

08015c74 <__pow5mult>:
 8015c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c78:	4615      	mov	r5, r2
 8015c7a:	f012 0203 	ands.w	r2, r2, #3
 8015c7e:	4607      	mov	r7, r0
 8015c80:	460e      	mov	r6, r1
 8015c82:	d007      	beq.n	8015c94 <__pow5mult+0x20>
 8015c84:	4c25      	ldr	r4, [pc, #148]	@ (8015d1c <__pow5mult+0xa8>)
 8015c86:	3a01      	subs	r2, #1
 8015c88:	2300      	movs	r3, #0
 8015c8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015c8e:	f7ff fe55 	bl	801593c <__multadd>
 8015c92:	4606      	mov	r6, r0
 8015c94:	10ad      	asrs	r5, r5, #2
 8015c96:	d03d      	beq.n	8015d14 <__pow5mult+0xa0>
 8015c98:	69fc      	ldr	r4, [r7, #28]
 8015c9a:	b97c      	cbnz	r4, 8015cbc <__pow5mult+0x48>
 8015c9c:	2010      	movs	r0, #16
 8015c9e:	f7ff fd35 	bl	801570c <malloc>
 8015ca2:	4602      	mov	r2, r0
 8015ca4:	61f8      	str	r0, [r7, #28]
 8015ca6:	b928      	cbnz	r0, 8015cb4 <__pow5mult+0x40>
 8015ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8015d20 <__pow5mult+0xac>)
 8015caa:	481e      	ldr	r0, [pc, #120]	@ (8015d24 <__pow5mult+0xb0>)
 8015cac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015cb0:	f001 fd46 	bl	8017740 <__assert_func>
 8015cb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015cb8:	6004      	str	r4, [r0, #0]
 8015cba:	60c4      	str	r4, [r0, #12]
 8015cbc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015cc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015cc4:	b94c      	cbnz	r4, 8015cda <__pow5mult+0x66>
 8015cc6:	f240 2171 	movw	r1, #625	@ 0x271
 8015cca:	4638      	mov	r0, r7
 8015ccc:	f7ff ff12 	bl	8015af4 <__i2b>
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8015cd6:	4604      	mov	r4, r0
 8015cd8:	6003      	str	r3, [r0, #0]
 8015cda:	f04f 0900 	mov.w	r9, #0
 8015cde:	07eb      	lsls	r3, r5, #31
 8015ce0:	d50a      	bpl.n	8015cf8 <__pow5mult+0x84>
 8015ce2:	4631      	mov	r1, r6
 8015ce4:	4622      	mov	r2, r4
 8015ce6:	4638      	mov	r0, r7
 8015ce8:	f7ff ff1a 	bl	8015b20 <__multiply>
 8015cec:	4631      	mov	r1, r6
 8015cee:	4680      	mov	r8, r0
 8015cf0:	4638      	mov	r0, r7
 8015cf2:	f7ff fe01 	bl	80158f8 <_Bfree>
 8015cf6:	4646      	mov	r6, r8
 8015cf8:	106d      	asrs	r5, r5, #1
 8015cfa:	d00b      	beq.n	8015d14 <__pow5mult+0xa0>
 8015cfc:	6820      	ldr	r0, [r4, #0]
 8015cfe:	b938      	cbnz	r0, 8015d10 <__pow5mult+0x9c>
 8015d00:	4622      	mov	r2, r4
 8015d02:	4621      	mov	r1, r4
 8015d04:	4638      	mov	r0, r7
 8015d06:	f7ff ff0b 	bl	8015b20 <__multiply>
 8015d0a:	6020      	str	r0, [r4, #0]
 8015d0c:	f8c0 9000 	str.w	r9, [r0]
 8015d10:	4604      	mov	r4, r0
 8015d12:	e7e4      	b.n	8015cde <__pow5mult+0x6a>
 8015d14:	4630      	mov	r0, r6
 8015d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d1a:	bf00      	nop
 8015d1c:	0802612c 	.word	0x0802612c
 8015d20:	08026052 	.word	0x08026052
 8015d24:	080260d2 	.word	0x080260d2

08015d28 <__lshift>:
 8015d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d2c:	460c      	mov	r4, r1
 8015d2e:	6849      	ldr	r1, [r1, #4]
 8015d30:	6923      	ldr	r3, [r4, #16]
 8015d32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015d36:	68a3      	ldr	r3, [r4, #8]
 8015d38:	4607      	mov	r7, r0
 8015d3a:	4691      	mov	r9, r2
 8015d3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015d40:	f108 0601 	add.w	r6, r8, #1
 8015d44:	42b3      	cmp	r3, r6
 8015d46:	db0b      	blt.n	8015d60 <__lshift+0x38>
 8015d48:	4638      	mov	r0, r7
 8015d4a:	f7ff fd95 	bl	8015878 <_Balloc>
 8015d4e:	4605      	mov	r5, r0
 8015d50:	b948      	cbnz	r0, 8015d66 <__lshift+0x3e>
 8015d52:	4602      	mov	r2, r0
 8015d54:	4b28      	ldr	r3, [pc, #160]	@ (8015df8 <__lshift+0xd0>)
 8015d56:	4829      	ldr	r0, [pc, #164]	@ (8015dfc <__lshift+0xd4>)
 8015d58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015d5c:	f001 fcf0 	bl	8017740 <__assert_func>
 8015d60:	3101      	adds	r1, #1
 8015d62:	005b      	lsls	r3, r3, #1
 8015d64:	e7ee      	b.n	8015d44 <__lshift+0x1c>
 8015d66:	2300      	movs	r3, #0
 8015d68:	f100 0114 	add.w	r1, r0, #20
 8015d6c:	f100 0210 	add.w	r2, r0, #16
 8015d70:	4618      	mov	r0, r3
 8015d72:	4553      	cmp	r3, sl
 8015d74:	db33      	blt.n	8015dde <__lshift+0xb6>
 8015d76:	6920      	ldr	r0, [r4, #16]
 8015d78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015d7c:	f104 0314 	add.w	r3, r4, #20
 8015d80:	f019 091f 	ands.w	r9, r9, #31
 8015d84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015d88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015d8c:	d02b      	beq.n	8015de6 <__lshift+0xbe>
 8015d8e:	f1c9 0e20 	rsb	lr, r9, #32
 8015d92:	468a      	mov	sl, r1
 8015d94:	2200      	movs	r2, #0
 8015d96:	6818      	ldr	r0, [r3, #0]
 8015d98:	fa00 f009 	lsl.w	r0, r0, r9
 8015d9c:	4310      	orrs	r0, r2
 8015d9e:	f84a 0b04 	str.w	r0, [sl], #4
 8015da2:	f853 2b04 	ldr.w	r2, [r3], #4
 8015da6:	459c      	cmp	ip, r3
 8015da8:	fa22 f20e 	lsr.w	r2, r2, lr
 8015dac:	d8f3      	bhi.n	8015d96 <__lshift+0x6e>
 8015dae:	ebac 0304 	sub.w	r3, ip, r4
 8015db2:	3b15      	subs	r3, #21
 8015db4:	f023 0303 	bic.w	r3, r3, #3
 8015db8:	3304      	adds	r3, #4
 8015dba:	f104 0015 	add.w	r0, r4, #21
 8015dbe:	4584      	cmp	ip, r0
 8015dc0:	bf38      	it	cc
 8015dc2:	2304      	movcc	r3, #4
 8015dc4:	50ca      	str	r2, [r1, r3]
 8015dc6:	b10a      	cbz	r2, 8015dcc <__lshift+0xa4>
 8015dc8:	f108 0602 	add.w	r6, r8, #2
 8015dcc:	3e01      	subs	r6, #1
 8015dce:	4638      	mov	r0, r7
 8015dd0:	612e      	str	r6, [r5, #16]
 8015dd2:	4621      	mov	r1, r4
 8015dd4:	f7ff fd90 	bl	80158f8 <_Bfree>
 8015dd8:	4628      	mov	r0, r5
 8015dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dde:	f842 0f04 	str.w	r0, [r2, #4]!
 8015de2:	3301      	adds	r3, #1
 8015de4:	e7c5      	b.n	8015d72 <__lshift+0x4a>
 8015de6:	3904      	subs	r1, #4
 8015de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015dec:	f841 2f04 	str.w	r2, [r1, #4]!
 8015df0:	459c      	cmp	ip, r3
 8015df2:	d8f9      	bhi.n	8015de8 <__lshift+0xc0>
 8015df4:	e7ea      	b.n	8015dcc <__lshift+0xa4>
 8015df6:	bf00      	nop
 8015df8:	080260c1 	.word	0x080260c1
 8015dfc:	080260d2 	.word	0x080260d2

08015e00 <__mcmp>:
 8015e00:	690a      	ldr	r2, [r1, #16]
 8015e02:	4603      	mov	r3, r0
 8015e04:	6900      	ldr	r0, [r0, #16]
 8015e06:	1a80      	subs	r0, r0, r2
 8015e08:	b530      	push	{r4, r5, lr}
 8015e0a:	d10e      	bne.n	8015e2a <__mcmp+0x2a>
 8015e0c:	3314      	adds	r3, #20
 8015e0e:	3114      	adds	r1, #20
 8015e10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015e14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015e18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015e1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015e20:	4295      	cmp	r5, r2
 8015e22:	d003      	beq.n	8015e2c <__mcmp+0x2c>
 8015e24:	d205      	bcs.n	8015e32 <__mcmp+0x32>
 8015e26:	f04f 30ff 	mov.w	r0, #4294967295
 8015e2a:	bd30      	pop	{r4, r5, pc}
 8015e2c:	42a3      	cmp	r3, r4
 8015e2e:	d3f3      	bcc.n	8015e18 <__mcmp+0x18>
 8015e30:	e7fb      	b.n	8015e2a <__mcmp+0x2a>
 8015e32:	2001      	movs	r0, #1
 8015e34:	e7f9      	b.n	8015e2a <__mcmp+0x2a>
	...

08015e38 <__mdiff>:
 8015e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e3c:	4689      	mov	r9, r1
 8015e3e:	4606      	mov	r6, r0
 8015e40:	4611      	mov	r1, r2
 8015e42:	4648      	mov	r0, r9
 8015e44:	4614      	mov	r4, r2
 8015e46:	f7ff ffdb 	bl	8015e00 <__mcmp>
 8015e4a:	1e05      	subs	r5, r0, #0
 8015e4c:	d112      	bne.n	8015e74 <__mdiff+0x3c>
 8015e4e:	4629      	mov	r1, r5
 8015e50:	4630      	mov	r0, r6
 8015e52:	f7ff fd11 	bl	8015878 <_Balloc>
 8015e56:	4602      	mov	r2, r0
 8015e58:	b928      	cbnz	r0, 8015e66 <__mdiff+0x2e>
 8015e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8015f58 <__mdiff+0x120>)
 8015e5c:	f240 2137 	movw	r1, #567	@ 0x237
 8015e60:	483e      	ldr	r0, [pc, #248]	@ (8015f5c <__mdiff+0x124>)
 8015e62:	f001 fc6d 	bl	8017740 <__assert_func>
 8015e66:	2301      	movs	r3, #1
 8015e68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015e6c:	4610      	mov	r0, r2
 8015e6e:	b003      	add	sp, #12
 8015e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e74:	bfbc      	itt	lt
 8015e76:	464b      	movlt	r3, r9
 8015e78:	46a1      	movlt	r9, r4
 8015e7a:	4630      	mov	r0, r6
 8015e7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015e80:	bfba      	itte	lt
 8015e82:	461c      	movlt	r4, r3
 8015e84:	2501      	movlt	r5, #1
 8015e86:	2500      	movge	r5, #0
 8015e88:	f7ff fcf6 	bl	8015878 <_Balloc>
 8015e8c:	4602      	mov	r2, r0
 8015e8e:	b918      	cbnz	r0, 8015e98 <__mdiff+0x60>
 8015e90:	4b31      	ldr	r3, [pc, #196]	@ (8015f58 <__mdiff+0x120>)
 8015e92:	f240 2145 	movw	r1, #581	@ 0x245
 8015e96:	e7e3      	b.n	8015e60 <__mdiff+0x28>
 8015e98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015e9c:	6926      	ldr	r6, [r4, #16]
 8015e9e:	60c5      	str	r5, [r0, #12]
 8015ea0:	f109 0310 	add.w	r3, r9, #16
 8015ea4:	f109 0514 	add.w	r5, r9, #20
 8015ea8:	f104 0e14 	add.w	lr, r4, #20
 8015eac:	f100 0b14 	add.w	fp, r0, #20
 8015eb0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015eb4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015eb8:	9301      	str	r3, [sp, #4]
 8015eba:	46d9      	mov	r9, fp
 8015ebc:	f04f 0c00 	mov.w	ip, #0
 8015ec0:	9b01      	ldr	r3, [sp, #4]
 8015ec2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015ec6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015eca:	9301      	str	r3, [sp, #4]
 8015ecc:	fa1f f38a 	uxth.w	r3, sl
 8015ed0:	4619      	mov	r1, r3
 8015ed2:	b283      	uxth	r3, r0
 8015ed4:	1acb      	subs	r3, r1, r3
 8015ed6:	0c00      	lsrs	r0, r0, #16
 8015ed8:	4463      	add	r3, ip
 8015eda:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015ede:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015ee2:	b29b      	uxth	r3, r3
 8015ee4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015ee8:	4576      	cmp	r6, lr
 8015eea:	f849 3b04 	str.w	r3, [r9], #4
 8015eee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015ef2:	d8e5      	bhi.n	8015ec0 <__mdiff+0x88>
 8015ef4:	1b33      	subs	r3, r6, r4
 8015ef6:	3b15      	subs	r3, #21
 8015ef8:	f023 0303 	bic.w	r3, r3, #3
 8015efc:	3415      	adds	r4, #21
 8015efe:	3304      	adds	r3, #4
 8015f00:	42a6      	cmp	r6, r4
 8015f02:	bf38      	it	cc
 8015f04:	2304      	movcc	r3, #4
 8015f06:	441d      	add	r5, r3
 8015f08:	445b      	add	r3, fp
 8015f0a:	461e      	mov	r6, r3
 8015f0c:	462c      	mov	r4, r5
 8015f0e:	4544      	cmp	r4, r8
 8015f10:	d30e      	bcc.n	8015f30 <__mdiff+0xf8>
 8015f12:	f108 0103 	add.w	r1, r8, #3
 8015f16:	1b49      	subs	r1, r1, r5
 8015f18:	f021 0103 	bic.w	r1, r1, #3
 8015f1c:	3d03      	subs	r5, #3
 8015f1e:	45a8      	cmp	r8, r5
 8015f20:	bf38      	it	cc
 8015f22:	2100      	movcc	r1, #0
 8015f24:	440b      	add	r3, r1
 8015f26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015f2a:	b191      	cbz	r1, 8015f52 <__mdiff+0x11a>
 8015f2c:	6117      	str	r7, [r2, #16]
 8015f2e:	e79d      	b.n	8015e6c <__mdiff+0x34>
 8015f30:	f854 1b04 	ldr.w	r1, [r4], #4
 8015f34:	46e6      	mov	lr, ip
 8015f36:	0c08      	lsrs	r0, r1, #16
 8015f38:	fa1c fc81 	uxtah	ip, ip, r1
 8015f3c:	4471      	add	r1, lr
 8015f3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8015f42:	b289      	uxth	r1, r1
 8015f44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015f48:	f846 1b04 	str.w	r1, [r6], #4
 8015f4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015f50:	e7dd      	b.n	8015f0e <__mdiff+0xd6>
 8015f52:	3f01      	subs	r7, #1
 8015f54:	e7e7      	b.n	8015f26 <__mdiff+0xee>
 8015f56:	bf00      	nop
 8015f58:	080260c1 	.word	0x080260c1
 8015f5c:	080260d2 	.word	0x080260d2

08015f60 <__ulp>:
 8015f60:	b082      	sub	sp, #8
 8015f62:	ed8d 0b00 	vstr	d0, [sp]
 8015f66:	9a01      	ldr	r2, [sp, #4]
 8015f68:	4b0f      	ldr	r3, [pc, #60]	@ (8015fa8 <__ulp+0x48>)
 8015f6a:	4013      	ands	r3, r2
 8015f6c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	dc08      	bgt.n	8015f86 <__ulp+0x26>
 8015f74:	425b      	negs	r3, r3
 8015f76:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8015f7a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015f7e:	da04      	bge.n	8015f8a <__ulp+0x2a>
 8015f80:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8015f84:	4113      	asrs	r3, r2
 8015f86:	2200      	movs	r2, #0
 8015f88:	e008      	b.n	8015f9c <__ulp+0x3c>
 8015f8a:	f1a2 0314 	sub.w	r3, r2, #20
 8015f8e:	2b1e      	cmp	r3, #30
 8015f90:	bfda      	itte	le
 8015f92:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8015f96:	40da      	lsrle	r2, r3
 8015f98:	2201      	movgt	r2, #1
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	4619      	mov	r1, r3
 8015f9e:	4610      	mov	r0, r2
 8015fa0:	ec41 0b10 	vmov	d0, r0, r1
 8015fa4:	b002      	add	sp, #8
 8015fa6:	4770      	bx	lr
 8015fa8:	7ff00000 	.word	0x7ff00000

08015fac <__b2d>:
 8015fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fb0:	6906      	ldr	r6, [r0, #16]
 8015fb2:	f100 0814 	add.w	r8, r0, #20
 8015fb6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8015fba:	1f37      	subs	r7, r6, #4
 8015fbc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015fc0:	4610      	mov	r0, r2
 8015fc2:	f7ff fd4b 	bl	8015a5c <__hi0bits>
 8015fc6:	f1c0 0320 	rsb	r3, r0, #32
 8015fca:	280a      	cmp	r0, #10
 8015fcc:	600b      	str	r3, [r1, #0]
 8015fce:	491b      	ldr	r1, [pc, #108]	@ (801603c <__b2d+0x90>)
 8015fd0:	dc15      	bgt.n	8015ffe <__b2d+0x52>
 8015fd2:	f1c0 0c0b 	rsb	ip, r0, #11
 8015fd6:	fa22 f30c 	lsr.w	r3, r2, ip
 8015fda:	45b8      	cmp	r8, r7
 8015fdc:	ea43 0501 	orr.w	r5, r3, r1
 8015fe0:	bf34      	ite	cc
 8015fe2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015fe6:	2300      	movcs	r3, #0
 8015fe8:	3015      	adds	r0, #21
 8015fea:	fa02 f000 	lsl.w	r0, r2, r0
 8015fee:	fa23 f30c 	lsr.w	r3, r3, ip
 8015ff2:	4303      	orrs	r3, r0
 8015ff4:	461c      	mov	r4, r3
 8015ff6:	ec45 4b10 	vmov	d0, r4, r5
 8015ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ffe:	45b8      	cmp	r8, r7
 8016000:	bf3a      	itte	cc
 8016002:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016006:	f1a6 0708 	subcc.w	r7, r6, #8
 801600a:	2300      	movcs	r3, #0
 801600c:	380b      	subs	r0, #11
 801600e:	d012      	beq.n	8016036 <__b2d+0x8a>
 8016010:	f1c0 0120 	rsb	r1, r0, #32
 8016014:	fa23 f401 	lsr.w	r4, r3, r1
 8016018:	4082      	lsls	r2, r0
 801601a:	4322      	orrs	r2, r4
 801601c:	4547      	cmp	r7, r8
 801601e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016022:	bf8c      	ite	hi
 8016024:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016028:	2200      	movls	r2, #0
 801602a:	4083      	lsls	r3, r0
 801602c:	40ca      	lsrs	r2, r1
 801602e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016032:	4313      	orrs	r3, r2
 8016034:	e7de      	b.n	8015ff4 <__b2d+0x48>
 8016036:	ea42 0501 	orr.w	r5, r2, r1
 801603a:	e7db      	b.n	8015ff4 <__b2d+0x48>
 801603c:	3ff00000 	.word	0x3ff00000

08016040 <__d2b>:
 8016040:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016044:	460f      	mov	r7, r1
 8016046:	2101      	movs	r1, #1
 8016048:	ec59 8b10 	vmov	r8, r9, d0
 801604c:	4616      	mov	r6, r2
 801604e:	f7ff fc13 	bl	8015878 <_Balloc>
 8016052:	4604      	mov	r4, r0
 8016054:	b930      	cbnz	r0, 8016064 <__d2b+0x24>
 8016056:	4602      	mov	r2, r0
 8016058:	4b23      	ldr	r3, [pc, #140]	@ (80160e8 <__d2b+0xa8>)
 801605a:	4824      	ldr	r0, [pc, #144]	@ (80160ec <__d2b+0xac>)
 801605c:	f240 310f 	movw	r1, #783	@ 0x30f
 8016060:	f001 fb6e 	bl	8017740 <__assert_func>
 8016064:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801606c:	b10d      	cbz	r5, 8016072 <__d2b+0x32>
 801606e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016072:	9301      	str	r3, [sp, #4]
 8016074:	f1b8 0300 	subs.w	r3, r8, #0
 8016078:	d023      	beq.n	80160c2 <__d2b+0x82>
 801607a:	4668      	mov	r0, sp
 801607c:	9300      	str	r3, [sp, #0]
 801607e:	f7ff fd0c 	bl	8015a9a <__lo0bits>
 8016082:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016086:	b1d0      	cbz	r0, 80160be <__d2b+0x7e>
 8016088:	f1c0 0320 	rsb	r3, r0, #32
 801608c:	fa02 f303 	lsl.w	r3, r2, r3
 8016090:	430b      	orrs	r3, r1
 8016092:	40c2      	lsrs	r2, r0
 8016094:	6163      	str	r3, [r4, #20]
 8016096:	9201      	str	r2, [sp, #4]
 8016098:	9b01      	ldr	r3, [sp, #4]
 801609a:	61a3      	str	r3, [r4, #24]
 801609c:	2b00      	cmp	r3, #0
 801609e:	bf0c      	ite	eq
 80160a0:	2201      	moveq	r2, #1
 80160a2:	2202      	movne	r2, #2
 80160a4:	6122      	str	r2, [r4, #16]
 80160a6:	b1a5      	cbz	r5, 80160d2 <__d2b+0x92>
 80160a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80160ac:	4405      	add	r5, r0
 80160ae:	603d      	str	r5, [r7, #0]
 80160b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80160b4:	6030      	str	r0, [r6, #0]
 80160b6:	4620      	mov	r0, r4
 80160b8:	b003      	add	sp, #12
 80160ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160be:	6161      	str	r1, [r4, #20]
 80160c0:	e7ea      	b.n	8016098 <__d2b+0x58>
 80160c2:	a801      	add	r0, sp, #4
 80160c4:	f7ff fce9 	bl	8015a9a <__lo0bits>
 80160c8:	9b01      	ldr	r3, [sp, #4]
 80160ca:	6163      	str	r3, [r4, #20]
 80160cc:	3020      	adds	r0, #32
 80160ce:	2201      	movs	r2, #1
 80160d0:	e7e8      	b.n	80160a4 <__d2b+0x64>
 80160d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80160d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80160da:	6038      	str	r0, [r7, #0]
 80160dc:	6918      	ldr	r0, [r3, #16]
 80160de:	f7ff fcbd 	bl	8015a5c <__hi0bits>
 80160e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80160e6:	e7e5      	b.n	80160b4 <__d2b+0x74>
 80160e8:	080260c1 	.word	0x080260c1
 80160ec:	080260d2 	.word	0x080260d2

080160f0 <__ratio>:
 80160f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160f4:	b085      	sub	sp, #20
 80160f6:	e9cd 1000 	strd	r1, r0, [sp]
 80160fa:	a902      	add	r1, sp, #8
 80160fc:	f7ff ff56 	bl	8015fac <__b2d>
 8016100:	9800      	ldr	r0, [sp, #0]
 8016102:	a903      	add	r1, sp, #12
 8016104:	ec55 4b10 	vmov	r4, r5, d0
 8016108:	f7ff ff50 	bl	8015fac <__b2d>
 801610c:	9b01      	ldr	r3, [sp, #4]
 801610e:	6919      	ldr	r1, [r3, #16]
 8016110:	9b00      	ldr	r3, [sp, #0]
 8016112:	691b      	ldr	r3, [r3, #16]
 8016114:	1ac9      	subs	r1, r1, r3
 8016116:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801611a:	1a9b      	subs	r3, r3, r2
 801611c:	ec5b ab10 	vmov	sl, fp, d0
 8016120:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016124:	2b00      	cmp	r3, #0
 8016126:	bfce      	itee	gt
 8016128:	462a      	movgt	r2, r5
 801612a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801612e:	465a      	movle	r2, fp
 8016130:	462f      	mov	r7, r5
 8016132:	46d9      	mov	r9, fp
 8016134:	bfcc      	ite	gt
 8016136:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801613a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801613e:	464b      	mov	r3, r9
 8016140:	4652      	mov	r2, sl
 8016142:	4620      	mov	r0, r4
 8016144:	4639      	mov	r1, r7
 8016146:	f7ea fba9 	bl	800089c <__aeabi_ddiv>
 801614a:	ec41 0b10 	vmov	d0, r0, r1
 801614e:	b005      	add	sp, #20
 8016150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016154 <__copybits>:
 8016154:	3901      	subs	r1, #1
 8016156:	b570      	push	{r4, r5, r6, lr}
 8016158:	1149      	asrs	r1, r1, #5
 801615a:	6914      	ldr	r4, [r2, #16]
 801615c:	3101      	adds	r1, #1
 801615e:	f102 0314 	add.w	r3, r2, #20
 8016162:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016166:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801616a:	1f05      	subs	r5, r0, #4
 801616c:	42a3      	cmp	r3, r4
 801616e:	d30c      	bcc.n	801618a <__copybits+0x36>
 8016170:	1aa3      	subs	r3, r4, r2
 8016172:	3b11      	subs	r3, #17
 8016174:	f023 0303 	bic.w	r3, r3, #3
 8016178:	3211      	adds	r2, #17
 801617a:	42a2      	cmp	r2, r4
 801617c:	bf88      	it	hi
 801617e:	2300      	movhi	r3, #0
 8016180:	4418      	add	r0, r3
 8016182:	2300      	movs	r3, #0
 8016184:	4288      	cmp	r0, r1
 8016186:	d305      	bcc.n	8016194 <__copybits+0x40>
 8016188:	bd70      	pop	{r4, r5, r6, pc}
 801618a:	f853 6b04 	ldr.w	r6, [r3], #4
 801618e:	f845 6f04 	str.w	r6, [r5, #4]!
 8016192:	e7eb      	b.n	801616c <__copybits+0x18>
 8016194:	f840 3b04 	str.w	r3, [r0], #4
 8016198:	e7f4      	b.n	8016184 <__copybits+0x30>

0801619a <__any_on>:
 801619a:	f100 0214 	add.w	r2, r0, #20
 801619e:	6900      	ldr	r0, [r0, #16]
 80161a0:	114b      	asrs	r3, r1, #5
 80161a2:	4298      	cmp	r0, r3
 80161a4:	b510      	push	{r4, lr}
 80161a6:	db11      	blt.n	80161cc <__any_on+0x32>
 80161a8:	dd0a      	ble.n	80161c0 <__any_on+0x26>
 80161aa:	f011 011f 	ands.w	r1, r1, #31
 80161ae:	d007      	beq.n	80161c0 <__any_on+0x26>
 80161b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80161b4:	fa24 f001 	lsr.w	r0, r4, r1
 80161b8:	fa00 f101 	lsl.w	r1, r0, r1
 80161bc:	428c      	cmp	r4, r1
 80161be:	d10b      	bne.n	80161d8 <__any_on+0x3e>
 80161c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80161c4:	4293      	cmp	r3, r2
 80161c6:	d803      	bhi.n	80161d0 <__any_on+0x36>
 80161c8:	2000      	movs	r0, #0
 80161ca:	bd10      	pop	{r4, pc}
 80161cc:	4603      	mov	r3, r0
 80161ce:	e7f7      	b.n	80161c0 <__any_on+0x26>
 80161d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80161d4:	2900      	cmp	r1, #0
 80161d6:	d0f5      	beq.n	80161c4 <__any_on+0x2a>
 80161d8:	2001      	movs	r0, #1
 80161da:	e7f6      	b.n	80161ca <__any_on+0x30>

080161dc <sulp>:
 80161dc:	b570      	push	{r4, r5, r6, lr}
 80161de:	4604      	mov	r4, r0
 80161e0:	460d      	mov	r5, r1
 80161e2:	ec45 4b10 	vmov	d0, r4, r5
 80161e6:	4616      	mov	r6, r2
 80161e8:	f7ff feba 	bl	8015f60 <__ulp>
 80161ec:	ec51 0b10 	vmov	r0, r1, d0
 80161f0:	b17e      	cbz	r6, 8016212 <sulp+0x36>
 80161f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80161f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	dd09      	ble.n	8016212 <sulp+0x36>
 80161fe:	051b      	lsls	r3, r3, #20
 8016200:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8016204:	2400      	movs	r4, #0
 8016206:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801620a:	4622      	mov	r2, r4
 801620c:	462b      	mov	r3, r5
 801620e:	f7ea fa1b 	bl	8000648 <__aeabi_dmul>
 8016212:	ec41 0b10 	vmov	d0, r0, r1
 8016216:	bd70      	pop	{r4, r5, r6, pc}

08016218 <_strtod_l>:
 8016218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801621c:	b09f      	sub	sp, #124	@ 0x7c
 801621e:	460c      	mov	r4, r1
 8016220:	9217      	str	r2, [sp, #92]	@ 0x5c
 8016222:	2200      	movs	r2, #0
 8016224:	921a      	str	r2, [sp, #104]	@ 0x68
 8016226:	9005      	str	r0, [sp, #20]
 8016228:	f04f 0a00 	mov.w	sl, #0
 801622c:	f04f 0b00 	mov.w	fp, #0
 8016230:	460a      	mov	r2, r1
 8016232:	9219      	str	r2, [sp, #100]	@ 0x64
 8016234:	7811      	ldrb	r1, [r2, #0]
 8016236:	292b      	cmp	r1, #43	@ 0x2b
 8016238:	d04a      	beq.n	80162d0 <_strtod_l+0xb8>
 801623a:	d838      	bhi.n	80162ae <_strtod_l+0x96>
 801623c:	290d      	cmp	r1, #13
 801623e:	d832      	bhi.n	80162a6 <_strtod_l+0x8e>
 8016240:	2908      	cmp	r1, #8
 8016242:	d832      	bhi.n	80162aa <_strtod_l+0x92>
 8016244:	2900      	cmp	r1, #0
 8016246:	d03b      	beq.n	80162c0 <_strtod_l+0xa8>
 8016248:	2200      	movs	r2, #0
 801624a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801624c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801624e:	782a      	ldrb	r2, [r5, #0]
 8016250:	2a30      	cmp	r2, #48	@ 0x30
 8016252:	f040 80b3 	bne.w	80163bc <_strtod_l+0x1a4>
 8016256:	786a      	ldrb	r2, [r5, #1]
 8016258:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801625c:	2a58      	cmp	r2, #88	@ 0x58
 801625e:	d16e      	bne.n	801633e <_strtod_l+0x126>
 8016260:	9302      	str	r3, [sp, #8]
 8016262:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016264:	9301      	str	r3, [sp, #4]
 8016266:	ab1a      	add	r3, sp, #104	@ 0x68
 8016268:	9300      	str	r3, [sp, #0]
 801626a:	4a8e      	ldr	r2, [pc, #568]	@ (80164a4 <_strtod_l+0x28c>)
 801626c:	9805      	ldr	r0, [sp, #20]
 801626e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016270:	a919      	add	r1, sp, #100	@ 0x64
 8016272:	f001 faff 	bl	8017874 <__gethex>
 8016276:	f010 060f 	ands.w	r6, r0, #15
 801627a:	4604      	mov	r4, r0
 801627c:	d005      	beq.n	801628a <_strtod_l+0x72>
 801627e:	2e06      	cmp	r6, #6
 8016280:	d128      	bne.n	80162d4 <_strtod_l+0xbc>
 8016282:	3501      	adds	r5, #1
 8016284:	2300      	movs	r3, #0
 8016286:	9519      	str	r5, [sp, #100]	@ 0x64
 8016288:	930b      	str	r3, [sp, #44]	@ 0x2c
 801628a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801628c:	2b00      	cmp	r3, #0
 801628e:	f040 858e 	bne.w	8016dae <_strtod_l+0xb96>
 8016292:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016294:	b1cb      	cbz	r3, 80162ca <_strtod_l+0xb2>
 8016296:	4652      	mov	r2, sl
 8016298:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801629c:	ec43 2b10 	vmov	d0, r2, r3
 80162a0:	b01f      	add	sp, #124	@ 0x7c
 80162a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162a6:	2920      	cmp	r1, #32
 80162a8:	d1ce      	bne.n	8016248 <_strtod_l+0x30>
 80162aa:	3201      	adds	r2, #1
 80162ac:	e7c1      	b.n	8016232 <_strtod_l+0x1a>
 80162ae:	292d      	cmp	r1, #45	@ 0x2d
 80162b0:	d1ca      	bne.n	8016248 <_strtod_l+0x30>
 80162b2:	2101      	movs	r1, #1
 80162b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80162b6:	1c51      	adds	r1, r2, #1
 80162b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80162ba:	7852      	ldrb	r2, [r2, #1]
 80162bc:	2a00      	cmp	r2, #0
 80162be:	d1c5      	bne.n	801624c <_strtod_l+0x34>
 80162c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80162c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	f040 8570 	bne.w	8016daa <_strtod_l+0xb92>
 80162ca:	4652      	mov	r2, sl
 80162cc:	465b      	mov	r3, fp
 80162ce:	e7e5      	b.n	801629c <_strtod_l+0x84>
 80162d0:	2100      	movs	r1, #0
 80162d2:	e7ef      	b.n	80162b4 <_strtod_l+0x9c>
 80162d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80162d6:	b13a      	cbz	r2, 80162e8 <_strtod_l+0xd0>
 80162d8:	2135      	movs	r1, #53	@ 0x35
 80162da:	a81c      	add	r0, sp, #112	@ 0x70
 80162dc:	f7ff ff3a 	bl	8016154 <__copybits>
 80162e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80162e2:	9805      	ldr	r0, [sp, #20]
 80162e4:	f7ff fb08 	bl	80158f8 <_Bfree>
 80162e8:	3e01      	subs	r6, #1
 80162ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80162ec:	2e04      	cmp	r6, #4
 80162ee:	d806      	bhi.n	80162fe <_strtod_l+0xe6>
 80162f0:	e8df f006 	tbb	[pc, r6]
 80162f4:	201d0314 	.word	0x201d0314
 80162f8:	14          	.byte	0x14
 80162f9:	00          	.byte	0x00
 80162fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80162fe:	05e1      	lsls	r1, r4, #23
 8016300:	bf48      	it	mi
 8016302:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016306:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801630a:	0d1b      	lsrs	r3, r3, #20
 801630c:	051b      	lsls	r3, r3, #20
 801630e:	2b00      	cmp	r3, #0
 8016310:	d1bb      	bne.n	801628a <_strtod_l+0x72>
 8016312:	f7fe fb31 	bl	8014978 <__errno>
 8016316:	2322      	movs	r3, #34	@ 0x22
 8016318:	6003      	str	r3, [r0, #0]
 801631a:	e7b6      	b.n	801628a <_strtod_l+0x72>
 801631c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8016320:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016324:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016328:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801632c:	e7e7      	b.n	80162fe <_strtod_l+0xe6>
 801632e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80164ac <_strtod_l+0x294>
 8016332:	e7e4      	b.n	80162fe <_strtod_l+0xe6>
 8016334:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016338:	f04f 3aff 	mov.w	sl, #4294967295
 801633c:	e7df      	b.n	80162fe <_strtod_l+0xe6>
 801633e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016340:	1c5a      	adds	r2, r3, #1
 8016342:	9219      	str	r2, [sp, #100]	@ 0x64
 8016344:	785b      	ldrb	r3, [r3, #1]
 8016346:	2b30      	cmp	r3, #48	@ 0x30
 8016348:	d0f9      	beq.n	801633e <_strtod_l+0x126>
 801634a:	2b00      	cmp	r3, #0
 801634c:	d09d      	beq.n	801628a <_strtod_l+0x72>
 801634e:	2301      	movs	r3, #1
 8016350:	9309      	str	r3, [sp, #36]	@ 0x24
 8016352:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016354:	930c      	str	r3, [sp, #48]	@ 0x30
 8016356:	2300      	movs	r3, #0
 8016358:	9308      	str	r3, [sp, #32]
 801635a:	930a      	str	r3, [sp, #40]	@ 0x28
 801635c:	461f      	mov	r7, r3
 801635e:	220a      	movs	r2, #10
 8016360:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8016362:	7805      	ldrb	r5, [r0, #0]
 8016364:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8016368:	b2d9      	uxtb	r1, r3
 801636a:	2909      	cmp	r1, #9
 801636c:	d928      	bls.n	80163c0 <_strtod_l+0x1a8>
 801636e:	494e      	ldr	r1, [pc, #312]	@ (80164a8 <_strtod_l+0x290>)
 8016370:	2201      	movs	r2, #1
 8016372:	f001 f9ab 	bl	80176cc <strncmp>
 8016376:	2800      	cmp	r0, #0
 8016378:	d032      	beq.n	80163e0 <_strtod_l+0x1c8>
 801637a:	2000      	movs	r0, #0
 801637c:	462a      	mov	r2, r5
 801637e:	4681      	mov	r9, r0
 8016380:	463d      	mov	r5, r7
 8016382:	4603      	mov	r3, r0
 8016384:	2a65      	cmp	r2, #101	@ 0x65
 8016386:	d001      	beq.n	801638c <_strtod_l+0x174>
 8016388:	2a45      	cmp	r2, #69	@ 0x45
 801638a:	d114      	bne.n	80163b6 <_strtod_l+0x19e>
 801638c:	b91d      	cbnz	r5, 8016396 <_strtod_l+0x17e>
 801638e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016390:	4302      	orrs	r2, r0
 8016392:	d095      	beq.n	80162c0 <_strtod_l+0xa8>
 8016394:	2500      	movs	r5, #0
 8016396:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8016398:	1c62      	adds	r2, r4, #1
 801639a:	9219      	str	r2, [sp, #100]	@ 0x64
 801639c:	7862      	ldrb	r2, [r4, #1]
 801639e:	2a2b      	cmp	r2, #43	@ 0x2b
 80163a0:	d077      	beq.n	8016492 <_strtod_l+0x27a>
 80163a2:	2a2d      	cmp	r2, #45	@ 0x2d
 80163a4:	d07b      	beq.n	801649e <_strtod_l+0x286>
 80163a6:	f04f 0c00 	mov.w	ip, #0
 80163aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80163ae:	2909      	cmp	r1, #9
 80163b0:	f240 8082 	bls.w	80164b8 <_strtod_l+0x2a0>
 80163b4:	9419      	str	r4, [sp, #100]	@ 0x64
 80163b6:	f04f 0800 	mov.w	r8, #0
 80163ba:	e0a2      	b.n	8016502 <_strtod_l+0x2ea>
 80163bc:	2300      	movs	r3, #0
 80163be:	e7c7      	b.n	8016350 <_strtod_l+0x138>
 80163c0:	2f08      	cmp	r7, #8
 80163c2:	bfd5      	itete	le
 80163c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80163c6:	9908      	ldrgt	r1, [sp, #32]
 80163c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80163cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80163d0:	f100 0001 	add.w	r0, r0, #1
 80163d4:	bfd4      	ite	le
 80163d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80163d8:	9308      	strgt	r3, [sp, #32]
 80163da:	3701      	adds	r7, #1
 80163dc:	9019      	str	r0, [sp, #100]	@ 0x64
 80163de:	e7bf      	b.n	8016360 <_strtod_l+0x148>
 80163e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80163e2:	1c5a      	adds	r2, r3, #1
 80163e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80163e6:	785a      	ldrb	r2, [r3, #1]
 80163e8:	b37f      	cbz	r7, 801644a <_strtod_l+0x232>
 80163ea:	4681      	mov	r9, r0
 80163ec:	463d      	mov	r5, r7
 80163ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80163f2:	2b09      	cmp	r3, #9
 80163f4:	d912      	bls.n	801641c <_strtod_l+0x204>
 80163f6:	2301      	movs	r3, #1
 80163f8:	e7c4      	b.n	8016384 <_strtod_l+0x16c>
 80163fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80163fc:	1c5a      	adds	r2, r3, #1
 80163fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8016400:	785a      	ldrb	r2, [r3, #1]
 8016402:	3001      	adds	r0, #1
 8016404:	2a30      	cmp	r2, #48	@ 0x30
 8016406:	d0f8      	beq.n	80163fa <_strtod_l+0x1e2>
 8016408:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801640c:	2b08      	cmp	r3, #8
 801640e:	f200 84d3 	bhi.w	8016db8 <_strtod_l+0xba0>
 8016412:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016414:	930c      	str	r3, [sp, #48]	@ 0x30
 8016416:	4681      	mov	r9, r0
 8016418:	2000      	movs	r0, #0
 801641a:	4605      	mov	r5, r0
 801641c:	3a30      	subs	r2, #48	@ 0x30
 801641e:	f100 0301 	add.w	r3, r0, #1
 8016422:	d02a      	beq.n	801647a <_strtod_l+0x262>
 8016424:	4499      	add	r9, r3
 8016426:	eb00 0c05 	add.w	ip, r0, r5
 801642a:	462b      	mov	r3, r5
 801642c:	210a      	movs	r1, #10
 801642e:	4563      	cmp	r3, ip
 8016430:	d10d      	bne.n	801644e <_strtod_l+0x236>
 8016432:	1c69      	adds	r1, r5, #1
 8016434:	4401      	add	r1, r0
 8016436:	4428      	add	r0, r5
 8016438:	2808      	cmp	r0, #8
 801643a:	dc16      	bgt.n	801646a <_strtod_l+0x252>
 801643c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801643e:	230a      	movs	r3, #10
 8016440:	fb03 2300 	mla	r3, r3, r0, r2
 8016444:	930a      	str	r3, [sp, #40]	@ 0x28
 8016446:	2300      	movs	r3, #0
 8016448:	e018      	b.n	801647c <_strtod_l+0x264>
 801644a:	4638      	mov	r0, r7
 801644c:	e7da      	b.n	8016404 <_strtod_l+0x1ec>
 801644e:	2b08      	cmp	r3, #8
 8016450:	f103 0301 	add.w	r3, r3, #1
 8016454:	dc03      	bgt.n	801645e <_strtod_l+0x246>
 8016456:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8016458:	434e      	muls	r6, r1
 801645a:	960a      	str	r6, [sp, #40]	@ 0x28
 801645c:	e7e7      	b.n	801642e <_strtod_l+0x216>
 801645e:	2b10      	cmp	r3, #16
 8016460:	bfde      	ittt	le
 8016462:	9e08      	ldrle	r6, [sp, #32]
 8016464:	434e      	mulle	r6, r1
 8016466:	9608      	strle	r6, [sp, #32]
 8016468:	e7e1      	b.n	801642e <_strtod_l+0x216>
 801646a:	280f      	cmp	r0, #15
 801646c:	dceb      	bgt.n	8016446 <_strtod_l+0x22e>
 801646e:	9808      	ldr	r0, [sp, #32]
 8016470:	230a      	movs	r3, #10
 8016472:	fb03 2300 	mla	r3, r3, r0, r2
 8016476:	9308      	str	r3, [sp, #32]
 8016478:	e7e5      	b.n	8016446 <_strtod_l+0x22e>
 801647a:	4629      	mov	r1, r5
 801647c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801647e:	1c50      	adds	r0, r2, #1
 8016480:	9019      	str	r0, [sp, #100]	@ 0x64
 8016482:	7852      	ldrb	r2, [r2, #1]
 8016484:	4618      	mov	r0, r3
 8016486:	460d      	mov	r5, r1
 8016488:	e7b1      	b.n	80163ee <_strtod_l+0x1d6>
 801648a:	f04f 0900 	mov.w	r9, #0
 801648e:	2301      	movs	r3, #1
 8016490:	e77d      	b.n	801638e <_strtod_l+0x176>
 8016492:	f04f 0c00 	mov.w	ip, #0
 8016496:	1ca2      	adds	r2, r4, #2
 8016498:	9219      	str	r2, [sp, #100]	@ 0x64
 801649a:	78a2      	ldrb	r2, [r4, #2]
 801649c:	e785      	b.n	80163aa <_strtod_l+0x192>
 801649e:	f04f 0c01 	mov.w	ip, #1
 80164a2:	e7f8      	b.n	8016496 <_strtod_l+0x27e>
 80164a4:	08026240 	.word	0x08026240
 80164a8:	08026228 	.word	0x08026228
 80164ac:	7ff00000 	.word	0x7ff00000
 80164b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80164b2:	1c51      	adds	r1, r2, #1
 80164b4:	9119      	str	r1, [sp, #100]	@ 0x64
 80164b6:	7852      	ldrb	r2, [r2, #1]
 80164b8:	2a30      	cmp	r2, #48	@ 0x30
 80164ba:	d0f9      	beq.n	80164b0 <_strtod_l+0x298>
 80164bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80164c0:	2908      	cmp	r1, #8
 80164c2:	f63f af78 	bhi.w	80163b6 <_strtod_l+0x19e>
 80164c6:	3a30      	subs	r2, #48	@ 0x30
 80164c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80164ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80164cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80164ce:	f04f 080a 	mov.w	r8, #10
 80164d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80164d4:	1c56      	adds	r6, r2, #1
 80164d6:	9619      	str	r6, [sp, #100]	@ 0x64
 80164d8:	7852      	ldrb	r2, [r2, #1]
 80164da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80164de:	f1be 0f09 	cmp.w	lr, #9
 80164e2:	d939      	bls.n	8016558 <_strtod_l+0x340>
 80164e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80164e6:	1a76      	subs	r6, r6, r1
 80164e8:	2e08      	cmp	r6, #8
 80164ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80164ee:	dc03      	bgt.n	80164f8 <_strtod_l+0x2e0>
 80164f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80164f2:	4588      	cmp	r8, r1
 80164f4:	bfa8      	it	ge
 80164f6:	4688      	movge	r8, r1
 80164f8:	f1bc 0f00 	cmp.w	ip, #0
 80164fc:	d001      	beq.n	8016502 <_strtod_l+0x2ea>
 80164fe:	f1c8 0800 	rsb	r8, r8, #0
 8016502:	2d00      	cmp	r5, #0
 8016504:	d14e      	bne.n	80165a4 <_strtod_l+0x38c>
 8016506:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016508:	4308      	orrs	r0, r1
 801650a:	f47f aebe 	bne.w	801628a <_strtod_l+0x72>
 801650e:	2b00      	cmp	r3, #0
 8016510:	f47f aed6 	bne.w	80162c0 <_strtod_l+0xa8>
 8016514:	2a69      	cmp	r2, #105	@ 0x69
 8016516:	d028      	beq.n	801656a <_strtod_l+0x352>
 8016518:	dc25      	bgt.n	8016566 <_strtod_l+0x34e>
 801651a:	2a49      	cmp	r2, #73	@ 0x49
 801651c:	d025      	beq.n	801656a <_strtod_l+0x352>
 801651e:	2a4e      	cmp	r2, #78	@ 0x4e
 8016520:	f47f aece 	bne.w	80162c0 <_strtod_l+0xa8>
 8016524:	499b      	ldr	r1, [pc, #620]	@ (8016794 <_strtod_l+0x57c>)
 8016526:	a819      	add	r0, sp, #100	@ 0x64
 8016528:	f001 fbc6 	bl	8017cb8 <__match>
 801652c:	2800      	cmp	r0, #0
 801652e:	f43f aec7 	beq.w	80162c0 <_strtod_l+0xa8>
 8016532:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016534:	781b      	ldrb	r3, [r3, #0]
 8016536:	2b28      	cmp	r3, #40	@ 0x28
 8016538:	d12e      	bne.n	8016598 <_strtod_l+0x380>
 801653a:	4997      	ldr	r1, [pc, #604]	@ (8016798 <_strtod_l+0x580>)
 801653c:	aa1c      	add	r2, sp, #112	@ 0x70
 801653e:	a819      	add	r0, sp, #100	@ 0x64
 8016540:	f001 fbce 	bl	8017ce0 <__hexnan>
 8016544:	2805      	cmp	r0, #5
 8016546:	d127      	bne.n	8016598 <_strtod_l+0x380>
 8016548:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801654a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801654e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016552:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016556:	e698      	b.n	801628a <_strtod_l+0x72>
 8016558:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801655a:	fb08 2101 	mla	r1, r8, r1, r2
 801655e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8016562:	920e      	str	r2, [sp, #56]	@ 0x38
 8016564:	e7b5      	b.n	80164d2 <_strtod_l+0x2ba>
 8016566:	2a6e      	cmp	r2, #110	@ 0x6e
 8016568:	e7da      	b.n	8016520 <_strtod_l+0x308>
 801656a:	498c      	ldr	r1, [pc, #560]	@ (801679c <_strtod_l+0x584>)
 801656c:	a819      	add	r0, sp, #100	@ 0x64
 801656e:	f001 fba3 	bl	8017cb8 <__match>
 8016572:	2800      	cmp	r0, #0
 8016574:	f43f aea4 	beq.w	80162c0 <_strtod_l+0xa8>
 8016578:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801657a:	4989      	ldr	r1, [pc, #548]	@ (80167a0 <_strtod_l+0x588>)
 801657c:	3b01      	subs	r3, #1
 801657e:	a819      	add	r0, sp, #100	@ 0x64
 8016580:	9319      	str	r3, [sp, #100]	@ 0x64
 8016582:	f001 fb99 	bl	8017cb8 <__match>
 8016586:	b910      	cbnz	r0, 801658e <_strtod_l+0x376>
 8016588:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801658a:	3301      	adds	r3, #1
 801658c:	9319      	str	r3, [sp, #100]	@ 0x64
 801658e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80167b0 <_strtod_l+0x598>
 8016592:	f04f 0a00 	mov.w	sl, #0
 8016596:	e678      	b.n	801628a <_strtod_l+0x72>
 8016598:	4882      	ldr	r0, [pc, #520]	@ (80167a4 <_strtod_l+0x58c>)
 801659a:	f001 f8c9 	bl	8017730 <nan>
 801659e:	ec5b ab10 	vmov	sl, fp, d0
 80165a2:	e672      	b.n	801628a <_strtod_l+0x72>
 80165a4:	eba8 0309 	sub.w	r3, r8, r9
 80165a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80165aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80165ac:	2f00      	cmp	r7, #0
 80165ae:	bf08      	it	eq
 80165b0:	462f      	moveq	r7, r5
 80165b2:	2d10      	cmp	r5, #16
 80165b4:	462c      	mov	r4, r5
 80165b6:	bfa8      	it	ge
 80165b8:	2410      	movge	r4, #16
 80165ba:	f7e9 ffcb 	bl	8000554 <__aeabi_ui2d>
 80165be:	2d09      	cmp	r5, #9
 80165c0:	4682      	mov	sl, r0
 80165c2:	468b      	mov	fp, r1
 80165c4:	dc13      	bgt.n	80165ee <_strtod_l+0x3d6>
 80165c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	f43f ae5e 	beq.w	801628a <_strtod_l+0x72>
 80165ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80165d0:	dd78      	ble.n	80166c4 <_strtod_l+0x4ac>
 80165d2:	2b16      	cmp	r3, #22
 80165d4:	dc5f      	bgt.n	8016696 <_strtod_l+0x47e>
 80165d6:	4974      	ldr	r1, [pc, #464]	@ (80167a8 <_strtod_l+0x590>)
 80165d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80165dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165e0:	4652      	mov	r2, sl
 80165e2:	465b      	mov	r3, fp
 80165e4:	f7ea f830 	bl	8000648 <__aeabi_dmul>
 80165e8:	4682      	mov	sl, r0
 80165ea:	468b      	mov	fp, r1
 80165ec:	e64d      	b.n	801628a <_strtod_l+0x72>
 80165ee:	4b6e      	ldr	r3, [pc, #440]	@ (80167a8 <_strtod_l+0x590>)
 80165f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80165f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80165f8:	f7ea f826 	bl	8000648 <__aeabi_dmul>
 80165fc:	4682      	mov	sl, r0
 80165fe:	9808      	ldr	r0, [sp, #32]
 8016600:	468b      	mov	fp, r1
 8016602:	f7e9 ffa7 	bl	8000554 <__aeabi_ui2d>
 8016606:	4602      	mov	r2, r0
 8016608:	460b      	mov	r3, r1
 801660a:	4650      	mov	r0, sl
 801660c:	4659      	mov	r1, fp
 801660e:	f7e9 fe65 	bl	80002dc <__adddf3>
 8016612:	2d0f      	cmp	r5, #15
 8016614:	4682      	mov	sl, r0
 8016616:	468b      	mov	fp, r1
 8016618:	ddd5      	ble.n	80165c6 <_strtod_l+0x3ae>
 801661a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801661c:	1b2c      	subs	r4, r5, r4
 801661e:	441c      	add	r4, r3
 8016620:	2c00      	cmp	r4, #0
 8016622:	f340 8096 	ble.w	8016752 <_strtod_l+0x53a>
 8016626:	f014 030f 	ands.w	r3, r4, #15
 801662a:	d00a      	beq.n	8016642 <_strtod_l+0x42a>
 801662c:	495e      	ldr	r1, [pc, #376]	@ (80167a8 <_strtod_l+0x590>)
 801662e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016632:	4652      	mov	r2, sl
 8016634:	465b      	mov	r3, fp
 8016636:	e9d1 0100 	ldrd	r0, r1, [r1]
 801663a:	f7ea f805 	bl	8000648 <__aeabi_dmul>
 801663e:	4682      	mov	sl, r0
 8016640:	468b      	mov	fp, r1
 8016642:	f034 040f 	bics.w	r4, r4, #15
 8016646:	d073      	beq.n	8016730 <_strtod_l+0x518>
 8016648:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801664c:	dd48      	ble.n	80166e0 <_strtod_l+0x4c8>
 801664e:	2400      	movs	r4, #0
 8016650:	46a0      	mov	r8, r4
 8016652:	940a      	str	r4, [sp, #40]	@ 0x28
 8016654:	46a1      	mov	r9, r4
 8016656:	9a05      	ldr	r2, [sp, #20]
 8016658:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80167b0 <_strtod_l+0x598>
 801665c:	2322      	movs	r3, #34	@ 0x22
 801665e:	6013      	str	r3, [r2, #0]
 8016660:	f04f 0a00 	mov.w	sl, #0
 8016664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016666:	2b00      	cmp	r3, #0
 8016668:	f43f ae0f 	beq.w	801628a <_strtod_l+0x72>
 801666c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801666e:	9805      	ldr	r0, [sp, #20]
 8016670:	f7ff f942 	bl	80158f8 <_Bfree>
 8016674:	9805      	ldr	r0, [sp, #20]
 8016676:	4649      	mov	r1, r9
 8016678:	f7ff f93e 	bl	80158f8 <_Bfree>
 801667c:	9805      	ldr	r0, [sp, #20]
 801667e:	4641      	mov	r1, r8
 8016680:	f7ff f93a 	bl	80158f8 <_Bfree>
 8016684:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016686:	9805      	ldr	r0, [sp, #20]
 8016688:	f7ff f936 	bl	80158f8 <_Bfree>
 801668c:	9805      	ldr	r0, [sp, #20]
 801668e:	4621      	mov	r1, r4
 8016690:	f7ff f932 	bl	80158f8 <_Bfree>
 8016694:	e5f9      	b.n	801628a <_strtod_l+0x72>
 8016696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016698:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801669c:	4293      	cmp	r3, r2
 801669e:	dbbc      	blt.n	801661a <_strtod_l+0x402>
 80166a0:	4c41      	ldr	r4, [pc, #260]	@ (80167a8 <_strtod_l+0x590>)
 80166a2:	f1c5 050f 	rsb	r5, r5, #15
 80166a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80166aa:	4652      	mov	r2, sl
 80166ac:	465b      	mov	r3, fp
 80166ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80166b2:	f7e9 ffc9 	bl	8000648 <__aeabi_dmul>
 80166b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166b8:	1b5d      	subs	r5, r3, r5
 80166ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80166be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80166c2:	e78f      	b.n	80165e4 <_strtod_l+0x3cc>
 80166c4:	3316      	adds	r3, #22
 80166c6:	dba8      	blt.n	801661a <_strtod_l+0x402>
 80166c8:	4b37      	ldr	r3, [pc, #220]	@ (80167a8 <_strtod_l+0x590>)
 80166ca:	eba9 0808 	sub.w	r8, r9, r8
 80166ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80166d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80166d6:	4650      	mov	r0, sl
 80166d8:	4659      	mov	r1, fp
 80166da:	f7ea f8df 	bl	800089c <__aeabi_ddiv>
 80166de:	e783      	b.n	80165e8 <_strtod_l+0x3d0>
 80166e0:	4b32      	ldr	r3, [pc, #200]	@ (80167ac <_strtod_l+0x594>)
 80166e2:	9308      	str	r3, [sp, #32]
 80166e4:	2300      	movs	r3, #0
 80166e6:	1124      	asrs	r4, r4, #4
 80166e8:	4650      	mov	r0, sl
 80166ea:	4659      	mov	r1, fp
 80166ec:	461e      	mov	r6, r3
 80166ee:	2c01      	cmp	r4, #1
 80166f0:	dc21      	bgt.n	8016736 <_strtod_l+0x51e>
 80166f2:	b10b      	cbz	r3, 80166f8 <_strtod_l+0x4e0>
 80166f4:	4682      	mov	sl, r0
 80166f6:	468b      	mov	fp, r1
 80166f8:	492c      	ldr	r1, [pc, #176]	@ (80167ac <_strtod_l+0x594>)
 80166fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80166fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8016702:	4652      	mov	r2, sl
 8016704:	465b      	mov	r3, fp
 8016706:	e9d1 0100 	ldrd	r0, r1, [r1]
 801670a:	f7e9 ff9d 	bl	8000648 <__aeabi_dmul>
 801670e:	4b28      	ldr	r3, [pc, #160]	@ (80167b0 <_strtod_l+0x598>)
 8016710:	460a      	mov	r2, r1
 8016712:	400b      	ands	r3, r1
 8016714:	4927      	ldr	r1, [pc, #156]	@ (80167b4 <_strtod_l+0x59c>)
 8016716:	428b      	cmp	r3, r1
 8016718:	4682      	mov	sl, r0
 801671a:	d898      	bhi.n	801664e <_strtod_l+0x436>
 801671c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8016720:	428b      	cmp	r3, r1
 8016722:	bf86      	itte	hi
 8016724:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80167b8 <_strtod_l+0x5a0>
 8016728:	f04f 3aff 	movhi.w	sl, #4294967295
 801672c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8016730:	2300      	movs	r3, #0
 8016732:	9308      	str	r3, [sp, #32]
 8016734:	e07a      	b.n	801682c <_strtod_l+0x614>
 8016736:	07e2      	lsls	r2, r4, #31
 8016738:	d505      	bpl.n	8016746 <_strtod_l+0x52e>
 801673a:	9b08      	ldr	r3, [sp, #32]
 801673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016740:	f7e9 ff82 	bl	8000648 <__aeabi_dmul>
 8016744:	2301      	movs	r3, #1
 8016746:	9a08      	ldr	r2, [sp, #32]
 8016748:	3208      	adds	r2, #8
 801674a:	3601      	adds	r6, #1
 801674c:	1064      	asrs	r4, r4, #1
 801674e:	9208      	str	r2, [sp, #32]
 8016750:	e7cd      	b.n	80166ee <_strtod_l+0x4d6>
 8016752:	d0ed      	beq.n	8016730 <_strtod_l+0x518>
 8016754:	4264      	negs	r4, r4
 8016756:	f014 020f 	ands.w	r2, r4, #15
 801675a:	d00a      	beq.n	8016772 <_strtod_l+0x55a>
 801675c:	4b12      	ldr	r3, [pc, #72]	@ (80167a8 <_strtod_l+0x590>)
 801675e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016762:	4650      	mov	r0, sl
 8016764:	4659      	mov	r1, fp
 8016766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801676a:	f7ea f897 	bl	800089c <__aeabi_ddiv>
 801676e:	4682      	mov	sl, r0
 8016770:	468b      	mov	fp, r1
 8016772:	1124      	asrs	r4, r4, #4
 8016774:	d0dc      	beq.n	8016730 <_strtod_l+0x518>
 8016776:	2c1f      	cmp	r4, #31
 8016778:	dd20      	ble.n	80167bc <_strtod_l+0x5a4>
 801677a:	2400      	movs	r4, #0
 801677c:	46a0      	mov	r8, r4
 801677e:	940a      	str	r4, [sp, #40]	@ 0x28
 8016780:	46a1      	mov	r9, r4
 8016782:	9a05      	ldr	r2, [sp, #20]
 8016784:	2322      	movs	r3, #34	@ 0x22
 8016786:	f04f 0a00 	mov.w	sl, #0
 801678a:	f04f 0b00 	mov.w	fp, #0
 801678e:	6013      	str	r3, [r2, #0]
 8016790:	e768      	b.n	8016664 <_strtod_l+0x44c>
 8016792:	bf00      	nop
 8016794:	08026019 	.word	0x08026019
 8016798:	0802622c 	.word	0x0802622c
 801679c:	08026011 	.word	0x08026011
 80167a0:	08026048 	.word	0x08026048
 80167a4:	080263d5 	.word	0x080263d5
 80167a8:	08026160 	.word	0x08026160
 80167ac:	08026138 	.word	0x08026138
 80167b0:	7ff00000 	.word	0x7ff00000
 80167b4:	7ca00000 	.word	0x7ca00000
 80167b8:	7fefffff 	.word	0x7fefffff
 80167bc:	f014 0310 	ands.w	r3, r4, #16
 80167c0:	bf18      	it	ne
 80167c2:	236a      	movne	r3, #106	@ 0x6a
 80167c4:	4ea9      	ldr	r6, [pc, #676]	@ (8016a6c <_strtod_l+0x854>)
 80167c6:	9308      	str	r3, [sp, #32]
 80167c8:	4650      	mov	r0, sl
 80167ca:	4659      	mov	r1, fp
 80167cc:	2300      	movs	r3, #0
 80167ce:	07e2      	lsls	r2, r4, #31
 80167d0:	d504      	bpl.n	80167dc <_strtod_l+0x5c4>
 80167d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80167d6:	f7e9 ff37 	bl	8000648 <__aeabi_dmul>
 80167da:	2301      	movs	r3, #1
 80167dc:	1064      	asrs	r4, r4, #1
 80167de:	f106 0608 	add.w	r6, r6, #8
 80167e2:	d1f4      	bne.n	80167ce <_strtod_l+0x5b6>
 80167e4:	b10b      	cbz	r3, 80167ea <_strtod_l+0x5d2>
 80167e6:	4682      	mov	sl, r0
 80167e8:	468b      	mov	fp, r1
 80167ea:	9b08      	ldr	r3, [sp, #32]
 80167ec:	b1b3      	cbz	r3, 801681c <_strtod_l+0x604>
 80167ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80167f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	4659      	mov	r1, fp
 80167fa:	dd0f      	ble.n	801681c <_strtod_l+0x604>
 80167fc:	2b1f      	cmp	r3, #31
 80167fe:	dd55      	ble.n	80168ac <_strtod_l+0x694>
 8016800:	2b34      	cmp	r3, #52	@ 0x34
 8016802:	bfde      	ittt	le
 8016804:	f04f 33ff 	movle.w	r3, #4294967295
 8016808:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801680c:	4093      	lslle	r3, r2
 801680e:	f04f 0a00 	mov.w	sl, #0
 8016812:	bfcc      	ite	gt
 8016814:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8016818:	ea03 0b01 	andle.w	fp, r3, r1
 801681c:	2200      	movs	r2, #0
 801681e:	2300      	movs	r3, #0
 8016820:	4650      	mov	r0, sl
 8016822:	4659      	mov	r1, fp
 8016824:	f7ea f978 	bl	8000b18 <__aeabi_dcmpeq>
 8016828:	2800      	cmp	r0, #0
 801682a:	d1a6      	bne.n	801677a <_strtod_l+0x562>
 801682c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801682e:	9300      	str	r3, [sp, #0]
 8016830:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016832:	9805      	ldr	r0, [sp, #20]
 8016834:	462b      	mov	r3, r5
 8016836:	463a      	mov	r2, r7
 8016838:	f7ff f8c6 	bl	80159c8 <__s2b>
 801683c:	900a      	str	r0, [sp, #40]	@ 0x28
 801683e:	2800      	cmp	r0, #0
 8016840:	f43f af05 	beq.w	801664e <_strtod_l+0x436>
 8016844:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016846:	2a00      	cmp	r2, #0
 8016848:	eba9 0308 	sub.w	r3, r9, r8
 801684c:	bfa8      	it	ge
 801684e:	2300      	movge	r3, #0
 8016850:	9312      	str	r3, [sp, #72]	@ 0x48
 8016852:	2400      	movs	r4, #0
 8016854:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016858:	9316      	str	r3, [sp, #88]	@ 0x58
 801685a:	46a0      	mov	r8, r4
 801685c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801685e:	9805      	ldr	r0, [sp, #20]
 8016860:	6859      	ldr	r1, [r3, #4]
 8016862:	f7ff f809 	bl	8015878 <_Balloc>
 8016866:	4681      	mov	r9, r0
 8016868:	2800      	cmp	r0, #0
 801686a:	f43f aef4 	beq.w	8016656 <_strtod_l+0x43e>
 801686e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016870:	691a      	ldr	r2, [r3, #16]
 8016872:	3202      	adds	r2, #2
 8016874:	f103 010c 	add.w	r1, r3, #12
 8016878:	0092      	lsls	r2, r2, #2
 801687a:	300c      	adds	r0, #12
 801687c:	f000 ff48 	bl	8017710 <memcpy>
 8016880:	ec4b ab10 	vmov	d0, sl, fp
 8016884:	9805      	ldr	r0, [sp, #20]
 8016886:	aa1c      	add	r2, sp, #112	@ 0x70
 8016888:	a91b      	add	r1, sp, #108	@ 0x6c
 801688a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801688e:	f7ff fbd7 	bl	8016040 <__d2b>
 8016892:	901a      	str	r0, [sp, #104]	@ 0x68
 8016894:	2800      	cmp	r0, #0
 8016896:	f43f aede 	beq.w	8016656 <_strtod_l+0x43e>
 801689a:	9805      	ldr	r0, [sp, #20]
 801689c:	2101      	movs	r1, #1
 801689e:	f7ff f929 	bl	8015af4 <__i2b>
 80168a2:	4680      	mov	r8, r0
 80168a4:	b948      	cbnz	r0, 80168ba <_strtod_l+0x6a2>
 80168a6:	f04f 0800 	mov.w	r8, #0
 80168aa:	e6d4      	b.n	8016656 <_strtod_l+0x43e>
 80168ac:	f04f 32ff 	mov.w	r2, #4294967295
 80168b0:	fa02 f303 	lsl.w	r3, r2, r3
 80168b4:	ea03 0a0a 	and.w	sl, r3, sl
 80168b8:	e7b0      	b.n	801681c <_strtod_l+0x604>
 80168ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80168bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80168be:	2d00      	cmp	r5, #0
 80168c0:	bfab      	itete	ge
 80168c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80168c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80168c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80168c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80168ca:	bfac      	ite	ge
 80168cc:	18ef      	addge	r7, r5, r3
 80168ce:	1b5e      	sublt	r6, r3, r5
 80168d0:	9b08      	ldr	r3, [sp, #32]
 80168d2:	1aed      	subs	r5, r5, r3
 80168d4:	4415      	add	r5, r2
 80168d6:	4b66      	ldr	r3, [pc, #408]	@ (8016a70 <_strtod_l+0x858>)
 80168d8:	3d01      	subs	r5, #1
 80168da:	429d      	cmp	r5, r3
 80168dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80168e0:	da50      	bge.n	8016984 <_strtod_l+0x76c>
 80168e2:	1b5b      	subs	r3, r3, r5
 80168e4:	2b1f      	cmp	r3, #31
 80168e6:	eba2 0203 	sub.w	r2, r2, r3
 80168ea:	f04f 0101 	mov.w	r1, #1
 80168ee:	dc3d      	bgt.n	801696c <_strtod_l+0x754>
 80168f0:	fa01 f303 	lsl.w	r3, r1, r3
 80168f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80168f6:	2300      	movs	r3, #0
 80168f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80168fa:	18bd      	adds	r5, r7, r2
 80168fc:	9b08      	ldr	r3, [sp, #32]
 80168fe:	42af      	cmp	r7, r5
 8016900:	4416      	add	r6, r2
 8016902:	441e      	add	r6, r3
 8016904:	463b      	mov	r3, r7
 8016906:	bfa8      	it	ge
 8016908:	462b      	movge	r3, r5
 801690a:	42b3      	cmp	r3, r6
 801690c:	bfa8      	it	ge
 801690e:	4633      	movge	r3, r6
 8016910:	2b00      	cmp	r3, #0
 8016912:	bfc2      	ittt	gt
 8016914:	1aed      	subgt	r5, r5, r3
 8016916:	1af6      	subgt	r6, r6, r3
 8016918:	1aff      	subgt	r7, r7, r3
 801691a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801691c:	2b00      	cmp	r3, #0
 801691e:	dd16      	ble.n	801694e <_strtod_l+0x736>
 8016920:	4641      	mov	r1, r8
 8016922:	9805      	ldr	r0, [sp, #20]
 8016924:	461a      	mov	r2, r3
 8016926:	f7ff f9a5 	bl	8015c74 <__pow5mult>
 801692a:	4680      	mov	r8, r0
 801692c:	2800      	cmp	r0, #0
 801692e:	d0ba      	beq.n	80168a6 <_strtod_l+0x68e>
 8016930:	4601      	mov	r1, r0
 8016932:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016934:	9805      	ldr	r0, [sp, #20]
 8016936:	f7ff f8f3 	bl	8015b20 <__multiply>
 801693a:	900e      	str	r0, [sp, #56]	@ 0x38
 801693c:	2800      	cmp	r0, #0
 801693e:	f43f ae8a 	beq.w	8016656 <_strtod_l+0x43e>
 8016942:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016944:	9805      	ldr	r0, [sp, #20]
 8016946:	f7fe ffd7 	bl	80158f8 <_Bfree>
 801694a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801694c:	931a      	str	r3, [sp, #104]	@ 0x68
 801694e:	2d00      	cmp	r5, #0
 8016950:	dc1d      	bgt.n	801698e <_strtod_l+0x776>
 8016952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016954:	2b00      	cmp	r3, #0
 8016956:	dd23      	ble.n	80169a0 <_strtod_l+0x788>
 8016958:	4649      	mov	r1, r9
 801695a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801695c:	9805      	ldr	r0, [sp, #20]
 801695e:	f7ff f989 	bl	8015c74 <__pow5mult>
 8016962:	4681      	mov	r9, r0
 8016964:	b9e0      	cbnz	r0, 80169a0 <_strtod_l+0x788>
 8016966:	f04f 0900 	mov.w	r9, #0
 801696a:	e674      	b.n	8016656 <_strtod_l+0x43e>
 801696c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8016970:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8016974:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8016978:	35e2      	adds	r5, #226	@ 0xe2
 801697a:	fa01 f305 	lsl.w	r3, r1, r5
 801697e:	9310      	str	r3, [sp, #64]	@ 0x40
 8016980:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016982:	e7ba      	b.n	80168fa <_strtod_l+0x6e2>
 8016984:	2300      	movs	r3, #0
 8016986:	9310      	str	r3, [sp, #64]	@ 0x40
 8016988:	2301      	movs	r3, #1
 801698a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801698c:	e7b5      	b.n	80168fa <_strtod_l+0x6e2>
 801698e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016990:	9805      	ldr	r0, [sp, #20]
 8016992:	462a      	mov	r2, r5
 8016994:	f7ff f9c8 	bl	8015d28 <__lshift>
 8016998:	901a      	str	r0, [sp, #104]	@ 0x68
 801699a:	2800      	cmp	r0, #0
 801699c:	d1d9      	bne.n	8016952 <_strtod_l+0x73a>
 801699e:	e65a      	b.n	8016656 <_strtod_l+0x43e>
 80169a0:	2e00      	cmp	r6, #0
 80169a2:	dd07      	ble.n	80169b4 <_strtod_l+0x79c>
 80169a4:	4649      	mov	r1, r9
 80169a6:	9805      	ldr	r0, [sp, #20]
 80169a8:	4632      	mov	r2, r6
 80169aa:	f7ff f9bd 	bl	8015d28 <__lshift>
 80169ae:	4681      	mov	r9, r0
 80169b0:	2800      	cmp	r0, #0
 80169b2:	d0d8      	beq.n	8016966 <_strtod_l+0x74e>
 80169b4:	2f00      	cmp	r7, #0
 80169b6:	dd08      	ble.n	80169ca <_strtod_l+0x7b2>
 80169b8:	4641      	mov	r1, r8
 80169ba:	9805      	ldr	r0, [sp, #20]
 80169bc:	463a      	mov	r2, r7
 80169be:	f7ff f9b3 	bl	8015d28 <__lshift>
 80169c2:	4680      	mov	r8, r0
 80169c4:	2800      	cmp	r0, #0
 80169c6:	f43f ae46 	beq.w	8016656 <_strtod_l+0x43e>
 80169ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80169cc:	9805      	ldr	r0, [sp, #20]
 80169ce:	464a      	mov	r2, r9
 80169d0:	f7ff fa32 	bl	8015e38 <__mdiff>
 80169d4:	4604      	mov	r4, r0
 80169d6:	2800      	cmp	r0, #0
 80169d8:	f43f ae3d 	beq.w	8016656 <_strtod_l+0x43e>
 80169dc:	68c3      	ldr	r3, [r0, #12]
 80169de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80169e0:	2300      	movs	r3, #0
 80169e2:	60c3      	str	r3, [r0, #12]
 80169e4:	4641      	mov	r1, r8
 80169e6:	f7ff fa0b 	bl	8015e00 <__mcmp>
 80169ea:	2800      	cmp	r0, #0
 80169ec:	da46      	bge.n	8016a7c <_strtod_l+0x864>
 80169ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80169f0:	ea53 030a 	orrs.w	r3, r3, sl
 80169f4:	d16c      	bne.n	8016ad0 <_strtod_l+0x8b8>
 80169f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d168      	bne.n	8016ad0 <_strtod_l+0x8b8>
 80169fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016a02:	0d1b      	lsrs	r3, r3, #20
 8016a04:	051b      	lsls	r3, r3, #20
 8016a06:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016a0a:	d961      	bls.n	8016ad0 <_strtod_l+0x8b8>
 8016a0c:	6963      	ldr	r3, [r4, #20]
 8016a0e:	b913      	cbnz	r3, 8016a16 <_strtod_l+0x7fe>
 8016a10:	6923      	ldr	r3, [r4, #16]
 8016a12:	2b01      	cmp	r3, #1
 8016a14:	dd5c      	ble.n	8016ad0 <_strtod_l+0x8b8>
 8016a16:	4621      	mov	r1, r4
 8016a18:	2201      	movs	r2, #1
 8016a1a:	9805      	ldr	r0, [sp, #20]
 8016a1c:	f7ff f984 	bl	8015d28 <__lshift>
 8016a20:	4641      	mov	r1, r8
 8016a22:	4604      	mov	r4, r0
 8016a24:	f7ff f9ec 	bl	8015e00 <__mcmp>
 8016a28:	2800      	cmp	r0, #0
 8016a2a:	dd51      	ble.n	8016ad0 <_strtod_l+0x8b8>
 8016a2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016a30:	9a08      	ldr	r2, [sp, #32]
 8016a32:	0d1b      	lsrs	r3, r3, #20
 8016a34:	051b      	lsls	r3, r3, #20
 8016a36:	2a00      	cmp	r2, #0
 8016a38:	d06b      	beq.n	8016b12 <_strtod_l+0x8fa>
 8016a3a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016a3e:	d868      	bhi.n	8016b12 <_strtod_l+0x8fa>
 8016a40:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016a44:	f67f ae9d 	bls.w	8016782 <_strtod_l+0x56a>
 8016a48:	4b0a      	ldr	r3, [pc, #40]	@ (8016a74 <_strtod_l+0x85c>)
 8016a4a:	4650      	mov	r0, sl
 8016a4c:	4659      	mov	r1, fp
 8016a4e:	2200      	movs	r2, #0
 8016a50:	f7e9 fdfa 	bl	8000648 <__aeabi_dmul>
 8016a54:	4b08      	ldr	r3, [pc, #32]	@ (8016a78 <_strtod_l+0x860>)
 8016a56:	400b      	ands	r3, r1
 8016a58:	4682      	mov	sl, r0
 8016a5a:	468b      	mov	fp, r1
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	f47f ae05 	bne.w	801666c <_strtod_l+0x454>
 8016a62:	9a05      	ldr	r2, [sp, #20]
 8016a64:	2322      	movs	r3, #34	@ 0x22
 8016a66:	6013      	str	r3, [r2, #0]
 8016a68:	e600      	b.n	801666c <_strtod_l+0x454>
 8016a6a:	bf00      	nop
 8016a6c:	08026258 	.word	0x08026258
 8016a70:	fffffc02 	.word	0xfffffc02
 8016a74:	39500000 	.word	0x39500000
 8016a78:	7ff00000 	.word	0x7ff00000
 8016a7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8016a80:	d165      	bne.n	8016b4e <_strtod_l+0x936>
 8016a82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016a84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016a88:	b35a      	cbz	r2, 8016ae2 <_strtod_l+0x8ca>
 8016a8a:	4a9f      	ldr	r2, [pc, #636]	@ (8016d08 <_strtod_l+0xaf0>)
 8016a8c:	4293      	cmp	r3, r2
 8016a8e:	d12b      	bne.n	8016ae8 <_strtod_l+0x8d0>
 8016a90:	9b08      	ldr	r3, [sp, #32]
 8016a92:	4651      	mov	r1, sl
 8016a94:	b303      	cbz	r3, 8016ad8 <_strtod_l+0x8c0>
 8016a96:	4b9d      	ldr	r3, [pc, #628]	@ (8016d0c <_strtod_l+0xaf4>)
 8016a98:	465a      	mov	r2, fp
 8016a9a:	4013      	ands	r3, r2
 8016a9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8016aa4:	d81b      	bhi.n	8016ade <_strtod_l+0x8c6>
 8016aa6:	0d1b      	lsrs	r3, r3, #20
 8016aa8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016aac:	fa02 f303 	lsl.w	r3, r2, r3
 8016ab0:	4299      	cmp	r1, r3
 8016ab2:	d119      	bne.n	8016ae8 <_strtod_l+0x8d0>
 8016ab4:	4b96      	ldr	r3, [pc, #600]	@ (8016d10 <_strtod_l+0xaf8>)
 8016ab6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016ab8:	429a      	cmp	r2, r3
 8016aba:	d102      	bne.n	8016ac2 <_strtod_l+0x8aa>
 8016abc:	3101      	adds	r1, #1
 8016abe:	f43f adca 	beq.w	8016656 <_strtod_l+0x43e>
 8016ac2:	4b92      	ldr	r3, [pc, #584]	@ (8016d0c <_strtod_l+0xaf4>)
 8016ac4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016ac6:	401a      	ands	r2, r3
 8016ac8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8016acc:	f04f 0a00 	mov.w	sl, #0
 8016ad0:	9b08      	ldr	r3, [sp, #32]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d1b8      	bne.n	8016a48 <_strtod_l+0x830>
 8016ad6:	e5c9      	b.n	801666c <_strtod_l+0x454>
 8016ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8016adc:	e7e8      	b.n	8016ab0 <_strtod_l+0x898>
 8016ade:	4613      	mov	r3, r2
 8016ae0:	e7e6      	b.n	8016ab0 <_strtod_l+0x898>
 8016ae2:	ea53 030a 	orrs.w	r3, r3, sl
 8016ae6:	d0a1      	beq.n	8016a2c <_strtod_l+0x814>
 8016ae8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016aea:	b1db      	cbz	r3, 8016b24 <_strtod_l+0x90c>
 8016aec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016aee:	4213      	tst	r3, r2
 8016af0:	d0ee      	beq.n	8016ad0 <_strtod_l+0x8b8>
 8016af2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016af4:	9a08      	ldr	r2, [sp, #32]
 8016af6:	4650      	mov	r0, sl
 8016af8:	4659      	mov	r1, fp
 8016afa:	b1bb      	cbz	r3, 8016b2c <_strtod_l+0x914>
 8016afc:	f7ff fb6e 	bl	80161dc <sulp>
 8016b00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016b04:	ec53 2b10 	vmov	r2, r3, d0
 8016b08:	f7e9 fbe8 	bl	80002dc <__adddf3>
 8016b0c:	4682      	mov	sl, r0
 8016b0e:	468b      	mov	fp, r1
 8016b10:	e7de      	b.n	8016ad0 <_strtod_l+0x8b8>
 8016b12:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016b16:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016b1a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016b1e:	f04f 3aff 	mov.w	sl, #4294967295
 8016b22:	e7d5      	b.n	8016ad0 <_strtod_l+0x8b8>
 8016b24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016b26:	ea13 0f0a 	tst.w	r3, sl
 8016b2a:	e7e1      	b.n	8016af0 <_strtod_l+0x8d8>
 8016b2c:	f7ff fb56 	bl	80161dc <sulp>
 8016b30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016b34:	ec53 2b10 	vmov	r2, r3, d0
 8016b38:	f7e9 fbce 	bl	80002d8 <__aeabi_dsub>
 8016b3c:	2200      	movs	r2, #0
 8016b3e:	2300      	movs	r3, #0
 8016b40:	4682      	mov	sl, r0
 8016b42:	468b      	mov	fp, r1
 8016b44:	f7e9 ffe8 	bl	8000b18 <__aeabi_dcmpeq>
 8016b48:	2800      	cmp	r0, #0
 8016b4a:	d0c1      	beq.n	8016ad0 <_strtod_l+0x8b8>
 8016b4c:	e619      	b.n	8016782 <_strtod_l+0x56a>
 8016b4e:	4641      	mov	r1, r8
 8016b50:	4620      	mov	r0, r4
 8016b52:	f7ff facd 	bl	80160f0 <__ratio>
 8016b56:	ec57 6b10 	vmov	r6, r7, d0
 8016b5a:	2200      	movs	r2, #0
 8016b5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016b60:	4630      	mov	r0, r6
 8016b62:	4639      	mov	r1, r7
 8016b64:	f7e9 ffec 	bl	8000b40 <__aeabi_dcmple>
 8016b68:	2800      	cmp	r0, #0
 8016b6a:	d06f      	beq.n	8016c4c <_strtod_l+0xa34>
 8016b6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d17a      	bne.n	8016c68 <_strtod_l+0xa50>
 8016b72:	f1ba 0f00 	cmp.w	sl, #0
 8016b76:	d158      	bne.n	8016c2a <_strtod_l+0xa12>
 8016b78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016b7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d15a      	bne.n	8016c38 <_strtod_l+0xa20>
 8016b82:	4b64      	ldr	r3, [pc, #400]	@ (8016d14 <_strtod_l+0xafc>)
 8016b84:	2200      	movs	r2, #0
 8016b86:	4630      	mov	r0, r6
 8016b88:	4639      	mov	r1, r7
 8016b8a:	f7e9 ffcf 	bl	8000b2c <__aeabi_dcmplt>
 8016b8e:	2800      	cmp	r0, #0
 8016b90:	d159      	bne.n	8016c46 <_strtod_l+0xa2e>
 8016b92:	4630      	mov	r0, r6
 8016b94:	4639      	mov	r1, r7
 8016b96:	4b60      	ldr	r3, [pc, #384]	@ (8016d18 <_strtod_l+0xb00>)
 8016b98:	2200      	movs	r2, #0
 8016b9a:	f7e9 fd55 	bl	8000648 <__aeabi_dmul>
 8016b9e:	4606      	mov	r6, r0
 8016ba0:	460f      	mov	r7, r1
 8016ba2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8016ba6:	9606      	str	r6, [sp, #24]
 8016ba8:	9307      	str	r3, [sp, #28]
 8016baa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016bae:	4d57      	ldr	r5, [pc, #348]	@ (8016d0c <_strtod_l+0xaf4>)
 8016bb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016bb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016bb6:	401d      	ands	r5, r3
 8016bb8:	4b58      	ldr	r3, [pc, #352]	@ (8016d1c <_strtod_l+0xb04>)
 8016bba:	429d      	cmp	r5, r3
 8016bbc:	f040 80b2 	bne.w	8016d24 <_strtod_l+0xb0c>
 8016bc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016bc2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8016bc6:	ec4b ab10 	vmov	d0, sl, fp
 8016bca:	f7ff f9c9 	bl	8015f60 <__ulp>
 8016bce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016bd2:	ec51 0b10 	vmov	r0, r1, d0
 8016bd6:	f7e9 fd37 	bl	8000648 <__aeabi_dmul>
 8016bda:	4652      	mov	r2, sl
 8016bdc:	465b      	mov	r3, fp
 8016bde:	f7e9 fb7d 	bl	80002dc <__adddf3>
 8016be2:	460b      	mov	r3, r1
 8016be4:	4949      	ldr	r1, [pc, #292]	@ (8016d0c <_strtod_l+0xaf4>)
 8016be6:	4a4e      	ldr	r2, [pc, #312]	@ (8016d20 <_strtod_l+0xb08>)
 8016be8:	4019      	ands	r1, r3
 8016bea:	4291      	cmp	r1, r2
 8016bec:	4682      	mov	sl, r0
 8016bee:	d942      	bls.n	8016c76 <_strtod_l+0xa5e>
 8016bf0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016bf2:	4b47      	ldr	r3, [pc, #284]	@ (8016d10 <_strtod_l+0xaf8>)
 8016bf4:	429a      	cmp	r2, r3
 8016bf6:	d103      	bne.n	8016c00 <_strtod_l+0x9e8>
 8016bf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016bfa:	3301      	adds	r3, #1
 8016bfc:	f43f ad2b 	beq.w	8016656 <_strtod_l+0x43e>
 8016c00:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8016d10 <_strtod_l+0xaf8>
 8016c04:	f04f 3aff 	mov.w	sl, #4294967295
 8016c08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016c0a:	9805      	ldr	r0, [sp, #20]
 8016c0c:	f7fe fe74 	bl	80158f8 <_Bfree>
 8016c10:	9805      	ldr	r0, [sp, #20]
 8016c12:	4649      	mov	r1, r9
 8016c14:	f7fe fe70 	bl	80158f8 <_Bfree>
 8016c18:	9805      	ldr	r0, [sp, #20]
 8016c1a:	4641      	mov	r1, r8
 8016c1c:	f7fe fe6c 	bl	80158f8 <_Bfree>
 8016c20:	9805      	ldr	r0, [sp, #20]
 8016c22:	4621      	mov	r1, r4
 8016c24:	f7fe fe68 	bl	80158f8 <_Bfree>
 8016c28:	e618      	b.n	801685c <_strtod_l+0x644>
 8016c2a:	f1ba 0f01 	cmp.w	sl, #1
 8016c2e:	d103      	bne.n	8016c38 <_strtod_l+0xa20>
 8016c30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	f43f ada5 	beq.w	8016782 <_strtod_l+0x56a>
 8016c38:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8016ce8 <_strtod_l+0xad0>
 8016c3c:	4f35      	ldr	r7, [pc, #212]	@ (8016d14 <_strtod_l+0xafc>)
 8016c3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016c42:	2600      	movs	r6, #0
 8016c44:	e7b1      	b.n	8016baa <_strtod_l+0x992>
 8016c46:	4f34      	ldr	r7, [pc, #208]	@ (8016d18 <_strtod_l+0xb00>)
 8016c48:	2600      	movs	r6, #0
 8016c4a:	e7aa      	b.n	8016ba2 <_strtod_l+0x98a>
 8016c4c:	4b32      	ldr	r3, [pc, #200]	@ (8016d18 <_strtod_l+0xb00>)
 8016c4e:	4630      	mov	r0, r6
 8016c50:	4639      	mov	r1, r7
 8016c52:	2200      	movs	r2, #0
 8016c54:	f7e9 fcf8 	bl	8000648 <__aeabi_dmul>
 8016c58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016c5a:	4606      	mov	r6, r0
 8016c5c:	460f      	mov	r7, r1
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d09f      	beq.n	8016ba2 <_strtod_l+0x98a>
 8016c62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8016c66:	e7a0      	b.n	8016baa <_strtod_l+0x992>
 8016c68:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8016cf0 <_strtod_l+0xad8>
 8016c6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016c70:	ec57 6b17 	vmov	r6, r7, d7
 8016c74:	e799      	b.n	8016baa <_strtod_l+0x992>
 8016c76:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8016c7a:	9b08      	ldr	r3, [sp, #32]
 8016c7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d1c1      	bne.n	8016c08 <_strtod_l+0x9f0>
 8016c84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016c88:	0d1b      	lsrs	r3, r3, #20
 8016c8a:	051b      	lsls	r3, r3, #20
 8016c8c:	429d      	cmp	r5, r3
 8016c8e:	d1bb      	bne.n	8016c08 <_strtod_l+0x9f0>
 8016c90:	4630      	mov	r0, r6
 8016c92:	4639      	mov	r1, r7
 8016c94:	f7ea f838 	bl	8000d08 <__aeabi_d2lz>
 8016c98:	f7e9 fca8 	bl	80005ec <__aeabi_l2d>
 8016c9c:	4602      	mov	r2, r0
 8016c9e:	460b      	mov	r3, r1
 8016ca0:	4630      	mov	r0, r6
 8016ca2:	4639      	mov	r1, r7
 8016ca4:	f7e9 fb18 	bl	80002d8 <__aeabi_dsub>
 8016ca8:	460b      	mov	r3, r1
 8016caa:	4602      	mov	r2, r0
 8016cac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8016cb0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8016cb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016cb6:	ea46 060a 	orr.w	r6, r6, sl
 8016cba:	431e      	orrs	r6, r3
 8016cbc:	d06f      	beq.n	8016d9e <_strtod_l+0xb86>
 8016cbe:	a30e      	add	r3, pc, #56	@ (adr r3, 8016cf8 <_strtod_l+0xae0>)
 8016cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cc4:	f7e9 ff32 	bl	8000b2c <__aeabi_dcmplt>
 8016cc8:	2800      	cmp	r0, #0
 8016cca:	f47f accf 	bne.w	801666c <_strtod_l+0x454>
 8016cce:	a30c      	add	r3, pc, #48	@ (adr r3, 8016d00 <_strtod_l+0xae8>)
 8016cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016cd8:	f7e9 ff46 	bl	8000b68 <__aeabi_dcmpgt>
 8016cdc:	2800      	cmp	r0, #0
 8016cde:	d093      	beq.n	8016c08 <_strtod_l+0x9f0>
 8016ce0:	e4c4      	b.n	801666c <_strtod_l+0x454>
 8016ce2:	bf00      	nop
 8016ce4:	f3af 8000 	nop.w
 8016ce8:	00000000 	.word	0x00000000
 8016cec:	bff00000 	.word	0xbff00000
 8016cf0:	00000000 	.word	0x00000000
 8016cf4:	3ff00000 	.word	0x3ff00000
 8016cf8:	94a03595 	.word	0x94a03595
 8016cfc:	3fdfffff 	.word	0x3fdfffff
 8016d00:	35afe535 	.word	0x35afe535
 8016d04:	3fe00000 	.word	0x3fe00000
 8016d08:	000fffff 	.word	0x000fffff
 8016d0c:	7ff00000 	.word	0x7ff00000
 8016d10:	7fefffff 	.word	0x7fefffff
 8016d14:	3ff00000 	.word	0x3ff00000
 8016d18:	3fe00000 	.word	0x3fe00000
 8016d1c:	7fe00000 	.word	0x7fe00000
 8016d20:	7c9fffff 	.word	0x7c9fffff
 8016d24:	9b08      	ldr	r3, [sp, #32]
 8016d26:	b323      	cbz	r3, 8016d72 <_strtod_l+0xb5a>
 8016d28:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8016d2c:	d821      	bhi.n	8016d72 <_strtod_l+0xb5a>
 8016d2e:	a328      	add	r3, pc, #160	@ (adr r3, 8016dd0 <_strtod_l+0xbb8>)
 8016d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d34:	4630      	mov	r0, r6
 8016d36:	4639      	mov	r1, r7
 8016d38:	f7e9 ff02 	bl	8000b40 <__aeabi_dcmple>
 8016d3c:	b1a0      	cbz	r0, 8016d68 <_strtod_l+0xb50>
 8016d3e:	4639      	mov	r1, r7
 8016d40:	4630      	mov	r0, r6
 8016d42:	f7e9 ff59 	bl	8000bf8 <__aeabi_d2uiz>
 8016d46:	2801      	cmp	r0, #1
 8016d48:	bf38      	it	cc
 8016d4a:	2001      	movcc	r0, #1
 8016d4c:	f7e9 fc02 	bl	8000554 <__aeabi_ui2d>
 8016d50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016d52:	4606      	mov	r6, r0
 8016d54:	460f      	mov	r7, r1
 8016d56:	b9fb      	cbnz	r3, 8016d98 <_strtod_l+0xb80>
 8016d58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016d5c:	9014      	str	r0, [sp, #80]	@ 0x50
 8016d5e:	9315      	str	r3, [sp, #84]	@ 0x54
 8016d60:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8016d64:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016d68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016d6a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8016d6e:	1b5b      	subs	r3, r3, r5
 8016d70:	9311      	str	r3, [sp, #68]	@ 0x44
 8016d72:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8016d76:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8016d7a:	f7ff f8f1 	bl	8015f60 <__ulp>
 8016d7e:	4650      	mov	r0, sl
 8016d80:	ec53 2b10 	vmov	r2, r3, d0
 8016d84:	4659      	mov	r1, fp
 8016d86:	f7e9 fc5f 	bl	8000648 <__aeabi_dmul>
 8016d8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8016d8e:	f7e9 faa5 	bl	80002dc <__adddf3>
 8016d92:	4682      	mov	sl, r0
 8016d94:	468b      	mov	fp, r1
 8016d96:	e770      	b.n	8016c7a <_strtod_l+0xa62>
 8016d98:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8016d9c:	e7e0      	b.n	8016d60 <_strtod_l+0xb48>
 8016d9e:	a30e      	add	r3, pc, #56	@ (adr r3, 8016dd8 <_strtod_l+0xbc0>)
 8016da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016da4:	f7e9 fec2 	bl	8000b2c <__aeabi_dcmplt>
 8016da8:	e798      	b.n	8016cdc <_strtod_l+0xac4>
 8016daa:	2300      	movs	r3, #0
 8016dac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016dae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8016db0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016db2:	6013      	str	r3, [r2, #0]
 8016db4:	f7ff ba6d 	b.w	8016292 <_strtod_l+0x7a>
 8016db8:	2a65      	cmp	r2, #101	@ 0x65
 8016dba:	f43f ab66 	beq.w	801648a <_strtod_l+0x272>
 8016dbe:	2a45      	cmp	r2, #69	@ 0x45
 8016dc0:	f43f ab63 	beq.w	801648a <_strtod_l+0x272>
 8016dc4:	2301      	movs	r3, #1
 8016dc6:	f7ff bb9e 	b.w	8016506 <_strtod_l+0x2ee>
 8016dca:	bf00      	nop
 8016dcc:	f3af 8000 	nop.w
 8016dd0:	ffc00000 	.word	0xffc00000
 8016dd4:	41dfffff 	.word	0x41dfffff
 8016dd8:	94a03595 	.word	0x94a03595
 8016ddc:	3fcfffff 	.word	0x3fcfffff

08016de0 <_strtod_r>:
 8016de0:	4b01      	ldr	r3, [pc, #4]	@ (8016de8 <_strtod_r+0x8>)
 8016de2:	f7ff ba19 	b.w	8016218 <_strtod_l>
 8016de6:	bf00      	nop
 8016de8:	20000224 	.word	0x20000224

08016dec <_strtol_l.constprop.0>:
 8016dec:	2b24      	cmp	r3, #36	@ 0x24
 8016dee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016df2:	4686      	mov	lr, r0
 8016df4:	4690      	mov	r8, r2
 8016df6:	d801      	bhi.n	8016dfc <_strtol_l.constprop.0+0x10>
 8016df8:	2b01      	cmp	r3, #1
 8016dfa:	d106      	bne.n	8016e0a <_strtol_l.constprop.0+0x1e>
 8016dfc:	f7fd fdbc 	bl	8014978 <__errno>
 8016e00:	2316      	movs	r3, #22
 8016e02:	6003      	str	r3, [r0, #0]
 8016e04:	2000      	movs	r0, #0
 8016e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e0a:	4834      	ldr	r0, [pc, #208]	@ (8016edc <_strtol_l.constprop.0+0xf0>)
 8016e0c:	460d      	mov	r5, r1
 8016e0e:	462a      	mov	r2, r5
 8016e10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016e14:	5d06      	ldrb	r6, [r0, r4]
 8016e16:	f016 0608 	ands.w	r6, r6, #8
 8016e1a:	d1f8      	bne.n	8016e0e <_strtol_l.constprop.0+0x22>
 8016e1c:	2c2d      	cmp	r4, #45	@ 0x2d
 8016e1e:	d12d      	bne.n	8016e7c <_strtol_l.constprop.0+0x90>
 8016e20:	782c      	ldrb	r4, [r5, #0]
 8016e22:	2601      	movs	r6, #1
 8016e24:	1c95      	adds	r5, r2, #2
 8016e26:	f033 0210 	bics.w	r2, r3, #16
 8016e2a:	d109      	bne.n	8016e40 <_strtol_l.constprop.0+0x54>
 8016e2c:	2c30      	cmp	r4, #48	@ 0x30
 8016e2e:	d12a      	bne.n	8016e86 <_strtol_l.constprop.0+0x9a>
 8016e30:	782a      	ldrb	r2, [r5, #0]
 8016e32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016e36:	2a58      	cmp	r2, #88	@ 0x58
 8016e38:	d125      	bne.n	8016e86 <_strtol_l.constprop.0+0x9a>
 8016e3a:	786c      	ldrb	r4, [r5, #1]
 8016e3c:	2310      	movs	r3, #16
 8016e3e:	3502      	adds	r5, #2
 8016e40:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016e44:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016e48:	2200      	movs	r2, #0
 8016e4a:	fbbc f9f3 	udiv	r9, ip, r3
 8016e4e:	4610      	mov	r0, r2
 8016e50:	fb03 ca19 	mls	sl, r3, r9, ip
 8016e54:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016e58:	2f09      	cmp	r7, #9
 8016e5a:	d81b      	bhi.n	8016e94 <_strtol_l.constprop.0+0xa8>
 8016e5c:	463c      	mov	r4, r7
 8016e5e:	42a3      	cmp	r3, r4
 8016e60:	dd27      	ble.n	8016eb2 <_strtol_l.constprop.0+0xc6>
 8016e62:	1c57      	adds	r7, r2, #1
 8016e64:	d007      	beq.n	8016e76 <_strtol_l.constprop.0+0x8a>
 8016e66:	4581      	cmp	r9, r0
 8016e68:	d320      	bcc.n	8016eac <_strtol_l.constprop.0+0xc0>
 8016e6a:	d101      	bne.n	8016e70 <_strtol_l.constprop.0+0x84>
 8016e6c:	45a2      	cmp	sl, r4
 8016e6e:	db1d      	blt.n	8016eac <_strtol_l.constprop.0+0xc0>
 8016e70:	fb00 4003 	mla	r0, r0, r3, r4
 8016e74:	2201      	movs	r2, #1
 8016e76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016e7a:	e7eb      	b.n	8016e54 <_strtol_l.constprop.0+0x68>
 8016e7c:	2c2b      	cmp	r4, #43	@ 0x2b
 8016e7e:	bf04      	itt	eq
 8016e80:	782c      	ldrbeq	r4, [r5, #0]
 8016e82:	1c95      	addeq	r5, r2, #2
 8016e84:	e7cf      	b.n	8016e26 <_strtol_l.constprop.0+0x3a>
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d1da      	bne.n	8016e40 <_strtol_l.constprop.0+0x54>
 8016e8a:	2c30      	cmp	r4, #48	@ 0x30
 8016e8c:	bf0c      	ite	eq
 8016e8e:	2308      	moveq	r3, #8
 8016e90:	230a      	movne	r3, #10
 8016e92:	e7d5      	b.n	8016e40 <_strtol_l.constprop.0+0x54>
 8016e94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016e98:	2f19      	cmp	r7, #25
 8016e9a:	d801      	bhi.n	8016ea0 <_strtol_l.constprop.0+0xb4>
 8016e9c:	3c37      	subs	r4, #55	@ 0x37
 8016e9e:	e7de      	b.n	8016e5e <_strtol_l.constprop.0+0x72>
 8016ea0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016ea4:	2f19      	cmp	r7, #25
 8016ea6:	d804      	bhi.n	8016eb2 <_strtol_l.constprop.0+0xc6>
 8016ea8:	3c57      	subs	r4, #87	@ 0x57
 8016eaa:	e7d8      	b.n	8016e5e <_strtol_l.constprop.0+0x72>
 8016eac:	f04f 32ff 	mov.w	r2, #4294967295
 8016eb0:	e7e1      	b.n	8016e76 <_strtol_l.constprop.0+0x8a>
 8016eb2:	1c53      	adds	r3, r2, #1
 8016eb4:	d108      	bne.n	8016ec8 <_strtol_l.constprop.0+0xdc>
 8016eb6:	2322      	movs	r3, #34	@ 0x22
 8016eb8:	f8ce 3000 	str.w	r3, [lr]
 8016ebc:	4660      	mov	r0, ip
 8016ebe:	f1b8 0f00 	cmp.w	r8, #0
 8016ec2:	d0a0      	beq.n	8016e06 <_strtol_l.constprop.0+0x1a>
 8016ec4:	1e69      	subs	r1, r5, #1
 8016ec6:	e006      	b.n	8016ed6 <_strtol_l.constprop.0+0xea>
 8016ec8:	b106      	cbz	r6, 8016ecc <_strtol_l.constprop.0+0xe0>
 8016eca:	4240      	negs	r0, r0
 8016ecc:	f1b8 0f00 	cmp.w	r8, #0
 8016ed0:	d099      	beq.n	8016e06 <_strtol_l.constprop.0+0x1a>
 8016ed2:	2a00      	cmp	r2, #0
 8016ed4:	d1f6      	bne.n	8016ec4 <_strtol_l.constprop.0+0xd8>
 8016ed6:	f8c8 1000 	str.w	r1, [r8]
 8016eda:	e794      	b.n	8016e06 <_strtol_l.constprop.0+0x1a>
 8016edc:	08026281 	.word	0x08026281

08016ee0 <_strtol_r>:
 8016ee0:	f7ff bf84 	b.w	8016dec <_strtol_l.constprop.0>

08016ee4 <__ssputs_r>:
 8016ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ee8:	688e      	ldr	r6, [r1, #8]
 8016eea:	461f      	mov	r7, r3
 8016eec:	42be      	cmp	r6, r7
 8016eee:	680b      	ldr	r3, [r1, #0]
 8016ef0:	4682      	mov	sl, r0
 8016ef2:	460c      	mov	r4, r1
 8016ef4:	4690      	mov	r8, r2
 8016ef6:	d82d      	bhi.n	8016f54 <__ssputs_r+0x70>
 8016ef8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016efc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016f00:	d026      	beq.n	8016f50 <__ssputs_r+0x6c>
 8016f02:	6965      	ldr	r5, [r4, #20]
 8016f04:	6909      	ldr	r1, [r1, #16]
 8016f06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016f0a:	eba3 0901 	sub.w	r9, r3, r1
 8016f0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016f12:	1c7b      	adds	r3, r7, #1
 8016f14:	444b      	add	r3, r9
 8016f16:	106d      	asrs	r5, r5, #1
 8016f18:	429d      	cmp	r5, r3
 8016f1a:	bf38      	it	cc
 8016f1c:	461d      	movcc	r5, r3
 8016f1e:	0553      	lsls	r3, r2, #21
 8016f20:	d527      	bpl.n	8016f72 <__ssputs_r+0x8e>
 8016f22:	4629      	mov	r1, r5
 8016f24:	f7fe fc1c 	bl	8015760 <_malloc_r>
 8016f28:	4606      	mov	r6, r0
 8016f2a:	b360      	cbz	r0, 8016f86 <__ssputs_r+0xa2>
 8016f2c:	6921      	ldr	r1, [r4, #16]
 8016f2e:	464a      	mov	r2, r9
 8016f30:	f000 fbee 	bl	8017710 <memcpy>
 8016f34:	89a3      	ldrh	r3, [r4, #12]
 8016f36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016f3e:	81a3      	strh	r3, [r4, #12]
 8016f40:	6126      	str	r6, [r4, #16]
 8016f42:	6165      	str	r5, [r4, #20]
 8016f44:	444e      	add	r6, r9
 8016f46:	eba5 0509 	sub.w	r5, r5, r9
 8016f4a:	6026      	str	r6, [r4, #0]
 8016f4c:	60a5      	str	r5, [r4, #8]
 8016f4e:	463e      	mov	r6, r7
 8016f50:	42be      	cmp	r6, r7
 8016f52:	d900      	bls.n	8016f56 <__ssputs_r+0x72>
 8016f54:	463e      	mov	r6, r7
 8016f56:	6820      	ldr	r0, [r4, #0]
 8016f58:	4632      	mov	r2, r6
 8016f5a:	4641      	mov	r1, r8
 8016f5c:	f000 fb9c 	bl	8017698 <memmove>
 8016f60:	68a3      	ldr	r3, [r4, #8]
 8016f62:	1b9b      	subs	r3, r3, r6
 8016f64:	60a3      	str	r3, [r4, #8]
 8016f66:	6823      	ldr	r3, [r4, #0]
 8016f68:	4433      	add	r3, r6
 8016f6a:	6023      	str	r3, [r4, #0]
 8016f6c:	2000      	movs	r0, #0
 8016f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f72:	462a      	mov	r2, r5
 8016f74:	f000 ff61 	bl	8017e3a <_realloc_r>
 8016f78:	4606      	mov	r6, r0
 8016f7a:	2800      	cmp	r0, #0
 8016f7c:	d1e0      	bne.n	8016f40 <__ssputs_r+0x5c>
 8016f7e:	6921      	ldr	r1, [r4, #16]
 8016f80:	4650      	mov	r0, sl
 8016f82:	f7fe fb79 	bl	8015678 <_free_r>
 8016f86:	230c      	movs	r3, #12
 8016f88:	f8ca 3000 	str.w	r3, [sl]
 8016f8c:	89a3      	ldrh	r3, [r4, #12]
 8016f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016f92:	81a3      	strh	r3, [r4, #12]
 8016f94:	f04f 30ff 	mov.w	r0, #4294967295
 8016f98:	e7e9      	b.n	8016f6e <__ssputs_r+0x8a>
	...

08016f9c <_svfiprintf_r>:
 8016f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fa0:	4698      	mov	r8, r3
 8016fa2:	898b      	ldrh	r3, [r1, #12]
 8016fa4:	061b      	lsls	r3, r3, #24
 8016fa6:	b09d      	sub	sp, #116	@ 0x74
 8016fa8:	4607      	mov	r7, r0
 8016faa:	460d      	mov	r5, r1
 8016fac:	4614      	mov	r4, r2
 8016fae:	d510      	bpl.n	8016fd2 <_svfiprintf_r+0x36>
 8016fb0:	690b      	ldr	r3, [r1, #16]
 8016fb2:	b973      	cbnz	r3, 8016fd2 <_svfiprintf_r+0x36>
 8016fb4:	2140      	movs	r1, #64	@ 0x40
 8016fb6:	f7fe fbd3 	bl	8015760 <_malloc_r>
 8016fba:	6028      	str	r0, [r5, #0]
 8016fbc:	6128      	str	r0, [r5, #16]
 8016fbe:	b930      	cbnz	r0, 8016fce <_svfiprintf_r+0x32>
 8016fc0:	230c      	movs	r3, #12
 8016fc2:	603b      	str	r3, [r7, #0]
 8016fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8016fc8:	b01d      	add	sp, #116	@ 0x74
 8016fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fce:	2340      	movs	r3, #64	@ 0x40
 8016fd0:	616b      	str	r3, [r5, #20]
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8016fd6:	2320      	movs	r3, #32
 8016fd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016fdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8016fe0:	2330      	movs	r3, #48	@ 0x30
 8016fe2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017180 <_svfiprintf_r+0x1e4>
 8016fe6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016fea:	f04f 0901 	mov.w	r9, #1
 8016fee:	4623      	mov	r3, r4
 8016ff0:	469a      	mov	sl, r3
 8016ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ff6:	b10a      	cbz	r2, 8016ffc <_svfiprintf_r+0x60>
 8016ff8:	2a25      	cmp	r2, #37	@ 0x25
 8016ffa:	d1f9      	bne.n	8016ff0 <_svfiprintf_r+0x54>
 8016ffc:	ebba 0b04 	subs.w	fp, sl, r4
 8017000:	d00b      	beq.n	801701a <_svfiprintf_r+0x7e>
 8017002:	465b      	mov	r3, fp
 8017004:	4622      	mov	r2, r4
 8017006:	4629      	mov	r1, r5
 8017008:	4638      	mov	r0, r7
 801700a:	f7ff ff6b 	bl	8016ee4 <__ssputs_r>
 801700e:	3001      	adds	r0, #1
 8017010:	f000 80a7 	beq.w	8017162 <_svfiprintf_r+0x1c6>
 8017014:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017016:	445a      	add	r2, fp
 8017018:	9209      	str	r2, [sp, #36]	@ 0x24
 801701a:	f89a 3000 	ldrb.w	r3, [sl]
 801701e:	2b00      	cmp	r3, #0
 8017020:	f000 809f 	beq.w	8017162 <_svfiprintf_r+0x1c6>
 8017024:	2300      	movs	r3, #0
 8017026:	f04f 32ff 	mov.w	r2, #4294967295
 801702a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801702e:	f10a 0a01 	add.w	sl, sl, #1
 8017032:	9304      	str	r3, [sp, #16]
 8017034:	9307      	str	r3, [sp, #28]
 8017036:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801703a:	931a      	str	r3, [sp, #104]	@ 0x68
 801703c:	4654      	mov	r4, sl
 801703e:	2205      	movs	r2, #5
 8017040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017044:	484e      	ldr	r0, [pc, #312]	@ (8017180 <_svfiprintf_r+0x1e4>)
 8017046:	f7e9 f8eb 	bl	8000220 <memchr>
 801704a:	9a04      	ldr	r2, [sp, #16]
 801704c:	b9d8      	cbnz	r0, 8017086 <_svfiprintf_r+0xea>
 801704e:	06d0      	lsls	r0, r2, #27
 8017050:	bf44      	itt	mi
 8017052:	2320      	movmi	r3, #32
 8017054:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017058:	0711      	lsls	r1, r2, #28
 801705a:	bf44      	itt	mi
 801705c:	232b      	movmi	r3, #43	@ 0x2b
 801705e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017062:	f89a 3000 	ldrb.w	r3, [sl]
 8017066:	2b2a      	cmp	r3, #42	@ 0x2a
 8017068:	d015      	beq.n	8017096 <_svfiprintf_r+0xfa>
 801706a:	9a07      	ldr	r2, [sp, #28]
 801706c:	4654      	mov	r4, sl
 801706e:	2000      	movs	r0, #0
 8017070:	f04f 0c0a 	mov.w	ip, #10
 8017074:	4621      	mov	r1, r4
 8017076:	f811 3b01 	ldrb.w	r3, [r1], #1
 801707a:	3b30      	subs	r3, #48	@ 0x30
 801707c:	2b09      	cmp	r3, #9
 801707e:	d94b      	bls.n	8017118 <_svfiprintf_r+0x17c>
 8017080:	b1b0      	cbz	r0, 80170b0 <_svfiprintf_r+0x114>
 8017082:	9207      	str	r2, [sp, #28]
 8017084:	e014      	b.n	80170b0 <_svfiprintf_r+0x114>
 8017086:	eba0 0308 	sub.w	r3, r0, r8
 801708a:	fa09 f303 	lsl.w	r3, r9, r3
 801708e:	4313      	orrs	r3, r2
 8017090:	9304      	str	r3, [sp, #16]
 8017092:	46a2      	mov	sl, r4
 8017094:	e7d2      	b.n	801703c <_svfiprintf_r+0xa0>
 8017096:	9b03      	ldr	r3, [sp, #12]
 8017098:	1d19      	adds	r1, r3, #4
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	9103      	str	r1, [sp, #12]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	bfbb      	ittet	lt
 80170a2:	425b      	neglt	r3, r3
 80170a4:	f042 0202 	orrlt.w	r2, r2, #2
 80170a8:	9307      	strge	r3, [sp, #28]
 80170aa:	9307      	strlt	r3, [sp, #28]
 80170ac:	bfb8      	it	lt
 80170ae:	9204      	strlt	r2, [sp, #16]
 80170b0:	7823      	ldrb	r3, [r4, #0]
 80170b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80170b4:	d10a      	bne.n	80170cc <_svfiprintf_r+0x130>
 80170b6:	7863      	ldrb	r3, [r4, #1]
 80170b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80170ba:	d132      	bne.n	8017122 <_svfiprintf_r+0x186>
 80170bc:	9b03      	ldr	r3, [sp, #12]
 80170be:	1d1a      	adds	r2, r3, #4
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	9203      	str	r2, [sp, #12]
 80170c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80170c8:	3402      	adds	r4, #2
 80170ca:	9305      	str	r3, [sp, #20]
 80170cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017190 <_svfiprintf_r+0x1f4>
 80170d0:	7821      	ldrb	r1, [r4, #0]
 80170d2:	2203      	movs	r2, #3
 80170d4:	4650      	mov	r0, sl
 80170d6:	f7e9 f8a3 	bl	8000220 <memchr>
 80170da:	b138      	cbz	r0, 80170ec <_svfiprintf_r+0x150>
 80170dc:	9b04      	ldr	r3, [sp, #16]
 80170de:	eba0 000a 	sub.w	r0, r0, sl
 80170e2:	2240      	movs	r2, #64	@ 0x40
 80170e4:	4082      	lsls	r2, r0
 80170e6:	4313      	orrs	r3, r2
 80170e8:	3401      	adds	r4, #1
 80170ea:	9304      	str	r3, [sp, #16]
 80170ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170f0:	4824      	ldr	r0, [pc, #144]	@ (8017184 <_svfiprintf_r+0x1e8>)
 80170f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80170f6:	2206      	movs	r2, #6
 80170f8:	f7e9 f892 	bl	8000220 <memchr>
 80170fc:	2800      	cmp	r0, #0
 80170fe:	d036      	beq.n	801716e <_svfiprintf_r+0x1d2>
 8017100:	4b21      	ldr	r3, [pc, #132]	@ (8017188 <_svfiprintf_r+0x1ec>)
 8017102:	bb1b      	cbnz	r3, 801714c <_svfiprintf_r+0x1b0>
 8017104:	9b03      	ldr	r3, [sp, #12]
 8017106:	3307      	adds	r3, #7
 8017108:	f023 0307 	bic.w	r3, r3, #7
 801710c:	3308      	adds	r3, #8
 801710e:	9303      	str	r3, [sp, #12]
 8017110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017112:	4433      	add	r3, r6
 8017114:	9309      	str	r3, [sp, #36]	@ 0x24
 8017116:	e76a      	b.n	8016fee <_svfiprintf_r+0x52>
 8017118:	fb0c 3202 	mla	r2, ip, r2, r3
 801711c:	460c      	mov	r4, r1
 801711e:	2001      	movs	r0, #1
 8017120:	e7a8      	b.n	8017074 <_svfiprintf_r+0xd8>
 8017122:	2300      	movs	r3, #0
 8017124:	3401      	adds	r4, #1
 8017126:	9305      	str	r3, [sp, #20]
 8017128:	4619      	mov	r1, r3
 801712a:	f04f 0c0a 	mov.w	ip, #10
 801712e:	4620      	mov	r0, r4
 8017130:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017134:	3a30      	subs	r2, #48	@ 0x30
 8017136:	2a09      	cmp	r2, #9
 8017138:	d903      	bls.n	8017142 <_svfiprintf_r+0x1a6>
 801713a:	2b00      	cmp	r3, #0
 801713c:	d0c6      	beq.n	80170cc <_svfiprintf_r+0x130>
 801713e:	9105      	str	r1, [sp, #20]
 8017140:	e7c4      	b.n	80170cc <_svfiprintf_r+0x130>
 8017142:	fb0c 2101 	mla	r1, ip, r1, r2
 8017146:	4604      	mov	r4, r0
 8017148:	2301      	movs	r3, #1
 801714a:	e7f0      	b.n	801712e <_svfiprintf_r+0x192>
 801714c:	ab03      	add	r3, sp, #12
 801714e:	9300      	str	r3, [sp, #0]
 8017150:	462a      	mov	r2, r5
 8017152:	4b0e      	ldr	r3, [pc, #56]	@ (801718c <_svfiprintf_r+0x1f0>)
 8017154:	a904      	add	r1, sp, #16
 8017156:	4638      	mov	r0, r7
 8017158:	f7fc fcb8 	bl	8013acc <_printf_float>
 801715c:	1c42      	adds	r2, r0, #1
 801715e:	4606      	mov	r6, r0
 8017160:	d1d6      	bne.n	8017110 <_svfiprintf_r+0x174>
 8017162:	89ab      	ldrh	r3, [r5, #12]
 8017164:	065b      	lsls	r3, r3, #25
 8017166:	f53f af2d 	bmi.w	8016fc4 <_svfiprintf_r+0x28>
 801716a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801716c:	e72c      	b.n	8016fc8 <_svfiprintf_r+0x2c>
 801716e:	ab03      	add	r3, sp, #12
 8017170:	9300      	str	r3, [sp, #0]
 8017172:	462a      	mov	r2, r5
 8017174:	4b05      	ldr	r3, [pc, #20]	@ (801718c <_svfiprintf_r+0x1f0>)
 8017176:	a904      	add	r1, sp, #16
 8017178:	4638      	mov	r0, r7
 801717a:	f7fc ff3f 	bl	8013ffc <_printf_i>
 801717e:	e7ed      	b.n	801715c <_svfiprintf_r+0x1c0>
 8017180:	08026381 	.word	0x08026381
 8017184:	0802638b 	.word	0x0802638b
 8017188:	08013acd 	.word	0x08013acd
 801718c:	08016ee5 	.word	0x08016ee5
 8017190:	08026387 	.word	0x08026387

08017194 <__sfputc_r>:
 8017194:	6893      	ldr	r3, [r2, #8]
 8017196:	3b01      	subs	r3, #1
 8017198:	2b00      	cmp	r3, #0
 801719a:	b410      	push	{r4}
 801719c:	6093      	str	r3, [r2, #8]
 801719e:	da08      	bge.n	80171b2 <__sfputc_r+0x1e>
 80171a0:	6994      	ldr	r4, [r2, #24]
 80171a2:	42a3      	cmp	r3, r4
 80171a4:	db01      	blt.n	80171aa <__sfputc_r+0x16>
 80171a6:	290a      	cmp	r1, #10
 80171a8:	d103      	bne.n	80171b2 <__sfputc_r+0x1e>
 80171aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171ae:	f000 b9df 	b.w	8017570 <__swbuf_r>
 80171b2:	6813      	ldr	r3, [r2, #0]
 80171b4:	1c58      	adds	r0, r3, #1
 80171b6:	6010      	str	r0, [r2, #0]
 80171b8:	7019      	strb	r1, [r3, #0]
 80171ba:	4608      	mov	r0, r1
 80171bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171c0:	4770      	bx	lr

080171c2 <__sfputs_r>:
 80171c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171c4:	4606      	mov	r6, r0
 80171c6:	460f      	mov	r7, r1
 80171c8:	4614      	mov	r4, r2
 80171ca:	18d5      	adds	r5, r2, r3
 80171cc:	42ac      	cmp	r4, r5
 80171ce:	d101      	bne.n	80171d4 <__sfputs_r+0x12>
 80171d0:	2000      	movs	r0, #0
 80171d2:	e007      	b.n	80171e4 <__sfputs_r+0x22>
 80171d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171d8:	463a      	mov	r2, r7
 80171da:	4630      	mov	r0, r6
 80171dc:	f7ff ffda 	bl	8017194 <__sfputc_r>
 80171e0:	1c43      	adds	r3, r0, #1
 80171e2:	d1f3      	bne.n	80171cc <__sfputs_r+0xa>
 80171e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080171e8 <_vfiprintf_r>:
 80171e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171ec:	460d      	mov	r5, r1
 80171ee:	b09d      	sub	sp, #116	@ 0x74
 80171f0:	4614      	mov	r4, r2
 80171f2:	4698      	mov	r8, r3
 80171f4:	4606      	mov	r6, r0
 80171f6:	b118      	cbz	r0, 8017200 <_vfiprintf_r+0x18>
 80171f8:	6a03      	ldr	r3, [r0, #32]
 80171fa:	b90b      	cbnz	r3, 8017200 <_vfiprintf_r+0x18>
 80171fc:	f7fd fabe 	bl	801477c <__sinit>
 8017200:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017202:	07d9      	lsls	r1, r3, #31
 8017204:	d405      	bmi.n	8017212 <_vfiprintf_r+0x2a>
 8017206:	89ab      	ldrh	r3, [r5, #12]
 8017208:	059a      	lsls	r2, r3, #22
 801720a:	d402      	bmi.n	8017212 <_vfiprintf_r+0x2a>
 801720c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801720e:	f7fd fbde 	bl	80149ce <__retarget_lock_acquire_recursive>
 8017212:	89ab      	ldrh	r3, [r5, #12]
 8017214:	071b      	lsls	r3, r3, #28
 8017216:	d501      	bpl.n	801721c <_vfiprintf_r+0x34>
 8017218:	692b      	ldr	r3, [r5, #16]
 801721a:	b99b      	cbnz	r3, 8017244 <_vfiprintf_r+0x5c>
 801721c:	4629      	mov	r1, r5
 801721e:	4630      	mov	r0, r6
 8017220:	f000 f9e4 	bl	80175ec <__swsetup_r>
 8017224:	b170      	cbz	r0, 8017244 <_vfiprintf_r+0x5c>
 8017226:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017228:	07dc      	lsls	r4, r3, #31
 801722a:	d504      	bpl.n	8017236 <_vfiprintf_r+0x4e>
 801722c:	f04f 30ff 	mov.w	r0, #4294967295
 8017230:	b01d      	add	sp, #116	@ 0x74
 8017232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017236:	89ab      	ldrh	r3, [r5, #12]
 8017238:	0598      	lsls	r0, r3, #22
 801723a:	d4f7      	bmi.n	801722c <_vfiprintf_r+0x44>
 801723c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801723e:	f7fd fbc7 	bl	80149d0 <__retarget_lock_release_recursive>
 8017242:	e7f3      	b.n	801722c <_vfiprintf_r+0x44>
 8017244:	2300      	movs	r3, #0
 8017246:	9309      	str	r3, [sp, #36]	@ 0x24
 8017248:	2320      	movs	r3, #32
 801724a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801724e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017252:	2330      	movs	r3, #48	@ 0x30
 8017254:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017404 <_vfiprintf_r+0x21c>
 8017258:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801725c:	f04f 0901 	mov.w	r9, #1
 8017260:	4623      	mov	r3, r4
 8017262:	469a      	mov	sl, r3
 8017264:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017268:	b10a      	cbz	r2, 801726e <_vfiprintf_r+0x86>
 801726a:	2a25      	cmp	r2, #37	@ 0x25
 801726c:	d1f9      	bne.n	8017262 <_vfiprintf_r+0x7a>
 801726e:	ebba 0b04 	subs.w	fp, sl, r4
 8017272:	d00b      	beq.n	801728c <_vfiprintf_r+0xa4>
 8017274:	465b      	mov	r3, fp
 8017276:	4622      	mov	r2, r4
 8017278:	4629      	mov	r1, r5
 801727a:	4630      	mov	r0, r6
 801727c:	f7ff ffa1 	bl	80171c2 <__sfputs_r>
 8017280:	3001      	adds	r0, #1
 8017282:	f000 80a7 	beq.w	80173d4 <_vfiprintf_r+0x1ec>
 8017286:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017288:	445a      	add	r2, fp
 801728a:	9209      	str	r2, [sp, #36]	@ 0x24
 801728c:	f89a 3000 	ldrb.w	r3, [sl]
 8017290:	2b00      	cmp	r3, #0
 8017292:	f000 809f 	beq.w	80173d4 <_vfiprintf_r+0x1ec>
 8017296:	2300      	movs	r3, #0
 8017298:	f04f 32ff 	mov.w	r2, #4294967295
 801729c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80172a0:	f10a 0a01 	add.w	sl, sl, #1
 80172a4:	9304      	str	r3, [sp, #16]
 80172a6:	9307      	str	r3, [sp, #28]
 80172a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80172ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80172ae:	4654      	mov	r4, sl
 80172b0:	2205      	movs	r2, #5
 80172b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172b6:	4853      	ldr	r0, [pc, #332]	@ (8017404 <_vfiprintf_r+0x21c>)
 80172b8:	f7e8 ffb2 	bl	8000220 <memchr>
 80172bc:	9a04      	ldr	r2, [sp, #16]
 80172be:	b9d8      	cbnz	r0, 80172f8 <_vfiprintf_r+0x110>
 80172c0:	06d1      	lsls	r1, r2, #27
 80172c2:	bf44      	itt	mi
 80172c4:	2320      	movmi	r3, #32
 80172c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80172ca:	0713      	lsls	r3, r2, #28
 80172cc:	bf44      	itt	mi
 80172ce:	232b      	movmi	r3, #43	@ 0x2b
 80172d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80172d4:	f89a 3000 	ldrb.w	r3, [sl]
 80172d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80172da:	d015      	beq.n	8017308 <_vfiprintf_r+0x120>
 80172dc:	9a07      	ldr	r2, [sp, #28]
 80172de:	4654      	mov	r4, sl
 80172e0:	2000      	movs	r0, #0
 80172e2:	f04f 0c0a 	mov.w	ip, #10
 80172e6:	4621      	mov	r1, r4
 80172e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80172ec:	3b30      	subs	r3, #48	@ 0x30
 80172ee:	2b09      	cmp	r3, #9
 80172f0:	d94b      	bls.n	801738a <_vfiprintf_r+0x1a2>
 80172f2:	b1b0      	cbz	r0, 8017322 <_vfiprintf_r+0x13a>
 80172f4:	9207      	str	r2, [sp, #28]
 80172f6:	e014      	b.n	8017322 <_vfiprintf_r+0x13a>
 80172f8:	eba0 0308 	sub.w	r3, r0, r8
 80172fc:	fa09 f303 	lsl.w	r3, r9, r3
 8017300:	4313      	orrs	r3, r2
 8017302:	9304      	str	r3, [sp, #16]
 8017304:	46a2      	mov	sl, r4
 8017306:	e7d2      	b.n	80172ae <_vfiprintf_r+0xc6>
 8017308:	9b03      	ldr	r3, [sp, #12]
 801730a:	1d19      	adds	r1, r3, #4
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	9103      	str	r1, [sp, #12]
 8017310:	2b00      	cmp	r3, #0
 8017312:	bfbb      	ittet	lt
 8017314:	425b      	neglt	r3, r3
 8017316:	f042 0202 	orrlt.w	r2, r2, #2
 801731a:	9307      	strge	r3, [sp, #28]
 801731c:	9307      	strlt	r3, [sp, #28]
 801731e:	bfb8      	it	lt
 8017320:	9204      	strlt	r2, [sp, #16]
 8017322:	7823      	ldrb	r3, [r4, #0]
 8017324:	2b2e      	cmp	r3, #46	@ 0x2e
 8017326:	d10a      	bne.n	801733e <_vfiprintf_r+0x156>
 8017328:	7863      	ldrb	r3, [r4, #1]
 801732a:	2b2a      	cmp	r3, #42	@ 0x2a
 801732c:	d132      	bne.n	8017394 <_vfiprintf_r+0x1ac>
 801732e:	9b03      	ldr	r3, [sp, #12]
 8017330:	1d1a      	adds	r2, r3, #4
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	9203      	str	r2, [sp, #12]
 8017336:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801733a:	3402      	adds	r4, #2
 801733c:	9305      	str	r3, [sp, #20]
 801733e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017414 <_vfiprintf_r+0x22c>
 8017342:	7821      	ldrb	r1, [r4, #0]
 8017344:	2203      	movs	r2, #3
 8017346:	4650      	mov	r0, sl
 8017348:	f7e8 ff6a 	bl	8000220 <memchr>
 801734c:	b138      	cbz	r0, 801735e <_vfiprintf_r+0x176>
 801734e:	9b04      	ldr	r3, [sp, #16]
 8017350:	eba0 000a 	sub.w	r0, r0, sl
 8017354:	2240      	movs	r2, #64	@ 0x40
 8017356:	4082      	lsls	r2, r0
 8017358:	4313      	orrs	r3, r2
 801735a:	3401      	adds	r4, #1
 801735c:	9304      	str	r3, [sp, #16]
 801735e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017362:	4829      	ldr	r0, [pc, #164]	@ (8017408 <_vfiprintf_r+0x220>)
 8017364:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017368:	2206      	movs	r2, #6
 801736a:	f7e8 ff59 	bl	8000220 <memchr>
 801736e:	2800      	cmp	r0, #0
 8017370:	d03f      	beq.n	80173f2 <_vfiprintf_r+0x20a>
 8017372:	4b26      	ldr	r3, [pc, #152]	@ (801740c <_vfiprintf_r+0x224>)
 8017374:	bb1b      	cbnz	r3, 80173be <_vfiprintf_r+0x1d6>
 8017376:	9b03      	ldr	r3, [sp, #12]
 8017378:	3307      	adds	r3, #7
 801737a:	f023 0307 	bic.w	r3, r3, #7
 801737e:	3308      	adds	r3, #8
 8017380:	9303      	str	r3, [sp, #12]
 8017382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017384:	443b      	add	r3, r7
 8017386:	9309      	str	r3, [sp, #36]	@ 0x24
 8017388:	e76a      	b.n	8017260 <_vfiprintf_r+0x78>
 801738a:	fb0c 3202 	mla	r2, ip, r2, r3
 801738e:	460c      	mov	r4, r1
 8017390:	2001      	movs	r0, #1
 8017392:	e7a8      	b.n	80172e6 <_vfiprintf_r+0xfe>
 8017394:	2300      	movs	r3, #0
 8017396:	3401      	adds	r4, #1
 8017398:	9305      	str	r3, [sp, #20]
 801739a:	4619      	mov	r1, r3
 801739c:	f04f 0c0a 	mov.w	ip, #10
 80173a0:	4620      	mov	r0, r4
 80173a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80173a6:	3a30      	subs	r2, #48	@ 0x30
 80173a8:	2a09      	cmp	r2, #9
 80173aa:	d903      	bls.n	80173b4 <_vfiprintf_r+0x1cc>
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d0c6      	beq.n	801733e <_vfiprintf_r+0x156>
 80173b0:	9105      	str	r1, [sp, #20]
 80173b2:	e7c4      	b.n	801733e <_vfiprintf_r+0x156>
 80173b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80173b8:	4604      	mov	r4, r0
 80173ba:	2301      	movs	r3, #1
 80173bc:	e7f0      	b.n	80173a0 <_vfiprintf_r+0x1b8>
 80173be:	ab03      	add	r3, sp, #12
 80173c0:	9300      	str	r3, [sp, #0]
 80173c2:	462a      	mov	r2, r5
 80173c4:	4b12      	ldr	r3, [pc, #72]	@ (8017410 <_vfiprintf_r+0x228>)
 80173c6:	a904      	add	r1, sp, #16
 80173c8:	4630      	mov	r0, r6
 80173ca:	f7fc fb7f 	bl	8013acc <_printf_float>
 80173ce:	4607      	mov	r7, r0
 80173d0:	1c78      	adds	r0, r7, #1
 80173d2:	d1d6      	bne.n	8017382 <_vfiprintf_r+0x19a>
 80173d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80173d6:	07d9      	lsls	r1, r3, #31
 80173d8:	d405      	bmi.n	80173e6 <_vfiprintf_r+0x1fe>
 80173da:	89ab      	ldrh	r3, [r5, #12]
 80173dc:	059a      	lsls	r2, r3, #22
 80173de:	d402      	bmi.n	80173e6 <_vfiprintf_r+0x1fe>
 80173e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80173e2:	f7fd faf5 	bl	80149d0 <__retarget_lock_release_recursive>
 80173e6:	89ab      	ldrh	r3, [r5, #12]
 80173e8:	065b      	lsls	r3, r3, #25
 80173ea:	f53f af1f 	bmi.w	801722c <_vfiprintf_r+0x44>
 80173ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80173f0:	e71e      	b.n	8017230 <_vfiprintf_r+0x48>
 80173f2:	ab03      	add	r3, sp, #12
 80173f4:	9300      	str	r3, [sp, #0]
 80173f6:	462a      	mov	r2, r5
 80173f8:	4b05      	ldr	r3, [pc, #20]	@ (8017410 <_vfiprintf_r+0x228>)
 80173fa:	a904      	add	r1, sp, #16
 80173fc:	4630      	mov	r0, r6
 80173fe:	f7fc fdfd 	bl	8013ffc <_printf_i>
 8017402:	e7e4      	b.n	80173ce <_vfiprintf_r+0x1e6>
 8017404:	08026381 	.word	0x08026381
 8017408:	0802638b 	.word	0x0802638b
 801740c:	08013acd 	.word	0x08013acd
 8017410:	080171c3 	.word	0x080171c3
 8017414:	08026387 	.word	0x08026387

08017418 <__sflush_r>:
 8017418:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801741c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017420:	0716      	lsls	r6, r2, #28
 8017422:	4605      	mov	r5, r0
 8017424:	460c      	mov	r4, r1
 8017426:	d454      	bmi.n	80174d2 <__sflush_r+0xba>
 8017428:	684b      	ldr	r3, [r1, #4]
 801742a:	2b00      	cmp	r3, #0
 801742c:	dc02      	bgt.n	8017434 <__sflush_r+0x1c>
 801742e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017430:	2b00      	cmp	r3, #0
 8017432:	dd48      	ble.n	80174c6 <__sflush_r+0xae>
 8017434:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017436:	2e00      	cmp	r6, #0
 8017438:	d045      	beq.n	80174c6 <__sflush_r+0xae>
 801743a:	2300      	movs	r3, #0
 801743c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017440:	682f      	ldr	r7, [r5, #0]
 8017442:	6a21      	ldr	r1, [r4, #32]
 8017444:	602b      	str	r3, [r5, #0]
 8017446:	d030      	beq.n	80174aa <__sflush_r+0x92>
 8017448:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801744a:	89a3      	ldrh	r3, [r4, #12]
 801744c:	0759      	lsls	r1, r3, #29
 801744e:	d505      	bpl.n	801745c <__sflush_r+0x44>
 8017450:	6863      	ldr	r3, [r4, #4]
 8017452:	1ad2      	subs	r2, r2, r3
 8017454:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017456:	b10b      	cbz	r3, 801745c <__sflush_r+0x44>
 8017458:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801745a:	1ad2      	subs	r2, r2, r3
 801745c:	2300      	movs	r3, #0
 801745e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017460:	6a21      	ldr	r1, [r4, #32]
 8017462:	4628      	mov	r0, r5
 8017464:	47b0      	blx	r6
 8017466:	1c43      	adds	r3, r0, #1
 8017468:	89a3      	ldrh	r3, [r4, #12]
 801746a:	d106      	bne.n	801747a <__sflush_r+0x62>
 801746c:	6829      	ldr	r1, [r5, #0]
 801746e:	291d      	cmp	r1, #29
 8017470:	d82b      	bhi.n	80174ca <__sflush_r+0xb2>
 8017472:	4a2a      	ldr	r2, [pc, #168]	@ (801751c <__sflush_r+0x104>)
 8017474:	410a      	asrs	r2, r1
 8017476:	07d6      	lsls	r6, r2, #31
 8017478:	d427      	bmi.n	80174ca <__sflush_r+0xb2>
 801747a:	2200      	movs	r2, #0
 801747c:	6062      	str	r2, [r4, #4]
 801747e:	04d9      	lsls	r1, r3, #19
 8017480:	6922      	ldr	r2, [r4, #16]
 8017482:	6022      	str	r2, [r4, #0]
 8017484:	d504      	bpl.n	8017490 <__sflush_r+0x78>
 8017486:	1c42      	adds	r2, r0, #1
 8017488:	d101      	bne.n	801748e <__sflush_r+0x76>
 801748a:	682b      	ldr	r3, [r5, #0]
 801748c:	b903      	cbnz	r3, 8017490 <__sflush_r+0x78>
 801748e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017490:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017492:	602f      	str	r7, [r5, #0]
 8017494:	b1b9      	cbz	r1, 80174c6 <__sflush_r+0xae>
 8017496:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801749a:	4299      	cmp	r1, r3
 801749c:	d002      	beq.n	80174a4 <__sflush_r+0x8c>
 801749e:	4628      	mov	r0, r5
 80174a0:	f7fe f8ea 	bl	8015678 <_free_r>
 80174a4:	2300      	movs	r3, #0
 80174a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80174a8:	e00d      	b.n	80174c6 <__sflush_r+0xae>
 80174aa:	2301      	movs	r3, #1
 80174ac:	4628      	mov	r0, r5
 80174ae:	47b0      	blx	r6
 80174b0:	4602      	mov	r2, r0
 80174b2:	1c50      	adds	r0, r2, #1
 80174b4:	d1c9      	bne.n	801744a <__sflush_r+0x32>
 80174b6:	682b      	ldr	r3, [r5, #0]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d0c6      	beq.n	801744a <__sflush_r+0x32>
 80174bc:	2b1d      	cmp	r3, #29
 80174be:	d001      	beq.n	80174c4 <__sflush_r+0xac>
 80174c0:	2b16      	cmp	r3, #22
 80174c2:	d11e      	bne.n	8017502 <__sflush_r+0xea>
 80174c4:	602f      	str	r7, [r5, #0]
 80174c6:	2000      	movs	r0, #0
 80174c8:	e022      	b.n	8017510 <__sflush_r+0xf8>
 80174ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80174ce:	b21b      	sxth	r3, r3
 80174d0:	e01b      	b.n	801750a <__sflush_r+0xf2>
 80174d2:	690f      	ldr	r7, [r1, #16]
 80174d4:	2f00      	cmp	r7, #0
 80174d6:	d0f6      	beq.n	80174c6 <__sflush_r+0xae>
 80174d8:	0793      	lsls	r3, r2, #30
 80174da:	680e      	ldr	r6, [r1, #0]
 80174dc:	bf08      	it	eq
 80174de:	694b      	ldreq	r3, [r1, #20]
 80174e0:	600f      	str	r7, [r1, #0]
 80174e2:	bf18      	it	ne
 80174e4:	2300      	movne	r3, #0
 80174e6:	eba6 0807 	sub.w	r8, r6, r7
 80174ea:	608b      	str	r3, [r1, #8]
 80174ec:	f1b8 0f00 	cmp.w	r8, #0
 80174f0:	dde9      	ble.n	80174c6 <__sflush_r+0xae>
 80174f2:	6a21      	ldr	r1, [r4, #32]
 80174f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80174f6:	4643      	mov	r3, r8
 80174f8:	463a      	mov	r2, r7
 80174fa:	4628      	mov	r0, r5
 80174fc:	47b0      	blx	r6
 80174fe:	2800      	cmp	r0, #0
 8017500:	dc08      	bgt.n	8017514 <__sflush_r+0xfc>
 8017502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801750a:	81a3      	strh	r3, [r4, #12]
 801750c:	f04f 30ff 	mov.w	r0, #4294967295
 8017510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017514:	4407      	add	r7, r0
 8017516:	eba8 0800 	sub.w	r8, r8, r0
 801751a:	e7e7      	b.n	80174ec <__sflush_r+0xd4>
 801751c:	dfbffffe 	.word	0xdfbffffe

08017520 <_fflush_r>:
 8017520:	b538      	push	{r3, r4, r5, lr}
 8017522:	690b      	ldr	r3, [r1, #16]
 8017524:	4605      	mov	r5, r0
 8017526:	460c      	mov	r4, r1
 8017528:	b913      	cbnz	r3, 8017530 <_fflush_r+0x10>
 801752a:	2500      	movs	r5, #0
 801752c:	4628      	mov	r0, r5
 801752e:	bd38      	pop	{r3, r4, r5, pc}
 8017530:	b118      	cbz	r0, 801753a <_fflush_r+0x1a>
 8017532:	6a03      	ldr	r3, [r0, #32]
 8017534:	b90b      	cbnz	r3, 801753a <_fflush_r+0x1a>
 8017536:	f7fd f921 	bl	801477c <__sinit>
 801753a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d0f3      	beq.n	801752a <_fflush_r+0xa>
 8017542:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017544:	07d0      	lsls	r0, r2, #31
 8017546:	d404      	bmi.n	8017552 <_fflush_r+0x32>
 8017548:	0599      	lsls	r1, r3, #22
 801754a:	d402      	bmi.n	8017552 <_fflush_r+0x32>
 801754c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801754e:	f7fd fa3e 	bl	80149ce <__retarget_lock_acquire_recursive>
 8017552:	4628      	mov	r0, r5
 8017554:	4621      	mov	r1, r4
 8017556:	f7ff ff5f 	bl	8017418 <__sflush_r>
 801755a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801755c:	07da      	lsls	r2, r3, #31
 801755e:	4605      	mov	r5, r0
 8017560:	d4e4      	bmi.n	801752c <_fflush_r+0xc>
 8017562:	89a3      	ldrh	r3, [r4, #12]
 8017564:	059b      	lsls	r3, r3, #22
 8017566:	d4e1      	bmi.n	801752c <_fflush_r+0xc>
 8017568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801756a:	f7fd fa31 	bl	80149d0 <__retarget_lock_release_recursive>
 801756e:	e7dd      	b.n	801752c <_fflush_r+0xc>

08017570 <__swbuf_r>:
 8017570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017572:	460e      	mov	r6, r1
 8017574:	4614      	mov	r4, r2
 8017576:	4605      	mov	r5, r0
 8017578:	b118      	cbz	r0, 8017582 <__swbuf_r+0x12>
 801757a:	6a03      	ldr	r3, [r0, #32]
 801757c:	b90b      	cbnz	r3, 8017582 <__swbuf_r+0x12>
 801757e:	f7fd f8fd 	bl	801477c <__sinit>
 8017582:	69a3      	ldr	r3, [r4, #24]
 8017584:	60a3      	str	r3, [r4, #8]
 8017586:	89a3      	ldrh	r3, [r4, #12]
 8017588:	071a      	lsls	r2, r3, #28
 801758a:	d501      	bpl.n	8017590 <__swbuf_r+0x20>
 801758c:	6923      	ldr	r3, [r4, #16]
 801758e:	b943      	cbnz	r3, 80175a2 <__swbuf_r+0x32>
 8017590:	4621      	mov	r1, r4
 8017592:	4628      	mov	r0, r5
 8017594:	f000 f82a 	bl	80175ec <__swsetup_r>
 8017598:	b118      	cbz	r0, 80175a2 <__swbuf_r+0x32>
 801759a:	f04f 37ff 	mov.w	r7, #4294967295
 801759e:	4638      	mov	r0, r7
 80175a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175a2:	6823      	ldr	r3, [r4, #0]
 80175a4:	6922      	ldr	r2, [r4, #16]
 80175a6:	1a98      	subs	r0, r3, r2
 80175a8:	6963      	ldr	r3, [r4, #20]
 80175aa:	b2f6      	uxtb	r6, r6
 80175ac:	4283      	cmp	r3, r0
 80175ae:	4637      	mov	r7, r6
 80175b0:	dc05      	bgt.n	80175be <__swbuf_r+0x4e>
 80175b2:	4621      	mov	r1, r4
 80175b4:	4628      	mov	r0, r5
 80175b6:	f7ff ffb3 	bl	8017520 <_fflush_r>
 80175ba:	2800      	cmp	r0, #0
 80175bc:	d1ed      	bne.n	801759a <__swbuf_r+0x2a>
 80175be:	68a3      	ldr	r3, [r4, #8]
 80175c0:	3b01      	subs	r3, #1
 80175c2:	60a3      	str	r3, [r4, #8]
 80175c4:	6823      	ldr	r3, [r4, #0]
 80175c6:	1c5a      	adds	r2, r3, #1
 80175c8:	6022      	str	r2, [r4, #0]
 80175ca:	701e      	strb	r6, [r3, #0]
 80175cc:	6962      	ldr	r2, [r4, #20]
 80175ce:	1c43      	adds	r3, r0, #1
 80175d0:	429a      	cmp	r2, r3
 80175d2:	d004      	beq.n	80175de <__swbuf_r+0x6e>
 80175d4:	89a3      	ldrh	r3, [r4, #12]
 80175d6:	07db      	lsls	r3, r3, #31
 80175d8:	d5e1      	bpl.n	801759e <__swbuf_r+0x2e>
 80175da:	2e0a      	cmp	r6, #10
 80175dc:	d1df      	bne.n	801759e <__swbuf_r+0x2e>
 80175de:	4621      	mov	r1, r4
 80175e0:	4628      	mov	r0, r5
 80175e2:	f7ff ff9d 	bl	8017520 <_fflush_r>
 80175e6:	2800      	cmp	r0, #0
 80175e8:	d0d9      	beq.n	801759e <__swbuf_r+0x2e>
 80175ea:	e7d6      	b.n	801759a <__swbuf_r+0x2a>

080175ec <__swsetup_r>:
 80175ec:	b538      	push	{r3, r4, r5, lr}
 80175ee:	4b29      	ldr	r3, [pc, #164]	@ (8017694 <__swsetup_r+0xa8>)
 80175f0:	4605      	mov	r5, r0
 80175f2:	6818      	ldr	r0, [r3, #0]
 80175f4:	460c      	mov	r4, r1
 80175f6:	b118      	cbz	r0, 8017600 <__swsetup_r+0x14>
 80175f8:	6a03      	ldr	r3, [r0, #32]
 80175fa:	b90b      	cbnz	r3, 8017600 <__swsetup_r+0x14>
 80175fc:	f7fd f8be 	bl	801477c <__sinit>
 8017600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017604:	0719      	lsls	r1, r3, #28
 8017606:	d422      	bmi.n	801764e <__swsetup_r+0x62>
 8017608:	06da      	lsls	r2, r3, #27
 801760a:	d407      	bmi.n	801761c <__swsetup_r+0x30>
 801760c:	2209      	movs	r2, #9
 801760e:	602a      	str	r2, [r5, #0]
 8017610:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017614:	81a3      	strh	r3, [r4, #12]
 8017616:	f04f 30ff 	mov.w	r0, #4294967295
 801761a:	e033      	b.n	8017684 <__swsetup_r+0x98>
 801761c:	0758      	lsls	r0, r3, #29
 801761e:	d512      	bpl.n	8017646 <__swsetup_r+0x5a>
 8017620:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017622:	b141      	cbz	r1, 8017636 <__swsetup_r+0x4a>
 8017624:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017628:	4299      	cmp	r1, r3
 801762a:	d002      	beq.n	8017632 <__swsetup_r+0x46>
 801762c:	4628      	mov	r0, r5
 801762e:	f7fe f823 	bl	8015678 <_free_r>
 8017632:	2300      	movs	r3, #0
 8017634:	6363      	str	r3, [r4, #52]	@ 0x34
 8017636:	89a3      	ldrh	r3, [r4, #12]
 8017638:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801763c:	81a3      	strh	r3, [r4, #12]
 801763e:	2300      	movs	r3, #0
 8017640:	6063      	str	r3, [r4, #4]
 8017642:	6923      	ldr	r3, [r4, #16]
 8017644:	6023      	str	r3, [r4, #0]
 8017646:	89a3      	ldrh	r3, [r4, #12]
 8017648:	f043 0308 	orr.w	r3, r3, #8
 801764c:	81a3      	strh	r3, [r4, #12]
 801764e:	6923      	ldr	r3, [r4, #16]
 8017650:	b94b      	cbnz	r3, 8017666 <__swsetup_r+0x7a>
 8017652:	89a3      	ldrh	r3, [r4, #12]
 8017654:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017658:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801765c:	d003      	beq.n	8017666 <__swsetup_r+0x7a>
 801765e:	4621      	mov	r1, r4
 8017660:	4628      	mov	r0, r5
 8017662:	f000 fc5d 	bl	8017f20 <__smakebuf_r>
 8017666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801766a:	f013 0201 	ands.w	r2, r3, #1
 801766e:	d00a      	beq.n	8017686 <__swsetup_r+0x9a>
 8017670:	2200      	movs	r2, #0
 8017672:	60a2      	str	r2, [r4, #8]
 8017674:	6962      	ldr	r2, [r4, #20]
 8017676:	4252      	negs	r2, r2
 8017678:	61a2      	str	r2, [r4, #24]
 801767a:	6922      	ldr	r2, [r4, #16]
 801767c:	b942      	cbnz	r2, 8017690 <__swsetup_r+0xa4>
 801767e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017682:	d1c5      	bne.n	8017610 <__swsetup_r+0x24>
 8017684:	bd38      	pop	{r3, r4, r5, pc}
 8017686:	0799      	lsls	r1, r3, #30
 8017688:	bf58      	it	pl
 801768a:	6962      	ldrpl	r2, [r4, #20]
 801768c:	60a2      	str	r2, [r4, #8]
 801768e:	e7f4      	b.n	801767a <__swsetup_r+0x8e>
 8017690:	2000      	movs	r0, #0
 8017692:	e7f7      	b.n	8017684 <__swsetup_r+0x98>
 8017694:	200001d4 	.word	0x200001d4

08017698 <memmove>:
 8017698:	4288      	cmp	r0, r1
 801769a:	b510      	push	{r4, lr}
 801769c:	eb01 0402 	add.w	r4, r1, r2
 80176a0:	d902      	bls.n	80176a8 <memmove+0x10>
 80176a2:	4284      	cmp	r4, r0
 80176a4:	4623      	mov	r3, r4
 80176a6:	d807      	bhi.n	80176b8 <memmove+0x20>
 80176a8:	1e43      	subs	r3, r0, #1
 80176aa:	42a1      	cmp	r1, r4
 80176ac:	d008      	beq.n	80176c0 <memmove+0x28>
 80176ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80176b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80176b6:	e7f8      	b.n	80176aa <memmove+0x12>
 80176b8:	4402      	add	r2, r0
 80176ba:	4601      	mov	r1, r0
 80176bc:	428a      	cmp	r2, r1
 80176be:	d100      	bne.n	80176c2 <memmove+0x2a>
 80176c0:	bd10      	pop	{r4, pc}
 80176c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80176c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80176ca:	e7f7      	b.n	80176bc <memmove+0x24>

080176cc <strncmp>:
 80176cc:	b510      	push	{r4, lr}
 80176ce:	b16a      	cbz	r2, 80176ec <strncmp+0x20>
 80176d0:	3901      	subs	r1, #1
 80176d2:	1884      	adds	r4, r0, r2
 80176d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80176d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80176dc:	429a      	cmp	r2, r3
 80176de:	d103      	bne.n	80176e8 <strncmp+0x1c>
 80176e0:	42a0      	cmp	r0, r4
 80176e2:	d001      	beq.n	80176e8 <strncmp+0x1c>
 80176e4:	2a00      	cmp	r2, #0
 80176e6:	d1f5      	bne.n	80176d4 <strncmp+0x8>
 80176e8:	1ad0      	subs	r0, r2, r3
 80176ea:	bd10      	pop	{r4, pc}
 80176ec:	4610      	mov	r0, r2
 80176ee:	e7fc      	b.n	80176ea <strncmp+0x1e>

080176f0 <_sbrk_r>:
 80176f0:	b538      	push	{r3, r4, r5, lr}
 80176f2:	4d06      	ldr	r5, [pc, #24]	@ (801770c <_sbrk_r+0x1c>)
 80176f4:	2300      	movs	r3, #0
 80176f6:	4604      	mov	r4, r0
 80176f8:	4608      	mov	r0, r1
 80176fa:	602b      	str	r3, [r5, #0]
 80176fc:	f7ec fe3e 	bl	800437c <_sbrk>
 8017700:	1c43      	adds	r3, r0, #1
 8017702:	d102      	bne.n	801770a <_sbrk_r+0x1a>
 8017704:	682b      	ldr	r3, [r5, #0]
 8017706:	b103      	cbz	r3, 801770a <_sbrk_r+0x1a>
 8017708:	6023      	str	r3, [r4, #0]
 801770a:	bd38      	pop	{r3, r4, r5, pc}
 801770c:	20004fcc 	.word	0x20004fcc

08017710 <memcpy>:
 8017710:	440a      	add	r2, r1
 8017712:	4291      	cmp	r1, r2
 8017714:	f100 33ff 	add.w	r3, r0, #4294967295
 8017718:	d100      	bne.n	801771c <memcpy+0xc>
 801771a:	4770      	bx	lr
 801771c:	b510      	push	{r4, lr}
 801771e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017726:	4291      	cmp	r1, r2
 8017728:	d1f9      	bne.n	801771e <memcpy+0xe>
 801772a:	bd10      	pop	{r4, pc}
 801772c:	0000      	movs	r0, r0
	...

08017730 <nan>:
 8017730:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017738 <nan+0x8>
 8017734:	4770      	bx	lr
 8017736:	bf00      	nop
 8017738:	00000000 	.word	0x00000000
 801773c:	7ff80000 	.word	0x7ff80000

08017740 <__assert_func>:
 8017740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017742:	4614      	mov	r4, r2
 8017744:	461a      	mov	r2, r3
 8017746:	4b09      	ldr	r3, [pc, #36]	@ (801776c <__assert_func+0x2c>)
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	4605      	mov	r5, r0
 801774c:	68d8      	ldr	r0, [r3, #12]
 801774e:	b954      	cbnz	r4, 8017766 <__assert_func+0x26>
 8017750:	4b07      	ldr	r3, [pc, #28]	@ (8017770 <__assert_func+0x30>)
 8017752:	461c      	mov	r4, r3
 8017754:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017758:	9100      	str	r1, [sp, #0]
 801775a:	462b      	mov	r3, r5
 801775c:	4905      	ldr	r1, [pc, #20]	@ (8017774 <__assert_func+0x34>)
 801775e:	f000 fba7 	bl	8017eb0 <fiprintf>
 8017762:	f000 fc3b 	bl	8017fdc <abort>
 8017766:	4b04      	ldr	r3, [pc, #16]	@ (8017778 <__assert_func+0x38>)
 8017768:	e7f4      	b.n	8017754 <__assert_func+0x14>
 801776a:	bf00      	nop
 801776c:	200001d4 	.word	0x200001d4
 8017770:	080263d5 	.word	0x080263d5
 8017774:	080263a7 	.word	0x080263a7
 8017778:	0802639a 	.word	0x0802639a

0801777c <_calloc_r>:
 801777c:	b570      	push	{r4, r5, r6, lr}
 801777e:	fba1 5402 	umull	r5, r4, r1, r2
 8017782:	b93c      	cbnz	r4, 8017794 <_calloc_r+0x18>
 8017784:	4629      	mov	r1, r5
 8017786:	f7fd ffeb 	bl	8015760 <_malloc_r>
 801778a:	4606      	mov	r6, r0
 801778c:	b928      	cbnz	r0, 801779a <_calloc_r+0x1e>
 801778e:	2600      	movs	r6, #0
 8017790:	4630      	mov	r0, r6
 8017792:	bd70      	pop	{r4, r5, r6, pc}
 8017794:	220c      	movs	r2, #12
 8017796:	6002      	str	r2, [r0, #0]
 8017798:	e7f9      	b.n	801778e <_calloc_r+0x12>
 801779a:	462a      	mov	r2, r5
 801779c:	4621      	mov	r1, r4
 801779e:	f7fd f898 	bl	80148d2 <memset>
 80177a2:	e7f5      	b.n	8017790 <_calloc_r+0x14>

080177a4 <rshift>:
 80177a4:	6903      	ldr	r3, [r0, #16]
 80177a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80177aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80177ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80177b2:	f100 0414 	add.w	r4, r0, #20
 80177b6:	dd45      	ble.n	8017844 <rshift+0xa0>
 80177b8:	f011 011f 	ands.w	r1, r1, #31
 80177bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80177c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80177c4:	d10c      	bne.n	80177e0 <rshift+0x3c>
 80177c6:	f100 0710 	add.w	r7, r0, #16
 80177ca:	4629      	mov	r1, r5
 80177cc:	42b1      	cmp	r1, r6
 80177ce:	d334      	bcc.n	801783a <rshift+0x96>
 80177d0:	1a9b      	subs	r3, r3, r2
 80177d2:	009b      	lsls	r3, r3, #2
 80177d4:	1eea      	subs	r2, r5, #3
 80177d6:	4296      	cmp	r6, r2
 80177d8:	bf38      	it	cc
 80177da:	2300      	movcc	r3, #0
 80177dc:	4423      	add	r3, r4
 80177de:	e015      	b.n	801780c <rshift+0x68>
 80177e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80177e4:	f1c1 0820 	rsb	r8, r1, #32
 80177e8:	40cf      	lsrs	r7, r1
 80177ea:	f105 0e04 	add.w	lr, r5, #4
 80177ee:	46a1      	mov	r9, r4
 80177f0:	4576      	cmp	r6, lr
 80177f2:	46f4      	mov	ip, lr
 80177f4:	d815      	bhi.n	8017822 <rshift+0x7e>
 80177f6:	1a9a      	subs	r2, r3, r2
 80177f8:	0092      	lsls	r2, r2, #2
 80177fa:	3a04      	subs	r2, #4
 80177fc:	3501      	adds	r5, #1
 80177fe:	42ae      	cmp	r6, r5
 8017800:	bf38      	it	cc
 8017802:	2200      	movcc	r2, #0
 8017804:	18a3      	adds	r3, r4, r2
 8017806:	50a7      	str	r7, [r4, r2]
 8017808:	b107      	cbz	r7, 801780c <rshift+0x68>
 801780a:	3304      	adds	r3, #4
 801780c:	1b1a      	subs	r2, r3, r4
 801780e:	42a3      	cmp	r3, r4
 8017810:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017814:	bf08      	it	eq
 8017816:	2300      	moveq	r3, #0
 8017818:	6102      	str	r2, [r0, #16]
 801781a:	bf08      	it	eq
 801781c:	6143      	streq	r3, [r0, #20]
 801781e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017822:	f8dc c000 	ldr.w	ip, [ip]
 8017826:	fa0c fc08 	lsl.w	ip, ip, r8
 801782a:	ea4c 0707 	orr.w	r7, ip, r7
 801782e:	f849 7b04 	str.w	r7, [r9], #4
 8017832:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017836:	40cf      	lsrs	r7, r1
 8017838:	e7da      	b.n	80177f0 <rshift+0x4c>
 801783a:	f851 cb04 	ldr.w	ip, [r1], #4
 801783e:	f847 cf04 	str.w	ip, [r7, #4]!
 8017842:	e7c3      	b.n	80177cc <rshift+0x28>
 8017844:	4623      	mov	r3, r4
 8017846:	e7e1      	b.n	801780c <rshift+0x68>

08017848 <__hexdig_fun>:
 8017848:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801784c:	2b09      	cmp	r3, #9
 801784e:	d802      	bhi.n	8017856 <__hexdig_fun+0xe>
 8017850:	3820      	subs	r0, #32
 8017852:	b2c0      	uxtb	r0, r0
 8017854:	4770      	bx	lr
 8017856:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801785a:	2b05      	cmp	r3, #5
 801785c:	d801      	bhi.n	8017862 <__hexdig_fun+0x1a>
 801785e:	3847      	subs	r0, #71	@ 0x47
 8017860:	e7f7      	b.n	8017852 <__hexdig_fun+0xa>
 8017862:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017866:	2b05      	cmp	r3, #5
 8017868:	d801      	bhi.n	801786e <__hexdig_fun+0x26>
 801786a:	3827      	subs	r0, #39	@ 0x27
 801786c:	e7f1      	b.n	8017852 <__hexdig_fun+0xa>
 801786e:	2000      	movs	r0, #0
 8017870:	4770      	bx	lr
	...

08017874 <__gethex>:
 8017874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017878:	b085      	sub	sp, #20
 801787a:	468a      	mov	sl, r1
 801787c:	9302      	str	r3, [sp, #8]
 801787e:	680b      	ldr	r3, [r1, #0]
 8017880:	9001      	str	r0, [sp, #4]
 8017882:	4690      	mov	r8, r2
 8017884:	1c9c      	adds	r4, r3, #2
 8017886:	46a1      	mov	r9, r4
 8017888:	f814 0b01 	ldrb.w	r0, [r4], #1
 801788c:	2830      	cmp	r0, #48	@ 0x30
 801788e:	d0fa      	beq.n	8017886 <__gethex+0x12>
 8017890:	eba9 0303 	sub.w	r3, r9, r3
 8017894:	f1a3 0b02 	sub.w	fp, r3, #2
 8017898:	f7ff ffd6 	bl	8017848 <__hexdig_fun>
 801789c:	4605      	mov	r5, r0
 801789e:	2800      	cmp	r0, #0
 80178a0:	d168      	bne.n	8017974 <__gethex+0x100>
 80178a2:	49a0      	ldr	r1, [pc, #640]	@ (8017b24 <__gethex+0x2b0>)
 80178a4:	2201      	movs	r2, #1
 80178a6:	4648      	mov	r0, r9
 80178a8:	f7ff ff10 	bl	80176cc <strncmp>
 80178ac:	4607      	mov	r7, r0
 80178ae:	2800      	cmp	r0, #0
 80178b0:	d167      	bne.n	8017982 <__gethex+0x10e>
 80178b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80178b6:	4626      	mov	r6, r4
 80178b8:	f7ff ffc6 	bl	8017848 <__hexdig_fun>
 80178bc:	2800      	cmp	r0, #0
 80178be:	d062      	beq.n	8017986 <__gethex+0x112>
 80178c0:	4623      	mov	r3, r4
 80178c2:	7818      	ldrb	r0, [r3, #0]
 80178c4:	2830      	cmp	r0, #48	@ 0x30
 80178c6:	4699      	mov	r9, r3
 80178c8:	f103 0301 	add.w	r3, r3, #1
 80178cc:	d0f9      	beq.n	80178c2 <__gethex+0x4e>
 80178ce:	f7ff ffbb 	bl	8017848 <__hexdig_fun>
 80178d2:	fab0 f580 	clz	r5, r0
 80178d6:	096d      	lsrs	r5, r5, #5
 80178d8:	f04f 0b01 	mov.w	fp, #1
 80178dc:	464a      	mov	r2, r9
 80178de:	4616      	mov	r6, r2
 80178e0:	3201      	adds	r2, #1
 80178e2:	7830      	ldrb	r0, [r6, #0]
 80178e4:	f7ff ffb0 	bl	8017848 <__hexdig_fun>
 80178e8:	2800      	cmp	r0, #0
 80178ea:	d1f8      	bne.n	80178de <__gethex+0x6a>
 80178ec:	498d      	ldr	r1, [pc, #564]	@ (8017b24 <__gethex+0x2b0>)
 80178ee:	2201      	movs	r2, #1
 80178f0:	4630      	mov	r0, r6
 80178f2:	f7ff feeb 	bl	80176cc <strncmp>
 80178f6:	2800      	cmp	r0, #0
 80178f8:	d13f      	bne.n	801797a <__gethex+0x106>
 80178fa:	b944      	cbnz	r4, 801790e <__gethex+0x9a>
 80178fc:	1c74      	adds	r4, r6, #1
 80178fe:	4622      	mov	r2, r4
 8017900:	4616      	mov	r6, r2
 8017902:	3201      	adds	r2, #1
 8017904:	7830      	ldrb	r0, [r6, #0]
 8017906:	f7ff ff9f 	bl	8017848 <__hexdig_fun>
 801790a:	2800      	cmp	r0, #0
 801790c:	d1f8      	bne.n	8017900 <__gethex+0x8c>
 801790e:	1ba4      	subs	r4, r4, r6
 8017910:	00a7      	lsls	r7, r4, #2
 8017912:	7833      	ldrb	r3, [r6, #0]
 8017914:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017918:	2b50      	cmp	r3, #80	@ 0x50
 801791a:	d13e      	bne.n	801799a <__gethex+0x126>
 801791c:	7873      	ldrb	r3, [r6, #1]
 801791e:	2b2b      	cmp	r3, #43	@ 0x2b
 8017920:	d033      	beq.n	801798a <__gethex+0x116>
 8017922:	2b2d      	cmp	r3, #45	@ 0x2d
 8017924:	d034      	beq.n	8017990 <__gethex+0x11c>
 8017926:	1c71      	adds	r1, r6, #1
 8017928:	2400      	movs	r4, #0
 801792a:	7808      	ldrb	r0, [r1, #0]
 801792c:	f7ff ff8c 	bl	8017848 <__hexdig_fun>
 8017930:	1e43      	subs	r3, r0, #1
 8017932:	b2db      	uxtb	r3, r3
 8017934:	2b18      	cmp	r3, #24
 8017936:	d830      	bhi.n	801799a <__gethex+0x126>
 8017938:	f1a0 0210 	sub.w	r2, r0, #16
 801793c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017940:	f7ff ff82 	bl	8017848 <__hexdig_fun>
 8017944:	f100 3cff 	add.w	ip, r0, #4294967295
 8017948:	fa5f fc8c 	uxtb.w	ip, ip
 801794c:	f1bc 0f18 	cmp.w	ip, #24
 8017950:	f04f 030a 	mov.w	r3, #10
 8017954:	d91e      	bls.n	8017994 <__gethex+0x120>
 8017956:	b104      	cbz	r4, 801795a <__gethex+0xe6>
 8017958:	4252      	negs	r2, r2
 801795a:	4417      	add	r7, r2
 801795c:	f8ca 1000 	str.w	r1, [sl]
 8017960:	b1ed      	cbz	r5, 801799e <__gethex+0x12a>
 8017962:	f1bb 0f00 	cmp.w	fp, #0
 8017966:	bf0c      	ite	eq
 8017968:	2506      	moveq	r5, #6
 801796a:	2500      	movne	r5, #0
 801796c:	4628      	mov	r0, r5
 801796e:	b005      	add	sp, #20
 8017970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017974:	2500      	movs	r5, #0
 8017976:	462c      	mov	r4, r5
 8017978:	e7b0      	b.n	80178dc <__gethex+0x68>
 801797a:	2c00      	cmp	r4, #0
 801797c:	d1c7      	bne.n	801790e <__gethex+0x9a>
 801797e:	4627      	mov	r7, r4
 8017980:	e7c7      	b.n	8017912 <__gethex+0x9e>
 8017982:	464e      	mov	r6, r9
 8017984:	462f      	mov	r7, r5
 8017986:	2501      	movs	r5, #1
 8017988:	e7c3      	b.n	8017912 <__gethex+0x9e>
 801798a:	2400      	movs	r4, #0
 801798c:	1cb1      	adds	r1, r6, #2
 801798e:	e7cc      	b.n	801792a <__gethex+0xb6>
 8017990:	2401      	movs	r4, #1
 8017992:	e7fb      	b.n	801798c <__gethex+0x118>
 8017994:	fb03 0002 	mla	r0, r3, r2, r0
 8017998:	e7ce      	b.n	8017938 <__gethex+0xc4>
 801799a:	4631      	mov	r1, r6
 801799c:	e7de      	b.n	801795c <__gethex+0xe8>
 801799e:	eba6 0309 	sub.w	r3, r6, r9
 80179a2:	3b01      	subs	r3, #1
 80179a4:	4629      	mov	r1, r5
 80179a6:	2b07      	cmp	r3, #7
 80179a8:	dc0a      	bgt.n	80179c0 <__gethex+0x14c>
 80179aa:	9801      	ldr	r0, [sp, #4]
 80179ac:	f7fd ff64 	bl	8015878 <_Balloc>
 80179b0:	4604      	mov	r4, r0
 80179b2:	b940      	cbnz	r0, 80179c6 <__gethex+0x152>
 80179b4:	4b5c      	ldr	r3, [pc, #368]	@ (8017b28 <__gethex+0x2b4>)
 80179b6:	4602      	mov	r2, r0
 80179b8:	21e4      	movs	r1, #228	@ 0xe4
 80179ba:	485c      	ldr	r0, [pc, #368]	@ (8017b2c <__gethex+0x2b8>)
 80179bc:	f7ff fec0 	bl	8017740 <__assert_func>
 80179c0:	3101      	adds	r1, #1
 80179c2:	105b      	asrs	r3, r3, #1
 80179c4:	e7ef      	b.n	80179a6 <__gethex+0x132>
 80179c6:	f100 0a14 	add.w	sl, r0, #20
 80179ca:	2300      	movs	r3, #0
 80179cc:	4655      	mov	r5, sl
 80179ce:	469b      	mov	fp, r3
 80179d0:	45b1      	cmp	r9, r6
 80179d2:	d337      	bcc.n	8017a44 <__gethex+0x1d0>
 80179d4:	f845 bb04 	str.w	fp, [r5], #4
 80179d8:	eba5 050a 	sub.w	r5, r5, sl
 80179dc:	10ad      	asrs	r5, r5, #2
 80179de:	6125      	str	r5, [r4, #16]
 80179e0:	4658      	mov	r0, fp
 80179e2:	f7fe f83b 	bl	8015a5c <__hi0bits>
 80179e6:	016d      	lsls	r5, r5, #5
 80179e8:	f8d8 6000 	ldr.w	r6, [r8]
 80179ec:	1a2d      	subs	r5, r5, r0
 80179ee:	42b5      	cmp	r5, r6
 80179f0:	dd54      	ble.n	8017a9c <__gethex+0x228>
 80179f2:	1bad      	subs	r5, r5, r6
 80179f4:	4629      	mov	r1, r5
 80179f6:	4620      	mov	r0, r4
 80179f8:	f7fe fbcf 	bl	801619a <__any_on>
 80179fc:	4681      	mov	r9, r0
 80179fe:	b178      	cbz	r0, 8017a20 <__gethex+0x1ac>
 8017a00:	1e6b      	subs	r3, r5, #1
 8017a02:	1159      	asrs	r1, r3, #5
 8017a04:	f003 021f 	and.w	r2, r3, #31
 8017a08:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017a0c:	f04f 0901 	mov.w	r9, #1
 8017a10:	fa09 f202 	lsl.w	r2, r9, r2
 8017a14:	420a      	tst	r2, r1
 8017a16:	d003      	beq.n	8017a20 <__gethex+0x1ac>
 8017a18:	454b      	cmp	r3, r9
 8017a1a:	dc36      	bgt.n	8017a8a <__gethex+0x216>
 8017a1c:	f04f 0902 	mov.w	r9, #2
 8017a20:	4629      	mov	r1, r5
 8017a22:	4620      	mov	r0, r4
 8017a24:	f7ff febe 	bl	80177a4 <rshift>
 8017a28:	442f      	add	r7, r5
 8017a2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017a2e:	42bb      	cmp	r3, r7
 8017a30:	da42      	bge.n	8017ab8 <__gethex+0x244>
 8017a32:	9801      	ldr	r0, [sp, #4]
 8017a34:	4621      	mov	r1, r4
 8017a36:	f7fd ff5f 	bl	80158f8 <_Bfree>
 8017a3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	6013      	str	r3, [r2, #0]
 8017a40:	25a3      	movs	r5, #163	@ 0xa3
 8017a42:	e793      	b.n	801796c <__gethex+0xf8>
 8017a44:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017a48:	2a2e      	cmp	r2, #46	@ 0x2e
 8017a4a:	d012      	beq.n	8017a72 <__gethex+0x1fe>
 8017a4c:	2b20      	cmp	r3, #32
 8017a4e:	d104      	bne.n	8017a5a <__gethex+0x1e6>
 8017a50:	f845 bb04 	str.w	fp, [r5], #4
 8017a54:	f04f 0b00 	mov.w	fp, #0
 8017a58:	465b      	mov	r3, fp
 8017a5a:	7830      	ldrb	r0, [r6, #0]
 8017a5c:	9303      	str	r3, [sp, #12]
 8017a5e:	f7ff fef3 	bl	8017848 <__hexdig_fun>
 8017a62:	9b03      	ldr	r3, [sp, #12]
 8017a64:	f000 000f 	and.w	r0, r0, #15
 8017a68:	4098      	lsls	r0, r3
 8017a6a:	ea4b 0b00 	orr.w	fp, fp, r0
 8017a6e:	3304      	adds	r3, #4
 8017a70:	e7ae      	b.n	80179d0 <__gethex+0x15c>
 8017a72:	45b1      	cmp	r9, r6
 8017a74:	d8ea      	bhi.n	8017a4c <__gethex+0x1d8>
 8017a76:	492b      	ldr	r1, [pc, #172]	@ (8017b24 <__gethex+0x2b0>)
 8017a78:	9303      	str	r3, [sp, #12]
 8017a7a:	2201      	movs	r2, #1
 8017a7c:	4630      	mov	r0, r6
 8017a7e:	f7ff fe25 	bl	80176cc <strncmp>
 8017a82:	9b03      	ldr	r3, [sp, #12]
 8017a84:	2800      	cmp	r0, #0
 8017a86:	d1e1      	bne.n	8017a4c <__gethex+0x1d8>
 8017a88:	e7a2      	b.n	80179d0 <__gethex+0x15c>
 8017a8a:	1ea9      	subs	r1, r5, #2
 8017a8c:	4620      	mov	r0, r4
 8017a8e:	f7fe fb84 	bl	801619a <__any_on>
 8017a92:	2800      	cmp	r0, #0
 8017a94:	d0c2      	beq.n	8017a1c <__gethex+0x1a8>
 8017a96:	f04f 0903 	mov.w	r9, #3
 8017a9a:	e7c1      	b.n	8017a20 <__gethex+0x1ac>
 8017a9c:	da09      	bge.n	8017ab2 <__gethex+0x23e>
 8017a9e:	1b75      	subs	r5, r6, r5
 8017aa0:	4621      	mov	r1, r4
 8017aa2:	9801      	ldr	r0, [sp, #4]
 8017aa4:	462a      	mov	r2, r5
 8017aa6:	f7fe f93f 	bl	8015d28 <__lshift>
 8017aaa:	1b7f      	subs	r7, r7, r5
 8017aac:	4604      	mov	r4, r0
 8017aae:	f100 0a14 	add.w	sl, r0, #20
 8017ab2:	f04f 0900 	mov.w	r9, #0
 8017ab6:	e7b8      	b.n	8017a2a <__gethex+0x1b6>
 8017ab8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017abc:	42bd      	cmp	r5, r7
 8017abe:	dd6f      	ble.n	8017ba0 <__gethex+0x32c>
 8017ac0:	1bed      	subs	r5, r5, r7
 8017ac2:	42ae      	cmp	r6, r5
 8017ac4:	dc34      	bgt.n	8017b30 <__gethex+0x2bc>
 8017ac6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017aca:	2b02      	cmp	r3, #2
 8017acc:	d022      	beq.n	8017b14 <__gethex+0x2a0>
 8017ace:	2b03      	cmp	r3, #3
 8017ad0:	d024      	beq.n	8017b1c <__gethex+0x2a8>
 8017ad2:	2b01      	cmp	r3, #1
 8017ad4:	d115      	bne.n	8017b02 <__gethex+0x28e>
 8017ad6:	42ae      	cmp	r6, r5
 8017ad8:	d113      	bne.n	8017b02 <__gethex+0x28e>
 8017ada:	2e01      	cmp	r6, #1
 8017adc:	d10b      	bne.n	8017af6 <__gethex+0x282>
 8017ade:	9a02      	ldr	r2, [sp, #8]
 8017ae0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017ae4:	6013      	str	r3, [r2, #0]
 8017ae6:	2301      	movs	r3, #1
 8017ae8:	6123      	str	r3, [r4, #16]
 8017aea:	f8ca 3000 	str.w	r3, [sl]
 8017aee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017af0:	2562      	movs	r5, #98	@ 0x62
 8017af2:	601c      	str	r4, [r3, #0]
 8017af4:	e73a      	b.n	801796c <__gethex+0xf8>
 8017af6:	1e71      	subs	r1, r6, #1
 8017af8:	4620      	mov	r0, r4
 8017afa:	f7fe fb4e 	bl	801619a <__any_on>
 8017afe:	2800      	cmp	r0, #0
 8017b00:	d1ed      	bne.n	8017ade <__gethex+0x26a>
 8017b02:	9801      	ldr	r0, [sp, #4]
 8017b04:	4621      	mov	r1, r4
 8017b06:	f7fd fef7 	bl	80158f8 <_Bfree>
 8017b0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	6013      	str	r3, [r2, #0]
 8017b10:	2550      	movs	r5, #80	@ 0x50
 8017b12:	e72b      	b.n	801796c <__gethex+0xf8>
 8017b14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d1f3      	bne.n	8017b02 <__gethex+0x28e>
 8017b1a:	e7e0      	b.n	8017ade <__gethex+0x26a>
 8017b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d1dd      	bne.n	8017ade <__gethex+0x26a>
 8017b22:	e7ee      	b.n	8017b02 <__gethex+0x28e>
 8017b24:	08026228 	.word	0x08026228
 8017b28:	080260c1 	.word	0x080260c1
 8017b2c:	080263d6 	.word	0x080263d6
 8017b30:	1e6f      	subs	r7, r5, #1
 8017b32:	f1b9 0f00 	cmp.w	r9, #0
 8017b36:	d130      	bne.n	8017b9a <__gethex+0x326>
 8017b38:	b127      	cbz	r7, 8017b44 <__gethex+0x2d0>
 8017b3a:	4639      	mov	r1, r7
 8017b3c:	4620      	mov	r0, r4
 8017b3e:	f7fe fb2c 	bl	801619a <__any_on>
 8017b42:	4681      	mov	r9, r0
 8017b44:	117a      	asrs	r2, r7, #5
 8017b46:	2301      	movs	r3, #1
 8017b48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017b4c:	f007 071f 	and.w	r7, r7, #31
 8017b50:	40bb      	lsls	r3, r7
 8017b52:	4213      	tst	r3, r2
 8017b54:	4629      	mov	r1, r5
 8017b56:	4620      	mov	r0, r4
 8017b58:	bf18      	it	ne
 8017b5a:	f049 0902 	orrne.w	r9, r9, #2
 8017b5e:	f7ff fe21 	bl	80177a4 <rshift>
 8017b62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8017b66:	1b76      	subs	r6, r6, r5
 8017b68:	2502      	movs	r5, #2
 8017b6a:	f1b9 0f00 	cmp.w	r9, #0
 8017b6e:	d047      	beq.n	8017c00 <__gethex+0x38c>
 8017b70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017b74:	2b02      	cmp	r3, #2
 8017b76:	d015      	beq.n	8017ba4 <__gethex+0x330>
 8017b78:	2b03      	cmp	r3, #3
 8017b7a:	d017      	beq.n	8017bac <__gethex+0x338>
 8017b7c:	2b01      	cmp	r3, #1
 8017b7e:	d109      	bne.n	8017b94 <__gethex+0x320>
 8017b80:	f019 0f02 	tst.w	r9, #2
 8017b84:	d006      	beq.n	8017b94 <__gethex+0x320>
 8017b86:	f8da 3000 	ldr.w	r3, [sl]
 8017b8a:	ea49 0903 	orr.w	r9, r9, r3
 8017b8e:	f019 0f01 	tst.w	r9, #1
 8017b92:	d10e      	bne.n	8017bb2 <__gethex+0x33e>
 8017b94:	f045 0510 	orr.w	r5, r5, #16
 8017b98:	e032      	b.n	8017c00 <__gethex+0x38c>
 8017b9a:	f04f 0901 	mov.w	r9, #1
 8017b9e:	e7d1      	b.n	8017b44 <__gethex+0x2d0>
 8017ba0:	2501      	movs	r5, #1
 8017ba2:	e7e2      	b.n	8017b6a <__gethex+0x2f6>
 8017ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017ba6:	f1c3 0301 	rsb	r3, r3, #1
 8017baa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d0f0      	beq.n	8017b94 <__gethex+0x320>
 8017bb2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017bb6:	f104 0314 	add.w	r3, r4, #20
 8017bba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017bbe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017bc2:	f04f 0c00 	mov.w	ip, #0
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8017bcc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017bd0:	d01b      	beq.n	8017c0a <__gethex+0x396>
 8017bd2:	3201      	adds	r2, #1
 8017bd4:	6002      	str	r2, [r0, #0]
 8017bd6:	2d02      	cmp	r5, #2
 8017bd8:	f104 0314 	add.w	r3, r4, #20
 8017bdc:	d13c      	bne.n	8017c58 <__gethex+0x3e4>
 8017bde:	f8d8 2000 	ldr.w	r2, [r8]
 8017be2:	3a01      	subs	r2, #1
 8017be4:	42b2      	cmp	r2, r6
 8017be6:	d109      	bne.n	8017bfc <__gethex+0x388>
 8017be8:	1171      	asrs	r1, r6, #5
 8017bea:	2201      	movs	r2, #1
 8017bec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017bf0:	f006 061f 	and.w	r6, r6, #31
 8017bf4:	fa02 f606 	lsl.w	r6, r2, r6
 8017bf8:	421e      	tst	r6, r3
 8017bfa:	d13a      	bne.n	8017c72 <__gethex+0x3fe>
 8017bfc:	f045 0520 	orr.w	r5, r5, #32
 8017c00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017c02:	601c      	str	r4, [r3, #0]
 8017c04:	9b02      	ldr	r3, [sp, #8]
 8017c06:	601f      	str	r7, [r3, #0]
 8017c08:	e6b0      	b.n	801796c <__gethex+0xf8>
 8017c0a:	4299      	cmp	r1, r3
 8017c0c:	f843 cc04 	str.w	ip, [r3, #-4]
 8017c10:	d8d9      	bhi.n	8017bc6 <__gethex+0x352>
 8017c12:	68a3      	ldr	r3, [r4, #8]
 8017c14:	459b      	cmp	fp, r3
 8017c16:	db17      	blt.n	8017c48 <__gethex+0x3d4>
 8017c18:	6861      	ldr	r1, [r4, #4]
 8017c1a:	9801      	ldr	r0, [sp, #4]
 8017c1c:	3101      	adds	r1, #1
 8017c1e:	f7fd fe2b 	bl	8015878 <_Balloc>
 8017c22:	4681      	mov	r9, r0
 8017c24:	b918      	cbnz	r0, 8017c2e <__gethex+0x3ba>
 8017c26:	4b1a      	ldr	r3, [pc, #104]	@ (8017c90 <__gethex+0x41c>)
 8017c28:	4602      	mov	r2, r0
 8017c2a:	2184      	movs	r1, #132	@ 0x84
 8017c2c:	e6c5      	b.n	80179ba <__gethex+0x146>
 8017c2e:	6922      	ldr	r2, [r4, #16]
 8017c30:	3202      	adds	r2, #2
 8017c32:	f104 010c 	add.w	r1, r4, #12
 8017c36:	0092      	lsls	r2, r2, #2
 8017c38:	300c      	adds	r0, #12
 8017c3a:	f7ff fd69 	bl	8017710 <memcpy>
 8017c3e:	4621      	mov	r1, r4
 8017c40:	9801      	ldr	r0, [sp, #4]
 8017c42:	f7fd fe59 	bl	80158f8 <_Bfree>
 8017c46:	464c      	mov	r4, r9
 8017c48:	6923      	ldr	r3, [r4, #16]
 8017c4a:	1c5a      	adds	r2, r3, #1
 8017c4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017c50:	6122      	str	r2, [r4, #16]
 8017c52:	2201      	movs	r2, #1
 8017c54:	615a      	str	r2, [r3, #20]
 8017c56:	e7be      	b.n	8017bd6 <__gethex+0x362>
 8017c58:	6922      	ldr	r2, [r4, #16]
 8017c5a:	455a      	cmp	r2, fp
 8017c5c:	dd0b      	ble.n	8017c76 <__gethex+0x402>
 8017c5e:	2101      	movs	r1, #1
 8017c60:	4620      	mov	r0, r4
 8017c62:	f7ff fd9f 	bl	80177a4 <rshift>
 8017c66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017c6a:	3701      	adds	r7, #1
 8017c6c:	42bb      	cmp	r3, r7
 8017c6e:	f6ff aee0 	blt.w	8017a32 <__gethex+0x1be>
 8017c72:	2501      	movs	r5, #1
 8017c74:	e7c2      	b.n	8017bfc <__gethex+0x388>
 8017c76:	f016 061f 	ands.w	r6, r6, #31
 8017c7a:	d0fa      	beq.n	8017c72 <__gethex+0x3fe>
 8017c7c:	4453      	add	r3, sl
 8017c7e:	f1c6 0620 	rsb	r6, r6, #32
 8017c82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017c86:	f7fd fee9 	bl	8015a5c <__hi0bits>
 8017c8a:	42b0      	cmp	r0, r6
 8017c8c:	dbe7      	blt.n	8017c5e <__gethex+0x3ea>
 8017c8e:	e7f0      	b.n	8017c72 <__gethex+0x3fe>
 8017c90:	080260c1 	.word	0x080260c1

08017c94 <L_shift>:
 8017c94:	f1c2 0208 	rsb	r2, r2, #8
 8017c98:	0092      	lsls	r2, r2, #2
 8017c9a:	b570      	push	{r4, r5, r6, lr}
 8017c9c:	f1c2 0620 	rsb	r6, r2, #32
 8017ca0:	6843      	ldr	r3, [r0, #4]
 8017ca2:	6804      	ldr	r4, [r0, #0]
 8017ca4:	fa03 f506 	lsl.w	r5, r3, r6
 8017ca8:	432c      	orrs	r4, r5
 8017caa:	40d3      	lsrs	r3, r2
 8017cac:	6004      	str	r4, [r0, #0]
 8017cae:	f840 3f04 	str.w	r3, [r0, #4]!
 8017cb2:	4288      	cmp	r0, r1
 8017cb4:	d3f4      	bcc.n	8017ca0 <L_shift+0xc>
 8017cb6:	bd70      	pop	{r4, r5, r6, pc}

08017cb8 <__match>:
 8017cb8:	b530      	push	{r4, r5, lr}
 8017cba:	6803      	ldr	r3, [r0, #0]
 8017cbc:	3301      	adds	r3, #1
 8017cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017cc2:	b914      	cbnz	r4, 8017cca <__match+0x12>
 8017cc4:	6003      	str	r3, [r0, #0]
 8017cc6:	2001      	movs	r0, #1
 8017cc8:	bd30      	pop	{r4, r5, pc}
 8017cca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8017cd2:	2d19      	cmp	r5, #25
 8017cd4:	bf98      	it	ls
 8017cd6:	3220      	addls	r2, #32
 8017cd8:	42a2      	cmp	r2, r4
 8017cda:	d0f0      	beq.n	8017cbe <__match+0x6>
 8017cdc:	2000      	movs	r0, #0
 8017cde:	e7f3      	b.n	8017cc8 <__match+0x10>

08017ce0 <__hexnan>:
 8017ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ce4:	680b      	ldr	r3, [r1, #0]
 8017ce6:	6801      	ldr	r1, [r0, #0]
 8017ce8:	115e      	asrs	r6, r3, #5
 8017cea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017cee:	f013 031f 	ands.w	r3, r3, #31
 8017cf2:	b087      	sub	sp, #28
 8017cf4:	bf18      	it	ne
 8017cf6:	3604      	addne	r6, #4
 8017cf8:	2500      	movs	r5, #0
 8017cfa:	1f37      	subs	r7, r6, #4
 8017cfc:	4682      	mov	sl, r0
 8017cfe:	4690      	mov	r8, r2
 8017d00:	9301      	str	r3, [sp, #4]
 8017d02:	f846 5c04 	str.w	r5, [r6, #-4]
 8017d06:	46b9      	mov	r9, r7
 8017d08:	463c      	mov	r4, r7
 8017d0a:	9502      	str	r5, [sp, #8]
 8017d0c:	46ab      	mov	fp, r5
 8017d0e:	784a      	ldrb	r2, [r1, #1]
 8017d10:	1c4b      	adds	r3, r1, #1
 8017d12:	9303      	str	r3, [sp, #12]
 8017d14:	b342      	cbz	r2, 8017d68 <__hexnan+0x88>
 8017d16:	4610      	mov	r0, r2
 8017d18:	9105      	str	r1, [sp, #20]
 8017d1a:	9204      	str	r2, [sp, #16]
 8017d1c:	f7ff fd94 	bl	8017848 <__hexdig_fun>
 8017d20:	2800      	cmp	r0, #0
 8017d22:	d151      	bne.n	8017dc8 <__hexnan+0xe8>
 8017d24:	9a04      	ldr	r2, [sp, #16]
 8017d26:	9905      	ldr	r1, [sp, #20]
 8017d28:	2a20      	cmp	r2, #32
 8017d2a:	d818      	bhi.n	8017d5e <__hexnan+0x7e>
 8017d2c:	9b02      	ldr	r3, [sp, #8]
 8017d2e:	459b      	cmp	fp, r3
 8017d30:	dd13      	ble.n	8017d5a <__hexnan+0x7a>
 8017d32:	454c      	cmp	r4, r9
 8017d34:	d206      	bcs.n	8017d44 <__hexnan+0x64>
 8017d36:	2d07      	cmp	r5, #7
 8017d38:	dc04      	bgt.n	8017d44 <__hexnan+0x64>
 8017d3a:	462a      	mov	r2, r5
 8017d3c:	4649      	mov	r1, r9
 8017d3e:	4620      	mov	r0, r4
 8017d40:	f7ff ffa8 	bl	8017c94 <L_shift>
 8017d44:	4544      	cmp	r4, r8
 8017d46:	d952      	bls.n	8017dee <__hexnan+0x10e>
 8017d48:	2300      	movs	r3, #0
 8017d4a:	f1a4 0904 	sub.w	r9, r4, #4
 8017d4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8017d52:	f8cd b008 	str.w	fp, [sp, #8]
 8017d56:	464c      	mov	r4, r9
 8017d58:	461d      	mov	r5, r3
 8017d5a:	9903      	ldr	r1, [sp, #12]
 8017d5c:	e7d7      	b.n	8017d0e <__hexnan+0x2e>
 8017d5e:	2a29      	cmp	r2, #41	@ 0x29
 8017d60:	d157      	bne.n	8017e12 <__hexnan+0x132>
 8017d62:	3102      	adds	r1, #2
 8017d64:	f8ca 1000 	str.w	r1, [sl]
 8017d68:	f1bb 0f00 	cmp.w	fp, #0
 8017d6c:	d051      	beq.n	8017e12 <__hexnan+0x132>
 8017d6e:	454c      	cmp	r4, r9
 8017d70:	d206      	bcs.n	8017d80 <__hexnan+0xa0>
 8017d72:	2d07      	cmp	r5, #7
 8017d74:	dc04      	bgt.n	8017d80 <__hexnan+0xa0>
 8017d76:	462a      	mov	r2, r5
 8017d78:	4649      	mov	r1, r9
 8017d7a:	4620      	mov	r0, r4
 8017d7c:	f7ff ff8a 	bl	8017c94 <L_shift>
 8017d80:	4544      	cmp	r4, r8
 8017d82:	d936      	bls.n	8017df2 <__hexnan+0x112>
 8017d84:	f1a8 0204 	sub.w	r2, r8, #4
 8017d88:	4623      	mov	r3, r4
 8017d8a:	f853 1b04 	ldr.w	r1, [r3], #4
 8017d8e:	f842 1f04 	str.w	r1, [r2, #4]!
 8017d92:	429f      	cmp	r7, r3
 8017d94:	d2f9      	bcs.n	8017d8a <__hexnan+0xaa>
 8017d96:	1b3b      	subs	r3, r7, r4
 8017d98:	f023 0303 	bic.w	r3, r3, #3
 8017d9c:	3304      	adds	r3, #4
 8017d9e:	3401      	adds	r4, #1
 8017da0:	3e03      	subs	r6, #3
 8017da2:	42b4      	cmp	r4, r6
 8017da4:	bf88      	it	hi
 8017da6:	2304      	movhi	r3, #4
 8017da8:	4443      	add	r3, r8
 8017daa:	2200      	movs	r2, #0
 8017dac:	f843 2b04 	str.w	r2, [r3], #4
 8017db0:	429f      	cmp	r7, r3
 8017db2:	d2fb      	bcs.n	8017dac <__hexnan+0xcc>
 8017db4:	683b      	ldr	r3, [r7, #0]
 8017db6:	b91b      	cbnz	r3, 8017dc0 <__hexnan+0xe0>
 8017db8:	4547      	cmp	r7, r8
 8017dba:	d128      	bne.n	8017e0e <__hexnan+0x12e>
 8017dbc:	2301      	movs	r3, #1
 8017dbe:	603b      	str	r3, [r7, #0]
 8017dc0:	2005      	movs	r0, #5
 8017dc2:	b007      	add	sp, #28
 8017dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dc8:	3501      	adds	r5, #1
 8017dca:	2d08      	cmp	r5, #8
 8017dcc:	f10b 0b01 	add.w	fp, fp, #1
 8017dd0:	dd06      	ble.n	8017de0 <__hexnan+0x100>
 8017dd2:	4544      	cmp	r4, r8
 8017dd4:	d9c1      	bls.n	8017d5a <__hexnan+0x7a>
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	f844 3c04 	str.w	r3, [r4, #-4]
 8017ddc:	2501      	movs	r5, #1
 8017dde:	3c04      	subs	r4, #4
 8017de0:	6822      	ldr	r2, [r4, #0]
 8017de2:	f000 000f 	and.w	r0, r0, #15
 8017de6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017dea:	6020      	str	r0, [r4, #0]
 8017dec:	e7b5      	b.n	8017d5a <__hexnan+0x7a>
 8017dee:	2508      	movs	r5, #8
 8017df0:	e7b3      	b.n	8017d5a <__hexnan+0x7a>
 8017df2:	9b01      	ldr	r3, [sp, #4]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d0dd      	beq.n	8017db4 <__hexnan+0xd4>
 8017df8:	f1c3 0320 	rsb	r3, r3, #32
 8017dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8017e00:	40da      	lsrs	r2, r3
 8017e02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017e06:	4013      	ands	r3, r2
 8017e08:	f846 3c04 	str.w	r3, [r6, #-4]
 8017e0c:	e7d2      	b.n	8017db4 <__hexnan+0xd4>
 8017e0e:	3f04      	subs	r7, #4
 8017e10:	e7d0      	b.n	8017db4 <__hexnan+0xd4>
 8017e12:	2004      	movs	r0, #4
 8017e14:	e7d5      	b.n	8017dc2 <__hexnan+0xe2>

08017e16 <__ascii_mbtowc>:
 8017e16:	b082      	sub	sp, #8
 8017e18:	b901      	cbnz	r1, 8017e1c <__ascii_mbtowc+0x6>
 8017e1a:	a901      	add	r1, sp, #4
 8017e1c:	b142      	cbz	r2, 8017e30 <__ascii_mbtowc+0x1a>
 8017e1e:	b14b      	cbz	r3, 8017e34 <__ascii_mbtowc+0x1e>
 8017e20:	7813      	ldrb	r3, [r2, #0]
 8017e22:	600b      	str	r3, [r1, #0]
 8017e24:	7812      	ldrb	r2, [r2, #0]
 8017e26:	1e10      	subs	r0, r2, #0
 8017e28:	bf18      	it	ne
 8017e2a:	2001      	movne	r0, #1
 8017e2c:	b002      	add	sp, #8
 8017e2e:	4770      	bx	lr
 8017e30:	4610      	mov	r0, r2
 8017e32:	e7fb      	b.n	8017e2c <__ascii_mbtowc+0x16>
 8017e34:	f06f 0001 	mvn.w	r0, #1
 8017e38:	e7f8      	b.n	8017e2c <__ascii_mbtowc+0x16>

08017e3a <_realloc_r>:
 8017e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e3e:	4680      	mov	r8, r0
 8017e40:	4615      	mov	r5, r2
 8017e42:	460c      	mov	r4, r1
 8017e44:	b921      	cbnz	r1, 8017e50 <_realloc_r+0x16>
 8017e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e4a:	4611      	mov	r1, r2
 8017e4c:	f7fd bc88 	b.w	8015760 <_malloc_r>
 8017e50:	b92a      	cbnz	r2, 8017e5e <_realloc_r+0x24>
 8017e52:	f7fd fc11 	bl	8015678 <_free_r>
 8017e56:	2400      	movs	r4, #0
 8017e58:	4620      	mov	r0, r4
 8017e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e5e:	f000 f8c4 	bl	8017fea <_malloc_usable_size_r>
 8017e62:	4285      	cmp	r5, r0
 8017e64:	4606      	mov	r6, r0
 8017e66:	d802      	bhi.n	8017e6e <_realloc_r+0x34>
 8017e68:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017e6c:	d8f4      	bhi.n	8017e58 <_realloc_r+0x1e>
 8017e6e:	4629      	mov	r1, r5
 8017e70:	4640      	mov	r0, r8
 8017e72:	f7fd fc75 	bl	8015760 <_malloc_r>
 8017e76:	4607      	mov	r7, r0
 8017e78:	2800      	cmp	r0, #0
 8017e7a:	d0ec      	beq.n	8017e56 <_realloc_r+0x1c>
 8017e7c:	42b5      	cmp	r5, r6
 8017e7e:	462a      	mov	r2, r5
 8017e80:	4621      	mov	r1, r4
 8017e82:	bf28      	it	cs
 8017e84:	4632      	movcs	r2, r6
 8017e86:	f7ff fc43 	bl	8017710 <memcpy>
 8017e8a:	4621      	mov	r1, r4
 8017e8c:	4640      	mov	r0, r8
 8017e8e:	f7fd fbf3 	bl	8015678 <_free_r>
 8017e92:	463c      	mov	r4, r7
 8017e94:	e7e0      	b.n	8017e58 <_realloc_r+0x1e>

08017e96 <__ascii_wctomb>:
 8017e96:	4603      	mov	r3, r0
 8017e98:	4608      	mov	r0, r1
 8017e9a:	b141      	cbz	r1, 8017eae <__ascii_wctomb+0x18>
 8017e9c:	2aff      	cmp	r2, #255	@ 0xff
 8017e9e:	d904      	bls.n	8017eaa <__ascii_wctomb+0x14>
 8017ea0:	228a      	movs	r2, #138	@ 0x8a
 8017ea2:	601a      	str	r2, [r3, #0]
 8017ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8017ea8:	4770      	bx	lr
 8017eaa:	700a      	strb	r2, [r1, #0]
 8017eac:	2001      	movs	r0, #1
 8017eae:	4770      	bx	lr

08017eb0 <fiprintf>:
 8017eb0:	b40e      	push	{r1, r2, r3}
 8017eb2:	b503      	push	{r0, r1, lr}
 8017eb4:	4601      	mov	r1, r0
 8017eb6:	ab03      	add	r3, sp, #12
 8017eb8:	4805      	ldr	r0, [pc, #20]	@ (8017ed0 <fiprintf+0x20>)
 8017eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ebe:	6800      	ldr	r0, [r0, #0]
 8017ec0:	9301      	str	r3, [sp, #4]
 8017ec2:	f7ff f991 	bl	80171e8 <_vfiprintf_r>
 8017ec6:	b002      	add	sp, #8
 8017ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ecc:	b003      	add	sp, #12
 8017ece:	4770      	bx	lr
 8017ed0:	200001d4 	.word	0x200001d4

08017ed4 <__swhatbuf_r>:
 8017ed4:	b570      	push	{r4, r5, r6, lr}
 8017ed6:	460c      	mov	r4, r1
 8017ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017edc:	2900      	cmp	r1, #0
 8017ede:	b096      	sub	sp, #88	@ 0x58
 8017ee0:	4615      	mov	r5, r2
 8017ee2:	461e      	mov	r6, r3
 8017ee4:	da0d      	bge.n	8017f02 <__swhatbuf_r+0x2e>
 8017ee6:	89a3      	ldrh	r3, [r4, #12]
 8017ee8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017eec:	f04f 0100 	mov.w	r1, #0
 8017ef0:	bf14      	ite	ne
 8017ef2:	2340      	movne	r3, #64	@ 0x40
 8017ef4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017ef8:	2000      	movs	r0, #0
 8017efa:	6031      	str	r1, [r6, #0]
 8017efc:	602b      	str	r3, [r5, #0]
 8017efe:	b016      	add	sp, #88	@ 0x58
 8017f00:	bd70      	pop	{r4, r5, r6, pc}
 8017f02:	466a      	mov	r2, sp
 8017f04:	f000 f848 	bl	8017f98 <_fstat_r>
 8017f08:	2800      	cmp	r0, #0
 8017f0a:	dbec      	blt.n	8017ee6 <__swhatbuf_r+0x12>
 8017f0c:	9901      	ldr	r1, [sp, #4]
 8017f0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017f12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017f16:	4259      	negs	r1, r3
 8017f18:	4159      	adcs	r1, r3
 8017f1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017f1e:	e7eb      	b.n	8017ef8 <__swhatbuf_r+0x24>

08017f20 <__smakebuf_r>:
 8017f20:	898b      	ldrh	r3, [r1, #12]
 8017f22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017f24:	079d      	lsls	r5, r3, #30
 8017f26:	4606      	mov	r6, r0
 8017f28:	460c      	mov	r4, r1
 8017f2a:	d507      	bpl.n	8017f3c <__smakebuf_r+0x1c>
 8017f2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017f30:	6023      	str	r3, [r4, #0]
 8017f32:	6123      	str	r3, [r4, #16]
 8017f34:	2301      	movs	r3, #1
 8017f36:	6163      	str	r3, [r4, #20]
 8017f38:	b003      	add	sp, #12
 8017f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f3c:	ab01      	add	r3, sp, #4
 8017f3e:	466a      	mov	r2, sp
 8017f40:	f7ff ffc8 	bl	8017ed4 <__swhatbuf_r>
 8017f44:	9f00      	ldr	r7, [sp, #0]
 8017f46:	4605      	mov	r5, r0
 8017f48:	4639      	mov	r1, r7
 8017f4a:	4630      	mov	r0, r6
 8017f4c:	f7fd fc08 	bl	8015760 <_malloc_r>
 8017f50:	b948      	cbnz	r0, 8017f66 <__smakebuf_r+0x46>
 8017f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f56:	059a      	lsls	r2, r3, #22
 8017f58:	d4ee      	bmi.n	8017f38 <__smakebuf_r+0x18>
 8017f5a:	f023 0303 	bic.w	r3, r3, #3
 8017f5e:	f043 0302 	orr.w	r3, r3, #2
 8017f62:	81a3      	strh	r3, [r4, #12]
 8017f64:	e7e2      	b.n	8017f2c <__smakebuf_r+0xc>
 8017f66:	89a3      	ldrh	r3, [r4, #12]
 8017f68:	6020      	str	r0, [r4, #0]
 8017f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017f6e:	81a3      	strh	r3, [r4, #12]
 8017f70:	9b01      	ldr	r3, [sp, #4]
 8017f72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017f76:	b15b      	cbz	r3, 8017f90 <__smakebuf_r+0x70>
 8017f78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f7c:	4630      	mov	r0, r6
 8017f7e:	f000 f81d 	bl	8017fbc <_isatty_r>
 8017f82:	b128      	cbz	r0, 8017f90 <__smakebuf_r+0x70>
 8017f84:	89a3      	ldrh	r3, [r4, #12]
 8017f86:	f023 0303 	bic.w	r3, r3, #3
 8017f8a:	f043 0301 	orr.w	r3, r3, #1
 8017f8e:	81a3      	strh	r3, [r4, #12]
 8017f90:	89a3      	ldrh	r3, [r4, #12]
 8017f92:	431d      	orrs	r5, r3
 8017f94:	81a5      	strh	r5, [r4, #12]
 8017f96:	e7cf      	b.n	8017f38 <__smakebuf_r+0x18>

08017f98 <_fstat_r>:
 8017f98:	b538      	push	{r3, r4, r5, lr}
 8017f9a:	4d07      	ldr	r5, [pc, #28]	@ (8017fb8 <_fstat_r+0x20>)
 8017f9c:	2300      	movs	r3, #0
 8017f9e:	4604      	mov	r4, r0
 8017fa0:	4608      	mov	r0, r1
 8017fa2:	4611      	mov	r1, r2
 8017fa4:	602b      	str	r3, [r5, #0]
 8017fa6:	f7ec f9c1 	bl	800432c <_fstat>
 8017faa:	1c43      	adds	r3, r0, #1
 8017fac:	d102      	bne.n	8017fb4 <_fstat_r+0x1c>
 8017fae:	682b      	ldr	r3, [r5, #0]
 8017fb0:	b103      	cbz	r3, 8017fb4 <_fstat_r+0x1c>
 8017fb2:	6023      	str	r3, [r4, #0]
 8017fb4:	bd38      	pop	{r3, r4, r5, pc}
 8017fb6:	bf00      	nop
 8017fb8:	20004fcc 	.word	0x20004fcc

08017fbc <_isatty_r>:
 8017fbc:	b538      	push	{r3, r4, r5, lr}
 8017fbe:	4d06      	ldr	r5, [pc, #24]	@ (8017fd8 <_isatty_r+0x1c>)
 8017fc0:	2300      	movs	r3, #0
 8017fc2:	4604      	mov	r4, r0
 8017fc4:	4608      	mov	r0, r1
 8017fc6:	602b      	str	r3, [r5, #0]
 8017fc8:	f7ec f9c0 	bl	800434c <_isatty>
 8017fcc:	1c43      	adds	r3, r0, #1
 8017fce:	d102      	bne.n	8017fd6 <_isatty_r+0x1a>
 8017fd0:	682b      	ldr	r3, [r5, #0]
 8017fd2:	b103      	cbz	r3, 8017fd6 <_isatty_r+0x1a>
 8017fd4:	6023      	str	r3, [r4, #0]
 8017fd6:	bd38      	pop	{r3, r4, r5, pc}
 8017fd8:	20004fcc 	.word	0x20004fcc

08017fdc <abort>:
 8017fdc:	b508      	push	{r3, lr}
 8017fde:	2006      	movs	r0, #6
 8017fe0:	f000 f834 	bl	801804c <raise>
 8017fe4:	2001      	movs	r0, #1
 8017fe6:	f7ec f951 	bl	800428c <_exit>

08017fea <_malloc_usable_size_r>:
 8017fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fee:	1f18      	subs	r0, r3, #4
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	bfbc      	itt	lt
 8017ff4:	580b      	ldrlt	r3, [r1, r0]
 8017ff6:	18c0      	addlt	r0, r0, r3
 8017ff8:	4770      	bx	lr

08017ffa <_raise_r>:
 8017ffa:	291f      	cmp	r1, #31
 8017ffc:	b538      	push	{r3, r4, r5, lr}
 8017ffe:	4605      	mov	r5, r0
 8018000:	460c      	mov	r4, r1
 8018002:	d904      	bls.n	801800e <_raise_r+0x14>
 8018004:	2316      	movs	r3, #22
 8018006:	6003      	str	r3, [r0, #0]
 8018008:	f04f 30ff 	mov.w	r0, #4294967295
 801800c:	bd38      	pop	{r3, r4, r5, pc}
 801800e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018010:	b112      	cbz	r2, 8018018 <_raise_r+0x1e>
 8018012:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018016:	b94b      	cbnz	r3, 801802c <_raise_r+0x32>
 8018018:	4628      	mov	r0, r5
 801801a:	f000 f831 	bl	8018080 <_getpid_r>
 801801e:	4622      	mov	r2, r4
 8018020:	4601      	mov	r1, r0
 8018022:	4628      	mov	r0, r5
 8018024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018028:	f000 b818 	b.w	801805c <_kill_r>
 801802c:	2b01      	cmp	r3, #1
 801802e:	d00a      	beq.n	8018046 <_raise_r+0x4c>
 8018030:	1c59      	adds	r1, r3, #1
 8018032:	d103      	bne.n	801803c <_raise_r+0x42>
 8018034:	2316      	movs	r3, #22
 8018036:	6003      	str	r3, [r0, #0]
 8018038:	2001      	movs	r0, #1
 801803a:	e7e7      	b.n	801800c <_raise_r+0x12>
 801803c:	2100      	movs	r1, #0
 801803e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018042:	4620      	mov	r0, r4
 8018044:	4798      	blx	r3
 8018046:	2000      	movs	r0, #0
 8018048:	e7e0      	b.n	801800c <_raise_r+0x12>
	...

0801804c <raise>:
 801804c:	4b02      	ldr	r3, [pc, #8]	@ (8018058 <raise+0xc>)
 801804e:	4601      	mov	r1, r0
 8018050:	6818      	ldr	r0, [r3, #0]
 8018052:	f7ff bfd2 	b.w	8017ffa <_raise_r>
 8018056:	bf00      	nop
 8018058:	200001d4 	.word	0x200001d4

0801805c <_kill_r>:
 801805c:	b538      	push	{r3, r4, r5, lr}
 801805e:	4d07      	ldr	r5, [pc, #28]	@ (801807c <_kill_r+0x20>)
 8018060:	2300      	movs	r3, #0
 8018062:	4604      	mov	r4, r0
 8018064:	4608      	mov	r0, r1
 8018066:	4611      	mov	r1, r2
 8018068:	602b      	str	r3, [r5, #0]
 801806a:	f7ec f8ff 	bl	800426c <_kill>
 801806e:	1c43      	adds	r3, r0, #1
 8018070:	d102      	bne.n	8018078 <_kill_r+0x1c>
 8018072:	682b      	ldr	r3, [r5, #0]
 8018074:	b103      	cbz	r3, 8018078 <_kill_r+0x1c>
 8018076:	6023      	str	r3, [r4, #0]
 8018078:	bd38      	pop	{r3, r4, r5, pc}
 801807a:	bf00      	nop
 801807c:	20004fcc 	.word	0x20004fcc

08018080 <_getpid_r>:
 8018080:	f7ec b8ec 	b.w	800425c <_getpid>

08018084 <_init>:
 8018084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018086:	bf00      	nop
 8018088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801808a:	bc08      	pop	{r3}
 801808c:	469e      	mov	lr, r3
 801808e:	4770      	bx	lr

08018090 <_fini>:
 8018090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018092:	bf00      	nop
 8018094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018096:	bc08      	pop	{r3}
 8018098:	469e      	mov	lr, r3
 801809a:	4770      	bx	lr
