
DPO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000187e4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f260  080189c8  080189c8  000199c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027c28  08027c28  000295c4  2**0
                  CONTENTS
  4 .ARM          00000008  08027c28  08027c28  00028c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027c30  08027c30  000295c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027c30  08027c30  00028c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08027c34  08027c34  00028c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005c4  20000000  08027c38  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012c80  200005c8  080281fc  000295c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20013248  080281fc  0002a248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000295c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034250  00000000  00000000  000295f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000067a7  00000000  00000000  0005d844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ba8  00000000  00000000  00063ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000021d4  00000000  00000000  00066b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000343df  00000000  00000000  00068d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a2d7  00000000  00000000  0009d14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014b910  00000000  00000000  000d7422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00222d32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d198  00000000  00000000  00222d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0022ff10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200005c8 	.word	0x200005c8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080189ac 	.word	0x080189ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200005cc 	.word	0x200005cc
 800021c:	080189ac 	.word	0x080189ac

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <handle_overflow>:
extern UART_HandleTypeDef DEBUG_UART;


uint32_t DEBUG_TICK_COUNT;

void handle_overflow(uint32_t *value, int32_t delta, uint32_t lower_limit, uint32_t upper_limit) {
 8001034:	b480      	push	{r7}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	603b      	str	r3, [r7, #0]
    if (delta >= 0) {
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db11      	blt.n	800106c <handle_overflow+0x38>
        // 当 delta 为正数，做加法操作，需要检查是否会超过上限
        if (upper_limit - *value < (uint32_t)delta) {
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	1ad2      	subs	r2, r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	429a      	cmp	r2, r3
 8001054:	d203      	bcs.n	800105e <handle_overflow+0x2a>
            // 如果加上 delta 会超过上限，将 value 设置为上限
            *value = upper_limit;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	601a      	str	r2, [r3, #0]
        } else {
            // 否则正常减去 delta 的绝对值
            *value -= abs_delta;
        }
    }
}
 800105c:	e01a      	b.n	8001094 <handle_overflow+0x60>
            *value += (uint32_t)delta;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	441a      	add	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	601a      	str	r2, [r3, #0]
}
 800106a:	e013      	b.n	8001094 <handle_overflow+0x60>
        uint32_t abs_delta = (uint32_t)(-delta);
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	425b      	negs	r3, r3
 8001070:	617b      	str	r3, [r7, #20]
        if (*value < lower_limit + abs_delta) {
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	440b      	add	r3, r1
 800107c:	429a      	cmp	r2, r3
 800107e:	d203      	bcs.n	8001088 <handle_overflow+0x54>
            *value = lower_limit;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]
}
 8001086:	e005      	b.n	8001094 <handle_overflow+0x60>
            *value -= abs_delta;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	1ad2      	subs	r2, r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	601a      	str	r2, [r3, #0]
}
 8001094:	bf00      	nop
 8001096:	371c      	adds	r7, #28
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <__io_putchar>:



#ifdef __GNUC__
int __io_putchar(int ch)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&hlpuart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80010a8:	1d39      	adds	r1, r7, #4
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	2201      	movs	r2, #1
 80010b0:	4803      	ldr	r0, [pc, #12]	@ (80010c0 <__io_putchar+0x20>)
 80010b2:	f00e fa11 	bl	800f4d8 <HAL_UART_Transmit>
    return ch;
 80010b6:	687b      	ldr	r3, [r7, #4]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000a54 	.word	0x20000a54

080010c4 <TLC5952_WriteBit>:
/**
 * @brief 发送单个 bit
 * @param bit 0 或 1
 */
void TLC5952_WriteBit(uint8_t bit)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
    if (bit)
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <TLC5952_WriteBit+0x1c>
        TLC5952_SIN_HIGH();
 80010d4:	2201      	movs	r2, #1
 80010d6:	2120      	movs	r1, #32
 80010d8:	480b      	ldr	r0, [pc, #44]	@ (8001108 <TLC5952_WriteBit+0x44>)
 80010da:	f007 fa6f 	bl	80085bc <HAL_GPIO_WritePin>
 80010de:	e004      	b.n	80010ea <TLC5952_WriteBit+0x26>
    else
        TLC5952_SIN_LOW();
 80010e0:	2200      	movs	r2, #0
 80010e2:	2120      	movs	r1, #32
 80010e4:	4808      	ldr	r0, [pc, #32]	@ (8001108 <TLC5952_WriteBit+0x44>)
 80010e6:	f007 fa69 	bl	80085bc <HAL_GPIO_WritePin>

    TLC5952_SCLK_HIGH();
 80010ea:	2201      	movs	r2, #1
 80010ec:	2108      	movs	r1, #8
 80010ee:	4806      	ldr	r0, [pc, #24]	@ (8001108 <TLC5952_WriteBit+0x44>)
 80010f0:	f007 fa64 	bl	80085bc <HAL_GPIO_WritePin>
    TLC5952_SCLK_LOW();
 80010f4:	2200      	movs	r2, #0
 80010f6:	2108      	movs	r1, #8
 80010f8:	4803      	ldr	r0, [pc, #12]	@ (8001108 <TLC5952_WriteBit+0x44>)
 80010fa:	f007 fa5f 	bl	80085bc <HAL_GPIO_WritePin>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	48000400 	.word	0x48000400

0800110c <TLC5952_WriteLED>:

/**
 * @brief 发送 24 位 LED 数据
 */
void TLC5952_WriteLED(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
    TLC5952_WriteBit(0);
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff ffd6 	bl	80010c4 <TLC5952_WriteBit>
    uint32_t *data = (uint32_t *)&allData;
 8001118:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <TLC5952_WriteLED+0x64>)
 800111a:	60bb      	str	r3, [r7, #8]
    for (int8_t i = 23; i >= 0; i--)
 800111c:	2317      	movs	r3, #23
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e013      	b.n	800114a <TLC5952_WriteLED+0x3e>
    {
        uint8_t currentBit = (*data >> i) & 0x01;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	fa22 f303 	lsr.w	r3, r2, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	71fb      	strb	r3, [r7, #7]
        TLC5952_WriteBit(currentBit);
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ffc3 	bl	80010c4 <TLC5952_WriteBit>
    for (int8_t i = 23; i >= 0; i--)
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	3b01      	subs	r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114e:	2b00      	cmp	r3, #0
 8001150:	dae7      	bge.n	8001122 <TLC5952_WriteLED+0x16>
    }
    TLC5952_LAT_HIGH();
 8001152:	2201      	movs	r2, #1
 8001154:	2110      	movs	r1, #16
 8001156:	4807      	ldr	r0, [pc, #28]	@ (8001174 <TLC5952_WriteLED+0x68>)
 8001158:	f007 fa30 	bl	80085bc <HAL_GPIO_WritePin>
    TLC5952_LAT_LOW();
 800115c:	2200      	movs	r2, #0
 800115e:	2110      	movs	r1, #16
 8001160:	4804      	ldr	r0, [pc, #16]	@ (8001174 <TLC5952_WriteLED+0x68>)
 8001162:	f007 fa2b 	bl	80085bc <HAL_GPIO_WritePin>
}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200005e8 	.word	0x200005e8
 8001174:	48000400 	.word	0x48000400

08001178 <TLC5952_WriteControl>:


/**
 * @brief 发送 24 位 控制 数据
 */
void TLC5952_WriteControl(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
    TLC5952_WriteBit(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f7ff ffa0 	bl	80010c4 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 8001184:	2306      	movs	r3, #6
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	e012      	b.n	80011b0 <TLC5952_WriteControl+0x38>
        TLC5952_WriteBit((allData.red_brightness >> i) & 0x01);
 800118a:	4b37      	ldr	r3, [pc, #220]	@ (8001268 <TLC5952_WriteControl+0xf0>)
 800118c:	78db      	ldrb	r3, [r3, #3]
 800118e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001192:	b2db      	uxtb	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	fa42 f303 	asr.w	r3, r2, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff8d 	bl	80010c4 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	dae9      	bge.n	800118a <TLC5952_WriteControl+0x12>
    }
    for (int i = 6; i >= 0; i--) {
 80011b6:	2306      	movs	r3, #6
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	e012      	b.n	80011e2 <TLC5952_WriteControl+0x6a>
        TLC5952_WriteBit((allData.green_brightness >> i) & 0x01);
 80011bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001268 <TLC5952_WriteControl+0xf0>)
 80011be:	791b      	ldrb	r3, [r3, #4]
 80011c0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	fa42 f303 	asr.w	r3, r2, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff74 	bl	80010c4 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	3b01      	subs	r3, #1
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	dae9      	bge.n	80011bc <TLC5952_WriteControl+0x44>
    }
    for (int i = 6; i >= 0; i--) {
 80011e8:	2306      	movs	r3, #6
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	e012      	b.n	8001214 <TLC5952_WriteControl+0x9c>
        TLC5952_WriteBit((allData.blue_brightness >> i) & 0x01);
 80011ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001268 <TLC5952_WriteControl+0xf0>)
 80011f0:	889b      	ldrh	r3, [r3, #4]
 80011f2:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	fa42 f303 	asr.w	r3, r2, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff5b 	bl	80010c4 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3b01      	subs	r3, #1
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	dae9      	bge.n	80011ee <TLC5952_WriteControl+0x76>
    }
    for (int i = 2; i >= 0; i--) {
 800121a:	2302      	movs	r3, #2
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	e012      	b.n	8001246 <TLC5952_WriteControl+0xce>
        TLC5952_WriteBit((allData.detection_voltage_select >> i) & 0x01);
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <TLC5952_WriteControl+0xf0>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f3c3 3382 	ubfx	r3, r3, #14, #3
 8001228:	b2db      	uxtb	r3, r3
 800122a:	461a      	mov	r2, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	fa42 f303 	asr.w	r3, r2, r3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff42 	bl	80010c4 <TLC5952_WriteBit>
    for (int i = 2; i >= 0; i--) {
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	3b01      	subs	r3, #1
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	dae9      	bge.n	8001220 <TLC5952_WriteControl+0xa8>
    }
    TLC5952_LAT_HIGH();
 800124c:	2201      	movs	r2, #1
 800124e:	2110      	movs	r1, #16
 8001250:	4806      	ldr	r0, [pc, #24]	@ (800126c <TLC5952_WriteControl+0xf4>)
 8001252:	f007 f9b3 	bl	80085bc <HAL_GPIO_WritePin>
    TLC5952_LAT_LOW();
 8001256:	2200      	movs	r2, #0
 8001258:	2110      	movs	r1, #16
 800125a:	4804      	ldr	r0, [pc, #16]	@ (800126c <TLC5952_WriteControl+0xf4>)
 800125c:	f007 f9ae 	bl	80085bc <HAL_GPIO_WritePin>
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200005e8 	.word	0x200005e8
 800126c:	48000400 	.word	0x48000400

08001270 <View_DoubaoWelcome>:
		ST7789_DrawCircle(90, 210, 10, WHITE);
		ST7789_DrawRectangle(140, 200, 160, 220, WHITE);
	}


void View_DoubaoWelcome(void){
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af04      	add	r7, sp, #16
		ST7789_DrawImage(10, 10, 160, 160, (uint16_t *)doubao);
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <View_DoubaoWelcome+0x38>)
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	23a0      	movs	r3, #160	@ 0xa0
 800127c:	22a0      	movs	r2, #160	@ 0xa0
 800127e:	210a      	movs	r1, #10
 8001280:	200a      	movs	r0, #10
 8001282:	f002 f9cd 	bl	8003620 <ST7789_DrawImage>
		ST7789_WriteString(0, 180, " !\"#$\%&\'\(\)", Han_Array32, WHITE, BLACK);
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <View_DoubaoWelcome+0x3c>)
 8001288:	2200      	movs	r2, #0
 800128a:	9202      	str	r2, [sp, #8]
 800128c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001290:	9201      	str	r2, [sp, #4]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	9200      	str	r2, [sp, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a05      	ldr	r2, [pc, #20]	@ (80012b0 <View_DoubaoWelcome+0x40>)
 800129a:	21b4      	movs	r1, #180	@ 0xb4
 800129c:	2000      	movs	r0, #0
 800129e:	f002 fa78 	bl	8003792 <ST7789_WriteString>
//		ST7789_WriteString(170, 180, "", Han_Array, WHITE, BLACK);
	}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	0801ad38 	.word	0x0801ad38
 80012ac:	20000010 	.word	0x20000010
 80012b0:	080189c8 	.word	0x080189c8
 80012b4:	00000000 	.word	0x00000000

080012b8 <View_Config>:
	ST7789_WriteString(200, 220, &BUFFER_Display, Font_11x18, WHITE, BLACK);

	}


void View_Config(void){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af04      	add	r7, sp, #16

//	ST7789_Fill_Color(WHITE);
	sprintf(&BUFFER_Display,"ENC1:%5d",htim4.Instance->CNT);
 80012be:	4ba8      	ldr	r3, [pc, #672]	@ (8001560 <View_Config+0x2a8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c4:	461a      	mov	r2, r3
 80012c6:	49a7      	ldr	r1, [pc, #668]	@ (8001564 <View_Config+0x2ac>)
 80012c8:	48a7      	ldr	r0, [pc, #668]	@ (8001568 <View_Config+0x2b0>)
 80012ca:	f013 ff33 	bl	8015134 <siprintf>
	ST7789_WriteString(10, 10, "CONFIG", Font_16x26, WHITE, BLACK);
 80012ce:	4ba7      	ldr	r3, [pc, #668]	@ (800156c <View_Config+0x2b4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	9202      	str	r2, [sp, #8]
 80012d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012d8:	9201      	str	r2, [sp, #4]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	9200      	str	r2, [sp, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4aa3      	ldr	r2, [pc, #652]	@ (8001570 <View_Config+0x2b8>)
 80012e2:	210a      	movs	r1, #10
 80012e4:	200a      	movs	r0, #10
 80012e6:	f002 fa54 	bl	8003792 <ST7789_WriteString>
	sprintf(&BUFFER_Display,"ARGB:%5d",WS2812_Brightness);
 80012ea:	4ba2      	ldr	r3, [pc, #648]	@ (8001574 <View_Config+0x2bc>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	49a1      	ldr	r1, [pc, #644]	@ (8001578 <View_Config+0x2c0>)
 80012f2:	489d      	ldr	r0, [pc, #628]	@ (8001568 <View_Config+0x2b0>)
 80012f4:	f013 ff1e 	bl	8015134 <siprintf>
	ST7789_WriteString(10, 40, &BUFFER_Display, Font_11x18, WHITE, BLACK);
 80012f8:	4ba0      	ldr	r3, [pc, #640]	@ (800157c <View_Config+0x2c4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	9202      	str	r2, [sp, #8]
 80012fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001302:	9201      	str	r2, [sp, #4]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	9200      	str	r2, [sp, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a97      	ldr	r2, [pc, #604]	@ (8001568 <View_Config+0x2b0>)
 800130c:	2128      	movs	r1, #40	@ 0x28
 800130e:	200a      	movs	r0, #10
 8001310:	f002 fa3f 	bl	8003792 <ST7789_WriteString>
	sprintf(&BUFFER_Display,"LCD :%5d",htim8.Instance->CCR1);
 8001314:	4b9a      	ldr	r3, [pc, #616]	@ (8001580 <View_Config+0x2c8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800131a:	461a      	mov	r2, r3
 800131c:	4999      	ldr	r1, [pc, #612]	@ (8001584 <View_Config+0x2cc>)
 800131e:	4892      	ldr	r0, [pc, #584]	@ (8001568 <View_Config+0x2b0>)
 8001320:	f013 ff08 	bl	8015134 <siprintf>
	ST7789_WriteString(10, 60, &BUFFER_Display, Font_11x18, WHITE, BLACK);
 8001324:	4b95      	ldr	r3, [pc, #596]	@ (800157c <View_Config+0x2c4>)
 8001326:	2200      	movs	r2, #0
 8001328:	9202      	str	r2, [sp, #8]
 800132a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800132e:	9201      	str	r2, [sp, #4]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	9200      	str	r2, [sp, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a8c      	ldr	r2, [pc, #560]	@ (8001568 <View_Config+0x2b0>)
 8001338:	213c      	movs	r1, #60	@ 0x3c
 800133a:	200a      	movs	r0, #10
 800133c:	f002 fa29 	bl	8003792 <ST7789_WriteString>

	sprintf(&BUFFER_Display,"AMP1:%5d",FEAnalog.CD_CH1);
 8001340:	4b91      	ldr	r3, [pc, #580]	@ (8001588 <View_Config+0x2d0>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	461a      	mov	r2, r3
 8001346:	4991      	ldr	r1, [pc, #580]	@ (800158c <View_Config+0x2d4>)
 8001348:	4887      	ldr	r0, [pc, #540]	@ (8001568 <View_Config+0x2b0>)
 800134a:	f013 fef3 	bl	8015134 <siprintf>
	ST7789_WriteString(10, 80, &BUFFER_Display, Font_11x18, WHITE, BLACK);
 800134e:	4b8b      	ldr	r3, [pc, #556]	@ (800157c <View_Config+0x2c4>)
 8001350:	2200      	movs	r2, #0
 8001352:	9202      	str	r2, [sp, #8]
 8001354:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001358:	9201      	str	r2, [sp, #4]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	9200      	str	r2, [sp, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a81      	ldr	r2, [pc, #516]	@ (8001568 <View_Config+0x2b0>)
 8001362:	2150      	movs	r1, #80	@ 0x50
 8001364:	200a      	movs	r0, #10
 8001366:	f002 fa14 	bl	8003792 <ST7789_WriteString>
	sprintf(&BUFFER_Display,"OFS1:%5d",FEAnalog.OFFSET1);
 800136a:	4b87      	ldr	r3, [pc, #540]	@ (8001588 <View_Config+0x2d0>)
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	461a      	mov	r2, r3
 8001370:	4987      	ldr	r1, [pc, #540]	@ (8001590 <View_Config+0x2d8>)
 8001372:	487d      	ldr	r0, [pc, #500]	@ (8001568 <View_Config+0x2b0>)
 8001374:	f013 fede 	bl	8015134 <siprintf>
	ST7789_WriteString(10, 100, &BUFFER_Display, Font_11x18, WHITE, BLACK);
 8001378:	4b80      	ldr	r3, [pc, #512]	@ (800157c <View_Config+0x2c4>)
 800137a:	2200      	movs	r2, #0
 800137c:	9202      	str	r2, [sp, #8]
 800137e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001382:	9201      	str	r2, [sp, #4]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	9200      	str	r2, [sp, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a77      	ldr	r2, [pc, #476]	@ (8001568 <View_Config+0x2b0>)
 800138c:	2164      	movs	r1, #100	@ 0x64
 800138e:	200a      	movs	r0, #10
 8001390:	f002 f9ff 	bl	8003792 <ST7789_WriteString>
	sprintf(&BUFFER_Display,"AMP2:%5d",FEAnalog.CD_CH2);
 8001394:	4b7c      	ldr	r3, [pc, #496]	@ (8001588 <View_Config+0x2d0>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	461a      	mov	r2, r3
 800139a:	497e      	ldr	r1, [pc, #504]	@ (8001594 <View_Config+0x2dc>)
 800139c:	4872      	ldr	r0, [pc, #456]	@ (8001568 <View_Config+0x2b0>)
 800139e:	f013 fec9 	bl	8015134 <siprintf>
	ST7789_WriteString(10, 120, &BUFFER_Display, Font_11x18, WHITE, BLACK);
 80013a2:	4b76      	ldr	r3, [pc, #472]	@ (800157c <View_Config+0x2c4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	9202      	str	r2, [sp, #8]
 80013a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013ac:	9201      	str	r2, [sp, #4]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	9200      	str	r2, [sp, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a6c      	ldr	r2, [pc, #432]	@ (8001568 <View_Config+0x2b0>)
 80013b6:	2178      	movs	r1, #120	@ 0x78
 80013b8:	200a      	movs	r0, #10
 80013ba:	f002 f9ea 	bl	8003792 <ST7789_WriteString>
	sprintf(&BUFFER_Display,"OFS2:%5d",FEAnalog.OFFSET2);
 80013be:	4b72      	ldr	r3, [pc, #456]	@ (8001588 <View_Config+0x2d0>)
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	461a      	mov	r2, r3
 80013c4:	4974      	ldr	r1, [pc, #464]	@ (8001598 <View_Config+0x2e0>)
 80013c6:	4868      	ldr	r0, [pc, #416]	@ (8001568 <View_Config+0x2b0>)
 80013c8:	f013 feb4 	bl	8015134 <siprintf>
	ST7789_WriteString(10, 140, &BUFFER_Display, Font_11x18, WHITE, BLACK);
 80013cc:	4b6b      	ldr	r3, [pc, #428]	@ (800157c <View_Config+0x2c4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	9202      	str	r2, [sp, #8]
 80013d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013d6:	9201      	str	r2, [sp, #4]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	9200      	str	r2, [sp, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a62      	ldr	r2, [pc, #392]	@ (8001568 <View_Config+0x2b0>)
 80013e0:	218c      	movs	r1, #140	@ 0x8c
 80013e2:	200a      	movs	r0, #10
 80013e4:	f002 f9d5 	bl	8003792 <ST7789_WriteString>
	sprintf(&BUFFER_Display,"CH  :%5d",CH_selected);
 80013e8:	4b6c      	ldr	r3, [pc, #432]	@ (800159c <View_Config+0x2e4>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	496c      	ldr	r1, [pc, #432]	@ (80015a0 <View_Config+0x2e8>)
 80013f0:	485d      	ldr	r0, [pc, #372]	@ (8001568 <View_Config+0x2b0>)
 80013f2:	f013 fe9f 	bl	8015134 <siprintf>
	ST7789_WriteString(10, 160, &BUFFER_Display, Font_11x18, WHITE, BLACK);
 80013f6:	4b61      	ldr	r3, [pc, #388]	@ (800157c <View_Config+0x2c4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	9202      	str	r2, [sp, #8]
 80013fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001400:	9201      	str	r2, [sp, #4]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	9200      	str	r2, [sp, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a57      	ldr	r2, [pc, #348]	@ (8001568 <View_Config+0x2b0>)
 800140a:	21a0      	movs	r1, #160	@ 0xa0
 800140c:	200a      	movs	r0, #10
 800140e:	f002 f9c0 	bl	8003792 <ST7789_WriteString>
	sprintf(&BUFFER_Display,"DBG:%10d",DEBUG_TICK_COUNT);
 8001412:	4b64      	ldr	r3, [pc, #400]	@ (80015a4 <View_Config+0x2ec>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	4963      	ldr	r1, [pc, #396]	@ (80015a8 <View_Config+0x2f0>)
 800141a:	4853      	ldr	r0, [pc, #332]	@ (8001568 <View_Config+0x2b0>)
 800141c:	f013 fe8a 	bl	8015134 <siprintf>
	ST7789_WriteString(10, 180, &BUFFER_Display, Font_11x18, WHITE, BLACK);
 8001420:	4b56      	ldr	r3, [pc, #344]	@ (800157c <View_Config+0x2c4>)
 8001422:	2200      	movs	r2, #0
 8001424:	9202      	str	r2, [sp, #8]
 8001426:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800142a:	9201      	str	r2, [sp, #4]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	9200      	str	r2, [sp, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a4d      	ldr	r2, [pc, #308]	@ (8001568 <View_Config+0x2b0>)
 8001434:	21b4      	movs	r1, #180	@ 0xb4
 8001436:	200a      	movs	r0, #10
 8001438:	f002 f9ab 	bl	8003792 <ST7789_WriteString>



	sprintf(&BUFFER_Display,"ENC1:%5d",htim4.Instance->CNT);
 800143c:	4b48      	ldr	r3, [pc, #288]	@ (8001560 <View_Config+0x2a8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	461a      	mov	r2, r3
 8001444:	4947      	ldr	r1, [pc, #284]	@ (8001564 <View_Config+0x2ac>)
 8001446:	4848      	ldr	r0, [pc, #288]	@ (8001568 <View_Config+0x2b0>)
 8001448:	f013 fe74 	bl	8015134 <siprintf>
	ST7789_WriteString(170, 0, &BUFFER_Display, Font_11x18, WHITE, BLACK);
 800144c:	4b4b      	ldr	r3, [pc, #300]	@ (800157c <View_Config+0x2c4>)
 800144e:	2200      	movs	r2, #0
 8001450:	9202      	str	r2, [sp, #8]
 8001452:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001456:	9201      	str	r2, [sp, #4]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	9200      	str	r2, [sp, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a42      	ldr	r2, [pc, #264]	@ (8001568 <View_Config+0x2b0>)
 8001460:	2100      	movs	r1, #0
 8001462:	20aa      	movs	r0, #170	@ 0xaa
 8001464:	f002 f995 	bl	8003792 <ST7789_WriteString>
	sprintf(&BUFFER_Display,"ENC2:%5d",htim3.Instance->CNT);
 8001468:	4b50      	ldr	r3, [pc, #320]	@ (80015ac <View_Config+0x2f4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146e:	461a      	mov	r2, r3
 8001470:	494f      	ldr	r1, [pc, #316]	@ (80015b0 <View_Config+0x2f8>)
 8001472:	483d      	ldr	r0, [pc, #244]	@ (8001568 <View_Config+0x2b0>)
 8001474:	f013 fe5e 	bl	8015134 <siprintf>
	ST7789_WriteString(170, 20, &BUFFER_Display, Font_11x18, WHITE, BLACK);
 8001478:	4b40      	ldr	r3, [pc, #256]	@ (800157c <View_Config+0x2c4>)
 800147a:	2200      	movs	r2, #0
 800147c:	9202      	str	r2, [sp, #8]
 800147e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001482:	9201      	str	r2, [sp, #4]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	9200      	str	r2, [sp, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a37      	ldr	r2, [pc, #220]	@ (8001568 <View_Config+0x2b0>)
 800148c:	2114      	movs	r1, #20
 800148e:	20aa      	movs	r0, #170	@ 0xaa
 8001490:	f002 f97f 	bl	8003792 <ST7789_WriteString>
	sprintf(&BUFFER_Display,"ENC3:%5d",htim20.Instance->CNT);
 8001494:	4b47      	ldr	r3, [pc, #284]	@ (80015b4 <View_Config+0x2fc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149a:	461a      	mov	r2, r3
 800149c:	4946      	ldr	r1, [pc, #280]	@ (80015b8 <View_Config+0x300>)
 800149e:	4832      	ldr	r0, [pc, #200]	@ (8001568 <View_Config+0x2b0>)
 80014a0:	f013 fe48 	bl	8015134 <siprintf>
	ST7789_WriteString(170, 40, &BUFFER_Display, Font_11x18, WHITE, BLACK);
 80014a4:	4b35      	ldr	r3, [pc, #212]	@ (800157c <View_Config+0x2c4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	9202      	str	r2, [sp, #8]
 80014aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014ae:	9201      	str	r2, [sp, #4]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	9200      	str	r2, [sp, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001568 <View_Config+0x2b0>)
 80014b8:	2128      	movs	r1, #40	@ 0x28
 80014ba:	20aa      	movs	r0, #170	@ 0xaa
 80014bc:	f002 f969 	bl	8003792 <ST7789_WriteString>
	sprintf(&BUFFER_Display,"ENC4:%5d",htim1.Instance->CNT);
 80014c0:	4b3e      	ldr	r3, [pc, #248]	@ (80015bc <View_Config+0x304>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c6:	461a      	mov	r2, r3
 80014c8:	493d      	ldr	r1, [pc, #244]	@ (80015c0 <View_Config+0x308>)
 80014ca:	4827      	ldr	r0, [pc, #156]	@ (8001568 <View_Config+0x2b0>)
 80014cc:	f013 fe32 	bl	8015134 <siprintf>
	ST7789_WriteString(170, 60, &BUFFER_Display, Font_11x18, WHITE, BLACK);
 80014d0:	4b2a      	ldr	r3, [pc, #168]	@ (800157c <View_Config+0x2c4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	9202      	str	r2, [sp, #8]
 80014d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014da:	9201      	str	r2, [sp, #4]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	9200      	str	r2, [sp, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a21      	ldr	r2, [pc, #132]	@ (8001568 <View_Config+0x2b0>)
 80014e4:	213c      	movs	r1, #60	@ 0x3c
 80014e6:	20aa      	movs	r0, #170	@ 0xaa
 80014e8:	f002 f953 	bl	8003792 <ST7789_WriteString>

	sprintf(&BUFFER_Display,"KEYs:%5d",BUFFER_SYS_ADC[0]);
 80014ec:	4b35      	ldr	r3, [pc, #212]	@ (80015c4 <View_Config+0x30c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4935      	ldr	r1, [pc, #212]	@ (80015c8 <View_Config+0x310>)
 80014f4:	481c      	ldr	r0, [pc, #112]	@ (8001568 <View_Config+0x2b0>)
 80014f6:	f013 fe1d 	bl	8015134 <siprintf>
	ST7789_WriteString(170, 100, &BUFFER_Display, Font_11x18, WHITE, BLACK);
 80014fa:	4b20      	ldr	r3, [pc, #128]	@ (800157c <View_Config+0x2c4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	9202      	str	r2, [sp, #8]
 8001500:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001504:	9201      	str	r2, [sp, #4]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	9200      	str	r2, [sp, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a16      	ldr	r2, [pc, #88]	@ (8001568 <View_Config+0x2b0>)
 800150e:	2164      	movs	r1, #100	@ 0x64
 8001510:	20aa      	movs	r0, #170	@ 0xaa
 8001512:	f002 f93e 	bl	8003792 <ST7789_WriteString>

	float temperate=(((float)BUFFER_SYS_ADC[1]*(3.3/4096)-0.76)/0.0025 + 30); //转换为温度值;
 8001516:	4b2b      	ldr	r3, [pc, #172]	@ (80015c4 <View_Config+0x30c>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	ee07 3a90 	vmov	s15, r3
 800151e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001522:	ee17 0a90 	vmov	r0, s15
 8001526:	f7ff f837 	bl	8000598 <__aeabi_f2d>
 800152a:	a309      	add	r3, pc, #36	@ (adr r3, 8001550 <View_Config+0x298>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7ff f88a 	bl	8000648 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	a306      	add	r3, pc, #24	@ (adr r3, 8001558 <View_Config+0x2a0>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	f7fe fec9 	bl	80002d8 <__aeabi_dsub>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	e03d      	b.n	80015cc <View_Config+0x314>
 8001550:	66666666 	.word	0x66666666
 8001554:	3f4a6666 	.word	0x3f4a6666
 8001558:	851eb852 	.word	0x851eb852
 800155c:	3fe851eb 	.word	0x3fe851eb
 8001560:	20000d70 	.word	0x20000d70
 8001564:	080189d4 	.word	0x080189d4
 8001568:	20011cac 	.word	0x20011cac
 800156c:	20000008 	.word	0x20000008
 8001570:	08018a34 	.word	0x08018a34
 8001574:	20000278 	.word	0x20000278
 8001578:	08018a3c 	.word	0x08018a3c
 800157c:	20000000 	.word	0x20000000
 8001580:	20000e54 	.word	0x20000e54
 8001584:	08018a48 	.word	0x08018a48
 8001588:	2000025c 	.word	0x2000025c
 800158c:	08018a54 	.word	0x08018a54
 8001590:	08018a60 	.word	0x08018a60
 8001594:	08018a6c 	.word	0x08018a6c
 8001598:	08018a78 	.word	0x08018a78
 800159c:	20011028 	.word	0x20011028
 80015a0:	08018a84 	.word	0x08018a84
 80015a4:	200005e4 	.word	0x200005e4
 80015a8:	08018a90 	.word	0x08018a90
 80015ac:	20000d24 	.word	0x20000d24
 80015b0:	080189e0 	.word	0x080189e0
 80015b4:	20000eec 	.word	0x20000eec
 80015b8:	080189ec 	.word	0x080189ec
 80015bc:	20000cd8 	.word	0x20000cd8
 80015c0:	080189f8 	.word	0x080189f8
 80015c4:	20000ff8 	.word	0x20000ff8
 80015c8:	08018a04 	.word	0x08018a04
 80015cc:	a335      	add	r3, pc, #212	@ (adr r3, 80016a4 <View_Config+0x3ec>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7ff f963 	bl	800089c <__aeabi_ddiv>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	4b29      	ldr	r3, [pc, #164]	@ (8001688 <View_Config+0x3d0>)
 80015e4:	f7fe fe7a 	bl	80002dc <__adddf3>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f7ff fb22 	bl	8000c38 <__aeabi_d2f>
 80015f4:	4603      	mov	r3, r0
 80015f6:	607b      	str	r3, [r7, #4]
	sprintf(&BUFFER_Display,"TEMP:%4.1f",temperate);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7fe ffcd 	bl	8000598 <__aeabi_f2d>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4922      	ldr	r1, [pc, #136]	@ (800168c <View_Config+0x3d4>)
 8001604:	4822      	ldr	r0, [pc, #136]	@ (8001690 <View_Config+0x3d8>)
 8001606:	f013 fd95 	bl	8015134 <siprintf>
	ST7789_WriteString(170, 120, &BUFFER_Display, Font_11x18, WHITE, BLACK);
 800160a:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <View_Config+0x3dc>)
 800160c:	2200      	movs	r2, #0
 800160e:	9202      	str	r2, [sp, #8]
 8001610:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001614:	9201      	str	r2, [sp, #4]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	9200      	str	r2, [sp, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1c      	ldr	r2, [pc, #112]	@ (8001690 <View_Config+0x3d8>)
 800161e:	2178      	movs	r1, #120	@ 0x78
 8001620:	20aa      	movs	r0, #170	@ 0xaa
 8001622:	f002 f8b6 	bl	8003792 <ST7789_WriteString>

	sprintf(&BUFFER_Display,"Vbat:%5d",BUFFER_SYS_ADC[2]);
 8001626:	4b1c      	ldr	r3, [pc, #112]	@ (8001698 <View_Config+0x3e0>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	461a      	mov	r2, r3
 800162c:	491b      	ldr	r1, [pc, #108]	@ (800169c <View_Config+0x3e4>)
 800162e:	4818      	ldr	r0, [pc, #96]	@ (8001690 <View_Config+0x3d8>)
 8001630:	f013 fd80 	bl	8015134 <siprintf>
	ST7789_WriteString(170, 140, &BUFFER_Display, Font_11x18, WHITE, BLACK);
 8001634:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <View_Config+0x3dc>)
 8001636:	2200      	movs	r2, #0
 8001638:	9202      	str	r2, [sp, #8]
 800163a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800163e:	9201      	str	r2, [sp, #4]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	9200      	str	r2, [sp, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a12      	ldr	r2, [pc, #72]	@ (8001690 <View_Config+0x3d8>)
 8001648:	218c      	movs	r1, #140	@ 0x8c
 800164a:	20aa      	movs	r0, #170	@ 0xaa
 800164c:	f002 f8a1 	bl	8003792 <ST7789_WriteString>

	sprintf(&BUFFER_Display,"Vref:%5d",BUFFER_SYS_ADC[3]);
 8001650:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <View_Config+0x3e0>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	461a      	mov	r2, r3
 8001656:	4912      	ldr	r1, [pc, #72]	@ (80016a0 <View_Config+0x3e8>)
 8001658:	480d      	ldr	r0, [pc, #52]	@ (8001690 <View_Config+0x3d8>)
 800165a:	f013 fd6b 	bl	8015134 <siprintf>
	ST7789_WriteString(170, 160, &BUFFER_Display, Font_11x18, WHITE, BLACK);
 800165e:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <View_Config+0x3dc>)
 8001660:	2200      	movs	r2, #0
 8001662:	9202      	str	r2, [sp, #8]
 8001664:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001668:	9201      	str	r2, [sp, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	9200      	str	r2, [sp, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a07      	ldr	r2, [pc, #28]	@ (8001690 <View_Config+0x3d8>)
 8001672:	21a0      	movs	r1, #160	@ 0xa0
 8001674:	20aa      	movs	r0, #170	@ 0xaa
 8001676:	f002 f88c 	bl	8003792 <ST7789_WriteString>

	}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	f3af 8000 	nop.w
 8001688:	403e0000 	.word	0x403e0000
 800168c:	08018a10 	.word	0x08018a10
 8001690:	20011cac 	.word	0x20011cac
 8001694:	20000000 	.word	0x20000000
 8001698:	20000ff8 	.word	0x20000ff8
 800169c:	08018a1c 	.word	0x08018a1c
 80016a0:	08018a28 	.word	0x08018a28
 80016a4:	47ae147b 	.word	0x47ae147b
 80016a8:	3f647ae1 	.word	0x3f647ae1

080016ac <FT6336_ReadRegister>:

HAL_StatusTypeDef FT6336_WriteRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
    return HAL_I2C_Mem_Write(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
}

HAL_StatusTypeDef FT6336_ReadRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af04      	add	r7, sp, #16
 80016b2:	4603      	mov	r3, r0
 80016b4:	6039      	str	r1, [r7, #0]
 80016b6:	71fb      	strb	r3, [r7, #7]
 80016b8:	4613      	mov	r3, r2
 80016ba:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	b29a      	uxth	r2, r3
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295
 80016c4:	9302      	str	r3, [sp, #8]
 80016c6:	88bb      	ldrh	r3, [r7, #4]
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2301      	movs	r3, #1
 80016d0:	2170      	movs	r1, #112	@ 0x70
 80016d2:	4804      	ldr	r0, [pc, #16]	@ (80016e4 <FT6336_ReadRegister+0x38>)
 80016d4:	f008 f8ce 	bl	8009874 <HAL_I2C_Mem_Read>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000a00 	.word	0x20000a00

080016e8 <FT6336_Init>:

void FT6336_Init(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
    FT6336_RST_L;
 80016ee:	2200      	movs	r2, #0
 80016f0:	2104      	movs	r1, #4
 80016f2:	480f      	ldr	r0, [pc, #60]	@ (8001730 <FT6336_Init+0x48>)
 80016f4:	f006 ff62 	bl	80085bc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80016f8:	200a      	movs	r0, #10
 80016fa:	f003 fac7 	bl	8004c8c <HAL_Delay>
    FT6336_RST_H;
 80016fe:	2201      	movs	r2, #1
 8001700:	2104      	movs	r1, #4
 8001702:	480b      	ldr	r0, [pc, #44]	@ (8001730 <FT6336_Init+0x48>)
 8001704:	f006 ff5a 	bl	80085bc <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001708:	2032      	movs	r0, #50	@ 0x32
 800170a:	f003 fabf 	bl	8004c8c <HAL_Delay>
//    FT6336_WriteRegister(0x00, 0x00,1);
//
//    // 设置 ID_G_MODE 为 0x00（启用中断输出）
//    FT6336_WriteRegister(0xA4, 0x00,1);

    uint8_t id = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	71fb      	strb	r3, [r7, #7]
    FT6336_ReadRegister(FT6336_FOCALTECH_ID, &id, 1);
 8001712:	1dfb      	adds	r3, r7, #7
 8001714:	2201      	movs	r2, #1
 8001716:	4619      	mov	r1, r3
 8001718:	20a8      	movs	r0, #168	@ 0xa8
 800171a:	f7ff ffc7 	bl	80016ac <FT6336_ReadRegister>
    HAL_Delay(1000);
 800171e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001722:	f003 fab3 	bl	8004c8c <HAL_Delay>
//    HAL_Delay(1000);
    //used to debug IIC



}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	48000c00 	.word	0x48000c00

08001734 <AdjustTouchCoordinates>:

static void AdjustTouchCoordinates(uint16_t *x, uint16_t *y) {
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
    uint16_t rawX = *x;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	81fb      	strh	r3, [r7, #14]
    uint16_t rawY = *y;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	81bb      	strh	r3, [r7, #12]
//
//    *x = (*x * SCREEN_WIDTH) / TOUCH_WIDTH;
//    *y = (*y * SCREEN_HEIGHT) / TOUCH_HEIGHT;

    // 情况 X：特殊处理
    *x = rawY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	89ba      	ldrh	r2, [r7, #12]
 800174e:	801a      	strh	r2, [r3, #0]
    *y = SCREEN_HEIGHT-rawX;
 8001750:	89fb      	ldrh	r3, [r7, #14]
 8001752:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001756:	b29a      	uxth	r2, r3
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	801a      	strh	r2, [r3, #0]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <FT6336_GetTouchPoint>:





void FT6336_GetTouchPoint(TouchPoints_HandleTypeDef *touchPoints) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
    uint8_t touchStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	73bb      	strb	r3, [r7, #14]
    uint8_t touchData[4];  // 存储两个点的坐标数据 (每个点4个字节)

    // 读取触摸状态寄存器
    FT6336_ReadRegister(FT6336_TD_STATUS, &touchStatus, 1);
 8001774:	f107 030e 	add.w	r3, r7, #14
 8001778:	2201      	movs	r2, #1
 800177a:	4619      	mov	r1, r3
 800177c:	2002      	movs	r0, #2
 800177e:	f7ff ff95 	bl	80016ac <FT6336_ReadRegister>
    uint8_t touchCount = touchStatus & 0x0F;  // 获取触摸点数量
 8001782:	7bbb      	ldrb	r3, [r7, #14]
 8001784:	f003 030f 	and.w	r3, r3, #15
 8001788:	73fb      	strb	r3, [r7, #15]

    if (touchCount > 0) {
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d054      	beq.n	800183a <FT6336_GetTouchPoint+0xd2>
        // 读取第一个触摸点的坐标 (4个字节)
    	FT6336_ReadRegister(FT6336_P1_XH, touchData, 4);
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	2204      	movs	r2, #4
 8001796:	4619      	mov	r1, r3
 8001798:	2003      	movs	r0, #3
 800179a:	f7ff ff87 	bl	80016ac <FT6336_ReadRegister>
        touchPoints->point1_x = ((touchData[0] & 0x0F) << 8) | touchData[1];
 800179e:	7a3b      	ldrb	r3, [r7, #8]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80017a8:	b21a      	sxth	r2, r3
 80017aa:	7a7b      	ldrb	r3, [r7, #9]
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	4313      	orrs	r3, r2
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	801a      	strh	r2, [r3, #0]
        touchPoints->point1_y = ((touchData[2] & 0x0F) << 8) | touchData[3];
 80017b8:	7abb      	ldrb	r3, [r7, #10]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	b21b      	sxth	r3, r3
 80017be:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	7afb      	ldrb	r3, [r7, #11]
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	805a      	strh	r2, [r3, #2]
        AdjustTouchCoordinates(&touchPoints->point1_x, &touchPoints->point1_y);  // 调整第一个触摸点坐标
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3302      	adds	r3, #2
 80017d8:	4619      	mov	r1, r3
 80017da:	4610      	mov	r0, r2
 80017dc:	f7ff ffaa 	bl	8001734 <AdjustTouchCoordinates>

        if (touchCount > 1) {
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d929      	bls.n	800183a <FT6336_GetTouchPoint+0xd2>
            // 读取第二个触摸点的坐标 (4个字节)
        	FT6336_ReadRegister(FT6336_P2_XH, &touchData[4], 4);
 80017e6:	f107 0308 	add.w	r3, r7, #8
 80017ea:	3304      	adds	r3, #4
 80017ec:	2204      	movs	r2, #4
 80017ee:	4619      	mov	r1, r3
 80017f0:	2009      	movs	r0, #9
 80017f2:	f7ff ff5b 	bl	80016ac <FT6336_ReadRegister>
            touchPoints->point2_x = ((touchData[4] & 0x0F) << 8) | touchData[5];
 80017f6:	7b3b      	ldrb	r3, [r7, #12]
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001800:	b21a      	sxth	r2, r3
 8001802:	7b7b      	ldrb	r3, [r7, #13]
 8001804:	b21b      	sxth	r3, r3
 8001806:	4313      	orrs	r3, r2
 8001808:	b21b      	sxth	r3, r3
 800180a:	b29a      	uxth	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	809a      	strh	r2, [r3, #4]
            touchPoints->point2_y = ((touchData[6] & 0x0F) << 8) | touchData[7];
 8001810:	7bbb      	ldrb	r3, [r7, #14]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	b21b      	sxth	r3, r3
 8001816:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800181a:	b21a      	sxth	r2, r3
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	b21b      	sxth	r3, r3
 8001820:	4313      	orrs	r3, r2
 8001822:	b21b      	sxth	r3, r3
 8001824:	b29a      	uxth	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	80da      	strh	r2, [r3, #6]
            AdjustTouchCoordinates(&touchPoints->point2_x, &touchPoints->point2_y);  // 调整第二个触摸点坐标
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	1d1a      	adds	r2, r3, #4
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3306      	adds	r3, #6
 8001832:	4619      	mov	r1, r3
 8001834:	4610      	mov	r0, r2
 8001836:	f7ff ff7d 	bl	8001734 <AdjustTouchCoordinates>
        }
    }
}
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <Analog_FE_Update>:
    .CD_CH2 = 0,
    .OFFSET1 = 2200,
    .OFFSET2 = 2200
};

void Analog_FE_Update(void) {
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AC_DC_CH1_GPIO_Port, AC_DC_CH1_Pin, (GPIO_PinState)FEAnalog.AC_DC_CH1);
 8001848:	4b3a      	ldr	r3, [pc, #232]	@ (8001934 <Analog_FE_Update+0xf0>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	2120      	movs	r1, #32
 8001850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001854:	f006 feb2 	bl	80085bc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CD_CH1_A_GPIO_Port, CD_CH1_A_Pin, (GPIO_PinState)((FEAnalog.CD_CH1 >> 1) & 0x01));
 8001858:	4b36      	ldr	r3, [pc, #216]	@ (8001934 <Analog_FE_Update+0xf0>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	085b      	lsrs	r3, r3, #1
 800185e:	b2db      	uxtb	r3, r3
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	461a      	mov	r2, r3
 8001868:	2120      	movs	r1, #32
 800186a:	4833      	ldr	r0, [pc, #204]	@ (8001938 <Analog_FE_Update+0xf4>)
 800186c:	f006 fea6 	bl	80085bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH1_B_GPIO_Port, CD_CH1_B_Pin, (GPIO_PinState)((FEAnalog.CD_CH1 >> 2) & 0x01));
 8001870:	4b30      	ldr	r3, [pc, #192]	@ (8001934 <Analog_FE_Update+0xf0>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	089b      	lsrs	r3, r3, #2
 8001876:	b2db      	uxtb	r3, r3
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001884:	482d      	ldr	r0, [pc, #180]	@ (800193c <Analog_FE_Update+0xf8>)
 8001886:	f006 fe99 	bl	80085bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH1_C_GPIO_Port, CD_CH1_C_Pin, (GPIO_PinState)((FEAnalog.CD_CH1 >> 3) & 0x01));
 800188a:	4b2a      	ldr	r3, [pc, #168]	@ (8001934 <Analog_FE_Update+0xf0>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	08db      	lsrs	r3, r3, #3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	b2db      	uxtb	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800189e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a2:	f006 fe8b 	bl	80085bc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(AC_DC_CH2_GPIO_Port, AC_DC_CH2_Pin, (GPIO_PinState)FEAnalog.AC_DC_CH2);
 80018a6:	4b23      	ldr	r3, [pc, #140]	@ (8001934 <Analog_FE_Update+0xf0>)
 80018a8:	785b      	ldrb	r3, [r3, #1]
 80018aa:	461a      	mov	r2, r3
 80018ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018b0:	4821      	ldr	r0, [pc, #132]	@ (8001938 <Analog_FE_Update+0xf4>)
 80018b2:	f006 fe83 	bl	80085bc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CD_CH2_A_GPIO_Port, CD_CH2_A_Pin, (GPIO_PinState)((FEAnalog.CD_CH2 >> 1) & 0x01));
 80018b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001934 <Analog_FE_Update+0xf0>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	085b      	lsrs	r3, r3, #1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018ca:	481b      	ldr	r0, [pc, #108]	@ (8001938 <Analog_FE_Update+0xf4>)
 80018cc:	f006 fe76 	bl	80085bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH2_B_GPIO_Port, CD_CH2_B_Pin, (GPIO_PinState)((FEAnalog.CD_CH2 >> 2) & 0x01));
 80018d0:	4b18      	ldr	r3, [pc, #96]	@ (8001934 <Analog_FE_Update+0xf0>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	089b      	lsrs	r3, r3, #2
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018e4:	4814      	ldr	r0, [pc, #80]	@ (8001938 <Analog_FE_Update+0xf4>)
 80018e6:	f006 fe69 	bl	80085bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH2_C_GPIO_Port, CD_CH2_C_Pin, (GPIO_PinState)((FEAnalog.CD_CH2 >> 3) & 0x01));
 80018ea:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <Analog_FE_Update+0xf0>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	08db      	lsrs	r3, r3, #3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	2102      	movs	r1, #2
 80018fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001900:	f006 fe5c 	bl	80085bc <HAL_GPIO_WritePin>

	//SET OFFSET
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, FEAnalog.OFFSET1);
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <Analog_FE_Update+0xf0>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	480c      	ldr	r0, [pc, #48]	@ (8001940 <Analog_FE_Update+0xfc>)
 800190e:	f006 f879 	bl	8007a04 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, FEAnalog.OFFSET2);
 8001912:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <Analog_FE_Update+0xf0>)
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	480a      	ldr	r0, [pc, #40]	@ (8001944 <Analog_FE_Update+0x100>)
 800191c:	f006 f872 	bl	8007a04 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8001920:	2100      	movs	r1, #0
 8001922:	4807      	ldr	r0, [pc, #28]	@ (8001940 <Analog_FE_Update+0xfc>)
 8001924:	f006 f802 	bl	800792c <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001928:	2100      	movs	r1, #0
 800192a:	4806      	ldr	r0, [pc, #24]	@ (8001944 <Analog_FE_Update+0x100>)
 800192c:	f005 fffe 	bl	800792c <HAL_DAC_Start>
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	2000025c 	.word	0x2000025c
 8001938:	48000800 	.word	0x48000800
 800193c:	48000400 	.word	0x48000400
 8001940:	200008dc 	.word	0x200008dc
 8001944:	200008c8 	.word	0x200008c8

08001948 <KEY_PROCESS>:




// 编码器处理函数
void KEY_PROCESS(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	    // 处理按键
	    if (input.KEY0) {
 800194c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a00 <KEY_PROCESS+0xb8>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <KEY_PROCESS+0x12>
	        printf("KEY0 is pressed.\n");
 8001954:	482b      	ldr	r0, [pc, #172]	@ (8001a04 <KEY_PROCESS+0xbc>)
 8001956:	f013 fbe5 	bl	8015124 <puts>
	    }
	    if (input.KEY1) {
 800195a:	4b29      	ldr	r3, [pc, #164]	@ (8001a00 <KEY_PROCESS+0xb8>)
 800195c:	785b      	ldrb	r3, [r3, #1]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <KEY_PROCESS+0x20>
	        printf("KEY1 is pressed.\n");
 8001962:	4829      	ldr	r0, [pc, #164]	@ (8001a08 <KEY_PROCESS+0xc0>)
 8001964:	f013 fbde 	bl	8015124 <puts>
	    }
	    if (input.KEY2) {
 8001968:	4b25      	ldr	r3, [pc, #148]	@ (8001a00 <KEY_PROCESS+0xb8>)
 800196a:	789b      	ldrb	r3, [r3, #2]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <KEY_PROCESS+0x2e>
	        printf("KEY2 is pressed.\n");
 8001970:	4826      	ldr	r0, [pc, #152]	@ (8001a0c <KEY_PROCESS+0xc4>)
 8001972:	f013 fbd7 	bl	8015124 <puts>
	    }
	    if (input.KEY3) {
 8001976:	4b22      	ldr	r3, [pc, #136]	@ (8001a00 <KEY_PROCESS+0xb8>)
 8001978:	78db      	ldrb	r3, [r3, #3]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <KEY_PROCESS+0x3c>
	        printf("KEY3 is pressed.\n");
 800197e:	4824      	ldr	r0, [pc, #144]	@ (8001a10 <KEY_PROCESS+0xc8>)
 8001980:	f013 fbd0 	bl	8015124 <puts>
	    }
	    if (input.KEY4) {
 8001984:	4b1e      	ldr	r3, [pc, #120]	@ (8001a00 <KEY_PROCESS+0xb8>)
 8001986:	791b      	ldrb	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <KEY_PROCESS+0x4a>
	        printf("KEY4 is pressed.\n");
 800198c:	4821      	ldr	r0, [pc, #132]	@ (8001a14 <KEY_PROCESS+0xcc>)
 800198e:	f013 fbc9 	bl	8015124 <puts>
	    }
	    if (input.KEY5) {
 8001992:	4b1b      	ldr	r3, [pc, #108]	@ (8001a00 <KEY_PROCESS+0xb8>)
 8001994:	795b      	ldrb	r3, [r3, #5]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <KEY_PROCESS+0x58>
	        printf("KEY5 is pressed.\n");
 800199a:	481f      	ldr	r0, [pc, #124]	@ (8001a18 <KEY_PROCESS+0xd0>)
 800199c:	f013 fbc2 	bl	8015124 <puts>
	    }
	    if (input.KEY_ENC0) {
 80019a0:	4b17      	ldr	r3, [pc, #92]	@ (8001a00 <KEY_PROCESS+0xb8>)
 80019a2:	799b      	ldrb	r3, [r3, #6]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <KEY_PROCESS+0x66>
	        printf("KEY_ENC0 is pressed.\n");
 80019a8:	481c      	ldr	r0, [pc, #112]	@ (8001a1c <KEY_PROCESS+0xd4>)
 80019aa:	f013 fbbb 	bl	8015124 <puts>
	    }
	    if (input.KEY_ENC1) {
 80019ae:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <KEY_PROCESS+0xb8>)
 80019b0:	79db      	ldrb	r3, [r3, #7]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <KEY_PROCESS+0x74>
	        printf("KEY_ENC1 is pressed.\n");
 80019b6:	481a      	ldr	r0, [pc, #104]	@ (8001a20 <KEY_PROCESS+0xd8>)
 80019b8:	f013 fbb4 	bl	8015124 <puts>
	    }
	    if (input.KEY_ENC2) {
 80019bc:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <KEY_PROCESS+0xb8>)
 80019be:	7a1b      	ldrb	r3, [r3, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <KEY_PROCESS+0x82>
	        printf("KEY_ENC2 is pressed.\n");
 80019c4:	4817      	ldr	r0, [pc, #92]	@ (8001a24 <KEY_PROCESS+0xdc>)
 80019c6:	f013 fbad 	bl	8015124 <puts>
	    }
	    if (input.KEY_ENC3) {
 80019ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001a00 <KEY_PROCESS+0xb8>)
 80019cc:	7a5b      	ldrb	r3, [r3, #9]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <KEY_PROCESS+0x90>
	        printf("KEY_ENC3 is pressed.\n");
 80019d2:	4815      	ldr	r0, [pc, #84]	@ (8001a28 <KEY_PROCESS+0xe0>)
 80019d4:	f013 fba6 	bl	8015124 <puts>
	    }

	    // 处理触摸坐标
	    if (input.Touched) {
 80019d8:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <KEY_PROCESS+0xb8>)
 80019da:	7a9b      	ldrb	r3, [r3, #10]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <KEY_PROCESS+0xaa>
	        printf("Touch detected at coordinates (%u, %u).\n", input.touch_x, input.touch_y);
 80019e0:	4b07      	ldr	r3, [pc, #28]	@ (8001a00 <KEY_PROCESS+0xb8>)
 80019e2:	899b      	ldrh	r3, [r3, #12]
 80019e4:	4619      	mov	r1, r3
 80019e6:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <KEY_PROCESS+0xb8>)
 80019e8:	89db      	ldrh	r3, [r3, #14]
 80019ea:	461a      	mov	r2, r3
 80019ec:	480f      	ldr	r0, [pc, #60]	@ (8001a2c <KEY_PROCESS+0xe4>)
 80019ee:	f013 fb31 	bl	8015054 <iprintf>
	    }

	    memset(&input, 0, sizeof(Input_HandleTypeDef));
 80019f2:	2210      	movs	r2, #16
 80019f4:	2100      	movs	r1, #0
 80019f6:	4802      	ldr	r0, [pc, #8]	@ (8001a00 <KEY_PROCESS+0xb8>)
 80019f8:	f013 fc94 	bl	8015324 <memset>
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20011018 	.word	0x20011018
 8001a04:	08018a9c 	.word	0x08018a9c
 8001a08:	08018ab0 	.word	0x08018ab0
 8001a0c:	08018ac4 	.word	0x08018ac4
 8001a10:	08018ad8 	.word	0x08018ad8
 8001a14:	08018aec 	.word	0x08018aec
 8001a18:	08018b00 	.word	0x08018b00
 8001a1c:	08018b14 	.word	0x08018b14
 8001a20:	08018b2c 	.word	0x08018b2c
 8001a24:	08018b44 	.word	0x08018b44
 8001a28:	08018b5c 	.word	0x08018b5c
 8001a2c:	08018b74 	.word	0x08018b74

08001a30 <ENC_PROCESS>:
uint8_t CH_selected=0;
uint8_t LOCK_CH1=0;
uint8_t LOCK_CH2=0;

// 编码器处理函数
void ENC_PROCESS(void) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
	int32_t diff;
	uint32_t current_cnt;


	if (CH_selected) {
 8001a36:	4b4b      	ldr	r3, [pc, #300]	@ (8001b64 <ENC_PROCESS+0x134>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d02f      	beq.n	8001a9e <ENC_PROCESS+0x6e>
	current_cnt = htim4.Instance->CNT;
 8001a3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b68 <ENC_PROCESS+0x138>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	607b      	str	r3, [r7, #4]
	htim4.Instance->CNT=32767;
 8001a46:	4b48      	ldr	r3, [pc, #288]	@ (8001b68 <ENC_PROCESS+0x138>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001a4e:	625a      	str	r2, [r3, #36]	@ 0x24
	diff = (int32_t)(current_cnt - 32767)*((FEAnalog.CD_CH2+1));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8001a56:	3b7f      	subs	r3, #127	@ 0x7f
 8001a58:	4a44      	ldr	r2, [pc, #272]	@ (8001b6c <ENC_PROCESS+0x13c>)
 8001a5a:	6892      	ldr	r2, [r2, #8]
 8001a5c:	3201      	adds	r2, #1
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	603b      	str	r3, [r7, #0]
	handle_overflow(&FEAnalog.OFFSET1, diff, 0, 4095);
 8001a64:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001a68:	2200      	movs	r2, #0
 8001a6a:	6839      	ldr	r1, [r7, #0]
 8001a6c:	4840      	ldr	r0, [pc, #256]	@ (8001b70 <ENC_PROCESS+0x140>)
 8001a6e:	f7ff fae1 	bl	8001034 <handle_overflow>


	current_cnt = htim3.Instance->CNT;
 8001a72:	4b40      	ldr	r3, [pc, #256]	@ (8001b74 <ENC_PROCESS+0x144>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a78:	607b      	str	r3, [r7, #4]
	htim3.Instance->CNT=32767;
 8001a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b74 <ENC_PROCESS+0x144>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001a82:	625a      	str	r2, [r3, #36]	@ 0x24
	diff = (int32_t)(current_cnt - 32767);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8001a8a:	3b7f      	subs	r3, #127	@ 0x7f
 8001a8c:	603b      	str	r3, [r7, #0]
	handle_overflow(&FEAnalog.CD_CH1, -diff, 0, 14);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	4259      	negs	r1, r3
 8001a92:	230e      	movs	r3, #14
 8001a94:	2200      	movs	r2, #0
 8001a96:	4838      	ldr	r0, [pc, #224]	@ (8001b78 <ENC_PROCESS+0x148>)
 8001a98:	f7ff facc 	bl	8001034 <handle_overflow>
 8001a9c:	e02e      	b.n	8001afc <ENC_PROCESS+0xcc>
	}
	else
	{
	current_cnt = htim4.Instance->CNT;
 8001a9e:	4b32      	ldr	r3, [pc, #200]	@ (8001b68 <ENC_PROCESS+0x138>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa4:	607b      	str	r3, [r7, #4]
	htim4.Instance->CNT=32767;
 8001aa6:	4b30      	ldr	r3, [pc, #192]	@ (8001b68 <ENC_PROCESS+0x138>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001aae:	625a      	str	r2, [r3, #36]	@ 0x24
	diff = (int32_t)(current_cnt - 32767)*((FEAnalog.CD_CH2+1));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8001ab6:	3b7f      	subs	r3, #127	@ 0x7f
 8001ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8001b6c <ENC_PROCESS+0x13c>)
 8001aba:	6892      	ldr	r2, [r2, #8]
 8001abc:	3201      	adds	r2, #1
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
 8001ac2:	603b      	str	r3, [r7, #0]
	handle_overflow(&FEAnalog.OFFSET2, diff, 0, 4095);
 8001ac4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001ac8:	2200      	movs	r2, #0
 8001aca:	6839      	ldr	r1, [r7, #0]
 8001acc:	482b      	ldr	r0, [pc, #172]	@ (8001b7c <ENC_PROCESS+0x14c>)
 8001ace:	f7ff fab1 	bl	8001034 <handle_overflow>

	current_cnt = htim3.Instance->CNT;
 8001ad2:	4b28      	ldr	r3, [pc, #160]	@ (8001b74 <ENC_PROCESS+0x144>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad8:	607b      	str	r3, [r7, #4]
	htim3.Instance->CNT=32767;
 8001ada:	4b26      	ldr	r3, [pc, #152]	@ (8001b74 <ENC_PROCESS+0x144>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001ae2:	625a      	str	r2, [r3, #36]	@ 0x24
	diff = (int32_t)(current_cnt - 32767);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8001aea:	3b7f      	subs	r3, #127	@ 0x7f
 8001aec:	603b      	str	r3, [r7, #0]
	handle_overflow(&FEAnalog.CD_CH2, -diff, 0, 14);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	4259      	negs	r1, r3
 8001af2:	230e      	movs	r3, #14
 8001af4:	2200      	movs	r2, #0
 8001af6:	4822      	ldr	r0, [pc, #136]	@ (8001b80 <ENC_PROCESS+0x150>)
 8001af8:	f7ff fa9c 	bl	8001034 <handle_overflow>





	current_cnt = htim20.Instance->CNT;
 8001afc:	4b21      	ldr	r3, [pc, #132]	@ (8001b84 <ENC_PROCESS+0x154>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b02:	607b      	str	r3, [r7, #4]
	htim20.Instance->CNT=32767;
 8001b04:	4b1f      	ldr	r3, [pc, #124]	@ (8001b84 <ENC_PROCESS+0x154>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001b0c:	625a      	str	r2, [r3, #36]	@ 0x24
	diff = (int32_t)(32767 - current_cnt);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8001b14:	337f      	adds	r3, #127	@ 0x7f
 8001b16:	603b      	str	r3, [r7, #0]
	handle_overflow(&htim8.Instance->CCR1, diff, 4, 180);
 8001b18:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <ENC_PROCESS+0x158>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8001b20:	23b4      	movs	r3, #180	@ 0xb4
 8001b22:	2204      	movs	r2, #4
 8001b24:	6839      	ldr	r1, [r7, #0]
 8001b26:	f7ff fa85 	bl	8001034 <handle_overflow>

	current_cnt = htim1.Instance->CNT;
 8001b2a:	4b18      	ldr	r3, [pc, #96]	@ (8001b8c <ENC_PROCESS+0x15c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b30:	607b      	str	r3, [r7, #4]
	htim1.Instance->CNT=32767;
 8001b32:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <ENC_PROCESS+0x15c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001b3a:	625a      	str	r2, [r3, #36]	@ 0x24
	diff = (int32_t)(current_cnt - 32767);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8001b42:	3b7f      	subs	r3, #127	@ 0x7f
 8001b44:	603b      	str	r3, [r7, #0]
	handle_overflow(&WS2812_Brightness, diff, 0, 255);
 8001b46:	23ff      	movs	r3, #255	@ 0xff
 8001b48:	2200      	movs	r2, #0
 8001b4a:	6839      	ldr	r1, [r7, #0]
 8001b4c:	4810      	ldr	r0, [pc, #64]	@ (8001b90 <ENC_PROCESS+0x160>)
 8001b4e:	f7ff fa71 	bl	8001034 <handle_overflow>
	WS2812_Write_Colors(rainbow_colors, 10);
 8001b52:	210a      	movs	r1, #10
 8001b54:	480f      	ldr	r0, [pc, #60]	@ (8001b94 <ENC_PROCESS+0x164>)
 8001b56:	f002 ffa1 	bl	8004a9c <WS2812_Write_Colors>

}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20011028 	.word	0x20011028
 8001b68:	20000d70 	.word	0x20000d70
 8001b6c:	2000025c 	.word	0x2000025c
 8001b70:	20000268 	.word	0x20000268
 8001b74:	20000d24 	.word	0x20000d24
 8001b78:	20000260 	.word	0x20000260
 8001b7c:	2000026c 	.word	0x2000026c
 8001b80:	20000264 	.word	0x20000264
 8001b84:	20000eec 	.word	0x20000eec
 8001b88:	20000e54 	.word	0x20000e54
 8001b8c:	20000cd8 	.word	0x20000cd8
 8001b90:	20000278 	.word	0x20000278
 8001b94:	2000020c 	.word	0x2000020c

08001b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b9e:	f003 f804 	bl	8004baa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba2:	f000 f8ef 	bl	8001d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ba6:	f001 fa19 	bl	8002fdc <MX_GPIO_Init>
  MX_DMA_Init();
 8001baa:	f001 f9c5 	bl	8002f38 <MX_DMA_Init>
  MX_USB_Device_Init();
 8001bae:	f011 fe19 	bl	80137e4 <MX_USB_Device_Init>
  MX_COMP2_Init();
 8001bb2:	f000 fae9 	bl	8002188 <MX_COMP2_Init>
  MX_COMP5_Init();
 8001bb6:	f000 fb0d 	bl	80021d4 <MX_COMP5_Init>
  MX_DAC1_Init();
 8001bba:	f000 fb53 	bl	8002264 <MX_DAC1_Init>
  MX_DAC2_Init();
 8001bbe:	f000 fb9b 	bl	80022f8 <MX_DAC2_Init>
  MX_OPAMP1_Init();
 8001bc2:	f000 fd7f 	bl	80026c4 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001bc6:	f000 fda9 	bl	800271c <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8001bca:	f000 fdcd 	bl	8002768 <MX_OPAMP3_Init>
  MX_OPAMP6_Init();
 8001bce:	f000 fe17 	bl	8002800 <MX_OPAMP6_Init>
  MX_TIM1_Init();
 8001bd2:	f000 fe7f 	bl	80028d4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001bd6:	f000 ff2d 	bl	8002a34 <MX_TIM4_Init>
  MX_TIM20_Init();
 8001bda:	f001 f953 	bl	8002e84 <MX_TIM20_Init>
  MX_TIM3_Init();
 8001bde:	f000 fed3 	bl	8002988 <MX_TIM3_Init>
  MX_ADC5_Init();
 8001be2:	f000 f9ff 	bl	8001fe4 <MX_ADC5_Init>
  MX_TIM15_Init();
 8001be6:	f001 f8a9 	bl	8002d3c <MX_TIM15_Init>
  MX_TIM8_Init();
 8001bea:	f000 ffe5 	bl	8002bb8 <MX_TIM8_Init>
  MX_SPI3_Init();
 8001bee:	f000 fe33 	bl	8002858 <MX_SPI3_Init>
  MX_I2C3_Init();
 8001bf2:	f000 fcdd 	bl	80025b0 <MX_I2C3_Init>
  MX_DAC4_Init();
 8001bf6:	f000 fbb9 	bl	800236c <MX_DAC4_Init>
  MX_LPUART1_UART_Init();
 8001bfa:	f000 fd19 	bl	8002630 <MX_LPUART1_UART_Init>
  MX_OPAMP5_Init();
 8001bfe:	f000 fdd9 	bl	80027b4 <MX_OPAMP5_Init>
  MX_TIM7_Init();
 8001c02:	f000 ffa3 	bl	8002b4c <MX_TIM7_Init>
  MX_ADC2_Init();
 8001c06:	f000 f90b 	bl	8001e20 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001c0a:	f000 f971 	bl	8001ef0 <MX_ADC3_Init>
  MX_TIM6_Init();
 8001c0e:	f000 ff67 	bl	8002ae0 <MX_TIM6_Init>
  MX_HRTIM1_Init();
 8001c12:	f000 fbe5 	bl	80023e0 <MX_HRTIM1_Init>
  MX_CRC_Init();
 8001c16:	f000 fb03 	bl	8002220 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  htim1.Instance->CNT=32767;
 8001c1a:	4b45      	ldr	r3, [pc, #276]	@ (8001d30 <main+0x198>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001c22:	625a      	str	r2, [r3, #36]	@ 0x24
  htim3.Instance->CNT=32767;
 8001c24:	4b43      	ldr	r3, [pc, #268]	@ (8001d34 <main+0x19c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001c2c:	625a      	str	r2, [r3, #36]	@ 0x24
  htim4.Instance->CNT=32767;
 8001c2e:	4b42      	ldr	r3, [pc, #264]	@ (8001d38 <main+0x1a0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001c36:	625a      	str	r2, [r3, #36]	@ 0x24
  htim20.Instance->CNT=32767;
 8001c38:	4b40      	ldr	r3, [pc, #256]	@ (8001d3c <main+0x1a4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001c40:	625a      	str	r2, [r3, #36]	@ 0x24
//  HAL_OPAMP_Start(&hopamp3);
//  HAL_OPAMP_Start(&hopamp4);
//  HAL_OPAMP_Start(&hopamp5);
//  HAL_OPAMP_Start(&hopamp6);

	HAL_ADC_Start_DMA(&hadc2, BUFFER_DPO_CH2, DPO_DEEP);
 8001c42:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c46:	493e      	ldr	r1, [pc, #248]	@ (8001d40 <main+0x1a8>)
 8001c48:	483e      	ldr	r0, [pc, #248]	@ (8001d44 <main+0x1ac>)
 8001c4a:	f003 fd39 	bl	80056c0 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, BUFFER_DPO_CH1, DPO_DEEP);
 8001c4e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c52:	493d      	ldr	r1, [pc, #244]	@ (8001d48 <main+0x1b0>)
 8001c54:	483d      	ldr	r0, [pc, #244]	@ (8001d4c <main+0x1b4>)
 8001c56:	f003 fd33 	bl	80056c0 <HAL_ADC_Start_DMA>

  HAL_ADC_Start_DMA(&hadc5, BUFFER_SYS_ADC, 5);
 8001c5a:	2205      	movs	r2, #5
 8001c5c:	493c      	ldr	r1, [pc, #240]	@ (8001d50 <main+0x1b8>)
 8001c5e:	483d      	ldr	r0, [pc, #244]	@ (8001d54 <main+0x1bc>)
 8001c60:	f003 fd2e 	bl	80056c0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 8001c64:	483c      	ldr	r0, [pc, #240]	@ (8001d58 <main+0x1c0>)
 8001c66:	f00b fdbf 	bl	800d7e8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim7);
 8001c6a:	483c      	ldr	r0, [pc, #240]	@ (8001d5c <main+0x1c4>)
 8001c6c:	f00b fdbc 	bl	800d7e8 <HAL_TIM_Base_Start>


  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001c70:	213c      	movs	r1, #60	@ 0x3c
 8001c72:	482f      	ldr	r0, [pc, #188]	@ (8001d30 <main+0x198>)
 8001c74:	f00c fa6e 	bl	800e154 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001c78:	213c      	movs	r1, #60	@ 0x3c
 8001c7a:	482e      	ldr	r0, [pc, #184]	@ (8001d34 <main+0x19c>)
 8001c7c:	f00c fa6a 	bl	800e154 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001c80:	213c      	movs	r1, #60	@ 0x3c
 8001c82:	482d      	ldr	r0, [pc, #180]	@ (8001d38 <main+0x1a0>)
 8001c84:	f00c fa66 	bl	800e154 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim20, TIM_CHANNEL_ALL);
 8001c88:	213c      	movs	r1, #60	@ 0x3c
 8001c8a:	482c      	ldr	r0, [pc, #176]	@ (8001d3c <main+0x1a4>)
 8001c8c:	f00c fa62 	bl	800e154 <HAL_TIM_Encoder_Start>


  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001c90:	2100      	movs	r1, #0
 8001c92:	4833      	ldr	r0, [pc, #204]	@ (8001d60 <main+0x1c8>)
 8001c94:	f00b fe7a 	bl	800d98c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4832      	ldr	r0, [pc, #200]	@ (8001d64 <main+0x1cc>)
 8001c9c:	f00b fe76 	bl	800d98c <HAL_TIM_PWM_Start>


  FT6336_Init();
 8001ca0:	f7ff fd22 	bl	80016e8 <FT6336_Init>
  ST7789_Init();
 8001ca4:	f001 fbec 	bl	8003480 <ST7789_Init>


  View_DoubaoWelcome();
 8001ca8:	f7ff fae2 	bl	8001270 <View_DoubaoWelcome>


  HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TC1);  // Enable the generation of the waveform signal on the designated output
 8001cac:	2110      	movs	r1, #16
 8001cae:	482e      	ldr	r0, [pc, #184]	@ (8001d68 <main+0x1d0>)
 8001cb0:	f007 f8a3 	bl	8008dfa <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_C);  // Start the counter of the Timer A operating in waveform mode
 8001cb4:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8001cb8:	482b      	ldr	r0, [pc, #172]	@ (8001d68 <main+0x1d0>)
 8001cba:	f007 f8cb 	bl	8008e54 <HAL_HRTIM_WaveformCountStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	ENC_PROCESS();
 8001cbe:	f7ff feb7 	bl	8001a30 <ENC_PROCESS>
	KEY_PROCESS();
 8001cc2:	f7ff fe41 	bl	8001948 <KEY_PROCESS>
//	  ST7789_Test();
//	  ST7789_WriteString(10, 10, " !\"#\%\$", Han_Array, WHITE, BLACK);

	WS2812_Write_Colors(WS2812_colors, 10);
 8001cc6:	210a      	movs	r1, #10
 8001cc8:	4828      	ldr	r0, [pc, #160]	@ (8001d6c <main+0x1d4>)
 8001cca:	f002 fee7 	bl	8004a9c <WS2812_Write_Colors>

	Analog_FE_Update();
 8001cce:	f7ff fdb9 	bl	8001844 <Analog_FE_Update>


	View_Config();
 8001cd2:	f7ff faf1 	bl	80012b8 <View_Config>



	while(LOCK_CH1){
 8001cd6:	e021      	b.n	8001d1c <main+0x184>
		for (int i = 0; i < DPO_DEEP; i++) {
 8001cd8:	2300      	movs	r3, #0
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	e017      	b.n	8001d0e <main+0x176>
			sprintf(BUFFER_CDC,"ADC: %d,%d \r\n", BUFFER_DPO_CH1_PROC[i],BUFFER_DPO_CH2_PROC[i]);
 8001cde:	4a24      	ldr	r2, [pc, #144]	@ (8001d70 <main+0x1d8>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ce6:	4923      	ldr	r1, [pc, #140]	@ (8001d74 <main+0x1dc>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cee:	4922      	ldr	r1, [pc, #136]	@ (8001d78 <main+0x1e0>)
 8001cf0:	4822      	ldr	r0, [pc, #136]	@ (8001d7c <main+0x1e4>)
 8001cf2:	f013 fa1f 	bl	8015134 <siprintf>

	    	CDC_Transmit_FS(BUFFER_CDC, strlen(BUFFER_CDC));
 8001cf6:	4821      	ldr	r0, [pc, #132]	@ (8001d7c <main+0x1e4>)
 8001cf8:	f7fe fae2 	bl	80002c0 <strlen>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	4619      	mov	r1, r3
 8001d02:	481e      	ldr	r0, [pc, #120]	@ (8001d7c <main+0x1e4>)
 8001d04:	f011 fe2c 	bl	8013960 <CDC_Transmit_FS>
		for (int i = 0; i < DPO_DEEP; i++) {
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d14:	dbe3      	blt.n	8001cde <main+0x146>

//			printf("ADC: %d,%d \r\n", BUFFER_DPO_CH1_PROC[i],BUFFER_DPO_CH2_PROC[i]);


		}
		LOCK_CH1=0;
 8001d16:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <main+0x1e8>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
	while(LOCK_CH1){
 8001d1c:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <main+0x1e8>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1d9      	bne.n	8001cd8 <main+0x140>
	}

	TLC5952_WriteLED();
 8001d24:	f7ff f9f2 	bl	800110c <TLC5952_WriteLED>
	TLC5952_WriteControl();
 8001d28:	f7ff fa26 	bl	8001178 <TLC5952_WriteControl>
	ENC_PROCESS();
 8001d2c:	e7c7      	b.n	8001cbe <main+0x126>
 8001d2e:	bf00      	nop
 8001d30:	20000cd8 	.word	0x20000cd8
 8001d34:	20000d24 	.word	0x20000d24
 8001d38:	20000d70 	.word	0x20000d70
 8001d3c:	20000eec 	.word	0x20000eec
 8001d40:	2000500c 	.word	0x2000500c
 8001d44:	200005f8 	.word	0x200005f8
 8001d48:	2000100c 	.word	0x2000100c
 8001d4c:	20000664 	.word	0x20000664
 8001d50:	20000ff8 	.word	0x20000ff8
 8001d54:	200006d0 	.word	0x200006d0
 8001d58:	20000dbc 	.word	0x20000dbc
 8001d5c:	20000e08 	.word	0x20000e08
 8001d60:	20000ea0 	.word	0x20000ea0
 8001d64:	20000e54 	.word	0x20000e54
 8001d68:	20000904 	.word	0x20000904
 8001d6c:	20000234 	.word	0x20000234
 8001d70:	2000900c 	.word	0x2000900c
 8001d74:	2000d00c 	.word	0x2000d00c
 8001d78:	08018ba0 	.word	0x08018ba0
 8001d7c:	20000018 	.word	0x20000018
 8001d80:	20011029 	.word	0x20011029

08001d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b094      	sub	sp, #80	@ 0x50
 8001d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d8a:	f107 0318 	add.w	r3, r7, #24
 8001d8e:	2238      	movs	r2, #56	@ 0x38
 8001d90:	2100      	movs	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f013 fac6 	bl	8015324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001daa:	f009 ff55 	bl	800bc58 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001dae:	2321      	movs	r3, #33	@ 0x21
 8001db0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001db2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001db6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001db8:	2301      	movs	r3, #1
 8001dba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8001dc8:	235a      	movs	r3, #90	@ 0x5a
 8001dca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001dcc:	2306      	movs	r3, #6
 8001dce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd8:	f107 0318 	add.w	r3, r7, #24
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f009 ffef 	bl	800bdc0 <HAL_RCC_OscConfig>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001de8:	f001 fa48 	bl	800327c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dec:	230f      	movs	r3, #15
 8001dee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df0:	2303      	movs	r3, #3
 8001df2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	2104      	movs	r1, #4
 8001e04:	4618      	mov	r0, r3
 8001e06:	f00a faed 	bl	800c3e4 <HAL_RCC_ClockConfig>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001e10:	f001 fa34 	bl	800327c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001e14:	f00a fcbc 	bl	800c790 <HAL_RCC_EnableCSS>
}
 8001e18:	bf00      	nop
 8001e1a:	3750      	adds	r7, #80	@ 0x50
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e26:	463b      	mov	r3, r7
 8001e28:	2220      	movs	r2, #32
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f013 fa79 	bl	8015324 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001e32:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee4 <MX_ADC2_Init+0xc4>)
 8001e34:	4a2c      	ldr	r2, [pc, #176]	@ (8001ee8 <MX_ADC2_Init+0xc8>)
 8001e36:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001e38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee4 <MX_ADC2_Init+0xc4>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001e3e:	4b29      	ldr	r3, [pc, #164]	@ (8001ee4 <MX_ADC2_Init+0xc4>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e44:	4b27      	ldr	r3, [pc, #156]	@ (8001ee4 <MX_ADC2_Init+0xc4>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001e4a:	4b26      	ldr	r3, [pc, #152]	@ (8001ee4 <MX_ADC2_Init+0xc4>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e50:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <MX_ADC2_Init+0xc4>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e56:	4b23      	ldr	r3, [pc, #140]	@ (8001ee4 <MX_ADC2_Init+0xc4>)
 8001e58:	2204      	movs	r2, #4
 8001e5a:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001e5c:	4b21      	ldr	r3, [pc, #132]	@ (8001ee4 <MX_ADC2_Init+0xc4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001e62:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <MX_ADC2_Init+0xc4>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001e68:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee4 <MX_ADC2_Init+0xc4>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <MX_ADC2_Init+0xc4>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001e76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <MX_ADC2_Init+0xc4>)
 8001e78:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8001e7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001e7e:	4b19      	ldr	r3, [pc, #100]	@ (8001ee4 <MX_ADC2_Init+0xc4>)
 8001e80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e84:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001e86:	4b17      	ldr	r3, [pc, #92]	@ (8001ee4 <MX_ADC2_Init+0xc4>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <MX_ADC2_Init+0xc4>)
 8001e90:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e94:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001e96:	4b13      	ldr	r3, [pc, #76]	@ (8001ee4 <MX_ADC2_Init+0xc4>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e9e:	4811      	ldr	r0, [pc, #68]	@ (8001ee4 <MX_ADC2_Init+0xc4>)
 8001ea0:	f003 fa52 	bl	8005348 <HAL_ADC_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001eaa:	f001 f9e7 	bl	800327c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001eae:	4b0f      	ldr	r3, [pc, #60]	@ (8001eec <MX_ADC2_Init+0xcc>)
 8001eb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001eb2:	2306      	movs	r3, #6
 8001eb4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001eba:	237f      	movs	r3, #127	@ 0x7f
 8001ebc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4806      	ldr	r0, [pc, #24]	@ (8001ee4 <MX_ADC2_Init+0xc4>)
 8001ecc:	f003 ff4a 	bl	8005d64 <HAL_ADC_ConfigChannel>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8001ed6:	f001 f9d1 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001eda:	bf00      	nop
 8001edc:	3720      	adds	r7, #32
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200005f8 	.word	0x200005f8
 8001ee8:	50000100 	.word	0x50000100
 8001eec:	10c00010 	.word	0x10c00010

08001ef0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08c      	sub	sp, #48	@ 0x30
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	2220      	movs	r2, #32
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f013 fa0b 	bl	8015324 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001f0e:	4b32      	ldr	r3, [pc, #200]	@ (8001fd8 <MX_ADC3_Init+0xe8>)
 8001f10:	4a32      	ldr	r2, [pc, #200]	@ (8001fdc <MX_ADC3_Init+0xec>)
 8001f12:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f14:	4b30      	ldr	r3, [pc, #192]	@ (8001fd8 <MX_ADC3_Init+0xe8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001fd8 <MX_ADC3_Init+0xe8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f20:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd8 <MX_ADC3_Init+0xe8>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001f26:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd8 <MX_ADC3_Init+0xe8>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd8 <MX_ADC3_Init+0xe8>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f32:	4b29      	ldr	r3, [pc, #164]	@ (8001fd8 <MX_ADC3_Init+0xe8>)
 8001f34:	2204      	movs	r2, #4
 8001f36:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001f38:	4b27      	ldr	r3, [pc, #156]	@ (8001fd8 <MX_ADC3_Init+0xe8>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001f3e:	4b26      	ldr	r3, [pc, #152]	@ (8001fd8 <MX_ADC3_Init+0xe8>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001f44:	4b24      	ldr	r3, [pc, #144]	@ (8001fd8 <MX_ADC3_Init+0xe8>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001f4a:	4b23      	ldr	r3, [pc, #140]	@ (8001fd8 <MX_ADC3_Init+0xe8>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001f52:	4b21      	ldr	r3, [pc, #132]	@ (8001fd8 <MX_ADC3_Init+0xe8>)
 8001f54:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8001f58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd8 <MX_ADC3_Init+0xe8>)
 8001f5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f60:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001f62:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd8 <MX_ADC3_Init+0xe8>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd8 <MX_ADC3_Init+0xe8>)
 8001f6c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f70:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001f72:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <MX_ADC3_Init+0xe8>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001f7a:	4817      	ldr	r0, [pc, #92]	@ (8001fd8 <MX_ADC3_Init+0xe8>)
 8001f7c:	f003 f9e4 	bl	8005348 <HAL_ADC_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8001f86:	f001 f979 	bl	800327c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f92:	4619      	mov	r1, r3
 8001f94:	4810      	ldr	r0, [pc, #64]	@ (8001fd8 <MX_ADC3_Init+0xe8>)
 8001f96:	f004 feb3 	bl	8006d00 <HAL_ADCEx_MultiModeConfigChannel>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001fa0:	f001 f96c 	bl	800327c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <MX_ADC3_Init+0xf0>)
 8001fa6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fa8:	2306      	movs	r3, #6
 8001faa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001fb0:	237f      	movs	r3, #127	@ 0x7f
 8001fb2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4805      	ldr	r0, [pc, #20]	@ (8001fd8 <MX_ADC3_Init+0xe8>)
 8001fc2:	f003 fecf 	bl	8005d64 <HAL_ADC_ConfigChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 8001fcc:	f001 f956 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001fd0:	bf00      	nop
 8001fd2:	3730      	adds	r7, #48	@ 0x30
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000664 	.word	0x20000664
 8001fdc:	50000400 	.word	0x50000400
 8001fe0:	14f00020 	.word	0x14f00020

08001fe4 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b090      	sub	sp, #64	@ 0x40
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001fea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
 8001ff8:	611a      	str	r2, [r3, #16]
 8001ffa:	615a      	str	r2, [r3, #20]
 8001ffc:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2220      	movs	r2, #32
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f013 f98d 	bl	8015324 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 800200a:	4b57      	ldr	r3, [pc, #348]	@ (8002168 <MX_ADC5_Init+0x184>)
 800200c:	4a57      	ldr	r2, [pc, #348]	@ (800216c <MX_ADC5_Init+0x188>)
 800200e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002010:	4b55      	ldr	r3, [pc, #340]	@ (8002168 <MX_ADC5_Init+0x184>)
 8002012:	2200      	movs	r2, #0
 8002014:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8002016:	4b54      	ldr	r3, [pc, #336]	@ (8002168 <MX_ADC5_Init+0x184>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800201c:	4b52      	ldr	r3, [pc, #328]	@ (8002168 <MX_ADC5_Init+0x184>)
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8002022:	4b51      	ldr	r3, [pc, #324]	@ (8002168 <MX_ADC5_Init+0x184>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002028:	4b4f      	ldr	r3, [pc, #316]	@ (8002168 <MX_ADC5_Init+0x184>)
 800202a:	2201      	movs	r2, #1
 800202c:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800202e:	4b4e      	ldr	r3, [pc, #312]	@ (8002168 <MX_ADC5_Init+0x184>)
 8002030:	2208      	movs	r2, #8
 8002032:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8002034:	4b4c      	ldr	r3, [pc, #304]	@ (8002168 <MX_ADC5_Init+0x184>)
 8002036:	2200      	movs	r2, #0
 8002038:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 800203a:	4b4b      	ldr	r3, [pc, #300]	@ (8002168 <MX_ADC5_Init+0x184>)
 800203c:	2201      	movs	r2, #1
 800203e:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 5;
 8002040:	4b49      	ldr	r3, [pc, #292]	@ (8002168 <MX_ADC5_Init+0x184>)
 8002042:	2205      	movs	r2, #5
 8002044:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8002046:	4b48      	ldr	r3, [pc, #288]	@ (8002168 <MX_ADC5_Init+0x184>)
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 800204e:	4b46      	ldr	r3, [pc, #280]	@ (8002168 <MX_ADC5_Init+0x184>)
 8002050:	f44f 62f8 	mov.w	r2, #1984	@ 0x7c0
 8002054:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002056:	4b44      	ldr	r3, [pc, #272]	@ (8002168 <MX_ADC5_Init+0x184>)
 8002058:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800205c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 800205e:	4b42      	ldr	r3, [pc, #264]	@ (8002168 <MX_ADC5_Init+0x184>)
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002066:	4b40      	ldr	r3, [pc, #256]	@ (8002168 <MX_ADC5_Init+0x184>)
 8002068:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800206c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 800206e:	4b3e      	ldr	r3, [pc, #248]	@ (8002168 <MX_ADC5_Init+0x184>)
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8002076:	483c      	ldr	r0, [pc, #240]	@ (8002168 <MX_ADC5_Init+0x184>)
 8002078:	f003 f966 	bl	8005348 <HAL_ADC_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_ADC5_Init+0xa2>
  {
    Error_Handler();
 8002082:	f001 f8fb 	bl	800327c <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8002086:	4b3a      	ldr	r3, [pc, #232]	@ (8002170 <MX_ADC5_Init+0x18c>)
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800208a:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 800208e:	62bb      	str	r3, [r7, #40]	@ 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 8002090:	4b38      	ldr	r3, [pc, #224]	@ (8002174 <MX_ADC5_Init+0x190>)
 8002092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  AnalogWDGConfig.ITMode = ENABLE;
 8002094:	2301      	movs	r3, #1
 8002096:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  AnalogWDGConfig.HighThreshold = 4095;
 800209a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800209e:	637b      	str	r3, [r7, #52]	@ 0x34
  AnalogWDGConfig.LowThreshold = 3500;
 80020a0:	f640 53ac 	movw	r3, #3500	@ 0xdac
 80020a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_ADC_AnalogWDGConfig(&hadc5, &AnalogWDGConfig) != HAL_OK)
 80020aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ae:	4619      	mov	r1, r3
 80020b0:	482d      	ldr	r0, [pc, #180]	@ (8002168 <MX_ADC5_Init+0x184>)
 80020b2:	f004 fa97 	bl	80065e4 <HAL_ADC_AnalogWDGConfig>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_ADC5_Init+0xdc>
  {
    Error_Handler();
 80020bc:	f001 f8de 	bl	800327c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80020c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002174 <MX_ADC5_Init+0x190>)
 80020c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020c4:	2306      	movs	r3, #6
 80020c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80020c8:	2307      	movs	r3, #7
 80020ca:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020cc:	237f      	movs	r3, #127	@ 0x7f
 80020ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020d0:	2304      	movs	r3, #4
 80020d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	4619      	mov	r1, r3
 80020dc:	4822      	ldr	r0, [pc, #136]	@ (8002168 <MX_ADC5_Init+0x184>)
 80020de:	f003 fe41 	bl	8005d64 <HAL_ADC_ConfigChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_ADC5_Init+0x108>
  {
    Error_Handler();
 80020e8:	f001 f8c8 	bl	800327c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC5;
 80020ec:	4b22      	ldr	r3, [pc, #136]	@ (8002178 <MX_ADC5_Init+0x194>)
 80020ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020f0:	230c      	movs	r3, #12
 80020f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	4619      	mov	r1, r3
 80020f8:	481b      	ldr	r0, [pc, #108]	@ (8002168 <MX_ADC5_Init+0x184>)
 80020fa:	f003 fe33 	bl	8005d64 <HAL_ADC_ConfigChannel>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_ADC5_Init+0x124>
  {
    Error_Handler();
 8002104:	f001 f8ba 	bl	800327c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8002108:	4b1c      	ldr	r3, [pc, #112]	@ (800217c <MX_ADC5_Init+0x198>)
 800210a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800210c:	2312      	movs	r3, #18
 800210e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	4619      	mov	r1, r3
 8002114:	4814      	ldr	r0, [pc, #80]	@ (8002168 <MX_ADC5_Init+0x184>)
 8002116:	f003 fe25 	bl	8005d64 <HAL_ADC_ConfigChannel>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_ADC5_Init+0x140>
  {
    Error_Handler();
 8002120:	f001 f8ac 	bl	800327c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002124:	4b16      	ldr	r3, [pc, #88]	@ (8002180 <MX_ADC5_Init+0x19c>)
 8002126:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002128:	2318      	movs	r3, #24
 800212a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	4619      	mov	r1, r3
 8002130:	480d      	ldr	r0, [pc, #52]	@ (8002168 <MX_ADC5_Init+0x184>)
 8002132:	f003 fe17 	bl	8005d64 <HAL_ADC_ConfigChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_ADC5_Init+0x15c>
  {
    Error_Handler();
 800213c:	f001 f89e 	bl	800327c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 8002140:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <MX_ADC5_Init+0x1a0>)
 8002142:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002144:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002148:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	4619      	mov	r1, r3
 800214e:	4806      	ldr	r0, [pc, #24]	@ (8002168 <MX_ADC5_Init+0x184>)
 8002150:	f003 fe08 	bl	8005d64 <HAL_ADC_ConfigChannel>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_ADC5_Init+0x17a>
  {
    Error_Handler();
 800215a:	f001 f88f 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	3740      	adds	r7, #64	@ 0x40
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200006d0 	.word	0x200006d0
 800216c:	50000600 	.word	0x50000600
 8002170:	7dc00000 	.word	0x7dc00000
 8002174:	08600004 	.word	0x08600004
 8002178:	90c00010 	.word	0x90c00010
 800217c:	c7520000 	.word	0xc7520000
 8002180:	cb840000 	.word	0xcb840000
 8002184:	8c900008 	.word	0x8c900008

08002188 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 800218c:	4b0f      	ldr	r3, [pc, #60]	@ (80021cc <MX_COMP2_Init+0x44>)
 800218e:	4a10      	ldr	r2, [pc, #64]	@ (80021d0 <MX_COMP2_Init+0x48>)
 8002190:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8002192:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <MX_COMP2_Init+0x44>)
 8002194:	2200      	movs	r2, #0
 8002196:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8002198:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <MX_COMP2_Init+0x44>)
 800219a:	2250      	movs	r2, #80	@ 0x50
 800219c:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800219e:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <MX_COMP2_Init+0x44>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80021a4:	4b09      	ldr	r3, [pc, #36]	@ (80021cc <MX_COMP2_Init+0x44>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80021aa:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <MX_COMP2_Init+0x44>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80021b0:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <MX_COMP2_Init+0x44>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80021b6:	4805      	ldr	r0, [pc, #20]	@ (80021cc <MX_COMP2_Init+0x44>)
 80021b8:	f004 fffa 	bl	80071b0 <HAL_COMP_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 80021c2:	f001 f85b 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2000085c 	.word	0x2000085c
 80021d0:	40010204 	.word	0x40010204

080021d4 <MX_COMP5_Init>:
  * @brief COMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP5_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002218 <MX_COMP5_Init+0x44>)
 80021da:	4a10      	ldr	r2, [pc, #64]	@ (800221c <MX_COMP5_Init+0x48>)
 80021dc:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <MX_COMP5_Init+0x44>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	605a      	str	r2, [r3, #4]
  hcomp5.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <MX_COMP5_Init+0x44>)
 80021e6:	2250      	movs	r2, #80	@ 0x50
 80021e8:	609a      	str	r2, [r3, #8]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80021ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <MX_COMP5_Init+0x44>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80021f0:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <MX_COMP5_Init+0x44>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80021f6:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <MX_COMP5_Init+0x44>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	615a      	str	r2, [r3, #20]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <MX_COMP5_Init+0x44>)
 80021fe:	2200      	movs	r2, #0
 8002200:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 8002202:	4805      	ldr	r0, [pc, #20]	@ (8002218 <MX_COMP5_Init+0x44>)
 8002204:	f004 ffd4 	bl	80071b0 <HAL_COMP_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_COMP5_Init+0x3e>
  {
    Error_Handler();
 800220e:	f001 f835 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000880 	.word	0x20000880
 800221c:	40010210 	.word	0x40010210

08002220 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002224:	4b0d      	ldr	r3, [pc, #52]	@ (800225c <MX_CRC_Init+0x3c>)
 8002226:	4a0e      	ldr	r2, [pc, #56]	@ (8002260 <MX_CRC_Init+0x40>)
 8002228:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800222a:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <MX_CRC_Init+0x3c>)
 800222c:	2200      	movs	r2, #0
 800222e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002230:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <MX_CRC_Init+0x3c>)
 8002232:	2200      	movs	r2, #0
 8002234:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002236:	4b09      	ldr	r3, [pc, #36]	@ (800225c <MX_CRC_Init+0x3c>)
 8002238:	2200      	movs	r2, #0
 800223a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800223c:	4b07      	ldr	r3, [pc, #28]	@ (800225c <MX_CRC_Init+0x3c>)
 800223e:	2200      	movs	r2, #0
 8002240:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002242:	4b06      	ldr	r3, [pc, #24]	@ (800225c <MX_CRC_Init+0x3c>)
 8002244:	2201      	movs	r2, #1
 8002246:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002248:	4804      	ldr	r0, [pc, #16]	@ (800225c <MX_CRC_Init+0x3c>)
 800224a:	f005 fa5b 	bl	8007704 <HAL_CRC_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002254:	f001 f812 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	200008a4 	.word	0x200008a4
 8002260:	40023000 	.word	0x40023000

08002264 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08c      	sub	sp, #48	@ 0x30
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800226a:	463b      	mov	r3, r7
 800226c:	2230      	movs	r2, #48	@ 0x30
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f013 f857 	bl	8015324 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002276:	4b1e      	ldr	r3, [pc, #120]	@ (80022f0 <MX_DAC1_Init+0x8c>)
 8002278:	4a1e      	ldr	r2, [pc, #120]	@ (80022f4 <MX_DAC1_Init+0x90>)
 800227a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800227c:	481c      	ldr	r0, [pc, #112]	@ (80022f0 <MX_DAC1_Init+0x8c>)
 800227e:	f005 fb33 	bl	80078e8 <HAL_DAC_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002288:	f000 fff8 	bl	800327c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800228c:	2302      	movs	r3, #2
 800228e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002294:	2300      	movs	r3, #0
 8002296:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 800229c:	2302      	movs	r3, #2
 800229e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 80022a8:	2304      	movs	r3, #4
 80022aa:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80022b0:	463b      	mov	r3, r7
 80022b2:	2200      	movs	r2, #0
 80022b4:	4619      	mov	r1, r3
 80022b6:	480e      	ldr	r0, [pc, #56]	@ (80022f0 <MX_DAC1_Init+0x8c>)
 80022b8:	f005 fbd2 	bl	8007a60 <HAL_DAC_ConfigChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80022c2:	f000 ffdb 	bl	800327c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80022ca:	2302      	movs	r3, #2
 80022cc:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80022ce:	2302      	movs	r3, #2
 80022d0:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80022d2:	463b      	mov	r3, r7
 80022d4:	2210      	movs	r2, #16
 80022d6:	4619      	mov	r1, r3
 80022d8:	4805      	ldr	r0, [pc, #20]	@ (80022f0 <MX_DAC1_Init+0x8c>)
 80022da:	f005 fbc1 	bl	8007a60 <HAL_DAC_ConfigChannel>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_DAC1_Init+0x84>
  {
    Error_Handler();
 80022e4:	f000 ffca 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80022e8:	bf00      	nop
 80022ea:	3730      	adds	r7, #48	@ 0x30
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	200008c8 	.word	0x200008c8
 80022f4:	50000800 	.word	0x50000800

080022f8 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08c      	sub	sp, #48	@ 0x30
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80022fe:	463b      	mov	r3, r7
 8002300:	2230      	movs	r2, #48	@ 0x30
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f013 f80d 	bl	8015324 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 800230a:	4b16      	ldr	r3, [pc, #88]	@ (8002364 <MX_DAC2_Init+0x6c>)
 800230c:	4a16      	ldr	r2, [pc, #88]	@ (8002368 <MX_DAC2_Init+0x70>)
 800230e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8002310:	4814      	ldr	r0, [pc, #80]	@ (8002364 <MX_DAC2_Init+0x6c>)
 8002312:	f005 fae9 	bl	80078e8 <HAL_DAC_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 800231c:	f000 ffae 	bl	800327c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8002320:	2302      	movs	r3, #2
 8002322:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002328:	2300      	movs	r3, #0
 800232a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8002330:	2302      	movs	r3, #2
 8002332:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 800233c:	2304      	movs	r3, #4
 800233e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002344:	463b      	mov	r3, r7
 8002346:	2200      	movs	r2, #0
 8002348:	4619      	mov	r1, r3
 800234a:	4806      	ldr	r0, [pc, #24]	@ (8002364 <MX_DAC2_Init+0x6c>)
 800234c:	f005 fb88 	bl	8007a60 <HAL_DAC_ConfigChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8002356:	f000 ff91 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 800235a:	bf00      	nop
 800235c:	3730      	adds	r7, #48	@ 0x30
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200008dc 	.word	0x200008dc
 8002368:	50000c00 	.word	0x50000c00

0800236c <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08c      	sub	sp, #48	@ 0x30
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002372:	463b      	mov	r3, r7
 8002374:	2230      	movs	r2, #48	@ 0x30
 8002376:	2100      	movs	r1, #0
 8002378:	4618      	mov	r0, r3
 800237a:	f012 ffd3 	bl	8015324 <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 800237e:	4b16      	ldr	r3, [pc, #88]	@ (80023d8 <MX_DAC4_Init+0x6c>)
 8002380:	4a16      	ldr	r2, [pc, #88]	@ (80023dc <MX_DAC4_Init+0x70>)
 8002382:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8002384:	4814      	ldr	r0, [pc, #80]	@ (80023d8 <MX_DAC4_Init+0x6c>)
 8002386:	f005 faaf 	bl	80078e8 <HAL_DAC_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 8002390:	f000 ff74 	bl	800327c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8002394:	2302      	movs	r3, #2
 8002396:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800239c:	2300      	movs	r3, #0
 800239e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80023a4:	2302      	movs	r3, #2
 80023a6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80023ac:	2302      	movs	r3, #2
 80023ae:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80023b0:	2302      	movs	r3, #2
 80023b2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80023b8:	463b      	mov	r3, r7
 80023ba:	2200      	movs	r2, #0
 80023bc:	4619      	mov	r1, r3
 80023be:	4806      	ldr	r0, [pc, #24]	@ (80023d8 <MX_DAC4_Init+0x6c>)
 80023c0:	f005 fb4e 	bl	8007a60 <HAL_DAC_ConfigChannel>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 80023ca:	f000 ff57 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 80023ce:	bf00      	nop
 80023d0:	3730      	adds	r7, #48	@ 0x30
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200008f0 	.word	0x200008f0
 80023dc:	50001400 	.word	0x50001400

080023e0 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b0ae      	sub	sp, #184	@ 0xb8
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80023e6:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 80023f4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
 8002404:	615a      	str	r2, [r3, #20]
 8002406:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8002408:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800240c:	2260      	movs	r2, #96	@ 0x60
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f012 ff87 	bl	8015324 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8002416:	f107 0320 	add.w	r3, r7, #32
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8002422:	463b      	mov	r3, r7
 8002424:	2220      	movs	r2, #32
 8002426:	2100      	movs	r1, #0
 8002428:	4618      	mov	r0, r3
 800242a:	f012 ff7b 	bl	8015324 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 800242e:	4b5e      	ldr	r3, [pc, #376]	@ (80025a8 <MX_HRTIM1_Init+0x1c8>)
 8002430:	4a5e      	ldr	r2, [pc, #376]	@ (80025ac <MX_HRTIM1_Init+0x1cc>)
 8002432:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8002434:	4b5c      	ldr	r3, [pc, #368]	@ (80025a8 <MX_HRTIM1_Init+0x1c8>)
 8002436:	2200      	movs	r2, #0
 8002438:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800243a:	4b5b      	ldr	r3, [pc, #364]	@ (80025a8 <MX_HRTIM1_Init+0x1c8>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8002440:	4859      	ldr	r0, [pc, #356]	@ (80025a8 <MX_HRTIM1_Init+0x1c8>)
 8002442:	f006 f8f7 	bl	8008634 <HAL_HRTIM_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_HRTIM1_Init+0x70>
  {
    Error_Handler();
 800244c:	f000 ff16 	bl	800327c <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8002450:	210c      	movs	r1, #12
 8002452:	4855      	ldr	r0, [pc, #340]	@ (80025a8 <MX_HRTIM1_Init+0x1c8>)
 8002454:	f006 f9be 	bl	80087d4 <HAL_HRTIM_DLLCalibrationStart>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_HRTIM1_Init+0x82>
  {
    Error_Handler();
 800245e:	f000 ff0d 	bl	800327c <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8002462:	210a      	movs	r1, #10
 8002464:	4850      	ldr	r0, [pc, #320]	@ (80025a8 <MX_HRTIM1_Init+0x1c8>)
 8002466:	f006 fa0d 	bl	8008884 <HAL_HRTIM_PollForDLLCalibration>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_HRTIM1_Init+0x94>
  {
    Error_Handler();
 8002470:	f000 ff04 	bl	800327c <Error_Handler>
  }
  pTimeBaseCfg.Period = 96;
 8002474:	2360      	movs	r3, #96	@ 0x60
 8002476:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8002486:	2308      	movs	r3, #8
 8002488:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 800248c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002490:	461a      	mov	r2, r3
 8002492:	2102      	movs	r1, #2
 8002494:	4844      	ldr	r0, [pc, #272]	@ (80025a8 <MX_HRTIM1_Init+0x1c8>)
 8002496:	f006 fa29 	bl	80088ec <HAL_HRTIM_TimeBaseConfig>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_HRTIM1_Init+0xc4>
  {
    Error_Handler();
 80024a0:	f000 feec 	bl	800327c <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCtl) != HAL_OK)
 80024b6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80024ba:	461a      	mov	r2, r3
 80024bc:	2102      	movs	r1, #2
 80024be:	483a      	ldr	r0, [pc, #232]	@ (80025a8 <MX_HRTIM1_Init+0x1c8>)
 80024c0:	f006 fac9 	bl	8008a56 <HAL_HRTIM_WaveformTimerControl>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_HRTIM1_Init+0xee>
  {
    Error_Handler();
 80024ca:	f000 fed7 	bl	800327c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 80024d6:	2300      	movs	r3, #0
 80024d8:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 80024da:	2300      	movs	r3, #0
 80024dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMASize = 0x1;
 80024de:	2301      	movs	r3, #1
 80024e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80024e2:	2300      	movs	r3, #0
 80024e4:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 80024e6:	2300      	movs	r3, #0
 80024e8:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80024ea:	2300      	movs	r3, #0
 80024ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80024ee:	2300      	movs	r3, #0
 80024f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80024f6:	2300      	movs	r3, #0
 80024f8:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80024fa:	2300      	movs	r3, #0
 80024fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80024fe:	2300      	movs	r3, #0
 8002500:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8002502:	2300      	movs	r3, #0
 8002504:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8002506:	2300      	movs	r3, #0
 8002508:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 800250a:	2300      	movs	r3, #0
 800250c:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800250e:	2300      	movs	r3, #0
 8002510:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8002512:	2300      	movs	r3, #0
 8002514:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8002516:	2300      	movs	r3, #0
 8002518:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 800251a:	2300      	movs	r3, #0
 800251c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 800251e:	2300      	movs	r3, #0
 8002520:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8002524:	2300      	movs	r3, #0
 8002526:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 800252a:	2300      	movs	r3, #0
 800252c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8002530:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002534:	461a      	mov	r2, r3
 8002536:	2102      	movs	r1, #2
 8002538:	481b      	ldr	r0, [pc, #108]	@ (80025a8 <MX_HRTIM1_Init+0x1c8>)
 800253a:	f006 f9ff 	bl	800893c <HAL_HRTIM_WaveformTimerConfig>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_HRTIM1_Init+0x168>
  {
    Error_Handler();
 8002544:	f000 fe9a 	bl	800327c <Error_Handler>
  }
  pCompareCfg.CompareValue = 48;
 8002548:	2330      	movs	r3, #48	@ 0x30
 800254a:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800254c:	f107 0320 	add.w	r3, r7, #32
 8002550:	2201      	movs	r2, #1
 8002552:	2102      	movs	r1, #2
 8002554:	4814      	ldr	r0, [pc, #80]	@ (80025a8 <MX_HRTIM1_Init+0x1c8>)
 8002556:	f006 fab1 	bl	8008abc <HAL_HRTIM_WaveformCompareConfig>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_HRTIM1_Init+0x184>
  {
    Error_Handler();
 8002560:	f000 fe8c 	bl	800327c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8002564:	2300      	movs	r3, #0
 8002566:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 8002568:	2304      	movs	r3, #4
 800256a:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 800256c:	2308      	movs	r3, #8
 800256e:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8002574:	2300      	movs	r3, #0
 8002576:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 800257c:	2300      	movs	r3, #0
 800257e:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8002584:	463b      	mov	r3, r7
 8002586:	2210      	movs	r2, #16
 8002588:	2102      	movs	r1, #2
 800258a:	4807      	ldr	r0, [pc, #28]	@ (80025a8 <MX_HRTIM1_Init+0x1c8>)
 800258c:	f006 fc04 	bl	8008d98 <HAL_HRTIM_WaveformOutputConfig>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_HRTIM1_Init+0x1ba>
  {
    Error_Handler();
 8002596:	f000 fe71 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 800259a:	4803      	ldr	r0, [pc, #12]	@ (80025a8 <MX_HRTIM1_Init+0x1c8>)
 800259c:	f001 fc00 	bl	8003da0 <HAL_HRTIM_MspPostInit>

}
 80025a0:	bf00      	nop
 80025a2:	37b8      	adds	r7, #184	@ 0xb8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000904 	.word	0x20000904
 80025ac:	40016800 	.word	0x40016800

080025b0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002624 <MX_I2C3_Init+0x74>)
 80025b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002628 <MX_I2C3_Init+0x78>)
 80025b8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10E32879;
 80025ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002624 <MX_I2C3_Init+0x74>)
 80025bc:	4a1b      	ldr	r2, [pc, #108]	@ (800262c <MX_I2C3_Init+0x7c>)
 80025be:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80025c0:	4b18      	ldr	r3, [pc, #96]	@ (8002624 <MX_I2C3_Init+0x74>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025c6:	4b17      	ldr	r3, [pc, #92]	@ (8002624 <MX_I2C3_Init+0x74>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025cc:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <MX_I2C3_Init+0x74>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80025d2:	4b14      	ldr	r3, [pc, #80]	@ (8002624 <MX_I2C3_Init+0x74>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025d8:	4b12      	ldr	r3, [pc, #72]	@ (8002624 <MX_I2C3_Init+0x74>)
 80025da:	2200      	movs	r2, #0
 80025dc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025de:	4b11      	ldr	r3, [pc, #68]	@ (8002624 <MX_I2C3_Init+0x74>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002624 <MX_I2C3_Init+0x74>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80025ea:	480e      	ldr	r0, [pc, #56]	@ (8002624 <MX_I2C3_Init+0x74>)
 80025ec:	f007 f8a6 	bl	800973c <HAL_I2C_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80025f6:	f000 fe41 	bl	800327c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025fa:	2100      	movs	r1, #0
 80025fc:	4809      	ldr	r0, [pc, #36]	@ (8002624 <MX_I2C3_Init+0x74>)
 80025fe:	f007 fcc1 	bl	8009f84 <HAL_I2CEx_ConfigAnalogFilter>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002608:	f000 fe38 	bl	800327c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800260c:	2100      	movs	r1, #0
 800260e:	4805      	ldr	r0, [pc, #20]	@ (8002624 <MX_I2C3_Init+0x74>)
 8002610:	f007 fd03 	bl	800a01a <HAL_I2CEx_ConfigDigitalFilter>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800261a:	f000 fe2f 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000a00 	.word	0x20000a00
 8002628:	40007800 	.word	0x40007800
 800262c:	10e32879 	.word	0x10e32879

08002630 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002634:	4b21      	ldr	r3, [pc, #132]	@ (80026bc <MX_LPUART1_UART_Init+0x8c>)
 8002636:	4a22      	ldr	r2, [pc, #136]	@ (80026c0 <MX_LPUART1_UART_Init+0x90>)
 8002638:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 921600;
 800263a:	4b20      	ldr	r3, [pc, #128]	@ (80026bc <MX_LPUART1_UART_Init+0x8c>)
 800263c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002640:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002642:	4b1e      	ldr	r3, [pc, #120]	@ (80026bc <MX_LPUART1_UART_Init+0x8c>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002648:	4b1c      	ldr	r3, [pc, #112]	@ (80026bc <MX_LPUART1_UART_Init+0x8c>)
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800264e:	4b1b      	ldr	r3, [pc, #108]	@ (80026bc <MX_LPUART1_UART_Init+0x8c>)
 8002650:	2200      	movs	r2, #0
 8002652:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002654:	4b19      	ldr	r3, [pc, #100]	@ (80026bc <MX_LPUART1_UART_Init+0x8c>)
 8002656:	220c      	movs	r2, #12
 8002658:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800265a:	4b18      	ldr	r3, [pc, #96]	@ (80026bc <MX_LPUART1_UART_Init+0x8c>)
 800265c:	2200      	movs	r2, #0
 800265e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002660:	4b16      	ldr	r3, [pc, #88]	@ (80026bc <MX_LPUART1_UART_Init+0x8c>)
 8002662:	2200      	movs	r2, #0
 8002664:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002666:	4b15      	ldr	r3, [pc, #84]	@ (80026bc <MX_LPUART1_UART_Init+0x8c>)
 8002668:	2200      	movs	r2, #0
 800266a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800266c:	4b13      	ldr	r3, [pc, #76]	@ (80026bc <MX_LPUART1_UART_Init+0x8c>)
 800266e:	2200      	movs	r2, #0
 8002670:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002672:	4812      	ldr	r0, [pc, #72]	@ (80026bc <MX_LPUART1_UART_Init+0x8c>)
 8002674:	f00c fee0 	bl	800f438 <HAL_UART_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800267e:	f000 fdfd 	bl	800327c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002682:	2100      	movs	r1, #0
 8002684:	480d      	ldr	r0, [pc, #52]	@ (80026bc <MX_LPUART1_UART_Init+0x8c>)
 8002686:	f00d fd09 	bl	801009c <HAL_UARTEx_SetTxFifoThreshold>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002690:	f000 fdf4 	bl	800327c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002694:	2100      	movs	r1, #0
 8002696:	4809      	ldr	r0, [pc, #36]	@ (80026bc <MX_LPUART1_UART_Init+0x8c>)
 8002698:	f00d fd3e 	bl	8010118 <HAL_UARTEx_SetRxFifoThreshold>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80026a2:	f000 fdeb 	bl	800327c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80026a6:	4805      	ldr	r0, [pc, #20]	@ (80026bc <MX_LPUART1_UART_Init+0x8c>)
 80026a8:	f00d fcbf 	bl	801002a <HAL_UARTEx_DisableFifoMode>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80026b2:	f000 fde3 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000a54 	.word	0x20000a54
 80026c0:	40008000 	.word	0x40008000

080026c4 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80026c8:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <MX_OPAMP1_Init+0x50>)
 80026ca:	4a13      	ldr	r2, [pc, #76]	@ (8002718 <MX_OPAMP1_Init+0x54>)
 80026cc:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80026ce:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <MX_OPAMP1_Init+0x50>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002714 <MX_OPAMP1_Init+0x50>)
 80026d6:	2240      	movs	r2, #64	@ 0x40
 80026d8:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80026da:	4b0e      	ldr	r3, [pc, #56]	@ (8002714 <MX_OPAMP1_Init+0x50>)
 80026dc:	2208      	movs	r2, #8
 80026de:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 80026e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002714 <MX_OPAMP1_Init+0x50>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80026e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <MX_OPAMP1_Init+0x50>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 80026ec:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <MX_OPAMP1_Init+0x50>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 80026f2:	4b08      	ldr	r3, [pc, #32]	@ (8002714 <MX_OPAMP1_Init+0x50>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80026f8:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <MX_OPAMP1_Init+0x50>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80026fe:	4805      	ldr	r0, [pc, #20]	@ (8002714 <MX_OPAMP1_Init+0x50>)
 8002700:	f007 fcd8 	bl	800a0b4 <HAL_OPAMP_Init>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_OPAMP1_Init+0x4a>
  {
    Error_Handler();
 800270a:	f000 fdb7 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000ae8 	.word	0x20000ae8
 8002718:	40010300 	.word	0x40010300

0800271c <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8002720:	4b0f      	ldr	r3, [pc, #60]	@ (8002760 <MX_OPAMP2_Init+0x44>)
 8002722:	4a10      	ldr	r2, [pc, #64]	@ (8002764 <MX_OPAMP2_Init+0x48>)
 8002724:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8002726:	4b0e      	ldr	r3, [pc, #56]	@ (8002760 <MX_OPAMP2_Init+0x44>)
 8002728:	2200      	movs	r2, #0
 800272a:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 800272c:	4b0c      	ldr	r3, [pc, #48]	@ (8002760 <MX_OPAMP2_Init+0x44>)
 800272e:	2260      	movs	r2, #96	@ 0x60
 8002730:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8002732:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <MX_OPAMP2_Init+0x44>)
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8002738:	4b09      	ldr	r3, [pc, #36]	@ (8002760 <MX_OPAMP2_Init+0x44>)
 800273a:	2201      	movs	r2, #1
 800273c:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800273e:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <MX_OPAMP2_Init+0x44>)
 8002740:	2200      	movs	r2, #0
 8002742:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002744:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <MX_OPAMP2_Init+0x44>)
 8002746:	2200      	movs	r2, #0
 8002748:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 800274a:	4805      	ldr	r0, [pc, #20]	@ (8002760 <MX_OPAMP2_Init+0x44>)
 800274c:	f007 fcb2 	bl	800a0b4 <HAL_OPAMP_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_OPAMP2_Init+0x3e>
  {
    Error_Handler();
 8002756:	f000 fd91 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000b24 	.word	0x20000b24
 8002764:	40010304 	.word	0x40010304

08002768 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 800276c:	4b0f      	ldr	r3, [pc, #60]	@ (80027ac <MX_OPAMP3_Init+0x44>)
 800276e:	4a10      	ldr	r2, [pc, #64]	@ (80027b0 <MX_OPAMP3_Init+0x48>)
 8002770:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8002772:	4b0e      	ldr	r3, [pc, #56]	@ (80027ac <MX_OPAMP3_Init+0x44>)
 8002774:	2200      	movs	r2, #0
 8002776:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8002778:	4b0c      	ldr	r3, [pc, #48]	@ (80027ac <MX_OPAMP3_Init+0x44>)
 800277a:	2260      	movs	r2, #96	@ 0x60
 800277c:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO1;
 800277e:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <MX_OPAMP3_Init+0x44>)
 8002780:	2204      	movs	r2, #4
 8002782:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8002784:	4b09      	ldr	r3, [pc, #36]	@ (80027ac <MX_OPAMP3_Init+0x44>)
 8002786:	2201      	movs	r2, #1
 8002788:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800278a:	4b08      	ldr	r3, [pc, #32]	@ (80027ac <MX_OPAMP3_Init+0x44>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002790:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <MX_OPAMP3_Init+0x44>)
 8002792:	2200      	movs	r2, #0
 8002794:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8002796:	4805      	ldr	r0, [pc, #20]	@ (80027ac <MX_OPAMP3_Init+0x44>)
 8002798:	f007 fc8c 	bl	800a0b4 <HAL_OPAMP_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 80027a2:	f000 fd6b 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000b60 	.word	0x20000b60
 80027b0:	40010308 	.word	0x40010308

080027b4 <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 80027b8:	4b0f      	ldr	r3, [pc, #60]	@ (80027f8 <MX_OPAMP5_Init+0x44>)
 80027ba:	4a10      	ldr	r2, [pc, #64]	@ (80027fc <MX_OPAMP5_Init+0x48>)
 80027bc:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80027be:	4b0e      	ldr	r3, [pc, #56]	@ (80027f8 <MX_OPAMP5_Init+0x44>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_FOLLOWER_MODE;
 80027c4:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <MX_OPAMP5_Init+0x44>)
 80027c6:	2260      	movs	r2, #96	@ 0x60
 80027c8:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80027ca:	4b0b      	ldr	r3, [pc, #44]	@ (80027f8 <MX_OPAMP5_Init+0x44>)
 80027cc:	2208      	movs	r2, #8
 80027ce:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = ENABLE;
 80027d0:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <MX_OPAMP5_Init+0x44>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80027d6:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <MX_OPAMP5_Init+0x44>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <MX_OPAMP5_Init+0x44>)
 80027de:	2200      	movs	r2, #0
 80027e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 80027e2:	4805      	ldr	r0, [pc, #20]	@ (80027f8 <MX_OPAMP5_Init+0x44>)
 80027e4:	f007 fc66 	bl	800a0b4 <HAL_OPAMP_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_OPAMP5_Init+0x3e>
  {
    Error_Handler();
 80027ee:	f000 fd45 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000b9c 	.word	0x20000b9c
 80027fc:	40010310 	.word	0x40010310

08002800 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8002804:	4b12      	ldr	r3, [pc, #72]	@ (8002850 <MX_OPAMP6_Init+0x50>)
 8002806:	4a13      	ldr	r2, [pc, #76]	@ (8002854 <MX_OPAMP6_Init+0x54>)
 8002808:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800280a:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <MX_OPAMP6_Init+0x50>)
 800280c:	2200      	movs	r2, #0
 800280e:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_PGA_MODE;
 8002810:	4b0f      	ldr	r3, [pc, #60]	@ (8002850 <MX_OPAMP6_Init+0x50>)
 8002812:	2240      	movs	r2, #64	@ 0x40
 8002814:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8002816:	4b0e      	ldr	r3, [pc, #56]	@ (8002850 <MX_OPAMP6_Init+0x50>)
 8002818:	2208      	movs	r2, #8
 800281a:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 800281c:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <MX_OPAMP6_Init+0x50>)
 800281e:	2201      	movs	r2, #1
 8002820:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002822:	4b0b      	ldr	r3, [pc, #44]	@ (8002850 <MX_OPAMP6_Init+0x50>)
 8002824:	2200      	movs	r2, #0
 8002826:	619a      	str	r2, [r3, #24]
  hopamp6.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8002828:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <MX_OPAMP6_Init+0x50>)
 800282a:	2200      	movs	r2, #0
 800282c:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp6.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 800282e:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <MX_OPAMP6_Init+0x50>)
 8002830:	2200      	movs	r2, #0
 8002832:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002834:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <MX_OPAMP6_Init+0x50>)
 8002836:	2200      	movs	r2, #0
 8002838:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 800283a:	4805      	ldr	r0, [pc, #20]	@ (8002850 <MX_OPAMP6_Init+0x50>)
 800283c:	f007 fc3a 	bl	800a0b4 <HAL_OPAMP_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_OPAMP6_Init+0x4a>
  {
    Error_Handler();
 8002846:	f000 fd19 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000bd8 	.word	0x20000bd8
 8002854:	40010314 	.word	0x40010314

08002858 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800285c:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <MX_SPI3_Init+0x74>)
 800285e:	4a1c      	ldr	r2, [pc, #112]	@ (80028d0 <MX_SPI3_Init+0x78>)
 8002860:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002862:	4b1a      	ldr	r3, [pc, #104]	@ (80028cc <MX_SPI3_Init+0x74>)
 8002864:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002868:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 800286a:	4b18      	ldr	r3, [pc, #96]	@ (80028cc <MX_SPI3_Init+0x74>)
 800286c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002870:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002872:	4b16      	ldr	r3, [pc, #88]	@ (80028cc <MX_SPI3_Init+0x74>)
 8002874:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002878:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800287a:	4b14      	ldr	r3, [pc, #80]	@ (80028cc <MX_SPI3_Init+0x74>)
 800287c:	2202      	movs	r2, #2
 800287e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002880:	4b12      	ldr	r3, [pc, #72]	@ (80028cc <MX_SPI3_Init+0x74>)
 8002882:	2200      	movs	r2, #0
 8002884:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002886:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <MX_SPI3_Init+0x74>)
 8002888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800288c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800288e:	4b0f      	ldr	r3, [pc, #60]	@ (80028cc <MX_SPI3_Init+0x74>)
 8002890:	2210      	movs	r2, #16
 8002892:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002894:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <MX_SPI3_Init+0x74>)
 8002896:	2200      	movs	r2, #0
 8002898:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800289a:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <MX_SPI3_Init+0x74>)
 800289c:	2200      	movs	r2, #0
 800289e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a0:	4b0a      	ldr	r3, [pc, #40]	@ (80028cc <MX_SPI3_Init+0x74>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80028a6:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <MX_SPI3_Init+0x74>)
 80028a8:	2207      	movs	r2, #7
 80028aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028ac:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <MX_SPI3_Init+0x74>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028b2:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <MX_SPI3_Init+0x74>)
 80028b4:	2208      	movs	r2, #8
 80028b6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80028b8:	4804      	ldr	r0, [pc, #16]	@ (80028cc <MX_SPI3_Init+0x74>)
 80028ba:	f00a fa29 	bl	800cd10 <HAL_SPI_Init>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 80028c4:	f000 fcda 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80028c8:	bf00      	nop
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000c14 	.word	0x20000c14
 80028d0:	40003c00 	.word	0x40003c00

080028d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08c      	sub	sp, #48	@ 0x30
 80028d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028da:	f107 030c 	add.w	r3, r7, #12
 80028de:	2224      	movs	r2, #36	@ 0x24
 80028e0:	2100      	movs	r1, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	f012 fd1e 	bl	8015324 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028e8:	463b      	mov	r3, r7
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028f2:	4b23      	ldr	r3, [pc, #140]	@ (8002980 <MX_TIM1_Init+0xac>)
 80028f4:	4a23      	ldr	r2, [pc, #140]	@ (8002984 <MX_TIM1_Init+0xb0>)
 80028f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80028f8:	4b21      	ldr	r3, [pc, #132]	@ (8002980 <MX_TIM1_Init+0xac>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028fe:	4b20      	ldr	r3, [pc, #128]	@ (8002980 <MX_TIM1_Init+0xac>)
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002904:	4b1e      	ldr	r3, [pc, #120]	@ (8002980 <MX_TIM1_Init+0xac>)
 8002906:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800290a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800290c:	4b1c      	ldr	r3, [pc, #112]	@ (8002980 <MX_TIM1_Init+0xac>)
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002912:	4b1b      	ldr	r3, [pc, #108]	@ (8002980 <MX_TIM1_Init+0xac>)
 8002914:	2200      	movs	r2, #0
 8002916:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002918:	4b19      	ldr	r3, [pc, #100]	@ (8002980 <MX_TIM1_Init+0xac>)
 800291a:	2200      	movs	r2, #0
 800291c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800291e:	2301      	movs	r3, #1
 8002920:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002926:	2301      	movs	r3, #1
 8002928:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800292e:	230f      	movs	r3, #15
 8002930:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002932:	2300      	movs	r3, #0
 8002934:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002936:	2301      	movs	r3, #1
 8002938:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800293a:	2300      	movs	r3, #0
 800293c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800293e:	230f      	movs	r3, #15
 8002940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002942:	f107 030c 	add.w	r3, r7, #12
 8002946:	4619      	mov	r1, r3
 8002948:	480d      	ldr	r0, [pc, #52]	@ (8002980 <MX_TIM1_Init+0xac>)
 800294a:	f00b fb5d 	bl	800e008 <HAL_TIM_Encoder_Init>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002954:	f000 fc92 	bl	800327c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002958:	2300      	movs	r3, #0
 800295a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800295c:	2300      	movs	r3, #0
 800295e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002960:	2300      	movs	r3, #0
 8002962:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002964:	463b      	mov	r3, r7
 8002966:	4619      	mov	r1, r3
 8002968:	4805      	ldr	r0, [pc, #20]	@ (8002980 <MX_TIM1_Init+0xac>)
 800296a:	f00c fc3b 	bl	800f1e4 <HAL_TIMEx_MasterConfigSynchronization>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002974:	f000 fc82 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002978:	bf00      	nop
 800297a:	3730      	adds	r7, #48	@ 0x30
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20000cd8 	.word	0x20000cd8
 8002984:	40012c00 	.word	0x40012c00

08002988 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08c      	sub	sp, #48	@ 0x30
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800298e:	f107 030c 	add.w	r3, r7, #12
 8002992:	2224      	movs	r2, #36	@ 0x24
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f012 fcc4 	bl	8015324 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800299c:	463b      	mov	r3, r7
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029a6:	4b21      	ldr	r3, [pc, #132]	@ (8002a2c <MX_TIM3_Init+0xa4>)
 80029a8:	4a21      	ldr	r2, [pc, #132]	@ (8002a30 <MX_TIM3_Init+0xa8>)
 80029aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80029ac:	4b1f      	ldr	r3, [pc, #124]	@ (8002a2c <MX_TIM3_Init+0xa4>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a2c <MX_TIM3_Init+0xa4>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80029b8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a2c <MX_TIM3_Init+0xa4>)
 80029ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029c0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a2c <MX_TIM3_Init+0xa4>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029c6:	4b19      	ldr	r3, [pc, #100]	@ (8002a2c <MX_TIM3_Init+0xa4>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80029cc:	2301      	movs	r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029d0:	2300      	movs	r3, #0
 80029d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029d4:	2301      	movs	r3, #1
 80029d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80029dc:	230f      	movs	r3, #15
 80029de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029e0:	2300      	movs	r3, #0
 80029e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029e4:	2301      	movs	r3, #1
 80029e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029e8:	2300      	movs	r3, #0
 80029ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80029ec:	230f      	movs	r3, #15
 80029ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80029f0:	f107 030c 	add.w	r3, r7, #12
 80029f4:	4619      	mov	r1, r3
 80029f6:	480d      	ldr	r0, [pc, #52]	@ (8002a2c <MX_TIM3_Init+0xa4>)
 80029f8:	f00b fb06 	bl	800e008 <HAL_TIM_Encoder_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002a02:	f000 fc3b 	bl	800327c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a06:	2300      	movs	r3, #0
 8002a08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a0e:	463b      	mov	r3, r7
 8002a10:	4619      	mov	r1, r3
 8002a12:	4806      	ldr	r0, [pc, #24]	@ (8002a2c <MX_TIM3_Init+0xa4>)
 8002a14:	f00c fbe6 	bl	800f1e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002a1e:	f000 fc2d 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a22:	bf00      	nop
 8002a24:	3730      	adds	r7, #48	@ 0x30
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000d24 	.word	0x20000d24
 8002a30:	40000400 	.word	0x40000400

08002a34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08c      	sub	sp, #48	@ 0x30
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a3a:	f107 030c 	add.w	r3, r7, #12
 8002a3e:	2224      	movs	r2, #36	@ 0x24
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f012 fc6e 	bl	8015324 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a48:	463b      	mov	r3, r7
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a52:	4b21      	ldr	r3, [pc, #132]	@ (8002ad8 <MX_TIM4_Init+0xa4>)
 8002a54:	4a21      	ldr	r2, [pc, #132]	@ (8002adc <MX_TIM4_Init+0xa8>)
 8002a56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002a58:	4b1f      	ldr	r3, [pc, #124]	@ (8002ad8 <MX_TIM4_Init+0xa4>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <MX_TIM4_Init+0xa4>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002a64:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad8 <MX_TIM4_Init+0xa4>)
 8002a66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad8 <MX_TIM4_Init+0xa4>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a72:	4b19      	ldr	r3, [pc, #100]	@ (8002ad8 <MX_TIM4_Init+0xa4>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a80:	2301      	movs	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002a88:	230f      	movs	r3, #15
 8002a8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a90:	2301      	movs	r3, #1
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a94:	2300      	movs	r3, #0
 8002a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8002a98:	230f      	movs	r3, #15
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002a9c:	f107 030c 	add.w	r3, r7, #12
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	480d      	ldr	r0, [pc, #52]	@ (8002ad8 <MX_TIM4_Init+0xa4>)
 8002aa4:	f00b fab0 	bl	800e008 <HAL_TIM_Encoder_Init>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002aae:	f000 fbe5 	bl	800327c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002aba:	463b      	mov	r3, r7
 8002abc:	4619      	mov	r1, r3
 8002abe:	4806      	ldr	r0, [pc, #24]	@ (8002ad8 <MX_TIM4_Init+0xa4>)
 8002ac0:	f00c fb90 	bl	800f1e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002aca:	f000 fbd7 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ace:	bf00      	nop
 8002ad0:	3730      	adds	r7, #48	@ 0x30
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000d70 	.word	0x20000d70
 8002adc:	40000800 	.word	0x40000800

08002ae0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002af0:	4b14      	ldr	r3, [pc, #80]	@ (8002b44 <MX_TIM6_Init+0x64>)
 8002af2:	4a15      	ldr	r2, [pc, #84]	@ (8002b48 <MX_TIM6_Init+0x68>)
 8002af4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002af6:	4b13      	ldr	r3, [pc, #76]	@ (8002b44 <MX_TIM6_Init+0x64>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002afc:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <MX_TIM6_Init+0x64>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 44;
 8002b02:	4b10      	ldr	r3, [pc, #64]	@ (8002b44 <MX_TIM6_Init+0x64>)
 8002b04:	222c      	movs	r2, #44	@ 0x2c
 8002b06:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b08:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <MX_TIM6_Init+0x64>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b0e:	480d      	ldr	r0, [pc, #52]	@ (8002b44 <MX_TIM6_Init+0x64>)
 8002b10:	f00a fe12 	bl	800d738 <HAL_TIM_Base_Init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002b1a:	f000 fbaf 	bl	800327c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b1e:	2320      	movs	r3, #32
 8002b20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4806      	ldr	r0, [pc, #24]	@ (8002b44 <MX_TIM6_Init+0x64>)
 8002b2c:	f00c fb5a 	bl	800f1e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002b36:	f000 fba1 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002b3a:	bf00      	nop
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000dbc 	.word	0x20000dbc
 8002b48:	40001000 	.word	0x40001000

08002b4c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b52:	1d3b      	adds	r3, r7, #4
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002b5c:	4b14      	ldr	r3, [pc, #80]	@ (8002bb0 <MX_TIM7_Init+0x64>)
 8002b5e:	4a15      	ldr	r2, [pc, #84]	@ (8002bb4 <MX_TIM7_Init+0x68>)
 8002b60:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 180-1;
 8002b62:	4b13      	ldr	r3, [pc, #76]	@ (8002bb0 <MX_TIM7_Init+0x64>)
 8002b64:	22b3      	movs	r2, #179	@ 0xb3
 8002b66:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b68:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <MX_TIM7_Init+0x64>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8002b6e:	4b10      	ldr	r3, [pc, #64]	@ (8002bb0 <MX_TIM7_Init+0x64>)
 8002b70:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b74:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b76:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb0 <MX_TIM7_Init+0x64>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002b7c:	480c      	ldr	r0, [pc, #48]	@ (8002bb0 <MX_TIM7_Init+0x64>)
 8002b7e:	f00a fddb 	bl	800d738 <HAL_TIM_Base_Init>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002b88:	f000 fb78 	bl	800327c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b8c:	2320      	movs	r3, #32
 8002b8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	4619      	mov	r1, r3
 8002b98:	4805      	ldr	r0, [pc, #20]	@ (8002bb0 <MX_TIM7_Init+0x64>)
 8002b9a:	f00c fb23 	bl	800f1e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002ba4:	f000 fb6a 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000e08 	.word	0x20000e08
 8002bb4:	40001400 	.word	0x40001400

08002bb8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b09c      	sub	sp, #112	@ 0x70
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bbe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
 8002bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bcc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bd8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
 8002be8:	615a      	str	r2, [r3, #20]
 8002bea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	2234      	movs	r2, #52	@ 0x34
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f012 fb96 	bl	8015324 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002bf8:	4b4e      	ldr	r3, [pc, #312]	@ (8002d34 <MX_TIM8_Init+0x17c>)
 8002bfa:	4a4f      	ldr	r2, [pc, #316]	@ (8002d38 <MX_TIM8_Init+0x180>)
 8002bfc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002bfe:	4b4d      	ldr	r3, [pc, #308]	@ (8002d34 <MX_TIM8_Init+0x17c>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c04:	4b4b      	ldr	r3, [pc, #300]	@ (8002d34 <MX_TIM8_Init+0x17c>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 179;
 8002c0a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d34 <MX_TIM8_Init+0x17c>)
 8002c0c:	22b3      	movs	r2, #179	@ 0xb3
 8002c0e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c10:	4b48      	ldr	r3, [pc, #288]	@ (8002d34 <MX_TIM8_Init+0x17c>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002c16:	4b47      	ldr	r3, [pc, #284]	@ (8002d34 <MX_TIM8_Init+0x17c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c1c:	4b45      	ldr	r3, [pc, #276]	@ (8002d34 <MX_TIM8_Init+0x17c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002c22:	4844      	ldr	r0, [pc, #272]	@ (8002d34 <MX_TIM8_Init+0x17c>)
 8002c24:	f00a fd88 	bl	800d738 <HAL_TIM_Base_Init>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002c2e:	f000 fb25 	bl	800327c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c36:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002c38:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	483d      	ldr	r0, [pc, #244]	@ (8002d34 <MX_TIM8_Init+0x17c>)
 8002c40:	f00b fc2a 	bl	800e498 <HAL_TIM_ConfigClockSource>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002c4a:	f000 fb17 	bl	800327c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002c4e:	4839      	ldr	r0, [pc, #228]	@ (8002d34 <MX_TIM8_Init+0x17c>)
 8002c50:	f00a fe3a 	bl	800d8c8 <HAL_TIM_PWM_Init>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002c5a:	f000 fb0f 	bl	800327c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c62:	2300      	movs	r3, #0
 8002c64:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c66:	2300      	movs	r3, #0
 8002c68:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002c6a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4830      	ldr	r0, [pc, #192]	@ (8002d34 <MX_TIM8_Init+0x17c>)
 8002c72:	f00c fab7 	bl	800f1e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8002c7c:	f000 fafe 	bl	800327c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002c80:	2370      	movs	r3, #112	@ 0x70
 8002c82:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 90;
 8002c84:	235a      	movs	r3, #90	@ 0x5a
 8002c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c94:	2300      	movs	r3, #0
 8002c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c9c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4823      	ldr	r0, [pc, #140]	@ (8002d34 <MX_TIM8_Init+0x17c>)
 8002ca6:	f00b fae3 	bl	800e270 <HAL_TIM_PWM_ConfigChannel>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8002cb0:	f000 fae4 	bl	800327c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cb4:	2360      	movs	r3, #96	@ 0x60
 8002cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8002cbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cc2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	4619      	mov	r1, r3
 8002cca:	481a      	ldr	r0, [pc, #104]	@ (8002d34 <MX_TIM8_Init+0x17c>)
 8002ccc:	f00b fad0 	bl	800e270 <HAL_TIM_PWM_ConfigChannel>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_TIM8_Init+0x122>
  {
    Error_Handler();
 8002cd6:	f000 fad1 	bl	800327c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002cee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cf2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002d12:	1d3b      	adds	r3, r7, #4
 8002d14:	4619      	mov	r1, r3
 8002d16:	4807      	ldr	r0, [pc, #28]	@ (8002d34 <MX_TIM8_Init+0x17c>)
 8002d18:	f00c fafa 	bl	800f310 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_TIM8_Init+0x16e>
  {
    Error_Handler();
 8002d22:	f000 faab 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002d26:	4803      	ldr	r0, [pc, #12]	@ (8002d34 <MX_TIM8_Init+0x17c>)
 8002d28:	f001 fbfc 	bl	8004524 <HAL_TIM_MspPostInit>

}
 8002d2c:	bf00      	nop
 8002d2e:	3770      	adds	r7, #112	@ 0x70
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20000e54 	.word	0x20000e54
 8002d38:	40013400 	.word	0x40013400

08002d3c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b09c      	sub	sp, #112	@ 0x70
 8002d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d42:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	605a      	str	r2, [r3, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
 8002d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	60da      	str	r2, [r3, #12]
 8002d6a:	611a      	str	r2, [r3, #16]
 8002d6c:	615a      	str	r2, [r3, #20]
 8002d6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d70:	1d3b      	adds	r3, r7, #4
 8002d72:	2234      	movs	r2, #52	@ 0x34
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f012 fad4 	bl	8015324 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002d7c:	4b3f      	ldr	r3, [pc, #252]	@ (8002e7c <MX_TIM15_Init+0x140>)
 8002d7e:	4a40      	ldr	r2, [pc, #256]	@ (8002e80 <MX_TIM15_Init+0x144>)
 8002d80:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 150;
 8002d82:	4b3e      	ldr	r3, [pc, #248]	@ (8002e7c <MX_TIM15_Init+0x140>)
 8002d84:	2296      	movs	r2, #150	@ 0x96
 8002d86:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d88:	4b3c      	ldr	r3, [pc, #240]	@ (8002e7c <MX_TIM15_Init+0x140>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8002d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e7c <MX_TIM15_Init+0x140>)
 8002d90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d94:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d96:	4b39      	ldr	r3, [pc, #228]	@ (8002e7c <MX_TIM15_Init+0x140>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002d9c:	4b37      	ldr	r3, [pc, #220]	@ (8002e7c <MX_TIM15_Init+0x140>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002da2:	4b36      	ldr	r3, [pc, #216]	@ (8002e7c <MX_TIM15_Init+0x140>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002da8:	4834      	ldr	r0, [pc, #208]	@ (8002e7c <MX_TIM15_Init+0x140>)
 8002daa:	f00a fcc5 	bl	800d738 <HAL_TIM_Base_Init>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8002db4:	f000 fa62 	bl	800327c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002db8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dbc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002dbe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	482d      	ldr	r0, [pc, #180]	@ (8002e7c <MX_TIM15_Init+0x140>)
 8002dc6:	f00b fb67 	bl	800e498 <HAL_TIM_ConfigClockSource>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8002dd0:	f000 fa54 	bl	800327c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002dd4:	4829      	ldr	r0, [pc, #164]	@ (8002e7c <MX_TIM15_Init+0x140>)
 8002dd6:	f00a fd77 	bl	800d8c8 <HAL_TIM_PWM_Init>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8002de0:	f000 fa4c 	bl	800327c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002de4:	2300      	movs	r3, #0
 8002de6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002dec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002df0:	4619      	mov	r1, r3
 8002df2:	4822      	ldr	r0, [pc, #136]	@ (8002e7c <MX_TIM15_Init+0x140>)
 8002df4:	f00c f9f6 	bl	800f1e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8002dfe:	f000 fa3d 	bl	800327c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e02:	2360      	movs	r3, #96	@ 0x60
 8002e04:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 499;
 8002e06:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8002e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e10:	2300      	movs	r3, #0
 8002e12:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e20:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002e24:	2200      	movs	r2, #0
 8002e26:	4619      	mov	r1, r3
 8002e28:	4814      	ldr	r0, [pc, #80]	@ (8002e7c <MX_TIM15_Init+0x140>)
 8002e2a:	f00b fa21 	bl	800e270 <HAL_TIM_PWM_ConfigChannel>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8002e34:	f000 fa22 	bl	800327c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4807      	ldr	r0, [pc, #28]	@ (8002e7c <MX_TIM15_Init+0x140>)
 8002e60:	f00c fa56 	bl	800f310 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8002e6a:	f000 fa07 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002e6e:	4803      	ldr	r0, [pc, #12]	@ (8002e7c <MX_TIM15_Init+0x140>)
 8002e70:	f001 fb58 	bl	8004524 <HAL_TIM_MspPostInit>

}
 8002e74:	bf00      	nop
 8002e76:	3770      	adds	r7, #112	@ 0x70
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000ea0 	.word	0x20000ea0
 8002e80:	40014000 	.word	0x40014000

08002e84 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08c      	sub	sp, #48	@ 0x30
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e8a:	f107 030c 	add.w	r3, r7, #12
 8002e8e:	2224      	movs	r2, #36	@ 0x24
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f012 fa46 	bl	8015324 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e98:	463b      	mov	r3, r7
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8002ea2:	4b23      	ldr	r3, [pc, #140]	@ (8002f30 <MX_TIM20_Init+0xac>)
 8002ea4:	4a23      	ldr	r2, [pc, #140]	@ (8002f34 <MX_TIM20_Init+0xb0>)
 8002ea6:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8002ea8:	4b21      	ldr	r3, [pc, #132]	@ (8002f30 <MX_TIM20_Init+0xac>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eae:	4b20      	ldr	r3, [pc, #128]	@ (8002f30 <MX_TIM20_Init+0xac>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f30 <MX_TIM20_Init+0xac>)
 8002eb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002eba:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8002f30 <MX_TIM20_Init+0xac>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f30 <MX_TIM20_Init+0xac>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ec8:	4b19      	ldr	r3, [pc, #100]	@ (8002f30 <MX_TIM20_Init+0xac>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002ede:	230f      	movs	r3, #15
 8002ee0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002eea:	2300      	movs	r3, #0
 8002eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8002eee:	230f      	movs	r3, #15
 8002ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 8002ef2:	f107 030c 	add.w	r3, r7, #12
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	480d      	ldr	r0, [pc, #52]	@ (8002f30 <MX_TIM20_Init+0xac>)
 8002efa:	f00b f885 	bl	800e008 <HAL_TIM_Encoder_Init>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 8002f04:	f000 f9ba 	bl	800327c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8002f14:	463b      	mov	r3, r7
 8002f16:	4619      	mov	r1, r3
 8002f18:	4805      	ldr	r0, [pc, #20]	@ (8002f30 <MX_TIM20_Init+0xac>)
 8002f1a:	f00c f963 	bl	800f1e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 8002f24:	f000 f9aa 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8002f28:	bf00      	nop
 8002f2a:	3730      	adds	r7, #48	@ 0x30
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20000eec 	.word	0x20000eec
 8002f34:	40015000 	.word	0x40015000

08002f38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002f3e:	4b26      	ldr	r3, [pc, #152]	@ (8002fd8 <MX_DMA_Init+0xa0>)
 8002f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f42:	4a25      	ldr	r2, [pc, #148]	@ (8002fd8 <MX_DMA_Init+0xa0>)
 8002f44:	f043 0304 	orr.w	r3, r3, #4
 8002f48:	6493      	str	r3, [r2, #72]	@ 0x48
 8002f4a:	4b23      	ldr	r3, [pc, #140]	@ (8002fd8 <MX_DMA_Init+0xa0>)
 8002f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f56:	4b20      	ldr	r3, [pc, #128]	@ (8002fd8 <MX_DMA_Init+0xa0>)
 8002f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fd8 <MX_DMA_Init+0xa0>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	6493      	str	r3, [r2, #72]	@ 0x48
 8002f62:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd8 <MX_DMA_Init+0xa0>)
 8002f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2100      	movs	r1, #0
 8002f72:	200b      	movs	r0, #11
 8002f74:	f004 fb91 	bl	800769a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002f78:	200b      	movs	r0, #11
 8002f7a:	f004 fba8 	bl	80076ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2100      	movs	r1, #0
 8002f82:	200c      	movs	r0, #12
 8002f84:	f004 fb89 	bl	800769a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002f88:	200c      	movs	r0, #12
 8002f8a:	f004 fba0 	bl	80076ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2100      	movs	r1, #0
 8002f92:	200d      	movs	r0, #13
 8002f94:	f004 fb81 	bl	800769a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002f98:	200d      	movs	r0, #13
 8002f9a:	f004 fb98 	bl	80076ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	200e      	movs	r0, #14
 8002fa4:	f004 fb79 	bl	800769a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002fa8:	200e      	movs	r0, #14
 8002faa:	f004 fb90 	bl	80076ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	200f      	movs	r0, #15
 8002fb4:	f004 fb71 	bl	800769a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002fb8:	200f      	movs	r0, #15
 8002fba:	f004 fb88 	bl	80076ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	2010      	movs	r0, #16
 8002fc4:	f004 fb69 	bl	800769a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002fc8:	2010      	movs	r0, #16
 8002fca:	f004 fb80 	bl	80076ce <HAL_NVIC_EnableIRQ>

}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000

08002fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08a      	sub	sp, #40	@ 0x28
 8002fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe2:	f107 0314 	add.w	r3, r7, #20
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	605a      	str	r2, [r3, #4]
 8002fec:	609a      	str	r2, [r3, #8]
 8002fee:	60da      	str	r2, [r3, #12]
 8002ff0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ff2:	4b83      	ldr	r3, [pc, #524]	@ (8003200 <MX_GPIO_Init+0x224>)
 8002ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff6:	4a82      	ldr	r2, [pc, #520]	@ (8003200 <MX_GPIO_Init+0x224>)
 8002ff8:	f043 0304 	orr.w	r3, r3, #4
 8002ffc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ffe:	4b80      	ldr	r3, [pc, #512]	@ (8003200 <MX_GPIO_Init+0x224>)
 8003000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800300a:	4b7d      	ldr	r3, [pc, #500]	@ (8003200 <MX_GPIO_Init+0x224>)
 800300c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800300e:	4a7c      	ldr	r2, [pc, #496]	@ (8003200 <MX_GPIO_Init+0x224>)
 8003010:	f043 0320 	orr.w	r3, r3, #32
 8003014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003016:	4b7a      	ldr	r3, [pc, #488]	@ (8003200 <MX_GPIO_Init+0x224>)
 8003018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003022:	4b77      	ldr	r3, [pc, #476]	@ (8003200 <MX_GPIO_Init+0x224>)
 8003024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003026:	4a76      	ldr	r2, [pc, #472]	@ (8003200 <MX_GPIO_Init+0x224>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800302e:	4b74      	ldr	r3, [pc, #464]	@ (8003200 <MX_GPIO_Init+0x224>)
 8003030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800303a:	4b71      	ldr	r3, [pc, #452]	@ (8003200 <MX_GPIO_Init+0x224>)
 800303c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800303e:	4a70      	ldr	r2, [pc, #448]	@ (8003200 <MX_GPIO_Init+0x224>)
 8003040:	f043 0302 	orr.w	r3, r3, #2
 8003044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003046:	4b6e      	ldr	r3, [pc, #440]	@ (8003200 <MX_GPIO_Init+0x224>)
 8003048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	607b      	str	r3, [r7, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003052:	4b6b      	ldr	r3, [pc, #428]	@ (8003200 <MX_GPIO_Init+0x224>)
 8003054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003056:	4a6a      	ldr	r2, [pc, #424]	@ (8003200 <MX_GPIO_Init+0x224>)
 8003058:	f043 0308 	orr.w	r3, r3, #8
 800305c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800305e:	4b68      	ldr	r3, [pc, #416]	@ (8003200 <MX_GPIO_Init+0x224>)
 8003060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AC_DC_CH2_Pin|CD_CH2_A_Pin|CD_CH2_B_Pin|CD_CH1_A_Pin
 800306a:	2200      	movs	r2, #0
 800306c:	f64e 0120 	movw	r1, #59424	@ 0xe820
 8003070:	4864      	ldr	r0, [pc, #400]	@ (8003204 <MX_GPIO_Init+0x228>)
 8003072:	f005 faa3 	bl	80085bc <HAL_GPIO_WritePin>
                          |ST7789_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CD_CH2_C_Pin|AC_DC_CH1_Pin|CD_CH1_C_Pin, GPIO_PIN_RESET);
 8003076:	2200      	movs	r2, #0
 8003078:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800307c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003080:	f005 fa9c 	bl	80085bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CD_CH1_B_Pin|TLC5952_SCLK_Pin|TLC5952_LAT_Pin|TLC5952_SIN_Pin, GPIO_PIN_RESET);
 8003084:	2200      	movs	r2, #0
 8003086:	f248 0138 	movw	r1, #32824	@ 0x8038
 800308a:	485f      	ldr	r0, [pc, #380]	@ (8003208 <MX_GPIO_Init+0x22c>)
 800308c:	f005 fa96 	bl	80085bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FT6336_RST_GPIO_Port, FT6336_RST_Pin, GPIO_PIN_RESET);
 8003090:	2200      	movs	r2, #0
 8003092:	2104      	movs	r1, #4
 8003094:	485d      	ldr	r0, [pc, #372]	@ (800320c <MX_GPIO_Init+0x230>)
 8003096:	f005 fa91 	bl	80085bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AC_DC_CH2_Pin CD_CH2_A_Pin CD_CH2_B_Pin CD_CH1_A_Pin
                           ST7789_DC_Pin */
  GPIO_InitStruct.Pin = AC_DC_CH2_Pin|CD_CH2_A_Pin|CD_CH2_B_Pin|CD_CH1_A_Pin
 800309a:	f64e 0320 	movw	r3, #59424	@ 0xe820
 800309e:	617b      	str	r3, [r7, #20]
                          |ST7789_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030a0:	2301      	movs	r3, #1
 80030a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a8:	2300      	movs	r3, #0
 80030aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	4619      	mov	r1, r3
 80030b2:	4854      	ldr	r0, [pc, #336]	@ (8003204 <MX_GPIO_Init+0x228>)
 80030b4:	f005 f900 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80030b8:	2301      	movs	r3, #1
 80030ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030bc:	2302      	movs	r3, #2
 80030be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c4:	2300      	movs	r3, #0
 80030c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 80030c8:	230e      	movs	r3, #14
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	4619      	mov	r1, r3
 80030d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030d6:	f005 f8ef 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_CH2_C_Pin AC_DC_CH1_Pin CD_CH1_C_Pin */
  GPIO_InitStruct.Pin = CD_CH2_C_Pin|AC_DC_CH1_Pin|CD_CH1_C_Pin;
 80030da:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80030de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e0:	2301      	movs	r3, #1
 80030e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e8:	2300      	movs	r3, #0
 80030ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ec:	f107 0314 	add.w	r3, r7, #20
 80030f0:	4619      	mov	r1, r3
 80030f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030f6:	f005 f8df 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10;
 80030fa:	f240 430c 	movw	r3, #1036	@ 0x40c
 80030fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003100:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310a:	f107 0314 	add.w	r3, r7, #20
 800310e:	4619      	mov	r1, r3
 8003110:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003114:	f005 f8d0 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003118:	2310      	movs	r3, #16
 800311a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800311c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003126:	f107 0314 	add.w	r3, r7, #20
 800312a:	4619      	mov	r1, r3
 800312c:	4835      	ldr	r0, [pc, #212]	@ (8003204 <MX_GPIO_Init+0x228>)
 800312e:	f005 f8c3 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8;
 8003132:	f240 1303 	movw	r3, #259	@ 0x103
 8003136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003138:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800313c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003142:	f107 0314 	add.w	r3, r7, #20
 8003146:	4619      	mov	r1, r3
 8003148:	482f      	ldr	r0, [pc, #188]	@ (8003208 <MX_GPIO_Init+0x22c>)
 800314a:	f005 f8b5 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_CH1_B_Pin TLC5952_SCLK_Pin TLC5952_LAT_Pin TLC5952_SIN_Pin */
  GPIO_InitStruct.Pin = CD_CH1_B_Pin|TLC5952_SCLK_Pin|TLC5952_LAT_Pin|TLC5952_SIN_Pin;
 800314e:	f248 0338 	movw	r3, #32824	@ 0x8038
 8003152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003154:	2301      	movs	r3, #1
 8003156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315c:	2300      	movs	r3, #0
 800315e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003160:	f107 0314 	add.w	r3, r7, #20
 8003164:	4619      	mov	r1, r3
 8003166:	4828      	ldr	r0, [pc, #160]	@ (8003208 <MX_GPIO_Init+0x22c>)
 8003168:	f005 f8a6 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FT6336_RST_Pin */
  GPIO_InitStruct.Pin = FT6336_RST_Pin;
 800316c:	2304      	movs	r3, #4
 800316e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003170:	2301      	movs	r3, #1
 8003172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	2300      	movs	r3, #0
 800317a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FT6336_RST_GPIO_Port, &GPIO_InitStruct);
 800317c:	f107 0314 	add.w	r3, r7, #20
 8003180:	4619      	mov	r1, r3
 8003182:	4822      	ldr	r0, [pc, #136]	@ (800320c <MX_GPIO_Init+0x230>)
 8003184:	f005 f898 	bl	80082b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003188:	2200      	movs	r2, #0
 800318a:	2100      	movs	r1, #0
 800318c:	2006      	movs	r0, #6
 800318e:	f004 fa84 	bl	800769a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003192:	2006      	movs	r0, #6
 8003194:	f004 fa9b 	bl	80076ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003198:	2200      	movs	r2, #0
 800319a:	2100      	movs	r1, #0
 800319c:	2007      	movs	r0, #7
 800319e:	f004 fa7c 	bl	800769a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80031a2:	2007      	movs	r0, #7
 80031a4:	f004 fa93 	bl	80076ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80031a8:	2200      	movs	r2, #0
 80031aa:	2100      	movs	r1, #0
 80031ac:	2008      	movs	r0, #8
 80031ae:	f004 fa74 	bl	800769a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80031b2:	2008      	movs	r0, #8
 80031b4:	f004 fa8b 	bl	80076ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80031b8:	2200      	movs	r2, #0
 80031ba:	2100      	movs	r1, #0
 80031bc:	2009      	movs	r0, #9
 80031be:	f004 fa6c 	bl	800769a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80031c2:	2009      	movs	r0, #9
 80031c4:	f004 fa83 	bl	80076ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80031c8:	2200      	movs	r2, #0
 80031ca:	2100      	movs	r1, #0
 80031cc:	200a      	movs	r0, #10
 80031ce:	f004 fa64 	bl	800769a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80031d2:	200a      	movs	r0, #10
 80031d4:	f004 fa7b 	bl	80076ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80031d8:	2200      	movs	r2, #0
 80031da:	2100      	movs	r1, #0
 80031dc:	2017      	movs	r0, #23
 80031de:	f004 fa5c 	bl	800769a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80031e2:	2017      	movs	r0, #23
 80031e4:	f004 fa73 	bl	80076ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80031e8:	2200      	movs	r2, #0
 80031ea:	2100      	movs	r1, #0
 80031ec:	2028      	movs	r0, #40	@ 0x28
 80031ee:	f004 fa54 	bl	800769a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80031f2:	2028      	movs	r0, #40	@ 0x28
 80031f4:	f004 fa6b 	bl	80076ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031f8:	bf00      	nop
 80031fa:	3728      	adds	r7, #40	@ 0x28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40021000 	.word	0x40021000
 8003204:	48000800 	.word	0x48000800
 8003208:	48000400 	.word	0x48000400
 800320c:	48000c00 	.word	0x48000c00

08003210 <HAL_ADC_ConvHalfCpltCallback>:
/* USER CODE BEGIN 4 */



void HAL_ADC_ConvHalfCpltCallback	(ADC_HandleTypeDef *hadc)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
    if (!LOCK_CH1 ) {
 8003218:	4b13      	ldr	r3, [pc, #76]	@ (8003268 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d11c      	bne.n	800325a <HAL_ADC_ConvHalfCpltCallback+0x4a>
        for (size_t i = 0; i < DPO_DEEP; i++) {
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	e012      	b.n	800324c <HAL_ADC_ConvHalfCpltCallback+0x3c>
            BUFFER_DPO_CH1_PROC[i] = BUFFER_DPO_CH1[i];
 8003226:	4a11      	ldr	r2, [pc, #68]	@ (800326c <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800322e:	4910      	ldr	r1, [pc, #64]	@ (8003270 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            BUFFER_DPO_CH2_PROC[i] = BUFFER_DPO_CH2[i];
 8003236:	4a0f      	ldr	r2, [pc, #60]	@ (8003274 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800323e:	490e      	ldr	r1, [pc, #56]	@ (8003278 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (size_t i = 0; i < DPO_DEEP; i++) {
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	3301      	adds	r3, #1
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003252:	d3e8      	bcc.n	8003226 <HAL_ADC_ConvHalfCpltCallback+0x16>
        }
        LOCK_CH1 =1;
 8003254:	4b04      	ldr	r3, [pc, #16]	@ (8003268 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8003256:	2201      	movs	r2, #1
 8003258:	701a      	strb	r2, [r3, #0]

    }
}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	20011029 	.word	0x20011029
 800326c:	2000100c 	.word	0x2000100c
 8003270:	2000900c 	.word	0x2000900c
 8003274:	2000500c 	.word	0x2000500c
 8003278:	2000d00c 	.word	0x2000d00c

0800327c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003280:	b672      	cpsid	i
}
 8003282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003284:	bf00      	nop
 8003286:	e7fd      	b.n	8003284 <Error_Handler+0x8>

08003288 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8003292:	bf00      	nop
	ST7789_DC_Clr();
 8003294:	2200      	movs	r2, #0
 8003296:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800329a:	4807      	ldr	r0, [pc, #28]	@ (80032b8 <ST7789_WriteCommand+0x30>)
 800329c:	f005 f98e 	bl	80085bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80032a0:	1df9      	adds	r1, r7, #7
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295
 80032a6:	2201      	movs	r2, #1
 80032a8:	4804      	ldr	r0, [pc, #16]	@ (80032bc <ST7789_WriteCommand+0x34>)
 80032aa:	f009 fddc 	bl	800ce66 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80032ae:	bf00      	nop
}
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	48000800 	.word	0x48000800
 80032bc:	20000c14 	.word	0x20000c14

080032c0 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80032ca:	bf00      	nop
	ST7789_DC_Set();
 80032cc:	2201      	movs	r2, #1
 80032ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80032d2:	481b      	ldr	r0, [pc, #108]	@ (8003340 <ST7789_WriteData+0x80>)
 80032d4:	f005 f972 	bl	80085bc <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80032d8:	e02a      	b.n	8003330 <ST7789_WriteData+0x70>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032e0:	4293      	cmp	r3, r2
 80032e2:	bf28      	it	cs
 80032e4:	4613      	movcs	r3, r2
 80032e6:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 80032e8:	4b16      	ldr	r3, [pc, #88]	@ (8003344 <ST7789_WriteData+0x84>)
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d30e      	bcc.n	8003312 <ST7789_WriteData+0x52>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 80032f4:	89fb      	ldrh	r3, [r7, #14]
 80032f6:	461a      	mov	r2, r3
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	4813      	ldr	r0, [pc, #76]	@ (8003348 <ST7789_WriteData+0x88>)
 80032fc:	f009 ff2a 	bl	800d154 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8003300:	bf00      	nop
 8003302:	4b11      	ldr	r3, [pc, #68]	@ (8003348 <ST7789_WriteData+0x88>)
 8003304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003306:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b01      	cmp	r3, #1
 800330e:	d1f8      	bne.n	8003302 <ST7789_WriteData+0x42>
 8003310:	e006      	b.n	8003320 <ST7789_WriteData+0x60>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8003312:	89fa      	ldrh	r2, [r7, #14]
 8003314:	f04f 33ff 	mov.w	r3, #4294967295
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	480b      	ldr	r0, [pc, #44]	@ (8003348 <ST7789_WriteData+0x88>)
 800331c:	f009 fda3 	bl	800ce66 <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 8003320:	89fb      	ldrh	r3, [r7, #14]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4413      	add	r3, r2
 8003326:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8003328:	89fb      	ldrh	r3, [r7, #14]
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1d1      	bne.n	80032da <ST7789_WriteData+0x1a>
	}

	ST7789_UnSelect();
 8003336:	bf00      	nop
}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	48000800 	.word	0x48000800
 8003344:	20000270 	.word	0x20000270
 8003348:	20000c14 	.word	0x20000c14

0800334c <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8003356:	bf00      	nop
	ST7789_DC_Set();
 8003358:	2201      	movs	r2, #1
 800335a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800335e:	4807      	ldr	r0, [pc, #28]	@ (800337c <ST7789_WriteSmallData+0x30>)
 8003360:	f005 f92c 	bl	80085bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8003364:	1df9      	adds	r1, r7, #7
 8003366:	f04f 33ff 	mov.w	r3, #4294967295
 800336a:	2201      	movs	r2, #1
 800336c:	4804      	ldr	r0, [pc, #16]	@ (8003380 <ST7789_WriteSmallData+0x34>)
 800336e:	f009 fd7a 	bl	800ce66 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8003372:	bf00      	nop
}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	48000800 	.word	0x48000800
 8003380:	20000c14 	.word	0x20000c14

08003384 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800338e:	2036      	movs	r0, #54	@ 0x36
 8003390:	f7ff ff7a 	bl	8003288 <ST7789_WriteCommand>
	switch (m) {
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	2b03      	cmp	r3, #3
 8003398:	d81a      	bhi.n	80033d0 <ST7789_SetRotation+0x4c>
 800339a:	a201      	add	r2, pc, #4	@ (adr r2, 80033a0 <ST7789_SetRotation+0x1c>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	080033b1 	.word	0x080033b1
 80033a4:	080033b9 	.word	0x080033b9
 80033a8:	080033c1 	.word	0x080033c1
 80033ac:	080033c9 	.word	0x080033c9
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80033b0:	20c0      	movs	r0, #192	@ 0xc0
 80033b2:	f7ff ffcb 	bl	800334c <ST7789_WriteSmallData>
		break;
 80033b6:	e00c      	b.n	80033d2 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80033b8:	20a0      	movs	r0, #160	@ 0xa0
 80033ba:	f7ff ffc7 	bl	800334c <ST7789_WriteSmallData>
		break;
 80033be:	e008      	b.n	80033d2 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80033c0:	2000      	movs	r0, #0
 80033c2:	f7ff ffc3 	bl	800334c <ST7789_WriteSmallData>
		break;
 80033c6:	e004      	b.n	80033d2 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80033c8:	2060      	movs	r0, #96	@ 0x60
 80033ca:	f7ff ffbf 	bl	800334c <ST7789_WriteSmallData>
		break;
 80033ce:	e000      	b.n	80033d2 <ST7789_SetRotation+0x4e>
	default:
		break;
 80033d0:	bf00      	nop
	}
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop

080033dc <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80033dc:	b590      	push	{r4, r7, lr}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4604      	mov	r4, r0
 80033e4:	4608      	mov	r0, r1
 80033e6:	4611      	mov	r1, r2
 80033e8:	461a      	mov	r2, r3
 80033ea:	4623      	mov	r3, r4
 80033ec:	80fb      	strh	r3, [r7, #6]
 80033ee:	4603      	mov	r3, r0
 80033f0:	80bb      	strh	r3, [r7, #4]
 80033f2:	460b      	mov	r3, r1
 80033f4:	807b      	strh	r3, [r7, #2]
 80033f6:	4613      	mov	r3, r2
 80033f8:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80033fa:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	82fb      	strh	r3, [r7, #22]
 8003400:	887b      	ldrh	r3, [r7, #2]
 8003402:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8003404:	88bb      	ldrh	r3, [r7, #4]
 8003406:	827b      	strh	r3, [r7, #18]
 8003408:	883b      	ldrh	r3, [r7, #0]
 800340a:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 800340c:	202a      	movs	r0, #42	@ 0x2a
 800340e:	f7ff ff3b 	bl	8003288 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8003412:	8afb      	ldrh	r3, [r7, #22]
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	b29b      	uxth	r3, r3
 8003418:	b2db      	uxtb	r3, r3
 800341a:	733b      	strb	r3, [r7, #12]
 800341c:	8afb      	ldrh	r3, [r7, #22]
 800341e:	b2db      	uxtb	r3, r3
 8003420:	737b      	strb	r3, [r7, #13]
 8003422:	8abb      	ldrh	r3, [r7, #20]
 8003424:	0a1b      	lsrs	r3, r3, #8
 8003426:	b29b      	uxth	r3, r3
 8003428:	b2db      	uxtb	r3, r3
 800342a:	73bb      	strb	r3, [r7, #14]
 800342c:	8abb      	ldrh	r3, [r7, #20]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8003432:	f107 030c 	add.w	r3, r7, #12
 8003436:	2104      	movs	r1, #4
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ff41 	bl	80032c0 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 800343e:	202b      	movs	r0, #43	@ 0x2b
 8003440:	f7ff ff22 	bl	8003288 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8003444:	8a7b      	ldrh	r3, [r7, #18]
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	b29b      	uxth	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	723b      	strb	r3, [r7, #8]
 800344e:	8a7b      	ldrh	r3, [r7, #18]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	727b      	strb	r3, [r7, #9]
 8003454:	8a3b      	ldrh	r3, [r7, #16]
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	b29b      	uxth	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	72bb      	strb	r3, [r7, #10]
 800345e:	8a3b      	ldrh	r3, [r7, #16]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8003464:	f107 0308 	add.w	r3, r7, #8
 8003468:	2104      	movs	r1, #4
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff ff28 	bl	80032c0 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8003470:	202c      	movs	r0, #44	@ 0x2c
 8003472:	f7ff ff09 	bl	8003288 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8003476:	bf00      	nop
}
 8003478:	bf00      	nop
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	bd90      	pop	{r4, r7, pc}

08003480 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b08b      	sub	sp, #44	@ 0x2c
 8003484:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 8003486:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800348a:	2100      	movs	r1, #0
 800348c:	484a      	ldr	r0, [pc, #296]	@ (80035b8 <ST7789_Init+0x138>)
 800348e:	f011 ff49 	bl	8015324 <memset>
	#endif
	HAL_Delay(10);
 8003492:	200a      	movs	r0, #10
 8003494:	f001 fbfa 	bl	8004c8c <HAL_Delay>
    ST7789_RST_Clr();
 8003498:	2200      	movs	r2, #0
 800349a:	2104      	movs	r1, #4
 800349c:	4847      	ldr	r0, [pc, #284]	@ (80035bc <ST7789_Init+0x13c>)
 800349e:	f005 f88d 	bl	80085bc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80034a2:	200a      	movs	r0, #10
 80034a4:	f001 fbf2 	bl	8004c8c <HAL_Delay>
    ST7789_RST_Set();
 80034a8:	2201      	movs	r2, #1
 80034aa:	2104      	movs	r1, #4
 80034ac:	4843      	ldr	r0, [pc, #268]	@ (80035bc <ST7789_Init+0x13c>)
 80034ae:	f005 f885 	bl	80085bc <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80034b2:	2014      	movs	r0, #20
 80034b4:	f001 fbea 	bl	8004c8c <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80034b8:	203a      	movs	r0, #58	@ 0x3a
 80034ba:	f7ff fee5 	bl	8003288 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 80034be:	2055      	movs	r0, #85	@ 0x55
 80034c0:	f7ff ff44 	bl	800334c <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80034c4:	20b2      	movs	r0, #178	@ 0xb2
 80034c6:	f7ff fedf 	bl	8003288 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80034ca:	4a3d      	ldr	r2, [pc, #244]	@ (80035c0 <ST7789_Init+0x140>)
 80034cc:	f107 0320 	add.w	r3, r7, #32
 80034d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034d4:	6018      	str	r0, [r3, #0]
 80034d6:	3304      	adds	r3, #4
 80034d8:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80034da:	f107 0320 	add.w	r3, r7, #32
 80034de:	2105      	movs	r1, #5
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff feed 	bl	80032c0 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80034e6:	2003      	movs	r0, #3
 80034e8:	f7ff ff4c 	bl	8003384 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80034ec:	20b7      	movs	r0, #183	@ 0xb7
 80034ee:	f7ff fecb 	bl	8003288 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80034f2:	2035      	movs	r0, #53	@ 0x35
 80034f4:	f7ff ff2a 	bl	800334c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80034f8:	20bb      	movs	r0, #187	@ 0xbb
 80034fa:	f7ff fec5 	bl	8003288 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80034fe:	2019      	movs	r0, #25
 8003500:	f7ff ff24 	bl	800334c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8003504:	20c0      	movs	r0, #192	@ 0xc0
 8003506:	f7ff febf 	bl	8003288 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 800350a:	202c      	movs	r0, #44	@ 0x2c
 800350c:	f7ff ff1e 	bl	800334c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8003510:	20c2      	movs	r0, #194	@ 0xc2
 8003512:	f7ff feb9 	bl	8003288 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8003516:	2001      	movs	r0, #1
 8003518:	f7ff ff18 	bl	800334c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 800351c:	20c3      	movs	r0, #195	@ 0xc3
 800351e:	f7ff feb3 	bl	8003288 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8003522:	2012      	movs	r0, #18
 8003524:	f7ff ff12 	bl	800334c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8003528:	20c4      	movs	r0, #196	@ 0xc4
 800352a:	f7ff fead 	bl	8003288 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 800352e:	2020      	movs	r0, #32
 8003530:	f7ff ff0c 	bl	800334c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8003534:	20c6      	movs	r0, #198	@ 0xc6
 8003536:	f7ff fea7 	bl	8003288 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 800353a:	200f      	movs	r0, #15
 800353c:	f7ff ff06 	bl	800334c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8003540:	20d0      	movs	r0, #208	@ 0xd0
 8003542:	f7ff fea1 	bl	8003288 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8003546:	20a4      	movs	r0, #164	@ 0xa4
 8003548:	f7ff ff00 	bl	800334c <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 800354c:	20a1      	movs	r0, #161	@ 0xa1
 800354e:	f7ff fefd 	bl	800334c <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8003552:	20e0      	movs	r0, #224	@ 0xe0
 8003554:	f7ff fe98 	bl	8003288 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8003558:	4b1a      	ldr	r3, [pc, #104]	@ (80035c4 <ST7789_Init+0x144>)
 800355a:	f107 0410 	add.w	r4, r7, #16
 800355e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003560:	c407      	stmia	r4!, {r0, r1, r2}
 8003562:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8003564:	f107 0310 	add.w	r3, r7, #16
 8003568:	210e      	movs	r1, #14
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fea8 	bl	80032c0 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8003570:	20e1      	movs	r0, #225	@ 0xe1
 8003572:	f7ff fe89 	bl	8003288 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8003576:	4b14      	ldr	r3, [pc, #80]	@ (80035c8 <ST7789_Init+0x148>)
 8003578:	463c      	mov	r4, r7
 800357a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800357c:	c407      	stmia	r4!, {r0, r1, r2}
 800357e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8003580:	463b      	mov	r3, r7
 8003582:	210e      	movs	r1, #14
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fe9b 	bl	80032c0 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 800358a:	2021      	movs	r0, #33	@ 0x21
 800358c:	f7ff fe7c 	bl	8003288 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8003590:	2011      	movs	r0, #17
 8003592:	f7ff fe79 	bl	8003288 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8003596:	2013      	movs	r0, #19
 8003598:	f7ff fe76 	bl	8003288 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 800359c:	2029      	movs	r0, #41	@ 0x29
 800359e:	f7ff fe73 	bl	8003288 <ST7789_WriteCommand>

	HAL_Delay(50);
 80035a2:	2032      	movs	r0, #50	@ 0x32
 80035a4:	f001 fb72 	bl	8004c8c <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 80035a8:	2000      	movs	r0, #0
 80035aa:	f000 f80f 	bl	80035cc <ST7789_Fill_Color>
}
 80035ae:	bf00      	nop
 80035b0:	372c      	adds	r7, #44	@ 0x2c
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd90      	pop	{r4, r7, pc}
 80035b6:	bf00      	nop
 80035b8:	2001102c 	.word	0x2001102c
 80035bc:	48000c00 	.word	0x48000c00
 80035c0:	08018bb0 	.word	0x08018bb0
 80035c4:	08018bb8 	.word	0x08018bb8
 80035c8:	08018bc8 	.word	0x08018bc8

080035cc <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80035d6:	23ef      	movs	r3, #239	@ 0xef
 80035d8:	f240 123f 	movw	r2, #319	@ 0x13f
 80035dc:	2100      	movs	r1, #0
 80035de:	2000      	movs	r0, #0
 80035e0:	f7ff fefc 	bl	80033dc <ST7789_SetAddressWindow>
	ST7789_Select();
 80035e4:	bf00      	nop

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 80035e6:	2300      	movs	r3, #0
 80035e8:	81fb      	strh	r3, [r7, #14]
 80035ea:	e00e      	b.n	800360a <ST7789_Fill_Color+0x3e>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 80035f2:	4619      	mov	r1, r3
 80035f4:	4809      	ldr	r0, [pc, #36]	@ (800361c <ST7789_Fill_Color+0x50>)
 80035f6:	f011 fe95 	bl	8015324 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 80035fa:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 80035fe:	4807      	ldr	r0, [pc, #28]	@ (800361c <ST7789_Fill_Color+0x50>)
 8003600:	f7ff fe5e 	bl	80032c0 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8003604:	89fb      	ldrh	r3, [r7, #14]
 8003606:	3301      	adds	r3, #1
 8003608:	81fb      	strh	r3, [r7, #14]
 800360a:	89fb      	ldrh	r3, [r7, #14]
 800360c:	2b2f      	cmp	r3, #47	@ 0x2f
 800360e:	d9ed      	bls.n	80035ec <ST7789_Fill_Color+0x20>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8003610:	bf00      	nop
}
 8003612:	bf00      	nop
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	2001102c 	.word	0x2001102c

08003620 <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 8003620:	b590      	push	{r4, r7, lr}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4604      	mov	r4, r0
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
 800362c:	461a      	mov	r2, r3
 800362e:	4623      	mov	r3, r4
 8003630:	80fb      	strh	r3, [r7, #6]
 8003632:	4603      	mov	r3, r0
 8003634:	80bb      	strh	r3, [r7, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	807b      	strh	r3, [r7, #2]
 800363a:	4613      	mov	r3, r2
 800363c:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003644:	d22a      	bcs.n	800369c <ST7789_DrawImage+0x7c>
 8003646:	88bb      	ldrh	r3, [r7, #4]
 8003648:	2bef      	cmp	r3, #239	@ 0xef
 800364a:	d827      	bhi.n	800369c <ST7789_DrawImage+0x7c>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 800364c:	88fa      	ldrh	r2, [r7, #6]
 800364e:	887b      	ldrh	r3, [r7, #2]
 8003650:	4413      	add	r3, r2
 8003652:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003656:	dc23      	bgt.n	80036a0 <ST7789_DrawImage+0x80>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 8003658:	88ba      	ldrh	r2, [r7, #4]
 800365a:	883b      	ldrh	r3, [r7, #0]
 800365c:	4413      	add	r3, r2
 800365e:	2bf0      	cmp	r3, #240	@ 0xf0
 8003660:	dc20      	bgt.n	80036a4 <ST7789_DrawImage+0x84>
		return;

	ST7789_Select();
 8003662:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8003664:	88fa      	ldrh	r2, [r7, #6]
 8003666:	887b      	ldrh	r3, [r7, #2]
 8003668:	4413      	add	r3, r2
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29c      	uxth	r4, r3
 8003670:	88ba      	ldrh	r2, [r7, #4]
 8003672:	883b      	ldrh	r3, [r7, #0]
 8003674:	4413      	add	r3, r2
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29b      	uxth	r3, r3
 800367c:	88b9      	ldrh	r1, [r7, #4]
 800367e:	88f8      	ldrh	r0, [r7, #6]
 8003680:	4622      	mov	r2, r4
 8003682:	f7ff feab 	bl	80033dc <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 8003686:	887b      	ldrh	r3, [r7, #2]
 8003688:	883a      	ldrh	r2, [r7, #0]
 800368a:	fb02 f303 	mul.w	r3, r2, r3
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4619      	mov	r1, r3
 8003692:	69b8      	ldr	r0, [r7, #24]
 8003694:	f7ff fe14 	bl	80032c0 <ST7789_WriteData>
	ST7789_UnSelect();
 8003698:	bf00      	nop
 800369a:	e004      	b.n	80036a6 <ST7789_DrawImage+0x86>
		return;
 800369c:	bf00      	nop
 800369e:	e002      	b.n	80036a6 <ST7789_DrawImage+0x86>
		return;
 80036a0:	bf00      	nop
 80036a2:	e000      	b.n	80036a6 <ST7789_DrawImage+0x86>
		return;
 80036a4:	bf00      	nop
}
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd90      	pop	{r4, r7, pc}

080036ac <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80036ac:	b082      	sub	sp, #8
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b088      	sub	sp, #32
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036b6:	4603      	mov	r3, r0
 80036b8:	80fb      	strh	r3, [r7, #6]
 80036ba:	460b      	mov	r3, r1
 80036bc:	80bb      	strh	r3, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 80036c2:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 80036c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80036c8:	461a      	mov	r2, r3
 80036ca:	88fb      	ldrh	r3, [r7, #6]
 80036cc:	4413      	add	r3, r2
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80036d8:	4619      	mov	r1, r3
 80036da:	88bb      	ldrh	r3, [r7, #4]
 80036dc:	440b      	add	r3, r1
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	88b9      	ldrh	r1, [r7, #4]
 80036e6:	88f8      	ldrh	r0, [r7, #6]
 80036e8:	f7ff fe78 	bl	80033dc <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	e041      	b.n	8003776 <ST7789_WriteChar+0xca>
		b = font.data[(ch - 32) * font.height + i];
 80036f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	3b20      	subs	r3, #32
 80036f8:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80036fc:	fb01 f303 	mul.w	r3, r1, r3
 8003700:	4619      	mov	r1, r3
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	440b      	add	r3, r1
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 800370e:	2300      	movs	r3, #0
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	e027      	b.n	8003764 <ST7789_WriteChar+0xb8>
			if ((b << j) & 0x8000) {
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00e      	beq.n	8003742 <ST7789_WriteChar+0x96>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8003724:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003726:	0a1b      	lsrs	r3, r3, #8
 8003728:	b29b      	uxth	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	743b      	strb	r3, [r7, #16]
 800372e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003730:	b2db      	uxtb	r3, r3
 8003732:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8003734:	f107 0310 	add.w	r3, r7, #16
 8003738:	2102      	movs	r1, #2
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff fdc0 	bl	80032c0 <ST7789_WriteData>
 8003740:	e00d      	b.n	800375e <ST7789_WriteChar+0xb2>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8003742:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003744:	0a1b      	lsrs	r3, r3, #8
 8003746:	b29b      	uxth	r3, r3
 8003748:	b2db      	uxtb	r3, r3
 800374a:	733b      	strb	r3, [r7, #12]
 800374c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800374e:	b2db      	uxtb	r3, r3
 8003750:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8003752:	f107 030c 	add.w	r3, r7, #12
 8003756:	2102      	movs	r1, #2
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fdb1 	bl	80032c0 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	3301      	adds	r3, #1
 8003762:	61bb      	str	r3, [r7, #24]
 8003764:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003768:	461a      	mov	r2, r3
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	4293      	cmp	r3, r2
 800376e:	d3d1      	bcc.n	8003714 <ST7789_WriteChar+0x68>
	for (i = 0; i < font.height; i++) {
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	3301      	adds	r3, #1
 8003774:	61fb      	str	r3, [r7, #28]
 8003776:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800377a:	461a      	mov	r2, r3
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	4293      	cmp	r3, r2
 8003780:	d3b7      	bcc.n	80036f2 <ST7789_WriteChar+0x46>
			}
		}
	}
	ST7789_UnSelect();
 8003782:	bf00      	nop
}
 8003784:	bf00      	nop
 8003786:	3720      	adds	r7, #32
 8003788:	46bd      	mov	sp, r7
 800378a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800378e:	b002      	add	sp, #8
 8003790:	4770      	bx	lr

08003792 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003792:	b082      	sub	sp, #8
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af04      	add	r7, sp, #16
 800379a:	603a      	str	r2, [r7, #0]
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	4603      	mov	r3, r0
 80037a0:	80fb      	strh	r3, [r7, #6]
 80037a2:	460b      	mov	r3, r1
 80037a4:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 80037a6:	bf00      	nop
	while (*str) {
 80037a8:	e02e      	b.n	8003808 <ST7789_WriteString+0x76>
		if (x + font.width >= ST7789_WIDTH) {
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	7d3a      	ldrb	r2, [r7, #20]
 80037ae:	4413      	add	r3, r2
 80037b0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80037b4:	db13      	blt.n	80037de <ST7789_WriteString+0x4c>
			x = 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80037ba:	7d7b      	ldrb	r3, [r7, #21]
 80037bc:	461a      	mov	r2, r3
 80037be:	88bb      	ldrh	r3, [r7, #4]
 80037c0:	4413      	add	r3, r2
 80037c2:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 80037c4:	88bb      	ldrh	r3, [r7, #4]
 80037c6:	7d7a      	ldrb	r2, [r7, #21]
 80037c8:	4413      	add	r3, r2
 80037ca:	2bef      	cmp	r3, #239	@ 0xef
 80037cc:	dc21      	bgt.n	8003812 <ST7789_WriteString+0x80>
				break;
			}

			if (*str == ' ') {
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d103      	bne.n	80037de <ST7789_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	3301      	adds	r3, #1
 80037da:	603b      	str	r3, [r7, #0]
				continue;
 80037dc:	e014      	b.n	8003808 <ST7789_WriteString+0x76>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	781a      	ldrb	r2, [r3, #0]
 80037e2:	88b9      	ldrh	r1, [r7, #4]
 80037e4:	88f8      	ldrh	r0, [r7, #6]
 80037e6:	8c3b      	ldrh	r3, [r7, #32]
 80037e8:	9302      	str	r3, [sp, #8]
 80037ea:	8bbb      	ldrh	r3, [r7, #28]
 80037ec:	9301      	str	r3, [sp, #4]
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f7ff ff5a 	bl	80036ac <ST7789_WriteChar>
		x += font.width;
 80037f8:	7d3b      	ldrb	r3, [r7, #20]
 80037fa:	461a      	mov	r2, r3
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	4413      	add	r3, r2
 8003800:	80fb      	strh	r3, [r7, #6]
		str++;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	3301      	adds	r3, #1
 8003806:	603b      	str	r3, [r7, #0]
	while (*str) {
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1cc      	bne.n	80037aa <ST7789_WriteString+0x18>
 8003810:	e000      	b.n	8003814 <ST7789_WriteString+0x82>
				break;
 8003812:	bf00      	nop
	}
	ST7789_UnSelect();
 8003814:	bf00      	nop
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003820:	b002      	add	sp, #8
 8003822:	4770      	bx	lr

08003824 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382a:	4b11      	ldr	r3, [pc, #68]	@ (8003870 <HAL_MspInit+0x4c>)
 800382c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382e:	4a10      	ldr	r2, [pc, #64]	@ (8003870 <HAL_MspInit+0x4c>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6613      	str	r3, [r2, #96]	@ 0x60
 8003836:	4b0e      	ldr	r3, [pc, #56]	@ (8003870 <HAL_MspInit+0x4c>)
 8003838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	607b      	str	r3, [r7, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003842:	4b0b      	ldr	r3, [pc, #44]	@ (8003870 <HAL_MspInit+0x4c>)
 8003844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003846:	4a0a      	ldr	r2, [pc, #40]	@ (8003870 <HAL_MspInit+0x4c>)
 8003848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800384c:	6593      	str	r3, [r2, #88]	@ 0x58
 800384e:	4b08      	ldr	r3, [pc, #32]	@ (8003870 <HAL_MspInit+0x4c>)
 8003850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800385a:	f001 fa4d 	bl	8004cf8 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800385e:	2002      	movs	r0, #2
 8003860:	f001 fa36 	bl	8004cd0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003864:	f008 fa9c 	bl	800bda0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003868:	bf00      	nop
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40021000 	.word	0x40021000

08003874 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b0a2      	sub	sp, #136	@ 0x88
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800387c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	60da      	str	r2, [r3, #12]
 800388a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800388c:	f107 0320 	add.w	r3, r7, #32
 8003890:	2254      	movs	r2, #84	@ 0x54
 8003892:	2100      	movs	r1, #0
 8003894:	4618      	mov	r0, r3
 8003896:	f011 fd45 	bl	8015324 <memset>
  if(hadc->Instance==ADC2)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a69      	ldr	r2, [pc, #420]	@ (8003a44 <HAL_ADC_MspInit+0x1d0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d160      	bne.n	8003966 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80038a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038a8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80038aa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80038ae:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038b0:	f107 0320 	add.w	r3, r7, #32
 80038b4:	4618      	mov	r0, r3
 80038b6:	f008 ffdd 	bl	800c874 <HAL_RCCEx_PeriphCLKConfig>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80038c0:	f7ff fcdc 	bl	800327c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80038c4:	4b60      	ldr	r3, [pc, #384]	@ (8003a48 <HAL_ADC_MspInit+0x1d4>)
 80038c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c8:	4a5f      	ldr	r2, [pc, #380]	@ (8003a48 <HAL_ADC_MspInit+0x1d4>)
 80038ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038d0:	4b5d      	ldr	r3, [pc, #372]	@ (8003a48 <HAL_ADC_MspInit+0x1d4>)
 80038d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003a48 <HAL_ADC_MspInit+0x1d4>)
 80038de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e0:	4a59      	ldr	r2, [pc, #356]	@ (8003a48 <HAL_ADC_MspInit+0x1d4>)
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038e8:	4b57      	ldr	r3, [pc, #348]	@ (8003a48 <HAL_ADC_MspInit+0x1d4>)
 80038ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	61bb      	str	r3, [r7, #24]
 80038f2:	69bb      	ldr	r3, [r7, #24]
    /**ADC2 GPIO Configuration
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80038f4:	2380      	movs	r3, #128	@ 0x80
 80038f6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038f8:	2303      	movs	r3, #3
 80038fa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003900:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003904:	4619      	mov	r1, r3
 8003906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800390a:	f004 fcd5 	bl	80082b8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel5;
 800390e:	4b4f      	ldr	r3, [pc, #316]	@ (8003a4c <HAL_ADC_MspInit+0x1d8>)
 8003910:	4a4f      	ldr	r2, [pc, #316]	@ (8003a50 <HAL_ADC_MspInit+0x1dc>)
 8003912:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003914:	4b4d      	ldr	r3, [pc, #308]	@ (8003a4c <HAL_ADC_MspInit+0x1d8>)
 8003916:	2224      	movs	r2, #36	@ 0x24
 8003918:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800391a:	4b4c      	ldr	r3, [pc, #304]	@ (8003a4c <HAL_ADC_MspInit+0x1d8>)
 800391c:	2200      	movs	r2, #0
 800391e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003920:	4b4a      	ldr	r3, [pc, #296]	@ (8003a4c <HAL_ADC_MspInit+0x1d8>)
 8003922:	2200      	movs	r2, #0
 8003924:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003926:	4b49      	ldr	r3, [pc, #292]	@ (8003a4c <HAL_ADC_MspInit+0x1d8>)
 8003928:	2280      	movs	r2, #128	@ 0x80
 800392a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800392c:	4b47      	ldr	r3, [pc, #284]	@ (8003a4c <HAL_ADC_MspInit+0x1d8>)
 800392e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003932:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003934:	4b45      	ldr	r3, [pc, #276]	@ (8003a4c <HAL_ADC_MspInit+0x1d8>)
 8003936:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800393a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800393c:	4b43      	ldr	r3, [pc, #268]	@ (8003a4c <HAL_ADC_MspInit+0x1d8>)
 800393e:	2220      	movs	r2, #32
 8003940:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003942:	4b42      	ldr	r3, [pc, #264]	@ (8003a4c <HAL_ADC_MspInit+0x1d8>)
 8003944:	2200      	movs	r2, #0
 8003946:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003948:	4840      	ldr	r0, [pc, #256]	@ (8003a4c <HAL_ADC_MspInit+0x1d8>)
 800394a:	f004 fa43 	bl	8007dd4 <HAL_DMA_Init>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8003954:	f7ff fc92 	bl	800327c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a3c      	ldr	r2, [pc, #240]	@ (8003a4c <HAL_ADC_MspInit+0x1d8>)
 800395c:	655a      	str	r2, [r3, #84]	@ 0x54
 800395e:	4a3b      	ldr	r2, [pc, #236]	@ (8003a4c <HAL_ADC_MspInit+0x1d8>)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8003964:	e0f7      	b.n	8003b56 <HAL_ADC_MspInit+0x2e2>
  else if(hadc->Instance==ADC3)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a3a      	ldr	r2, [pc, #232]	@ (8003a54 <HAL_ADC_MspInit+0x1e0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d17b      	bne.n	8003a68 <HAL_ADC_MspInit+0x1f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003970:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003974:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003976:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800397a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800397c:	f107 0320 	add.w	r3, r7, #32
 8003980:	4618      	mov	r0, r3
 8003982:	f008 ff77 	bl	800c874 <HAL_RCCEx_PeriphCLKConfig>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_ADC_MspInit+0x11c>
      Error_Handler();
 800398c:	f7ff fc76 	bl	800327c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003990:	4b31      	ldr	r3, [pc, #196]	@ (8003a58 <HAL_ADC_MspInit+0x1e4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3301      	adds	r3, #1
 8003996:	4a30      	ldr	r2, [pc, #192]	@ (8003a58 <HAL_ADC_MspInit+0x1e4>)
 8003998:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800399a:	4b2f      	ldr	r3, [pc, #188]	@ (8003a58 <HAL_ADC_MspInit+0x1e4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d10b      	bne.n	80039ba <HAL_ADC_MspInit+0x146>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80039a2:	4b29      	ldr	r3, [pc, #164]	@ (8003a48 <HAL_ADC_MspInit+0x1d4>)
 80039a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a6:	4a28      	ldr	r2, [pc, #160]	@ (8003a48 <HAL_ADC_MspInit+0x1d4>)
 80039a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ae:	4b26      	ldr	r3, [pc, #152]	@ (8003a48 <HAL_ADC_MspInit+0x1d4>)
 80039b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ba:	4b23      	ldr	r3, [pc, #140]	@ (8003a48 <HAL_ADC_MspInit+0x1d4>)
 80039bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039be:	4a22      	ldr	r2, [pc, #136]	@ (8003a48 <HAL_ADC_MspInit+0x1d4>)
 80039c0:	f043 0302 	orr.w	r3, r3, #2
 80039c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039c6:	4b20      	ldr	r3, [pc, #128]	@ (8003a48 <HAL_ADC_MspInit+0x1d4>)
 80039c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80039d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039d6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039d8:	2303      	movs	r3, #3
 80039da:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80039e4:	4619      	mov	r1, r3
 80039e6:	481d      	ldr	r0, [pc, #116]	@ (8003a5c <HAL_ADC_MspInit+0x1e8>)
 80039e8:	f004 fc66 	bl	80082b8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel6;
 80039ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003a60 <HAL_ADC_MspInit+0x1ec>)
 80039ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003a64 <HAL_ADC_MspInit+0x1f0>)
 80039f0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80039f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a60 <HAL_ADC_MspInit+0x1ec>)
 80039f4:	2225      	movs	r2, #37	@ 0x25
 80039f6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039f8:	4b19      	ldr	r3, [pc, #100]	@ (8003a60 <HAL_ADC_MspInit+0x1ec>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80039fe:	4b18      	ldr	r3, [pc, #96]	@ (8003a60 <HAL_ADC_MspInit+0x1ec>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003a04:	4b16      	ldr	r3, [pc, #88]	@ (8003a60 <HAL_ADC_MspInit+0x1ec>)
 8003a06:	2280      	movs	r2, #128	@ 0x80
 8003a08:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a0a:	4b15      	ldr	r3, [pc, #84]	@ (8003a60 <HAL_ADC_MspInit+0x1ec>)
 8003a0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a10:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a12:	4b13      	ldr	r3, [pc, #76]	@ (8003a60 <HAL_ADC_MspInit+0x1ec>)
 8003a14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a18:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003a1a:	4b11      	ldr	r3, [pc, #68]	@ (8003a60 <HAL_ADC_MspInit+0x1ec>)
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003a20:	4b0f      	ldr	r3, [pc, #60]	@ (8003a60 <HAL_ADC_MspInit+0x1ec>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003a26:	480e      	ldr	r0, [pc, #56]	@ (8003a60 <HAL_ADC_MspInit+0x1ec>)
 8003a28:	f004 f9d4 	bl	8007dd4 <HAL_DMA_Init>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_ADC_MspInit+0x1c2>
      Error_Handler();
 8003a32:	f7ff fc23 	bl	800327c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a09      	ldr	r2, [pc, #36]	@ (8003a60 <HAL_ADC_MspInit+0x1ec>)
 8003a3a:	655a      	str	r2, [r3, #84]	@ 0x54
 8003a3c:	4a08      	ldr	r2, [pc, #32]	@ (8003a60 <HAL_ADC_MspInit+0x1ec>)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003a42:	e088      	b.n	8003b56 <HAL_ADC_MspInit+0x2e2>
 8003a44:	50000100 	.word	0x50000100
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	2000073c 	.word	0x2000073c
 8003a50:	40020058 	.word	0x40020058
 8003a54:	50000400 	.word	0x50000400
 8003a58:	20011d10 	.word	0x20011d10
 8003a5c:	48000400 	.word	0x48000400
 8003a60:	2000079c 	.word	0x2000079c
 8003a64:	4002006c 	.word	0x4002006c
  else if(hadc->Instance==ADC5)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a3c      	ldr	r2, [pc, #240]	@ (8003b60 <HAL_ADC_MspInit+0x2ec>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d171      	bne.n	8003b56 <HAL_ADC_MspInit+0x2e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003a72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a76:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003a78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a7e:	f107 0320 	add.w	r3, r7, #32
 8003a82:	4618      	mov	r0, r3
 8003a84:	f008 fef6 	bl	800c874 <HAL_RCCEx_PeriphCLKConfig>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_ADC_MspInit+0x21e>
      Error_Handler();
 8003a8e:	f7ff fbf5 	bl	800327c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003a92:	4b34      	ldr	r3, [pc, #208]	@ (8003b64 <HAL_ADC_MspInit+0x2f0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3301      	adds	r3, #1
 8003a98:	4a32      	ldr	r2, [pc, #200]	@ (8003b64 <HAL_ADC_MspInit+0x2f0>)
 8003a9a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003a9c:	4b31      	ldr	r3, [pc, #196]	@ (8003b64 <HAL_ADC_MspInit+0x2f0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d10b      	bne.n	8003abc <HAL_ADC_MspInit+0x248>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003aa4:	4b30      	ldr	r3, [pc, #192]	@ (8003b68 <HAL_ADC_MspInit+0x2f4>)
 8003aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa8:	4a2f      	ldr	r2, [pc, #188]	@ (8003b68 <HAL_ADC_MspInit+0x2f4>)
 8003aaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003aae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8003b68 <HAL_ADC_MspInit+0x2f4>)
 8003ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abc:	4b2a      	ldr	r3, [pc, #168]	@ (8003b68 <HAL_ADC_MspInit+0x2f4>)
 8003abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac0:	4a29      	ldr	r2, [pc, #164]	@ (8003b68 <HAL_ADC_MspInit+0x2f4>)
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ac8:	4b27      	ldr	r3, [pc, #156]	@ (8003b68 <HAL_ADC_MspInit+0x2f4>)
 8003aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_KEY_Pin;
 8003ad4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ad8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ada:	2303      	movs	r3, #3
 8003adc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(ADC_KEY_GPIO_Port, &GPIO_InitStruct);
 8003ae2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003aec:	f004 fbe4 	bl	80082b8 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel4;
 8003af0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b6c <HAL_ADC_MspInit+0x2f8>)
 8003af2:	4a1f      	ldr	r2, [pc, #124]	@ (8003b70 <HAL_ADC_MspInit+0x2fc>)
 8003af4:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8003af6:	4b1d      	ldr	r3, [pc, #116]	@ (8003b6c <HAL_ADC_MspInit+0x2f8>)
 8003af8:	2227      	movs	r2, #39	@ 0x27
 8003afa:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003afc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b6c <HAL_ADC_MspInit+0x2f8>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b02:	4b1a      	ldr	r3, [pc, #104]	@ (8003b6c <HAL_ADC_MspInit+0x2f8>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8003b08:	4b18      	ldr	r3, [pc, #96]	@ (8003b6c <HAL_ADC_MspInit+0x2f8>)
 8003b0a:	2280      	movs	r2, #128	@ 0x80
 8003b0c:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b0e:	4b17      	ldr	r3, [pc, #92]	@ (8003b6c <HAL_ADC_MspInit+0x2f8>)
 8003b10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b14:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003b16:	4b15      	ldr	r3, [pc, #84]	@ (8003b6c <HAL_ADC_MspInit+0x2f8>)
 8003b18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b1c:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8003b1e:	4b13      	ldr	r3, [pc, #76]	@ (8003b6c <HAL_ADC_MspInit+0x2f8>)
 8003b20:	2220      	movs	r2, #32
 8003b22:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8003b24:	4b11      	ldr	r3, [pc, #68]	@ (8003b6c <HAL_ADC_MspInit+0x2f8>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8003b2a:	4810      	ldr	r0, [pc, #64]	@ (8003b6c <HAL_ADC_MspInit+0x2f8>)
 8003b2c:	f004 f952 	bl	8007dd4 <HAL_DMA_Init>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8003b36:	f7ff fba1 	bl	800327c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b6c <HAL_ADC_MspInit+0x2f8>)
 8003b3e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003b40:	4a0a      	ldr	r2, [pc, #40]	@ (8003b6c <HAL_ADC_MspInit+0x2f8>)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC5_IRQn, 0, 0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	2100      	movs	r1, #0
 8003b4a:	203e      	movs	r0, #62	@ 0x3e
 8003b4c:	f003 fda5 	bl	800769a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
 8003b50:	203e      	movs	r0, #62	@ 0x3e
 8003b52:	f003 fdbc 	bl	80076ce <HAL_NVIC_EnableIRQ>
}
 8003b56:	bf00      	nop
 8003b58:	3788      	adds	r7, #136	@ 0x88
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	50000600 	.word	0x50000600
 8003b64:	20011d10 	.word	0x20011d10
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	200007fc 	.word	0x200007fc
 8003b70:	40020044 	.word	0x40020044

08003b74 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08a      	sub	sp, #40	@ 0x28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b7c:	f107 0314 	add.w	r3, r7, #20
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	605a      	str	r2, [r3, #4]
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	60da      	str	r2, [r3, #12]
 8003b8a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a1f      	ldr	r2, [pc, #124]	@ (8003c10 <HAL_COMP_MspInit+0x9c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d119      	bne.n	8003bca <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b96:	4b1f      	ldr	r3, [pc, #124]	@ (8003c14 <HAL_COMP_MspInit+0xa0>)
 8003b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8003c14 <HAL_COMP_MspInit+0xa0>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8003c14 <HAL_COMP_MspInit+0xa0>)
 8003ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	693b      	ldr	r3, [r7, #16]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003bae:	2380      	movs	r3, #128	@ 0x80
 8003bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bba:	f107 0314 	add.w	r3, r7, #20
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bc4:	f004 fb78 	bl	80082b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP5_MspInit 1 */

  /* USER CODE END COMP5_MspInit 1 */
  }

}
 8003bc8:	e01d      	b.n	8003c06 <HAL_COMP_MspInit+0x92>
  else if(hcomp->Instance==COMP5)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a12      	ldr	r2, [pc, #72]	@ (8003c18 <HAL_COMP_MspInit+0xa4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d118      	bne.n	8003c06 <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c14 <HAL_COMP_MspInit+0xa0>)
 8003bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd8:	4a0e      	ldr	r2, [pc, #56]	@ (8003c14 <HAL_COMP_MspInit+0xa0>)
 8003bda:	f043 0302 	orr.w	r3, r3, #2
 8003bde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003be0:	4b0c      	ldr	r3, [pc, #48]	@ (8003c14 <HAL_COMP_MspInit+0xa0>)
 8003be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003bec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfa:	f107 0314 	add.w	r3, r7, #20
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4806      	ldr	r0, [pc, #24]	@ (8003c1c <HAL_COMP_MspInit+0xa8>)
 8003c02:	f004 fb59 	bl	80082b8 <HAL_GPIO_Init>
}
 8003c06:	bf00      	nop
 8003c08:	3728      	adds	r7, #40	@ 0x28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40010204 	.word	0x40010204
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40010210 	.word	0x40010210
 8003c1c:	48000400 	.word	0x48000400

08003c20 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8003c58 <HAL_CRC_MspInit+0x38>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d10b      	bne.n	8003c4a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003c32:	4b0a      	ldr	r3, [pc, #40]	@ (8003c5c <HAL_CRC_MspInit+0x3c>)
 8003c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c36:	4a09      	ldr	r2, [pc, #36]	@ (8003c5c <HAL_CRC_MspInit+0x3c>)
 8003c38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c3c:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c3e:	4b07      	ldr	r3, [pc, #28]	@ (8003c5c <HAL_CRC_MspInit+0x3c>)
 8003c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40023000 	.word	0x40023000
 8003c5c:	40021000 	.word	0x40021000

08003c60 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08c      	sub	sp, #48	@ 0x30
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c68:	f107 031c 	add.w	r3, r7, #28
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	60da      	str	r2, [r3, #12]
 8003c76:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a34      	ldr	r2, [pc, #208]	@ (8003d50 <HAL_DAC_MspInit+0xf0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d125      	bne.n	8003cce <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003c82:	4b34      	ldr	r3, [pc, #208]	@ (8003d54 <HAL_DAC_MspInit+0xf4>)
 8003c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c86:	4a33      	ldr	r2, [pc, #204]	@ (8003d54 <HAL_DAC_MspInit+0xf4>)
 8003c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c8e:	4b31      	ldr	r3, [pc, #196]	@ (8003d54 <HAL_DAC_MspInit+0xf4>)
 8003c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c9a:	4b2e      	ldr	r3, [pc, #184]	@ (8003d54 <HAL_DAC_MspInit+0xf4>)
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9e:	4a2d      	ldr	r2, [pc, #180]	@ (8003d54 <HAL_DAC_MspInit+0xf4>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ca6:	4b2b      	ldr	r3, [pc, #172]	@ (8003d54 <HAL_DAC_MspInit+0xf4>)
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003cb2:	2310      	movs	r3, #16
 8003cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cbe:	f107 031c 	add.w	r3, r7, #28
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cc8:	f004 faf6 	bl	80082b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8003ccc:	e03b      	b.n	8003d46 <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC2)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a21      	ldr	r2, [pc, #132]	@ (8003d58 <HAL_DAC_MspInit+0xf8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d125      	bne.n	8003d24 <HAL_DAC_MspInit+0xc4>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8003cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8003d54 <HAL_DAC_MspInit+0xf4>)
 8003cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8003d54 <HAL_DAC_MspInit+0xf4>)
 8003cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ce2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d54 <HAL_DAC_MspInit+0xf4>)
 8003ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf0:	4b18      	ldr	r3, [pc, #96]	@ (8003d54 <HAL_DAC_MspInit+0xf4>)
 8003cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf4:	4a17      	ldr	r2, [pc, #92]	@ (8003d54 <HAL_DAC_MspInit+0xf4>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cfc:	4b15      	ldr	r3, [pc, #84]	@ (8003d54 <HAL_DAC_MspInit+0xf4>)
 8003cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003d08:	2340      	movs	r3, #64	@ 0x40
 8003d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d14:	f107 031c 	add.w	r3, r7, #28
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d1e:	f004 facb 	bl	80082b8 <HAL_GPIO_Init>
}
 8003d22:	e010      	b.n	8003d46 <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC4)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a0c      	ldr	r2, [pc, #48]	@ (8003d5c <HAL_DAC_MspInit+0xfc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d10b      	bne.n	8003d46 <HAL_DAC_MspInit+0xe6>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8003d2e:	4b09      	ldr	r3, [pc, #36]	@ (8003d54 <HAL_DAC_MspInit+0xf4>)
 8003d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d32:	4a08      	ldr	r2, [pc, #32]	@ (8003d54 <HAL_DAC_MspInit+0xf4>)
 8003d34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d3a:	4b06      	ldr	r3, [pc, #24]	@ (8003d54 <HAL_DAC_MspInit+0xf4>)
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	68bb      	ldr	r3, [r7, #8]
}
 8003d46:	bf00      	nop
 8003d48:	3730      	adds	r7, #48	@ 0x30
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	50000800 	.word	0x50000800
 8003d54:	40021000 	.word	0x40021000
 8003d58:	50000c00 	.word	0x50000c00
 8003d5c:	50001400 	.word	0x50001400

08003d60 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003d98 <HAL_HRTIM_MspInit+0x38>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d10b      	bne.n	8003d8a <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8003d72:	4b0a      	ldr	r3, [pc, #40]	@ (8003d9c <HAL_HRTIM_MspInit+0x3c>)
 8003d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d76:	4a09      	ldr	r2, [pc, #36]	@ (8003d9c <HAL_HRTIM_MspInit+0x3c>)
 8003d78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d7e:	4b07      	ldr	r3, [pc, #28]	@ (8003d9c <HAL_HRTIM_MspInit+0x3c>)
 8003d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d82:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 8003d8a:	bf00      	nop
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40016800 	.word	0x40016800
 8003d9c:	40021000 	.word	0x40021000

08003da0 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da8:	f107 030c 	add.w	r3, r7, #12
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	605a      	str	r2, [r3, #4]
 8003db2:	609a      	str	r2, [r3, #8]
 8003db4:	60da      	str	r2, [r3, #12]
 8003db6:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a11      	ldr	r2, [pc, #68]	@ (8003e04 <HAL_HRTIM_MspPostInit+0x64>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d11c      	bne.n	8003dfc <HAL_HRTIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc2:	4b11      	ldr	r3, [pc, #68]	@ (8003e08 <HAL_HRTIM_MspPostInit+0x68>)
 8003dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dc6:	4a10      	ldr	r2, [pc, #64]	@ (8003e08 <HAL_HRTIM_MspPostInit+0x68>)
 8003dc8:	f043 0302 	orr.w	r3, r3, #2
 8003dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dce:	4b0e      	ldr	r3, [pc, #56]	@ (8003e08 <HAL_HRTIM_MspPostInit+0x68>)
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PB12     ------> HRTIM1_CHC1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003dda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dde:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de0:	2302      	movs	r3, #2
 8003de2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003de8:	2303      	movs	r3, #3
 8003dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8003dec:	230d      	movs	r3, #13
 8003dee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003df0:	f107 030c 	add.w	r3, r7, #12
 8003df4:	4619      	mov	r1, r3
 8003df6:	4805      	ldr	r0, [pc, #20]	@ (8003e0c <HAL_HRTIM_MspPostInit+0x6c>)
 8003df8:	f004 fa5e 	bl	80082b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8003dfc:	bf00      	nop
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40016800 	.word	0x40016800
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	48000400 	.word	0x48000400

08003e10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b09e      	sub	sp, #120	@ 0x78
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e18:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	605a      	str	r2, [r3, #4]
 8003e22:	609a      	str	r2, [r3, #8]
 8003e24:	60da      	str	r2, [r3, #12]
 8003e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e28:	f107 0310 	add.w	r3, r7, #16
 8003e2c:	2254      	movs	r2, #84	@ 0x54
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f011 fa77 	bl	8015324 <memset>
  if(hi2c->Instance==I2C3)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8003eb8 <HAL_I2C_MspInit+0xa8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d137      	bne.n	8003eb0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003e40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e44:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003e46:	2300      	movs	r3, #0
 8003e48:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e4a:	f107 0310 	add.w	r3, r7, #16
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f008 fd10 	bl	800c874 <HAL_RCCEx_PeriphCLKConfig>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003e5a:	f7ff fa0f 	bl	800327c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e5e:	4b17      	ldr	r3, [pc, #92]	@ (8003ebc <HAL_I2C_MspInit+0xac>)
 8003e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e62:	4a16      	ldr	r2, [pc, #88]	@ (8003ebc <HAL_I2C_MspInit+0xac>)
 8003e64:	f043 0304 	orr.w	r3, r3, #4
 8003e68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e6a:	4b14      	ldr	r3, [pc, #80]	@ (8003ebc <HAL_I2C_MspInit+0xac>)
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003e76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003e7a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e7c:	2312      	movs	r3, #18
 8003e7e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e84:	2300      	movs	r3, #0
 8003e86:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8003e88:	2308      	movs	r3, #8
 8003e8a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e8c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003e90:	4619      	mov	r1, r3
 8003e92:	480b      	ldr	r0, [pc, #44]	@ (8003ec0 <HAL_I2C_MspInit+0xb0>)
 8003e94:	f004 fa10 	bl	80082b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003e98:	4b08      	ldr	r3, [pc, #32]	@ (8003ebc <HAL_I2C_MspInit+0xac>)
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e9c:	4a07      	ldr	r2, [pc, #28]	@ (8003ebc <HAL_I2C_MspInit+0xac>)
 8003e9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ea2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ea4:	4b05      	ldr	r3, [pc, #20]	@ (8003ebc <HAL_I2C_MspInit+0xac>)
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003eac:	60bb      	str	r3, [r7, #8]
 8003eae:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003eb0:	bf00      	nop
 8003eb2:	3778      	adds	r7, #120	@ 0x78
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40007800 	.word	0x40007800
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	48000800 	.word	0x48000800

08003ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b09e      	sub	sp, #120	@ 0x78
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ecc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	60da      	str	r2, [r3, #12]
 8003eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003edc:	f107 0310 	add.w	r3, r7, #16
 8003ee0:	2254      	movs	r2, #84	@ 0x54
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f011 fa1d 	bl	8015324 <memset>
  if(huart->Instance==LPUART1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1f      	ldr	r2, [pc, #124]	@ (8003f6c <HAL_UART_MspInit+0xa8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d136      	bne.n	8003f62 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003ef4:	2320      	movs	r3, #32
 8003ef6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003efc:	f107 0310 	add.w	r3, r7, #16
 8003f00:	4618      	mov	r0, r3
 8003f02:	f008 fcb7 	bl	800c874 <HAL_RCCEx_PeriphCLKConfig>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003f0c:	f7ff f9b6 	bl	800327c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003f10:	4b17      	ldr	r3, [pc, #92]	@ (8003f70 <HAL_UART_MspInit+0xac>)
 8003f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f14:	4a16      	ldr	r2, [pc, #88]	@ (8003f70 <HAL_UART_MspInit+0xac>)
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003f1c:	4b14      	ldr	r3, [pc, #80]	@ (8003f70 <HAL_UART_MspInit+0xac>)
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f28:	4b11      	ldr	r3, [pc, #68]	@ (8003f70 <HAL_UART_MspInit+0xac>)
 8003f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2c:	4a10      	ldr	r2, [pc, #64]	@ (8003f70 <HAL_UART_MspInit+0xac>)
 8003f2e:	f043 0302 	orr.w	r3, r3, #2
 8003f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f34:	4b0e      	ldr	r3, [pc, #56]	@ (8003f70 <HAL_UART_MspInit+0xac>)
 8003f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003f40:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003f44:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f46:	2302      	movs	r3, #2
 8003f48:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003f52:	2308      	movs	r3, #8
 8003f54:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f56:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4805      	ldr	r0, [pc, #20]	@ (8003f74 <HAL_UART_MspInit+0xb0>)
 8003f5e:	f004 f9ab 	bl	80082b8 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8003f62:	bf00      	nop
 8003f64:	3778      	adds	r7, #120	@ 0x78
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40008000 	.word	0x40008000
 8003f70:	40021000 	.word	0x40021000
 8003f74:	48000400 	.word	0x48000400

08003f78 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08c      	sub	sp, #48	@ 0x30
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f80:	f107 031c 	add.w	r3, r7, #28
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	60da      	str	r2, [r3, #12]
 8003f8e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a4d      	ldr	r2, [pc, #308]	@ (80040cc <HAL_OPAMP_MspInit+0x154>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d119      	bne.n	8003fce <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f9a:	4b4d      	ldr	r3, [pc, #308]	@ (80040d0 <HAL_OPAMP_MspInit+0x158>)
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9e:	4a4c      	ldr	r2, [pc, #304]	@ (80040d0 <HAL_OPAMP_MspInit+0x158>)
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80040d0 <HAL_OPAMP_MspInit+0x158>)
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	61bb      	str	r3, [r7, #24]
 8003fb0:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003fb2:	2380      	movs	r3, #128	@ 0x80
 8003fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fbe:	f107 031c 	add.w	r3, r7, #28
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fc8:	f004 f976 	bl	80082b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8003fcc:	e079      	b.n	80040c2 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP2)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a40      	ldr	r2, [pc, #256]	@ (80040d4 <HAL_OPAMP_MspInit+0x15c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d119      	bne.n	800400c <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80040d0 <HAL_OPAMP_MspInit+0x158>)
 8003fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fdc:	4a3c      	ldr	r2, [pc, #240]	@ (80040d0 <HAL_OPAMP_MspInit+0x158>)
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fe4:	4b3a      	ldr	r3, [pc, #232]	@ (80040d0 <HAL_OPAMP_MspInit+0x158>)
 8003fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003ff0:	2380      	movs	r3, #128	@ 0x80
 8003ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ffc:	f107 031c 	add.w	r3, r7, #28
 8004000:	4619      	mov	r1, r3
 8004002:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004006:	f004 f957 	bl	80082b8 <HAL_GPIO_Init>
}
 800400a:	e05a      	b.n	80040c2 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP3)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a31      	ldr	r2, [pc, #196]	@ (80040d8 <HAL_OPAMP_MspInit+0x160>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d119      	bne.n	800404a <HAL_OPAMP_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004016:	4b2e      	ldr	r3, [pc, #184]	@ (80040d0 <HAL_OPAMP_MspInit+0x158>)
 8004018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800401a:	4a2d      	ldr	r2, [pc, #180]	@ (80040d0 <HAL_OPAMP_MspInit+0x158>)
 800401c:	f043 0302 	orr.w	r3, r3, #2
 8004020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004022:	4b2b      	ldr	r3, [pc, #172]	@ (80040d0 <HAL_OPAMP_MspInit+0x158>)
 8004024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	613b      	str	r3, [r7, #16]
 800402c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800402e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004034:	2303      	movs	r3, #3
 8004036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004038:	2300      	movs	r3, #0
 800403a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800403c:	f107 031c 	add.w	r3, r7, #28
 8004040:	4619      	mov	r1, r3
 8004042:	4826      	ldr	r0, [pc, #152]	@ (80040dc <HAL_OPAMP_MspInit+0x164>)
 8004044:	f004 f938 	bl	80082b8 <HAL_GPIO_Init>
}
 8004048:	e03b      	b.n	80040c2 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP5)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a24      	ldr	r2, [pc, #144]	@ (80040e0 <HAL_OPAMP_MspInit+0x168>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d118      	bne.n	8004086 <HAL_OPAMP_MspInit+0x10e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004054:	4b1e      	ldr	r3, [pc, #120]	@ (80040d0 <HAL_OPAMP_MspInit+0x158>)
 8004056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004058:	4a1d      	ldr	r2, [pc, #116]	@ (80040d0 <HAL_OPAMP_MspInit+0x158>)
 800405a:	f043 0304 	orr.w	r3, r3, #4
 800405e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004060:	4b1b      	ldr	r3, [pc, #108]	@ (80040d0 <HAL_OPAMP_MspInit+0x158>)
 8004062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800406c:	2308      	movs	r3, #8
 800406e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004070:	2303      	movs	r3, #3
 8004072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004074:	2300      	movs	r3, #0
 8004076:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004078:	f107 031c 	add.w	r3, r7, #28
 800407c:	4619      	mov	r1, r3
 800407e:	4819      	ldr	r0, [pc, #100]	@ (80040e4 <HAL_OPAMP_MspInit+0x16c>)
 8004080:	f004 f91a 	bl	80082b8 <HAL_GPIO_Init>
}
 8004084:	e01d      	b.n	80040c2 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP6)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a17      	ldr	r2, [pc, #92]	@ (80040e8 <HAL_OPAMP_MspInit+0x170>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d118      	bne.n	80040c2 <HAL_OPAMP_MspInit+0x14a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004090:	4b0f      	ldr	r3, [pc, #60]	@ (80040d0 <HAL_OPAMP_MspInit+0x158>)
 8004092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004094:	4a0e      	ldr	r2, [pc, #56]	@ (80040d0 <HAL_OPAMP_MspInit+0x158>)
 8004096:	f043 0302 	orr.w	r3, r3, #2
 800409a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800409c:	4b0c      	ldr	r3, [pc, #48]	@ (80040d0 <HAL_OPAMP_MspInit+0x158>)
 800409e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80040a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80040ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040ae:	2303      	movs	r3, #3
 80040b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b6:	f107 031c 	add.w	r3, r7, #28
 80040ba:	4619      	mov	r1, r3
 80040bc:	4807      	ldr	r0, [pc, #28]	@ (80040dc <HAL_OPAMP_MspInit+0x164>)
 80040be:	f004 f8fb 	bl	80082b8 <HAL_GPIO_Init>
}
 80040c2:	bf00      	nop
 80040c4:	3730      	adds	r7, #48	@ 0x30
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40010300 	.word	0x40010300
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40010304 	.word	0x40010304
 80040d8:	40010308 	.word	0x40010308
 80040dc:	48000400 	.word	0x48000400
 80040e0:	40010310 	.word	0x40010310
 80040e4:	48000800 	.word	0x48000800
 80040e8:	40010314 	.word	0x40010314

080040ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	@ 0x28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f4:	f107 0314 	add.w	r3, r7, #20
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	609a      	str	r2, [r3, #8]
 8004100:	60da      	str	r2, [r3, #12]
 8004102:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a2c      	ldr	r2, [pc, #176]	@ (80041bc <HAL_SPI_MspInit+0xd0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d151      	bne.n	80041b2 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800410e:	4b2c      	ldr	r3, [pc, #176]	@ (80041c0 <HAL_SPI_MspInit+0xd4>)
 8004110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004112:	4a2b      	ldr	r2, [pc, #172]	@ (80041c0 <HAL_SPI_MspInit+0xd4>)
 8004114:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004118:	6593      	str	r3, [r2, #88]	@ 0x58
 800411a:	4b29      	ldr	r3, [pc, #164]	@ (80041c0 <HAL_SPI_MspInit+0xd4>)
 800411c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004126:	4b26      	ldr	r3, [pc, #152]	@ (80041c0 <HAL_SPI_MspInit+0xd4>)
 8004128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800412a:	4a25      	ldr	r2, [pc, #148]	@ (80041c0 <HAL_SPI_MspInit+0xd4>)
 800412c:	f043 0304 	orr.w	r3, r3, #4
 8004130:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004132:	4b23      	ldr	r3, [pc, #140]	@ (80041c0 <HAL_SPI_MspInit+0xd4>)
 8004134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800413e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004144:	2302      	movs	r3, #2
 8004146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004148:	2300      	movs	r3, #0
 800414a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800414c:	2303      	movs	r3, #3
 800414e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004150:	2306      	movs	r3, #6
 8004152:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004154:	f107 0314 	add.w	r3, r7, #20
 8004158:	4619      	mov	r1, r3
 800415a:	481a      	ldr	r0, [pc, #104]	@ (80041c4 <HAL_SPI_MspInit+0xd8>)
 800415c:	f004 f8ac 	bl	80082b8 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel3;
 8004160:	4b19      	ldr	r3, [pc, #100]	@ (80041c8 <HAL_SPI_MspInit+0xdc>)
 8004162:	4a1a      	ldr	r2, [pc, #104]	@ (80041cc <HAL_SPI_MspInit+0xe0>)
 8004164:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8004166:	4b18      	ldr	r3, [pc, #96]	@ (80041c8 <HAL_SPI_MspInit+0xdc>)
 8004168:	220f      	movs	r2, #15
 800416a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800416c:	4b16      	ldr	r3, [pc, #88]	@ (80041c8 <HAL_SPI_MspInit+0xdc>)
 800416e:	2210      	movs	r2, #16
 8004170:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004172:	4b15      	ldr	r3, [pc, #84]	@ (80041c8 <HAL_SPI_MspInit+0xdc>)
 8004174:	2200      	movs	r2, #0
 8004176:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004178:	4b13      	ldr	r3, [pc, #76]	@ (80041c8 <HAL_SPI_MspInit+0xdc>)
 800417a:	2280      	movs	r2, #128	@ 0x80
 800417c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800417e:	4b12      	ldr	r3, [pc, #72]	@ (80041c8 <HAL_SPI_MspInit+0xdc>)
 8004180:	2200      	movs	r2, #0
 8004182:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004184:	4b10      	ldr	r3, [pc, #64]	@ (80041c8 <HAL_SPI_MspInit+0xdc>)
 8004186:	2200      	movs	r2, #0
 8004188:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800418a:	4b0f      	ldr	r3, [pc, #60]	@ (80041c8 <HAL_SPI_MspInit+0xdc>)
 800418c:	2200      	movs	r2, #0
 800418e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004190:	4b0d      	ldr	r3, [pc, #52]	@ (80041c8 <HAL_SPI_MspInit+0xdc>)
 8004192:	2200      	movs	r2, #0
 8004194:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8004196:	480c      	ldr	r0, [pc, #48]	@ (80041c8 <HAL_SPI_MspInit+0xdc>)
 8004198:	f003 fe1c 	bl	8007dd4 <HAL_DMA_Init>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80041a2:	f7ff f86b 	bl	800327c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a07      	ldr	r2, [pc, #28]	@ (80041c8 <HAL_SPI_MspInit+0xdc>)
 80041aa:	655a      	str	r2, [r3, #84]	@ 0x54
 80041ac:	4a06      	ldr	r2, [pc, #24]	@ (80041c8 <HAL_SPI_MspInit+0xdc>)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80041b2:	bf00      	nop
 80041b4:	3728      	adds	r7, #40	@ 0x28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40003c00 	.word	0x40003c00
 80041c0:	40021000 	.word	0x40021000
 80041c4:	48000800 	.word	0x48000800
 80041c8:	20000c78 	.word	0x20000c78
 80041cc:	40020030 	.word	0x40020030

080041d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b090      	sub	sp, #64	@ 0x40
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	605a      	str	r2, [r3, #4]
 80041e2:	609a      	str	r2, [r3, #8]
 80041e4:	60da      	str	r2, [r3, #12]
 80041e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a6a      	ldr	r2, [pc, #424]	@ (8004398 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d128      	bne.n	8004244 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041f2:	4b6a      	ldr	r3, [pc, #424]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80041f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f6:	4a69      	ldr	r2, [pc, #420]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80041f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80041fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80041fe:	4b67      	ldr	r3, [pc, #412]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004202:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004206:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004208:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800420a:	4b64      	ldr	r3, [pc, #400]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 800420c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800420e:	4a63      	ldr	r2, [pc, #396]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004210:	f043 0304 	orr.w	r3, r3, #4
 8004214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004216:	4b61      	ldr	r3, [pc, #388]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004222:	2303      	movs	r3, #3
 8004224:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004226:	2302      	movs	r3, #2
 8004228:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800422a:	2301      	movs	r3, #1
 800422c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800422e:	2303      	movs	r3, #3
 8004230:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004232:	2302      	movs	r3, #2
 8004234:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004236:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800423a:	4619      	mov	r1, r3
 800423c:	4858      	ldr	r0, [pc, #352]	@ (80043a0 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800423e:	f004 f83b 	bl	80082b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8004242:	e0a4      	b.n	800438e <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM3)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a56      	ldr	r2, [pc, #344]	@ (80043a4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d128      	bne.n	80042a0 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800424e:	4b53      	ldr	r3, [pc, #332]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004252:	4a52      	ldr	r2, [pc, #328]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004254:	f043 0302 	orr.w	r3, r3, #2
 8004258:	6593      	str	r3, [r2, #88]	@ 0x58
 800425a:	4b50      	ldr	r3, [pc, #320]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 800425c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	623b      	str	r3, [r7, #32]
 8004264:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004266:	4b4d      	ldr	r3, [pc, #308]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800426a:	4a4c      	ldr	r2, [pc, #304]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 800426c:	f043 0304 	orr.w	r3, r3, #4
 8004270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004272:	4b4a      	ldr	r3, [pc, #296]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800427e:	23c0      	movs	r3, #192	@ 0xc0
 8004280:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004282:	2302      	movs	r3, #2
 8004284:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004286:	2301      	movs	r3, #1
 8004288:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800428a:	2303      	movs	r3, #3
 800428c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800428e:	2302      	movs	r3, #2
 8004290:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004292:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004296:	4619      	mov	r1, r3
 8004298:	4841      	ldr	r0, [pc, #260]	@ (80043a0 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800429a:	f004 f80d 	bl	80082b8 <HAL_GPIO_Init>
}
 800429e:	e076      	b.n	800438e <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM4)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a40      	ldr	r2, [pc, #256]	@ (80043a8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d128      	bne.n	80042fc <HAL_TIM_Encoder_MspInit+0x12c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80042aa:	4b3c      	ldr	r3, [pc, #240]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80042ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ae:	4a3b      	ldr	r2, [pc, #236]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80042b0:	f043 0304 	orr.w	r3, r3, #4
 80042b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80042b6:	4b39      	ldr	r3, [pc, #228]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80042b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	61bb      	str	r3, [r7, #24]
 80042c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042c2:	4b36      	ldr	r3, [pc, #216]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80042c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c6:	4a35      	ldr	r2, [pc, #212]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80042c8:	f043 0302 	orr.w	r3, r3, #2
 80042cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042ce:	4b33      	ldr	r3, [pc, #204]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80042d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042da:	23c0      	movs	r3, #192	@ 0xc0
 80042dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042de:	2302      	movs	r3, #2
 80042e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042e2:	2301      	movs	r3, #1
 80042e4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042e6:	2303      	movs	r3, #3
 80042e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80042ea:	2302      	movs	r3, #2
 80042ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80042f2:	4619      	mov	r1, r3
 80042f4:	482d      	ldr	r0, [pc, #180]	@ (80043ac <HAL_TIM_Encoder_MspInit+0x1dc>)
 80042f6:	f003 ffdf 	bl	80082b8 <HAL_GPIO_Init>
}
 80042fa:	e048      	b.n	800438e <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM20)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2b      	ldr	r2, [pc, #172]	@ (80043b0 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d143      	bne.n	800438e <HAL_TIM_Encoder_MspInit+0x1be>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8004306:	4b25      	ldr	r3, [pc, #148]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800430a:	4a24      	ldr	r2, [pc, #144]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 800430c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004310:	6613      	str	r3, [r2, #96]	@ 0x60
 8004312:	4b22      	ldr	r3, [pc, #136]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004316:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800431e:	4b1f      	ldr	r3, [pc, #124]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004322:	4a1e      	ldr	r2, [pc, #120]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004324:	f043 0304 	orr.w	r3, r3, #4
 8004328:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800432a:	4b1c      	ldr	r3, [pc, #112]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 800432c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004336:	4b19      	ldr	r3, [pc, #100]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433a:	4a18      	ldr	r2, [pc, #96]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 800433c:	f043 0302 	orr.w	r3, r3, #2
 8004340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004342:	4b16      	ldr	r3, [pc, #88]	@ (800439c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800434e:	2304      	movs	r3, #4
 8004350:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004352:	2302      	movs	r3, #2
 8004354:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004356:	2301      	movs	r3, #1
 8004358:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800435a:	2303      	movs	r3, #3
 800435c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 800435e:	2306      	movs	r3, #6
 8004360:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004362:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004366:	4619      	mov	r1, r3
 8004368:	480d      	ldr	r0, [pc, #52]	@ (80043a0 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800436a:	f003 ffa5 	bl	80082b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800436e:	2304      	movs	r3, #4
 8004370:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004372:	2302      	movs	r3, #2
 8004374:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004376:	2301      	movs	r3, #1
 8004378:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800437a:	2303      	movs	r3, #3
 800437c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 800437e:	2303      	movs	r3, #3
 8004380:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004382:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004386:	4619      	mov	r1, r3
 8004388:	4808      	ldr	r0, [pc, #32]	@ (80043ac <HAL_TIM_Encoder_MspInit+0x1dc>)
 800438a:	f003 ff95 	bl	80082b8 <HAL_GPIO_Init>
}
 800438e:	bf00      	nop
 8004390:	3740      	adds	r7, #64	@ 0x40
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40012c00 	.word	0x40012c00
 800439c:	40021000 	.word	0x40021000
 80043a0:	48000800 	.word	0x48000800
 80043a4:	40000400 	.word	0x40000400
 80043a8:	40000800 	.word	0x40000800
 80043ac:	48000400 	.word	0x48000400
 80043b0:	40015000 	.word	0x40015000

080043b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a4f      	ldr	r2, [pc, #316]	@ (8004500 <HAL_TIM_Base_MspInit+0x14c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d10c      	bne.n	80043e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80043c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004504 <HAL_TIM_Base_MspInit+0x150>)
 80043c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ca:	4a4e      	ldr	r2, [pc, #312]	@ (8004504 <HAL_TIM_Base_MspInit+0x150>)
 80043cc:	f043 0310 	orr.w	r3, r3, #16
 80043d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80043d2:	4b4c      	ldr	r3, [pc, #304]	@ (8004504 <HAL_TIM_Base_MspInit+0x150>)
 80043d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80043de:	e08a      	b.n	80044f6 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a48      	ldr	r2, [pc, #288]	@ (8004508 <HAL_TIM_Base_MspInit+0x154>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d10c      	bne.n	8004404 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80043ea:	4b46      	ldr	r3, [pc, #280]	@ (8004504 <HAL_TIM_Base_MspInit+0x150>)
 80043ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ee:	4a45      	ldr	r2, [pc, #276]	@ (8004504 <HAL_TIM_Base_MspInit+0x150>)
 80043f0:	f043 0320 	orr.w	r3, r3, #32
 80043f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80043f6:	4b43      	ldr	r3, [pc, #268]	@ (8004504 <HAL_TIM_Base_MspInit+0x150>)
 80043f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	613b      	str	r3, [r7, #16]
 8004400:	693b      	ldr	r3, [r7, #16]
}
 8004402:	e078      	b.n	80044f6 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM8)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a40      	ldr	r2, [pc, #256]	@ (800450c <HAL_TIM_Base_MspInit+0x158>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d137      	bne.n	800447e <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800440e:	4b3d      	ldr	r3, [pc, #244]	@ (8004504 <HAL_TIM_Base_MspInit+0x150>)
 8004410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004412:	4a3c      	ldr	r2, [pc, #240]	@ (8004504 <HAL_TIM_Base_MspInit+0x150>)
 8004414:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004418:	6613      	str	r3, [r2, #96]	@ 0x60
 800441a:	4b3a      	ldr	r3, [pc, #232]	@ (8004504 <HAL_TIM_Base_MspInit+0x150>)
 800441c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800441e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch3.Instance = DMA1_Channel1;
 8004426:	4b3a      	ldr	r3, [pc, #232]	@ (8004510 <HAL_TIM_Base_MspInit+0x15c>)
 8004428:	4a3a      	ldr	r2, [pc, #232]	@ (8004514 <HAL_TIM_Base_MspInit+0x160>)
 800442a:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Request = DMA_REQUEST_TIM8_CH3;
 800442c:	4b38      	ldr	r3, [pc, #224]	@ (8004510 <HAL_TIM_Base_MspInit+0x15c>)
 800442e:	2233      	movs	r2, #51	@ 0x33
 8004430:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004432:	4b37      	ldr	r3, [pc, #220]	@ (8004510 <HAL_TIM_Base_MspInit+0x15c>)
 8004434:	2210      	movs	r2, #16
 8004436:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004438:	4b35      	ldr	r3, [pc, #212]	@ (8004510 <HAL_TIM_Base_MspInit+0x15c>)
 800443a:	2200      	movs	r2, #0
 800443c:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800443e:	4b34      	ldr	r3, [pc, #208]	@ (8004510 <HAL_TIM_Base_MspInit+0x15c>)
 8004440:	2280      	movs	r2, #128	@ 0x80
 8004442:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004444:	4b32      	ldr	r3, [pc, #200]	@ (8004510 <HAL_TIM_Base_MspInit+0x15c>)
 8004446:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800444a:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800444c:	4b30      	ldr	r3, [pc, #192]	@ (8004510 <HAL_TIM_Base_MspInit+0x15c>)
 800444e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004452:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_NORMAL;
 8004454:	4b2e      	ldr	r3, [pc, #184]	@ (8004510 <HAL_TIM_Base_MspInit+0x15c>)
 8004456:	2200      	movs	r2, #0
 8004458:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800445a:	4b2d      	ldr	r3, [pc, #180]	@ (8004510 <HAL_TIM_Base_MspInit+0x15c>)
 800445c:	2200      	movs	r2, #0
 800445e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 8004460:	482b      	ldr	r0, [pc, #172]	@ (8004510 <HAL_TIM_Base_MspInit+0x15c>)
 8004462:	f003 fcb7 	bl	8007dd4 <HAL_DMA_Init>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <HAL_TIM_Base_MspInit+0xbc>
      Error_Handler();
 800446c:	f7fe ff06 	bl	800327c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a27      	ldr	r2, [pc, #156]	@ (8004510 <HAL_TIM_Base_MspInit+0x15c>)
 8004474:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004476:	4a26      	ldr	r2, [pc, #152]	@ (8004510 <HAL_TIM_Base_MspInit+0x15c>)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800447c:	e03b      	b.n	80044f6 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM15)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a25      	ldr	r2, [pc, #148]	@ (8004518 <HAL_TIM_Base_MspInit+0x164>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d136      	bne.n	80044f6 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004488:	4b1e      	ldr	r3, [pc, #120]	@ (8004504 <HAL_TIM_Base_MspInit+0x150>)
 800448a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800448c:	4a1d      	ldr	r2, [pc, #116]	@ (8004504 <HAL_TIM_Base_MspInit+0x150>)
 800448e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004492:	6613      	str	r3, [r2, #96]	@ 0x60
 8004494:	4b1b      	ldr	r3, [pc, #108]	@ (8004504 <HAL_TIM_Base_MspInit+0x150>)
 8004496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	68bb      	ldr	r3, [r7, #8]
    hdma_tim15_ch1.Instance = DMA1_Channel2;
 80044a0:	4b1e      	ldr	r3, [pc, #120]	@ (800451c <HAL_TIM_Base_MspInit+0x168>)
 80044a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004520 <HAL_TIM_Base_MspInit+0x16c>)
 80044a4:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1.Init.Request = DMA_REQUEST_TIM15_CH1;
 80044a6:	4b1d      	ldr	r3, [pc, #116]	@ (800451c <HAL_TIM_Base_MspInit+0x168>)
 80044a8:	224e      	movs	r2, #78	@ 0x4e
 80044aa:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044ac:	4b1b      	ldr	r3, [pc, #108]	@ (800451c <HAL_TIM_Base_MspInit+0x168>)
 80044ae:	2210      	movs	r2, #16
 80044b0:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80044b2:	4b1a      	ldr	r3, [pc, #104]	@ (800451c <HAL_TIM_Base_MspInit+0x168>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80044b8:	4b18      	ldr	r3, [pc, #96]	@ (800451c <HAL_TIM_Base_MspInit+0x168>)
 80044ba:	2280      	movs	r2, #128	@ 0x80
 80044bc:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80044be:	4b17      	ldr	r3, [pc, #92]	@ (800451c <HAL_TIM_Base_MspInit+0x168>)
 80044c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044c4:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80044c6:	4b15      	ldr	r3, [pc, #84]	@ (800451c <HAL_TIM_Base_MspInit+0x168>)
 80044c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044cc:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1.Init.Mode = DMA_NORMAL;
 80044ce:	4b13      	ldr	r3, [pc, #76]	@ (800451c <HAL_TIM_Base_MspInit+0x168>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80044d4:	4b11      	ldr	r3, [pc, #68]	@ (800451c <HAL_TIM_Base_MspInit+0x168>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1) != HAL_OK)
 80044da:	4810      	ldr	r0, [pc, #64]	@ (800451c <HAL_TIM_Base_MspInit+0x168>)
 80044dc:	f003 fc7a 	bl	8007dd4 <HAL_DMA_Init>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <HAL_TIM_Base_MspInit+0x136>
      Error_Handler();
 80044e6:	f7fe fec9 	bl	800327c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a0b      	ldr	r2, [pc, #44]	@ (800451c <HAL_TIM_Base_MspInit+0x168>)
 80044ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80044f0:	4a0a      	ldr	r2, [pc, #40]	@ (800451c <HAL_TIM_Base_MspInit+0x168>)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80044f6:	bf00      	nop
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40001000 	.word	0x40001000
 8004504:	40021000 	.word	0x40021000
 8004508:	40001400 	.word	0x40001400
 800450c:	40013400 	.word	0x40013400
 8004510:	20000f38 	.word	0x20000f38
 8004514:	40020008 	.word	0x40020008
 8004518:	40014000 	.word	0x40014000
 800451c:	20000f98 	.word	0x20000f98
 8004520:	4002001c 	.word	0x4002001c

08004524 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08a      	sub	sp, #40	@ 0x28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800452c:	f107 0314 	add.w	r3, r7, #20
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	605a      	str	r2, [r3, #4]
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	60da      	str	r2, [r3, #12]
 800453a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a32      	ldr	r2, [pc, #200]	@ (800460c <HAL_TIM_MspPostInit+0xe8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d13b      	bne.n	80045be <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004546:	4b32      	ldr	r3, [pc, #200]	@ (8004610 <HAL_TIM_MspPostInit+0xec>)
 8004548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800454a:	4a31      	ldr	r2, [pc, #196]	@ (8004610 <HAL_TIM_MspPostInit+0xec>)
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004552:	4b2f      	ldr	r3, [pc, #188]	@ (8004610 <HAL_TIM_MspPostInit+0xec>)
 8004554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800455e:	4b2c      	ldr	r3, [pc, #176]	@ (8004610 <HAL_TIM_MspPostInit+0xec>)
 8004560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004562:	4a2b      	ldr	r2, [pc, #172]	@ (8004610 <HAL_TIM_MspPostInit+0xec>)
 8004564:	f043 0302 	orr.w	r3, r3, #2
 8004568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800456a:	4b29      	ldr	r3, [pc, #164]	@ (8004610 <HAL_TIM_MspPostInit+0xec>)
 800456c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA15     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800457a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457c:	2302      	movs	r3, #2
 800457e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004580:	2302      	movs	r3, #2
 8004582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004584:	2303      	movs	r3, #3
 8004586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8004588:	2302      	movs	r3, #2
 800458a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800458c:	f107 0314 	add.w	r3, r7, #20
 8004590:	4619      	mov	r1, r3
 8004592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004596:	f003 fe8f 	bl	80082b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800459a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800459e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a0:	2302      	movs	r3, #2
 80045a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a8:	2303      	movs	r3, #3
 80045aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80045ac:	230a      	movs	r3, #10
 80045ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045b0:	f107 0314 	add.w	r3, r7, #20
 80045b4:	4619      	mov	r1, r3
 80045b6:	4817      	ldr	r0, [pc, #92]	@ (8004614 <HAL_TIM_MspPostInit+0xf0>)
 80045b8:	f003 fe7e 	bl	80082b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80045bc:	e021      	b.n	8004602 <HAL_TIM_MspPostInit+0xde>
  else if(htim->Instance==TIM15)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a15      	ldr	r2, [pc, #84]	@ (8004618 <HAL_TIM_MspPostInit+0xf4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d11c      	bne.n	8004602 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045c8:	4b11      	ldr	r3, [pc, #68]	@ (8004610 <HAL_TIM_MspPostInit+0xec>)
 80045ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045cc:	4a10      	ldr	r2, [pc, #64]	@ (8004610 <HAL_TIM_MspPostInit+0xec>)
 80045ce:	f043 0302 	orr.w	r3, r3, #2
 80045d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004610 <HAL_TIM_MspPostInit+0xec>)
 80045d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	60bb      	str	r3, [r7, #8]
 80045de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80045e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80045e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e6:	2302      	movs	r3, #2
 80045e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045ea:	2301      	movs	r3, #1
 80045ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ee:	2303      	movs	r3, #3
 80045f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80045f2:	2301      	movs	r3, #1
 80045f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045f6:	f107 0314 	add.w	r3, r7, #20
 80045fa:	4619      	mov	r1, r3
 80045fc:	4805      	ldr	r0, [pc, #20]	@ (8004614 <HAL_TIM_MspPostInit+0xf0>)
 80045fe:	f003 fe5b 	bl	80082b8 <HAL_GPIO_Init>
}
 8004602:	bf00      	nop
 8004604:	3728      	adds	r7, #40	@ 0x28
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40013400 	.word	0x40013400
 8004610:	40021000 	.word	0x40021000
 8004614:	48000400 	.word	0x48000400
 8004618:	40014000 	.word	0x40014000

0800461c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004620:	f008 f8c6 	bl	800c7b0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004624:	bf00      	nop
 8004626:	e7fd      	b.n	8004624 <NMI_Handler+0x8>

08004628 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800462c:	bf00      	nop
 800462e:	e7fd      	b.n	800462c <HardFault_Handler+0x4>

08004630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004634:	bf00      	nop
 8004636:	e7fd      	b.n	8004634 <MemManage_Handler+0x4>

08004638 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800463c:	bf00      	nop
 800463e:	e7fd      	b.n	800463c <BusFault_Handler+0x4>

08004640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004644:	bf00      	nop
 8004646:	e7fd      	b.n	8004644 <UsageFault_Handler+0x4>

08004648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800464c:	bf00      	nop
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004656:	b480      	push	{r7}
 8004658:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800465a:	bf00      	nop
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004668:	bf00      	nop
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004676:	f000 faeb 	bl	8004c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800467a:	bf00      	nop
 800467c:	bd80      	pop	{r7, pc}

0800467e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004682:	2001      	movs	r0, #1
 8004684:	f003 ffb2 	bl	80085ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004688:	bf00      	nop
 800468a:	bd80      	pop	{r7, pc}

0800468c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	CH_selected=0;
 8004690:	4b03      	ldr	r3, [pc, #12]	@ (80046a0 <EXTI1_IRQHandler+0x14>)
 8004692:	2200      	movs	r2, #0
 8004694:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004696:	2002      	movs	r0, #2
 8004698:	f003 ffa8 	bl	80085ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800469c:	bf00      	nop
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	20011028 	.word	0x20011028

080046a4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80046a8:	2004      	movs	r0, #4
 80046aa:	f003 ff9f 	bl	80085ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80046ae:	bf00      	nop
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80046b6:	2008      	movs	r0, #8
 80046b8:	f003 ff98 	bl	80085ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80046bc:	bf00      	nop
 80046be:	bd80      	pop	{r7, pc}

080046c0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80046c4:	2010      	movs	r0, #16
 80046c6:	f003 ff91 	bl	80085ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80046ca:	bf00      	nop
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 80046d4:	4802      	ldr	r0, [pc, #8]	@ (80046e0 <DMA1_Channel1_IRQHandler+0x10>)
 80046d6:	f003 fca0 	bl	800801a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80046da:	bf00      	nop
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20000f38 	.word	0x20000f38

080046e4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1);
 80046e8:	4802      	ldr	r0, [pc, #8]	@ (80046f4 <DMA1_Channel2_IRQHandler+0x10>)
 80046ea:	f003 fc96 	bl	800801a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80046ee:	bf00      	nop
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000f98 	.word	0x20000f98

080046f8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80046fc:	4802      	ldr	r0, [pc, #8]	@ (8004708 <DMA1_Channel3_IRQHandler+0x10>)
 80046fe:	f003 fc8c 	bl	800801a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004702:	bf00      	nop
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20000c78 	.word	0x20000c78

0800470c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8004710:	4802      	ldr	r0, [pc, #8]	@ (800471c <DMA1_Channel4_IRQHandler+0x10>)
 8004712:	f003 fc82 	bl	800801a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004716:	bf00      	nop
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	200007fc 	.word	0x200007fc

08004720 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004724:	4802      	ldr	r0, [pc, #8]	@ (8004730 <DMA1_Channel5_IRQHandler+0x10>)
 8004726:	f003 fc78 	bl	800801a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800472a:	bf00      	nop
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	2000073c 	.word	0x2000073c

08004734 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004738:	4802      	ldr	r0, [pc, #8]	@ (8004744 <DMA1_Channel6_IRQHandler+0x10>)
 800473a:	f003 fc6e 	bl	800801a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800473e:	bf00      	nop
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	2000079c 	.word	0x2000079c

08004748 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800474c:	4802      	ldr	r0, [pc, #8]	@ (8004758 <USB_LP_IRQHandler+0x10>)
 800474e:	f005 fe71 	bl	800a434 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004752:	bf00      	nop
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20012c00 	.word	0x20012c00

0800475c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	DEBUG_COUNT++;
 8004760:	4b08      	ldr	r3, [pc, #32]	@ (8004784 <EXTI9_5_IRQHandler+0x28>)
 8004762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004766:	1c50      	adds	r0, r2, #1
 8004768:	f143 0100 	adc.w	r1, r3, #0
 800476c:	4b05      	ldr	r3, [pc, #20]	@ (8004784 <EXTI9_5_IRQHandler+0x28>)
 800476e:	e9c3 0100 	strd	r0, r1, [r3]
	CH_selected=1;
 8004772:	4b05      	ldr	r3, [pc, #20]	@ (8004788 <EXTI9_5_IRQHandler+0x2c>)
 8004774:	2201      	movs	r2, #1
 8004776:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004778:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800477c:	f003 ff36 	bl	80085ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004780:	bf00      	nop
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20011010 	.word	0x20011010
 8004788:	20011028 	.word	0x20011028

0800478c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	  FT6336_GetTouchPoint(&TouchPoints);
 8004790:	4809      	ldr	r0, [pc, #36]	@ (80047b8 <EXTI15_10_IRQHandler+0x2c>)
 8004792:	f7fc ffe9 	bl	8001768 <FT6336_GetTouchPoint>
	  input.Touched=1;
 8004796:	4b09      	ldr	r3, [pc, #36]	@ (80047bc <EXTI15_10_IRQHandler+0x30>)
 8004798:	2201      	movs	r2, #1
 800479a:	729a      	strb	r2, [r3, #10]
//	  ST7789_DrawPixel(TouchPoints.point1_x, TouchPoints.point1_y, 0xffffff);
	  input.touch_x=TouchPoints.point1_x;
 800479c:	4b06      	ldr	r3, [pc, #24]	@ (80047b8 <EXTI15_10_IRQHandler+0x2c>)
 800479e:	881a      	ldrh	r2, [r3, #0]
 80047a0:	4b06      	ldr	r3, [pc, #24]	@ (80047bc <EXTI15_10_IRQHandler+0x30>)
 80047a2:	819a      	strh	r2, [r3, #12]
	  input.touch_y=TouchPoints.point1_y;
 80047a4:	4b04      	ldr	r3, [pc, #16]	@ (80047b8 <EXTI15_10_IRQHandler+0x2c>)
 80047a6:	885a      	ldrh	r2, [r3, #2]
 80047a8:	4b04      	ldr	r3, [pc, #16]	@ (80047bc <EXTI15_10_IRQHandler+0x30>)
 80047aa:	81da      	strh	r2, [r3, #14]



  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80047ac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80047b0:	f003 ff1c 	bl	80085ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80047b4:	bf00      	nop
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	200005f0 	.word	0x200005f0
 80047bc:	20011018 	.word	0x20011018

080047c0 <ADC5_IRQHandler>:

/**
  * @brief This function handles ADC5 global interrupt.
  */
void ADC5_IRQHandler(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC5_IRQn 0 */

	uint32_t value = BUFFER_SYS_ADC[0];
 80047c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004840 <ADC5_IRQHandler+0x80>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	607b      	str	r3, [r7, #4]

    if (value >= 0 && value < 1500) {
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f240 52db 	movw	r2, #1499	@ 0x5db
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d803      	bhi.n	80047de <ADC5_IRQHandler+0x1e>
    	input.KEY_ENC0=1;
 80047d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004844 <ADC5_IRQHandler+0x84>)
 80047d8:	2201      	movs	r2, #1
 80047da:	719a      	strb	r2, [r3, #6]
 80047dc:	e028      	b.n	8004830 <ADC5_IRQHandler+0x70>
    } else if (value >= 1500 && value < 2250) {
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f240 52db 	movw	r2, #1499	@ 0x5db
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d908      	bls.n	80047fa <ADC5_IRQHandler+0x3a>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f640 02c9 	movw	r2, #2249	@ 0x8c9
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d803      	bhi.n	80047fa <ADC5_IRQHandler+0x3a>
    	input.KEY_ENC1=1;
 80047f2:	4b14      	ldr	r3, [pc, #80]	@ (8004844 <ADC5_IRQHandler+0x84>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	71da      	strb	r2, [r3, #7]
 80047f8:	e01a      	b.n	8004830 <ADC5_IRQHandler+0x70>
    } else if (value >= 2250 && value < 2750) {
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f640 02c9 	movw	r2, #2249	@ 0x8c9
 8004800:	4293      	cmp	r3, r2
 8004802:	d908      	bls.n	8004816 <ADC5_IRQHandler+0x56>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f640 22bd 	movw	r2, #2749	@ 0xabd
 800480a:	4293      	cmp	r3, r2
 800480c:	d803      	bhi.n	8004816 <ADC5_IRQHandler+0x56>
    	input.KEY_ENC2=1;
 800480e:	4b0d      	ldr	r3, [pc, #52]	@ (8004844 <ADC5_IRQHandler+0x84>)
 8004810:	2201      	movs	r2, #1
 8004812:	721a      	strb	r2, [r3, #8]
 8004814:	e00c      	b.n	8004830 <ADC5_IRQHandler+0x70>

//    	CH_selected=1;

    } else if (value >= 2750 && value <= 3500) {
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f640 22bd 	movw	r2, #2749	@ 0xabd
 800481c:	4293      	cmp	r3, r2
 800481e:	d907      	bls.n	8004830 <ADC5_IRQHandler+0x70>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8004826:	4293      	cmp	r3, r2
 8004828:	d802      	bhi.n	8004830 <ADC5_IRQHandler+0x70>
    	input.KEY_ENC3=1;
 800482a:	4b06      	ldr	r3, [pc, #24]	@ (8004844 <ADC5_IRQHandler+0x84>)
 800482c:	2201      	movs	r2, #1
 800482e:	725a      	strb	r2, [r3, #9]

    }


  /* USER CODE END ADC5_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc5);
 8004830:	4805      	ldr	r0, [pc, #20]	@ (8004848 <ADC5_IRQHandler+0x88>)
 8004832:	f001 f819 	bl	8005868 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC5_IRQn 1 */

  /* USER CODE END ADC5_IRQn 1 */
}
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20000ff8 	.word	0x20000ff8
 8004844:	20011018 	.word	0x20011018
 8004848:	200006d0 	.word	0x200006d0

0800484c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  return 1;
 8004850:	2301      	movs	r3, #1
}
 8004852:	4618      	mov	r0, r3
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <_kill>:

int _kill(int pid, int sig)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004866:	f010 fdaf 	bl	80153c8 <__errno>
 800486a:	4603      	mov	r3, r0
 800486c:	2216      	movs	r2, #22
 800486e:	601a      	str	r2, [r3, #0]
  return -1;
 8004870:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004874:	4618      	mov	r0, r3
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <_exit>:

void _exit (int status)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004884:	f04f 31ff 	mov.w	r1, #4294967295
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff ffe7 	bl	800485c <_kill>
  while (1) {}    /* Make sure we hang here */
 800488e:	bf00      	nop
 8004890:	e7fd      	b.n	800488e <_exit+0x12>

08004892 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b086      	sub	sp, #24
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800489e:	2300      	movs	r3, #0
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	e00a      	b.n	80048ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80048a4:	f3af 8000 	nop.w
 80048a8:	4601      	mov	r1, r0
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	60ba      	str	r2, [r7, #8]
 80048b0:	b2ca      	uxtb	r2, r1
 80048b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	3301      	adds	r3, #1
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	429a      	cmp	r2, r3
 80048c0:	dbf0      	blt.n	80048a4 <_read+0x12>
  }

  return len;
 80048c2:	687b      	ldr	r3, [r7, #4]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	e009      	b.n	80048f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	60ba      	str	r2, [r7, #8]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fc fbda 	bl	80010a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	3301      	adds	r3, #1
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	dbf1      	blt.n	80048de <_write+0x12>
  }
  return len;
 80048fa:	687b      	ldr	r3, [r7, #4]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <_close>:

int _close(int file)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800490c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004910:	4618      	mov	r0, r3
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800492c:	605a      	str	r2, [r3, #4]
  return 0;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <_isatty>:

int _isatty(int file)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004944:	2301      	movs	r3, #1
}
 8004946:	4618      	mov	r0, r3
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004952:	b480      	push	{r7}
 8004954:	b085      	sub	sp, #20
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004974:	4a14      	ldr	r2, [pc, #80]	@ (80049c8 <_sbrk+0x5c>)
 8004976:	4b15      	ldr	r3, [pc, #84]	@ (80049cc <_sbrk+0x60>)
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004980:	4b13      	ldr	r3, [pc, #76]	@ (80049d0 <_sbrk+0x64>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d102      	bne.n	800498e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004988:	4b11      	ldr	r3, [pc, #68]	@ (80049d0 <_sbrk+0x64>)
 800498a:	4a12      	ldr	r2, [pc, #72]	@ (80049d4 <_sbrk+0x68>)
 800498c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800498e:	4b10      	ldr	r3, [pc, #64]	@ (80049d0 <_sbrk+0x64>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4413      	add	r3, r2
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	429a      	cmp	r2, r3
 800499a:	d207      	bcs.n	80049ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800499c:	f010 fd14 	bl	80153c8 <__errno>
 80049a0:	4603      	mov	r3, r0
 80049a2:	220c      	movs	r2, #12
 80049a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049a6:	f04f 33ff 	mov.w	r3, #4294967295
 80049aa:	e009      	b.n	80049c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049ac:	4b08      	ldr	r3, [pc, #32]	@ (80049d0 <_sbrk+0x64>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80049b2:	4b07      	ldr	r3, [pc, #28]	@ (80049d0 <_sbrk+0x64>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4413      	add	r3, r2
 80049ba:	4a05      	ldr	r2, [pc, #20]	@ (80049d0 <_sbrk+0x64>)
 80049bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80049be:	68fb      	ldr	r3, [r7, #12]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20020000 	.word	0x20020000
 80049cc:	00000400 	.word	0x00000400
 80049d0:	20011d14 	.word	0x20011d14
 80049d4:	20013248 	.word	0x20013248

080049d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80049dc:	4b06      	ldr	r3, [pc, #24]	@ (80049f8 <SystemInit+0x20>)
 80049de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e2:	4a05      	ldr	r2, [pc, #20]	@ (80049f8 <SystemInit+0x20>)
 80049e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049ec:	bf00      	nop
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	e000ed00 	.word	0xe000ed00

080049fc <WS2812_Write_Data>:
 * @param  Color:颜色24bit of RGB888
 * @param  index:灯的标号
 * @return None
 */
void WS2812_Write_Data(uint32_t Color, uint8_t index)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < 24; i++)
 8004a08:	2300      	movs	r3, #0
 8004a0a:	73fb      	strb	r3, [r7, #15]
 8004a0c:	e018      	b.n	8004a40 <WS2812_Write_Data+0x44>
		WS2812_Buf[24 * index + i] = (((Color << i) & 0X800000) ? High_Code : Low_Code);
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <WS2812_Write_Data+0x26>
 8004a1e:	215a      	movs	r1, #90	@ 0x5a
 8004a20:	e000      	b.n	8004a24 <WS2812_Write_Data+0x28>
 8004a22:	212d      	movs	r1, #45	@ 0x2d
 8004a24:	78fa      	ldrb	r2, [r7, #3]
 8004a26:	4613      	mov	r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	4413      	add	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	4413      	add	r3, r2
 8004a34:	4a07      	ldr	r2, [pc, #28]	@ (8004a54 <WS2812_Write_Data+0x58>)
 8004a36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 24; i++)
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	73fb      	strb	r3, [r7, #15]
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	2b17      	cmp	r3, #23
 8004a44:	d9e3      	bls.n	8004a0e <WS2812_Write_Data+0x12>
}
 8004a46:	bf00      	nop
 8004a48:	bf00      	nop
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	20011d18 	.word	0x20011d18

08004a58 <WS2812_Update>:
 * @brief  WS2812更新指令
 * @param  None
 * @return None
 */
void WS2812_Update(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&WS2812_TIM,WS2812_CHANNEL,(uint32_t *)WS2812_Buf,WS2812_BUF_SIZE);
 8004a5c:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004a60:	4a03      	ldr	r2, [pc, #12]	@ (8004a70 <WS2812_Update+0x18>)
 8004a62:	2108      	movs	r1, #8
 8004a64:	4803      	ldr	r0, [pc, #12]	@ (8004a74 <WS2812_Update+0x1c>)
 8004a66:	f009 f8a3 	bl	800dbb0 <HAL_TIM_PWM_Start_DMA>
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20011d18 	.word	0x20011d18
 8004a74:	20000e54 	.word	0x20000e54

08004a78 <RGBColorToUint32>:

// 将位域结构体转换为 uint32_t 类型
uint32_t RGBColorToUint32(RGBColor color) {
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
    return (color.red << 16) | (color.green << 8) | color.blue;
 8004a80:	793b      	ldrb	r3, [r7, #4]
 8004a82:	041a      	lsls	r2, r3, #16
 8004a84:	797b      	ldrb	r3, [r7, #5]
 8004a86:	021b      	lsls	r3, r3, #8
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	79ba      	ldrb	r2, [r7, #6]
 8004a8c:	4313      	orrs	r3, r2
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
	...

08004a9c <WS2812_Write_Colors>:
 * @brief Write a series of RGB colors to WS2812 with brightness adjustment.
 * @param colors Pointer to the original RGBColor array.
 * @param count Number of elements in the array.
 * @return None
 */
void WS2812_Write_Colors(RGBColor *colors, uint8_t count) {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < count; i++) {
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	75fb      	strb	r3, [r7, #23]
 8004aac:	e046      	b.n	8004b3c <WS2812_Write_Colors+0xa0>
        uint32_t color_value = RGBColorToUint32(colors[i]);
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	f7ff ffde 	bl	8004a78 <RGBColorToUint32>
 8004abc:	6138      	str	r0, [r7, #16]
        // 分离出 RGB 各通道
        uint8_t red = (color_value >> 16) & 0xFF;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	0c1b      	lsrs	r3, r3, #16
 8004ac2:	73fb      	strb	r3, [r7, #15]
        uint8_t green = (color_value >> 8) & 0xFF;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	0a1b      	lsrs	r3, r3, #8
 8004ac8:	73bb      	strb	r3, [r7, #14]
        uint8_t blue = color_value & 0xFF;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	737b      	strb	r3, [r7, #13]

        // 调整各通道亮度
        red = (uint16_t)red * WS2812_Brightness / 255;
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	4a1f      	ldr	r2, [pc, #124]	@ (8004b50 <WS2812_Write_Colors+0xb4>)
 8004ad2:	7812      	ldrb	r2, [r2, #0]
 8004ad4:	fb02 f303 	mul.w	r3, r2, r3
 8004ad8:	4a1e      	ldr	r2, [pc, #120]	@ (8004b54 <WS2812_Write_Colors+0xb8>)
 8004ada:	fb82 1203 	smull	r1, r2, r2, r3
 8004ade:	441a      	add	r2, r3
 8004ae0:	11d2      	asrs	r2, r2, #7
 8004ae2:	17db      	asrs	r3, r3, #31
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	73fb      	strb	r3, [r7, #15]
        green = (uint16_t)green * WS2812_Brightness / 255;
 8004ae8:	7bbb      	ldrb	r3, [r7, #14]
 8004aea:	4a19      	ldr	r2, [pc, #100]	@ (8004b50 <WS2812_Write_Colors+0xb4>)
 8004aec:	7812      	ldrb	r2, [r2, #0]
 8004aee:	fb02 f303 	mul.w	r3, r2, r3
 8004af2:	4a18      	ldr	r2, [pc, #96]	@ (8004b54 <WS2812_Write_Colors+0xb8>)
 8004af4:	fb82 1203 	smull	r1, r2, r2, r3
 8004af8:	441a      	add	r2, r3
 8004afa:	11d2      	asrs	r2, r2, #7
 8004afc:	17db      	asrs	r3, r3, #31
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	73bb      	strb	r3, [r7, #14]
        blue = (uint16_t)blue * WS2812_Brightness / 255;
 8004b02:	7b7b      	ldrb	r3, [r7, #13]
 8004b04:	4a12      	ldr	r2, [pc, #72]	@ (8004b50 <WS2812_Write_Colors+0xb4>)
 8004b06:	7812      	ldrb	r2, [r2, #0]
 8004b08:	fb02 f303 	mul.w	r3, r2, r3
 8004b0c:	4a11      	ldr	r2, [pc, #68]	@ (8004b54 <WS2812_Write_Colors+0xb8>)
 8004b0e:	fb82 1203 	smull	r1, r2, r2, r3
 8004b12:	441a      	add	r2, r3
 8004b14:	11d2      	asrs	r2, r2, #7
 8004b16:	17db      	asrs	r3, r3, #31
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	737b      	strb	r3, [r7, #13]

        // 重新组合成 uint32_t 类型
        color_value = ((uint32_t)red << 16) | ((uint32_t)green << 8) | blue;
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	041a      	lsls	r2, r3, #16
 8004b20:	7bbb      	ldrb	r3, [r7, #14]
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	431a      	orrs	r2, r3
 8004b26:	7b7b      	ldrb	r3, [r7, #13]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]

        WS2812_Write_Data(color_value, i);
 8004b2c:	7dfb      	ldrb	r3, [r7, #23]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	6938      	ldr	r0, [r7, #16]
 8004b32:	f7ff ff63 	bl	80049fc <WS2812_Write_Data>
    for (uint8_t i = 0; i < count; i++) {
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	75fb      	strb	r3, [r7, #23]
 8004b3c:	7dfa      	ldrb	r2, [r7, #23]
 8004b3e:	78fb      	ldrb	r3, [r7, #3]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d3b4      	bcc.n	8004aae <WS2812_Write_Colors+0x12>
    }
    WS2812_Update();
 8004b44:	f7ff ff88 	bl	8004a58 <WS2812_Update>
}
 8004b48:	bf00      	nop
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20000278 	.word	0x20000278
 8004b54:	80808081 	.word	0x80808081

08004b58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004b58:	480d      	ldr	r0, [pc, #52]	@ (8004b90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004b5a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004b5c:	f7ff ff3c 	bl	80049d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b60:	480c      	ldr	r0, [pc, #48]	@ (8004b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8004b62:	490d      	ldr	r1, [pc, #52]	@ (8004b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004b64:	4a0d      	ldr	r2, [pc, #52]	@ (8004b9c <LoopForever+0xe>)
  movs r3, #0
 8004b66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004b68:	e002      	b.n	8004b70 <LoopCopyDataInit>

08004b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b6e:	3304      	adds	r3, #4

08004b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b74:	d3f9      	bcc.n	8004b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b76:	4a0a      	ldr	r2, [pc, #40]	@ (8004ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004b78:	4c0a      	ldr	r4, [pc, #40]	@ (8004ba4 <LoopForever+0x16>)
  movs r3, #0
 8004b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b7c:	e001      	b.n	8004b82 <LoopFillZerobss>

08004b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b80:	3204      	adds	r2, #4

08004b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b84:	d3fb      	bcc.n	8004b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004b86:	f010 fc25 	bl	80153d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004b8a:	f7fd f805 	bl	8001b98 <main>

08004b8e <LoopForever>:

LoopForever:
    b LoopForever
 8004b8e:	e7fe      	b.n	8004b8e <LoopForever>
  ldr   r0, =_estack
 8004b90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b98:	200005c4 	.word	0x200005c4
  ldr r2, =_sidata
 8004b9c:	08027c38 	.word	0x08027c38
  ldr r2, =_sbss
 8004ba0:	200005c8 	.word	0x200005c8
  ldr r4, =_ebss
 8004ba4:	20013248 	.word	0x20013248

08004ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004ba8:	e7fe      	b.n	8004ba8 <ADC1_2_IRQHandler>

08004baa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b082      	sub	sp, #8
 8004bae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bb4:	2003      	movs	r0, #3
 8004bb6:	f002 fd65 	bl	8007684 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004bba:	200f      	movs	r0, #15
 8004bbc:	f000 f80e 	bl	8004bdc <HAL_InitTick>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	71fb      	strb	r3, [r7, #7]
 8004bca:	e001      	b.n	8004bd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004bcc:	f7fe fe2a 	bl	8003824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004bd0:	79fb      	ldrb	r3, [r7, #7]

}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004be8:	4b16      	ldr	r3, [pc, #88]	@ (8004c44 <HAL_InitTick+0x68>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d022      	beq.n	8004c36 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004bf0:	4b15      	ldr	r3, [pc, #84]	@ (8004c48 <HAL_InitTick+0x6c>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	4b13      	ldr	r3, [pc, #76]	@ (8004c44 <HAL_InitTick+0x68>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004bfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	4618      	mov	r0, r3
 8004c06:	f002 fd70 	bl	80076ea <HAL_SYSTICK_Config>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10f      	bne.n	8004c30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b0f      	cmp	r3, #15
 8004c14:	d809      	bhi.n	8004c2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c16:	2200      	movs	r2, #0
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1e:	f002 fd3c 	bl	800769a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004c22:	4a0a      	ldr	r2, [pc, #40]	@ (8004c4c <HAL_InitTick+0x70>)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	e007      	b.n	8004c3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
 8004c2e:	e004      	b.n	8004c3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
 8004c34:	e001      	b.n	8004c3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20000280 	.word	0x20000280
 8004c48:	20000274 	.word	0x20000274
 8004c4c:	2000027c 	.word	0x2000027c

08004c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c54:	4b05      	ldr	r3, [pc, #20]	@ (8004c6c <HAL_IncTick+0x1c>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <HAL_IncTick+0x20>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	4a03      	ldr	r2, [pc, #12]	@ (8004c6c <HAL_IncTick+0x1c>)
 8004c60:	6013      	str	r3, [r2, #0]
}
 8004c62:	bf00      	nop
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	20011f28 	.word	0x20011f28
 8004c70:	20000280 	.word	0x20000280

08004c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  return uwTick;
 8004c78:	4b03      	ldr	r3, [pc, #12]	@ (8004c88 <HAL_GetTick+0x14>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20011f28 	.word	0x20011f28

08004c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c94:	f7ff ffee 	bl	8004c74 <HAL_GetTick>
 8004c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca4:	d004      	beq.n	8004cb0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ca6:	4b09      	ldr	r3, [pc, #36]	@ (8004ccc <HAL_Delay+0x40>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4413      	add	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004cb0:	bf00      	nop
 8004cb2:	f7ff ffdf 	bl	8004c74 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d8f7      	bhi.n	8004cb2 <HAL_Delay+0x26>
  {
  }
}
 8004cc2:	bf00      	nop
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20000280 	.word	0x20000280

08004cd0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8004cd8:	4b06      	ldr	r3, [pc, #24]	@ (8004cf4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f023 0202 	bic.w	r2, r3, #2
 8004ce0:	4904      	ldr	r1, [pc, #16]	@ (8004cf4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	600b      	str	r3, [r1, #0]
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	40010030 	.word	0x40010030

08004cf8 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8004cfc:	4b05      	ldr	r3, [pc, #20]	@ (8004d14 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a04      	ldr	r2, [pc, #16]	@ (8004d14 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8004d02:	f023 0301 	bic.w	r3, r3, #1
 8004d06:	6013      	str	r3, [r2, #0]
}
 8004d08:	bf00      	nop
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40010030 	.word	0x40010030

08004d18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	609a      	str	r2, [r3, #8]
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	609a      	str	r2, [r3, #8]
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3360      	adds	r3, #96	@ 0x60
 8004d92:	461a      	mov	r2, r3
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	4b08      	ldr	r3, [pc, #32]	@ (8004dc4 <LL_ADC_SetOffset+0x44>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004db8:	bf00      	nop
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	03fff000 	.word	0x03fff000

08004dc8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3360      	adds	r3, #96	@ 0x60
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	3360      	adds	r3, #96	@ 0x60
 8004e04:	461a      	mov	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004e1e:	bf00      	nop
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b087      	sub	sp, #28
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	3360      	adds	r3, #96	@ 0x60
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004e54:	bf00      	nop
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3360      	adds	r3, #96	@ 0x60
 8004e70:	461a      	mov	r2, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	431a      	orrs	r2, r3
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	615a      	str	r2, [r3, #20]
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e000      	b.n	8004ed6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b087      	sub	sp, #28
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3330      	adds	r3, #48	@ 0x30
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	0a1b      	lsrs	r3, r3, #8
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	f003 030c 	and.w	r3, r3, #12
 8004efe:	4413      	add	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f003 031f 	and.w	r3, r3, #31
 8004f0c:	211f      	movs	r1, #31
 8004f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f12:	43db      	mvns	r3, r3
 8004f14:	401a      	ands	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	0e9b      	lsrs	r3, r3, #26
 8004f1a:	f003 011f 	and.w	r1, r3, #31
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	fa01 f303 	lsl.w	r3, r1, r3
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004f2e:	bf00      	nop
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f46:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3314      	adds	r3, #20
 8004f70:	461a      	mov	r2, r3
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	0e5b      	lsrs	r3, r3, #25
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	4413      	add	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	0d1b      	lsrs	r3, r3, #20
 8004f88:	f003 031f 	and.w	r3, r3, #31
 8004f8c:	2107      	movs	r1, #7
 8004f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f92:	43db      	mvns	r3, r3
 8004f94:	401a      	ands	r2, r3
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	0d1b      	lsrs	r3, r3, #20
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
	...

08004fb8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	401a      	ands	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f003 0318 	and.w	r3, r3, #24
 8004fda:	4908      	ldr	r1, [pc, #32]	@ (8004ffc <LL_ADC_SetChannelSingleDiff+0x44>)
 8004fdc:	40d9      	lsrs	r1, r3
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	400b      	ands	r3, r1
 8004fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	0007ffff 	.word	0x0007ffff

08005000 <LL_ADC_SetAnalogWDMonitChannels>:
  *             On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet
  *             for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR,
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	330c      	adds	r3, #12
 8005010:	4618      	mov	r0, r3
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	0d1b      	lsrs	r3, r3, #20
 8005016:	f003 0103 	and.w	r1, r3, #3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f003 0201 	and.w	r2, r3, #1
 8005020:	4613      	mov	r3, r2
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4403      	add	r3, r0
 800502e:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK)
                                                * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f023 4302 	bic.w	r3, r3, #2181038080	@ 0x82000000
 800503a:	f423 1360 	bic.w	r3, r3, #3670016	@ 0x380000
 800503e:	43db      	mvns	r3, r3
 8005040:	401a      	ands	r2, r3
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	400b      	ands	r3, r1
 8005048:	431a      	orrs	r2, r3
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 800504e:	bf00      	nop
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 800505a:	b480      	push	{r7}
 800505c:	b087      	sub	sp, #28
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607a      	str	r2, [r7, #4]
 8005066:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	3320      	adds	r3, #32
 800506c:	461a      	mov	r2, r3
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	0d1b      	lsrs	r3, r3, #20
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	f003 030c 	and.w	r3, r3, #12
 8005078:	4413      	add	r3, r2
 800507a:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 22f0 	and.w	r2, r3, #4026593280	@ 0xf000f000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	0419      	lsls	r1, r3, #16
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	430b      	orrs	r3, r1
 800508c:	431a      	orrs	r2, r3
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 031f 	and.w	r3, r3, #31
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80050e6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6093      	str	r3, [r2, #8]
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800510a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800510e:	d101      	bne.n	8005114 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005110:	2301      	movs	r3, #1
 8005112:	e000      	b.n	8005116 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005132:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005136:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800515a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800515e:	d101      	bne.n	8005164 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005182:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005186:	f043 0201 	orr.w	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <LL_ADC_IsEnabled+0x18>
 80051ae:	2301      	movs	r3, #1
 80051b0:	e000      	b.n	80051b4 <LL_ADC_IsEnabled+0x1a>
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80051d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80051d4:	f043 0204 	orr.w	r2, r3, #4
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d101      	bne.n	8005200 <LL_ADC_REG_IsConversionOngoing+0x18>
 80051fc:	2301      	movs	r3, #1
 80051fe:	e000      	b.n	8005202 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b08      	cmp	r3, #8
 8005220:	d101      	bne.n	8005226 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2280      	movs	r2, #128	@ 0x80
 8005240:	601a      	str	r2, [r3, #0]
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800525c:	601a      	str	r2, [r3, #0]
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005278:	601a      	str	r2, [r3, #0]
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	605a      	str	r2, [r3, #4]
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	605a      	str	r2, [r3, #4]
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	605a      	str	r2, [r3, #4]
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	605a      	str	r2, [r3, #4]
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	605a      	str	r2, [r3, #4]
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	605a      	str	r2, [r3, #4]
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005348:	b590      	push	{r4, r7, lr}
 800534a:	b089      	sub	sp, #36	@ 0x24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e1a9      	b.n	80056b6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d109      	bne.n	8005384 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7fe fa7f 	bl	8003874 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff feb6 	bl	80050fa <LL_ADC_IsDeepPowerDownEnabled>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d004      	beq.n	800539e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff fe9c 	bl	80050d6 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff fed1 	bl	800514a <LL_ADC_IsInternalRegulatorEnabled>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d115      	bne.n	80053da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff feb5 	bl	8005122 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053b8:	4b9c      	ldr	r3, [pc, #624]	@ (800562c <HAL_ADC_Init+0x2e4>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	099b      	lsrs	r3, r3, #6
 80053be:	4a9c      	ldr	r2, [pc, #624]	@ (8005630 <HAL_ADC_Init+0x2e8>)
 80053c0:	fba2 2303 	umull	r2, r3, r2, r3
 80053c4:	099b      	lsrs	r3, r3, #6
 80053c6:	3301      	adds	r3, #1
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80053cc:	e002      	b.n	80053d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3b01      	subs	r3, #1
 80053d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f9      	bne.n	80053ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f7ff feb3 	bl	800514a <LL_ADC_IsInternalRegulatorEnabled>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10d      	bne.n	8005406 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ee:	f043 0210 	orr.w	r2, r3, #16
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053fa:	f043 0201 	orr.w	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff feec 	bl	80051e8 <LL_ADC_REG_IsConversionOngoing>
 8005410:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005416:	f003 0310 	and.w	r3, r3, #16
 800541a:	2b00      	cmp	r3, #0
 800541c:	f040 8142 	bne.w	80056a4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2b00      	cmp	r3, #0
 8005424:	f040 813e 	bne.w	80056a4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800542c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005430:	f043 0202 	orr.w	r2, r3, #2
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff feac 	bl	800519a <LL_ADC_IsEnabled>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d141      	bne.n	80054cc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005450:	d004      	beq.n	800545c <HAL_ADC_Init+0x114>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a77      	ldr	r2, [pc, #476]	@ (8005634 <HAL_ADC_Init+0x2ec>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d10f      	bne.n	800547c <HAL_ADC_Init+0x134>
 800545c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005460:	f7ff fe9b 	bl	800519a <LL_ADC_IsEnabled>
 8005464:	4604      	mov	r4, r0
 8005466:	4873      	ldr	r0, [pc, #460]	@ (8005634 <HAL_ADC_Init+0x2ec>)
 8005468:	f7ff fe97 	bl	800519a <LL_ADC_IsEnabled>
 800546c:	4603      	mov	r3, r0
 800546e:	4323      	orrs	r3, r4
 8005470:	2b00      	cmp	r3, #0
 8005472:	bf0c      	ite	eq
 8005474:	2301      	moveq	r3, #1
 8005476:	2300      	movne	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	e012      	b.n	80054a2 <HAL_ADC_Init+0x15a>
 800547c:	486e      	ldr	r0, [pc, #440]	@ (8005638 <HAL_ADC_Init+0x2f0>)
 800547e:	f7ff fe8c 	bl	800519a <LL_ADC_IsEnabled>
 8005482:	4604      	mov	r4, r0
 8005484:	486d      	ldr	r0, [pc, #436]	@ (800563c <HAL_ADC_Init+0x2f4>)
 8005486:	f7ff fe88 	bl	800519a <LL_ADC_IsEnabled>
 800548a:	4603      	mov	r3, r0
 800548c:	431c      	orrs	r4, r3
 800548e:	486c      	ldr	r0, [pc, #432]	@ (8005640 <HAL_ADC_Init+0x2f8>)
 8005490:	f7ff fe83 	bl	800519a <LL_ADC_IsEnabled>
 8005494:	4603      	mov	r3, r0
 8005496:	4323      	orrs	r3, r4
 8005498:	2b00      	cmp	r3, #0
 800549a:	bf0c      	ite	eq
 800549c:	2301      	moveq	r3, #1
 800549e:	2300      	movne	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d012      	beq.n	80054cc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054ae:	d004      	beq.n	80054ba <HAL_ADC_Init+0x172>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a5f      	ldr	r2, [pc, #380]	@ (8005634 <HAL_ADC_Init+0x2ec>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d101      	bne.n	80054be <HAL_ADC_Init+0x176>
 80054ba:	4a62      	ldr	r2, [pc, #392]	@ (8005644 <HAL_ADC_Init+0x2fc>)
 80054bc:	e000      	b.n	80054c0 <HAL_ADC_Init+0x178>
 80054be:	4a62      	ldr	r2, [pc, #392]	@ (8005648 <HAL_ADC_Init+0x300>)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	4619      	mov	r1, r3
 80054c6:	4610      	mov	r0, r2
 80054c8:	f7ff fc26 	bl	8004d18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	7f5b      	ldrb	r3, [r3, #29]
 80054d0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054d6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80054dc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80054e2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80054ea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054ec:	4313      	orrs	r3, r2
 80054ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d106      	bne.n	8005508 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fe:	3b01      	subs	r3, #1
 8005500:	045b      	lsls	r3, r3, #17
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	4313      	orrs	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550c:	2b00      	cmp	r3, #0
 800550e:	d009      	beq.n	8005524 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005514:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	4313      	orrs	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	4b48      	ldr	r3, [pc, #288]	@ (800564c <HAL_ADC_Init+0x304>)
 800552c:	4013      	ands	r3, r2
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6812      	ldr	r2, [r2, #0]
 8005532:	69b9      	ldr	r1, [r7, #24]
 8005534:	430b      	orrs	r3, r1
 8005536:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff fe5b 	bl	800520e <LL_ADC_INJ_IsConversionOngoing>
 8005558:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d17f      	bne.n	8005660 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d17c      	bne.n	8005660 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800556a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005572:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005574:	4313      	orrs	r3, r2
 8005576:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005582:	f023 0302 	bic.w	r3, r3, #2
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	6812      	ldr	r2, [r2, #0]
 800558a:	69b9      	ldr	r1, [r7, #24]
 800558c:	430b      	orrs	r3, r1
 800558e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d017      	beq.n	80055c8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691a      	ldr	r2, [r3, #16]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80055a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80055b0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80055b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6911      	ldr	r1, [r2, #16]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6812      	ldr	r2, [r2, #0]
 80055c0:	430b      	orrs	r3, r1
 80055c2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80055c6:	e013      	b.n	80055f0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80055d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80055e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80055ec:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d12a      	bne.n	8005650 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005604:	f023 0304 	bic.w	r3, r3, #4
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005610:	4311      	orrs	r1, r2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005616:	4311      	orrs	r1, r2
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800561c:	430a      	orrs	r2, r1
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0201 	orr.w	r2, r2, #1
 8005628:	611a      	str	r2, [r3, #16]
 800562a:	e019      	b.n	8005660 <HAL_ADC_Init+0x318>
 800562c:	20000274 	.word	0x20000274
 8005630:	053e2d63 	.word	0x053e2d63
 8005634:	50000100 	.word	0x50000100
 8005638:	50000400 	.word	0x50000400
 800563c:	50000500 	.word	0x50000500
 8005640:	50000600 	.word	0x50000600
 8005644:	50000300 	.word	0x50000300
 8005648:	50000700 	.word	0x50000700
 800564c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691a      	ldr	r2, [r3, #16]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0201 	bic.w	r2, r2, #1
 800565e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d10c      	bne.n	8005682 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566e:	f023 010f 	bic.w	r1, r3, #15
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	1e5a      	subs	r2, r3, #1
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005680:	e007      	b.n	8005692 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 020f 	bic.w	r2, r2, #15
 8005690:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005696:	f023 0303 	bic.w	r3, r3, #3
 800569a:	f043 0201 	orr.w	r2, r3, #1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80056a2:	e007      	b.n	80056b4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a8:	f043 0210 	orr.w	r2, r3, #16
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80056b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3724      	adds	r7, #36	@ 0x24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd90      	pop	{r4, r7, pc}
 80056be:	bf00      	nop

080056c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056d4:	d004      	beq.n	80056e0 <HAL_ADC_Start_DMA+0x20>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a5a      	ldr	r2, [pc, #360]	@ (8005844 <HAL_ADC_Start_DMA+0x184>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d101      	bne.n	80056e4 <HAL_ADC_Start_DMA+0x24>
 80056e0:	4b59      	ldr	r3, [pc, #356]	@ (8005848 <HAL_ADC_Start_DMA+0x188>)
 80056e2:	e000      	b.n	80056e6 <HAL_ADC_Start_DMA+0x26>
 80056e4:	4b59      	ldr	r3, [pc, #356]	@ (800584c <HAL_ADC_Start_DMA+0x18c>)
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff fcd9 	bl	800509e <LL_ADC_GetMultimode>
 80056ec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff fd78 	bl	80051e8 <LL_ADC_REG_IsConversionOngoing>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f040 809b 	bne.w	8005836 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_ADC_Start_DMA+0x4e>
 800570a:	2302      	movs	r3, #2
 800570c:	e096      	b.n	800583c <HAL_ADC_Start_DMA+0x17c>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a4d      	ldr	r2, [pc, #308]	@ (8005850 <HAL_ADC_Start_DMA+0x190>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d008      	beq.n	8005732 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b05      	cmp	r3, #5
 800572a:	d002      	beq.n	8005732 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b09      	cmp	r3, #9
 8005730:	d17a      	bne.n	8005828 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f001 f962 	bl	80069fc <ADC_Enable>
 8005738:	4603      	mov	r3, r0
 800573a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800573c:	7dfb      	ldrb	r3, [r7, #23]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d16d      	bne.n	800581e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005746:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800574a:	f023 0301 	bic.w	r3, r3, #1
 800574e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a3a      	ldr	r2, [pc, #232]	@ (8005844 <HAL_ADC_Start_DMA+0x184>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d009      	beq.n	8005774 <HAL_ADC_Start_DMA+0xb4>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a3b      	ldr	r2, [pc, #236]	@ (8005854 <HAL_ADC_Start_DMA+0x194>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d002      	beq.n	8005770 <HAL_ADC_Start_DMA+0xb0>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	e003      	b.n	8005778 <HAL_ADC_Start_DMA+0xb8>
 8005770:	4b39      	ldr	r3, [pc, #228]	@ (8005858 <HAL_ADC_Start_DMA+0x198>)
 8005772:	e001      	b.n	8005778 <HAL_ADC_Start_DMA+0xb8>
 8005774:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	6812      	ldr	r2, [r2, #0]
 800577c:	4293      	cmp	r3, r2
 800577e:	d002      	beq.n	8005786 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d105      	bne.n	8005792 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800578a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005796:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d006      	beq.n	80057ac <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057a2:	f023 0206 	bic.w	r2, r3, #6
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	661a      	str	r2, [r3, #96]	@ 0x60
 80057aa:	e002      	b.n	80057b2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b6:	4a29      	ldr	r2, [pc, #164]	@ (800585c <HAL_ADC_Start_DMA+0x19c>)
 80057b8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057be:	4a28      	ldr	r2, [pc, #160]	@ (8005860 <HAL_ADC_Start_DMA+0x1a0>)
 80057c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c6:	4a27      	ldr	r2, [pc, #156]	@ (8005864 <HAL_ADC_Start_DMA+0x1a4>)
 80057c8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	221c      	movs	r2, #28
 80057d0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f042 0210 	orr.w	r2, r2, #16
 80057e8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0201 	orr.w	r2, r2, #1
 80057f8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3340      	adds	r3, #64	@ 0x40
 8005804:	4619      	mov	r1, r3
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f002 fb8b 	bl	8007f24 <HAL_DMA_Start_IT>
 800580e:	4603      	mov	r3, r0
 8005810:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff fcd2 	bl	80051c0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800581c:	e00d      	b.n	800583a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005826:	e008      	b.n	800583a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005834:	e001      	b.n	800583a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005836:	2302      	movs	r3, #2
 8005838:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800583a:	7dfb      	ldrb	r3, [r7, #23]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	50000100 	.word	0x50000100
 8005848:	50000300 	.word	0x50000300
 800584c:	50000700 	.word	0x50000700
 8005850:	50000600 	.word	0x50000600
 8005854:	50000500 	.word	0x50000500
 8005858:	50000400 	.word	0x50000400
 800585c:	08006b29 	.word	0x08006b29
 8005860:	08006c01 	.word	0x08006c01
 8005864:	08006c1d 	.word	0x08006c1d

08005868 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08a      	sub	sp, #40	@ 0x28
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005870:	2300      	movs	r3, #0
 8005872:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800588c:	d004      	beq.n	8005898 <HAL_ADC_IRQHandler+0x30>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a8e      	ldr	r2, [pc, #568]	@ (8005acc <HAL_ADC_IRQHandler+0x264>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d101      	bne.n	800589c <HAL_ADC_IRQHandler+0x34>
 8005898:	4b8d      	ldr	r3, [pc, #564]	@ (8005ad0 <HAL_ADC_IRQHandler+0x268>)
 800589a:	e000      	b.n	800589e <HAL_ADC_IRQHandler+0x36>
 800589c:	4b8d      	ldr	r3, [pc, #564]	@ (8005ad4 <HAL_ADC_IRQHandler+0x26c>)
 800589e:	4618      	mov	r0, r3
 80058a0:	f7ff fbfd 	bl	800509e <LL_ADC_GetMultimode>
 80058a4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d017      	beq.n	80058e0 <HAL_ADC_IRQHandler+0x78>
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d012      	beq.n	80058e0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058be:	f003 0310 	and.w	r3, r3, #16
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d105      	bne.n	80058d2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ca:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f001 fa0a 	bl	8006cec <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2202      	movs	r2, #2
 80058de:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d004      	beq.n	80058f4 <HAL_ADC_IRQHandler+0x8c>
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10b      	bne.n	800590c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 8094 	beq.w	8005a28 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 808e 	beq.w	8005a28 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005910:	f003 0310 	and.w	r3, r3, #16
 8005914:	2b00      	cmp	r3, #0
 8005916:	d105      	bne.n	8005924 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800591c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff fac7 	bl	8004ebc <LL_ADC_REG_IsTriggerSourceSWStart>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d072      	beq.n	8005a1a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a64      	ldr	r2, [pc, #400]	@ (8005acc <HAL_ADC_IRQHandler+0x264>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d009      	beq.n	8005952 <HAL_ADC_IRQHandler+0xea>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a65      	ldr	r2, [pc, #404]	@ (8005ad8 <HAL_ADC_IRQHandler+0x270>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d002      	beq.n	800594e <HAL_ADC_IRQHandler+0xe6>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	e003      	b.n	8005956 <HAL_ADC_IRQHandler+0xee>
 800594e:	4b63      	ldr	r3, [pc, #396]	@ (8005adc <HAL_ADC_IRQHandler+0x274>)
 8005950:	e001      	b.n	8005956 <HAL_ADC_IRQHandler+0xee>
 8005952:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	4293      	cmp	r3, r2
 800595c:	d008      	beq.n	8005970 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b05      	cmp	r3, #5
 8005968:	d002      	beq.n	8005970 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2b09      	cmp	r3, #9
 800596e:	d104      	bne.n	800597a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	623b      	str	r3, [r7, #32]
 8005978:	e014      	b.n	80059a4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a53      	ldr	r2, [pc, #332]	@ (8005acc <HAL_ADC_IRQHandler+0x264>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d009      	beq.n	8005998 <HAL_ADC_IRQHandler+0x130>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a53      	ldr	r2, [pc, #332]	@ (8005ad8 <HAL_ADC_IRQHandler+0x270>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d002      	beq.n	8005994 <HAL_ADC_IRQHandler+0x12c>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	e003      	b.n	800599c <HAL_ADC_IRQHandler+0x134>
 8005994:	4b51      	ldr	r3, [pc, #324]	@ (8005adc <HAL_ADC_IRQHandler+0x274>)
 8005996:	e001      	b.n	800599c <HAL_ADC_IRQHandler+0x134>
 8005998:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800599c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d135      	bne.n	8005a1a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d12e      	bne.n	8005a1a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff fc11 	bl	80051e8 <LL_ADC_REG_IsConversionOngoing>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d11a      	bne.n	8005a02 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 020c 	bic.w	r2, r2, #12
 80059da:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d112      	bne.n	8005a1a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059f8:	f043 0201 	orr.w	r2, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a00:	e00b      	b.n	8005a1a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a06:	f043 0210 	orr.w	r2, r3, #16
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a12:	f043 0201 	orr.w	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f984 	bl	8005d28 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	220c      	movs	r2, #12
 8005a26:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d004      	beq.n	8005a3c <HAL_ADC_IRQHandler+0x1d4>
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10b      	bne.n	8005a54 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 80b3 	beq.w	8005bae <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 80ad 	beq.w	8005bae <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d105      	bne.n	8005a6c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a64:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff fa62 	bl	8004f3a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005a76:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff fa1d 	bl	8004ebc <LL_ADC_REG_IsTriggerSourceSWStart>
 8005a82:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a10      	ldr	r2, [pc, #64]	@ (8005acc <HAL_ADC_IRQHandler+0x264>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d009      	beq.n	8005aa2 <HAL_ADC_IRQHandler+0x23a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a11      	ldr	r2, [pc, #68]	@ (8005ad8 <HAL_ADC_IRQHandler+0x270>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d002      	beq.n	8005a9e <HAL_ADC_IRQHandler+0x236>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	e003      	b.n	8005aa6 <HAL_ADC_IRQHandler+0x23e>
 8005a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8005adc <HAL_ADC_IRQHandler+0x274>)
 8005aa0:	e001      	b.n	8005aa6 <HAL_ADC_IRQHandler+0x23e>
 8005aa2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6812      	ldr	r2, [r2, #0]
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d008      	beq.n	8005ac0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2b06      	cmp	r3, #6
 8005ab8:	d002      	beq.n	8005ac0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b07      	cmp	r3, #7
 8005abe:	d10f      	bne.n	8005ae0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	623b      	str	r3, [r7, #32]
 8005ac8:	e01f      	b.n	8005b0a <HAL_ADC_IRQHandler+0x2a2>
 8005aca:	bf00      	nop
 8005acc:	50000100 	.word	0x50000100
 8005ad0:	50000300 	.word	0x50000300
 8005ad4:	50000700 	.word	0x50000700
 8005ad8:	50000500 	.word	0x50000500
 8005adc:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a8b      	ldr	r2, [pc, #556]	@ (8005d14 <HAL_ADC_IRQHandler+0x4ac>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d009      	beq.n	8005afe <HAL_ADC_IRQHandler+0x296>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a8a      	ldr	r2, [pc, #552]	@ (8005d18 <HAL_ADC_IRQHandler+0x4b0>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d002      	beq.n	8005afa <HAL_ADC_IRQHandler+0x292>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	e003      	b.n	8005b02 <HAL_ADC_IRQHandler+0x29a>
 8005afa:	4b88      	ldr	r3, [pc, #544]	@ (8005d1c <HAL_ADC_IRQHandler+0x4b4>)
 8005afc:	e001      	b.n	8005b02 <HAL_ADC_IRQHandler+0x29a>
 8005afe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005b02:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d047      	beq.n	8005ba0 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d007      	beq.n	8005b2a <HAL_ADC_IRQHandler+0x2c2>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d03f      	beq.n	8005ba0 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d13a      	bne.n	8005ba0 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b34:	2b40      	cmp	r3, #64	@ 0x40
 8005b36:	d133      	bne.n	8005ba0 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d12e      	bne.n	8005ba0 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff fb61 	bl	800520e <LL_ADC_INJ_IsConversionOngoing>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d11a      	bne.n	8005b88 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b60:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b66:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d112      	bne.n	8005ba0 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b7e:	f043 0201 	orr.w	r2, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b86:	e00b      	b.n	8005ba0 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b8c:	f043 0210 	orr.w	r2, r3, #16
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b98:	f043 0201 	orr.w	r2, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f001 f87b 	bl	8006c9c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2260      	movs	r2, #96	@ 0x60
 8005bac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d011      	beq.n	8005bdc <HAL_ADC_IRQHandler+0x374>
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00c      	beq.n	8005bdc <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f8b4 	bl	8005d3c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2280      	movs	r2, #128	@ 0x80
 8005bda:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d012      	beq.n	8005c0c <HAL_ADC_IRQHandler+0x3a4>
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00d      	beq.n	8005c0c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f001 f861 	bl	8006cc4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d012      	beq.n	8005c3c <HAL_ADC_IRQHandler+0x3d4>
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00d      	beq.n	8005c3c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c24:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f001 f853 	bl	8006cd8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	f003 0310 	and.w	r3, r3, #16
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d043      	beq.n	8005cce <HAL_ADC_IRQHandler+0x466>
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	f003 0310 	and.w	r3, r3, #16
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d03e      	beq.n	8005cce <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d102      	bne.n	8005c5e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c5c:	e021      	b.n	8005ca2 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d015      	beq.n	8005c90 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c6c:	d004      	beq.n	8005c78 <HAL_ADC_IRQHandler+0x410>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a28      	ldr	r2, [pc, #160]	@ (8005d14 <HAL_ADC_IRQHandler+0x4ac>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d101      	bne.n	8005c7c <HAL_ADC_IRQHandler+0x414>
 8005c78:	4b29      	ldr	r3, [pc, #164]	@ (8005d20 <HAL_ADC_IRQHandler+0x4b8>)
 8005c7a:	e000      	b.n	8005c7e <HAL_ADC_IRQHandler+0x416>
 8005c7c:	4b29      	ldr	r3, [pc, #164]	@ (8005d24 <HAL_ADC_IRQHandler+0x4bc>)
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff fa1b 	bl	80050ba <LL_ADC_GetMultiDMATransfer>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00b      	beq.n	8005ca2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c8e:	e008      	b.n	8005ca2 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d10e      	bne.n	8005cc6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cac:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cb8:	f043 0202 	orr.w	r2, r3, #2
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f845 	bl	8005d50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2210      	movs	r2, #16
 8005ccc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d018      	beq.n	8005d0a <HAL_ADC_IRQHandler+0x4a2>
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d013      	beq.n	8005d0a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf2:	f043 0208 	orr.w	r2, r3, #8
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d02:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 ffd3 	bl	8006cb0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005d0a:	bf00      	nop
 8005d0c:	3728      	adds	r7, #40	@ 0x28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	50000100 	.word	0x50000100
 8005d18:	50000500 	.word	0x50000500
 8005d1c:	50000400 	.word	0x50000400
 8005d20:	50000300 	.word	0x50000300
 8005d24:	50000700 	.word	0x50000700

08005d28 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b0b6      	sub	sp, #216	@ 0xd8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d102      	bne.n	8005d88 <HAL_ADC_ConfigChannel+0x24>
 8005d82:	2302      	movs	r3, #2
 8005d84:	f000 bc13 	b.w	80065ae <HAL_ADC_ConfigChannel+0x84a>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7ff fa27 	bl	80051e8 <LL_ADC_REG_IsConversionOngoing>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f040 83f3 	bne.w	8006588 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6859      	ldr	r1, [r3, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	461a      	mov	r2, r3
 8005db0:	f7ff f897 	bl	8004ee2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff fa15 	bl	80051e8 <LL_ADC_REG_IsConversionOngoing>
 8005dbe:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7ff fa21 	bl	800520e <LL_ADC_INJ_IsConversionOngoing>
 8005dcc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005dd0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f040 81d9 	bne.w	800618c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005dda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f040 81d4 	bne.w	800618c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005dec:	d10f      	bne.n	8005e0e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6818      	ldr	r0, [r3, #0]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2200      	movs	r2, #0
 8005df8:	4619      	mov	r1, r3
 8005dfa:	f7ff f8b1 	bl	8004f60 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff f845 	bl	8004e96 <LL_ADC_SetSamplingTimeCommonConfig>
 8005e0c:	e00e      	b.n	8005e2c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6818      	ldr	r0, [r3, #0]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	6819      	ldr	r1, [r3, #0]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f7ff f8a0 	bl	8004f60 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2100      	movs	r1, #0
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff f835 	bl	8004e96 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	695a      	ldr	r2, [r3, #20]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	08db      	lsrs	r3, r3, #3
 8005e38:	f003 0303 	and.w	r3, r3, #3
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d022      	beq.n	8005e94 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	6919      	ldr	r1, [r3, #16]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e5e:	f7fe ff8f 	bl	8004d80 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	6919      	ldr	r1, [r3, #16]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f7fe ffdb 	bl	8004e2a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6818      	ldr	r0, [r3, #0]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d102      	bne.n	8005e8a <HAL_ADC_ConfigChannel+0x126>
 8005e84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e88:	e000      	b.n	8005e8c <HAL_ADC_ConfigChannel+0x128>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	f7fe ffe7 	bl	8004e60 <LL_ADC_SetOffsetSaturation>
 8005e92:	e17b      	b.n	800618c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2100      	movs	r1, #0
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe ff94 	bl	8004dc8 <LL_ADC_GetOffsetChannel>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10a      	bne.n	8005ec0 <HAL_ADC_ConfigChannel+0x15c>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2100      	movs	r1, #0
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fe ff89 	bl	8004dc8 <LL_ADC_GetOffsetChannel>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	0e9b      	lsrs	r3, r3, #26
 8005eba:	f003 021f 	and.w	r2, r3, #31
 8005ebe:	e01e      	b.n	8005efe <HAL_ADC_ConfigChannel+0x19a>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe ff7e 	bl	8004dc8 <LL_ADC_GetOffsetChannel>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005ed6:	fa93 f3a3 	rbit	r3, r3
 8005eda:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005ede:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005ee6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005eee:	2320      	movs	r3, #32
 8005ef0:	e004      	b.n	8005efc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005ef2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005ef6:	fab3 f383 	clz	r3, r3
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d105      	bne.n	8005f16 <HAL_ADC_ConfigChannel+0x1b2>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	0e9b      	lsrs	r3, r3, #26
 8005f10:	f003 031f 	and.w	r3, r3, #31
 8005f14:	e018      	b.n	8005f48 <HAL_ADC_ConfigChannel+0x1e4>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005f22:	fa93 f3a3 	rbit	r3, r3
 8005f26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005f32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005f3a:	2320      	movs	r3, #32
 8005f3c:	e004      	b.n	8005f48 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005f3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f42:	fab3 f383 	clz	r3, r3
 8005f46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d106      	bne.n	8005f5a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2200      	movs	r2, #0
 8005f52:	2100      	movs	r1, #0
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fe ff4d 	bl	8004df4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2101      	movs	r1, #1
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fe ff31 	bl	8004dc8 <LL_ADC_GetOffsetChannel>
 8005f66:	4603      	mov	r3, r0
 8005f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10a      	bne.n	8005f86 <HAL_ADC_ConfigChannel+0x222>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2101      	movs	r1, #1
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fe ff26 	bl	8004dc8 <LL_ADC_GetOffsetChannel>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	0e9b      	lsrs	r3, r3, #26
 8005f80:	f003 021f 	and.w	r2, r3, #31
 8005f84:	e01e      	b.n	8005fc4 <HAL_ADC_ConfigChannel+0x260>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fe ff1b 	bl	8004dc8 <LL_ADC_GetOffsetChannel>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005f9c:	fa93 f3a3 	rbit	r3, r3
 8005fa0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005fa4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005fac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005fb4:	2320      	movs	r3, #32
 8005fb6:	e004      	b.n	8005fc2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005fb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005fbc:	fab3 f383 	clz	r3, r3
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d105      	bne.n	8005fdc <HAL_ADC_ConfigChannel+0x278>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	0e9b      	lsrs	r3, r3, #26
 8005fd6:	f003 031f 	and.w	r3, r3, #31
 8005fda:	e018      	b.n	800600e <HAL_ADC_ConfigChannel+0x2aa>
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fe8:	fa93 f3a3 	rbit	r3, r3
 8005fec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005ff0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005ff4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005ff8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006000:	2320      	movs	r3, #32
 8006002:	e004      	b.n	800600e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006004:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006008:	fab3 f383 	clz	r3, r3
 800600c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800600e:	429a      	cmp	r2, r3
 8006010:	d106      	bne.n	8006020 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2200      	movs	r2, #0
 8006018:	2101      	movs	r1, #1
 800601a:	4618      	mov	r0, r3
 800601c:	f7fe feea 	bl	8004df4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2102      	movs	r1, #2
 8006026:	4618      	mov	r0, r3
 8006028:	f7fe fece 	bl	8004dc8 <LL_ADC_GetOffsetChannel>
 800602c:	4603      	mov	r3, r0
 800602e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10a      	bne.n	800604c <HAL_ADC_ConfigChannel+0x2e8>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2102      	movs	r1, #2
 800603c:	4618      	mov	r0, r3
 800603e:	f7fe fec3 	bl	8004dc8 <LL_ADC_GetOffsetChannel>
 8006042:	4603      	mov	r3, r0
 8006044:	0e9b      	lsrs	r3, r3, #26
 8006046:	f003 021f 	and.w	r2, r3, #31
 800604a:	e01e      	b.n	800608a <HAL_ADC_ConfigChannel+0x326>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2102      	movs	r1, #2
 8006052:	4618      	mov	r0, r3
 8006054:	f7fe feb8 	bl	8004dc8 <LL_ADC_GetOffsetChannel>
 8006058:	4603      	mov	r3, r0
 800605a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006062:	fa93 f3a3 	rbit	r3, r3
 8006066:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800606a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800606e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8006072:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800607a:	2320      	movs	r3, #32
 800607c:	e004      	b.n	8006088 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800607e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006082:	fab3 f383 	clz	r3, r3
 8006086:	b2db      	uxtb	r3, r3
 8006088:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006092:	2b00      	cmp	r3, #0
 8006094:	d105      	bne.n	80060a2 <HAL_ADC_ConfigChannel+0x33e>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	0e9b      	lsrs	r3, r3, #26
 800609c:	f003 031f 	and.w	r3, r3, #31
 80060a0:	e016      	b.n	80060d0 <HAL_ADC_ConfigChannel+0x36c>
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80060ae:	fa93 f3a3 	rbit	r3, r3
 80060b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80060b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80060b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80060ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80060c2:	2320      	movs	r3, #32
 80060c4:	e004      	b.n	80060d0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80060c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060ca:	fab3 f383 	clz	r3, r3
 80060ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d106      	bne.n	80060e2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2200      	movs	r2, #0
 80060da:	2102      	movs	r1, #2
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fe fe89 	bl	8004df4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2103      	movs	r1, #3
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fe fe6d 	bl	8004dc8 <LL_ADC_GetOffsetChannel>
 80060ee:	4603      	mov	r3, r0
 80060f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <HAL_ADC_ConfigChannel+0x3aa>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2103      	movs	r1, #3
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fe fe62 	bl	8004dc8 <LL_ADC_GetOffsetChannel>
 8006104:	4603      	mov	r3, r0
 8006106:	0e9b      	lsrs	r3, r3, #26
 8006108:	f003 021f 	and.w	r2, r3, #31
 800610c:	e017      	b.n	800613e <HAL_ADC_ConfigChannel+0x3da>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2103      	movs	r1, #3
 8006114:	4618      	mov	r0, r3
 8006116:	f7fe fe57 	bl	8004dc8 <LL_ADC_GetOffsetChannel>
 800611a:	4603      	mov	r3, r0
 800611c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800611e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006120:	fa93 f3a3 	rbit	r3, r3
 8006124:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006126:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006128:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800612a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006130:	2320      	movs	r3, #32
 8006132:	e003      	b.n	800613c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006136:	fab3 f383 	clz	r3, r3
 800613a:	b2db      	uxtb	r3, r3
 800613c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006146:	2b00      	cmp	r3, #0
 8006148:	d105      	bne.n	8006156 <HAL_ADC_ConfigChannel+0x3f2>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	0e9b      	lsrs	r3, r3, #26
 8006150:	f003 031f 	and.w	r3, r3, #31
 8006154:	e011      	b.n	800617a <HAL_ADC_ConfigChannel+0x416>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800615c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800615e:	fa93 f3a3 	rbit	r3, r3
 8006162:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006164:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006166:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006168:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800616e:	2320      	movs	r3, #32
 8006170:	e003      	b.n	800617a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006172:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006174:	fab3 f383 	clz	r3, r3
 8006178:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800617a:	429a      	cmp	r2, r3
 800617c:	d106      	bne.n	800618c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2200      	movs	r2, #0
 8006184:	2103      	movs	r1, #3
 8006186:	4618      	mov	r0, r3
 8006188:	f7fe fe34 	bl	8004df4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff f802 	bl	800519a <LL_ADC_IsEnabled>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	f040 813d 	bne.w	8006418 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6818      	ldr	r0, [r3, #0]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	6819      	ldr	r1, [r3, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	461a      	mov	r2, r3
 80061ac:	f7fe ff04 	bl	8004fb8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	4aa2      	ldr	r2, [pc, #648]	@ (8006440 <HAL_ADC_ConfigChannel+0x6dc>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	f040 812e 	bne.w	8006418 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10b      	bne.n	80061e4 <HAL_ADC_ConfigChannel+0x480>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	0e9b      	lsrs	r3, r3, #26
 80061d2:	3301      	adds	r3, #1
 80061d4:	f003 031f 	and.w	r3, r3, #31
 80061d8:	2b09      	cmp	r3, #9
 80061da:	bf94      	ite	ls
 80061dc:	2301      	movls	r3, #1
 80061de:	2300      	movhi	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	e019      	b.n	8006218 <HAL_ADC_ConfigChannel+0x4b4>
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061ec:	fa93 f3a3 	rbit	r3, r3
 80061f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80061f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061f4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80061f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80061fc:	2320      	movs	r3, #32
 80061fe:	e003      	b.n	8006208 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006200:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006202:	fab3 f383 	clz	r3, r3
 8006206:	b2db      	uxtb	r3, r3
 8006208:	3301      	adds	r3, #1
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	2b09      	cmp	r3, #9
 8006210:	bf94      	ite	ls
 8006212:	2301      	movls	r3, #1
 8006214:	2300      	movhi	r3, #0
 8006216:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006218:	2b00      	cmp	r3, #0
 800621a:	d079      	beq.n	8006310 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006224:	2b00      	cmp	r3, #0
 8006226:	d107      	bne.n	8006238 <HAL_ADC_ConfigChannel+0x4d4>
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	0e9b      	lsrs	r3, r3, #26
 800622e:	3301      	adds	r3, #1
 8006230:	069b      	lsls	r3, r3, #26
 8006232:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006236:	e015      	b.n	8006264 <HAL_ADC_ConfigChannel+0x500>
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800623e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006240:	fa93 f3a3 	rbit	r3, r3
 8006244:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006248:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800624a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006250:	2320      	movs	r3, #32
 8006252:	e003      	b.n	800625c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006256:	fab3 f383 	clz	r3, r3
 800625a:	b2db      	uxtb	r3, r3
 800625c:	3301      	adds	r3, #1
 800625e:	069b      	lsls	r3, r3, #26
 8006260:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800626c:	2b00      	cmp	r3, #0
 800626e:	d109      	bne.n	8006284 <HAL_ADC_ConfigChannel+0x520>
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	0e9b      	lsrs	r3, r3, #26
 8006276:	3301      	adds	r3, #1
 8006278:	f003 031f 	and.w	r3, r3, #31
 800627c:	2101      	movs	r1, #1
 800627e:	fa01 f303 	lsl.w	r3, r1, r3
 8006282:	e017      	b.n	80062b4 <HAL_ADC_ConfigChannel+0x550>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800628a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800628c:	fa93 f3a3 	rbit	r3, r3
 8006290:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006294:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8006296:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800629c:	2320      	movs	r3, #32
 800629e:	e003      	b.n	80062a8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80062a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062a2:	fab3 f383 	clz	r3, r3
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	3301      	adds	r3, #1
 80062aa:	f003 031f 	and.w	r3, r3, #31
 80062ae:	2101      	movs	r1, #1
 80062b0:	fa01 f303 	lsl.w	r3, r1, r3
 80062b4:	ea42 0103 	orr.w	r1, r2, r3
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10a      	bne.n	80062da <HAL_ADC_ConfigChannel+0x576>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	0e9b      	lsrs	r3, r3, #26
 80062ca:	3301      	adds	r3, #1
 80062cc:	f003 021f 	and.w	r2, r3, #31
 80062d0:	4613      	mov	r3, r2
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	4413      	add	r3, r2
 80062d6:	051b      	lsls	r3, r3, #20
 80062d8:	e018      	b.n	800630c <HAL_ADC_ConfigChannel+0x5a8>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e2:	fa93 f3a3 	rbit	r3, r3
 80062e6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80062e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80062ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80062f2:	2320      	movs	r3, #32
 80062f4:	e003      	b.n	80062fe <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80062f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062f8:	fab3 f383 	clz	r3, r3
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	3301      	adds	r3, #1
 8006300:	f003 021f 	and.w	r2, r3, #31
 8006304:	4613      	mov	r3, r2
 8006306:	005b      	lsls	r3, r3, #1
 8006308:	4413      	add	r3, r2
 800630a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800630c:	430b      	orrs	r3, r1
 800630e:	e07e      	b.n	800640e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006318:	2b00      	cmp	r3, #0
 800631a:	d107      	bne.n	800632c <HAL_ADC_ConfigChannel+0x5c8>
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	0e9b      	lsrs	r3, r3, #26
 8006322:	3301      	adds	r3, #1
 8006324:	069b      	lsls	r3, r3, #26
 8006326:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800632a:	e015      	b.n	8006358 <HAL_ADC_ConfigChannel+0x5f4>
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006334:	fa93 f3a3 	rbit	r3, r3
 8006338:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800633a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800633e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006344:	2320      	movs	r3, #32
 8006346:	e003      	b.n	8006350 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634a:	fab3 f383 	clz	r3, r3
 800634e:	b2db      	uxtb	r3, r3
 8006350:	3301      	adds	r3, #1
 8006352:	069b      	lsls	r3, r3, #26
 8006354:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006360:	2b00      	cmp	r3, #0
 8006362:	d109      	bne.n	8006378 <HAL_ADC_ConfigChannel+0x614>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	0e9b      	lsrs	r3, r3, #26
 800636a:	3301      	adds	r3, #1
 800636c:	f003 031f 	and.w	r3, r3, #31
 8006370:	2101      	movs	r1, #1
 8006372:	fa01 f303 	lsl.w	r3, r1, r3
 8006376:	e017      	b.n	80063a8 <HAL_ADC_ConfigChannel+0x644>
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	fa93 f3a3 	rbit	r3, r3
 8006384:	61fb      	str	r3, [r7, #28]
  return result;
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006390:	2320      	movs	r3, #32
 8006392:	e003      	b.n	800639c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006396:	fab3 f383 	clz	r3, r3
 800639a:	b2db      	uxtb	r3, r3
 800639c:	3301      	adds	r3, #1
 800639e:	f003 031f 	and.w	r3, r3, #31
 80063a2:	2101      	movs	r1, #1
 80063a4:	fa01 f303 	lsl.w	r3, r1, r3
 80063a8:	ea42 0103 	orr.w	r1, r2, r3
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10d      	bne.n	80063d4 <HAL_ADC_ConfigChannel+0x670>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	0e9b      	lsrs	r3, r3, #26
 80063be:	3301      	adds	r3, #1
 80063c0:	f003 021f 	and.w	r2, r3, #31
 80063c4:	4613      	mov	r3, r2
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	4413      	add	r3, r2
 80063ca:	3b1e      	subs	r3, #30
 80063cc:	051b      	lsls	r3, r3, #20
 80063ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80063d2:	e01b      	b.n	800640c <HAL_ADC_ConfigChannel+0x6a8>
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	fa93 f3a3 	rbit	r3, r3
 80063e0:	613b      	str	r3, [r7, #16]
  return result;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80063ec:	2320      	movs	r3, #32
 80063ee:	e003      	b.n	80063f8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	fab3 f383 	clz	r3, r3
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	3301      	adds	r3, #1
 80063fa:	f003 021f 	and.w	r2, r3, #31
 80063fe:	4613      	mov	r3, r2
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	4413      	add	r3, r2
 8006404:	3b1e      	subs	r3, #30
 8006406:	051b      	lsls	r3, r3, #20
 8006408:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800640c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006412:	4619      	mov	r1, r3
 8006414:	f7fe fda4 	bl	8004f60 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	4b09      	ldr	r3, [pc, #36]	@ (8006444 <HAL_ADC_ConfigChannel+0x6e0>)
 800641e:	4013      	ands	r3, r2
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 80be 	beq.w	80065a2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800642e:	d004      	beq.n	800643a <HAL_ADC_ConfigChannel+0x6d6>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a04      	ldr	r2, [pc, #16]	@ (8006448 <HAL_ADC_ConfigChannel+0x6e4>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d10a      	bne.n	8006450 <HAL_ADC_ConfigChannel+0x6ec>
 800643a:	4b04      	ldr	r3, [pc, #16]	@ (800644c <HAL_ADC_ConfigChannel+0x6e8>)
 800643c:	e009      	b.n	8006452 <HAL_ADC_ConfigChannel+0x6ee>
 800643e:	bf00      	nop
 8006440:	407f0000 	.word	0x407f0000
 8006444:	80080000 	.word	0x80080000
 8006448:	50000100 	.word	0x50000100
 800644c:	50000300 	.word	0x50000300
 8006450:	4b59      	ldr	r3, [pc, #356]	@ (80065b8 <HAL_ADC_ConfigChannel+0x854>)
 8006452:	4618      	mov	r0, r3
 8006454:	f7fe fc86 	bl	8004d64 <LL_ADC_GetCommonPathInternalCh>
 8006458:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a56      	ldr	r2, [pc, #344]	@ (80065bc <HAL_ADC_ConfigChannel+0x858>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d004      	beq.n	8006470 <HAL_ADC_ConfigChannel+0x70c>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a55      	ldr	r2, [pc, #340]	@ (80065c0 <HAL_ADC_ConfigChannel+0x85c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d13a      	bne.n	80064e6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006470:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006474:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d134      	bne.n	80064e6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006484:	d005      	beq.n	8006492 <HAL_ADC_ConfigChannel+0x72e>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a4e      	ldr	r2, [pc, #312]	@ (80065c4 <HAL_ADC_ConfigChannel+0x860>)
 800648c:	4293      	cmp	r3, r2
 800648e:	f040 8085 	bne.w	800659c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800649a:	d004      	beq.n	80064a6 <HAL_ADC_ConfigChannel+0x742>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a49      	ldr	r2, [pc, #292]	@ (80065c8 <HAL_ADC_ConfigChannel+0x864>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d101      	bne.n	80064aa <HAL_ADC_ConfigChannel+0x746>
 80064a6:	4a49      	ldr	r2, [pc, #292]	@ (80065cc <HAL_ADC_ConfigChannel+0x868>)
 80064a8:	e000      	b.n	80064ac <HAL_ADC_ConfigChannel+0x748>
 80064aa:	4a43      	ldr	r2, [pc, #268]	@ (80065b8 <HAL_ADC_ConfigChannel+0x854>)
 80064ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80064b4:	4619      	mov	r1, r3
 80064b6:	4610      	mov	r0, r2
 80064b8:	f7fe fc41 	bl	8004d3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80064bc:	4b44      	ldr	r3, [pc, #272]	@ (80065d0 <HAL_ADC_ConfigChannel+0x86c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	099b      	lsrs	r3, r3, #6
 80064c2:	4a44      	ldr	r2, [pc, #272]	@ (80065d4 <HAL_ADC_ConfigChannel+0x870>)
 80064c4:	fba2 2303 	umull	r2, r3, r2, r3
 80064c8:	099b      	lsrs	r3, r3, #6
 80064ca:	1c5a      	adds	r2, r3, #1
 80064cc:	4613      	mov	r3, r2
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80064d6:	e002      	b.n	80064de <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3b01      	subs	r3, #1
 80064dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1f9      	bne.n	80064d8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80064e4:	e05a      	b.n	800659c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a3b      	ldr	r2, [pc, #236]	@ (80065d8 <HAL_ADC_ConfigChannel+0x874>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d125      	bne.n	800653c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80064f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d11f      	bne.n	800653c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a31      	ldr	r2, [pc, #196]	@ (80065c8 <HAL_ADC_ConfigChannel+0x864>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d104      	bne.n	8006510 <HAL_ADC_ConfigChannel+0x7ac>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a34      	ldr	r2, [pc, #208]	@ (80065dc <HAL_ADC_ConfigChannel+0x878>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d047      	beq.n	80065a0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006518:	d004      	beq.n	8006524 <HAL_ADC_ConfigChannel+0x7c0>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a2a      	ldr	r2, [pc, #168]	@ (80065c8 <HAL_ADC_ConfigChannel+0x864>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d101      	bne.n	8006528 <HAL_ADC_ConfigChannel+0x7c4>
 8006524:	4a29      	ldr	r2, [pc, #164]	@ (80065cc <HAL_ADC_ConfigChannel+0x868>)
 8006526:	e000      	b.n	800652a <HAL_ADC_ConfigChannel+0x7c6>
 8006528:	4a23      	ldr	r2, [pc, #140]	@ (80065b8 <HAL_ADC_ConfigChannel+0x854>)
 800652a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800652e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006532:	4619      	mov	r1, r3
 8006534:	4610      	mov	r0, r2
 8006536:	f7fe fc02 	bl	8004d3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800653a:	e031      	b.n	80065a0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a27      	ldr	r2, [pc, #156]	@ (80065e0 <HAL_ADC_ConfigChannel+0x87c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d12d      	bne.n	80065a2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006546:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800654a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d127      	bne.n	80065a2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a1c      	ldr	r2, [pc, #112]	@ (80065c8 <HAL_ADC_ConfigChannel+0x864>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d022      	beq.n	80065a2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006564:	d004      	beq.n	8006570 <HAL_ADC_ConfigChannel+0x80c>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a17      	ldr	r2, [pc, #92]	@ (80065c8 <HAL_ADC_ConfigChannel+0x864>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d101      	bne.n	8006574 <HAL_ADC_ConfigChannel+0x810>
 8006570:	4a16      	ldr	r2, [pc, #88]	@ (80065cc <HAL_ADC_ConfigChannel+0x868>)
 8006572:	e000      	b.n	8006576 <HAL_ADC_ConfigChannel+0x812>
 8006574:	4a10      	ldr	r2, [pc, #64]	@ (80065b8 <HAL_ADC_ConfigChannel+0x854>)
 8006576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800657a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800657e:	4619      	mov	r1, r3
 8006580:	4610      	mov	r0, r2
 8006582:	f7fe fbdc 	bl	8004d3e <LL_ADC_SetCommonPathInternalCh>
 8006586:	e00c      	b.n	80065a2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800658c:	f043 0220 	orr.w	r2, r3, #32
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800659a:	e002      	b.n	80065a2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800659c:	bf00      	nop
 800659e:	e000      	b.n	80065a2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80065aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	37d8      	adds	r7, #216	@ 0xd8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	50000700 	.word	0x50000700
 80065bc:	c3210000 	.word	0xc3210000
 80065c0:	90c00010 	.word	0x90c00010
 80065c4:	50000600 	.word	0x50000600
 80065c8:	50000100 	.word	0x50000100
 80065cc:	50000300 	.word	0x50000300
 80065d0:	20000274 	.word	0x20000274
 80065d4:	053e2d63 	.word	0x053e2d63
 80065d8:	c7520000 	.word	0xc7520000
 80065dc:	50000500 	.word	0x50000500
 80065e0:	cb840000 	.word	0xcb840000

080065e4 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08e      	sub	sp, #56	@ 0x38
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(pAnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));

  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80065fc:	d003      	beq.n	8006606 <HAL_ADC_AnalogWDGConfig+0x22>
      (pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006602:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_ADC_AnalogWDGConfig+0x30>
 8006610:	2302      	movs	r3, #2
 8006612:	e1ea      	b.n	80069ea <HAL_ADC_AnalogWDGConfig+0x406>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4618      	mov	r0, r3
 8006622:	f7fe fde1 	bl	80051e8 <LL_ADC_REG_IsConversionOngoing>
 8006626:	62b8      	str	r0, [r7, #40]	@ 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4618      	mov	r0, r3
 800662e:	f7fe fdee 	bl	800520e <LL_ADC_INJ_IsConversionOngoing>
 8006632:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006636:	2b00      	cmp	r3, #0
 8006638:	f040 8175 	bne.w	8006926 <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800663c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663e:	2b00      	cmp	r3, #0
 8006640:	f040 8171 	bne.w	8006926 <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a90      	ldr	r2, [pc, #576]	@ (800688c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800664a:	4293      	cmp	r3, r2
 800664c:	f040 808d 	bne.w	800676a <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (pAnalogWDGConfig->WatchdogMode)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006658:	d034      	beq.n	80066c4 <HAL_ADC_AnalogWDGConfig+0xe0>
 800665a:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 800665e:	d856      	bhi.n	800670e <HAL_ADC_AnalogWDGConfig+0x12a>
 8006660:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006664:	d04b      	beq.n	80066fe <HAL_ADC_AnalogWDGConfig+0x11a>
 8006666:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800666a:	d850      	bhi.n	800670e <HAL_ADC_AnalogWDGConfig+0x12a>
 800666c:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006670:	d01b      	beq.n	80066aa <HAL_ADC_AnalogWDGConfig+0xc6>
 8006672:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006676:	d84a      	bhi.n	800670e <HAL_ADC_AnalogWDGConfig+0x12a>
 8006678:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800667c:	d037      	beq.n	80066ee <HAL_ADC_AnalogWDGConfig+0x10a>
 800667e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006682:	d844      	bhi.n	800670e <HAL_ADC_AnalogWDGConfig+0x12a>
 8006684:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006688:	d029      	beq.n	80066de <HAL_ADC_AnalogWDGConfig+0xfa>
 800668a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800668e:	d13e      	bne.n	800670e <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 800669c:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 80066a0:	461a      	mov	r2, r3
 80066a2:	497a      	ldr	r1, [pc, #488]	@ (800688c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80066a4:	f7fe fcac 	bl	8005000 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 80066a8:	e039      	b.n	800671e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80066b6:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 80066ba:	461a      	mov	r2, r3
 80066bc:	4973      	ldr	r1, [pc, #460]	@ (800688c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80066be:	f7fe fc9f 	bl	8005000 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_INJECTED));
          break;
 80066c2:	e02c      	b.n	800671e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80066d0:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
 80066d4:	461a      	mov	r2, r3
 80066d6:	496d      	ldr	r1, [pc, #436]	@ (800688c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80066d8:	f7fe fc92 	bl	8005000 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 80066dc:	e01f      	b.n	800671e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a6b      	ldr	r2, [pc, #428]	@ (8006890 <HAL_ADC_AnalogWDGConfig+0x2ac>)
 80066e4:	4969      	ldr	r1, [pc, #420]	@ (800688c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fe fc8a 	bl	8005000 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80066ec:	e017      	b.n	800671e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a68      	ldr	r2, [pc, #416]	@ (8006894 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 80066f4:	4965      	ldr	r1, [pc, #404]	@ (800688c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fe fc82 	bl	8005000 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80066fc:	e00f      	b.n	800671e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a65      	ldr	r2, [pc, #404]	@ (8006898 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8006704:	4961      	ldr	r1, [pc, #388]	@ (800688c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8006706:	4618      	mov	r0, r3
 8006708:	f7fe fc7a 	bl	8005000 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800670c:	e007      	b.n	800671e <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2200      	movs	r2, #0
 8006714:	495d      	ldr	r1, [pc, #372]	@ (800688c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8006716:	4618      	mov	r0, r3
 8006718:	f7fe fc72 	bl	8005000 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800671c:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	699a      	ldr	r2, [r3, #24]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 pAnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006738:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4618      	mov	r0, r3
 8006746:	f7fe fd75 	bl	8005234 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	7b1b      	ldrb	r3, [r3, #12]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d105      	bne.n	800675e <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4618      	mov	r0, r3
 8006758:	f7fe fd95 	bl	8005286 <LL_ADC_EnableIT_AWD1>
 800675c:	e0e3      	b.n	8006926 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe fdbf 	bl	80052e6 <LL_ADC_DisableIT_AWD1>
 8006768:	e0dd      	b.n	8006926 <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006772:	d01d      	beq.n	80067b0 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8006774:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006778:	f200 8092 	bhi.w	80068a0 <HAL_ADC_AnalogWDGConfig+0x2bc>
 800677c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006780:	d07b      	beq.n	800687a <HAL_ADC_AnalogWDGConfig+0x296>
 8006782:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006786:	f200 808b 	bhi.w	80068a0 <HAL_ADC_AnalogWDGConfig+0x2bc>
 800678a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800678e:	d00f      	beq.n	80067b0 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8006790:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006794:	f200 8084 	bhi.w	80068a0 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8006798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800679c:	d06d      	beq.n	800687a <HAL_ADC_AnalogWDGConfig+0x296>
 800679e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067a2:	d87d      	bhi.n	80068a0 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80067a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067a8:	d067      	beq.n	800687a <HAL_ADC_AnalogWDGConfig+0x296>
 80067aa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80067ae:	d177      	bne.n	80068a0 <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a39      	ldr	r2, [pc, #228]	@ (800689c <HAL_ADC_AnalogWDGConfig+0x2b8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d12f      	bne.n	800681a <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR,
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d108      	bne.n	80067d8 <HAL_ADC_AnalogWDGConfig+0x1f4>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	0e9b      	lsrs	r3, r3, #26
 80067cc:	f003 031f 	and.w	r3, r3, #31
 80067d0:	2201      	movs	r2, #1
 80067d2:	fa02 f303 	lsl.w	r3, r2, r3
 80067d6:	e016      	b.n	8006806 <HAL_ADC_AnalogWDGConfig+0x222>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	fa93 f3a3 	rbit	r3, r3
 80067e4:	61bb      	str	r3, [r7, #24]
  return result;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 80067f0:	2320      	movs	r3, #32
 80067f2:	e003      	b.n	80067fc <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	fab3 f383 	clz	r3, r3
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	f003 031f 	and.w	r3, r3, #31
 8006800:	2201      	movs	r2, #1
 8006802:	fa02 f303 	lsl.w	r3, r2, r3
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	6812      	ldr	r2, [r2, #0]
 800680a:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6812      	ldr	r2, [r2, #0]
 8006812:	430b      	orrs	r3, r1
 8006814:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR,
                    (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8006818:	e04b      	b.n	80068b2 <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR,
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006822:	2b00      	cmp	r3, #0
 8006824:	d108      	bne.n	8006838 <HAL_ADC_AnalogWDGConfig+0x254>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	0e9b      	lsrs	r3, r3, #26
 800682c:	f003 031f 	and.w	r3, r3, #31
 8006830:	2201      	movs	r2, #1
 8006832:	fa02 f303 	lsl.w	r3, r2, r3
 8006836:	e016      	b.n	8006866 <HAL_ADC_AnalogWDGConfig+0x282>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	fa93 f3a3 	rbit	r3, r3
 8006844:	60fb      	str	r3, [r7, #12]
  return result;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 8006850:	2320      	movs	r3, #32
 8006852:	e003      	b.n	800685c <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	fab3 f383 	clz	r3, r3
 800685a:	b2db      	uxtb	r3, r3
 800685c:	f003 031f 	and.w	r3, r3, #31
 8006860:	2201      	movs	r2, #1
 8006862:	fa02 f303 	lsl.w	r3, r2, r3
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	6812      	ldr	r2, [r2, #0]
 800686a:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	6812      	ldr	r2, [r2, #0]
 8006872:	430b      	orrs	r3, r1
 8006874:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 8006878:	e01b      	b.n	80068b2 <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8006882:	4a05      	ldr	r2, [pc, #20]	@ (8006898 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8006884:	4619      	mov	r1, r3
 8006886:	f7fe fbbb 	bl	8005000 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800688a:	e012      	b.n	80068b2 <HAL_ADC_AnalogWDGConfig+0x2ce>
 800688c:	7dc00000 	.word	0x7dc00000
 8006890:	0087ffff 	.word	0x0087ffff
 8006894:	0107ffff 	.word	0x0107ffff
 8006898:	0187ffff 	.word	0x0187ffff
 800689c:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6818      	ldr	r0, [r3, #0]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2200      	movs	r2, #0
 80068aa:	4619      	mov	r1, r3
 80068ac:	f7fe fba8 	bl	8005000 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80068b0:	bf00      	nop
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a4f      	ldr	r2, [pc, #316]	@ (80069f4 <HAL_ADC_AnalogWDGConfig+0x410>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d11a      	bne.n	80068f2 <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068c0:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fe fcbe 	bl	800524e <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	7b1b      	ldrb	r3, [r3, #12]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d105      	bne.n	80068e6 <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fe fce1 	bl	80052a6 <LL_ADC_EnableIT_AWD2>
 80068e4:	e01f      	b.n	8006926 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe fd0b 	bl	8005306 <LL_ADC_DisableIT_AWD2>
 80068f0:	e019      	b.n	8006926 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f7fe fcb1 	bl	800526a <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	7b1b      	ldrb	r3, [r3, #12]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d105      	bne.n	800691c <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4618      	mov	r0, r3
 8006916:	f7fe fcd6 	bl	80052c6 <LL_ADC_EnableIT_AWD3>
 800691a:	e004      	b.n	8006926 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4618      	mov	r0, r3
 8006922:	f7fe fd00 	bl	8005326 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a33      	ldr	r2, [pc, #204]	@ (80069f8 <HAL_ADC_AnalogWDGConfig+0x414>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d118      	bne.n	8006962 <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	691a      	ldr	r2, [r3, #16]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	08db      	lsrs	r3, r3, #3
 800693c:	f003 0303 	and.w	r3, r3, #3
 8006940:	005b      	lsls	r3, r3, #1
 8006942:	fa02 f303 	lsl.w	r3, r2, r3
 8006946:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	695a      	ldr	r2, [r3, #20]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	08db      	lsrs	r3, r3, #3
 8006954:	f003 0303 	and.w	r3, r3, #3
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	fa02 f303 	lsl.w	r3, r2, r3
 800695e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006960:	e035      	b.n	80069ce <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f003 0318 	and.w	r3, r3, #24
 800696c:	2b18      	cmp	r3, #24
 800696e:	d00f      	beq.n	8006990 <HAL_ADC_AnalogWDGConfig+0x3ac>
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	691a      	ldr	r2, [r3, #16]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	08db      	lsrs	r3, r3, #3
 800697c:	f003 0303 	and.w	r3, r3, #3
 8006980:	f1c3 0302 	rsb	r3, r3, #2
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	f003 031e 	and.w	r3, r3, #30
 800698a:	fa22 f303 	lsr.w	r3, r2, r3
 800698e:	e002      	b.n	8006996 <HAL_ADC_AnalogWDGConfig+0x3b2>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	f003 0318 	and.w	r3, r3, #24
 80069a2:	2b18      	cmp	r3, #24
 80069a4:	d00f      	beq.n	80069c6 <HAL_ADC_AnalogWDGConfig+0x3e2>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	695a      	ldr	r2, [r3, #20]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	08db      	lsrs	r3, r3, #3
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	f1c3 0302 	rsb	r3, r3, #2
 80069ba:	005b      	lsls	r3, r3, #1
 80069bc:	f003 031e 	and.w	r3, r3, #30
 80069c0:	fa22 f303 	lsr.w	r3, r2, r3
 80069c4:	e002      	b.n	80069cc <HAL_ADC_AnalogWDGConfig+0x3e8>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	6819      	ldr	r1, [r3, #0]
 80069d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069da:	f7fe fb3e 	bl	800505a <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80069e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3738      	adds	r7, #56	@ 0x38
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	0017ffff 	.word	0x0017ffff
 80069f8:	7dc00000 	.word	0x7dc00000

080069fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006a04:	2300      	movs	r3, #0
 8006a06:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fe fbc4 	bl	800519a <LL_ADC_IsEnabled>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d176      	bne.n	8006b06 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689a      	ldr	r2, [r3, #8]
 8006a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8006b10 <ADC_Enable+0x114>)
 8006a20:	4013      	ands	r3, r2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00d      	beq.n	8006a42 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a2a:	f043 0210 	orr.w	r2, r3, #16
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a36:	f043 0201 	orr.w	r2, r3, #1
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e062      	b.n	8006b08 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7fe fb93 	bl	8005172 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a54:	d004      	beq.n	8006a60 <ADC_Enable+0x64>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a2e      	ldr	r2, [pc, #184]	@ (8006b14 <ADC_Enable+0x118>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d101      	bne.n	8006a64 <ADC_Enable+0x68>
 8006a60:	4b2d      	ldr	r3, [pc, #180]	@ (8006b18 <ADC_Enable+0x11c>)
 8006a62:	e000      	b.n	8006a66 <ADC_Enable+0x6a>
 8006a64:	4b2d      	ldr	r3, [pc, #180]	@ (8006b1c <ADC_Enable+0x120>)
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fe f97c 	bl	8004d64 <LL_ADC_GetCommonPathInternalCh>
 8006a6c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006a6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d013      	beq.n	8006a9e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006a76:	4b2a      	ldr	r3, [pc, #168]	@ (8006b20 <ADC_Enable+0x124>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	099b      	lsrs	r3, r3, #6
 8006a7c:	4a29      	ldr	r2, [pc, #164]	@ (8006b24 <ADC_Enable+0x128>)
 8006a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a82:	099b      	lsrs	r3, r3, #6
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	4613      	mov	r3, r2
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006a90:	e002      	b.n	8006a98 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1f9      	bne.n	8006a92 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006a9e:	f7fe f8e9 	bl	8004c74 <HAL_GetTick>
 8006aa2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006aa4:	e028      	b.n	8006af8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe fb75 	bl	800519a <LL_ADC_IsEnabled>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d104      	bne.n	8006ac0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe fb59 	bl	8005172 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006ac0:	f7fe f8d8 	bl	8004c74 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d914      	bls.n	8006af8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d00d      	beq.n	8006af8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ae0:	f043 0210 	orr.w	r2, r3, #16
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aec:	f043 0201 	orr.w	r2, r3, #1
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e007      	b.n	8006b08 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d1cf      	bne.n	8006aa6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	8000003f 	.word	0x8000003f
 8006b14:	50000100 	.word	0x50000100
 8006b18:	50000300 	.word	0x50000300
 8006b1c:	50000700 	.word	0x50000700
 8006b20:	20000274 	.word	0x20000274
 8006b24:	053e2d63 	.word	0x053e2d63

08006b28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b34:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b3a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d14b      	bne.n	8006bda <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0308 	and.w	r3, r3, #8
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d021      	beq.n	8006ba0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fe f9ab 	bl	8004ebc <LL_ADC_REG_IsTriggerSourceSWStart>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d032      	beq.n	8006bd2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d12b      	bne.n	8006bd2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b7e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d11f      	bne.n	8006bd2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b96:	f043 0201 	orr.w	r2, r3, #1
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006b9e:	e018      	b.n	8006bd2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d111      	bne.n	8006bd2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bb2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d105      	bne.n	8006bd2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bca:	f043 0201 	orr.w	r2, r3, #1
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f7ff f8a8 	bl	8005d28 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006bd8:	e00e      	b.n	8006bf8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bde:	f003 0310 	and.w	r3, r3, #16
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f7ff f8b2 	bl	8005d50 <HAL_ADC_ErrorCallback>
}
 8006bec:	e004      	b.n	8006bf8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	4798      	blx	r3
}
 8006bf8:	bf00      	nop
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f7fc fafe 	bl	8003210 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c14:	bf00      	nop
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c28:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c3a:	f043 0204 	orr.w	r2, r3, #4
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f7ff f884 	bl	8005d50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c48:	bf00      	nop
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <LL_ADC_IsEnabled>:
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d101      	bne.n	8006c68 <LL_ADC_IsEnabled+0x18>
 8006c64:	2301      	movs	r3, #1
 8006c66:	e000      	b.n	8006c6a <LL_ADC_IsEnabled+0x1a>
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <LL_ADC_REG_IsConversionOngoing>:
{
 8006c76:	b480      	push	{r7}
 8006c78:	b083      	sub	sp, #12
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f003 0304 	and.w	r3, r3, #4
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d101      	bne.n	8006c8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006d00:	b590      	push	{r4, r7, lr}
 8006d02:	b0a1      	sub	sp, #132	@ 0x84
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d101      	bne.n	8006d1e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	e0e7      	b.n	8006eee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006d26:	2300      	movs	r3, #0
 8006d28:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d36:	d102      	bne.n	8006d3e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006d38:	4b6f      	ldr	r3, [pc, #444]	@ (8006ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006d3a:	60bb      	str	r3, [r7, #8]
 8006d3c:	e009      	b.n	8006d52 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a6e      	ldr	r2, [pc, #440]	@ (8006efc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d102      	bne.n	8006d4e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006d48:	4b6d      	ldr	r3, [pc, #436]	@ (8006f00 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006d4a:	60bb      	str	r3, [r7, #8]
 8006d4c:	e001      	b.n	8006d52 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10b      	bne.n	8006d70 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d5c:	f043 0220 	orr.w	r2, r3, #32
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e0be      	b.n	8006eee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff ff7f 	bl	8006c76 <LL_ADC_REG_IsConversionOngoing>
 8006d78:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7ff ff79 	bl	8006c76 <LL_ADC_REG_IsConversionOngoing>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f040 80a0 	bne.w	8006ecc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006d8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f040 809c 	bne.w	8006ecc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d9c:	d004      	beq.n	8006da8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a55      	ldr	r2, [pc, #340]	@ (8006ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d101      	bne.n	8006dac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006da8:	4b56      	ldr	r3, [pc, #344]	@ (8006f04 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006daa:	e000      	b.n	8006dae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006dac:	4b56      	ldr	r3, [pc, #344]	@ (8006f08 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006dae:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d04b      	beq.n	8006e50 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006db8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	6859      	ldr	r1, [r3, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006dca:	035b      	lsls	r3, r3, #13
 8006dcc:	430b      	orrs	r3, r1
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006dd2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ddc:	d004      	beq.n	8006de8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a45      	ldr	r2, [pc, #276]	@ (8006ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d10f      	bne.n	8006e08 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006de8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006dec:	f7ff ff30 	bl	8006c50 <LL_ADC_IsEnabled>
 8006df0:	4604      	mov	r4, r0
 8006df2:	4841      	ldr	r0, [pc, #260]	@ (8006ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006df4:	f7ff ff2c 	bl	8006c50 <LL_ADC_IsEnabled>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	4323      	orrs	r3, r4
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	bf0c      	ite	eq
 8006e00:	2301      	moveq	r3, #1
 8006e02:	2300      	movne	r3, #0
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	e012      	b.n	8006e2e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006e08:	483c      	ldr	r0, [pc, #240]	@ (8006efc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006e0a:	f7ff ff21 	bl	8006c50 <LL_ADC_IsEnabled>
 8006e0e:	4604      	mov	r4, r0
 8006e10:	483b      	ldr	r0, [pc, #236]	@ (8006f00 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006e12:	f7ff ff1d 	bl	8006c50 <LL_ADC_IsEnabled>
 8006e16:	4603      	mov	r3, r0
 8006e18:	431c      	orrs	r4, r3
 8006e1a:	483c      	ldr	r0, [pc, #240]	@ (8006f0c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006e1c:	f7ff ff18 	bl	8006c50 <LL_ADC_IsEnabled>
 8006e20:	4603      	mov	r3, r0
 8006e22:	4323      	orrs	r3, r4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	bf0c      	ite	eq
 8006e28:	2301      	moveq	r3, #1
 8006e2a:	2300      	movne	r3, #0
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d056      	beq.n	8006ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006e32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006e3a:	f023 030f 	bic.w	r3, r3, #15
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	6811      	ldr	r1, [r2, #0]
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	6892      	ldr	r2, [r2, #8]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e4c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006e4e:	e047      	b.n	8006ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006e50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e5a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e64:	d004      	beq.n	8006e70 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a23      	ldr	r2, [pc, #140]	@ (8006ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d10f      	bne.n	8006e90 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006e70:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006e74:	f7ff feec 	bl	8006c50 <LL_ADC_IsEnabled>
 8006e78:	4604      	mov	r4, r0
 8006e7a:	481f      	ldr	r0, [pc, #124]	@ (8006ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006e7c:	f7ff fee8 	bl	8006c50 <LL_ADC_IsEnabled>
 8006e80:	4603      	mov	r3, r0
 8006e82:	4323      	orrs	r3, r4
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	bf0c      	ite	eq
 8006e88:	2301      	moveq	r3, #1
 8006e8a:	2300      	movne	r3, #0
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	e012      	b.n	8006eb6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006e90:	481a      	ldr	r0, [pc, #104]	@ (8006efc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006e92:	f7ff fedd 	bl	8006c50 <LL_ADC_IsEnabled>
 8006e96:	4604      	mov	r4, r0
 8006e98:	4819      	ldr	r0, [pc, #100]	@ (8006f00 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006e9a:	f7ff fed9 	bl	8006c50 <LL_ADC_IsEnabled>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	431c      	orrs	r4, r3
 8006ea2:	481a      	ldr	r0, [pc, #104]	@ (8006f0c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006ea4:	f7ff fed4 	bl	8006c50 <LL_ADC_IsEnabled>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	4323      	orrs	r3, r4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	bf0c      	ite	eq
 8006eb0:	2301      	moveq	r3, #1
 8006eb2:	2300      	movne	r3, #0
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d012      	beq.n	8006ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006eba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006ec2:	f023 030f 	bic.w	r3, r3, #15
 8006ec6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006ec8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006eca:	e009      	b.n	8006ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ed0:	f043 0220 	orr.w	r2, r3, #32
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006ede:	e000      	b.n	8006ee2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006ee0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006eea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3784      	adds	r7, #132	@ 0x84
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd90      	pop	{r4, r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	50000100 	.word	0x50000100
 8006efc:	50000400 	.word	0x50000400
 8006f00:	50000500 	.word	0x50000500
 8006f04:	50000300 	.word	0x50000300
 8006f08:	50000700 	.word	0x50000700
 8006f0c:	50000600 	.word	0x50000600

08006f10 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006f18:	4b05      	ldr	r3, [pc, #20]	@ (8006f30 <LL_EXTI_EnableIT_0_31+0x20>)
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	4904      	ldr	r1, [pc, #16]	@ (8006f30 <LL_EXTI_EnableIT_0_31+0x20>)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	600b      	str	r3, [r1, #0]
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	40010400 	.word	0x40010400

08006f34 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006f3c:	4b05      	ldr	r3, [pc, #20]	@ (8006f54 <LL_EXTI_EnableIT_32_63+0x20>)
 8006f3e:	6a1a      	ldr	r2, [r3, #32]
 8006f40:	4904      	ldr	r1, [pc, #16]	@ (8006f54 <LL_EXTI_EnableIT_32_63+0x20>)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	620b      	str	r3, [r1, #32]
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	40010400 	.word	0x40010400

08006f58 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006f60:	4b06      	ldr	r3, [pc, #24]	@ (8006f7c <LL_EXTI_DisableIT_0_31+0x24>)
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	43db      	mvns	r3, r3
 8006f68:	4904      	ldr	r1, [pc, #16]	@ (8006f7c <LL_EXTI_DisableIT_0_31+0x24>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	600b      	str	r3, [r1, #0]
}
 8006f6e:	bf00      	nop
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	40010400 	.word	0x40010400

08006f80 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8006f88:	4b06      	ldr	r3, [pc, #24]	@ (8006fa4 <LL_EXTI_DisableIT_32_63+0x24>)
 8006f8a:	6a1a      	ldr	r2, [r3, #32]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	43db      	mvns	r3, r3
 8006f90:	4904      	ldr	r1, [pc, #16]	@ (8006fa4 <LL_EXTI_DisableIT_32_63+0x24>)
 8006f92:	4013      	ands	r3, r2
 8006f94:	620b      	str	r3, [r1, #32]
}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	40010400 	.word	0x40010400

08006fa8 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006fb0:	4b05      	ldr	r3, [pc, #20]	@ (8006fc8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	4904      	ldr	r1, [pc, #16]	@ (8006fc8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	604b      	str	r3, [r1, #4]

}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	40010400 	.word	0x40010400

08006fcc <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8006fd4:	4b05      	ldr	r3, [pc, #20]	@ (8006fec <LL_EXTI_EnableEvent_32_63+0x20>)
 8006fd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fd8:	4904      	ldr	r1, [pc, #16]	@ (8006fec <LL_EXTI_EnableEvent_32_63+0x20>)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	40010400 	.word	0x40010400

08006ff0 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006ff8:	4b06      	ldr	r3, [pc, #24]	@ (8007014 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	43db      	mvns	r3, r3
 8007000:	4904      	ldr	r1, [pc, #16]	@ (8007014 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007002:	4013      	ands	r3, r2
 8007004:	604b      	str	r3, [r1, #4]
}
 8007006:	bf00      	nop
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	40010400 	.word	0x40010400

08007018 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8007020:	4b06      	ldr	r3, [pc, #24]	@ (800703c <LL_EXTI_DisableEvent_32_63+0x24>)
 8007022:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	43db      	mvns	r3, r3
 8007028:	4904      	ldr	r1, [pc, #16]	@ (800703c <LL_EXTI_DisableEvent_32_63+0x24>)
 800702a:	4013      	ands	r3, r2
 800702c:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800702e:	bf00      	nop
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40010400 	.word	0x40010400

08007040 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007048:	4b05      	ldr	r3, [pc, #20]	@ (8007060 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	4904      	ldr	r1, [pc, #16]	@ (8007060 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4313      	orrs	r3, r2
 8007052:	608b      	str	r3, [r1, #8]

}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	40010400 	.word	0x40010400

08007064 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800706c:	4b05      	ldr	r3, [pc, #20]	@ (8007084 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800706e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007070:	4904      	ldr	r1, [pc, #16]	@ (8007084 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4313      	orrs	r3, r2
 8007076:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	40010400 	.word	0x40010400

08007088 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007090:	4b06      	ldr	r3, [pc, #24]	@ (80070ac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	43db      	mvns	r3, r3
 8007098:	4904      	ldr	r1, [pc, #16]	@ (80070ac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800709a:	4013      	ands	r3, r2
 800709c:	608b      	str	r3, [r1, #8]

}
 800709e:	bf00      	nop
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	40010400 	.word	0x40010400

080070b0 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80070b8:	4b06      	ldr	r3, [pc, #24]	@ (80070d4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80070ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	43db      	mvns	r3, r3
 80070c0:	4904      	ldr	r1, [pc, #16]	@ (80070d4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80070c2:	4013      	ands	r3, r2
 80070c4:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	40010400 	.word	0x40010400

080070d8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80070e0:	4b05      	ldr	r3, [pc, #20]	@ (80070f8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80070e2:	68da      	ldr	r2, [r3, #12]
 80070e4:	4904      	ldr	r1, [pc, #16]	@ (80070f8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60cb      	str	r3, [r1, #12]
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	40010400 	.word	0x40010400

080070fc <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8007104:	4b05      	ldr	r3, [pc, #20]	@ (800711c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007108:	4904      	ldr	r1, [pc, #16]	@ (800711c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4313      	orrs	r3, r2
 800710e:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	40010400 	.word	0x40010400

08007120 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007128:	4b06      	ldr	r3, [pc, #24]	@ (8007144 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800712a:	68da      	ldr	r2, [r3, #12]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	43db      	mvns	r3, r3
 8007130:	4904      	ldr	r1, [pc, #16]	@ (8007144 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007132:	4013      	ands	r3, r2
 8007134:	60cb      	str	r3, [r1, #12]
}
 8007136:	bf00      	nop
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	40010400 	.word	0x40010400

08007148 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8007150:	4b06      	ldr	r3, [pc, #24]	@ (800716c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	43db      	mvns	r3, r3
 8007158:	4904      	ldr	r1, [pc, #16]	@ (800716c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800715a:	4013      	ands	r3, r2
 800715c:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40010400 	.word	0x40010400

08007170 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007178:	4a04      	ldr	r2, [pc, #16]	@ (800718c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6153      	str	r3, [r2, #20]
}
 800717e:	bf00      	nop
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	40010400 	.word	0x40010400

08007190 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8007198:	4a04      	ldr	r2, [pc, #16]	@ (80071ac <LL_EXTI_ClearFlag_32_63+0x1c>)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800719e:	bf00      	nop
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	40010400 	.word	0x40010400

080071b0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80071b8:	2300      	movs	r3, #0
 80071ba:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d102      	bne.n	80071cc <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	77fb      	strb	r3, [r7, #31]
 80071ca:	e181      	b.n	80074d0 <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071da:	d102      	bne.n	80071e2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	77fb      	strb	r3, [r7, #31]
 80071e0:	e176      	b.n	80074d0 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	7f5b      	ldrb	r3, [r3, #29]
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d108      	bne.n	80071fe <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7fc fcbb 	bl	8003b74 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007208:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8007224:	4313      	orrs	r3, r2
 8007226:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	4b90      	ldr	r3, [pc, #576]	@ (8007470 <HAL_COMP_Init+0x2c0>)
 8007230:	4013      	ands	r3, r2
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	6812      	ldr	r2, [r2, #0]
 8007236:	6979      	ldr	r1, [r7, #20]
 8007238:	430b      	orrs	r3, r1
 800723a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d016      	beq.n	8007278 <HAL_COMP_Init+0xc8>
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d113      	bne.n	8007278 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007250:	4b88      	ldr	r3, [pc, #544]	@ (8007474 <HAL_COMP_Init+0x2c4>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	099b      	lsrs	r3, r3, #6
 8007256:	4a88      	ldr	r2, [pc, #544]	@ (8007478 <HAL_COMP_Init+0x2c8>)
 8007258:	fba2 2303 	umull	r2, r3, r2, r3
 800725c:	099b      	lsrs	r3, r3, #6
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	4613      	mov	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800726a:	e002      	b.n	8007272 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	3b01      	subs	r3, #1
 8007270:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1f9      	bne.n	800726c <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a7f      	ldr	r2, [pc, #508]	@ (800747c <HAL_COMP_Init+0x2cc>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d028      	beq.n	80072d4 <HAL_COMP_Init+0x124>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a7e      	ldr	r2, [pc, #504]	@ (8007480 <HAL_COMP_Init+0x2d0>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d020      	beq.n	80072ce <HAL_COMP_Init+0x11e>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a7c      	ldr	r2, [pc, #496]	@ (8007484 <HAL_COMP_Init+0x2d4>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d018      	beq.n	80072c8 <HAL_COMP_Init+0x118>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a7b      	ldr	r2, [pc, #492]	@ (8007488 <HAL_COMP_Init+0x2d8>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d010      	beq.n	80072c2 <HAL_COMP_Init+0x112>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a79      	ldr	r2, [pc, #484]	@ (800748c <HAL_COMP_Init+0x2dc>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d008      	beq.n	80072bc <HAL_COMP_Init+0x10c>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a78      	ldr	r2, [pc, #480]	@ (8007490 <HAL_COMP_Init+0x2e0>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d101      	bne.n	80072b8 <HAL_COMP_Init+0x108>
 80072b4:	2301      	movs	r3, #1
 80072b6:	e00f      	b.n	80072d8 <HAL_COMP_Init+0x128>
 80072b8:	2302      	movs	r3, #2
 80072ba:	e00d      	b.n	80072d8 <HAL_COMP_Init+0x128>
 80072bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80072c0:	e00a      	b.n	80072d8 <HAL_COMP_Init+0x128>
 80072c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80072c6:	e007      	b.n	80072d8 <HAL_COMP_Init+0x128>
 80072c8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80072cc:	e004      	b.n	80072d8 <HAL_COMP_Init+0x128>
 80072ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80072d2:	e001      	b.n	80072d8 <HAL_COMP_Init+0x128>
 80072d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80072d8:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	f003 0303 	and.w	r3, r3, #3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f000 80b6 	beq.w	8007454 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	f003 0310 	and.w	r3, r3, #16
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d011      	beq.n	8007318 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a65      	ldr	r2, [pc, #404]	@ (8007490 <HAL_COMP_Init+0x2e0>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d004      	beq.n	8007308 <HAL_COMP_Init+0x158>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a64      	ldr	r2, [pc, #400]	@ (8007494 <HAL_COMP_Init+0x2e4>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d103      	bne.n	8007310 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8007308:	6938      	ldr	r0, [r7, #16]
 800730a:	f7ff feab 	bl	8007064 <LL_EXTI_EnableRisingTrig_32_63>
 800730e:	e014      	b.n	800733a <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007310:	6938      	ldr	r0, [r7, #16]
 8007312:	f7ff fe95 	bl	8007040 <LL_EXTI_EnableRisingTrig_0_31>
 8007316:	e010      	b.n	800733a <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a5c      	ldr	r2, [pc, #368]	@ (8007490 <HAL_COMP_Init+0x2e0>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d004      	beq.n	800732c <HAL_COMP_Init+0x17c>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a5b      	ldr	r2, [pc, #364]	@ (8007494 <HAL_COMP_Init+0x2e4>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d103      	bne.n	8007334 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800732c:	6938      	ldr	r0, [r7, #16]
 800732e:	f7ff febf 	bl	80070b0 <LL_EXTI_DisableRisingTrig_32_63>
 8007332:	e002      	b.n	800733a <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007334:	6938      	ldr	r0, [r7, #16]
 8007336:	f7ff fea7 	bl	8007088 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	f003 0320 	and.w	r3, r3, #32
 8007342:	2b00      	cmp	r3, #0
 8007344:	d011      	beq.n	800736a <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a51      	ldr	r2, [pc, #324]	@ (8007490 <HAL_COMP_Init+0x2e0>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d004      	beq.n	800735a <HAL_COMP_Init+0x1aa>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a4f      	ldr	r2, [pc, #316]	@ (8007494 <HAL_COMP_Init+0x2e4>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d103      	bne.n	8007362 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800735a:	6938      	ldr	r0, [r7, #16]
 800735c:	f7ff fece 	bl	80070fc <LL_EXTI_EnableFallingTrig_32_63>
 8007360:	e014      	b.n	800738c <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007362:	6938      	ldr	r0, [r7, #16]
 8007364:	f7ff feb8 	bl	80070d8 <LL_EXTI_EnableFallingTrig_0_31>
 8007368:	e010      	b.n	800738c <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a48      	ldr	r2, [pc, #288]	@ (8007490 <HAL_COMP_Init+0x2e0>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d004      	beq.n	800737e <HAL_COMP_Init+0x1ce>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a46      	ldr	r2, [pc, #280]	@ (8007494 <HAL_COMP_Init+0x2e4>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d103      	bne.n	8007386 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800737e:	6938      	ldr	r0, [r7, #16]
 8007380:	f7ff fee2 	bl	8007148 <LL_EXTI_DisableFallingTrig_32_63>
 8007384:	e002      	b.n	800738c <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007386:	6938      	ldr	r0, [r7, #16]
 8007388:	f7ff feca 	bl	8007120 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a3f      	ldr	r2, [pc, #252]	@ (8007490 <HAL_COMP_Init+0x2e0>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d004      	beq.n	80073a0 <HAL_COMP_Init+0x1f0>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a3e      	ldr	r2, [pc, #248]	@ (8007494 <HAL_COMP_Init+0x2e4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d103      	bne.n	80073a8 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80073a0:	6938      	ldr	r0, [r7, #16]
 80073a2:	f7ff fef5 	bl	8007190 <LL_EXTI_ClearFlag_32_63>
 80073a6:	e002      	b.n	80073ae <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80073a8:	6938      	ldr	r0, [r7, #16]
 80073aa:	f7ff fee1 	bl	8007170 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d011      	beq.n	80073de <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a34      	ldr	r2, [pc, #208]	@ (8007490 <HAL_COMP_Init+0x2e0>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d004      	beq.n	80073ce <HAL_COMP_Init+0x21e>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a32      	ldr	r2, [pc, #200]	@ (8007494 <HAL_COMP_Init+0x2e4>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d103      	bne.n	80073d6 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80073ce:	6938      	ldr	r0, [r7, #16]
 80073d0:	f7ff fdfc 	bl	8006fcc <LL_EXTI_EnableEvent_32_63>
 80073d4:	e014      	b.n	8007400 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80073d6:	6938      	ldr	r0, [r7, #16]
 80073d8:	f7ff fde6 	bl	8006fa8 <LL_EXTI_EnableEvent_0_31>
 80073dc:	e010      	b.n	8007400 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a2b      	ldr	r2, [pc, #172]	@ (8007490 <HAL_COMP_Init+0x2e0>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d004      	beq.n	80073f2 <HAL_COMP_Init+0x242>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a29      	ldr	r2, [pc, #164]	@ (8007494 <HAL_COMP_Init+0x2e4>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d103      	bne.n	80073fa <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80073f2:	6938      	ldr	r0, [r7, #16]
 80073f4:	f7ff fe10 	bl	8007018 <LL_EXTI_DisableEvent_32_63>
 80073f8:	e002      	b.n	8007400 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80073fa:	6938      	ldr	r0, [r7, #16]
 80073fc:	f7ff fdf8 	bl	8006ff0 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b00      	cmp	r3, #0
 800740a:	d011      	beq.n	8007430 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a1f      	ldr	r2, [pc, #124]	@ (8007490 <HAL_COMP_Init+0x2e0>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d004      	beq.n	8007420 <HAL_COMP_Init+0x270>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a1e      	ldr	r2, [pc, #120]	@ (8007494 <HAL_COMP_Init+0x2e4>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d103      	bne.n	8007428 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8007420:	6938      	ldr	r0, [r7, #16]
 8007422:	f7ff fd87 	bl	8006f34 <LL_EXTI_EnableIT_32_63>
 8007426:	e04b      	b.n	80074c0 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8007428:	6938      	ldr	r0, [r7, #16]
 800742a:	f7ff fd71 	bl	8006f10 <LL_EXTI_EnableIT_0_31>
 800742e:	e047      	b.n	80074c0 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a16      	ldr	r2, [pc, #88]	@ (8007490 <HAL_COMP_Init+0x2e0>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d004      	beq.n	8007444 <HAL_COMP_Init+0x294>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a15      	ldr	r2, [pc, #84]	@ (8007494 <HAL_COMP_Init+0x2e4>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d103      	bne.n	800744c <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8007444:	6938      	ldr	r0, [r7, #16]
 8007446:	f7ff fd9b 	bl	8006f80 <LL_EXTI_DisableIT_32_63>
 800744a:	e039      	b.n	80074c0 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800744c:	6938      	ldr	r0, [r7, #16]
 800744e:	f7ff fd83 	bl	8006f58 <LL_EXTI_DisableIT_0_31>
 8007452:	e035      	b.n	80074c0 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a0d      	ldr	r2, [pc, #52]	@ (8007490 <HAL_COMP_Init+0x2e0>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d004      	beq.n	8007468 <HAL_COMP_Init+0x2b8>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a0c      	ldr	r2, [pc, #48]	@ (8007494 <HAL_COMP_Init+0x2e4>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d117      	bne.n	8007498 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8007468:	6938      	ldr	r0, [r7, #16]
 800746a:	f7ff fdd5 	bl	8007018 <LL_EXTI_DisableEvent_32_63>
 800746e:	e016      	b.n	800749e <HAL_COMP_Init+0x2ee>
 8007470:	ff007e0f 	.word	0xff007e0f
 8007474:	20000274 	.word	0x20000274
 8007478:	053e2d63 	.word	0x053e2d63
 800747c:	40010200 	.word	0x40010200
 8007480:	40010204 	.word	0x40010204
 8007484:	40010208 	.word	0x40010208
 8007488:	4001020c 	.word	0x4001020c
 800748c:	40010210 	.word	0x40010210
 8007490:	40010214 	.word	0x40010214
 8007494:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007498:	6938      	ldr	r0, [r7, #16]
 800749a:	f7ff fda9 	bl	8006ff0 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a0e      	ldr	r2, [pc, #56]	@ (80074dc <HAL_COMP_Init+0x32c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d004      	beq.n	80074b2 <HAL_COMP_Init+0x302>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a0c      	ldr	r2, [pc, #48]	@ (80074e0 <HAL_COMP_Init+0x330>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d103      	bne.n	80074ba <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80074b2:	6938      	ldr	r0, [r7, #16]
 80074b4:	f7ff fd64 	bl	8006f80 <LL_EXTI_DisableIT_32_63>
 80074b8:	e002      	b.n	80074c0 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80074ba:	6938      	ldr	r0, [r7, #16]
 80074bc:	f7ff fd4c 	bl	8006f58 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	7f5b      	ldrb	r3, [r3, #29]
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d102      	bne.n	80074d0 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80074d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3720      	adds	r7, #32
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	40010214 	.word	0x40010214
 80074e0:	40010218 	.word	0x40010218

080074e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f003 0307 	and.w	r3, r3, #7
 80074f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80074f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007528 <__NVIC_SetPriorityGrouping+0x44>)
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007500:	4013      	ands	r3, r2
 8007502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800750c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007516:	4a04      	ldr	r2, [pc, #16]	@ (8007528 <__NVIC_SetPriorityGrouping+0x44>)
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	60d3      	str	r3, [r2, #12]
}
 800751c:	bf00      	nop
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	e000ed00 	.word	0xe000ed00

0800752c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007530:	4b04      	ldr	r3, [pc, #16]	@ (8007544 <__NVIC_GetPriorityGrouping+0x18>)
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	0a1b      	lsrs	r3, r3, #8
 8007536:	f003 0307 	and.w	r3, r3, #7
}
 800753a:	4618      	mov	r0, r3
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	e000ed00 	.word	0xe000ed00

08007548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	4603      	mov	r3, r0
 8007550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007556:	2b00      	cmp	r3, #0
 8007558:	db0b      	blt.n	8007572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800755a:	79fb      	ldrb	r3, [r7, #7]
 800755c:	f003 021f 	and.w	r2, r3, #31
 8007560:	4907      	ldr	r1, [pc, #28]	@ (8007580 <__NVIC_EnableIRQ+0x38>)
 8007562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	2001      	movs	r0, #1
 800756a:	fa00 f202 	lsl.w	r2, r0, r2
 800756e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007572:	bf00      	nop
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	e000e100 	.word	0xe000e100

08007584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	4603      	mov	r3, r0
 800758c:	6039      	str	r1, [r7, #0]
 800758e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007594:	2b00      	cmp	r3, #0
 8007596:	db0a      	blt.n	80075ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	b2da      	uxtb	r2, r3
 800759c:	490c      	ldr	r1, [pc, #48]	@ (80075d0 <__NVIC_SetPriority+0x4c>)
 800759e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075a2:	0112      	lsls	r2, r2, #4
 80075a4:	b2d2      	uxtb	r2, r2
 80075a6:	440b      	add	r3, r1
 80075a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80075ac:	e00a      	b.n	80075c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	4908      	ldr	r1, [pc, #32]	@ (80075d4 <__NVIC_SetPriority+0x50>)
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	f003 030f 	and.w	r3, r3, #15
 80075ba:	3b04      	subs	r3, #4
 80075bc:	0112      	lsls	r2, r2, #4
 80075be:	b2d2      	uxtb	r2, r2
 80075c0:	440b      	add	r3, r1
 80075c2:	761a      	strb	r2, [r3, #24]
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	e000e100 	.word	0xe000e100
 80075d4:	e000ed00 	.word	0xe000ed00

080075d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80075d8:	b480      	push	{r7}
 80075da:	b089      	sub	sp, #36	@ 0x24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	f1c3 0307 	rsb	r3, r3, #7
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	bf28      	it	cs
 80075f6:	2304      	movcs	r3, #4
 80075f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	3304      	adds	r3, #4
 80075fe:	2b06      	cmp	r3, #6
 8007600:	d902      	bls.n	8007608 <NVIC_EncodePriority+0x30>
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	3b03      	subs	r3, #3
 8007606:	e000      	b.n	800760a <NVIC_EncodePriority+0x32>
 8007608:	2300      	movs	r3, #0
 800760a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800760c:	f04f 32ff 	mov.w	r2, #4294967295
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	fa02 f303 	lsl.w	r3, r2, r3
 8007616:	43da      	mvns	r2, r3
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	401a      	ands	r2, r3
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007620:	f04f 31ff 	mov.w	r1, #4294967295
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	fa01 f303 	lsl.w	r3, r1, r3
 800762a:	43d9      	mvns	r1, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007630:	4313      	orrs	r3, r2
         );
}
 8007632:	4618      	mov	r0, r3
 8007634:	3724      	adds	r7, #36	@ 0x24
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
	...

08007640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	3b01      	subs	r3, #1
 800764c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007650:	d301      	bcc.n	8007656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007652:	2301      	movs	r3, #1
 8007654:	e00f      	b.n	8007676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007656:	4a0a      	ldr	r2, [pc, #40]	@ (8007680 <SysTick_Config+0x40>)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3b01      	subs	r3, #1
 800765c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800765e:	210f      	movs	r1, #15
 8007660:	f04f 30ff 	mov.w	r0, #4294967295
 8007664:	f7ff ff8e 	bl	8007584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007668:	4b05      	ldr	r3, [pc, #20]	@ (8007680 <SysTick_Config+0x40>)
 800766a:	2200      	movs	r2, #0
 800766c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800766e:	4b04      	ldr	r3, [pc, #16]	@ (8007680 <SysTick_Config+0x40>)
 8007670:	2207      	movs	r2, #7
 8007672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	e000e010 	.word	0xe000e010

08007684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7ff ff29 	bl	80074e4 <__NVIC_SetPriorityGrouping>
}
 8007692:	bf00      	nop
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b086      	sub	sp, #24
 800769e:	af00      	add	r7, sp, #0
 80076a0:	4603      	mov	r3, r0
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	607a      	str	r2, [r7, #4]
 80076a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80076a8:	f7ff ff40 	bl	800752c <__NVIC_GetPriorityGrouping>
 80076ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	68b9      	ldr	r1, [r7, #8]
 80076b2:	6978      	ldr	r0, [r7, #20]
 80076b4:	f7ff ff90 	bl	80075d8 <NVIC_EncodePriority>
 80076b8:	4602      	mov	r2, r0
 80076ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076be:	4611      	mov	r1, r2
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7ff ff5f 	bl	8007584 <__NVIC_SetPriority>
}
 80076c6:	bf00      	nop
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b082      	sub	sp, #8
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	4603      	mov	r3, r0
 80076d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80076d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076dc:	4618      	mov	r0, r3
 80076de:	f7ff ff33 	bl	8007548 <__NVIC_EnableIRQ>
}
 80076e2:	bf00      	nop
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff ffa4 	bl	8007640 <SysTick_Config>
 80076f8:	4603      	mov	r3, r0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e054      	b.n	80077c0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	7f5b      	ldrb	r3, [r3, #29]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	d105      	bne.n	800772c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7fc fa7a 	bl	8003c20 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	791b      	ldrb	r3, [r3, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10c      	bne.n	8007754 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a22      	ldr	r2, [pc, #136]	@ (80077c8 <HAL_CRC_Init+0xc4>)
 8007740:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 0218 	bic.w	r2, r2, #24
 8007750:	609a      	str	r2, [r3, #8]
 8007752:	e00c      	b.n	800776e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6899      	ldr	r1, [r3, #8]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	461a      	mov	r2, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f834 	bl	80077cc <HAL_CRCEx_Polynomial_Set>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e028      	b.n	80077c0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	795b      	ldrb	r3, [r3, #5]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d105      	bne.n	8007782 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f04f 32ff 	mov.w	r2, #4294967295
 800777e:	611a      	str	r2, [r3, #16]
 8007780:	e004      	b.n	800778c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	6912      	ldr	r2, [r2, #16]
 800778a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	695a      	ldr	r2, [r3, #20]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	699a      	ldr	r2, [r3, #24]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	04c11db7 	.word	0x04c11db7

080077cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80077dc:	231f      	movs	r3, #31
 80077de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d102      	bne.n	80077f0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	75fb      	strb	r3, [r7, #23]
 80077ee:	e063      	b.n	80078b8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80077f0:	bf00      	nop
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	1e5a      	subs	r2, r3, #1
 80077f6:	613a      	str	r2, [r7, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d009      	beq.n	8007810 <HAL_CRCEx_Polynomial_Set+0x44>
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	f003 031f 	and.w	r3, r3, #31
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	fa22 f303 	lsr.w	r3, r2, r3
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0f0      	beq.n	80077f2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b18      	cmp	r3, #24
 8007814:	d846      	bhi.n	80078a4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8007816:	a201      	add	r2, pc, #4	@ (adr r2, 800781c <HAL_CRCEx_Polynomial_Set+0x50>)
 8007818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781c:	080078ab 	.word	0x080078ab
 8007820:	080078a5 	.word	0x080078a5
 8007824:	080078a5 	.word	0x080078a5
 8007828:	080078a5 	.word	0x080078a5
 800782c:	080078a5 	.word	0x080078a5
 8007830:	080078a5 	.word	0x080078a5
 8007834:	080078a5 	.word	0x080078a5
 8007838:	080078a5 	.word	0x080078a5
 800783c:	08007899 	.word	0x08007899
 8007840:	080078a5 	.word	0x080078a5
 8007844:	080078a5 	.word	0x080078a5
 8007848:	080078a5 	.word	0x080078a5
 800784c:	080078a5 	.word	0x080078a5
 8007850:	080078a5 	.word	0x080078a5
 8007854:	080078a5 	.word	0x080078a5
 8007858:	080078a5 	.word	0x080078a5
 800785c:	0800788d 	.word	0x0800788d
 8007860:	080078a5 	.word	0x080078a5
 8007864:	080078a5 	.word	0x080078a5
 8007868:	080078a5 	.word	0x080078a5
 800786c:	080078a5 	.word	0x080078a5
 8007870:	080078a5 	.word	0x080078a5
 8007874:	080078a5 	.word	0x080078a5
 8007878:	080078a5 	.word	0x080078a5
 800787c:	08007881 	.word	0x08007881
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	2b06      	cmp	r3, #6
 8007884:	d913      	bls.n	80078ae <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800788a:	e010      	b.n	80078ae <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	2b07      	cmp	r3, #7
 8007890:	d90f      	bls.n	80078b2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007896:	e00c      	b.n	80078b2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	2b0f      	cmp	r3, #15
 800789c:	d90b      	bls.n	80078b6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80078a2:	e008      	b.n	80078b6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	75fb      	strb	r3, [r7, #23]
        break;
 80078a8:	e006      	b.n	80078b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80078aa:	bf00      	nop
 80078ac:	e004      	b.n	80078b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80078ae:	bf00      	nop
 80078b0:	e002      	b.n	80078b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80078b2:	bf00      	nop
 80078b4:	e000      	b.n	80078b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80078b6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10d      	bne.n	80078da <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f023 0118 	bic.w	r1, r3, #24
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80078da:	7dfb      	ldrb	r3, [r7, #23]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	371c      	adds	r7, #28
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e014      	b.n	8007924 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	791b      	ldrb	r3, [r3, #4]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b00      	cmp	r3, #0
 8007902:	d105      	bne.n	8007910 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7fc f9a8 	bl	8003c60 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2202      	movs	r2, #2
 8007914:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e056      	b.n	80079ee <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	795b      	ldrb	r3, [r3, #5]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d101      	bne.n	800794c <HAL_DAC_Start+0x20>
 8007948:	2302      	movs	r3, #2
 800794a:	e050      	b.n	80079ee <HAL_DAC_Start+0xc2>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2202      	movs	r2, #2
 8007956:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6819      	ldr	r1, [r3, #0]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	f003 0310 	and.w	r3, r3, #16
 8007964:	2201      	movs	r2, #1
 8007966:	409a      	lsls	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	430a      	orrs	r2, r1
 800796e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007970:	4b22      	ldr	r3, [pc, #136]	@ (80079fc <HAL_DAC_Start+0xd0>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	099b      	lsrs	r3, r3, #6
 8007976:	4a22      	ldr	r2, [pc, #136]	@ (8007a00 <HAL_DAC_Start+0xd4>)
 8007978:	fba2 2303 	umull	r2, r3, r2, r3
 800797c:	099b      	lsrs	r3, r3, #6
 800797e:	3301      	adds	r3, #1
 8007980:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8007982:	e002      	b.n	800798a <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3b01      	subs	r3, #1
 8007988:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1f9      	bne.n	8007984 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10f      	bne.n	80079b6 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d11d      	bne.n	80079e0 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f042 0201 	orr.w	r2, r2, #1
 80079b2:	605a      	str	r2, [r3, #4]
 80079b4:	e014      	b.n	80079e0 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	f003 0310 	and.w	r3, r3, #16
 80079c6:	2102      	movs	r1, #2
 80079c8:	fa01 f303 	lsl.w	r3, r1, r3
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d107      	bne.n	80079e0 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f042 0202 	orr.w	r2, r2, #2
 80079de:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	20000274 	.word	0x20000274
 8007a00:	053e2d63 	.word	0x053e2d63

08007a04 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
 8007a10:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e018      	b.n	8007a52 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d105      	bne.n	8007a3e <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4413      	add	r3, r2
 8007a38:	3308      	adds	r3, #8
 8007a3a:	617b      	str	r3, [r7, #20]
 8007a3c:	e004      	b.n	8007a48 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4413      	add	r3, r2
 8007a44:	3314      	adds	r3, #20
 8007a46:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	371c      	adds	r7, #28
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
	...

08007a60 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b08a      	sub	sp, #40	@ 0x28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d002      	beq.n	8007a7c <HAL_DAC_ConfigChannel+0x1c>
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e1a1      	b.n	8007dc4 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	795b      	ldrb	r3, [r3, #5]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d101      	bne.n	8007a92 <HAL_DAC_ConfigChannel+0x32>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e198      	b.n	8007dc4 <HAL_DAC_ConfigChannel+0x364>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2201      	movs	r2, #1
 8007a96:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	d17a      	bne.n	8007b9c <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007aa6:	f7fd f8e5 	bl	8004c74 <HAL_GetTick>
 8007aaa:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d13d      	bne.n	8007b2e <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007ab2:	e018      	b.n	8007ae6 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007ab4:	f7fd f8de 	bl	8004c74 <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d911      	bls.n	8007ae6 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ac8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00a      	beq.n	8007ae6 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	f043 0208 	orr.w	r2, r3, #8
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2203      	movs	r2, #3
 8007ae0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e16e      	b.n	8007dc4 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1df      	bne.n	8007ab4 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007afc:	641a      	str	r2, [r3, #64]	@ 0x40
 8007afe:	e020      	b.n	8007b42 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007b00:	f7fd f8b8 	bl	8004c74 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d90f      	bls.n	8007b2e <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	da0a      	bge.n	8007b2e <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	f043 0208 	orr.w	r2, r3, #8
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2203      	movs	r2, #3
 8007b28:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e14a      	b.n	8007dc4 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	dbe3      	blt.n	8007b00 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007b40:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f003 0310 	and.w	r3, r3, #16
 8007b4e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8007b52:	fa01 f303 	lsl.w	r3, r1, r3
 8007b56:	43db      	mvns	r3, r3
 8007b58:	ea02 0103 	and.w	r1, r2, r3
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f003 0310 	and.w	r3, r3, #16
 8007b66:	409a      	lsls	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f003 0310 	and.w	r3, r3, #16
 8007b7c:	21ff      	movs	r1, #255	@ 0xff
 8007b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b82:	43db      	mvns	r3, r3
 8007b84:	ea02 0103 	and.w	r1, r2, r3
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f003 0310 	and.w	r3, r3, #16
 8007b92:	409a      	lsls	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d11d      	bne.n	8007be0 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007baa:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f003 0310 	and.w	r3, r3, #16
 8007bb2:	221f      	movs	r2, #31
 8007bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb8:	43db      	mvns	r3, r3
 8007bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	6a1b      	ldr	r3, [r3, #32]
 8007bc4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f003 0310 	and.w	r3, r3, #16
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bde:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007be6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f003 0310 	and.w	r3, r3, #16
 8007bee:	2207      	movs	r2, #7
 8007bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf4:	43db      	mvns	r3, r3
 8007bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d102      	bne.n	8007c0a <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8007c04:	2300      	movs	r3, #0
 8007c06:	623b      	str	r3, [r7, #32]
 8007c08:	e00f      	b.n	8007c2a <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d102      	bne.n	8007c18 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007c12:	2301      	movs	r3, #1
 8007c14:	623b      	str	r3, [r7, #32]
 8007c16:	e008      	b.n	8007c2a <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d102      	bne.n	8007c26 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007c20:	2301      	movs	r3, #1
 8007c22:	623b      	str	r3, [r7, #32]
 8007c24:	e001      	b.n	8007c2a <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	689a      	ldr	r2, [r3, #8]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	6a3a      	ldr	r2, [r7, #32]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f003 0310 	and.w	r3, r3, #16
 8007c40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c44:	fa02 f303 	lsl.w	r3, r2, r3
 8007c48:	43db      	mvns	r3, r3
 8007c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	791b      	ldrb	r3, [r3, #4]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d102      	bne.n	8007c5e <HAL_DAC_ConfigChannel+0x1fe>
 8007c58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c5c:	e000      	b.n	8007c60 <HAL_DAC_ConfigChannel+0x200>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f003 0310 	and.w	r3, r3, #16
 8007c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c70:	fa02 f303 	lsl.w	r3, r2, r3
 8007c74:	43db      	mvns	r3, r3
 8007c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c78:	4013      	ands	r3, r2
 8007c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	795b      	ldrb	r3, [r3, #5]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d102      	bne.n	8007c8a <HAL_DAC_ConfigChannel+0x22a>
 8007c84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c88:	e000      	b.n	8007c8c <HAL_DAC_ConfigChannel+0x22c>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8007c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c94:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8007c98:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d114      	bne.n	8007ccc <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8007ca2:	f004 fd3d 	bl	800c720 <HAL_RCC_GetHCLKFreq>
 8007ca6:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	4a48      	ldr	r2, [pc, #288]	@ (8007dcc <HAL_DAC_ConfigChannel+0x36c>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d904      	bls.n	8007cba <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cb8:	e00f      	b.n	8007cda <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	4a44      	ldr	r2, [pc, #272]	@ (8007dd0 <HAL_DAC_ConfigChannel+0x370>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d90a      	bls.n	8007cd8 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cca:	e006      	b.n	8007cda <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cd6:	e000      	b.n	8007cda <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8007cd8:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f003 0310 	and.w	r3, r3, #16
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cf2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6819      	ldr	r1, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f003 0310 	and.w	r3, r3, #16
 8007d00:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007d04:	fa02 f303 	lsl.w	r3, r2, r3
 8007d08:	43da      	mvns	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	400a      	ands	r2, r1
 8007d10:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f003 0310 	and.w	r3, r3, #16
 8007d20:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8007d24:	fa02 f303 	lsl.w	r3, r2, r3
 8007d28:	43db      	mvns	r3, r3
 8007d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f003 0310 	and.w	r3, r3, #16
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d44:	4313      	orrs	r3, r2
 8007d46:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d4e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6819      	ldr	r1, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f003 0310 	and.w	r3, r3, #16
 8007d5c:	22c0      	movs	r2, #192	@ 0xc0
 8007d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d62:	43da      	mvns	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	400a      	ands	r2, r1
 8007d6a:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	089b      	lsrs	r3, r3, #2
 8007d72:	f003 030f 	and.w	r3, r3, #15
 8007d76:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	089b      	lsrs	r3, r3, #2
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f003 0310 	and.w	r3, r3, #16
 8007d96:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8007d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d9e:	43db      	mvns	r3, r3
 8007da0:	ea02 0103 	and.w	r1, r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f003 0310 	and.w	r3, r3, #16
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	409a      	lsls	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2201      	movs	r2, #1
 8007dba:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007dc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3728      	adds	r7, #40	@ 0x28
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	09896800 	.word	0x09896800
 8007dd0:	04c4b400 	.word	0x04c4b400

08007dd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e08d      	b.n	8007f02 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	461a      	mov	r2, r3
 8007dec:	4b47      	ldr	r3, [pc, #284]	@ (8007f0c <HAL_DMA_Init+0x138>)
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d80f      	bhi.n	8007e12 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	4b45      	ldr	r3, [pc, #276]	@ (8007f10 <HAL_DMA_Init+0x13c>)
 8007dfa:	4413      	add	r3, r2
 8007dfc:	4a45      	ldr	r2, [pc, #276]	@ (8007f14 <HAL_DMA_Init+0x140>)
 8007dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007e02:	091b      	lsrs	r3, r3, #4
 8007e04:	009a      	lsls	r2, r3, #2
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a42      	ldr	r2, [pc, #264]	@ (8007f18 <HAL_DMA_Init+0x144>)
 8007e0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007e10:	e00e      	b.n	8007e30 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	4b40      	ldr	r3, [pc, #256]	@ (8007f1c <HAL_DMA_Init+0x148>)
 8007e1a:	4413      	add	r3, r2
 8007e1c:	4a3d      	ldr	r2, [pc, #244]	@ (8007f14 <HAL_DMA_Init+0x140>)
 8007e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e22:	091b      	lsrs	r3, r3, #4
 8007e24:	009a      	lsls	r2, r3, #2
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a3c      	ldr	r2, [pc, #240]	@ (8007f20 <HAL_DMA_Init+0x14c>)
 8007e2e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2202      	movs	r2, #2
 8007e34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f9b6 	bl	80081f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e90:	d102      	bne.n	8007e98 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ea0:	b2d2      	uxtb	r2, r2
 8007ea2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007eac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d010      	beq.n	8007ed8 <HAL_DMA_Init+0x104>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d80c      	bhi.n	8007ed8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f9d6 	bl	8008270 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007ed4:	605a      	str	r2, [r3, #4]
 8007ed6:	e008      	b.n	8007eea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	40020407 	.word	0x40020407
 8007f10:	bffdfff8 	.word	0xbffdfff8
 8007f14:	cccccccd 	.word	0xcccccccd
 8007f18:	40020000 	.word	0x40020000
 8007f1c:	bffdfbf8 	.word	0xbffdfbf8
 8007f20:	40020400 	.word	0x40020400

08007f24 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
 8007f30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d101      	bne.n	8007f44 <HAL_DMA_Start_IT+0x20>
 8007f40:	2302      	movs	r3, #2
 8007f42:	e066      	b.n	8008012 <HAL_DMA_Start_IT+0xee>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d155      	bne.n	8008004 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 0201 	bic.w	r2, r2, #1
 8007f74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	68b9      	ldr	r1, [r7, #8]
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f000 f8fb 	bl	8008178 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d008      	beq.n	8007f9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f042 020e 	orr.w	r2, r2, #14
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	e00f      	b.n	8007fbc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0204 	bic.w	r2, r2, #4
 8007faa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f042 020a 	orr.w	r2, r2, #10
 8007fba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d007      	beq.n	8007fda <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fd8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d007      	beq.n	8007ff2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ff0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f042 0201 	orr.w	r2, r2, #1
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	e005      	b.n	8008010 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800800c:	2302      	movs	r3, #2
 800800e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008010:	7dfb      	ldrb	r3, [r7, #23]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008036:	f003 031f 	and.w	r3, r3, #31
 800803a:	2204      	movs	r2, #4
 800803c:	409a      	lsls	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	4013      	ands	r3, r2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d026      	beq.n	8008094 <HAL_DMA_IRQHandler+0x7a>
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	f003 0304 	and.w	r3, r3, #4
 800804c:	2b00      	cmp	r3, #0
 800804e:	d021      	beq.n	8008094 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0320 	and.w	r3, r3, #32
 800805a:	2b00      	cmp	r3, #0
 800805c:	d107      	bne.n	800806e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f022 0204 	bic.w	r2, r2, #4
 800806c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008072:	f003 021f 	and.w	r2, r3, #31
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800807a:	2104      	movs	r1, #4
 800807c:	fa01 f202 	lsl.w	r2, r1, r2
 8008080:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008086:	2b00      	cmp	r3, #0
 8008088:	d071      	beq.n	800816e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008092:	e06c      	b.n	800816e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008098:	f003 031f 	and.w	r3, r3, #31
 800809c:	2202      	movs	r2, #2
 800809e:	409a      	lsls	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4013      	ands	r3, r2
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d02e      	beq.n	8008106 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d029      	beq.n	8008106 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 0320 	and.w	r3, r3, #32
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10b      	bne.n	80080d8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 020a 	bic.w	r2, r2, #10
 80080ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080dc:	f003 021f 	and.w	r2, r3, #31
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080e4:	2102      	movs	r1, #2
 80080e6:	fa01 f202 	lsl.w	r2, r1, r2
 80080ea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d038      	beq.n	800816e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008104:	e033      	b.n	800816e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800810a:	f003 031f 	and.w	r3, r3, #31
 800810e:	2208      	movs	r2, #8
 8008110:	409a      	lsls	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	4013      	ands	r3, r2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d02a      	beq.n	8008170 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	f003 0308 	and.w	r3, r3, #8
 8008120:	2b00      	cmp	r3, #0
 8008122:	d025      	beq.n	8008170 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 020e 	bic.w	r2, r2, #14
 8008132:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008138:	f003 021f 	and.w	r2, r3, #31
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008140:	2101      	movs	r1, #1
 8008142:	fa01 f202 	lsl.w	r2, r1, r2
 8008146:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008162:	2b00      	cmp	r3, #0
 8008164:	d004      	beq.n	8008170 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800816e:	bf00      	nop
 8008170:	bf00      	nop
}
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800818e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008194:	2b00      	cmp	r3, #0
 8008196:	d004      	beq.n	80081a2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80081a0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081a6:	f003 021f 	and.w	r2, r3, #31
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ae:	2101      	movs	r1, #1
 80081b0:	fa01 f202 	lsl.w	r2, r1, r2
 80081b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	2b10      	cmp	r3, #16
 80081c4:	d108      	bne.n	80081d8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80081d6:	e007      	b.n	80081e8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	60da      	str	r2, [r3, #12]
}
 80081e8:	bf00      	nop
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	461a      	mov	r2, r3
 8008202:	4b16      	ldr	r3, [pc, #88]	@ (800825c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008204:	429a      	cmp	r2, r3
 8008206:	d802      	bhi.n	800820e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008208:	4b15      	ldr	r3, [pc, #84]	@ (8008260 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800820a:	617b      	str	r3, [r7, #20]
 800820c:	e001      	b.n	8008212 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800820e:	4b15      	ldr	r3, [pc, #84]	@ (8008264 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008210:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	b2db      	uxtb	r3, r3
 800821c:	3b08      	subs	r3, #8
 800821e:	4a12      	ldr	r2, [pc, #72]	@ (8008268 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008220:	fba2 2303 	umull	r2, r3, r2, r3
 8008224:	091b      	lsrs	r3, r3, #4
 8008226:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800822c:	089b      	lsrs	r3, r3, #2
 800822e:	009a      	lsls	r2, r3, #2
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	4413      	add	r3, r2
 8008234:	461a      	mov	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a0b      	ldr	r2, [pc, #44]	@ (800826c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800823e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f003 031f 	and.w	r3, r3, #31
 8008246:	2201      	movs	r2, #1
 8008248:	409a      	lsls	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800824e:	bf00      	nop
 8008250:	371c      	adds	r7, #28
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	40020407 	.word	0x40020407
 8008260:	40020800 	.word	0x40020800
 8008264:	40020820 	.word	0x40020820
 8008268:	cccccccd 	.word	0xcccccccd
 800826c:	40020880 	.word	0x40020880

08008270 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	b2db      	uxtb	r3, r3
 800827e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	4b0b      	ldr	r3, [pc, #44]	@ (80082b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008284:	4413      	add	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	461a      	mov	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a08      	ldr	r2, [pc, #32]	@ (80082b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008292:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	3b01      	subs	r3, #1
 8008298:	f003 031f 	and.w	r3, r3, #31
 800829c:	2201      	movs	r2, #1
 800829e:	409a      	lsls	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80082a4:	bf00      	nop
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	1000823f 	.word	0x1000823f
 80082b4:	40020940 	.word	0x40020940

080082b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80082c2:	2300      	movs	r3, #0
 80082c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80082c6:	e15a      	b.n	800857e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	2101      	movs	r1, #1
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	fa01 f303 	lsl.w	r3, r1, r3
 80082d4:	4013      	ands	r3, r2
 80082d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 814c 	beq.w	8008578 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f003 0303 	and.w	r3, r3, #3
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d005      	beq.n	80082f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d130      	bne.n	800835a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	2203      	movs	r2, #3
 8008304:	fa02 f303 	lsl.w	r3, r2, r3
 8008308:	43db      	mvns	r3, r3
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	4013      	ands	r3, r2
 800830e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	68da      	ldr	r2, [r3, #12]
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	005b      	lsls	r3, r3, #1
 8008318:	fa02 f303 	lsl.w	r3, r2, r3
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	4313      	orrs	r3, r2
 8008320:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800832e:	2201      	movs	r2, #1
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	fa02 f303 	lsl.w	r3, r2, r3
 8008336:	43db      	mvns	r3, r3
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	4013      	ands	r3, r2
 800833c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	091b      	lsrs	r3, r3, #4
 8008344:	f003 0201 	and.w	r2, r3, #1
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	fa02 f303 	lsl.w	r3, r2, r3
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	4313      	orrs	r3, r2
 8008352:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f003 0303 	and.w	r3, r3, #3
 8008362:	2b03      	cmp	r3, #3
 8008364:	d017      	beq.n	8008396 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	005b      	lsls	r3, r3, #1
 8008370:	2203      	movs	r2, #3
 8008372:	fa02 f303 	lsl.w	r3, r2, r3
 8008376:	43db      	mvns	r3, r3
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	4013      	ands	r3, r2
 800837c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	689a      	ldr	r2, [r3, #8]
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	005b      	lsls	r3, r3, #1
 8008386:	fa02 f303 	lsl.w	r3, r2, r3
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	4313      	orrs	r3, r2
 800838e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	f003 0303 	and.w	r3, r3, #3
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d123      	bne.n	80083ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	08da      	lsrs	r2, r3, #3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3208      	adds	r2, #8
 80083aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	f003 0307 	and.w	r3, r3, #7
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	220f      	movs	r2, #15
 80083ba:	fa02 f303 	lsl.w	r3, r2, r3
 80083be:	43db      	mvns	r3, r3
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	4013      	ands	r3, r2
 80083c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	691a      	ldr	r2, [r3, #16]
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f003 0307 	and.w	r3, r3, #7
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	fa02 f303 	lsl.w	r3, r2, r3
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	4313      	orrs	r3, r2
 80083da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	08da      	lsrs	r2, r3, #3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3208      	adds	r2, #8
 80083e4:	6939      	ldr	r1, [r7, #16]
 80083e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	2203      	movs	r2, #3
 80083f6:	fa02 f303 	lsl.w	r3, r2, r3
 80083fa:	43db      	mvns	r3, r3
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	4013      	ands	r3, r2
 8008400:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f003 0203 	and.w	r2, r3, #3
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	005b      	lsls	r3, r3, #1
 800840e:	fa02 f303 	lsl.w	r3, r2, r3
 8008412:	693a      	ldr	r2, [r7, #16]
 8008414:	4313      	orrs	r3, r2
 8008416:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 80a6 	beq.w	8008578 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800842c:	4b5b      	ldr	r3, [pc, #364]	@ (800859c <HAL_GPIO_Init+0x2e4>)
 800842e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008430:	4a5a      	ldr	r2, [pc, #360]	@ (800859c <HAL_GPIO_Init+0x2e4>)
 8008432:	f043 0301 	orr.w	r3, r3, #1
 8008436:	6613      	str	r3, [r2, #96]	@ 0x60
 8008438:	4b58      	ldr	r3, [pc, #352]	@ (800859c <HAL_GPIO_Init+0x2e4>)
 800843a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	60bb      	str	r3, [r7, #8]
 8008442:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008444:	4a56      	ldr	r2, [pc, #344]	@ (80085a0 <HAL_GPIO_Init+0x2e8>)
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	089b      	lsrs	r3, r3, #2
 800844a:	3302      	adds	r3, #2
 800844c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008450:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	f003 0303 	and.w	r3, r3, #3
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	220f      	movs	r2, #15
 800845c:	fa02 f303 	lsl.w	r3, r2, r3
 8008460:	43db      	mvns	r3, r3
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	4013      	ands	r3, r2
 8008466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800846e:	d01f      	beq.n	80084b0 <HAL_GPIO_Init+0x1f8>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a4c      	ldr	r2, [pc, #304]	@ (80085a4 <HAL_GPIO_Init+0x2ec>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d019      	beq.n	80084ac <HAL_GPIO_Init+0x1f4>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a4b      	ldr	r2, [pc, #300]	@ (80085a8 <HAL_GPIO_Init+0x2f0>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d013      	beq.n	80084a8 <HAL_GPIO_Init+0x1f0>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a4a      	ldr	r2, [pc, #296]	@ (80085ac <HAL_GPIO_Init+0x2f4>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d00d      	beq.n	80084a4 <HAL_GPIO_Init+0x1ec>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a49      	ldr	r2, [pc, #292]	@ (80085b0 <HAL_GPIO_Init+0x2f8>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d007      	beq.n	80084a0 <HAL_GPIO_Init+0x1e8>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a48      	ldr	r2, [pc, #288]	@ (80085b4 <HAL_GPIO_Init+0x2fc>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d101      	bne.n	800849c <HAL_GPIO_Init+0x1e4>
 8008498:	2305      	movs	r3, #5
 800849a:	e00a      	b.n	80084b2 <HAL_GPIO_Init+0x1fa>
 800849c:	2306      	movs	r3, #6
 800849e:	e008      	b.n	80084b2 <HAL_GPIO_Init+0x1fa>
 80084a0:	2304      	movs	r3, #4
 80084a2:	e006      	b.n	80084b2 <HAL_GPIO_Init+0x1fa>
 80084a4:	2303      	movs	r3, #3
 80084a6:	e004      	b.n	80084b2 <HAL_GPIO_Init+0x1fa>
 80084a8:	2302      	movs	r3, #2
 80084aa:	e002      	b.n	80084b2 <HAL_GPIO_Init+0x1fa>
 80084ac:	2301      	movs	r3, #1
 80084ae:	e000      	b.n	80084b2 <HAL_GPIO_Init+0x1fa>
 80084b0:	2300      	movs	r3, #0
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	f002 0203 	and.w	r2, r2, #3
 80084b8:	0092      	lsls	r2, r2, #2
 80084ba:	4093      	lsls	r3, r2
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	4313      	orrs	r3, r2
 80084c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80084c2:	4937      	ldr	r1, [pc, #220]	@ (80085a0 <HAL_GPIO_Init+0x2e8>)
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	089b      	lsrs	r3, r3, #2
 80084c8:	3302      	adds	r3, #2
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80084d0:	4b39      	ldr	r3, [pc, #228]	@ (80085b8 <HAL_GPIO_Init+0x300>)
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	43db      	mvns	r3, r3
 80084da:	693a      	ldr	r2, [r7, #16]
 80084dc:	4013      	ands	r3, r2
 80084de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d003      	beq.n	80084f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80084f4:	4a30      	ldr	r2, [pc, #192]	@ (80085b8 <HAL_GPIO_Init+0x300>)
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80084fa:	4b2f      	ldr	r3, [pc, #188]	@ (80085b8 <HAL_GPIO_Init+0x300>)
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	43db      	mvns	r3, r3
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	4013      	ands	r3, r2
 8008508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	4313      	orrs	r3, r2
 800851c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800851e:	4a26      	ldr	r2, [pc, #152]	@ (80085b8 <HAL_GPIO_Init+0x300>)
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008524:	4b24      	ldr	r3, [pc, #144]	@ (80085b8 <HAL_GPIO_Init+0x300>)
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	43db      	mvns	r3, r3
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	4013      	ands	r3, r2
 8008532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d003      	beq.n	8008548 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4313      	orrs	r3, r2
 8008546:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008548:	4a1b      	ldr	r2, [pc, #108]	@ (80085b8 <HAL_GPIO_Init+0x300>)
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800854e:	4b1a      	ldr	r3, [pc, #104]	@ (80085b8 <HAL_GPIO_Init+0x300>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	43db      	mvns	r3, r3
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	4013      	ands	r3, r2
 800855c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d003      	beq.n	8008572 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	4313      	orrs	r3, r2
 8008570:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008572:	4a11      	ldr	r2, [pc, #68]	@ (80085b8 <HAL_GPIO_Init+0x300>)
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	3301      	adds	r3, #1
 800857c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	fa22 f303 	lsr.w	r3, r2, r3
 8008588:	2b00      	cmp	r3, #0
 800858a:	f47f ae9d 	bne.w	80082c8 <HAL_GPIO_Init+0x10>
  }
}
 800858e:	bf00      	nop
 8008590:	bf00      	nop
 8008592:	371c      	adds	r7, #28
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	40021000 	.word	0x40021000
 80085a0:	40010000 	.word	0x40010000
 80085a4:	48000400 	.word	0x48000400
 80085a8:	48000800 	.word	0x48000800
 80085ac:	48000c00 	.word	0x48000c00
 80085b0:	48001000 	.word	0x48001000
 80085b4:	48001400 	.word	0x48001400
 80085b8:	40010400 	.word	0x40010400

080085bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	460b      	mov	r3, r1
 80085c6:	807b      	strh	r3, [r7, #2]
 80085c8:	4613      	mov	r3, r2
 80085ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80085cc:	787b      	ldrb	r3, [r7, #1]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80085d2:	887a      	ldrh	r2, [r7, #2]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80085d8:	e002      	b.n	80085e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80085da:	887a      	ldrh	r2, [r7, #2]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80085f6:	4b08      	ldr	r3, [pc, #32]	@ (8008618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80085f8:	695a      	ldr	r2, [r3, #20]
 80085fa:	88fb      	ldrh	r3, [r7, #6]
 80085fc:	4013      	ands	r3, r2
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d006      	beq.n	8008610 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008602:	4a05      	ldr	r2, [pc, #20]	@ (8008618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008604:	88fb      	ldrh	r3, [r7, #6]
 8008606:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008608:	88fb      	ldrh	r3, [r7, #6]
 800860a:	4618      	mov	r0, r3
 800860c:	f000 f806 	bl	800861c <HAL_GPIO_EXTI_Callback>
  }
}
 8008610:	bf00      	nop
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	40010400 	.word	0x40010400

0800861c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
	...

08008634 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef *hhrtim)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if (hhrtim == NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e0be      	b.n	80087c4 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2202      	movs	r2, #2
 800864a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f003 0301 	and.w	r3, r3, #1
 800868e:	2b00      	cmp	r3, #0
 8008690:	d02e      	beq.n	80086f0 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a4d      	ldr	r2, [pc, #308]	@ (80087cc <HAL_HRTIM_Init+0x198>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d10b      	bne.n	80086b4 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 800869c:	4b4c      	ldr	r3, [pc, #304]	@ (80087d0 <HAL_HRTIM_Init+0x19c>)
 800869e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086a0:	4a4b      	ldr	r2, [pc, #300]	@ (80087d0 <HAL_HRTIM_Init+0x19c>)
 80086a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80086a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80086a8:	4b49      	ldr	r3, [pc, #292]	@ (80087d0 <HAL_HRTIM_Init+0x19c>)
 80086aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80086b0:	60fb      	str	r3, [r7, #12]
 80086b2:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80086c2:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80086d8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7fb fb35 	bl	8003d60 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d012      	beq.n	8008728 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008710:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	4313      	orrs	r3, r2
 800871e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	693a      	ldr	r2, [r7, #16]
 8008726:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8008738:	2300      	movs	r3, #0
 800873a:	75fb      	strb	r3, [r7, #23]
 800873c:	e03e      	b.n	80087bc <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800873e:	7dfa      	ldrb	r2, [r7, #23]
 8008740:	6879      	ldr	r1, [r7, #4]
 8008742:	4613      	mov	r3, r2
 8008744:	00db      	lsls	r3, r3, #3
 8008746:	1a9b      	subs	r3, r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	440b      	add	r3, r1
 800874c:	3318      	adds	r3, #24
 800874e:	2200      	movs	r2, #0
 8008750:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8008752:	7dfa      	ldrb	r2, [r7, #23]
 8008754:	6879      	ldr	r1, [r7, #4]
 8008756:	4613      	mov	r3, r2
 8008758:	00db      	lsls	r3, r3, #3
 800875a:	1a9b      	subs	r3, r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	440b      	add	r3, r1
 8008760:	331c      	adds	r3, #28
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8008766:	7dfa      	ldrb	r2, [r7, #23]
 8008768:	6879      	ldr	r1, [r7, #4]
 800876a:	4613      	mov	r3, r2
 800876c:	00db      	lsls	r3, r3, #3
 800876e:	1a9b      	subs	r3, r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	440b      	add	r3, r1
 8008774:	3320      	adds	r3, #32
 8008776:	2200      	movs	r2, #0
 8008778:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800877a:	7dfa      	ldrb	r2, [r7, #23]
 800877c:	6879      	ldr	r1, [r7, #4]
 800877e:	4613      	mov	r3, r2
 8008780:	00db      	lsls	r3, r3, #3
 8008782:	1a9b      	subs	r3, r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	440b      	add	r3, r1
 8008788:	3324      	adds	r3, #36	@ 0x24
 800878a:	2200      	movs	r2, #0
 800878c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 800878e:	7dfa      	ldrb	r2, [r7, #23]
 8008790:	6879      	ldr	r1, [r7, #4]
 8008792:	4613      	mov	r3, r2
 8008794:	00db      	lsls	r3, r3, #3
 8008796:	1a9b      	subs	r3, r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	440b      	add	r3, r1
 800879c:	3328      	adds	r3, #40	@ 0x28
 800879e:	2200      	movs	r2, #0
 80087a0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80087a2:	7dfa      	ldrb	r2, [r7, #23]
 80087a4:	6879      	ldr	r1, [r7, #4]
 80087a6:	4613      	mov	r3, r2
 80087a8:	00db      	lsls	r3, r3, #3
 80087aa:	1a9b      	subs	r3, r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	440b      	add	r3, r1
 80087b0:	3330      	adds	r3, #48	@ 0x30
 80087b2:	2200      	movs	r2, #0
 80087b4:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80087b6:	7dfb      	ldrb	r3, [r7, #23]
 80087b8:	3301      	adds	r3, #1
 80087ba:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80087bc:	7dfb      	ldrb	r3, [r7, #23]
 80087be:	2b06      	cmp	r3, #6
 80087c0:	d9bd      	bls.n	800873e <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	40016800 	.word	0x40016800
 80087d0:	40021000 	.word	0x40021000

080087d4 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t CalibrationRate)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d101      	bne.n	80087ec <HAL_HRTIM_DLLCalibrationStart+0x18>
 80087e8:	2302      	movs	r3, #2
 80087ea:	e045      	b.n	8008878 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2202      	movs	r2, #2
 80087f8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008802:	d114      	bne.n	800882e <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f022 0202 	bic.w	r2, r2, #2
 8008814:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f042 0201 	orr.w	r2, r2, #1
 8008828:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 800882c:	e01f      	b.n	800886e <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f042 0202 	orr.w	r2, r2, #2
 800883e:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 800884a:	f023 010c 	bic.w	r1, r3, #12
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	430a      	orrs	r2, r1
 8008856:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f042 0201 	orr.w	r2, r2, #1
 800886a:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t Timeout)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 800888e:	f7fc f9f1 	bl	8004c74 <HAL_GetTick>
 8008892:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8008894:	e014      	b.n	80088c0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889c:	d010      	beq.n	80088c0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800889e:	f7fc f9e9 	bl	8004c74 <HAL_GetTick>
 80088a2:	4602      	mov	r2, r0
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d302      	bcc.n	80088b4 <HAL_HRTIM_PollForDLLCalibration+0x30>
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d105      	bne.n	80088c0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2207      	movs	r2, #7
 80088b8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e011      	b.n	80088e4 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80088c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80088cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088d0:	d1e1      	bne.n	8008896 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	2b02      	cmp	r3, #2
 8008902:	d101      	bne.n	8008908 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
    return HAL_BUSY;
 8008904:	2302      	movs	r3, #2
 8008906:	e015      	b.n	8008934 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2202      	movs	r2, #2
 800890c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	2b06      	cmp	r3, #6
 8008914:	d104      	bne.n	8008920 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8008916:	6879      	ldr	r1, [r7, #4]
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 fac6 	bl	8008eaa <HRTIM_MasterBase_Config>
 800891e:	e004      	b.n	800892a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	68b9      	ldr	r1, [r7, #8]
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 faef 	bl	8008f08 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b02      	cmp	r3, #2
 8008952:	d101      	bne.n	8008958 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
    return HAL_BUSY;
 8008954:	2302      	movs	r3, #2
 8008956:	e07a      	b.n	8008a4e <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800895e:	2b01      	cmp	r3, #1
 8008960:	d101      	bne.n	8008966 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8008962:	2302      	movs	r3, #2
 8008964:	e073      	b.n	8008a4e <HAL_HRTIM_WaveformTimerConfig+0x112>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2202      	movs	r2, #2
 8008972:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	2b06      	cmp	r3, #6
 800897a:	d104      	bne.n	8008986 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 800897c:	6879      	ldr	r1, [r7, #4]
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 fb02 	bl	8008f88 <HRTIM_MasterWaveform_Config>
 8008984:	e004      	b.n	8008990 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	68b9      	ldr	r1, [r7, #8]
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f000 fb9a 	bl	80090c4 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6819      	ldr	r1, [r3, #0]
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	4613      	mov	r3, r2
 800899a:	00db      	lsls	r3, r3, #3
 800899c:	1a9b      	subs	r3, r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4403      	add	r3, r0
 80089a2:	3320      	adds	r3, #32
 80089a4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6859      	ldr	r1, [r3, #4]
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	4613      	mov	r3, r2
 80089b0:	00db      	lsls	r3, r3, #3
 80089b2:	1a9b      	subs	r3, r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4403      	add	r3, r0
 80089b8:	3324      	adds	r3, #36	@ 0x24
 80089ba:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6899      	ldr	r1, [r3, #8]
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	4613      	mov	r3, r2
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	1a9b      	subs	r3, r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4403      	add	r3, r0
 80089ce:	3328      	adds	r3, #40	@ 0x28
 80089d0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68d9      	ldr	r1, [r3, #12]
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	4613      	mov	r3, r2
 80089dc:	00db      	lsls	r3, r3, #3
 80089de:	1a9b      	subs	r3, r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4403      	add	r3, r0
 80089e4:	332c      	adds	r3, #44	@ 0x2c
 80089e6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6919      	ldr	r1, [r3, #16]
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	4613      	mov	r3, r2
 80089f2:	00db      	lsls	r3, r3, #3
 80089f4:	1a9b      	subs	r3, r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4403      	add	r3, r0
 80089fa:	3330      	adds	r3, #48	@ 0x30
 80089fc:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80089fe:	68b9      	ldr	r1, [r7, #8]
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f000 fe2d 	bl	8009660 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2b06      	cmp	r3, #6
 8008a0a:	d017      	beq.n	8008a3c <HAL_HRTIM_WaveformTimerConfig+0x100>
      && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d113      	bne.n	8008a3c <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	01db      	lsls	r3, r3, #7
 8008a1e:	4413      	add	r3, r2
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a2a:	025b      	lsls	r3, r3, #9
 8008a2c:	68f9      	ldr	r1, [r7, #12]
 8008a2e:	6809      	ldr	r1, [r1, #0]
 8008a30:	431a      	orrs	r2, r3
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	3301      	adds	r3, #1
 8008a36:	01db      	lsls	r3, r3, #7
 8008a38:	440b      	add	r3, r1
 8008a3a:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b084      	sub	sp, #16
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
  assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
  assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
  assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d101      	bne.n	8008a72 <HAL_HRTIM_WaveformTimerControl+0x1c>
  {
    return HAL_BUSY;
 8008a6e:	2302      	movs	r3, #2
 8008a70:	e020      	b.n	8008ab4 <HAL_HRTIM_WaveformTimerControl+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d101      	bne.n	8008a80 <HAL_HRTIM_WaveformTimerControl+0x2a>
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	e019      	b.n	8008ab4 <HAL_HRTIM_WaveformTimerControl+0x5e>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure timing unit */
  HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	68b9      	ldr	r1, [r7, #8]
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 fc9b 	bl	80093d0 <HRTIM_TimingUnitWaveform_Control>

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8008a9a:	68b9      	ldr	r1, [r7, #8]
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 fddf 	bl	8009660 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef *pCompareCfg)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
 8008ac8:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d101      	bne.n	8008ada <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
    return HAL_BUSY;
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	e157      	b.n	8008d8a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d101      	bne.n	8008ae8 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	e150      	b.n	8008d8a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2202      	movs	r2, #2
 8008af4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	2b06      	cmp	r3, #6
 8008afc:	d140      	bne.n	8008b80 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	3b01      	subs	r3, #1
 8008b02:	2b07      	cmp	r3, #7
 8008b04:	d82a      	bhi.n	8008b5c <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8008b06:	a201      	add	r2, pc, #4	@ (adr r2, 8008b0c <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8008b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0c:	08008b2d 	.word	0x08008b2d
 8008b10:	08008b39 	.word	0x08008b39
 8008b14:	08008b5d 	.word	0x08008b5d
 8008b18:	08008b45 	.word	0x08008b45
 8008b1c:	08008b5d 	.word	0x08008b5d
 8008b20:	08008b5d 	.word	0x08008b5d
 8008b24:	08008b5d 	.word	0x08008b5d
 8008b28:	08008b51 	.word	0x08008b51
    {
      case HRTIM_COMPAREUNIT_1:
      {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	6812      	ldr	r2, [r2, #0]
 8008b34:	61da      	str	r2, [r3, #28]
        break;
 8008b36:	e01a      	b.n	8008b6e <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_2:
      {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	6812      	ldr	r2, [r2, #0]
 8008b40:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 8008b42:	e014      	b.n	8008b6e <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	683a      	ldr	r2, [r7, #0]
 8008b4a:	6812      	ldr	r2, [r2, #0]
 8008b4c:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 8008b4e:	e00e      	b.n	8008b6e <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_4:
      {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	683a      	ldr	r2, [r7, #0]
 8008b56:	6812      	ldr	r2, [r2, #0]
 8008b58:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8008b5a:	e008      	b.n	8008b6e <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2207      	movs	r2, #7
 8008b60:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 8008b6c:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b07      	cmp	r3, #7
 8008b78:	f040 80fe 	bne.w	8008d78 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e104      	b.n	8008d8a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	2b07      	cmp	r3, #7
 8008b86:	f200 80e3 	bhi.w	8008d50 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8008b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b90 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8008b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b90:	08008bb1 	.word	0x08008bb1
 8008b94:	08008bc5 	.word	0x08008bc5
 8008b98:	08008d51 	.word	0x08008d51
 8008b9c:	08008c81 	.word	0x08008c81
 8008ba0:	08008d51 	.word	0x08008d51
 8008ba4:	08008d51 	.word	0x08008d51
 8008ba8:	08008d51 	.word	0x08008d51
 8008bac:	08008c95 	.word	0x08008c95
    {
      case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6819      	ldr	r1, [r3, #0]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	01db      	lsls	r3, r3, #7
 8008bbc:	440b      	add	r3, r1
 8008bbe:	339c      	adds	r3, #156	@ 0x9c
 8008bc0:	601a      	str	r2, [r3, #0]
        break;
 8008bc2:	e0d1      	b.n	8008d68 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6819      	ldr	r1, [r3, #0]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	01db      	lsls	r3, r3, #7
 8008bd0:	440b      	add	r3, r1
 8008bd2:	33a4      	adds	r3, #164	@ 0xa4
 8008bd4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d03f      	beq.n	8008c5e <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	3301      	adds	r3, #1
 8008be6:	01db      	lsls	r3, r3, #7
 8008be8:	4413      	add	r3, r2
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	6811      	ldr	r1, [r2, #0]
 8008bf0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	01db      	lsls	r3, r3, #7
 8008bfa:	440b      	add	r3, r1
 8008bfc:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	3301      	adds	r3, #1
 8008c06:	01db      	lsls	r3, r3, #7
 8008c08:	4413      	add	r3, r2
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	68f9      	ldr	r1, [r7, #12]
 8008c12:	6809      	ldr	r1, [r1, #0]
 8008c14:	431a      	orrs	r2, r3
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	01db      	lsls	r3, r3, #7
 8008c1c:	440b      	add	r3, r1
 8008c1e:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c28:	d109      	bne.n	8008c3e <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6819      	ldr	r1, [r3, #0]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	689a      	ldr	r2, [r3, #8]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	01db      	lsls	r3, r3, #7
 8008c36:	440b      	add	r3, r1
 8008c38:	339c      	adds	r3, #156	@ 0x9c
 8008c3a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
        break;
 8008c3c:	e091      	b.n	8008d62 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008c46:	f040 808c 	bne.w	8008d62 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6819      	ldr	r1, [r3, #0]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	689a      	ldr	r2, [r3, #8]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	01db      	lsls	r3, r3, #7
 8008c56:	440b      	add	r3, r1
 8008c58:	33a8      	adds	r3, #168	@ 0xa8
 8008c5a:	601a      	str	r2, [r3, #0]
        break;
 8008c5c:	e081      	b.n	8008d62 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	3301      	adds	r3, #1
 8008c66:	01db      	lsls	r3, r3, #7
 8008c68:	4413      	add	r3, r2
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	6811      	ldr	r1, [r2, #0]
 8008c70:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	3301      	adds	r3, #1
 8008c78:	01db      	lsls	r3, r3, #7
 8008c7a:	440b      	add	r3, r1
 8008c7c:	601a      	str	r2, [r3, #0]
        break;
 8008c7e:	e070      	b.n	8008d62 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6819      	ldr	r1, [r3, #0]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	01db      	lsls	r3, r3, #7
 8008c8c:	440b      	add	r3, r1
 8008c8e:	33a8      	adds	r3, #168	@ 0xa8
 8008c90:	601a      	str	r2, [r3, #0]
        break;
 8008c92:	e069      	b.n	8008d68 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6819      	ldr	r1, [r3, #0]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	01db      	lsls	r3, r3, #7
 8008ca0:	440b      	add	r3, r1
 8008ca2:	33ac      	adds	r3, #172	@ 0xac
 8008ca4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d03f      	beq.n	8008d2e <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	01db      	lsls	r3, r3, #7
 8008cb8:	4413      	add	r3, r2
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	6811      	ldr	r1, [r2, #0]
 8008cc0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	01db      	lsls	r3, r3, #7
 8008cca:	440b      	add	r3, r1
 8008ccc:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	01db      	lsls	r3, r3, #7
 8008cd8:	4413      	add	r3, r2
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	68f9      	ldr	r1, [r7, #12]
 8008ce4:	6809      	ldr	r1, [r1, #0]
 8008ce6:	431a      	orrs	r2, r3
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	3301      	adds	r3, #1
 8008cec:	01db      	lsls	r3, r3, #7
 8008cee:	440b      	add	r3, r1
 8008cf0:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cfa:	d109      	bne.n	8008d10 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6819      	ldr	r1, [r3, #0]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	689a      	ldr	r2, [r3, #8]
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	01db      	lsls	r3, r3, #7
 8008d08:	440b      	add	r3, r1
 8008d0a:	339c      	adds	r3, #156	@ 0x9c
 8008d0c:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
        break;
 8008d0e:	e02a      	b.n	8008d66 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d18:	d125      	bne.n	8008d66 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6819      	ldr	r1, [r3, #0]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	689a      	ldr	r2, [r3, #8]
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	01db      	lsls	r3, r3, #7
 8008d26:	440b      	add	r3, r1
 8008d28:	33a8      	adds	r3, #168	@ 0xa8
 8008d2a:	601a      	str	r2, [r3, #0]
        break;
 8008d2c:	e01b      	b.n	8008d66 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	3301      	adds	r3, #1
 8008d36:	01db      	lsls	r3, r3, #7
 8008d38:	4413      	add	r3, r2
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	6811      	ldr	r1, [r2, #0]
 8008d40:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	3301      	adds	r3, #1
 8008d48:	01db      	lsls	r3, r3, #7
 8008d4a:	440b      	add	r3, r1
 8008d4c:	601a      	str	r2, [r3, #0]
        break;
 8008d4e:	e00a      	b.n	8008d66 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2207      	movs	r2, #7
 8008d54:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 8008d60:	e002      	b.n	8008d68 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 8008d62:	bf00      	nop
 8008d64:	e000      	b.n	8008d68 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 8008d66:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	2b07      	cmp	r3, #7
 8008d72:	d101      	bne.n	8008d78 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	e008      	b.n	8008d8a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop

08008d98 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t Output,
                                                 const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
 8008da4:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d101      	bne.n	8008db6 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
    return HAL_BUSY;
 8008db2:	2302      	movs	r3, #2
 8008db4:	e01d      	b.n	8008df2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d101      	bne.n	8008dc4 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	e016      	b.n	8008df2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2202      	movs	r2, #2
 8008dd0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	68b9      	ldr	r1, [r7, #8]
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f000 fb58 	bl	8009490 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t OutputsToStart)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b083      	sub	sp, #12
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d101      	bne.n	8008e12 <HAL_HRTIM_WaveformOutputStart+0x18>
 8008e0e:	2302      	movs	r3, #2
 8008e10:	e01a      	b.n	8008e48 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2202      	movs	r2, #2
 8008e1e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f8d3 1394 	ldr.w	r1, [r3, #916]	@ 0x394
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	430a      	orrs	r2, r1
 8008e32:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef *hhrtim,
                                               uint32_t Timers)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d101      	bne.n	8008e6c <HAL_HRTIM_WaveformCountStart+0x18>
 8008e68:	2302      	movs	r3, #2
 8008e6a:	e018      	b.n	8008e9e <HAL_HRTIM_WaveformCountStart+0x4a>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2202      	movs	r2, #2
 8008e78:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	6819      	ldr	r1, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	370c      	adds	r7, #12
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b085      	sub	sp, #20
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f023 0307 	bic.w	r3, r3, #7
 8008ec2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f023 0318 	bic.w	r3, r3, #24
 8008ed4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	6812      	ldr	r2, [r2, #0]
 8008ef0:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	6852      	ldr	r2, [r2, #4]
 8008efa:	619a      	str	r2, [r3, #24]
}
 8008efc:	bf00      	nop
 8008efe:	3714      	adds	r7, #20
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t TimerIdx,
                                        const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b087      	sub	sp, #28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	01db      	lsls	r3, r3, #7
 8008f1e:	4413      	add	r3, r2
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f023 0307 	bic.w	r3, r3, #7
 8008f2a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f023 0318 	bic.w	r3, r3, #24
 8008f3c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	01db      	lsls	r3, r3, #7
 8008f52:	4413      	add	r3, r2
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6819      	ldr	r1, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	01db      	lsls	r3, r3, #7
 8008f64:	440b      	add	r3, r1
 8008f66:	3394      	adds	r3, #148	@ 0x94
 8008f68:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6819      	ldr	r1, [r3, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	685a      	ldr	r2, [r3, #4]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	01db      	lsls	r3, r3, #7
 8008f76:	440b      	add	r3, r1
 8008f78:	3398      	adds	r3, #152	@ 0x98
 8008f7a:	601a      	str	r2, [r3, #0]
}
 8008f7c:	bf00      	nop
 8008f7e:	371c      	adds	r7, #28
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                        const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8008fa2:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f023 0320 	bic.w	r3, r3, #32
 8008faa:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008fbc:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	695b      	ldr	r3, [r3, #20]
 8008fc2:	2b20      	cmp	r3, #32
 8008fc4:	d003      	beq.n	8008fce <HRTIM_MasterWaveform_Config+0x46>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d108      	bne.n	8008fe0 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008fd4:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f043 0320 	orr.w	r3, r3, #32
 8008fdc:	60fb      	str	r3, [r7, #12]
 8008fde:	e021      	b.n	8009024 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	2b03      	cmp	r3, #3
 8008fe6:	d108      	bne.n	8008ffa <HRTIM_MasterWaveform_Config+0x72>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fee:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ff6:	60fb      	str	r3, [r7, #12]
 8008ff8:	e014      	b.n	8009024 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	2b04      	cmp	r3, #4
 8009000:	d108      	bne.n	8009014 <HRTIM_MasterWaveform_Config+0x8c>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009008:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009010:	60fb      	str	r3, [r7, #12]
 8009012:	e007      	b.n	8009024 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
    hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f023 0320 	bic.w	r3, r3, #32
 800901a:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009022:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800902a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	69db      	ldr	r3, [r3, #28]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	4313      	orrs	r3, r2
 8009034:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800903c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	4313      	orrs	r3, r2
 8009046:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800904e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	4313      	orrs	r3, r2
 8009058:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8009060:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	4313      	orrs	r3, r2
 800906a:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8009072:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	4313      	orrs	r3, r2
 800907e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009086:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	4313      	orrs	r3, r2
 8009090:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009098:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80090b6:	bf00      	nop
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
	...

080090c4 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b08b      	sub	sp, #44	@ 0x2c
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	3301      	adds	r3, #1
 80090d8:	01db      	lsls	r3, r3, #7
 80090da:	4413      	add	r3, r2
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	6811      	ldr	r1, [r2, #0]
 80090e2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	3301      	adds	r3, #1
 80090ea:	01db      	lsls	r3, r3, #7
 80090ec:	440b      	add	r3, r1
 80090ee:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	3301      	adds	r3, #1
 80090f8:	01db      	lsls	r3, r3, #7
 80090fa:	4413      	add	r3, r2
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	01db      	lsls	r3, r3, #7
 8009108:	4413      	add	r3, r2
 800910a:	33e8      	adds	r3, #232	@ 0xe8
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	01db      	lsls	r3, r3, #7
 8009118:	4413      	add	r3, r2
 800911a:	33e4      	adds	r3, #228	@ 0xe4
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8009128:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800912a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912c:	f023 0320 	bic.w	r3, r3, #32
 8009130:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009138:	4313      	orrs	r3, r2
 800913a:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	695b      	ldr	r3, [r3, #20]
 8009140:	2b20      	cmp	r3, #32
 8009142:	d003      	beq.n	800914c <HRTIM_TimingUnitWaveform_Config+0x88>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	2b02      	cmp	r3, #2
 800914a:	d108      	bne.n	800915e <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 800914c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914e:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8009152:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8009154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009156:	f043 0320 	orr.w	r3, r3, #32
 800915a:	627b      	str	r3, [r7, #36]	@ 0x24
 800915c:	e021      	b.n	80091a2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	2b03      	cmp	r3, #3
 8009164:	d108      	bne.n	8009178 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8009166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800916c:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 800916e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009174:	627b      	str	r3, [r7, #36]	@ 0x24
 8009176:	e014      	b.n	80091a2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	2b04      	cmp	r3, #4
 800917e:	d108      	bne.n	8009192 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8009180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009186:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8009188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800918e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009190:	e007      	b.n	80091a2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
    hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8009192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009194:	f023 0320 	bic.w	r3, r3, #32
 8009198:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 800919a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919c:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 80091a0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80091a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80091a8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091b0:	4313      	orrs	r3, r2
 80091b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 80091b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80091ba:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a1b      	ldr	r3, [r3, #32]
 80091c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091c2:	4313      	orrs	r3, r2
 80091c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 80091c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80091cc:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091d4:	4313      	orrs	r3, r2
 80091d6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 80091d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091da:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80091de:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091e6:	4313      	orrs	r3, r2
 80091e8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80091ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ec:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80091f0:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091f8:	4313      	orrs	r3, r2
 80091fa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80091fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fe:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009202:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009208:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800920c:	d103      	bne.n	8009216 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 800920e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009214:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8009216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009218:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800921c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009224:	4313      	orrs	r3, r2
 8009226:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8009228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800922e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009236:	4313      	orrs	r3, r2
 8009238:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 800923a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923c:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8009240:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009244:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800924a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800924c:	4313      	orrs	r3, r2
 800924e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009256:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800925c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009260:	69ba      	ldr	r2, [r7, #24]
 8009262:	4313      	orrs	r3, r2
 8009264:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800926c:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009272:	69ba      	ldr	r2, [r7, #24]
 8009274:	4313      	orrs	r3, r2
 8009276:	61bb      	str	r3, [r7, #24]

  /* Enable/Disable dead time insertion at timer level */
  hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800927e:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009284:	6a3a      	ldr	r2, [r7, #32]
 8009286:	4313      	orrs	r3, r2
 8009288:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800928e:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8009292:	d004      	beq.n	800929e <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009298:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 800929c:	d103      	bne.n	80092a6 <HRTIM_TimingUnitWaveform_Config+0x1e2>
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a2:	2b40      	cmp	r3, #64	@ 0x40
 80092a4:	d108      	bne.n	80092b8 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 80092a6:	6a3b      	ldr	r3, [r7, #32]
 80092a8:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 80092ac:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092b2:	6a3a      	ldr	r2, [r7, #32]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 80092b8:	6a3b      	ldr	r3, [r7, #32]
 80092ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092be:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092c4:	6a3a      	ldr	r2, [r7, #32]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092ce:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	2b05      	cmp	r3, #5
 80092d4:	d850      	bhi.n	8009378 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 80092d6:	a201      	add	r2, pc, #4	@ (adr r2, 80092dc <HRTIM_TimingUnitWaveform_Config+0x218>)
 80092d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092dc:	080092f5 	.word	0x080092f5
 80092e0:	0800930b 	.word	0x0800930b
 80092e4:	08009321 	.word	0x08009321
 80092e8:	08009337 	.word	0x08009337
 80092ec:	0800934d 	.word	0x0800934d
 80092f0:	08009363 	.word	0x08009363
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80092fa:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009300:	005b      	lsls	r3, r3, #1
 8009302:	69fa      	ldr	r2, [r7, #28]
 8009304:	4313      	orrs	r3, r2
 8009306:	61fb      	str	r3, [r7, #28]
      break;
 8009308:	e037      	b.n	800937a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009310:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	69fa      	ldr	r2, [r7, #28]
 800931a:	4313      	orrs	r3, r2
 800931c:	61fb      	str	r3, [r7, #28]
      break;
 800931e:	e02c      	b.n	800937a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8009326:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800932c:	00db      	lsls	r3, r3, #3
 800932e:	69fa      	ldr	r2, [r7, #28]
 8009330:	4313      	orrs	r3, r2
 8009332:	61fb      	str	r3, [r7, #28]
      break;
 8009334:	e021      	b.n	800937a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800933c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009342:	011b      	lsls	r3, r3, #4
 8009344:	69fa      	ldr	r2, [r7, #28]
 8009346:	4313      	orrs	r3, r2
 8009348:	61fb      	str	r3, [r7, #28]
      break;
 800934a:	e016      	b.n	800937a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009352:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009358:	015b      	lsls	r3, r3, #5
 800935a:	69fa      	ldr	r2, [r7, #28]
 800935c:	4313      	orrs	r3, r2
 800935e:	61fb      	str	r3, [r7, #28]
      break;
 8009360:	e00b      	b.n	800937a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8009368:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 6U);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800936e:	019b      	lsls	r3, r3, #6
 8009370:	69fa      	ldr	r2, [r7, #28]
 8009372:	4313      	orrs	r3, r2
 8009374:	61fb      	str	r3, [r7, #28]
      break;
 8009376:	e000      	b.n	800937a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    default:
      break;
 8009378:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	3301      	adds	r3, #1
 8009382:	01db      	lsls	r3, r3, #7
 8009384:	4413      	add	r3, r2
 8009386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009388:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	01db      	lsls	r3, r3, #7
 8009392:	4413      	add	r3, r2
 8009394:	33e8      	adds	r3, #232	@ 0xe8
 8009396:	69ba      	ldr	r2, [r7, #24]
 8009398:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	01db      	lsls	r3, r3, #7
 80093a2:	4413      	add	r3, r2
 80093a4:	33e4      	adds	r3, #228	@ 0xe4
 80093a6:	6a3a      	ldr	r2, [r7, #32]
 80093a8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	01db      	lsls	r3, r3, #7
 80093b2:	4413      	add	r3, r2
 80093b4:	33d4      	adds	r3, #212	@ 0xd4
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	69fa      	ldr	r2, [r7, #28]
 80093c0:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80093c4:	bf00      	nop
 80093c6:	372c      	adds	r7, #44	@ 0x2c
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b087      	sub	sp, #28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr2;

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	01db      	lsls	r3, r3, #7
 80093e4:	4413      	add	r3, r2
 80093e6:	33ec      	adds	r3, #236	@ 0xec
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	617b      	str	r3, [r7, #20]

  /* Set the UpDown counting Mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	f023 0310 	bic.w	r3, r3, #16
 80093f2:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	011b      	lsls	r3, r3, #4
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	617b      	str	r3, [r7, #20]

  /* Set the TrigHalf Mode : requires the counter to be disabled */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009406:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	697a      	ldr	r2, [r7, #20]
 800940e:	4313      	orrs	r3, r2
 8009410:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009418:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	4313      	orrs	r3, r2
 8009422:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800942a:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	697a      	ldr	r2, [r7, #20]
 8009432:	4313      	orrs	r3, r2
 8009434:	617b      	str	r3, [r7, #20]

  if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	2b01      	cmp	r3, #1
 800943c:	d11a      	bne.n	8009474 <HRTIM_TimingUnitWaveform_Control+0xa4>
  {
    /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f023 0304 	bic.w	r3, r3, #4
 8009444:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	4313      	orrs	r3, r2
 800944e:	617b      	str	r3, [r7, #20]

    /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	f023 0302 	bic.w	r3, r3, #2
 8009456:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	695b      	ldr	r3, [r3, #20]
 800945c:	697a      	ldr	r2, [r7, #20]
 800945e:	4313      	orrs	r3, r2
 8009460:	617b      	str	r3, [r7, #20]

    /* Enable the DualChannel DAC trigger */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	f023 0301 	bic.w	r3, r3, #1
 8009468:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	697a      	ldr	r2, [r7, #20]
 8009470:	4313      	orrs	r3, r2
 8009472:	617b      	str	r3, [r7, #20]
  }
  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	01db      	lsls	r3, r3, #7
 800947c:	4413      	add	r3, r2
 800947e:	33ec      	adds	r3, #236	@ 0xec
 8009480:	697a      	ldr	r2, [r7, #20]
 8009482:	601a      	str	r2, [r3, #0]

}
 8009484:	bf00      	nop
 8009486:	371c      	adds	r7, #28
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8009490:	b480      	push	{r7}
 8009492:	b089      	sub	sp, #36	@ 0x24
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
 800949c:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800949e:	2300      	movs	r3, #0
 80094a0:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	01db      	lsls	r3, r3, #7
 80094aa:	4413      	add	r3, r2
 80094ac:	33e4      	adds	r3, #228	@ 0xe4
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	01db      	lsls	r3, r3, #7
 80094ba:	4413      	add	r3, r2
 80094bc:	33b8      	adds	r3, #184	@ 0xb8
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	617b      	str	r3, [r7, #20]

  switch (Output)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094c8:	d05d      	beq.n	8009586 <HRTIM_OutputConfig+0xf6>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094d0:	d86e      	bhi.n	80095b0 <HRTIM_OutputConfig+0x120>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094d8:	d042      	beq.n	8009560 <HRTIM_OutputConfig+0xd0>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094e0:	d866      	bhi.n	80095b0 <HRTIM_OutputConfig+0x120>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094e8:	d04d      	beq.n	8009586 <HRTIM_OutputConfig+0xf6>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094f0:	d85e      	bhi.n	80095b0 <HRTIM_OutputConfig+0x120>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094f8:	d032      	beq.n	8009560 <HRTIM_OutputConfig+0xd0>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009500:	d856      	bhi.n	80095b0 <HRTIM_OutputConfig+0x120>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2b80      	cmp	r3, #128	@ 0x80
 8009506:	d03e      	beq.n	8009586 <HRTIM_OutputConfig+0xf6>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b80      	cmp	r3, #128	@ 0x80
 800950c:	d850      	bhi.n	80095b0 <HRTIM_OutputConfig+0x120>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b40      	cmp	r3, #64	@ 0x40
 8009512:	d025      	beq.n	8009560 <HRTIM_OutputConfig+0xd0>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2b40      	cmp	r3, #64	@ 0x40
 8009518:	d84a      	bhi.n	80095b0 <HRTIM_OutputConfig+0x120>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d01f      	beq.n	8009560 <HRTIM_OutputConfig+0xd0>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d044      	beq.n	80095b0 <HRTIM_OutputConfig+0x120>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2b20      	cmp	r3, #32
 800952a:	d841      	bhi.n	80095b0 <HRTIM_OutputConfig+0x120>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b02      	cmp	r3, #2
 8009530:	d33e      	bcc.n	80095b0 <HRTIM_OutputConfig+0x120>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	3b02      	subs	r3, #2
 8009536:	2201      	movs	r2, #1
 8009538:	409a      	lsls	r2, r3
 800953a:	4b48      	ldr	r3, [pc, #288]	@ (800965c <HRTIM_OutputConfig+0x1cc>)
 800953c:	4013      	ands	r3, r2
 800953e:	2b00      	cmp	r3, #0
 8009540:	bf14      	ite	ne
 8009542:	2301      	movne	r3, #1
 8009544:	2300      	moveq	r3, #0
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b00      	cmp	r3, #0
 800954a:	d11c      	bne.n	8009586 <HRTIM_OutputConfig+0xf6>
 800954c:	f244 0304 	movw	r3, #16388	@ 0x4004
 8009550:	4013      	ands	r3, r2
 8009552:	2b00      	cmp	r3, #0
 8009554:	bf14      	ite	ne
 8009556:	2301      	movne	r3, #1
 8009558:	2300      	moveq	r3, #0
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2b00      	cmp	r3, #0
 800955e:	d027      	beq.n	80095b0 <HRTIM_OutputConfig+0x120>
    case HRTIM_OUTPUT_TD1:
    case HRTIM_OUTPUT_TE1:
    case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6819      	ldr	r1, [r3, #0]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	01db      	lsls	r3, r3, #7
 800956c:	440b      	add	r3, r1
 800956e:	33bc      	adds	r3, #188	@ 0xbc
 8009570:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6819      	ldr	r1, [r3, #0]
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	689a      	ldr	r2, [r3, #8]
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	01db      	lsls	r3, r3, #7
 800957e:	440b      	add	r3, r1
 8009580:	33c0      	adds	r3, #192	@ 0xc0
 8009582:	601a      	str	r2, [r3, #0]
      break;
 8009584:	e015      	b.n	80095b2 <HRTIM_OutputConfig+0x122>
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	6819      	ldr	r1, [r3, #0]
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	685a      	ldr	r2, [r3, #4]
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	01db      	lsls	r3, r3, #7
 8009592:	440b      	add	r3, r1
 8009594:	33c4      	adds	r3, #196	@ 0xc4
 8009596:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6819      	ldr	r1, [r3, #0]
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	689a      	ldr	r2, [r3, #8]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	01db      	lsls	r3, r3, #7
 80095a4:	440b      	add	r3, r1
 80095a6:	33c8      	adds	r3, #200	@ 0xc8
 80095a8:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80095aa:	2310      	movs	r3, #16
 80095ac:	61bb      	str	r3, [r7, #24]
      break;
 80095ae:	e000      	b.n	80095b2 <HRTIM_OutputConfig+0x122>
    }

    default:
      break;
 80095b0:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1 |
                   HRTIM_OUTR_FAULT1 |
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80095b2:	22fe      	movs	r2, #254	@ 0xfe
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80095ba:	43db      	mvns	r3, r3
 80095bc:	69fa      	ldr	r2, [r7, #28]
 80095be:	4013      	ands	r3, r2
 80095c0:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	fa02 f303 	lsl.w	r3, r2, r3
 80095cc:	69fa      	ldr	r2, [r7, #28]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	68da      	ldr	r2, [r3, #12]
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	fa02 f303 	lsl.w	r3, r2, r3
 80095dc:	69fa      	ldr	r2, [r7, #28]
 80095de:	4313      	orrs	r3, r2
 80095e0:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	691a      	ldr	r2, [r3, #16]
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	fa02 f303 	lsl.w	r3, r2, r3
 80095ec:	69fa      	ldr	r2, [r7, #28]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	695a      	ldr	r2, [r3, #20]
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	fa02 f303 	lsl.w	r3, r2, r3
 80095fc:	69fa      	ldr	r2, [r7, #28]
 80095fe:	4313      	orrs	r3, r2
 8009600:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	699a      	ldr	r2, [r3, #24]
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	fa02 f303 	lsl.w	r3, r2, r3
 800960c:	69fa      	ldr	r2, [r7, #28]
 800960e:	4313      	orrs	r3, r2
 8009610:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	2b08      	cmp	r3, #8
 8009618:	d111      	bne.n	800963e <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10c      	bne.n	800963e <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800962a:	2b00      	cmp	r3, #0
 800962c:	d107      	bne.n	800963e <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	69da      	ldr	r2, [r3, #28]
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	fa02 f303 	lsl.w	r3, r2, r3
 8009638:	69fa      	ldr	r2, [r7, #28]
 800963a:	4313      	orrs	r3, r2
 800963c:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	01db      	lsls	r3, r3, #7
 8009646:	4413      	add	r3, r2
 8009648:	33e4      	adds	r3, #228	@ 0xe4
 800964a:	69fa      	ldr	r2, [r7, #28]
 800964c:	601a      	str	r2, [r3, #0]
}
 800964e:	bf00      	nop
 8009650:	3724      	adds	r7, #36	@ 0x24
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	40000041 	.word	0x40000041

08009660 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	2b06      	cmp	r3, #6
 800966e:	d85e      	bhi.n	800972e <HRTIM_ForceRegistersUpdate+0xce>
 8009670:	a201      	add	r2, pc, #4	@ (adr r2, 8009678 <HRTIM_ForceRegistersUpdate+0x18>)
 8009672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009676:	bf00      	nop
 8009678:	080096ab 	.word	0x080096ab
 800967c:	080096c1 	.word	0x080096c1
 8009680:	080096d7 	.word	0x080096d7
 8009684:	080096ed 	.word	0x080096ed
 8009688:	08009703 	.word	0x08009703
 800968c:	08009719 	.word	0x08009719
 8009690:	08009695 	.word	0x08009695
  {
    case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f042 0201 	orr.w	r2, r2, #1
 80096a4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80096a8:	e042      	b.n	8009730 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f042 0202 	orr.w	r2, r2, #2
 80096ba:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80096be:	e037      	b.n	8009730 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f042 0204 	orr.w	r2, r2, #4
 80096d0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80096d4:	e02c      	b.n	8009730 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f042 0208 	orr.w	r2, r2, #8
 80096e6:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80096ea:	e021      	b.n	8009730 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f042 0210 	orr.w	r2, r2, #16
 80096fc:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8009700:	e016      	b.n	8009730 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f042 0220 	orr.w	r2, r2, #32
 8009712:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8009716:	e00b      	b.n	8009730 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009728:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800972c:	e000      	b.n	8009730 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    default:
      break;
 800972e:	bf00      	nop
  }
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e08d      	b.n	800986a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d106      	bne.n	8009768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7fa fb54 	bl	8003e10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2224      	movs	r2, #36	@ 0x24
 800976c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f022 0201 	bic.w	r2, r2, #1
 800977e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800978c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	689a      	ldr	r2, [r3, #8]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800979c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d107      	bne.n	80097b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	689a      	ldr	r2, [r3, #8]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80097b2:	609a      	str	r2, [r3, #8]
 80097b4:	e006      	b.n	80097c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	689a      	ldr	r2, [r3, #8]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80097c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d108      	bne.n	80097de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	685a      	ldr	r2, [r3, #4]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097da:	605a      	str	r2, [r3, #4]
 80097dc:	e007      	b.n	80097ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80097ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	6812      	ldr	r2, [r2, #0]
 80097f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80097fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009800:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68da      	ldr	r2, [r3, #12]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009810:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	691a      	ldr	r2, [r3, #16]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	695b      	ldr	r3, [r3, #20]
 800981a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	430a      	orrs	r2, r1
 800982a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	69d9      	ldr	r1, [r3, #28]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a1a      	ldr	r2, [r3, #32]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	430a      	orrs	r2, r1
 800983a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f042 0201 	orr.w	r2, r2, #1
 800984a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2220      	movs	r2, #32
 8009856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
	...

08009874 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b088      	sub	sp, #32
 8009878:	af02      	add	r7, sp, #8
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	4608      	mov	r0, r1
 800987e:	4611      	mov	r1, r2
 8009880:	461a      	mov	r2, r3
 8009882:	4603      	mov	r3, r0
 8009884:	817b      	strh	r3, [r7, #10]
 8009886:	460b      	mov	r3, r1
 8009888:	813b      	strh	r3, [r7, #8]
 800988a:	4613      	mov	r3, r2
 800988c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009894:	b2db      	uxtb	r3, r3
 8009896:	2b20      	cmp	r3, #32
 8009898:	f040 80fd 	bne.w	8009a96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800989c:	6a3b      	ldr	r3, [r7, #32]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d002      	beq.n	80098a8 <HAL_I2C_Mem_Read+0x34>
 80098a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d105      	bne.n	80098b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e0f1      	b.n	8009a98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d101      	bne.n	80098c2 <HAL_I2C_Mem_Read+0x4e>
 80098be:	2302      	movs	r3, #2
 80098c0:	e0ea      	b.n	8009a98 <HAL_I2C_Mem_Read+0x224>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80098ca:	f7fb f9d3 	bl	8004c74 <HAL_GetTick>
 80098ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	2319      	movs	r3, #25
 80098d6:	2201      	movs	r2, #1
 80098d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f000 f95b 	bl	8009b98 <I2C_WaitOnFlagUntilTimeout>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d001      	beq.n	80098ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	e0d5      	b.n	8009a98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2222      	movs	r2, #34	@ 0x22
 80098f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2240      	movs	r2, #64	@ 0x40
 80098f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2200      	movs	r2, #0
 8009900:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	6a3a      	ldr	r2, [r7, #32]
 8009906:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800990c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009914:	88f8      	ldrh	r0, [r7, #6]
 8009916:	893a      	ldrh	r2, [r7, #8]
 8009918:	8979      	ldrh	r1, [r7, #10]
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	9301      	str	r3, [sp, #4]
 800991e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	4603      	mov	r3, r0
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 f8bf 	bl	8009aa8 <I2C_RequestMemoryRead>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d005      	beq.n	800993c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	e0ad      	b.n	8009a98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009940:	b29b      	uxth	r3, r3
 8009942:	2bff      	cmp	r3, #255	@ 0xff
 8009944:	d90e      	bls.n	8009964 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	22ff      	movs	r2, #255	@ 0xff
 800994a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009950:	b2da      	uxtb	r2, r3
 8009952:	8979      	ldrh	r1, [r7, #10]
 8009954:	4b52      	ldr	r3, [pc, #328]	@ (8009aa0 <HAL_I2C_Mem_Read+0x22c>)
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f000 fadf 	bl	8009f20 <I2C_TransferConfig>
 8009962:	e00f      	b.n	8009984 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009968:	b29a      	uxth	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009972:	b2da      	uxtb	r2, r3
 8009974:	8979      	ldrh	r1, [r7, #10]
 8009976:	4b4a      	ldr	r3, [pc, #296]	@ (8009aa0 <HAL_I2C_Mem_Read+0x22c>)
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f000 face 	bl	8009f20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998a:	2200      	movs	r2, #0
 800998c:	2104      	movs	r1, #4
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f000 f902 	bl	8009b98 <I2C_WaitOnFlagUntilTimeout>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	e07c      	b.n	8009a98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a8:	b2d2      	uxtb	r2, r2
 80099aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b0:	1c5a      	adds	r2, r3, #1
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099ba:	3b01      	subs	r3, #1
 80099bc:	b29a      	uxth	r2, r3
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	3b01      	subs	r3, #1
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d034      	beq.n	8009a44 <HAL_I2C_Mem_Read+0x1d0>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d130      	bne.n	8009a44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e8:	2200      	movs	r2, #0
 80099ea:	2180      	movs	r1, #128	@ 0x80
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f000 f8d3 	bl	8009b98 <I2C_WaitOnFlagUntilTimeout>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d001      	beq.n	80099fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	e04d      	b.n	8009a98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	2bff      	cmp	r3, #255	@ 0xff
 8009a04:	d90e      	bls.n	8009a24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	22ff      	movs	r2, #255	@ 0xff
 8009a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a10:	b2da      	uxtb	r2, r3
 8009a12:	8979      	ldrh	r1, [r7, #10]
 8009a14:	2300      	movs	r3, #0
 8009a16:	9300      	str	r3, [sp, #0]
 8009a18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f000 fa7f 	bl	8009f20 <I2C_TransferConfig>
 8009a22:	e00f      	b.n	8009a44 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a32:	b2da      	uxtb	r2, r3
 8009a34:	8979      	ldrh	r1, [r7, #10]
 8009a36:	2300      	movs	r3, #0
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f000 fa6e 	bl	8009f20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d19a      	bne.n	8009984 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f000 f940 	bl	8009cd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d001      	beq.n	8009a62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e01a      	b.n	8009a98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2220      	movs	r2, #32
 8009a68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	6859      	ldr	r1, [r3, #4]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	4b0b      	ldr	r3, [pc, #44]	@ (8009aa4 <HAL_I2C_Mem_Read+0x230>)
 8009a76:	400b      	ands	r3, r1
 8009a78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2220      	movs	r2, #32
 8009a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009a92:	2300      	movs	r3, #0
 8009a94:	e000      	b.n	8009a98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009a96:	2302      	movs	r3, #2
  }
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3718      	adds	r7, #24
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	80002400 	.word	0x80002400
 8009aa4:	fe00e800 	.word	0xfe00e800

08009aa8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af02      	add	r7, sp, #8
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	4608      	mov	r0, r1
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	817b      	strh	r3, [r7, #10]
 8009aba:	460b      	mov	r3, r1
 8009abc:	813b      	strh	r3, [r7, #8]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009ac2:	88fb      	ldrh	r3, [r7, #6]
 8009ac4:	b2da      	uxtb	r2, r3
 8009ac6:	8979      	ldrh	r1, [r7, #10]
 8009ac8:	4b20      	ldr	r3, [pc, #128]	@ (8009b4c <I2C_RequestMemoryRead+0xa4>)
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	2300      	movs	r3, #0
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f000 fa26 	bl	8009f20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ad4:	69fa      	ldr	r2, [r7, #28]
 8009ad6:	69b9      	ldr	r1, [r7, #24]
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f000 f8b6 	bl	8009c4a <I2C_WaitOnTXISFlagUntilTimeout>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d001      	beq.n	8009ae8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e02c      	b.n	8009b42 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009ae8:	88fb      	ldrh	r3, [r7, #6]
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d105      	bne.n	8009afa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009aee:	893b      	ldrh	r3, [r7, #8]
 8009af0:	b2da      	uxtb	r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	629a      	str	r2, [r3, #40]	@ 0x28
 8009af8:	e015      	b.n	8009b26 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009afa:	893b      	ldrh	r3, [r7, #8]
 8009afc:	0a1b      	lsrs	r3, r3, #8
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b08:	69fa      	ldr	r2, [r7, #28]
 8009b0a:	69b9      	ldr	r1, [r7, #24]
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f000 f89c 	bl	8009c4a <I2C_WaitOnTXISFlagUntilTimeout>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e012      	b.n	8009b42 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b1c:	893b      	ldrh	r3, [r7, #8]
 8009b1e:	b2da      	uxtb	r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2140      	movs	r1, #64	@ 0x40
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 f831 	bl	8009b98 <I2C_WaitOnFlagUntilTimeout>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e000      	b.n	8009b42 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	80002000 	.word	0x80002000

08009b50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	f003 0302 	and.w	r3, r3, #2
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d103      	bne.n	8009b6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	f003 0301 	and.w	r3, r3, #1
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d007      	beq.n	8009b8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	699a      	ldr	r2, [r3, #24]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f042 0201 	orr.w	r2, r2, #1
 8009b8a:	619a      	str	r2, [r3, #24]
  }
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	603b      	str	r3, [r7, #0]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ba8:	e03b      	b.n	8009c22 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009baa:	69ba      	ldr	r2, [r7, #24]
 8009bac:	6839      	ldr	r1, [r7, #0]
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f000 f8d6 	bl	8009d60 <I2C_IsErrorOccurred>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d001      	beq.n	8009bbe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e041      	b.n	8009c42 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc4:	d02d      	beq.n	8009c22 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bc6:	f7fb f855 	bl	8004c74 <HAL_GetTick>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	683a      	ldr	r2, [r7, #0]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d302      	bcc.n	8009bdc <I2C_WaitOnFlagUntilTimeout+0x44>
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d122      	bne.n	8009c22 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	699a      	ldr	r2, [r3, #24]
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	4013      	ands	r3, r2
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	bf0c      	ite	eq
 8009bec:	2301      	moveq	r3, #1
 8009bee:	2300      	movne	r3, #0
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	79fb      	ldrb	r3, [r7, #7]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d113      	bne.n	8009c22 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bfe:	f043 0220 	orr.w	r2, r3, #32
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2220      	movs	r2, #32
 8009c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e00f      	b.n	8009c42 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	699a      	ldr	r2, [r3, #24]
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	bf0c      	ite	eq
 8009c32:	2301      	moveq	r3, #1
 8009c34:	2300      	movne	r3, #0
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	461a      	mov	r2, r3
 8009c3a:	79fb      	ldrb	r3, [r7, #7]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d0b4      	beq.n	8009baa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b084      	sub	sp, #16
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	60f8      	str	r0, [r7, #12]
 8009c52:	60b9      	str	r1, [r7, #8]
 8009c54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009c56:	e033      	b.n	8009cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	68b9      	ldr	r1, [r7, #8]
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f000 f87f 	bl	8009d60 <I2C_IsErrorOccurred>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d001      	beq.n	8009c6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e031      	b.n	8009cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c72:	d025      	beq.n	8009cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c74:	f7fa fffe 	bl	8004c74 <HAL_GetTick>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d302      	bcc.n	8009c8a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d11a      	bne.n	8009cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	f003 0302 	and.w	r3, r3, #2
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d013      	beq.n	8009cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c9c:	f043 0220 	orr.w	r2, r3, #32
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2220      	movs	r2, #32
 8009ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e007      	b.n	8009cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	f003 0302 	and.w	r3, r3, #2
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d1c4      	bne.n	8009c58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ce4:	e02f      	b.n	8009d46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	68b9      	ldr	r1, [r7, #8]
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 f838 	bl	8009d60 <I2C_IsErrorOccurred>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e02d      	b.n	8009d56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cfa:	f7fa ffbb 	bl	8004c74 <HAL_GetTick>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d302      	bcc.n	8009d10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d11a      	bne.n	8009d46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	f003 0320 	and.w	r3, r3, #32
 8009d1a:	2b20      	cmp	r3, #32
 8009d1c:	d013      	beq.n	8009d46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d22:	f043 0220 	orr.w	r2, r3, #32
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2220      	movs	r2, #32
 8009d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e007      	b.n	8009d56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	f003 0320 	and.w	r3, r3, #32
 8009d50:	2b20      	cmp	r3, #32
 8009d52:	d1c8      	bne.n	8009ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
	...

08009d60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b08a      	sub	sp, #40	@ 0x28
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	f003 0310 	and.w	r3, r3, #16
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d068      	beq.n	8009e5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2210      	movs	r2, #16
 8009d92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009d94:	e049      	b.n	8009e2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d9c:	d045      	beq.n	8009e2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009d9e:	f7fa ff69 	bl	8004c74 <HAL_GetTick>
 8009da2:	4602      	mov	r2, r0
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d302      	bcc.n	8009db4 <I2C_IsErrorOccurred+0x54>
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d13a      	bne.n	8009e2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009dbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009dc6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009dd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009dd6:	d121      	bne.n	8009e1c <I2C_IsErrorOccurred+0xbc>
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009dde:	d01d      	beq.n	8009e1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009de0:	7cfb      	ldrb	r3, [r7, #19]
 8009de2:	2b20      	cmp	r3, #32
 8009de4:	d01a      	beq.n	8009e1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009df4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009df6:	f7fa ff3d 	bl	8004c74 <HAL_GetTick>
 8009dfa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009dfc:	e00e      	b.n	8009e1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009dfe:	f7fa ff39 	bl	8004c74 <HAL_GetTick>
 8009e02:	4602      	mov	r2, r0
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	2b19      	cmp	r3, #25
 8009e0a:	d907      	bls.n	8009e1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009e0c:	6a3b      	ldr	r3, [r7, #32]
 8009e0e:	f043 0320 	orr.w	r3, r3, #32
 8009e12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009e1a:	e006      	b.n	8009e2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	699b      	ldr	r3, [r3, #24]
 8009e22:	f003 0320 	and.w	r3, r3, #32
 8009e26:	2b20      	cmp	r3, #32
 8009e28:	d1e9      	bne.n	8009dfe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	f003 0320 	and.w	r3, r3, #32
 8009e34:	2b20      	cmp	r3, #32
 8009e36:	d003      	beq.n	8009e40 <I2C_IsErrorOccurred+0xe0>
 8009e38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d0aa      	beq.n	8009d96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009e40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d103      	bne.n	8009e50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2220      	movs	r2, #32
 8009e4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009e50:	6a3b      	ldr	r3, [r7, #32]
 8009e52:	f043 0304 	orr.w	r3, r3, #4
 8009e56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	699b      	ldr	r3, [r3, #24]
 8009e64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00b      	beq.n	8009e88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009e70:	6a3b      	ldr	r3, [r7, #32]
 8009e72:	f043 0301 	orr.w	r3, r3, #1
 8009e76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00b      	beq.n	8009eaa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009e92:	6a3b      	ldr	r3, [r7, #32]
 8009e94:	f043 0308 	orr.w	r3, r3, #8
 8009e98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009ea2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00b      	beq.n	8009ecc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009eb4:	6a3b      	ldr	r3, [r7, #32]
 8009eb6:	f043 0302 	orr.w	r3, r3, #2
 8009eba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ec4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d01c      	beq.n	8009f0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f7ff fe3b 	bl	8009b50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	6859      	ldr	r1, [r3, #4]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8009f1c <I2C_IsErrorOccurred+0x1bc>)
 8009ee6:	400b      	ands	r3, r1
 8009ee8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009eee:	6a3b      	ldr	r3, [r7, #32]
 8009ef0:	431a      	orrs	r2, r3
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2220      	movs	r2, #32
 8009efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3728      	adds	r7, #40	@ 0x28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	fe00e800 	.word	0xfe00e800

08009f20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b087      	sub	sp, #28
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	607b      	str	r3, [r7, #4]
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	817b      	strh	r3, [r7, #10]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009f32:	897b      	ldrh	r3, [r7, #10]
 8009f34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009f38:	7a7b      	ldrb	r3, [r7, #9]
 8009f3a:	041b      	lsls	r3, r3, #16
 8009f3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009f40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009f46:	6a3b      	ldr	r3, [r7, #32]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	685a      	ldr	r2, [r3, #4]
 8009f56:	6a3b      	ldr	r3, [r7, #32]
 8009f58:	0d5b      	lsrs	r3, r3, #21
 8009f5a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009f5e:	4b08      	ldr	r3, [pc, #32]	@ (8009f80 <I2C_TransferConfig+0x60>)
 8009f60:	430b      	orrs	r3, r1
 8009f62:	43db      	mvns	r3, r3
 8009f64:	ea02 0103 	and.w	r1, r2, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	697a      	ldr	r2, [r7, #20]
 8009f6e:	430a      	orrs	r2, r1
 8009f70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009f72:	bf00      	nop
 8009f74:	371c      	adds	r7, #28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	03ff63ff 	.word	0x03ff63ff

08009f84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	2b20      	cmp	r3, #32
 8009f98:	d138      	bne.n	800a00c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d101      	bne.n	8009fa8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	e032      	b.n	800a00e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2224      	movs	r2, #36	@ 0x24
 8009fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f022 0201 	bic.w	r2, r2, #1
 8009fc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009fd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	6819      	ldr	r1, [r3, #0]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f042 0201 	orr.w	r2, r2, #1
 8009ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2220      	movs	r2, #32
 8009ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	e000      	b.n	800a00e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a00c:	2302      	movs	r3, #2
  }
}
 800a00e:	4618      	mov	r0, r3
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a01a:	b480      	push	{r7}
 800a01c:	b085      	sub	sp, #20
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	2b20      	cmp	r3, #32
 800a02e:	d139      	bne.n	800a0a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a036:	2b01      	cmp	r3, #1
 800a038:	d101      	bne.n	800a03e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a03a:	2302      	movs	r3, #2
 800a03c:	e033      	b.n	800a0a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2224      	movs	r2, #36	@ 0x24
 800a04a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f022 0201 	bic.w	r2, r2, #1
 800a05c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a06c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	021b      	lsls	r3, r3, #8
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	4313      	orrs	r3, r2
 800a076:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f042 0201 	orr.w	r2, r2, #1
 800a08e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2220      	movs	r2, #32
 800a094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	e000      	b.n	800a0a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a0a4:	2302      	movs	r3, #2
  }
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3714      	adds	r7, #20
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
	...

0800a0b4 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e0bb      	b.n	800a242 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	2b05      	cmp	r3, #5
 800a0d4:	d101      	bne.n	800a0da <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e0b3      	b.n	800a242 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d101      	bne.n	800a0ea <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e0ab      	b.n	800a242 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a0ea:	4b58      	ldr	r3, [pc, #352]	@ (800a24c <HAL_OPAMP_Init+0x198>)
 800a0ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0ee:	4a57      	ldr	r2, [pc, #348]	@ (800a24c <HAL_OPAMP_Init+0x198>)
 800a0f0:	f043 0301 	orr.w	r3, r3, #1
 800a0f4:	6613      	str	r3, [r2, #96]	@ 0x60
 800a0f6:	4b55      	ldr	r3, [pc, #340]	@ (800a24c <HAL_OPAMP_Init+0x198>)
 800a0f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0fa:	f003 0301 	and.w	r3, r3, #1
 800a0fe:	60bb      	str	r3, [r7, #8]
 800a100:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d103      	bne.n	800a116 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7f9 ff2e 	bl	8003f78 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	2b40      	cmp	r3, #64	@ 0x40
 800a122:	d003      	beq.n	800a12c <HAL_OPAMP_Init+0x78>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	2b60      	cmp	r3, #96	@ 0x60
 800a12a:	d133      	bne.n	800a194 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f023 0110 	bic.w	r1, r3, #16
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	430a      	orrs	r2, r1
 800a140:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	4b41      	ldr	r3, [pc, #260]	@ (800a250 <HAL_OPAMP_Init+0x19c>)
 800a14a:	4013      	ands	r3, r2
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	6851      	ldr	r1, [r2, #4]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	6892      	ldr	r2, [r2, #8]
 800a154:	4311      	orrs	r1, r2
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	6912      	ldr	r2, [r2, #16]
 800a15a:	430a      	orrs	r2, r1
 800a15c:	6879      	ldr	r1, [r7, #4]
 800a15e:	7d09      	ldrb	r1, [r1, #20]
 800a160:	2901      	cmp	r1, #1
 800a162:	d102      	bne.n	800a16a <HAL_OPAMP_Init+0xb6>
 800a164:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a168:	e000      	b.n	800a16c <HAL_OPAMP_Init+0xb8>
 800a16a:	2100      	movs	r1, #0
 800a16c:	4311      	orrs	r1, r2
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a172:	4311      	orrs	r1, r2
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800a178:	4311      	orrs	r1, r2
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a17e:	04d2      	lsls	r2, r2, #19
 800a180:	4311      	orrs	r1, r2
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a186:	0612      	lsls	r2, r2, #24
 800a188:	4311      	orrs	r1, r2
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	6812      	ldr	r2, [r2, #0]
 800a18e:	430b      	orrs	r3, r1
 800a190:	6013      	str	r3, [r2, #0]
 800a192:	e035      	b.n	800a200 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f023 0110 	bic.w	r1, r3, #16
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	430a      	orrs	r2, r1
 800a1a8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	4b27      	ldr	r3, [pc, #156]	@ (800a250 <HAL_OPAMP_Init+0x19c>)
 800a1b2:	4013      	ands	r3, r2
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	6851      	ldr	r1, [r2, #4]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	6892      	ldr	r2, [r2, #8]
 800a1bc:	4311      	orrs	r1, r2
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	68d2      	ldr	r2, [r2, #12]
 800a1c2:	4311      	orrs	r1, r2
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	6912      	ldr	r2, [r2, #16]
 800a1c8:	430a      	orrs	r2, r1
 800a1ca:	6879      	ldr	r1, [r7, #4]
 800a1cc:	7d09      	ldrb	r1, [r1, #20]
 800a1ce:	2901      	cmp	r1, #1
 800a1d0:	d102      	bne.n	800a1d8 <HAL_OPAMP_Init+0x124>
 800a1d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a1d6:	e000      	b.n	800a1da <HAL_OPAMP_Init+0x126>
 800a1d8:	2100      	movs	r1, #0
 800a1da:	4311      	orrs	r1, r2
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a1e0:	4311      	orrs	r1, r2
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800a1e6:	4311      	orrs	r1, r2
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a1ec:	04d2      	lsls	r2, r2, #19
 800a1ee:	4311      	orrs	r1, r2
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a1f4:	0612      	lsls	r2, r2, #24
 800a1f6:	4311      	orrs	r1, r2
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	6812      	ldr	r2, [r2, #0]
 800a1fc:	430b      	orrs	r3, r1
 800a1fe:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	2b00      	cmp	r3, #0
 800a208:	db10      	blt.n	800a22c <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	699a      	ldr	r2, [r3, #24]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	69db      	ldr	r3, [r3, #28]
 800a21c:	431a      	orrs	r2, r3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	431a      	orrs	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	430a      	orrs	r2, r1
 800a22a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b00      	cmp	r3, #0
 800a236:	d103      	bne.n	800a240 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800a240:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	40021000 	.word	0x40021000
 800a250:	e0003e11 	.word	0xe0003e11

0800a254 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	e0c0      	b.n	800a3e8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d106      	bne.n	800a280 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f009 fcb8 	bl	8013bf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2203      	movs	r2, #3
 800a284:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f005 ffe6 	bl	801025e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a292:	2300      	movs	r3, #0
 800a294:	73fb      	strb	r3, [r7, #15]
 800a296:	e03e      	b.n	800a316 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a298:	7bfa      	ldrb	r2, [r7, #15]
 800a29a:	6879      	ldr	r1, [r7, #4]
 800a29c:	4613      	mov	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4413      	add	r3, r2
 800a2a2:	00db      	lsls	r3, r3, #3
 800a2a4:	440b      	add	r3, r1
 800a2a6:	3311      	adds	r3, #17
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a2ac:	7bfa      	ldrb	r2, [r7, #15]
 800a2ae:	6879      	ldr	r1, [r7, #4]
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	4413      	add	r3, r2
 800a2b6:	00db      	lsls	r3, r3, #3
 800a2b8:	440b      	add	r3, r1
 800a2ba:	3310      	adds	r3, #16
 800a2bc:	7bfa      	ldrb	r2, [r7, #15]
 800a2be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a2c0:	7bfa      	ldrb	r2, [r7, #15]
 800a2c2:	6879      	ldr	r1, [r7, #4]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	00db      	lsls	r3, r3, #3
 800a2cc:	440b      	add	r3, r1
 800a2ce:	3313      	adds	r3, #19
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a2d4:	7bfa      	ldrb	r2, [r7, #15]
 800a2d6:	6879      	ldr	r1, [r7, #4]
 800a2d8:	4613      	mov	r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	4413      	add	r3, r2
 800a2de:	00db      	lsls	r3, r3, #3
 800a2e0:	440b      	add	r3, r1
 800a2e2:	3320      	adds	r3, #32
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a2e8:	7bfa      	ldrb	r2, [r7, #15]
 800a2ea:	6879      	ldr	r1, [r7, #4]
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4413      	add	r3, r2
 800a2f2:	00db      	lsls	r3, r3, #3
 800a2f4:	440b      	add	r3, r1
 800a2f6:	3324      	adds	r3, #36	@ 0x24
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
 800a2fe:	6879      	ldr	r1, [r7, #4]
 800a300:	1c5a      	adds	r2, r3, #1
 800a302:	4613      	mov	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	00db      	lsls	r3, r3, #3
 800a30a:	440b      	add	r3, r1
 800a30c:	2200      	movs	r2, #0
 800a30e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a310:	7bfb      	ldrb	r3, [r7, #15]
 800a312:	3301      	adds	r3, #1
 800a314:	73fb      	strb	r3, [r7, #15]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	791b      	ldrb	r3, [r3, #4]
 800a31a:	7bfa      	ldrb	r2, [r7, #15]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d3bb      	bcc.n	800a298 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a320:	2300      	movs	r3, #0
 800a322:	73fb      	strb	r3, [r7, #15]
 800a324:	e044      	b.n	800a3b0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a326:	7bfa      	ldrb	r2, [r7, #15]
 800a328:	6879      	ldr	r1, [r7, #4]
 800a32a:	4613      	mov	r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	4413      	add	r3, r2
 800a330:	00db      	lsls	r3, r3, #3
 800a332:	440b      	add	r3, r1
 800a334:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800a338:	2200      	movs	r2, #0
 800a33a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a33c:	7bfa      	ldrb	r2, [r7, #15]
 800a33e:	6879      	ldr	r1, [r7, #4]
 800a340:	4613      	mov	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	00db      	lsls	r3, r3, #3
 800a348:	440b      	add	r3, r1
 800a34a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a34e:	7bfa      	ldrb	r2, [r7, #15]
 800a350:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a352:	7bfa      	ldrb	r2, [r7, #15]
 800a354:	6879      	ldr	r1, [r7, #4]
 800a356:	4613      	mov	r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	4413      	add	r3, r2
 800a35c:	00db      	lsls	r3, r3, #3
 800a35e:	440b      	add	r3, r1
 800a360:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800a364:	2200      	movs	r2, #0
 800a366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a368:	7bfa      	ldrb	r2, [r7, #15]
 800a36a:	6879      	ldr	r1, [r7, #4]
 800a36c:	4613      	mov	r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4413      	add	r3, r2
 800a372:	00db      	lsls	r3, r3, #3
 800a374:	440b      	add	r3, r1
 800a376:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800a37a:	2200      	movs	r2, #0
 800a37c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a37e:	7bfa      	ldrb	r2, [r7, #15]
 800a380:	6879      	ldr	r1, [r7, #4]
 800a382:	4613      	mov	r3, r2
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4413      	add	r3, r2
 800a388:	00db      	lsls	r3, r3, #3
 800a38a:	440b      	add	r3, r1
 800a38c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a390:	2200      	movs	r2, #0
 800a392:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a394:	7bfa      	ldrb	r2, [r7, #15]
 800a396:	6879      	ldr	r1, [r7, #4]
 800a398:	4613      	mov	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4413      	add	r3, r2
 800a39e:	00db      	lsls	r3, r3, #3
 800a3a0:	440b      	add	r3, r1
 800a3a2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	73fb      	strb	r3, [r7, #15]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	791b      	ldrb	r3, [r3, #4]
 800a3b4:	7bfa      	ldrb	r2, [r7, #15]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d3b5      	bcc.n	800a326 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6818      	ldr	r0, [r3, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	3304      	adds	r3, #4
 800a3c2:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a3c6:	f005 ff65 	bl	8010294 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	7a9b      	ldrb	r3, [r3, #10]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d102      	bne.n	800a3e6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f001 fc0e 	bl	800bc02 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d101      	bne.n	800a406 <HAL_PCD_Start+0x16>
 800a402:	2302      	movs	r3, #2
 800a404:	e012      	b.n	800a42c <HAL_PCD_Start+0x3c>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2201      	movs	r2, #1
 800a40a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4618      	mov	r0, r3
 800a414:	f005 ff0c 	bl	8010230 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f007 fce9 	bl	8011df4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4618      	mov	r0, r3
 800a442:	f007 fcee 	bl	8011e22 <USB_ReadInterrupts>
 800a446:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fb06 	bl	800aa64 <PCD_EP_ISR_Handler>

    return;
 800a458:	e110      	b.n	800a67c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a460:	2b00      	cmp	r3, #0
 800a462:	d013      	beq.n	800a48c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a46c:	b29a      	uxth	r2, r3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a476:	b292      	uxth	r2, r2
 800a478:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f009 fc48 	bl	8013d12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800a482:	2100      	movs	r1, #0
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 f8fc 	bl	800a682 <HAL_PCD_SetAddress>

    return;
 800a48a:	e0f7      	b.n	800a67c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00c      	beq.n	800a4b0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a49e:	b29a      	uxth	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a4a8:	b292      	uxth	r2, r2
 800a4aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a4ae:	e0e5      	b.n	800a67c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00c      	beq.n	800a4d4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a4cc:	b292      	uxth	r2, r2
 800a4ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a4d2:	e0d3      	b.n	800a67c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d034      	beq.n	800a548 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f022 0204 	bic.w	r2, r2, #4
 800a4f0:	b292      	uxth	r2, r2
 800a4f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f022 0208 	bic.w	r2, r2, #8
 800a508:	b292      	uxth	r2, r2
 800a50a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a514:	2b01      	cmp	r3, #1
 800a516:	d107      	bne.n	800a528 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a520:	2100      	movs	r1, #0
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f009 fde8 	bl	80140f8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f009 fc2b 	bl	8013d84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a536:	b29a      	uxth	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a540:	b292      	uxth	r2, r2
 800a542:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a546:	e099      	b.n	800a67c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d027      	beq.n	800a5a2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f042 0208 	orr.w	r2, r2, #8
 800a564:	b292      	uxth	r2, r2
 800a566:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a572:	b29a      	uxth	r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a57c:	b292      	uxth	r2, r2
 800a57e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a58a:	b29a      	uxth	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f042 0204 	orr.w	r2, r2, #4
 800a594:	b292      	uxth	r2, r2
 800a596:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f009 fbd8 	bl	8013d50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a5a0:	e06c      	b.n	800a67c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d040      	beq.n	800a62e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a5be:	b292      	uxth	r2, r2
 800a5c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d12b      	bne.n	800a626 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a5d6:	b29a      	uxth	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f042 0204 	orr.w	r2, r2, #4
 800a5e0:	b292      	uxth	r2, r2
 800a5e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f042 0208 	orr.w	r2, r2, #8
 800a5f8:	b292      	uxth	r2, r2
 800a5fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2201      	movs	r2, #1
 800a602:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a60e:	b29b      	uxth	r3, r3
 800a610:	089b      	lsrs	r3, r3, #2
 800a612:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a61c:	2101      	movs	r1, #1
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f009 fd6a 	bl	80140f8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a624:	e02a      	b.n	800a67c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f009 fb92 	bl	8013d50 <HAL_PCD_SuspendCallback>
    return;
 800a62c:	e026      	b.n	800a67c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00f      	beq.n	800a658 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a640:	b29a      	uxth	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a64a:	b292      	uxth	r2, r2
 800a64c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f009 fb50 	bl	8013cf6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a656:	e011      	b.n	800a67c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00c      	beq.n	800a67c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a674:	b292      	uxth	r2, r2
 800a676:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a67a:	bf00      	nop
  }
}
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b082      	sub	sp, #8
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	460b      	mov	r3, r1
 800a68c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a694:	2b01      	cmp	r3, #1
 800a696:	d101      	bne.n	800a69c <HAL_PCD_SetAddress+0x1a>
 800a698:	2302      	movs	r3, #2
 800a69a:	e012      	b.n	800a6c2 <HAL_PCD_SetAddress+0x40>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	78fa      	ldrb	r2, [r7, #3]
 800a6a8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	78fa      	ldrb	r2, [r7, #3]
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f007 fb8a 	bl	8011dcc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3708      	adds	r7, #8
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b084      	sub	sp, #16
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
 800a6d2:	4608      	mov	r0, r1
 800a6d4:	4611      	mov	r1, r2
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	4603      	mov	r3, r0
 800a6da:	70fb      	strb	r3, [r7, #3]
 800a6dc:	460b      	mov	r3, r1
 800a6de:	803b      	strh	r3, [r7, #0]
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a6e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	da0e      	bge.n	800a70e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a6f0:	78fb      	ldrb	r3, [r7, #3]
 800a6f2:	f003 0207 	and.w	r2, r3, #7
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4413      	add	r3, r2
 800a6fc:	00db      	lsls	r3, r3, #3
 800a6fe:	3310      	adds	r3, #16
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	4413      	add	r3, r2
 800a704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2201      	movs	r2, #1
 800a70a:	705a      	strb	r2, [r3, #1]
 800a70c:	e00e      	b.n	800a72c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a70e:	78fb      	ldrb	r3, [r7, #3]
 800a710:	f003 0207 	and.w	r2, r3, #7
 800a714:	4613      	mov	r3, r2
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	00db      	lsls	r3, r3, #3
 800a71c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	4413      	add	r3, r2
 800a724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a72c:	78fb      	ldrb	r3, [r7, #3]
 800a72e:	f003 0307 	and.w	r3, r3, #7
 800a732:	b2da      	uxtb	r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800a738:	883b      	ldrh	r3, [r7, #0]
 800a73a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	78ba      	ldrb	r2, [r7, #2]
 800a746:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a748:	78bb      	ldrb	r3, [r7, #2]
 800a74a:	2b02      	cmp	r3, #2
 800a74c:	d102      	bne.n	800a754 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d101      	bne.n	800a762 <HAL_PCD_EP_Open+0x98>
 800a75e:	2302      	movs	r3, #2
 800a760:	e00e      	b.n	800a780 <HAL_PCD_EP_Open+0xb6>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2201      	movs	r2, #1
 800a766:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68f9      	ldr	r1, [r7, #12]
 800a770:	4618      	mov	r0, r3
 800a772:	f005 fdad 	bl	80102d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800a77e:	7afb      	ldrb	r3, [r7, #11]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	460b      	mov	r3, r1
 800a792:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a794:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	da0e      	bge.n	800a7ba <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a79c:	78fb      	ldrb	r3, [r7, #3]
 800a79e:	f003 0207 	and.w	r2, r3, #7
 800a7a2:	4613      	mov	r3, r2
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	4413      	add	r3, r2
 800a7a8:	00db      	lsls	r3, r3, #3
 800a7aa:	3310      	adds	r3, #16
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	705a      	strb	r2, [r3, #1]
 800a7b8:	e00e      	b.n	800a7d8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a7ba:	78fb      	ldrb	r3, [r7, #3]
 800a7bc:	f003 0207 	and.w	r2, r3, #7
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	4413      	add	r3, r2
 800a7c6:	00db      	lsls	r3, r3, #3
 800a7c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a7d8:	78fb      	ldrb	r3, [r7, #3]
 800a7da:	f003 0307 	and.w	r3, r3, #7
 800a7de:	b2da      	uxtb	r2, r3
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d101      	bne.n	800a7f2 <HAL_PCD_EP_Close+0x6a>
 800a7ee:	2302      	movs	r3, #2
 800a7f0:	e00e      	b.n	800a810 <HAL_PCD_EP_Close+0x88>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68f9      	ldr	r1, [r7, #12]
 800a800:	4618      	mov	r0, r3
 800a802:	f006 fa4d 	bl	8010ca0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3710      	adds	r7, #16
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	607a      	str	r2, [r7, #4]
 800a822:	603b      	str	r3, [r7, #0]
 800a824:	460b      	mov	r3, r1
 800a826:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a828:	7afb      	ldrb	r3, [r7, #11]
 800a82a:	f003 0207 	and.w	r2, r3, #7
 800a82e:	4613      	mov	r3, r2
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	4413      	add	r3, r2
 800a834:	00db      	lsls	r3, r3, #3
 800a836:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	4413      	add	r3, r2
 800a83e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	683a      	ldr	r2, [r7, #0]
 800a84a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	2200      	movs	r2, #0
 800a850:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	2200      	movs	r2, #0
 800a856:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a858:	7afb      	ldrb	r3, [r7, #11]
 800a85a:	f003 0307 	and.w	r3, r3, #7
 800a85e:	b2da      	uxtb	r2, r3
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6979      	ldr	r1, [r7, #20]
 800a86a:	4618      	mov	r0, r3
 800a86c:	f006 fc05 	bl	801107a <USB_EPStartXfer>

  return HAL_OK;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3718      	adds	r7, #24
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b083      	sub	sp, #12
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	460b      	mov	r3, r1
 800a884:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a886:	78fb      	ldrb	r3, [r7, #3]
 800a888:	f003 0207 	and.w	r2, r3, #7
 800a88c:	6879      	ldr	r1, [r7, #4]
 800a88e:	4613      	mov	r3, r2
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	4413      	add	r3, r2
 800a894:	00db      	lsls	r3, r3, #3
 800a896:	440b      	add	r3, r1
 800a898:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800a89c:	681b      	ldr	r3, [r3, #0]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	370c      	adds	r7, #12
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr

0800a8aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b086      	sub	sp, #24
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	60f8      	str	r0, [r7, #12]
 800a8b2:	607a      	str	r2, [r7, #4]
 800a8b4:	603b      	str	r3, [r7, #0]
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a8ba:	7afb      	ldrb	r3, [r7, #11]
 800a8bc:	f003 0207 	and.w	r2, r3, #7
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	4413      	add	r3, r2
 800a8c6:	00db      	lsls	r3, r3, #3
 800a8c8:	3310      	adds	r3, #16
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	683a      	ldr	r2, [r7, #0]
 800a8da:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a8f6:	7afb      	ldrb	r3, [r7, #11]
 800a8f8:	f003 0307 	and.w	r3, r3, #7
 800a8fc:	b2da      	uxtb	r2, r3
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	6979      	ldr	r1, [r7, #20]
 800a908:	4618      	mov	r0, r3
 800a90a:	f006 fbb6 	bl	801107a <USB_EPStartXfer>

  return HAL_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3718      	adds	r7, #24
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	460b      	mov	r3, r1
 800a922:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a924:	78fb      	ldrb	r3, [r7, #3]
 800a926:	f003 0307 	and.w	r3, r3, #7
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	7912      	ldrb	r2, [r2, #4]
 800a92e:	4293      	cmp	r3, r2
 800a930:	d901      	bls.n	800a936 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	e03e      	b.n	800a9b4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a936:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	da0e      	bge.n	800a95c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a93e:	78fb      	ldrb	r3, [r7, #3]
 800a940:	f003 0207 	and.w	r2, r3, #7
 800a944:	4613      	mov	r3, r2
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	4413      	add	r3, r2
 800a94a:	00db      	lsls	r3, r3, #3
 800a94c:	3310      	adds	r3, #16
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	4413      	add	r3, r2
 800a952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2201      	movs	r2, #1
 800a958:	705a      	strb	r2, [r3, #1]
 800a95a:	e00c      	b.n	800a976 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a95c:	78fa      	ldrb	r2, [r7, #3]
 800a95e:	4613      	mov	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4413      	add	r3, r2
 800a964:	00db      	lsls	r3, r3, #3
 800a966:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	4413      	add	r3, r2
 800a96e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2201      	movs	r2, #1
 800a97a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a97c:	78fb      	ldrb	r3, [r7, #3]
 800a97e:	f003 0307 	and.w	r3, r3, #7
 800a982:	b2da      	uxtb	r2, r3
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d101      	bne.n	800a996 <HAL_PCD_EP_SetStall+0x7e>
 800a992:	2302      	movs	r3, #2
 800a994:	e00e      	b.n	800a9b4 <HAL_PCD_EP_SetStall+0x9c>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2201      	movs	r2, #1
 800a99a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68f9      	ldr	r1, [r7, #12]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f007 f917 	bl	8011bd8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a9c8:	78fb      	ldrb	r3, [r7, #3]
 800a9ca:	f003 030f 	and.w	r3, r3, #15
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	7912      	ldrb	r2, [r2, #4]
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d901      	bls.n	800a9da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e040      	b.n	800aa5c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a9da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	da0e      	bge.n	800aa00 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a9e2:	78fb      	ldrb	r3, [r7, #3]
 800a9e4:	f003 0207 	and.w	r2, r3, #7
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4413      	add	r3, r2
 800a9ee:	00db      	lsls	r3, r3, #3
 800a9f0:	3310      	adds	r3, #16
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	705a      	strb	r2, [r3, #1]
 800a9fe:	e00e      	b.n	800aa1e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aa00:	78fb      	ldrb	r3, [r7, #3]
 800aa02:	f003 0207 	and.w	r2, r3, #7
 800aa06:	4613      	mov	r3, r2
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	4413      	add	r3, r2
 800aa0c:	00db      	lsls	r3, r3, #3
 800aa0e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	4413      	add	r3, r2
 800aa16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aa24:	78fb      	ldrb	r3, [r7, #3]
 800aa26:	f003 0307 	and.w	r3, r3, #7
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d101      	bne.n	800aa3e <HAL_PCD_EP_ClrStall+0x82>
 800aa3a:	2302      	movs	r3, #2
 800aa3c:	e00e      	b.n	800aa5c <HAL_PCD_EP_ClrStall+0xa0>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	68f9      	ldr	r1, [r7, #12]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f007 f914 	bl	8011c7a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b092      	sub	sp, #72	@ 0x48
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800aa6c:	e333      	b.n	800b0d6 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800aa76:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800aa78:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	f003 030f 	and.w	r3, r3, #15
 800aa80:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800aa84:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f040 8108 	bne.w	800ac9e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800aa8e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800aa90:	f003 0310 	and.w	r3, r3, #16
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d14c      	bne.n	800ab32 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	881b      	ldrh	r3, [r3, #0]
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800aaa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaa8:	813b      	strh	r3, [r7, #8]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	893b      	ldrh	r3, [r7, #8]
 800aab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	3310      	adds	r3, #16
 800aac0:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	461a      	mov	r2, r3
 800aace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	00db      	lsls	r3, r3, #3
 800aad4:	4413      	add	r3, r2
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	6812      	ldr	r2, [r2, #0]
 800aada:	4413      	add	r3, r2
 800aadc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aae0:	881b      	ldrh	r3, [r3, #0]
 800aae2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800aae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aae8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800aaea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaec:	695a      	ldr	r2, [r3, #20]
 800aaee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaf0:	69db      	ldr	r3, [r3, #28]
 800aaf2:	441a      	add	r2, r3
 800aaf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaf6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800aaf8:	2100      	movs	r1, #0
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f009 f8e1 	bl	8013cc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	7b1b      	ldrb	r3, [r3, #12]
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f000 82e5 	beq.w	800b0d6 <PCD_EP_ISR_Handler+0x672>
 800ab0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f040 82e0 	bne.w	800b0d6 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	7b1b      	ldrb	r3, [r3, #12]
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ab20:	b2da      	uxtb	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	731a      	strb	r2, [r3, #12]
 800ab30:	e2d1      	b.n	800b0d6 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ab38:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	881b      	ldrh	r3, [r3, #0]
 800ab40:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800ab42:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d032      	beq.n	800abb2 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	461a      	mov	r2, r3
 800ab58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	00db      	lsls	r3, r3, #3
 800ab5e:	4413      	add	r3, r2
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	6812      	ldr	r2, [r2, #0]
 800ab64:	4413      	add	r3, r2
 800ab66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ab70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab72:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6818      	ldr	r0, [r3, #0]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800ab7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab80:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800ab82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab84:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	f007 f99d 	bl	8011ec6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	881b      	ldrh	r3, [r3, #0]
 800ab92:	b29a      	uxth	r2, r3
 800ab94:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800ab98:	4013      	ands	r3, r2
 800ab9a:	817b      	strh	r3, [r7, #10]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	897a      	ldrh	r2, [r7, #10]
 800aba2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800aba6:	b292      	uxth	r2, r2
 800aba8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f009 f85c 	bl	8013c68 <HAL_PCD_SetupStageCallback>
 800abb0:	e291      	b.n	800b0d6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800abb2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	f280 828d 	bge.w	800b0d6 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	881b      	ldrh	r3, [r3, #0]
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800abc8:	4013      	ands	r3, r2
 800abca:	81fb      	strh	r3, [r7, #14]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	89fa      	ldrh	r2, [r7, #14]
 800abd2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800abd6:	b292      	uxth	r2, r2
 800abd8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	461a      	mov	r2, r3
 800abe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	00db      	lsls	r3, r3, #3
 800abec:	4413      	add	r3, r2
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	6812      	ldr	r2, [r2, #0]
 800abf2:	4413      	add	r3, r2
 800abf4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800abf8:	881b      	ldrh	r3, [r3, #0]
 800abfa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800abfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac00:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800ac02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac04:	69db      	ldr	r3, [r3, #28]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d019      	beq.n	800ac3e <PCD_EP_ISR_Handler+0x1da>
 800ac0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac0c:	695b      	ldr	r3, [r3, #20]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d015      	beq.n	800ac3e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6818      	ldr	r0, [r3, #0]
 800ac16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac18:	6959      	ldr	r1, [r3, #20]
 800ac1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac1c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800ac1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac20:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	f007 f94f 	bl	8011ec6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800ac28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac2a:	695a      	ldr	r2, [r3, #20]
 800ac2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac2e:	69db      	ldr	r3, [r3, #28]
 800ac30:	441a      	add	r2, r3
 800ac32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac34:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800ac36:	2100      	movs	r1, #0
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f009 f827 	bl	8013c8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800ac46:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ac48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f040 8242 	bne.w	800b0d6 <PCD_EP_ISR_Handler+0x672>
 800ac52:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ac54:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ac58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac5c:	f000 823b 	beq.w	800b0d6 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	881b      	ldrh	r3, [r3, #0]
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac70:	81bb      	strh	r3, [r7, #12]
 800ac72:	89bb      	ldrh	r3, [r7, #12]
 800ac74:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ac78:	81bb      	strh	r3, [r7, #12]
 800ac7a:	89bb      	ldrh	r3, [r7, #12]
 800ac7c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ac80:	81bb      	strh	r3, [r7, #12]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	89bb      	ldrh	r3, [r7, #12]
 800ac88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	8013      	strh	r3, [r2, #0]
 800ac9c:	e21b      	b.n	800b0d6 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	461a      	mov	r2, r3
 800aca4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	4413      	add	r3, r2
 800acac:	881b      	ldrh	r3, [r3, #0]
 800acae:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800acb0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f280 80f1 	bge.w	800ae9c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	461a      	mov	r2, r3
 800acc0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	4413      	add	r3, r2
 800acc8:	881b      	ldrh	r3, [r3, #0]
 800acca:	b29a      	uxth	r2, r3
 800accc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800acd0:	4013      	ands	r3, r2
 800acd2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	461a      	mov	r2, r3
 800acda:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	4413      	add	r3, r2
 800ace2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800ace4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ace8:	b292      	uxth	r2, r2
 800acea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800acec:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800acf0:	4613      	mov	r3, r2
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	4413      	add	r3, r2
 800acf6:	00db      	lsls	r3, r3, #3
 800acf8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	4413      	add	r3, r2
 800ad00:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800ad02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad04:	7b1b      	ldrb	r3, [r3, #12]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d123      	bne.n	800ad52 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	461a      	mov	r2, r3
 800ad16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	00db      	lsls	r3, r3, #3
 800ad1c:	4413      	add	r3, r2
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	6812      	ldr	r2, [r2, #0]
 800ad22:	4413      	add	r3, r2
 800ad24:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ad28:	881b      	ldrh	r3, [r3, #0]
 800ad2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad2e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800ad32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f000 808b 	beq.w	800ae52 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6818      	ldr	r0, [r3, #0]
 800ad40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad42:	6959      	ldr	r1, [r3, #20]
 800ad44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad46:	88da      	ldrh	r2, [r3, #6]
 800ad48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ad4c:	f007 f8bb 	bl	8011ec6 <USB_ReadPMA>
 800ad50:	e07f      	b.n	800ae52 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800ad52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad54:	78db      	ldrb	r3, [r3, #3]
 800ad56:	2b02      	cmp	r3, #2
 800ad58:	d109      	bne.n	800ad6e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800ad5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 f9c6 	bl	800b0f2 <HAL_PCD_EP_DB_Receive>
 800ad66:	4603      	mov	r3, r0
 800ad68:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800ad6c:	e071      	b.n	800ae52 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	461a      	mov	r2, r3
 800ad74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	4413      	add	r3, r2
 800ad7c:	881b      	ldrh	r3, [r3, #0]
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad88:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	461a      	mov	r2, r3
 800ad90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	441a      	add	r2, r3
 800ad98:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ad9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ada2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ada6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800adaa:	b29b      	uxth	r3, r3
 800adac:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	461a      	mov	r2, r3
 800adb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	4413      	add	r3, r2
 800adbc:	881b      	ldrh	r3, [r3, #0]
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d022      	beq.n	800ae0e <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800add0:	b29b      	uxth	r3, r3
 800add2:	461a      	mov	r2, r3
 800add4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	00db      	lsls	r3, r3, #3
 800adda:	4413      	add	r3, r2
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	6812      	ldr	r2, [r2, #0]
 800ade0:	4413      	add	r3, r2
 800ade2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ade6:	881b      	ldrh	r3, [r3, #0]
 800ade8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adec:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800adf0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d02c      	beq.n	800ae52 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6818      	ldr	r0, [r3, #0]
 800adfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adfe:	6959      	ldr	r1, [r3, #20]
 800ae00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae02:	891a      	ldrh	r2, [r3, #8]
 800ae04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ae08:	f007 f85d 	bl	8011ec6 <USB_ReadPMA>
 800ae0c:	e021      	b.n	800ae52 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	461a      	mov	r2, r3
 800ae1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	00db      	lsls	r3, r3, #3
 800ae20:	4413      	add	r3, r2
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	6812      	ldr	r2, [r2, #0]
 800ae26:	4413      	add	r3, r2
 800ae28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ae2c:	881b      	ldrh	r3, [r3, #0]
 800ae2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae32:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800ae36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d009      	beq.n	800ae52 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6818      	ldr	r0, [r3, #0]
 800ae42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae44:	6959      	ldr	r1, [r3, #20]
 800ae46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae48:	895a      	ldrh	r2, [r3, #10]
 800ae4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ae4e:	f007 f83a 	bl	8011ec6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800ae52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae54:	69da      	ldr	r2, [r3, #28]
 800ae56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ae5a:	441a      	add	r2, r3
 800ae5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae5e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800ae60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae62:	695a      	ldr	r2, [r3, #20]
 800ae64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ae68:	441a      	add	r2, r3
 800ae6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae6c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800ae6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae70:	699b      	ldr	r3, [r3, #24]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d005      	beq.n	800ae82 <PCD_EP_ISR_Handler+0x41e>
 800ae76:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800ae7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d206      	bcs.n	800ae90 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800ae82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	4619      	mov	r1, r3
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f008 feff 	bl	8013c8c <HAL_PCD_DataOutStageCallback>
 800ae8e:	e005      	b.n	800ae9c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae96:	4618      	mov	r0, r3
 800ae98:	f006 f8ef 	bl	801107a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800ae9c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ae9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f000 8117 	beq.w	800b0d6 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800aea8:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800aeac:	4613      	mov	r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4413      	add	r3, r2
 800aeb2:	00db      	lsls	r3, r3, #3
 800aeb4:	3310      	adds	r3, #16
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	4413      	add	r3, r2
 800aeba:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	461a      	mov	r2, r3
 800aec2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	4413      	add	r3, r2
 800aeca:	881b      	ldrh	r3, [r3, #0]
 800aecc:	b29b      	uxth	r3, r3
 800aece:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800aed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aed6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	461a      	mov	r2, r3
 800aede:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	441a      	add	r2, r3
 800aee6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800aee8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aeec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800aef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aef6:	78db      	ldrb	r3, [r3, #3]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	f040 80a1 	bne.w	800b040 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800aefe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af00:	2200      	movs	r2, #0
 800af02:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800af04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af06:	7b1b      	ldrb	r3, [r3, #12]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f000 8092 	beq.w	800b032 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800af0e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af14:	2b00      	cmp	r3, #0
 800af16:	d046      	beq.n	800afa6 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800af18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af1a:	785b      	ldrb	r3, [r3, #1]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d126      	bne.n	800af6e <PCD_EP_ISR_Handler+0x50a>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	617b      	str	r3, [r7, #20]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af2e:	b29b      	uxth	r3, r3
 800af30:	461a      	mov	r2, r3
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	4413      	add	r3, r2
 800af36:	617b      	str	r3, [r7, #20]
 800af38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	00da      	lsls	r2, r3, #3
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	4413      	add	r3, r2
 800af42:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800af46:	613b      	str	r3, [r7, #16]
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	881b      	ldrh	r3, [r3, #0]
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af52:	b29a      	uxth	r2, r3
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	801a      	strh	r2, [r3, #0]
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	881b      	ldrh	r3, [r3, #0]
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af66:	b29a      	uxth	r2, r3
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	801a      	strh	r2, [r3, #0]
 800af6c:	e061      	b.n	800b032 <PCD_EP_ISR_Handler+0x5ce>
 800af6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af70:	785b      	ldrb	r3, [r3, #1]
 800af72:	2b01      	cmp	r3, #1
 800af74:	d15d      	bne.n	800b032 <PCD_EP_ISR_Handler+0x5ce>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	61fb      	str	r3, [r7, #28]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af84:	b29b      	uxth	r3, r3
 800af86:	461a      	mov	r2, r3
 800af88:	69fb      	ldr	r3, [r7, #28]
 800af8a:	4413      	add	r3, r2
 800af8c:	61fb      	str	r3, [r7, #28]
 800af8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	00da      	lsls	r2, r3, #3
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	4413      	add	r3, r2
 800af98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800af9c:	61bb      	str	r3, [r7, #24]
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	2200      	movs	r2, #0
 800afa2:	801a      	strh	r2, [r3, #0]
 800afa4:	e045      	b.n	800b032 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800afac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afae:	785b      	ldrb	r3, [r3, #1]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d126      	bne.n	800b002 <PCD_EP_ISR_Handler+0x59e>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	627b      	str	r3, [r7, #36]	@ 0x24
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	461a      	mov	r2, r3
 800afc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc8:	4413      	add	r3, r2
 800afca:	627b      	str	r3, [r7, #36]	@ 0x24
 800afcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	00da      	lsls	r2, r3, #3
 800afd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd4:	4413      	add	r3, r2
 800afd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800afda:	623b      	str	r3, [r7, #32]
 800afdc:	6a3b      	ldr	r3, [r7, #32]
 800afde:	881b      	ldrh	r3, [r3, #0]
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	6a3b      	ldr	r3, [r7, #32]
 800afea:	801a      	strh	r2, [r3, #0]
 800afec:	6a3b      	ldr	r3, [r7, #32]
 800afee:	881b      	ldrh	r3, [r3, #0]
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800affa:	b29a      	uxth	r2, r3
 800affc:	6a3b      	ldr	r3, [r7, #32]
 800affe:	801a      	strh	r2, [r3, #0]
 800b000:	e017      	b.n	800b032 <PCD_EP_ISR_Handler+0x5ce>
 800b002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b004:	785b      	ldrb	r3, [r3, #1]
 800b006:	2b01      	cmp	r3, #1
 800b008:	d113      	bne.n	800b032 <PCD_EP_ISR_Handler+0x5ce>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b012:	b29b      	uxth	r3, r3
 800b014:	461a      	mov	r2, r3
 800b016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b018:	4413      	add	r3, r2
 800b01a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b01c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	00da      	lsls	r2, r3, #3
 800b022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b024:	4413      	add	r3, r2
 800b026:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b02a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b02e:	2200      	movs	r2, #0
 800b030:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	4619      	mov	r1, r3
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f008 fe42 	bl	8013cc2 <HAL_PCD_DataInStageCallback>
 800b03e:	e04a      	b.n	800b0d6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800b040:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b046:	2b00      	cmp	r3, #0
 800b048:	d13f      	bne.n	800b0ca <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b052:	b29b      	uxth	r3, r3
 800b054:	461a      	mov	r2, r3
 800b056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	00db      	lsls	r3, r3, #3
 800b05c:	4413      	add	r3, r2
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	6812      	ldr	r2, [r2, #0]
 800b062:	4413      	add	r3, r2
 800b064:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b068:	881b      	ldrh	r3, [r3, #0]
 800b06a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b06e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800b070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b072:	699a      	ldr	r2, [r3, #24]
 800b074:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b076:	429a      	cmp	r2, r3
 800b078:	d906      	bls.n	800b088 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800b07a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b07c:	699a      	ldr	r2, [r3, #24]
 800b07e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b080:	1ad2      	subs	r2, r2, r3
 800b082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b084:	619a      	str	r2, [r3, #24]
 800b086:	e002      	b.n	800b08e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800b088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b08a:	2200      	movs	r2, #0
 800b08c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800b08e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b090:	699b      	ldr	r3, [r3, #24]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d106      	bne.n	800b0a4 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	4619      	mov	r1, r3
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f008 fe10 	bl	8013cc2 <HAL_PCD_DataInStageCallback>
 800b0a2:	e018      	b.n	800b0d6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800b0a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0a6:	695a      	ldr	r2, [r3, #20]
 800b0a8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b0aa:	441a      	add	r2, r3
 800b0ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0ae:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800b0b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0b2:	69da      	ldr	r2, [r3, #28]
 800b0b4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b0b6:	441a      	add	r2, r3
 800b0b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0ba:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f005 ffd9 	bl	801107a <USB_EPStartXfer>
 800b0c8:	e005      	b.n	800b0d6 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800b0ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 f917 	bl	800b304 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	b21b      	sxth	r3, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f6ff acc3 	blt.w	800aa6e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3748      	adds	r7, #72	@ 0x48
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b088      	sub	sp, #32
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	60f8      	str	r0, [r7, #12]
 800b0fa:	60b9      	str	r1, [r7, #8]
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b100:	88fb      	ldrh	r3, [r7, #6]
 800b102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b106:	2b00      	cmp	r3, #0
 800b108:	d07c      	beq.n	800b204 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b112:	b29b      	uxth	r3, r3
 800b114:	461a      	mov	r2, r3
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	00db      	lsls	r3, r3, #3
 800b11c:	4413      	add	r3, r2
 800b11e:	68fa      	ldr	r2, [r7, #12]
 800b120:	6812      	ldr	r2, [r2, #0]
 800b122:	4413      	add	r3, r2
 800b124:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b128:	881b      	ldrh	r3, [r3, #0]
 800b12a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b12e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	699a      	ldr	r2, [r3, #24]
 800b134:	8b7b      	ldrh	r3, [r7, #26]
 800b136:	429a      	cmp	r2, r3
 800b138:	d306      	bcc.n	800b148 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	699a      	ldr	r2, [r3, #24]
 800b13e:	8b7b      	ldrh	r3, [r7, #26]
 800b140:	1ad2      	subs	r2, r2, r3
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	619a      	str	r2, [r3, #24]
 800b146:	e002      	b.n	800b14e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	2200      	movs	r2, #0
 800b14c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	699b      	ldr	r3, [r3, #24]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d123      	bne.n	800b19e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	461a      	mov	r2, r3
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	4413      	add	r3, r2
 800b164:	881b      	ldrh	r3, [r3, #0]
 800b166:	b29b      	uxth	r3, r3
 800b168:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b16c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b170:	833b      	strh	r3, [r7, #24]
 800b172:	8b3b      	ldrh	r3, [r7, #24]
 800b174:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b178:	833b      	strh	r3, [r7, #24]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	461a      	mov	r2, r3
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	441a      	add	r2, r3
 800b188:	8b3b      	ldrh	r3, [r7, #24]
 800b18a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b18e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b19e:	88fb      	ldrh	r3, [r7, #6]
 800b1a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d01f      	beq.n	800b1e8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	4413      	add	r3, r2
 800b1b6:	881b      	ldrh	r3, [r3, #0]
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1c2:	82fb      	strh	r3, [r7, #22]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	441a      	add	r2, r3
 800b1d2:	8afb      	ldrh	r3, [r7, #22]
 800b1d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b1e8:	8b7b      	ldrh	r3, [r7, #26]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	f000 8085 	beq.w	800b2fa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6818      	ldr	r0, [r3, #0]
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	6959      	ldr	r1, [r3, #20]
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	891a      	ldrh	r2, [r3, #8]
 800b1fc:	8b7b      	ldrh	r3, [r7, #26]
 800b1fe:	f006 fe62 	bl	8011ec6 <USB_ReadPMA>
 800b202:	e07a      	b.n	800b2fa <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	461a      	mov	r2, r3
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	00db      	lsls	r3, r3, #3
 800b216:	4413      	add	r3, r2
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	6812      	ldr	r2, [r2, #0]
 800b21c:	4413      	add	r3, r2
 800b21e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b222:	881b      	ldrh	r3, [r3, #0]
 800b224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b228:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	699a      	ldr	r2, [r3, #24]
 800b22e:	8b7b      	ldrh	r3, [r7, #26]
 800b230:	429a      	cmp	r2, r3
 800b232:	d306      	bcc.n	800b242 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	699a      	ldr	r2, [r3, #24]
 800b238:	8b7b      	ldrh	r3, [r7, #26]
 800b23a:	1ad2      	subs	r2, r2, r3
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	619a      	str	r2, [r3, #24]
 800b240:	e002      	b.n	800b248 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	2200      	movs	r2, #0
 800b246:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	699b      	ldr	r3, [r3, #24]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d123      	bne.n	800b298 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	461a      	mov	r2, r3
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4413      	add	r3, r2
 800b25e:	881b      	ldrh	r3, [r3, #0]
 800b260:	b29b      	uxth	r3, r3
 800b262:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b26a:	83fb      	strh	r3, [r7, #30]
 800b26c:	8bfb      	ldrh	r3, [r7, #30]
 800b26e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b272:	83fb      	strh	r3, [r7, #30]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	461a      	mov	r2, r3
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	441a      	add	r2, r3
 800b282:	8bfb      	ldrh	r3, [r7, #30]
 800b284:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b288:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b28c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b294:	b29b      	uxth	r3, r3
 800b296:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800b298:	88fb      	ldrh	r3, [r7, #6]
 800b29a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d11f      	bne.n	800b2e2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	4413      	add	r3, r2
 800b2b0:	881b      	ldrh	r3, [r3, #0]
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2bc:	83bb      	strh	r3, [r7, #28]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	441a      	add	r2, r3
 800b2cc:	8bbb      	ldrh	r3, [r7, #28]
 800b2ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b2e2:	8b7b      	ldrh	r3, [r7, #26]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d008      	beq.n	800b2fa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	6818      	ldr	r0, [r3, #0]
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	6959      	ldr	r1, [r3, #20]
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	895a      	ldrh	r2, [r3, #10]
 800b2f4:	8b7b      	ldrh	r3, [r7, #26]
 800b2f6:	f006 fde6 	bl	8011ec6 <USB_ReadPMA>
    }
  }

  return count;
 800b2fa:	8b7b      	ldrh	r3, [r7, #26]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3720      	adds	r7, #32
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b0a6      	sub	sp, #152	@ 0x98
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	4613      	mov	r3, r2
 800b310:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b312:	88fb      	ldrh	r3, [r7, #6]
 800b314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f000 81f7 	beq.w	800b70c <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b326:	b29b      	uxth	r3, r3
 800b328:	461a      	mov	r2, r3
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	00db      	lsls	r3, r3, #3
 800b330:	4413      	add	r3, r2
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	6812      	ldr	r2, [r2, #0]
 800b336:	4413      	add	r3, r2
 800b338:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b33c:	881b      	ldrh	r3, [r3, #0]
 800b33e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b342:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	699a      	ldr	r2, [r3, #24]
 800b34a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b34e:	429a      	cmp	r2, r3
 800b350:	d907      	bls.n	800b362 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	699a      	ldr	r2, [r3, #24]
 800b356:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b35a:	1ad2      	subs	r2, r2, r3
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	619a      	str	r2, [r3, #24]
 800b360:	e002      	b.n	800b368 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	2200      	movs	r2, #0
 800b366:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f040 80e1 	bne.w	800b534 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	785b      	ldrb	r3, [r3, #1]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d126      	bne.n	800b3c8 <HAL_PCD_EP_DB_Transmit+0xc4>
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b388:	b29b      	uxth	r3, r3
 800b38a:	461a      	mov	r2, r3
 800b38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b38e:	4413      	add	r3, r2
 800b390:	633b      	str	r3, [r7, #48]	@ 0x30
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	00da      	lsls	r2, r3, #3
 800b398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39a:	4413      	add	r3, r2
 800b39c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b3a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a4:	881b      	ldrh	r3, [r3, #0]
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3ac:	b29a      	uxth	r2, r3
 800b3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3b0:	801a      	strh	r2, [r3, #0]
 800b3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3b4:	881b      	ldrh	r3, [r3, #0]
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3c0:	b29a      	uxth	r2, r3
 800b3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c4:	801a      	strh	r2, [r3, #0]
 800b3c6:	e01a      	b.n	800b3fe <HAL_PCD_EP_DB_Transmit+0xfa>
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	785b      	ldrb	r3, [r3, #1]
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d116      	bne.n	800b3fe <HAL_PCD_EP_DB_Transmit+0xfa>
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3e4:	4413      	add	r3, r2
 800b3e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	00da      	lsls	r2, r3, #3
 800b3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f0:	4413      	add	r3, r2
 800b3f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b3f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	785b      	ldrb	r3, [r3, #1]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d126      	bne.n	800b45a <HAL_PCD_EP_DB_Transmit+0x156>
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	623b      	str	r3, [r7, #32]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	461a      	mov	r2, r3
 800b41e:	6a3b      	ldr	r3, [r7, #32]
 800b420:	4413      	add	r3, r2
 800b422:	623b      	str	r3, [r7, #32]
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	00da      	lsls	r2, r3, #3
 800b42a:	6a3b      	ldr	r3, [r7, #32]
 800b42c:	4413      	add	r3, r2
 800b42e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b432:	61fb      	str	r3, [r7, #28]
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	881b      	ldrh	r3, [r3, #0]
 800b438:	b29b      	uxth	r3, r3
 800b43a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b43e:	b29a      	uxth	r2, r3
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	801a      	strh	r2, [r3, #0]
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	881b      	ldrh	r3, [r3, #0]
 800b448:	b29b      	uxth	r3, r3
 800b44a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b44e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b452:	b29a      	uxth	r2, r3
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	801a      	strh	r2, [r3, #0]
 800b458:	e017      	b.n	800b48a <HAL_PCD_EP_DB_Transmit+0x186>
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	785b      	ldrb	r3, [r3, #1]
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d113      	bne.n	800b48a <HAL_PCD_EP_DB_Transmit+0x186>
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	461a      	mov	r2, r3
 800b46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b470:	4413      	add	r3, r2
 800b472:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	00da      	lsls	r2, r3, #3
 800b47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b47c:	4413      	add	r3, r2
 800b47e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b482:	627b      	str	r3, [r7, #36]	@ 0x24
 800b484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b486:	2200      	movs	r2, #0
 800b488:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	78db      	ldrb	r3, [r3, #3]
 800b48e:	2b02      	cmp	r3, #2
 800b490:	d123      	bne.n	800b4da <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	461a      	mov	r2, r3
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	4413      	add	r3, r2
 800b4a0:	881b      	ldrh	r3, [r3, #0]
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4ac:	837b      	strh	r3, [r7, #26]
 800b4ae:	8b7b      	ldrh	r3, [r7, #26]
 800b4b0:	f083 0320 	eor.w	r3, r3, #32
 800b4b4:	837b      	strh	r3, [r7, #26]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	441a      	add	r2, r3
 800b4c4:	8b7b      	ldrh	r3, [r7, #26]
 800b4c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	4619      	mov	r1, r3
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f008 fbee 	bl	8013cc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b4e6:	88fb      	ldrh	r3, [r7, #6]
 800b4e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d01f      	beq.n	800b530 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	4413      	add	r3, r2
 800b4fe:	881b      	ldrh	r3, [r3, #0]
 800b500:	b29b      	uxth	r3, r3
 800b502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b50a:	833b      	strh	r3, [r7, #24]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	461a      	mov	r2, r3
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	441a      	add	r2, r3
 800b51a:	8b3b      	ldrh	r3, [r7, #24]
 800b51c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b520:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b524:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b530:	2300      	movs	r3, #0
 800b532:	e31f      	b.n	800bb74 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b534:	88fb      	ldrh	r3, [r7, #6]
 800b536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d021      	beq.n	800b582 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	461a      	mov	r2, r3
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	4413      	add	r3, r2
 800b54c:	881b      	ldrh	r3, [r3, #0]
 800b54e:	b29b      	uxth	r3, r3
 800b550:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b558:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	461a      	mov	r2, r3
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	441a      	add	r2, r3
 800b56a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b56e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b576:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b57a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b57e:	b29b      	uxth	r3, r3
 800b580:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b588:	2b01      	cmp	r3, #1
 800b58a:	f040 82ca 	bne.w	800bb22 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	695a      	ldr	r2, [r3, #20]
 800b592:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b596:	441a      	add	r2, r3
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	69da      	ldr	r2, [r3, #28]
 800b5a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b5a4:	441a      	add	r2, r3
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	6a1a      	ldr	r2, [r3, #32]
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	691b      	ldr	r3, [r3, #16]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d309      	bcc.n	800b5ca <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	6a1a      	ldr	r2, [r3, #32]
 800b5c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5c2:	1ad2      	subs	r2, r2, r3
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	621a      	str	r2, [r3, #32]
 800b5c8:	e015      	b.n	800b5f6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	6a1b      	ldr	r3, [r3, #32]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d107      	bne.n	800b5e2 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800b5d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b5d6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b5e0:	e009      	b.n	800b5f6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	6a1b      	ldr	r3, [r3, #32]
 800b5ee:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	785b      	ldrb	r3, [r3, #1]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d15f      	bne.n	800b6be <HAL_PCD_EP_DB_Transmit+0x3ba>
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	643b      	str	r3, [r7, #64]	@ 0x40
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	461a      	mov	r2, r3
 800b610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b612:	4413      	add	r3, r2
 800b614:	643b      	str	r3, [r7, #64]	@ 0x40
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	00da      	lsls	r2, r3, #3
 800b61c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b61e:	4413      	add	r3, r2
 800b620:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b624:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b628:	881b      	ldrh	r3, [r3, #0]
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b630:	b29a      	uxth	r2, r3
 800b632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b634:	801a      	strh	r2, [r3, #0]
 800b636:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d10a      	bne.n	800b652 <HAL_PCD_EP_DB_Transmit+0x34e>
 800b63c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b63e:	881b      	ldrh	r3, [r3, #0]
 800b640:	b29b      	uxth	r3, r3
 800b642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b64e:	801a      	strh	r2, [r3, #0]
 800b650:	e051      	b.n	800b6f6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b652:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b654:	2b3e      	cmp	r3, #62	@ 0x3e
 800b656:	d816      	bhi.n	800b686 <HAL_PCD_EP_DB_Transmit+0x382>
 800b658:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b65a:	085b      	lsrs	r3, r3, #1
 800b65c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b65e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b660:	f003 0301 	and.w	r3, r3, #1
 800b664:	2b00      	cmp	r3, #0
 800b666:	d002      	beq.n	800b66e <HAL_PCD_EP_DB_Transmit+0x36a>
 800b668:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b66a:	3301      	adds	r3, #1
 800b66c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b66e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b670:	881b      	ldrh	r3, [r3, #0]
 800b672:	b29a      	uxth	r2, r3
 800b674:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b676:	b29b      	uxth	r3, r3
 800b678:	029b      	lsls	r3, r3, #10
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	4313      	orrs	r3, r2
 800b67e:	b29a      	uxth	r2, r3
 800b680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b682:	801a      	strh	r2, [r3, #0]
 800b684:	e037      	b.n	800b6f6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b686:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b688:	095b      	lsrs	r3, r3, #5
 800b68a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b68c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b68e:	f003 031f 	and.w	r3, r3, #31
 800b692:	2b00      	cmp	r3, #0
 800b694:	d102      	bne.n	800b69c <HAL_PCD_EP_DB_Transmit+0x398>
 800b696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b698:	3b01      	subs	r3, #1
 800b69a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b69c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b69e:	881b      	ldrh	r3, [r3, #0]
 800b6a0:	b29a      	uxth	r2, r3
 800b6a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	029b      	lsls	r3, r3, #10
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6b6:	b29a      	uxth	r2, r3
 800b6b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6ba:	801a      	strh	r2, [r3, #0]
 800b6bc:	e01b      	b.n	800b6f6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	785b      	ldrb	r3, [r3, #1]
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d117      	bne.n	800b6f6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6da:	4413      	add	r3, r2
 800b6dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	00da      	lsls	r2, r3, #3
 800b6e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6e6:	4413      	add	r3, r2
 800b6e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b6ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b6f0:	b29a      	uxth	r2, r3
 800b6f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6f4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	6818      	ldr	r0, [r3, #0]
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	6959      	ldr	r1, [r3, #20]
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	891a      	ldrh	r2, [r3, #8]
 800b702:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b704:	b29b      	uxth	r3, r3
 800b706:	f006 fb9c 	bl	8011e42 <USB_WritePMA>
 800b70a:	e20a      	b.n	800bb22 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b714:	b29b      	uxth	r3, r3
 800b716:	461a      	mov	r2, r3
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	00db      	lsls	r3, r3, #3
 800b71e:	4413      	add	r3, r2
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	6812      	ldr	r2, [r2, #0]
 800b724:	4413      	add	r3, r2
 800b726:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b72a:	881b      	ldrh	r3, [r3, #0]
 800b72c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b730:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	699a      	ldr	r2, [r3, #24]
 800b738:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d307      	bcc.n	800b750 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	699a      	ldr	r2, [r3, #24]
 800b744:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b748:	1ad2      	subs	r2, r2, r3
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	619a      	str	r2, [r3, #24]
 800b74e:	e002      	b.n	800b756 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	2200      	movs	r2, #0
 800b754:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	699b      	ldr	r3, [r3, #24]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	f040 80f6 	bne.w	800b94c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	785b      	ldrb	r3, [r3, #1]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d126      	bne.n	800b7b6 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	677b      	str	r3, [r7, #116]	@ 0x74
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b776:	b29b      	uxth	r3, r3
 800b778:	461a      	mov	r2, r3
 800b77a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b77c:	4413      	add	r3, r2
 800b77e:	677b      	str	r3, [r7, #116]	@ 0x74
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	00da      	lsls	r2, r3, #3
 800b786:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b788:	4413      	add	r3, r2
 800b78a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b78e:	673b      	str	r3, [r7, #112]	@ 0x70
 800b790:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b792:	881b      	ldrh	r3, [r3, #0]
 800b794:	b29b      	uxth	r3, r3
 800b796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b79a:	b29a      	uxth	r2, r3
 800b79c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b79e:	801a      	strh	r2, [r3, #0]
 800b7a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b7a2:	881b      	ldrh	r3, [r3, #0]
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7ae:	b29a      	uxth	r2, r3
 800b7b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b7b2:	801a      	strh	r2, [r3, #0]
 800b7b4:	e01a      	b.n	800b7ec <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	785b      	ldrb	r3, [r3, #1]
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d116      	bne.n	800b7ec <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b7d2:	4413      	add	r3, r2
 800b7d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	00da      	lsls	r2, r3, #3
 800b7dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b7de:	4413      	add	r3, r2
 800b7e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b7e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b7e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	785b      	ldrb	r3, [r3, #1]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d12f      	bne.n	800b85c <HAL_PCD_EP_DB_Transmit+0x558>
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	461a      	mov	r2, r3
 800b810:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b814:	4413      	add	r3, r2
 800b816:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	00da      	lsls	r2, r3, #3
 800b820:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b824:	4413      	add	r3, r2
 800b826:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b82a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b82e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b832:	881b      	ldrh	r3, [r3, #0]
 800b834:	b29b      	uxth	r3, r3
 800b836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b840:	801a      	strh	r2, [r3, #0]
 800b842:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b846:	881b      	ldrh	r3, [r3, #0]
 800b848:	b29b      	uxth	r3, r3
 800b84a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b84e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b852:	b29a      	uxth	r2, r3
 800b854:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b858:	801a      	strh	r2, [r3, #0]
 800b85a:	e01c      	b.n	800b896 <HAL_PCD_EP_DB_Transmit+0x592>
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	785b      	ldrb	r3, [r3, #1]
 800b860:	2b01      	cmp	r3, #1
 800b862:	d118      	bne.n	800b896 <HAL_PCD_EP_DB_Transmit+0x592>
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	461a      	mov	r2, r3
 800b870:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b874:	4413      	add	r3, r2
 800b876:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	00da      	lsls	r2, r3, #3
 800b880:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b884:	4413      	add	r3, r2
 800b886:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b88a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b88e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b892:	2200      	movs	r2, #0
 800b894:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	78db      	ldrb	r3, [r3, #3]
 800b89a:	2b02      	cmp	r3, #2
 800b89c:	d127      	bne.n	800b8ee <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	4413      	add	r3, r2
 800b8ac:	881b      	ldrh	r3, [r3, #0]
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b8b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8b8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b8bc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b8c0:	f083 0320 	eor.w	r3, r3, #32
 800b8c4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	441a      	add	r2, r3
 800b8d6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b8da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b8e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f008 f9e4 	bl	8013cc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b8fa:	88fb      	ldrh	r3, [r7, #6]
 800b8fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b900:	2b00      	cmp	r3, #0
 800b902:	d121      	bne.n	800b948 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	461a      	mov	r2, r3
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	4413      	add	r3, r2
 800b912:	881b      	ldrh	r3, [r3, #0]
 800b914:	b29b      	uxth	r3, r3
 800b916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b91a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b91e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	461a      	mov	r2, r3
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	441a      	add	r2, r3
 800b930:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b934:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b938:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b93c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b944:	b29b      	uxth	r3, r3
 800b946:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b948:	2300      	movs	r3, #0
 800b94a:	e113      	b.n	800bb74 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b94c:	88fb      	ldrh	r3, [r7, #6]
 800b94e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b952:	2b00      	cmp	r3, #0
 800b954:	d121      	bne.n	800b99a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	461a      	mov	r2, r3
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	4413      	add	r3, r2
 800b964:	881b      	ldrh	r3, [r3, #0]
 800b966:	b29b      	uxth	r3, r3
 800b968:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b96c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b970:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	461a      	mov	r2, r3
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	441a      	add	r2, r3
 800b982:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b986:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b98a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b98e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b996:	b29b      	uxth	r3, r3
 800b998:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	f040 80be 	bne.w	800bb22 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	695a      	ldr	r2, [r3, #20]
 800b9aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b9ae:	441a      	add	r2, r3
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	69da      	ldr	r2, [r3, #28]
 800b9b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b9bc:	441a      	add	r2, r3
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	6a1a      	ldr	r2, [r3, #32]
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	691b      	ldr	r3, [r3, #16]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d309      	bcc.n	800b9e2 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	691b      	ldr	r3, [r3, #16]
 800b9d2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	6a1a      	ldr	r2, [r3, #32]
 800b9d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9da:	1ad2      	subs	r2, r2, r3
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	621a      	str	r2, [r3, #32]
 800b9e0:	e015      	b.n	800ba0e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	6a1b      	ldr	r3, [r3, #32]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d107      	bne.n	800b9fa <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800b9ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b9ee:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b9f8:	e009      	b.n	800ba0e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	6a1b      	ldr	r3, [r3, #32]
 800b9fe:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	2200      	movs	r2, #0
 800ba04:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	785b      	ldrb	r3, [r3, #1]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d15f      	bne.n	800badc <HAL_PCD_EP_DB_Transmit+0x7d8>
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba30:	4413      	add	r3, r2
 800ba32:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	00da      	lsls	r2, r3, #3
 800ba3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba3c:	4413      	add	r3, r2
 800ba3e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ba42:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba46:	881b      	ldrh	r3, [r3, #0]
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba4e:	b29a      	uxth	r2, r3
 800ba50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba52:	801a      	strh	r2, [r3, #0]
 800ba54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10a      	bne.n	800ba70 <HAL_PCD_EP_DB_Transmit+0x76c>
 800ba5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba5c:	881b      	ldrh	r3, [r3, #0]
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba68:	b29a      	uxth	r2, r3
 800ba6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba6c:	801a      	strh	r2, [r3, #0]
 800ba6e:	e04e      	b.n	800bb0e <HAL_PCD_EP_DB_Transmit+0x80a>
 800ba70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba72:	2b3e      	cmp	r3, #62	@ 0x3e
 800ba74:	d816      	bhi.n	800baa4 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800ba76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba78:	085b      	lsrs	r3, r3, #1
 800ba7a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba7e:	f003 0301 	and.w	r3, r3, #1
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d002      	beq.n	800ba8c <HAL_PCD_EP_DB_Transmit+0x788>
 800ba86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba88:	3301      	adds	r3, #1
 800ba8a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba8e:	881b      	ldrh	r3, [r3, #0]
 800ba90:	b29a      	uxth	r2, r3
 800ba92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	029b      	lsls	r3, r3, #10
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	b29a      	uxth	r2, r3
 800ba9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800baa0:	801a      	strh	r2, [r3, #0]
 800baa2:	e034      	b.n	800bb0e <HAL_PCD_EP_DB_Transmit+0x80a>
 800baa4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800baa6:	095b      	lsrs	r3, r3, #5
 800baa8:	663b      	str	r3, [r7, #96]	@ 0x60
 800baaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800baac:	f003 031f 	and.w	r3, r3, #31
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d102      	bne.n	800baba <HAL_PCD_EP_DB_Transmit+0x7b6>
 800bab4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bab6:	3b01      	subs	r3, #1
 800bab8:	663b      	str	r3, [r7, #96]	@ 0x60
 800baba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800babc:	881b      	ldrh	r3, [r3, #0]
 800babe:	b29a      	uxth	r2, r3
 800bac0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	029b      	lsls	r3, r3, #10
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	4313      	orrs	r3, r2
 800baca:	b29b      	uxth	r3, r3
 800bacc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bad8:	801a      	strh	r2, [r3, #0]
 800bada:	e018      	b.n	800bb0e <HAL_PCD_EP_DB_Transmit+0x80a>
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	785b      	ldrb	r3, [r3, #1]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d114      	bne.n	800bb0e <HAL_PCD_EP_DB_Transmit+0x80a>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800baec:	b29b      	uxth	r3, r3
 800baee:	461a      	mov	r2, r3
 800baf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800baf2:	4413      	add	r3, r2
 800baf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	00da      	lsls	r2, r3, #3
 800bafc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bafe:	4413      	add	r3, r2
 800bb00:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bb04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bb06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb0c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6818      	ldr	r0, [r3, #0]
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	6959      	ldr	r1, [r3, #20]
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	895a      	ldrh	r2, [r3, #10]
 800bb1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	f006 f990 	bl	8011e42 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	461a      	mov	r2, r3
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	4413      	add	r3, r2
 800bb30:	881b      	ldrh	r3, [r3, #0]
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb3c:	82fb      	strh	r3, [r7, #22]
 800bb3e:	8afb      	ldrh	r3, [r7, #22]
 800bb40:	f083 0310 	eor.w	r3, r3, #16
 800bb44:	82fb      	strh	r3, [r7, #22]
 800bb46:	8afb      	ldrh	r3, [r7, #22]
 800bb48:	f083 0320 	eor.w	r3, r3, #32
 800bb4c:	82fb      	strh	r3, [r7, #22]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	461a      	mov	r2, r3
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	441a      	add	r2, r3
 800bb5c:	8afb      	ldrh	r3, [r7, #22]
 800bb5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800bb72:	2300      	movs	r3, #0
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3798      	adds	r7, #152	@ 0x98
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b087      	sub	sp, #28
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	607b      	str	r3, [r7, #4]
 800bb86:	460b      	mov	r3, r1
 800bb88:	817b      	strh	r3, [r7, #10]
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800bb8e:	897b      	ldrh	r3, [r7, #10]
 800bb90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d00b      	beq.n	800bbb2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bb9a:	897b      	ldrh	r3, [r7, #10]
 800bb9c:	f003 0207 	and.w	r2, r3, #7
 800bba0:	4613      	mov	r3, r2
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	4413      	add	r3, r2
 800bba6:	00db      	lsls	r3, r3, #3
 800bba8:	3310      	adds	r3, #16
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	4413      	add	r3, r2
 800bbae:	617b      	str	r3, [r7, #20]
 800bbb0:	e009      	b.n	800bbc6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bbb2:	897a      	ldrh	r2, [r7, #10]
 800bbb4:	4613      	mov	r3, r2
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4413      	add	r3, r2
 800bbba:	00db      	lsls	r3, r3, #3
 800bbbc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800bbc6:	893b      	ldrh	r3, [r7, #8]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d107      	bne.n	800bbdc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	80da      	strh	r2, [r3, #6]
 800bbda:	e00b      	b.n	800bbf4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	b29a      	uxth	r2, r3
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	0c1b      	lsrs	r3, r3, #16
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	371c      	adds	r7, #28
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr

0800bc02 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bc02:	b480      	push	{r7}
 800bc04:	b085      	sub	sp, #20
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2201      	movs	r2, #1
 800bc14:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	f043 0301 	orr.w	r3, r3, #1
 800bc2c:	b29a      	uxth	r2, r3
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	f043 0302 	orr.w	r3, r3, #2
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3714      	adds	r7, #20
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr
	...

0800bc58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d141      	bne.n	800bcea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800bc66:	4b4b      	ldr	r3, [pc, #300]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bc6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc72:	d131      	bne.n	800bcd8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800bc74:	4b47      	ldr	r3, [pc, #284]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bc76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc7a:	4a46      	ldr	r2, [pc, #280]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bc7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800bc84:	4b43      	ldr	r3, [pc, #268]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800bc8c:	4a41      	ldr	r2, [pc, #260]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bc8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bc92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800bc94:	4b40      	ldr	r3, [pc, #256]	@ (800bd98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2232      	movs	r2, #50	@ 0x32
 800bc9a:	fb02 f303 	mul.w	r3, r2, r3
 800bc9e:	4a3f      	ldr	r2, [pc, #252]	@ (800bd9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800bca0:	fba2 2303 	umull	r2, r3, r2, r3
 800bca4:	0c9b      	lsrs	r3, r3, #18
 800bca6:	3301      	adds	r3, #1
 800bca8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bcaa:	e002      	b.n	800bcb2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bcb2:	4b38      	ldr	r3, [pc, #224]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bcb4:	695b      	ldr	r3, [r3, #20]
 800bcb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bcba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bcbe:	d102      	bne.n	800bcc6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1f2      	bne.n	800bcac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800bcc6:	4b33      	ldr	r3, [pc, #204]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bcc8:	695b      	ldr	r3, [r3, #20]
 800bcca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bcce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bcd2:	d158      	bne.n	800bd86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800bcd4:	2303      	movs	r3, #3
 800bcd6:	e057      	b.n	800bd88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800bcd8:	4b2e      	ldr	r3, [pc, #184]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bcda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcde:	4a2d      	ldr	r2, [pc, #180]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bce4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800bce8:	e04d      	b.n	800bd86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bcf0:	d141      	bne.n	800bd76 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800bcf2:	4b28      	ldr	r3, [pc, #160]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bcfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bcfe:	d131      	bne.n	800bd64 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800bd00:	4b24      	ldr	r3, [pc, #144]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd06:	4a23      	ldr	r2, [pc, #140]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800bd10:	4b20      	ldr	r3, [pc, #128]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800bd18:	4a1e      	ldr	r2, [pc, #120]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bd1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800bd20:	4b1d      	ldr	r3, [pc, #116]	@ (800bd98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2232      	movs	r2, #50	@ 0x32
 800bd26:	fb02 f303 	mul.w	r3, r2, r3
 800bd2a:	4a1c      	ldr	r2, [pc, #112]	@ (800bd9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800bd2c:	fba2 2303 	umull	r2, r3, r2, r3
 800bd30:	0c9b      	lsrs	r3, r3, #18
 800bd32:	3301      	adds	r3, #1
 800bd34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bd36:	e002      	b.n	800bd3e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bd3e:	4b15      	ldr	r3, [pc, #84]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd40:	695b      	ldr	r3, [r3, #20]
 800bd42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd4a:	d102      	bne.n	800bd52 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d1f2      	bne.n	800bd38 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800bd52:	4b10      	ldr	r3, [pc, #64]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd54:	695b      	ldr	r3, [r3, #20]
 800bd56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd5e:	d112      	bne.n	800bd86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800bd60:	2303      	movs	r3, #3
 800bd62:	e011      	b.n	800bd88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800bd64:	4b0b      	ldr	r3, [pc, #44]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd6a:	4a0a      	ldr	r2, [pc, #40]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800bd74:	e007      	b.n	800bd86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800bd76:	4b07      	ldr	r3, [pc, #28]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800bd7e:	4a05      	ldr	r2, [pc, #20]	@ (800bd94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bd84:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800bd86:	2300      	movs	r3, #0
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3714      	adds	r7, #20
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr
 800bd94:	40007000 	.word	0x40007000
 800bd98:	20000274 	.word	0x20000274
 800bd9c:	431bde83 	.word	0x431bde83

0800bda0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800bda0:	b480      	push	{r7}
 800bda2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800bda4:	4b05      	ldr	r3, [pc, #20]	@ (800bdbc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	4a04      	ldr	r2, [pc, #16]	@ (800bdbc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800bdaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bdae:	6093      	str	r3, [r2, #8]
}
 800bdb0:	bf00      	nop
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop
 800bdbc:	40007000 	.word	0x40007000

0800bdc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b088      	sub	sp, #32
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d101      	bne.n	800bdd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e2fe      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f003 0301 	and.w	r3, r3, #1
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d075      	beq.n	800beca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bdde:	4b97      	ldr	r3, [pc, #604]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	f003 030c 	and.w	r3, r3, #12
 800bde6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bde8:	4b94      	ldr	r3, [pc, #592]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	f003 0303 	and.w	r3, r3, #3
 800bdf0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	2b0c      	cmp	r3, #12
 800bdf6:	d102      	bne.n	800bdfe <HAL_RCC_OscConfig+0x3e>
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	2b03      	cmp	r3, #3
 800bdfc:	d002      	beq.n	800be04 <HAL_RCC_OscConfig+0x44>
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	2b08      	cmp	r3, #8
 800be02:	d10b      	bne.n	800be1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800be04:	4b8d      	ldr	r3, [pc, #564]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d05b      	beq.n	800bec8 <HAL_RCC_OscConfig+0x108>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d157      	bne.n	800bec8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800be18:	2301      	movs	r3, #1
 800be1a:	e2d9      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be24:	d106      	bne.n	800be34 <HAL_RCC_OscConfig+0x74>
 800be26:	4b85      	ldr	r3, [pc, #532]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a84      	ldr	r2, [pc, #528]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800be2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be30:	6013      	str	r3, [r2, #0]
 800be32:	e01d      	b.n	800be70 <HAL_RCC_OscConfig+0xb0>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800be3c:	d10c      	bne.n	800be58 <HAL_RCC_OscConfig+0x98>
 800be3e:	4b7f      	ldr	r3, [pc, #508]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4a7e      	ldr	r2, [pc, #504]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800be44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800be48:	6013      	str	r3, [r2, #0]
 800be4a:	4b7c      	ldr	r3, [pc, #496]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4a7b      	ldr	r2, [pc, #492]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800be50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be54:	6013      	str	r3, [r2, #0]
 800be56:	e00b      	b.n	800be70 <HAL_RCC_OscConfig+0xb0>
 800be58:	4b78      	ldr	r3, [pc, #480]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a77      	ldr	r2, [pc, #476]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800be5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be62:	6013      	str	r3, [r2, #0]
 800be64:	4b75      	ldr	r3, [pc, #468]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a74      	ldr	r2, [pc, #464]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800be6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800be6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d013      	beq.n	800bea0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be78:	f7f8 fefc 	bl	8004c74 <HAL_GetTick>
 800be7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be7e:	e008      	b.n	800be92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be80:	f7f8 fef8 	bl	8004c74 <HAL_GetTick>
 800be84:	4602      	mov	r2, r0
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	1ad3      	subs	r3, r2, r3
 800be8a:	2b64      	cmp	r3, #100	@ 0x64
 800be8c:	d901      	bls.n	800be92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800be8e:	2303      	movs	r3, #3
 800be90:	e29e      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be92:	4b6a      	ldr	r3, [pc, #424]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d0f0      	beq.n	800be80 <HAL_RCC_OscConfig+0xc0>
 800be9e:	e014      	b.n	800beca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bea0:	f7f8 fee8 	bl	8004c74 <HAL_GetTick>
 800bea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bea6:	e008      	b.n	800beba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bea8:	f7f8 fee4 	bl	8004c74 <HAL_GetTick>
 800beac:	4602      	mov	r2, r0
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	1ad3      	subs	r3, r2, r3
 800beb2:	2b64      	cmp	r3, #100	@ 0x64
 800beb4:	d901      	bls.n	800beba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800beb6:	2303      	movs	r3, #3
 800beb8:	e28a      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800beba:	4b60      	ldr	r3, [pc, #384]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d1f0      	bne.n	800bea8 <HAL_RCC_OscConfig+0xe8>
 800bec6:	e000      	b.n	800beca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f003 0302 	and.w	r3, r3, #2
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d075      	beq.n	800bfc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bed6:	4b59      	ldr	r3, [pc, #356]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800bed8:	689b      	ldr	r3, [r3, #8]
 800beda:	f003 030c 	and.w	r3, r3, #12
 800bede:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bee0:	4b56      	ldr	r3, [pc, #344]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	f003 0303 	and.w	r3, r3, #3
 800bee8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	2b0c      	cmp	r3, #12
 800beee:	d102      	bne.n	800bef6 <HAL_RCC_OscConfig+0x136>
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	d002      	beq.n	800befc <HAL_RCC_OscConfig+0x13c>
 800bef6:	69bb      	ldr	r3, [r7, #24]
 800bef8:	2b04      	cmp	r3, #4
 800befa:	d11f      	bne.n	800bf3c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800befc:	4b4f      	ldr	r3, [pc, #316]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d005      	beq.n	800bf14 <HAL_RCC_OscConfig+0x154>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	68db      	ldr	r3, [r3, #12]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d101      	bne.n	800bf14 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800bf10:	2301      	movs	r3, #1
 800bf12:	e25d      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf14:	4b49      	ldr	r3, [pc, #292]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	061b      	lsls	r3, r3, #24
 800bf22:	4946      	ldr	r1, [pc, #280]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800bf24:	4313      	orrs	r3, r2
 800bf26:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800bf28:	4b45      	ldr	r3, [pc, #276]	@ (800c040 <HAL_RCC_OscConfig+0x280>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f7f8 fe55 	bl	8004bdc <HAL_InitTick>
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d043      	beq.n	800bfc0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e249      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d023      	beq.n	800bf8c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bf44:	4b3d      	ldr	r3, [pc, #244]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a3c      	ldr	r2, [pc, #240]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800bf4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bf4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf50:	f7f8 fe90 	bl	8004c74 <HAL_GetTick>
 800bf54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bf56:	e008      	b.n	800bf6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf58:	f7f8 fe8c 	bl	8004c74 <HAL_GetTick>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	1ad3      	subs	r3, r2, r3
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	d901      	bls.n	800bf6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800bf66:	2303      	movs	r3, #3
 800bf68:	e232      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bf6a:	4b34      	ldr	r3, [pc, #208]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d0f0      	beq.n	800bf58 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf76:	4b31      	ldr	r3, [pc, #196]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	691b      	ldr	r3, [r3, #16]
 800bf82:	061b      	lsls	r3, r3, #24
 800bf84:	492d      	ldr	r1, [pc, #180]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800bf86:	4313      	orrs	r3, r2
 800bf88:	604b      	str	r3, [r1, #4]
 800bf8a:	e01a      	b.n	800bfc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bf8c:	4b2b      	ldr	r3, [pc, #172]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a2a      	ldr	r2, [pc, #168]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800bf92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf98:	f7f8 fe6c 	bl	8004c74 <HAL_GetTick>
 800bf9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bf9e:	e008      	b.n	800bfb2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bfa0:	f7f8 fe68 	bl	8004c74 <HAL_GetTick>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	1ad3      	subs	r3, r2, r3
 800bfaa:	2b02      	cmp	r3, #2
 800bfac:	d901      	bls.n	800bfb2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800bfae:	2303      	movs	r3, #3
 800bfb0:	e20e      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bfb2:	4b22      	ldr	r3, [pc, #136]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d1f0      	bne.n	800bfa0 <HAL_RCC_OscConfig+0x1e0>
 800bfbe:	e000      	b.n	800bfc2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bfc0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f003 0308 	and.w	r3, r3, #8
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d041      	beq.n	800c052 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	695b      	ldr	r3, [r3, #20]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d01c      	beq.n	800c010 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bfd6:	4b19      	ldr	r3, [pc, #100]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800bfd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bfdc:	4a17      	ldr	r2, [pc, #92]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800bfde:	f043 0301 	orr.w	r3, r3, #1
 800bfe2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfe6:	f7f8 fe45 	bl	8004c74 <HAL_GetTick>
 800bfea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bfec:	e008      	b.n	800c000 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bfee:	f7f8 fe41 	bl	8004c74 <HAL_GetTick>
 800bff2:	4602      	mov	r2, r0
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	1ad3      	subs	r3, r2, r3
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	d901      	bls.n	800c000 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bffc:	2303      	movs	r3, #3
 800bffe:	e1e7      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c000:	4b0e      	ldr	r3, [pc, #56]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800c002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c006:	f003 0302 	and.w	r3, r3, #2
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d0ef      	beq.n	800bfee <HAL_RCC_OscConfig+0x22e>
 800c00e:	e020      	b.n	800c052 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c010:	4b0a      	ldr	r3, [pc, #40]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800c012:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c016:	4a09      	ldr	r2, [pc, #36]	@ (800c03c <HAL_RCC_OscConfig+0x27c>)
 800c018:	f023 0301 	bic.w	r3, r3, #1
 800c01c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c020:	f7f8 fe28 	bl	8004c74 <HAL_GetTick>
 800c024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c026:	e00d      	b.n	800c044 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c028:	f7f8 fe24 	bl	8004c74 <HAL_GetTick>
 800c02c:	4602      	mov	r2, r0
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	1ad3      	subs	r3, r2, r3
 800c032:	2b02      	cmp	r3, #2
 800c034:	d906      	bls.n	800c044 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c036:	2303      	movs	r3, #3
 800c038:	e1ca      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>
 800c03a:	bf00      	nop
 800c03c:	40021000 	.word	0x40021000
 800c040:	2000027c 	.word	0x2000027c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c044:	4b8c      	ldr	r3, [pc, #560]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c046:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c04a:	f003 0302 	and.w	r3, r3, #2
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1ea      	bne.n	800c028 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f003 0304 	and.w	r3, r3, #4
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	f000 80a6 	beq.w	800c1ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c060:	2300      	movs	r3, #0
 800c062:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c064:	4b84      	ldr	r3, [pc, #528]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c068:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d101      	bne.n	800c074 <HAL_RCC_OscConfig+0x2b4>
 800c070:	2301      	movs	r3, #1
 800c072:	e000      	b.n	800c076 <HAL_RCC_OscConfig+0x2b6>
 800c074:	2300      	movs	r3, #0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00d      	beq.n	800c096 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c07a:	4b7f      	ldr	r3, [pc, #508]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c07c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c07e:	4a7e      	ldr	r2, [pc, #504]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c084:	6593      	str	r3, [r2, #88]	@ 0x58
 800c086:	4b7c      	ldr	r3, [pc, #496]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c08a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c08e:	60fb      	str	r3, [r7, #12]
 800c090:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c092:	2301      	movs	r3, #1
 800c094:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c096:	4b79      	ldr	r3, [pc, #484]	@ (800c27c <HAL_RCC_OscConfig+0x4bc>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d118      	bne.n	800c0d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c0a2:	4b76      	ldr	r3, [pc, #472]	@ (800c27c <HAL_RCC_OscConfig+0x4bc>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4a75      	ldr	r2, [pc, #468]	@ (800c27c <HAL_RCC_OscConfig+0x4bc>)
 800c0a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c0ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c0ae:	f7f8 fde1 	bl	8004c74 <HAL_GetTick>
 800c0b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c0b4:	e008      	b.n	800c0c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c0b6:	f7f8 fddd 	bl	8004c74 <HAL_GetTick>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	1ad3      	subs	r3, r2, r3
 800c0c0:	2b02      	cmp	r3, #2
 800c0c2:	d901      	bls.n	800c0c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800c0c4:	2303      	movs	r3, #3
 800c0c6:	e183      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c0c8:	4b6c      	ldr	r3, [pc, #432]	@ (800c27c <HAL_RCC_OscConfig+0x4bc>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d0f0      	beq.n	800c0b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d108      	bne.n	800c0ee <HAL_RCC_OscConfig+0x32e>
 800c0dc:	4b66      	ldr	r3, [pc, #408]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c0de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0e2:	4a65      	ldr	r2, [pc, #404]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c0e4:	f043 0301 	orr.w	r3, r3, #1
 800c0e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c0ec:	e024      	b.n	800c138 <HAL_RCC_OscConfig+0x378>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	689b      	ldr	r3, [r3, #8]
 800c0f2:	2b05      	cmp	r3, #5
 800c0f4:	d110      	bne.n	800c118 <HAL_RCC_OscConfig+0x358>
 800c0f6:	4b60      	ldr	r3, [pc, #384]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c0f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0fc:	4a5e      	ldr	r2, [pc, #376]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c0fe:	f043 0304 	orr.w	r3, r3, #4
 800c102:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c106:	4b5c      	ldr	r3, [pc, #368]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c10c:	4a5a      	ldr	r2, [pc, #360]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c10e:	f043 0301 	orr.w	r3, r3, #1
 800c112:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c116:	e00f      	b.n	800c138 <HAL_RCC_OscConfig+0x378>
 800c118:	4b57      	ldr	r3, [pc, #348]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c11a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c11e:	4a56      	ldr	r2, [pc, #344]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c120:	f023 0301 	bic.w	r3, r3, #1
 800c124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c128:	4b53      	ldr	r3, [pc, #332]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c12a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c12e:	4a52      	ldr	r2, [pc, #328]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c130:	f023 0304 	bic.w	r3, r3, #4
 800c134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d016      	beq.n	800c16e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c140:	f7f8 fd98 	bl	8004c74 <HAL_GetTick>
 800c144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c146:	e00a      	b.n	800c15e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c148:	f7f8 fd94 	bl	8004c74 <HAL_GetTick>
 800c14c:	4602      	mov	r2, r0
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c156:	4293      	cmp	r3, r2
 800c158:	d901      	bls.n	800c15e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800c15a:	2303      	movs	r3, #3
 800c15c:	e138      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c15e:	4b46      	ldr	r3, [pc, #280]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c164:	f003 0302 	and.w	r3, r3, #2
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d0ed      	beq.n	800c148 <HAL_RCC_OscConfig+0x388>
 800c16c:	e015      	b.n	800c19a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c16e:	f7f8 fd81 	bl	8004c74 <HAL_GetTick>
 800c172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c174:	e00a      	b.n	800c18c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c176:	f7f8 fd7d 	bl	8004c74 <HAL_GetTick>
 800c17a:	4602      	mov	r2, r0
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	1ad3      	subs	r3, r2, r3
 800c180:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c184:	4293      	cmp	r3, r2
 800c186:	d901      	bls.n	800c18c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800c188:	2303      	movs	r3, #3
 800c18a:	e121      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c18c:	4b3a      	ldr	r3, [pc, #232]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c18e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c192:	f003 0302 	and.w	r3, r3, #2
 800c196:	2b00      	cmp	r3, #0
 800c198:	d1ed      	bne.n	800c176 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c19a:	7ffb      	ldrb	r3, [r7, #31]
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d105      	bne.n	800c1ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c1a0:	4b35      	ldr	r3, [pc, #212]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c1a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1a4:	4a34      	ldr	r2, [pc, #208]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c1a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c1aa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f003 0320 	and.w	r3, r3, #32
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d03c      	beq.n	800c232 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	699b      	ldr	r3, [r3, #24]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d01c      	beq.n	800c1fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c1c0:	4b2d      	ldr	r3, [pc, #180]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c1c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c1c6:	4a2c      	ldr	r2, [pc, #176]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c1c8:	f043 0301 	orr.w	r3, r3, #1
 800c1cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1d0:	f7f8 fd50 	bl	8004c74 <HAL_GetTick>
 800c1d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c1d6:	e008      	b.n	800c1ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c1d8:	f7f8 fd4c 	bl	8004c74 <HAL_GetTick>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	2b02      	cmp	r3, #2
 800c1e4:	d901      	bls.n	800c1ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800c1e6:	2303      	movs	r3, #3
 800c1e8:	e0f2      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c1ea:	4b23      	ldr	r3, [pc, #140]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c1ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c1f0:	f003 0302 	and.w	r3, r3, #2
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d0ef      	beq.n	800c1d8 <HAL_RCC_OscConfig+0x418>
 800c1f8:	e01b      	b.n	800c232 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c1fa:	4b1f      	ldr	r3, [pc, #124]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c1fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c200:	4a1d      	ldr	r2, [pc, #116]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c202:	f023 0301 	bic.w	r3, r3, #1
 800c206:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c20a:	f7f8 fd33 	bl	8004c74 <HAL_GetTick>
 800c20e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c210:	e008      	b.n	800c224 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c212:	f7f8 fd2f 	bl	8004c74 <HAL_GetTick>
 800c216:	4602      	mov	r2, r0
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	1ad3      	subs	r3, r2, r3
 800c21c:	2b02      	cmp	r3, #2
 800c21e:	d901      	bls.n	800c224 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800c220:	2303      	movs	r3, #3
 800c222:	e0d5      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c224:	4b14      	ldr	r3, [pc, #80]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c226:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c22a:	f003 0302 	and.w	r3, r3, #2
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d1ef      	bne.n	800c212 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	69db      	ldr	r3, [r3, #28]
 800c236:	2b00      	cmp	r3, #0
 800c238:	f000 80c9 	beq.w	800c3ce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c23c:	4b0e      	ldr	r3, [pc, #56]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	f003 030c 	and.w	r3, r3, #12
 800c244:	2b0c      	cmp	r3, #12
 800c246:	f000 8083 	beq.w	800c350 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	69db      	ldr	r3, [r3, #28]
 800c24e:	2b02      	cmp	r3, #2
 800c250:	d15e      	bne.n	800c310 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c252:	4b09      	ldr	r3, [pc, #36]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4a08      	ldr	r2, [pc, #32]	@ (800c278 <HAL_RCC_OscConfig+0x4b8>)
 800c258:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c25c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c25e:	f7f8 fd09 	bl	8004c74 <HAL_GetTick>
 800c262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c264:	e00c      	b.n	800c280 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c266:	f7f8 fd05 	bl	8004c74 <HAL_GetTick>
 800c26a:	4602      	mov	r2, r0
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	1ad3      	subs	r3, r2, r3
 800c270:	2b02      	cmp	r3, #2
 800c272:	d905      	bls.n	800c280 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800c274:	2303      	movs	r3, #3
 800c276:	e0ab      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>
 800c278:	40021000 	.word	0x40021000
 800c27c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c280:	4b55      	ldr	r3, [pc, #340]	@ (800c3d8 <HAL_RCC_OscConfig+0x618>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d1ec      	bne.n	800c266 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c28c:	4b52      	ldr	r3, [pc, #328]	@ (800c3d8 <HAL_RCC_OscConfig+0x618>)
 800c28e:	68da      	ldr	r2, [r3, #12]
 800c290:	4b52      	ldr	r3, [pc, #328]	@ (800c3dc <HAL_RCC_OscConfig+0x61c>)
 800c292:	4013      	ands	r3, r2
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	6a11      	ldr	r1, [r2, #32]
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c29c:	3a01      	subs	r2, #1
 800c29e:	0112      	lsls	r2, r2, #4
 800c2a0:	4311      	orrs	r1, r2
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800c2a6:	0212      	lsls	r2, r2, #8
 800c2a8:	4311      	orrs	r1, r2
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c2ae:	0852      	lsrs	r2, r2, #1
 800c2b0:	3a01      	subs	r2, #1
 800c2b2:	0552      	lsls	r2, r2, #21
 800c2b4:	4311      	orrs	r1, r2
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c2ba:	0852      	lsrs	r2, r2, #1
 800c2bc:	3a01      	subs	r2, #1
 800c2be:	0652      	lsls	r2, r2, #25
 800c2c0:	4311      	orrs	r1, r2
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c2c6:	06d2      	lsls	r2, r2, #27
 800c2c8:	430a      	orrs	r2, r1
 800c2ca:	4943      	ldr	r1, [pc, #268]	@ (800c3d8 <HAL_RCC_OscConfig+0x618>)
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c2d0:	4b41      	ldr	r3, [pc, #260]	@ (800c3d8 <HAL_RCC_OscConfig+0x618>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	4a40      	ldr	r2, [pc, #256]	@ (800c3d8 <HAL_RCC_OscConfig+0x618>)
 800c2d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c2da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c2dc:	4b3e      	ldr	r3, [pc, #248]	@ (800c3d8 <HAL_RCC_OscConfig+0x618>)
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	4a3d      	ldr	r2, [pc, #244]	@ (800c3d8 <HAL_RCC_OscConfig+0x618>)
 800c2e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c2e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2e8:	f7f8 fcc4 	bl	8004c74 <HAL_GetTick>
 800c2ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c2ee:	e008      	b.n	800c302 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c2f0:	f7f8 fcc0 	bl	8004c74 <HAL_GetTick>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	2b02      	cmp	r3, #2
 800c2fc:	d901      	bls.n	800c302 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800c2fe:	2303      	movs	r3, #3
 800c300:	e066      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c302:	4b35      	ldr	r3, [pc, #212]	@ (800c3d8 <HAL_RCC_OscConfig+0x618>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d0f0      	beq.n	800c2f0 <HAL_RCC_OscConfig+0x530>
 800c30e:	e05e      	b.n	800c3ce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c310:	4b31      	ldr	r3, [pc, #196]	@ (800c3d8 <HAL_RCC_OscConfig+0x618>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a30      	ldr	r2, [pc, #192]	@ (800c3d8 <HAL_RCC_OscConfig+0x618>)
 800c316:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c31a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c31c:	f7f8 fcaa 	bl	8004c74 <HAL_GetTick>
 800c320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c322:	e008      	b.n	800c336 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c324:	f7f8 fca6 	bl	8004c74 <HAL_GetTick>
 800c328:	4602      	mov	r2, r0
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	1ad3      	subs	r3, r2, r3
 800c32e:	2b02      	cmp	r3, #2
 800c330:	d901      	bls.n	800c336 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800c332:	2303      	movs	r3, #3
 800c334:	e04c      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c336:	4b28      	ldr	r3, [pc, #160]	@ (800c3d8 <HAL_RCC_OscConfig+0x618>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1f0      	bne.n	800c324 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800c342:	4b25      	ldr	r3, [pc, #148]	@ (800c3d8 <HAL_RCC_OscConfig+0x618>)
 800c344:	68da      	ldr	r2, [r3, #12]
 800c346:	4924      	ldr	r1, [pc, #144]	@ (800c3d8 <HAL_RCC_OscConfig+0x618>)
 800c348:	4b25      	ldr	r3, [pc, #148]	@ (800c3e0 <HAL_RCC_OscConfig+0x620>)
 800c34a:	4013      	ands	r3, r2
 800c34c:	60cb      	str	r3, [r1, #12]
 800c34e:	e03e      	b.n	800c3ce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	69db      	ldr	r3, [r3, #28]
 800c354:	2b01      	cmp	r3, #1
 800c356:	d101      	bne.n	800c35c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800c358:	2301      	movs	r3, #1
 800c35a:	e039      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800c35c:	4b1e      	ldr	r3, [pc, #120]	@ (800c3d8 <HAL_RCC_OscConfig+0x618>)
 800c35e:	68db      	ldr	r3, [r3, #12]
 800c360:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	f003 0203 	and.w	r2, r3, #3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6a1b      	ldr	r3, [r3, #32]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d12c      	bne.n	800c3ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c37a:	3b01      	subs	r3, #1
 800c37c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c37e:	429a      	cmp	r2, r3
 800c380:	d123      	bne.n	800c3ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c38c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c38e:	429a      	cmp	r2, r3
 800c390:	d11b      	bne.n	800c3ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c39c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d113      	bne.n	800c3ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3ac:	085b      	lsrs	r3, r3, #1
 800c3ae:	3b01      	subs	r3, #1
 800c3b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d109      	bne.n	800c3ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3c0:	085b      	lsrs	r3, r3, #1
 800c3c2:	3b01      	subs	r3, #1
 800c3c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d001      	beq.n	800c3ce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e000      	b.n	800c3d0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3720      	adds	r7, #32
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	40021000 	.word	0x40021000
 800c3dc:	019f800c 	.word	0x019f800c
 800c3e0:	feeefffc 	.word	0xfeeefffc

0800c3e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b086      	sub	sp, #24
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d101      	bne.n	800c3fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e11e      	b.n	800c63a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c3fc:	4b91      	ldr	r3, [pc, #580]	@ (800c644 <HAL_RCC_ClockConfig+0x260>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f003 030f 	and.w	r3, r3, #15
 800c404:	683a      	ldr	r2, [r7, #0]
 800c406:	429a      	cmp	r2, r3
 800c408:	d910      	bls.n	800c42c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c40a:	4b8e      	ldr	r3, [pc, #568]	@ (800c644 <HAL_RCC_ClockConfig+0x260>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f023 020f 	bic.w	r2, r3, #15
 800c412:	498c      	ldr	r1, [pc, #560]	@ (800c644 <HAL_RCC_ClockConfig+0x260>)
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	4313      	orrs	r3, r2
 800c418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c41a:	4b8a      	ldr	r3, [pc, #552]	@ (800c644 <HAL_RCC_ClockConfig+0x260>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f003 030f 	and.w	r3, r3, #15
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	429a      	cmp	r2, r3
 800c426:	d001      	beq.n	800c42c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c428:	2301      	movs	r3, #1
 800c42a:	e106      	b.n	800c63a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f003 0301 	and.w	r3, r3, #1
 800c434:	2b00      	cmp	r3, #0
 800c436:	d073      	beq.n	800c520 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	2b03      	cmp	r3, #3
 800c43e:	d129      	bne.n	800c494 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c440:	4b81      	ldr	r3, [pc, #516]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d101      	bne.n	800c450 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800c44c:	2301      	movs	r3, #1
 800c44e:	e0f4      	b.n	800c63a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800c450:	f000 f9ca 	bl	800c7e8 <RCC_GetSysClockFreqFromPLLSource>
 800c454:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	4a7c      	ldr	r2, [pc, #496]	@ (800c64c <HAL_RCC_ClockConfig+0x268>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d93f      	bls.n	800c4de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c45e:	4b7a      	ldr	r3, [pc, #488]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d009      	beq.n	800c47e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c472:	2b00      	cmp	r3, #0
 800c474:	d033      	beq.n	800c4de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d12f      	bne.n	800c4de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c47e:	4b72      	ldr	r3, [pc, #456]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c486:	4a70      	ldr	r2, [pc, #448]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c48c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800c48e:	2380      	movs	r3, #128	@ 0x80
 800c490:	617b      	str	r3, [r7, #20]
 800c492:	e024      	b.n	800c4de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	2b02      	cmp	r3, #2
 800c49a:	d107      	bne.n	800c4ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c49c:	4b6a      	ldr	r3, [pc, #424]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d109      	bne.n	800c4bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	e0c6      	b.n	800c63a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c4ac:	4b66      	ldr	r3, [pc, #408]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d101      	bne.n	800c4bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	e0be      	b.n	800c63a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800c4bc:	f000 f8ce 	bl	800c65c <HAL_RCC_GetSysClockFreq>
 800c4c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	4a61      	ldr	r2, [pc, #388]	@ (800c64c <HAL_RCC_ClockConfig+0x268>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d909      	bls.n	800c4de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c4ca:	4b5f      	ldr	r3, [pc, #380]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c4cc:	689b      	ldr	r3, [r3, #8]
 800c4ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c4d2:	4a5d      	ldr	r2, [pc, #372]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c4d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800c4da:	2380      	movs	r3, #128	@ 0x80
 800c4dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c4de:	4b5a      	ldr	r3, [pc, #360]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	f023 0203 	bic.w	r2, r3, #3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	4957      	ldr	r1, [pc, #348]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4f0:	f7f8 fbc0 	bl	8004c74 <HAL_GetTick>
 800c4f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c4f6:	e00a      	b.n	800c50e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c4f8:	f7f8 fbbc 	bl	8004c74 <HAL_GetTick>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c506:	4293      	cmp	r3, r2
 800c508:	d901      	bls.n	800c50e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800c50a:	2303      	movs	r3, #3
 800c50c:	e095      	b.n	800c63a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c50e:	4b4e      	ldr	r3, [pc, #312]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	f003 020c 	and.w	r2, r3, #12
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d1eb      	bne.n	800c4f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f003 0302 	and.w	r3, r3, #2
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d023      	beq.n	800c574 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f003 0304 	and.w	r3, r3, #4
 800c534:	2b00      	cmp	r3, #0
 800c536:	d005      	beq.n	800c544 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c538:	4b43      	ldr	r3, [pc, #268]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	4a42      	ldr	r2, [pc, #264]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c53e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800c542:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f003 0308 	and.w	r3, r3, #8
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d007      	beq.n	800c560 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800c550:	4b3d      	ldr	r3, [pc, #244]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c552:	689b      	ldr	r3, [r3, #8]
 800c554:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c558:	4a3b      	ldr	r2, [pc, #236]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c55a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800c55e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c560:	4b39      	ldr	r3, [pc, #228]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c562:	689b      	ldr	r3, [r3, #8]
 800c564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	689b      	ldr	r3, [r3, #8]
 800c56c:	4936      	ldr	r1, [pc, #216]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c56e:	4313      	orrs	r3, r2
 800c570:	608b      	str	r3, [r1, #8]
 800c572:	e008      	b.n	800c586 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	2b80      	cmp	r3, #128	@ 0x80
 800c578:	d105      	bne.n	800c586 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800c57a:	4b33      	ldr	r3, [pc, #204]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c57c:	689b      	ldr	r3, [r3, #8]
 800c57e:	4a32      	ldr	r2, [pc, #200]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c580:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c584:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c586:	4b2f      	ldr	r3, [pc, #188]	@ (800c644 <HAL_RCC_ClockConfig+0x260>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f003 030f 	and.w	r3, r3, #15
 800c58e:	683a      	ldr	r2, [r7, #0]
 800c590:	429a      	cmp	r2, r3
 800c592:	d21d      	bcs.n	800c5d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c594:	4b2b      	ldr	r3, [pc, #172]	@ (800c644 <HAL_RCC_ClockConfig+0x260>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f023 020f 	bic.w	r2, r3, #15
 800c59c:	4929      	ldr	r1, [pc, #164]	@ (800c644 <HAL_RCC_ClockConfig+0x260>)
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800c5a4:	f7f8 fb66 	bl	8004c74 <HAL_GetTick>
 800c5a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c5aa:	e00a      	b.n	800c5c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c5ac:	f7f8 fb62 	bl	8004c74 <HAL_GetTick>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	1ad3      	subs	r3, r2, r3
 800c5b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d901      	bls.n	800c5c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800c5be:	2303      	movs	r3, #3
 800c5c0:	e03b      	b.n	800c63a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c5c2:	4b20      	ldr	r3, [pc, #128]	@ (800c644 <HAL_RCC_ClockConfig+0x260>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f003 030f 	and.w	r3, r3, #15
 800c5ca:	683a      	ldr	r2, [r7, #0]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d1ed      	bne.n	800c5ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f003 0304 	and.w	r3, r3, #4
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d008      	beq.n	800c5ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c5dc:	4b1a      	ldr	r3, [pc, #104]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c5de:	689b      	ldr	r3, [r3, #8]
 800c5e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	4917      	ldr	r1, [pc, #92]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f003 0308 	and.w	r3, r3, #8
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d009      	beq.n	800c60e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c5fa:	4b13      	ldr	r3, [pc, #76]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c5fc:	689b      	ldr	r3, [r3, #8]
 800c5fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	691b      	ldr	r3, [r3, #16]
 800c606:	00db      	lsls	r3, r3, #3
 800c608:	490f      	ldr	r1, [pc, #60]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c60a:	4313      	orrs	r3, r2
 800c60c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c60e:	f000 f825 	bl	800c65c <HAL_RCC_GetSysClockFreq>
 800c612:	4602      	mov	r2, r0
 800c614:	4b0c      	ldr	r3, [pc, #48]	@ (800c648 <HAL_RCC_ClockConfig+0x264>)
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	091b      	lsrs	r3, r3, #4
 800c61a:	f003 030f 	and.w	r3, r3, #15
 800c61e:	490c      	ldr	r1, [pc, #48]	@ (800c650 <HAL_RCC_ClockConfig+0x26c>)
 800c620:	5ccb      	ldrb	r3, [r1, r3]
 800c622:	f003 031f 	and.w	r3, r3, #31
 800c626:	fa22 f303 	lsr.w	r3, r2, r3
 800c62a:	4a0a      	ldr	r2, [pc, #40]	@ (800c654 <HAL_RCC_ClockConfig+0x270>)
 800c62c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800c62e:	4b0a      	ldr	r3, [pc, #40]	@ (800c658 <HAL_RCC_ClockConfig+0x274>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	4618      	mov	r0, r3
 800c634:	f7f8 fad2 	bl	8004bdc <HAL_InitTick>
 800c638:	4603      	mov	r3, r0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3718      	adds	r7, #24
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	40022000 	.word	0x40022000
 800c648:	40021000 	.word	0x40021000
 800c64c:	04c4b400 	.word	0x04c4b400
 800c650:	080277b8 	.word	0x080277b8
 800c654:	20000274 	.word	0x20000274
 800c658:	2000027c 	.word	0x2000027c

0800c65c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b087      	sub	sp, #28
 800c660:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800c662:	4b2c      	ldr	r3, [pc, #176]	@ (800c714 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	f003 030c 	and.w	r3, r3, #12
 800c66a:	2b04      	cmp	r3, #4
 800c66c:	d102      	bne.n	800c674 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c66e:	4b2a      	ldr	r3, [pc, #168]	@ (800c718 <HAL_RCC_GetSysClockFreq+0xbc>)
 800c670:	613b      	str	r3, [r7, #16]
 800c672:	e047      	b.n	800c704 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800c674:	4b27      	ldr	r3, [pc, #156]	@ (800c714 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c676:	689b      	ldr	r3, [r3, #8]
 800c678:	f003 030c 	and.w	r3, r3, #12
 800c67c:	2b08      	cmp	r3, #8
 800c67e:	d102      	bne.n	800c686 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c680:	4b26      	ldr	r3, [pc, #152]	@ (800c71c <HAL_RCC_GetSysClockFreq+0xc0>)
 800c682:	613b      	str	r3, [r7, #16]
 800c684:	e03e      	b.n	800c704 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800c686:	4b23      	ldr	r3, [pc, #140]	@ (800c714 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	f003 030c 	and.w	r3, r3, #12
 800c68e:	2b0c      	cmp	r3, #12
 800c690:	d136      	bne.n	800c700 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c692:	4b20      	ldr	r3, [pc, #128]	@ (800c714 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	f003 0303 	and.w	r3, r3, #3
 800c69a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c69c:	4b1d      	ldr	r3, [pc, #116]	@ (800c714 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c69e:	68db      	ldr	r3, [r3, #12]
 800c6a0:	091b      	lsrs	r3, r3, #4
 800c6a2:	f003 030f 	and.w	r3, r3, #15
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2b03      	cmp	r3, #3
 800c6ae:	d10c      	bne.n	800c6ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c6b0:	4a1a      	ldr	r2, [pc, #104]	@ (800c71c <HAL_RCC_GetSysClockFreq+0xc0>)
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6b8:	4a16      	ldr	r2, [pc, #88]	@ (800c714 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c6ba:	68d2      	ldr	r2, [r2, #12]
 800c6bc:	0a12      	lsrs	r2, r2, #8
 800c6be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c6c2:	fb02 f303 	mul.w	r3, r2, r3
 800c6c6:	617b      	str	r3, [r7, #20]
      break;
 800c6c8:	e00c      	b.n	800c6e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c6ca:	4a13      	ldr	r2, [pc, #76]	@ (800c718 <HAL_RCC_GetSysClockFreq+0xbc>)
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6d2:	4a10      	ldr	r2, [pc, #64]	@ (800c714 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c6d4:	68d2      	ldr	r2, [r2, #12]
 800c6d6:	0a12      	lsrs	r2, r2, #8
 800c6d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c6dc:	fb02 f303 	mul.w	r3, r2, r3
 800c6e0:	617b      	str	r3, [r7, #20]
      break;
 800c6e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c6e4:	4b0b      	ldr	r3, [pc, #44]	@ (800c714 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	0e5b      	lsrs	r3, r3, #25
 800c6ea:	f003 0303 	and.w	r3, r3, #3
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	005b      	lsls	r3, r3, #1
 800c6f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800c6f4:	697a      	ldr	r2, [r7, #20]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6fc:	613b      	str	r3, [r7, #16]
 800c6fe:	e001      	b.n	800c704 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800c700:	2300      	movs	r3, #0
 800c702:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800c704:	693b      	ldr	r3, [r7, #16]
}
 800c706:	4618      	mov	r0, r3
 800c708:	371c      	adds	r7, #28
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	40021000 	.word	0x40021000
 800c718:	00f42400 	.word	0x00f42400
 800c71c:	007a1200 	.word	0x007a1200

0800c720 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c720:	b480      	push	{r7}
 800c722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c724:	4b03      	ldr	r3, [pc, #12]	@ (800c734 <HAL_RCC_GetHCLKFreq+0x14>)
 800c726:	681b      	ldr	r3, [r3, #0]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr
 800c732:	bf00      	nop
 800c734:	20000274 	.word	0x20000274

0800c738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c73c:	f7ff fff0 	bl	800c720 <HAL_RCC_GetHCLKFreq>
 800c740:	4602      	mov	r2, r0
 800c742:	4b06      	ldr	r3, [pc, #24]	@ (800c75c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	0a1b      	lsrs	r3, r3, #8
 800c748:	f003 0307 	and.w	r3, r3, #7
 800c74c:	4904      	ldr	r1, [pc, #16]	@ (800c760 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c74e:	5ccb      	ldrb	r3, [r1, r3]
 800c750:	f003 031f 	and.w	r3, r3, #31
 800c754:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c758:	4618      	mov	r0, r3
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	40021000 	.word	0x40021000
 800c760:	080277c8 	.word	0x080277c8

0800c764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c768:	f7ff ffda 	bl	800c720 <HAL_RCC_GetHCLKFreq>
 800c76c:	4602      	mov	r2, r0
 800c76e:	4b06      	ldr	r3, [pc, #24]	@ (800c788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	0adb      	lsrs	r3, r3, #11
 800c774:	f003 0307 	and.w	r3, r3, #7
 800c778:	4904      	ldr	r1, [pc, #16]	@ (800c78c <HAL_RCC_GetPCLK2Freq+0x28>)
 800c77a:	5ccb      	ldrb	r3, [r1, r3]
 800c77c:	f003 031f 	and.w	r3, r3, #31
 800c780:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c784:	4618      	mov	r0, r3
 800c786:	bd80      	pop	{r7, pc}
 800c788:	40021000 	.word	0x40021000
 800c78c:	080277c8 	.word	0x080277c8

0800c790 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800c790:	b480      	push	{r7}
 800c792:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800c794:	4b05      	ldr	r3, [pc, #20]	@ (800c7ac <HAL_RCC_EnableCSS+0x1c>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a04      	ldr	r2, [pc, #16]	@ (800c7ac <HAL_RCC_EnableCSS+0x1c>)
 800c79a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c79e:	6013      	str	r3, [r2, #0]
}
 800c7a0:	bf00      	nop
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr
 800c7aa:	bf00      	nop
 800c7ac:	40021000 	.word	0x40021000

0800c7b0 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800c7b4:	4b07      	ldr	r3, [pc, #28]	@ (800c7d4 <HAL_RCC_NMI_IRQHandler+0x24>)
 800c7b6:	69db      	ldr	r3, [r3, #28]
 800c7b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7c0:	d105      	bne.n	800c7ce <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800c7c2:	f000 f809 	bl	800c7d8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800c7c6:	4b03      	ldr	r3, [pc, #12]	@ (800c7d4 <HAL_RCC_NMI_IRQHandler+0x24>)
 800c7c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c7cc:	621a      	str	r2, [r3, #32]
  }
}
 800c7ce:	bf00      	nop
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	40021000 	.word	0x40021000

0800c7d8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800c7dc:	bf00      	nop
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr
	...

0800c7e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b087      	sub	sp, #28
 800c7ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c7ee:	4b1e      	ldr	r3, [pc, #120]	@ (800c868 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c7f0:	68db      	ldr	r3, [r3, #12]
 800c7f2:	f003 0303 	and.w	r3, r3, #3
 800c7f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c7f8:	4b1b      	ldr	r3, [pc, #108]	@ (800c868 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	091b      	lsrs	r3, r3, #4
 800c7fe:	f003 030f 	and.w	r3, r3, #15
 800c802:	3301      	adds	r3, #1
 800c804:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	2b03      	cmp	r3, #3
 800c80a:	d10c      	bne.n	800c826 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c80c:	4a17      	ldr	r2, [pc, #92]	@ (800c86c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	fbb2 f3f3 	udiv	r3, r2, r3
 800c814:	4a14      	ldr	r2, [pc, #80]	@ (800c868 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c816:	68d2      	ldr	r2, [r2, #12]
 800c818:	0a12      	lsrs	r2, r2, #8
 800c81a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c81e:	fb02 f303 	mul.w	r3, r2, r3
 800c822:	617b      	str	r3, [r7, #20]
    break;
 800c824:	e00c      	b.n	800c840 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c826:	4a12      	ldr	r2, [pc, #72]	@ (800c870 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c82e:	4a0e      	ldr	r2, [pc, #56]	@ (800c868 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c830:	68d2      	ldr	r2, [r2, #12]
 800c832:	0a12      	lsrs	r2, r2, #8
 800c834:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c838:	fb02 f303 	mul.w	r3, r2, r3
 800c83c:	617b      	str	r3, [r7, #20]
    break;
 800c83e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c840:	4b09      	ldr	r3, [pc, #36]	@ (800c868 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	0e5b      	lsrs	r3, r3, #25
 800c846:	f003 0303 	and.w	r3, r3, #3
 800c84a:	3301      	adds	r3, #1
 800c84c:	005b      	lsls	r3, r3, #1
 800c84e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800c850:	697a      	ldr	r2, [r7, #20]
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	fbb2 f3f3 	udiv	r3, r2, r3
 800c858:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800c85a:	687b      	ldr	r3, [r7, #4]
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	371c      	adds	r7, #28
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr
 800c868:	40021000 	.word	0x40021000
 800c86c:	007a1200 	.word	0x007a1200
 800c870:	00f42400 	.word	0x00f42400

0800c874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b086      	sub	sp, #24
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c87c:	2300      	movs	r3, #0
 800c87e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c880:	2300      	movs	r3, #0
 800c882:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	f000 8098 	beq.w	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c892:	2300      	movs	r3, #0
 800c894:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c896:	4b43      	ldr	r3, [pc, #268]	@ (800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c89a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d10d      	bne.n	800c8be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c8a2:	4b40      	ldr	r3, [pc, #256]	@ (800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c8a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8a6:	4a3f      	ldr	r2, [pc, #252]	@ (800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c8a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c8ac:	6593      	str	r3, [r2, #88]	@ 0x58
 800c8ae:	4b3d      	ldr	r3, [pc, #244]	@ (800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c8b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c8b6:	60bb      	str	r3, [r7, #8]
 800c8b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c8be:	4b3a      	ldr	r3, [pc, #232]	@ (800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a39      	ldr	r2, [pc, #228]	@ (800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c8c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c8c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c8ca:	f7f8 f9d3 	bl	8004c74 <HAL_GetTick>
 800c8ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c8d0:	e009      	b.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c8d2:	f7f8 f9cf 	bl	8004c74 <HAL_GetTick>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	1ad3      	subs	r3, r2, r3
 800c8dc:	2b02      	cmp	r3, #2
 800c8de:	d902      	bls.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800c8e0:	2303      	movs	r3, #3
 800c8e2:	74fb      	strb	r3, [r7, #19]
        break;
 800c8e4:	e005      	b.n	800c8f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c8e6:	4b30      	ldr	r3, [pc, #192]	@ (800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d0ef      	beq.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800c8f2:	7cfb      	ldrb	r3, [r7, #19]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d159      	bne.n	800c9ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c8f8:	4b2a      	ldr	r3, [pc, #168]	@ (800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c8fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c902:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d01e      	beq.n	800c948 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c90e:	697a      	ldr	r2, [r7, #20]
 800c910:	429a      	cmp	r2, r3
 800c912:	d019      	beq.n	800c948 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c914:	4b23      	ldr	r3, [pc, #140]	@ (800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c91a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c91e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c920:	4b20      	ldr	r3, [pc, #128]	@ (800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c926:	4a1f      	ldr	r2, [pc, #124]	@ (800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c92c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c930:	4b1c      	ldr	r3, [pc, #112]	@ (800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c936:	4a1b      	ldr	r2, [pc, #108]	@ (800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c938:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c93c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c940:	4a18      	ldr	r2, [pc, #96]	@ (800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	f003 0301 	and.w	r3, r3, #1
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d016      	beq.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c952:	f7f8 f98f 	bl	8004c74 <HAL_GetTick>
 800c956:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c958:	e00b      	b.n	800c972 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c95a:	f7f8 f98b 	bl	8004c74 <HAL_GetTick>
 800c95e:	4602      	mov	r2, r0
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	1ad3      	subs	r3, r2, r3
 800c964:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c968:	4293      	cmp	r3, r2
 800c96a:	d902      	bls.n	800c972 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800c96c:	2303      	movs	r3, #3
 800c96e:	74fb      	strb	r3, [r7, #19]
            break;
 800c970:	e006      	b.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c972:	4b0c      	ldr	r3, [pc, #48]	@ (800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c978:	f003 0302 	and.w	r3, r3, #2
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d0ec      	beq.n	800c95a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800c980:	7cfb      	ldrb	r3, [r7, #19]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d10b      	bne.n	800c99e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c986:	4b07      	ldr	r3, [pc, #28]	@ (800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c98c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c994:	4903      	ldr	r1, [pc, #12]	@ (800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c996:	4313      	orrs	r3, r2
 800c998:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800c99c:	e008      	b.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c99e:	7cfb      	ldrb	r3, [r7, #19]
 800c9a0:	74bb      	strb	r3, [r7, #18]
 800c9a2:	e005      	b.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c9a4:	40021000 	.word	0x40021000
 800c9a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9ac:	7cfb      	ldrb	r3, [r7, #19]
 800c9ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c9b0:	7c7b      	ldrb	r3, [r7, #17]
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d105      	bne.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c9b6:	4ba7      	ldr	r3, [pc, #668]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c9b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9ba:	4aa6      	ldr	r2, [pc, #664]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c9bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c9c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f003 0301 	and.w	r3, r3, #1
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d00a      	beq.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c9ce:	4ba1      	ldr	r3, [pc, #644]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c9d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9d4:	f023 0203 	bic.w	r2, r3, #3
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	499d      	ldr	r1, [pc, #628]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f003 0302 	and.w	r3, r3, #2
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d00a      	beq.n	800ca06 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c9f0:	4b98      	ldr	r3, [pc, #608]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c9f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9f6:	f023 020c 	bic.w	r2, r3, #12
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	689b      	ldr	r3, [r3, #8]
 800c9fe:	4995      	ldr	r1, [pc, #596]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ca00:	4313      	orrs	r3, r2
 800ca02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f003 0304 	and.w	r3, r3, #4
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d00a      	beq.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ca12:	4b90      	ldr	r3, [pc, #576]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ca14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca18:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	68db      	ldr	r3, [r3, #12]
 800ca20:	498c      	ldr	r1, [pc, #560]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ca22:	4313      	orrs	r3, r2
 800ca24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f003 0308 	and.w	r3, r3, #8
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d00a      	beq.n	800ca4a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ca34:	4b87      	ldr	r3, [pc, #540]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ca36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	691b      	ldr	r3, [r3, #16]
 800ca42:	4984      	ldr	r1, [pc, #528]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ca44:	4313      	orrs	r3, r2
 800ca46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f003 0310 	and.w	r3, r3, #16
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d00a      	beq.n	800ca6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ca56:	4b7f      	ldr	r3, [pc, #508]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ca58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	695b      	ldr	r3, [r3, #20]
 800ca64:	497b      	ldr	r1, [pc, #492]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ca66:	4313      	orrs	r3, r2
 800ca68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f003 0320 	and.w	r3, r3, #32
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d00a      	beq.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ca78:	4b76      	ldr	r3, [pc, #472]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ca7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	699b      	ldr	r3, [r3, #24]
 800ca86:	4973      	ldr	r1, [pc, #460]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d00a      	beq.n	800cab0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ca9a:	4b6e      	ldr	r3, [pc, #440]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ca9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800caa0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	69db      	ldr	r3, [r3, #28]
 800caa8:	496a      	ldr	r1, [pc, #424]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800caaa:	4313      	orrs	r3, r2
 800caac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d00a      	beq.n	800cad2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cabc:	4b65      	ldr	r3, [pc, #404]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cabe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cac2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6a1b      	ldr	r3, [r3, #32]
 800caca:	4962      	ldr	r1, [pc, #392]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cacc:	4313      	orrs	r3, r2
 800cace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00a      	beq.n	800caf4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cade:	4b5d      	ldr	r3, [pc, #372]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cae4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caec:	4959      	ldr	r1, [pc, #356]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800caee:	4313      	orrs	r3, r2
 800caf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00a      	beq.n	800cb16 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cb00:	4b54      	ldr	r3, [pc, #336]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cb02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cb06:	f023 0203 	bic.w	r2, r3, #3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb0e:	4951      	ldr	r1, [pc, #324]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cb10:	4313      	orrs	r3, r2
 800cb12:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d00a      	beq.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cb22:	4b4c      	ldr	r3, [pc, #304]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cb24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb30:	4948      	ldr	r1, [pc, #288]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cb32:	4313      	orrs	r3, r2
 800cb34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d015      	beq.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cb44:	4b43      	ldr	r3, [pc, #268]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cb46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb52:	4940      	ldr	r1, [pc, #256]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cb54:	4313      	orrs	r3, r2
 800cb56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb62:	d105      	bne.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cb64:	4b3b      	ldr	r3, [pc, #236]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	4a3a      	ldr	r2, [pc, #232]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cb6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cb6e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d015      	beq.n	800cba8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cb7c:	4b35      	ldr	r3, [pc, #212]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cb7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb8a:	4932      	ldr	r1, [pc, #200]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cb9a:	d105      	bne.n	800cba8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cb9c:	4b2d      	ldr	r3, [pc, #180]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	4a2c      	ldr	r2, [pc, #176]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cba2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cba6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d015      	beq.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cbb4:	4b27      	ldr	r3, [pc, #156]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cbb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbc2:	4924      	ldr	r1, [pc, #144]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cbd2:	d105      	bne.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cbd4:	4b1f      	ldr	r3, [pc, #124]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	4a1e      	ldr	r2, [pc, #120]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cbda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cbde:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d015      	beq.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cbec:	4b19      	ldr	r3, [pc, #100]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cbee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbf2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbfa:	4916      	ldr	r1, [pc, #88]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc0a:	d105      	bne.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cc0c:	4b11      	ldr	r3, [pc, #68]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	4a10      	ldr	r2, [pc, #64]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cc12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc16:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d019      	beq.n	800cc58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cc24:	4b0b      	ldr	r3, [pc, #44]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cc26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc32:	4908      	ldr	r1, [pc, #32]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cc34:	4313      	orrs	r3, r2
 800cc36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc42:	d109      	bne.n	800cc58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cc44:	4b03      	ldr	r3, [pc, #12]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	4a02      	ldr	r2, [pc, #8]	@ (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cc4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc4e:	60d3      	str	r3, [r2, #12]
 800cc50:	e002      	b.n	800cc58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800cc52:	bf00      	nop
 800cc54:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d015      	beq.n	800cc90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800cc64:	4b29      	ldr	r3, [pc, #164]	@ (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800cc66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc6a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc72:	4926      	ldr	r1, [pc, #152]	@ (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800cc74:	4313      	orrs	r3, r2
 800cc76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc82:	d105      	bne.n	800cc90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800cc84:	4b21      	ldr	r3, [pc, #132]	@ (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800cc86:	68db      	ldr	r3, [r3, #12]
 800cc88:	4a20      	ldr	r2, [pc, #128]	@ (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800cc8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cc8e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d015      	beq.n	800ccc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800cc9c:	4b1b      	ldr	r3, [pc, #108]	@ (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800cc9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cca2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccaa:	4918      	ldr	r1, [pc, #96]	@ (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ccac:	4313      	orrs	r3, r2
 800ccae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccba:	d105      	bne.n	800ccc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ccbc:	4b13      	ldr	r3, [pc, #76]	@ (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	4a12      	ldr	r2, [pc, #72]	@ (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ccc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ccc6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d015      	beq.n	800cd00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ccd4:	4b0d      	ldr	r3, [pc, #52]	@ (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ccd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ccda:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cce2:	490a      	ldr	r1, [pc, #40]	@ (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800cce4:	4313      	orrs	r3, r2
 800cce6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ccee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ccf2:	d105      	bne.n	800cd00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ccf4:	4b05      	ldr	r3, [pc, #20]	@ (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	4a04      	ldr	r2, [pc, #16]	@ (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ccfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ccfe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800cd00:	7cbb      	ldrb	r3, [r7, #18]
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3718      	adds	r7, #24
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	40021000 	.word	0x40021000

0800cd10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d101      	bne.n	800cd22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e09d      	b.n	800ce5e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d108      	bne.n	800cd3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cd32:	d009      	beq.n	800cd48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	61da      	str	r2, [r3, #28]
 800cd3a:	e005      	b.n	800cd48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2200      	movs	r2, #0
 800cd46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d106      	bne.n	800cd68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f7f7 f9c2 	bl	80040ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2202      	movs	r2, #2
 800cd6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cd7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	68db      	ldr	r3, [r3, #12]
 800cd84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cd88:	d902      	bls.n	800cd90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	60fb      	str	r3, [r7, #12]
 800cd8e:	e002      	b.n	800cd96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800cd90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cd94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	68db      	ldr	r3, [r3, #12]
 800cd9a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800cd9e:	d007      	beq.n	800cdb0 <HAL_SPI_Init+0xa0>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cda8:	d002      	beq.n	800cdb0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2200      	movs	r2, #0
 800cdae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	689b      	ldr	r3, [r3, #8]
 800cdbc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800cdc0:	431a      	orrs	r2, r3
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	691b      	ldr	r3, [r3, #16]
 800cdc6:	f003 0302 	and.w	r3, r3, #2
 800cdca:	431a      	orrs	r2, r3
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	695b      	ldr	r3, [r3, #20]
 800cdd0:	f003 0301 	and.w	r3, r3, #1
 800cdd4:	431a      	orrs	r2, r3
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	699b      	ldr	r3, [r3, #24]
 800cdda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cdde:	431a      	orrs	r2, r3
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	69db      	ldr	r3, [r3, #28]
 800cde4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cde8:	431a      	orrs	r2, r3
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6a1b      	ldr	r3, [r3, #32]
 800cdee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cdf2:	ea42 0103 	orr.w	r1, r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdfa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	430a      	orrs	r2, r1
 800ce04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	699b      	ldr	r3, [r3, #24]
 800ce0a:	0c1b      	lsrs	r3, r3, #16
 800ce0c:	f003 0204 	and.w	r2, r3, #4
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce14:	f003 0310 	and.w	r3, r3, #16
 800ce18:	431a      	orrs	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce1e:	f003 0308 	and.w	r3, r3, #8
 800ce22:	431a      	orrs	r2, r3
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800ce2c:	ea42 0103 	orr.w	r1, r2, r3
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	430a      	orrs	r2, r1
 800ce3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	69da      	ldr	r2, [r3, #28]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ce4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2201      	movs	r2, #1
 800ce58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3710      	adds	r7, #16
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}

0800ce66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce66:	b580      	push	{r7, lr}
 800ce68:	b088      	sub	sp, #32
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	60f8      	str	r0, [r7, #12]
 800ce6e:	60b9      	str	r1, [r7, #8]
 800ce70:	603b      	str	r3, [r7, #0]
 800ce72:	4613      	mov	r3, r2
 800ce74:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ce76:	f7f7 fefd 	bl	8004c74 <HAL_GetTick>
 800ce7a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800ce7c:	88fb      	ldrh	r3, [r7, #6]
 800ce7e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d001      	beq.n	800ce90 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800ce8c:	2302      	movs	r3, #2
 800ce8e:	e15c      	b.n	800d14a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d002      	beq.n	800ce9c <HAL_SPI_Transmit+0x36>
 800ce96:	88fb      	ldrh	r3, [r7, #6]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d101      	bne.n	800cea0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e154      	b.n	800d14a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800cea6:	2b01      	cmp	r3, #1
 800cea8:	d101      	bne.n	800ceae <HAL_SPI_Transmit+0x48>
 800ceaa:	2302      	movs	r3, #2
 800ceac:	e14d      	b.n	800d14a <HAL_SPI_Transmit+0x2e4>
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2203      	movs	r2, #3
 800ceba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2200      	movs	r2, #0
 800cec2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	68ba      	ldr	r2, [r7, #8]
 800cec8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	88fa      	ldrh	r2, [r7, #6]
 800cece:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	88fa      	ldrh	r2, [r7, #6]
 800ced4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2200      	movs	r2, #0
 800ceda:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2200      	movs	r2, #0
 800cee0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2200      	movs	r2, #0
 800cee8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2200      	movs	r2, #0
 800cef0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2200      	movs	r2, #0
 800cef6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	689b      	ldr	r3, [r3, #8]
 800cefc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf00:	d10f      	bne.n	800cf22 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cf10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	681a      	ldr	r2, [r3, #0]
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cf20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf2c:	2b40      	cmp	r3, #64	@ 0x40
 800cf2e:	d007      	beq.n	800cf40 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cf3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	68db      	ldr	r3, [r3, #12]
 800cf44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cf48:	d952      	bls.n	800cff0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d002      	beq.n	800cf58 <HAL_SPI_Transmit+0xf2>
 800cf52:	8b7b      	ldrh	r3, [r7, #26]
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d145      	bne.n	800cfe4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf5c:	881a      	ldrh	r2, [r3, #0]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf68:	1c9a      	adds	r2, r3, #2
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	3b01      	subs	r3, #1
 800cf76:	b29a      	uxth	r2, r3
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800cf7c:	e032      	b.n	800cfe4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	689b      	ldr	r3, [r3, #8]
 800cf84:	f003 0302 	and.w	r3, r3, #2
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d112      	bne.n	800cfb2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf90:	881a      	ldrh	r2, [r3, #0]
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf9c:	1c9a      	adds	r2, r3, #2
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cfa6:	b29b      	uxth	r3, r3
 800cfa8:	3b01      	subs	r3, #1
 800cfaa:	b29a      	uxth	r2, r3
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800cfb0:	e018      	b.n	800cfe4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cfb2:	f7f7 fe5f 	bl	8004c74 <HAL_GetTick>
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	69fb      	ldr	r3, [r7, #28]
 800cfba:	1ad3      	subs	r3, r2, r3
 800cfbc:	683a      	ldr	r2, [r7, #0]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d803      	bhi.n	800cfca <HAL_SPI_Transmit+0x164>
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfc8:	d102      	bne.n	800cfd0 <HAL_SPI_Transmit+0x16a>
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d109      	bne.n	800cfe4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800cfe0:	2303      	movs	r3, #3
 800cfe2:	e0b2      	b.n	800d14a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d1c7      	bne.n	800cf7e <HAL_SPI_Transmit+0x118>
 800cfee:	e083      	b.n	800d0f8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d002      	beq.n	800cffe <HAL_SPI_Transmit+0x198>
 800cff8:	8b7b      	ldrh	r3, [r7, #26]
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	d177      	bne.n	800d0ee <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d002:	b29b      	uxth	r3, r3
 800d004:	2b01      	cmp	r3, #1
 800d006:	d912      	bls.n	800d02e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d00c:	881a      	ldrh	r2, [r3, #0]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d018:	1c9a      	adds	r2, r3, #2
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d022:	b29b      	uxth	r3, r3
 800d024:	3b02      	subs	r3, #2
 800d026:	b29a      	uxth	r2, r3
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d02c:	e05f      	b.n	800d0ee <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	330c      	adds	r3, #12
 800d038:	7812      	ldrb	r2, [r2, #0]
 800d03a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d040:	1c5a      	adds	r2, r3, #1
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	3b01      	subs	r3, #1
 800d04e:	b29a      	uxth	r2, r3
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800d054:	e04b      	b.n	800d0ee <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	f003 0302 	and.w	r3, r3, #2
 800d060:	2b02      	cmp	r3, #2
 800d062:	d12b      	bne.n	800d0bc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d068:	b29b      	uxth	r3, r3
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	d912      	bls.n	800d094 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d072:	881a      	ldrh	r2, [r3, #0]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d07e:	1c9a      	adds	r2, r3, #2
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d088:	b29b      	uxth	r3, r3
 800d08a:	3b02      	subs	r3, #2
 800d08c:	b29a      	uxth	r2, r3
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d092:	e02c      	b.n	800d0ee <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	330c      	adds	r3, #12
 800d09e:	7812      	ldrb	r2, [r2, #0]
 800d0a0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0a6:	1c5a      	adds	r2, r3, #1
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d0b0:	b29b      	uxth	r3, r3
 800d0b2:	3b01      	subs	r3, #1
 800d0b4:	b29a      	uxth	r2, r3
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d0ba:	e018      	b.n	800d0ee <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0bc:	f7f7 fdda 	bl	8004c74 <HAL_GetTick>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	69fb      	ldr	r3, [r7, #28]
 800d0c4:	1ad3      	subs	r3, r2, r3
 800d0c6:	683a      	ldr	r2, [r7, #0]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d803      	bhi.n	800d0d4 <HAL_SPI_Transmit+0x26e>
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0d2:	d102      	bne.n	800d0da <HAL_SPI_Transmit+0x274>
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d109      	bne.n	800d0ee <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2201      	movs	r2, #1
 800d0de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800d0ea:	2303      	movs	r3, #3
 800d0ec:	e02d      	b.n	800d14a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d1ae      	bne.n	800d056 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d0f8:	69fa      	ldr	r2, [r7, #28]
 800d0fa:	6839      	ldr	r1, [r7, #0]
 800d0fc:	68f8      	ldr	r0, [r7, #12]
 800d0fe:	f000 fad5 	bl	800d6ac <SPI_EndRxTxTransaction>
 800d102:	4603      	mov	r3, r0
 800d104:	2b00      	cmp	r3, #0
 800d106:	d002      	beq.n	800d10e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2220      	movs	r2, #32
 800d10c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d10a      	bne.n	800d12c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d116:	2300      	movs	r3, #0
 800d118:	617b      	str	r3, [r7, #20]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	617b      	str	r3, [r7, #20]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	689b      	ldr	r3, [r3, #8]
 800d128:	617b      	str	r3, [r7, #20]
 800d12a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2201      	movs	r2, #1
 800d130:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2200      	movs	r2, #0
 800d138:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d140:	2b00      	cmp	r3, #0
 800d142:	d001      	beq.n	800d148 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800d144:	2301      	movs	r3, #1
 800d146:	e000      	b.n	800d14a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800d148:	2300      	movs	r3, #0
  }
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3720      	adds	r7, #32
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
	...

0800d154 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	4613      	mov	r3, r2
 800d160:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d001      	beq.n	800d172 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800d16e:	2302      	movs	r3, #2
 800d170:	e0d4      	b.n	800d31c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d002      	beq.n	800d17e <HAL_SPI_Transmit_DMA+0x2a>
 800d178:	88fb      	ldrh	r3, [r7, #6]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d101      	bne.n	800d182 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	e0cc      	b.n	800d31c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d101      	bne.n	800d190 <HAL_SPI_Transmit_DMA+0x3c>
 800d18c:	2302      	movs	r3, #2
 800d18e:	e0c5      	b.n	800d31c <HAL_SPI_Transmit_DMA+0x1c8>
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2201      	movs	r2, #1
 800d194:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2203      	movs	r2, #3
 800d19c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	68ba      	ldr	r2, [r7, #8]
 800d1aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	88fa      	ldrh	r2, [r7, #6]
 800d1b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	88fa      	ldrh	r2, [r7, #6]
 800d1b6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d1e2:	d10f      	bne.n	800d204 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	681a      	ldr	r2, [r3, #0]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d1f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d202:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d208:	4a46      	ldr	r2, [pc, #280]	@ (800d324 <HAL_SPI_Transmit_DMA+0x1d0>)
 800d20a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d210:	4a45      	ldr	r2, [pc, #276]	@ (800d328 <HAL_SPI_Transmit_DMA+0x1d4>)
 800d212:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d218:	4a44      	ldr	r2, [pc, #272]	@ (800d32c <HAL_SPI_Transmit_DMA+0x1d8>)
 800d21a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d220:	2200      	movs	r2, #0
 800d222:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	685a      	ldr	r2, [r3, #4]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d232:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	68db      	ldr	r3, [r3, #12]
 800d238:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d23c:	d82d      	bhi.n	800d29a <HAL_SPI_Transmit_DMA+0x146>
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d242:	699b      	ldr	r3, [r3, #24]
 800d244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d248:	d127      	bne.n	800d29a <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d24e:	b29b      	uxth	r3, r3
 800d250:	f003 0301 	and.w	r3, r3, #1
 800d254:	2b00      	cmp	r3, #0
 800d256:	d10f      	bne.n	800d278 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	685a      	ldr	r2, [r3, #4]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d266:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	085b      	lsrs	r3, r3, #1
 800d270:	b29a      	uxth	r2, r3
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d276:	e010      	b.n	800d29a <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	685a      	ldr	r2, [r3, #4]
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d286:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d28c:	b29b      	uxth	r3, r3
 800d28e:	085b      	lsrs	r3, r3, #1
 800d290:	b29b      	uxth	r3, r3
 800d292:	3301      	adds	r3, #1
 800d294:	b29a      	uxth	r2, r3
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	330c      	adds	r3, #12
 800d2aa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d2b0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d2b2:	f7fa fe37 	bl	8007f24 <HAL_DMA_Start_IT>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d00b      	beq.n	800d2d4 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d2c0:	f043 0210 	orr.w	r2, r3, #16
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	e023      	b.n	800d31c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2de:	2b40      	cmp	r3, #64	@ 0x40
 800d2e0:	d007      	beq.n	800d2f2 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	681a      	ldr	r2, [r3, #0]
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d2f0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	685a      	ldr	r2, [r3, #4]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f042 0220 	orr.w	r2, r2, #32
 800d308:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	685a      	ldr	r2, [r3, #4]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f042 0202 	orr.w	r2, r2, #2
 800d318:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d31a:	2300      	movs	r3, #0
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3710      	adds	r7, #16
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}
 800d324:	0800d413 	.word	0x0800d413
 800d328:	0800d36d 	.word	0x0800d36d
 800d32c:	0800d42f 	.word	0x0800d42f

0800d330 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d330:	b480      	push	{r7}
 800d332:	b083      	sub	sp, #12
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d338:	bf00      	nop
 800d33a:	370c      	adds	r7, #12
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr

0800d344 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800d34c:	bf00      	nop
 800d34e:	370c      	adds	r7, #12
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr

0800d358 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d358:	b480      	push	{r7}
 800d35a:	b083      	sub	sp, #12
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d360:	bf00      	nop
 800d362:	370c      	adds	r7, #12
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr

0800d36c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b086      	sub	sp, #24
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d378:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d37a:	f7f7 fc7b 	bl	8004c74 <HAL_GetTick>
 800d37e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f003 0320 	and.w	r3, r3, #32
 800d38a:	2b20      	cmp	r3, #32
 800d38c:	d03b      	beq.n	800d406 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	685a      	ldr	r2, [r3, #4]
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f022 0220 	bic.w	r2, r2, #32
 800d39c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	685a      	ldr	r2, [r3, #4]
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f022 0202 	bic.w	r2, r2, #2
 800d3ac:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d3ae:	693a      	ldr	r2, [r7, #16]
 800d3b0:	2164      	movs	r1, #100	@ 0x64
 800d3b2:	6978      	ldr	r0, [r7, #20]
 800d3b4:	f000 f97a 	bl	800d6ac <SPI_EndRxTxTransaction>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d005      	beq.n	800d3ca <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d3c2:	f043 0220 	orr.w	r2, r3, #32
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d10a      	bne.n	800d3e8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	60fb      	str	r3, [r7, #12]
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	60fb      	str	r3, [r7, #12]
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	689b      	ldr	r3, [r3, #8]
 800d3e4:	60fb      	str	r3, [r7, #12]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d003      	beq.n	800d406 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d3fe:	6978      	ldr	r0, [r7, #20]
 800d400:	f7ff ffaa 	bl	800d358 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d404:	e002      	b.n	800d40c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800d406:	6978      	ldr	r0, [r7, #20]
 800d408:	f7ff ff92 	bl	800d330 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d40c:	3718      	adds	r7, #24
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}

0800d412 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d412:	b580      	push	{r7, lr}
 800d414:	b084      	sub	sp, #16
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d41e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800d420:	68f8      	ldr	r0, [r7, #12]
 800d422:	f7ff ff8f 	bl	800d344 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d426:	bf00      	nop
 800d428:	3710      	adds	r7, #16
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}

0800d42e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d42e:	b580      	push	{r7, lr}
 800d430:	b084      	sub	sp, #16
 800d432:	af00      	add	r7, sp, #0
 800d434:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d43a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	685a      	ldr	r2, [r3, #4]
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f022 0203 	bic.w	r2, r2, #3
 800d44a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d450:	f043 0210 	orr.w	r2, r3, #16
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2201      	movs	r2, #1
 800d45c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d460:	68f8      	ldr	r0, [r7, #12]
 800d462:	f7ff ff79 	bl	800d358 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d466:	bf00      	nop
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
	...

0800d470 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b088      	sub	sp, #32
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	603b      	str	r3, [r7, #0]
 800d47c:	4613      	mov	r3, r2
 800d47e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d480:	f7f7 fbf8 	bl	8004c74 <HAL_GetTick>
 800d484:	4602      	mov	r2, r0
 800d486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d488:	1a9b      	subs	r3, r3, r2
 800d48a:	683a      	ldr	r2, [r7, #0]
 800d48c:	4413      	add	r3, r2
 800d48e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d490:	f7f7 fbf0 	bl	8004c74 <HAL_GetTick>
 800d494:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d496:	4b39      	ldr	r3, [pc, #228]	@ (800d57c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	015b      	lsls	r3, r3, #5
 800d49c:	0d1b      	lsrs	r3, r3, #20
 800d49e:	69fa      	ldr	r2, [r7, #28]
 800d4a0:	fb02 f303 	mul.w	r3, r2, r3
 800d4a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d4a6:	e054      	b.n	800d552 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ae:	d050      	beq.n	800d552 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d4b0:	f7f7 fbe0 	bl	8004c74 <HAL_GetTick>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	1ad3      	subs	r3, r2, r3
 800d4ba:	69fa      	ldr	r2, [r7, #28]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d902      	bls.n	800d4c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d4c0:	69fb      	ldr	r3, [r7, #28]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d13d      	bne.n	800d542 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	685a      	ldr	r2, [r3, #4]
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d4d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d4de:	d111      	bne.n	800d504 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	689b      	ldr	r3, [r3, #8]
 800d4e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d4e8:	d004      	beq.n	800d4f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	689b      	ldr	r3, [r3, #8]
 800d4ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d4f2:	d107      	bne.n	800d504 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d502:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d508:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d50c:	d10f      	bne.n	800d52e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d51c:	601a      	str	r2, [r3, #0]
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d52c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2201      	movs	r2, #1
 800d532:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2200      	movs	r2, #0
 800d53a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d53e:	2303      	movs	r3, #3
 800d540:	e017      	b.n	800d572 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d101      	bne.n	800d54c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d548:	2300      	movs	r3, #0
 800d54a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	3b01      	subs	r3, #1
 800d550:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	689a      	ldr	r2, [r3, #8]
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	4013      	ands	r3, r2
 800d55c:	68ba      	ldr	r2, [r7, #8]
 800d55e:	429a      	cmp	r2, r3
 800d560:	bf0c      	ite	eq
 800d562:	2301      	moveq	r3, #1
 800d564:	2300      	movne	r3, #0
 800d566:	b2db      	uxtb	r3, r3
 800d568:	461a      	mov	r2, r3
 800d56a:	79fb      	ldrb	r3, [r7, #7]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d19b      	bne.n	800d4a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d570:	2300      	movs	r3, #0
}
 800d572:	4618      	mov	r0, r3
 800d574:	3720      	adds	r7, #32
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	20000274 	.word	0x20000274

0800d580 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b08a      	sub	sp, #40	@ 0x28
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	60b9      	str	r1, [r7, #8]
 800d58a:	607a      	str	r2, [r7, #4]
 800d58c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d58e:	2300      	movs	r3, #0
 800d590:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d592:	f7f7 fb6f 	bl	8004c74 <HAL_GetTick>
 800d596:	4602      	mov	r2, r0
 800d598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d59a:	1a9b      	subs	r3, r3, r2
 800d59c:	683a      	ldr	r2, [r7, #0]
 800d59e:	4413      	add	r3, r2
 800d5a0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800d5a2:	f7f7 fb67 	bl	8004c74 <HAL_GetTick>
 800d5a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	330c      	adds	r3, #12
 800d5ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d5b0:	4b3d      	ldr	r3, [pc, #244]	@ (800d6a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	4613      	mov	r3, r2
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	4413      	add	r3, r2
 800d5ba:	00da      	lsls	r2, r3, #3
 800d5bc:	1ad3      	subs	r3, r2, r3
 800d5be:	0d1b      	lsrs	r3, r3, #20
 800d5c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5c2:	fb02 f303 	mul.w	r3, r2, r3
 800d5c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d5c8:	e060      	b.n	800d68c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d5d0:	d107      	bne.n	800d5e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d104      	bne.n	800d5e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d5d8:	69fb      	ldr	r3, [r7, #28]
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d5e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5e8:	d050      	beq.n	800d68c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d5ea:	f7f7 fb43 	bl	8004c74 <HAL_GetTick>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	6a3b      	ldr	r3, [r7, #32]
 800d5f2:	1ad3      	subs	r3, r2, r3
 800d5f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d902      	bls.n	800d600 <SPI_WaitFifoStateUntilTimeout+0x80>
 800d5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d13d      	bne.n	800d67c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	685a      	ldr	r2, [r3, #4]
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d60e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d618:	d111      	bne.n	800d63e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	689b      	ldr	r3, [r3, #8]
 800d61e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d622:	d004      	beq.n	800d62e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d62c:	d107      	bne.n	800d63e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d63c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d642:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d646:	d10f      	bne.n	800d668 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	681a      	ldr	r2, [r3, #0]
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d656:	601a      	str	r2, [r3, #0]
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d666:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2201      	movs	r2, #1
 800d66c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2200      	movs	r2, #0
 800d674:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d678:	2303      	movs	r3, #3
 800d67a:	e010      	b.n	800d69e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d67c:	69bb      	ldr	r3, [r7, #24]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d101      	bne.n	800d686 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d682:	2300      	movs	r3, #0
 800d684:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800d686:	69bb      	ldr	r3, [r7, #24]
 800d688:	3b01      	subs	r3, #1
 800d68a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	689a      	ldr	r2, [r3, #8]
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	4013      	ands	r3, r2
 800d696:	687a      	ldr	r2, [r7, #4]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d196      	bne.n	800d5ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d69c:	2300      	movs	r3, #0
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3728      	adds	r7, #40	@ 0x28
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	20000274 	.word	0x20000274

0800d6ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b086      	sub	sp, #24
 800d6b0:	af02      	add	r7, sp, #8
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800d6c4:	68f8      	ldr	r0, [r7, #12]
 800d6c6:	f7ff ff5b 	bl	800d580 <SPI_WaitFifoStateUntilTimeout>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d007      	beq.n	800d6e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d6d4:	f043 0220 	orr.w	r2, r3, #32
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d6dc:	2303      	movs	r3, #3
 800d6de:	e027      	b.n	800d730 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	9300      	str	r3, [sp, #0]
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	2180      	movs	r1, #128	@ 0x80
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	f7ff fec0 	bl	800d470 <SPI_WaitFlagStateUntilTimeout>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d007      	beq.n	800d706 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d6fa:	f043 0220 	orr.w	r2, r3, #32
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d702:	2303      	movs	r3, #3
 800d704:	e014      	b.n	800d730 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	9300      	str	r3, [sp, #0]
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	2200      	movs	r2, #0
 800d70e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800d712:	68f8      	ldr	r0, [r7, #12]
 800d714:	f7ff ff34 	bl	800d580 <SPI_WaitFifoStateUntilTimeout>
 800d718:	4603      	mov	r3, r0
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d007      	beq.n	800d72e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d722:	f043 0220 	orr.w	r2, r3, #32
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d72a:	2303      	movs	r3, #3
 800d72c:	e000      	b.n	800d730 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d72e:	2300      	movs	r3, #0
}
 800d730:	4618      	mov	r0, r3
 800d732:	3710      	adds	r7, #16
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d101      	bne.n	800d74a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d746:	2301      	movs	r3, #1
 800d748:	e049      	b.n	800d7de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d750:	b2db      	uxtb	r3, r3
 800d752:	2b00      	cmp	r3, #0
 800d754:	d106      	bne.n	800d764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2200      	movs	r2, #0
 800d75a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f7f6 fe28 	bl	80043b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2202      	movs	r2, #2
 800d768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	3304      	adds	r3, #4
 800d774:	4619      	mov	r1, r3
 800d776:	4610      	mov	r0, r2
 800d778:	f001 f894 	bl	800e8a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2201      	movs	r2, #1
 800d780:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2201      	movs	r2, #1
 800d788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2201      	movs	r2, #1
 800d790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2201      	movs	r2, #1
 800d798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d7dc:	2300      	movs	r3, #0
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3708      	adds	r7, #8
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
	...

0800d7e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b085      	sub	sp, #20
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	d001      	beq.n	800d800 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	e04c      	b.n	800d89a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2202      	movs	r2, #2
 800d804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4a26      	ldr	r2, [pc, #152]	@ (800d8a8 <HAL_TIM_Base_Start+0xc0>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d022      	beq.n	800d858 <HAL_TIM_Base_Start+0x70>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d81a:	d01d      	beq.n	800d858 <HAL_TIM_Base_Start+0x70>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4a22      	ldr	r2, [pc, #136]	@ (800d8ac <HAL_TIM_Base_Start+0xc4>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d018      	beq.n	800d858 <HAL_TIM_Base_Start+0x70>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4a21      	ldr	r2, [pc, #132]	@ (800d8b0 <HAL_TIM_Base_Start+0xc8>)
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d013      	beq.n	800d858 <HAL_TIM_Base_Start+0x70>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a1f      	ldr	r2, [pc, #124]	@ (800d8b4 <HAL_TIM_Base_Start+0xcc>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d00e      	beq.n	800d858 <HAL_TIM_Base_Start+0x70>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	4a1e      	ldr	r2, [pc, #120]	@ (800d8b8 <HAL_TIM_Base_Start+0xd0>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d009      	beq.n	800d858 <HAL_TIM_Base_Start+0x70>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	4a1c      	ldr	r2, [pc, #112]	@ (800d8bc <HAL_TIM_Base_Start+0xd4>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d004      	beq.n	800d858 <HAL_TIM_Base_Start+0x70>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	4a1b      	ldr	r2, [pc, #108]	@ (800d8c0 <HAL_TIM_Base_Start+0xd8>)
 800d854:	4293      	cmp	r3, r2
 800d856:	d115      	bne.n	800d884 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	689a      	ldr	r2, [r3, #8]
 800d85e:	4b19      	ldr	r3, [pc, #100]	@ (800d8c4 <HAL_TIM_Base_Start+0xdc>)
 800d860:	4013      	ands	r3, r2
 800d862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2b06      	cmp	r3, #6
 800d868:	d015      	beq.n	800d896 <HAL_TIM_Base_Start+0xae>
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d870:	d011      	beq.n	800d896 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f042 0201 	orr.w	r2, r2, #1
 800d880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d882:	e008      	b.n	800d896 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f042 0201 	orr.w	r2, r2, #1
 800d892:	601a      	str	r2, [r3, #0]
 800d894:	e000      	b.n	800d898 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d896:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d898:	2300      	movs	r3, #0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3714      	adds	r7, #20
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr
 800d8a6:	bf00      	nop
 800d8a8:	40012c00 	.word	0x40012c00
 800d8ac:	40000400 	.word	0x40000400
 800d8b0:	40000800 	.word	0x40000800
 800d8b4:	40000c00 	.word	0x40000c00
 800d8b8:	40013400 	.word	0x40013400
 800d8bc:	40014000 	.word	0x40014000
 800d8c0:	40015000 	.word	0x40015000
 800d8c4:	00010007 	.word	0x00010007

0800d8c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d101      	bne.n	800d8da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e049      	b.n	800d96e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d106      	bne.n	800d8f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 f841 	bl	800d976 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2202      	movs	r2, #2
 800d8f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681a      	ldr	r2, [r3, #0]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	3304      	adds	r3, #4
 800d904:	4619      	mov	r1, r3
 800d906:	4610      	mov	r0, r2
 800d908:	f000 ffcc 	bl	800e8a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2201      	movs	r2, #1
 800d910:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2201      	movs	r2, #1
 800d918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2201      	movs	r2, #1
 800d920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2201      	movs	r2, #1
 800d928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2201      	movs	r2, #1
 800d930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2201      	movs	r2, #1
 800d938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2201      	movs	r2, #1
 800d940:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2201      	movs	r2, #1
 800d948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2201      	movs	r2, #1
 800d950:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2201      	movs	r2, #1
 800d958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2201      	movs	r2, #1
 800d960:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2201      	movs	r2, #1
 800d968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d96c:	2300      	movs	r3, #0
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3708      	adds	r7, #8
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}

0800d976 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d976:	b480      	push	{r7}
 800d978:	b083      	sub	sp, #12
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d97e:	bf00      	nop
 800d980:	370c      	adds	r7, #12
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr
	...

0800d98c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d109      	bne.n	800d9b0 <HAL_TIM_PWM_Start+0x24>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	bf14      	ite	ne
 800d9a8:	2301      	movne	r3, #1
 800d9aa:	2300      	moveq	r3, #0
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	e03c      	b.n	800da2a <HAL_TIM_PWM_Start+0x9e>
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	2b04      	cmp	r3, #4
 800d9b4:	d109      	bne.n	800d9ca <HAL_TIM_PWM_Start+0x3e>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	bf14      	ite	ne
 800d9c2:	2301      	movne	r3, #1
 800d9c4:	2300      	moveq	r3, #0
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	e02f      	b.n	800da2a <HAL_TIM_PWM_Start+0x9e>
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	2b08      	cmp	r3, #8
 800d9ce:	d109      	bne.n	800d9e4 <HAL_TIM_PWM_Start+0x58>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	bf14      	ite	ne
 800d9dc:	2301      	movne	r3, #1
 800d9de:	2300      	moveq	r3, #0
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	e022      	b.n	800da2a <HAL_TIM_PWM_Start+0x9e>
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	2b0c      	cmp	r3, #12
 800d9e8:	d109      	bne.n	800d9fe <HAL_TIM_PWM_Start+0x72>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	bf14      	ite	ne
 800d9f6:	2301      	movne	r3, #1
 800d9f8:	2300      	moveq	r3, #0
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	e015      	b.n	800da2a <HAL_TIM_PWM_Start+0x9e>
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	2b10      	cmp	r3, #16
 800da02:	d109      	bne.n	800da18 <HAL_TIM_PWM_Start+0x8c>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	bf14      	ite	ne
 800da10:	2301      	movne	r3, #1
 800da12:	2300      	moveq	r3, #0
 800da14:	b2db      	uxtb	r3, r3
 800da16:	e008      	b.n	800da2a <HAL_TIM_PWM_Start+0x9e>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800da1e:	b2db      	uxtb	r3, r3
 800da20:	2b01      	cmp	r3, #1
 800da22:	bf14      	ite	ne
 800da24:	2301      	movne	r3, #1
 800da26:	2300      	moveq	r3, #0
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d001      	beq.n	800da32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800da2e:	2301      	movs	r3, #1
 800da30:	e0a6      	b.n	800db80 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d104      	bne.n	800da42 <HAL_TIM_PWM_Start+0xb6>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2202      	movs	r2, #2
 800da3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800da40:	e023      	b.n	800da8a <HAL_TIM_PWM_Start+0xfe>
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	2b04      	cmp	r3, #4
 800da46:	d104      	bne.n	800da52 <HAL_TIM_PWM_Start+0xc6>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2202      	movs	r2, #2
 800da4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800da50:	e01b      	b.n	800da8a <HAL_TIM_PWM_Start+0xfe>
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	2b08      	cmp	r3, #8
 800da56:	d104      	bne.n	800da62 <HAL_TIM_PWM_Start+0xd6>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2202      	movs	r2, #2
 800da5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800da60:	e013      	b.n	800da8a <HAL_TIM_PWM_Start+0xfe>
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	2b0c      	cmp	r3, #12
 800da66:	d104      	bne.n	800da72 <HAL_TIM_PWM_Start+0xe6>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2202      	movs	r2, #2
 800da6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800da70:	e00b      	b.n	800da8a <HAL_TIM_PWM_Start+0xfe>
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	2b10      	cmp	r3, #16
 800da76:	d104      	bne.n	800da82 <HAL_TIM_PWM_Start+0xf6>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2202      	movs	r2, #2
 800da7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800da80:	e003      	b.n	800da8a <HAL_TIM_PWM_Start+0xfe>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2202      	movs	r2, #2
 800da86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2201      	movs	r2, #1
 800da90:	6839      	ldr	r1, [r7, #0]
 800da92:	4618      	mov	r0, r3
 800da94:	f001 fb80 	bl	800f198 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a3a      	ldr	r2, [pc, #232]	@ (800db88 <HAL_TIM_PWM_Start+0x1fc>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d018      	beq.n	800dad4 <HAL_TIM_PWM_Start+0x148>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4a39      	ldr	r2, [pc, #228]	@ (800db8c <HAL_TIM_PWM_Start+0x200>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d013      	beq.n	800dad4 <HAL_TIM_PWM_Start+0x148>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4a37      	ldr	r2, [pc, #220]	@ (800db90 <HAL_TIM_PWM_Start+0x204>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d00e      	beq.n	800dad4 <HAL_TIM_PWM_Start+0x148>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	4a36      	ldr	r2, [pc, #216]	@ (800db94 <HAL_TIM_PWM_Start+0x208>)
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d009      	beq.n	800dad4 <HAL_TIM_PWM_Start+0x148>
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4a34      	ldr	r2, [pc, #208]	@ (800db98 <HAL_TIM_PWM_Start+0x20c>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d004      	beq.n	800dad4 <HAL_TIM_PWM_Start+0x148>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4a33      	ldr	r2, [pc, #204]	@ (800db9c <HAL_TIM_PWM_Start+0x210>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d101      	bne.n	800dad8 <HAL_TIM_PWM_Start+0x14c>
 800dad4:	2301      	movs	r3, #1
 800dad6:	e000      	b.n	800dada <HAL_TIM_PWM_Start+0x14e>
 800dad8:	2300      	movs	r3, #0
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d007      	beq.n	800daee <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800daec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4a25      	ldr	r2, [pc, #148]	@ (800db88 <HAL_TIM_PWM_Start+0x1fc>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d022      	beq.n	800db3e <HAL_TIM_PWM_Start+0x1b2>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db00:	d01d      	beq.n	800db3e <HAL_TIM_PWM_Start+0x1b2>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4a26      	ldr	r2, [pc, #152]	@ (800dba0 <HAL_TIM_PWM_Start+0x214>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d018      	beq.n	800db3e <HAL_TIM_PWM_Start+0x1b2>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4a24      	ldr	r2, [pc, #144]	@ (800dba4 <HAL_TIM_PWM_Start+0x218>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d013      	beq.n	800db3e <HAL_TIM_PWM_Start+0x1b2>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4a23      	ldr	r2, [pc, #140]	@ (800dba8 <HAL_TIM_PWM_Start+0x21c>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d00e      	beq.n	800db3e <HAL_TIM_PWM_Start+0x1b2>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4a19      	ldr	r2, [pc, #100]	@ (800db8c <HAL_TIM_PWM_Start+0x200>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d009      	beq.n	800db3e <HAL_TIM_PWM_Start+0x1b2>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	4a18      	ldr	r2, [pc, #96]	@ (800db90 <HAL_TIM_PWM_Start+0x204>)
 800db30:	4293      	cmp	r3, r2
 800db32:	d004      	beq.n	800db3e <HAL_TIM_PWM_Start+0x1b2>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a18      	ldr	r2, [pc, #96]	@ (800db9c <HAL_TIM_PWM_Start+0x210>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d115      	bne.n	800db6a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	689a      	ldr	r2, [r3, #8]
 800db44:	4b19      	ldr	r3, [pc, #100]	@ (800dbac <HAL_TIM_PWM_Start+0x220>)
 800db46:	4013      	ands	r3, r2
 800db48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2b06      	cmp	r3, #6
 800db4e:	d015      	beq.n	800db7c <HAL_TIM_PWM_Start+0x1f0>
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db56:	d011      	beq.n	800db7c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	681a      	ldr	r2, [r3, #0]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f042 0201 	orr.w	r2, r2, #1
 800db66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db68:	e008      	b.n	800db7c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	681a      	ldr	r2, [r3, #0]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	f042 0201 	orr.w	r2, r2, #1
 800db78:	601a      	str	r2, [r3, #0]
 800db7a:	e000      	b.n	800db7e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800db7e:	2300      	movs	r3, #0
}
 800db80:	4618      	mov	r0, r3
 800db82:	3710      	adds	r7, #16
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}
 800db88:	40012c00 	.word	0x40012c00
 800db8c:	40013400 	.word	0x40013400
 800db90:	40014000 	.word	0x40014000
 800db94:	40014400 	.word	0x40014400
 800db98:	40014800 	.word	0x40014800
 800db9c:	40015000 	.word	0x40015000
 800dba0:	40000400 	.word	0x40000400
 800dba4:	40000800 	.word	0x40000800
 800dba8:	40000c00 	.word	0x40000c00
 800dbac:	00010007 	.word	0x00010007

0800dbb0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b086      	sub	sp, #24
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	60b9      	str	r1, [r7, #8]
 800dbba:	607a      	str	r2, [r7, #4]
 800dbbc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d109      	bne.n	800dbdc <HAL_TIM_PWM_Start_DMA+0x2c>
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	2b02      	cmp	r3, #2
 800dbd2:	bf0c      	ite	eq
 800dbd4:	2301      	moveq	r3, #1
 800dbd6:	2300      	movne	r3, #0
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	e03c      	b.n	800dc56 <HAL_TIM_PWM_Start_DMA+0xa6>
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	2b04      	cmp	r3, #4
 800dbe0:	d109      	bne.n	800dbf6 <HAL_TIM_PWM_Start_DMA+0x46>
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	2b02      	cmp	r3, #2
 800dbec:	bf0c      	ite	eq
 800dbee:	2301      	moveq	r3, #1
 800dbf0:	2300      	movne	r3, #0
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	e02f      	b.n	800dc56 <HAL_TIM_PWM_Start_DMA+0xa6>
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	2b08      	cmp	r3, #8
 800dbfa:	d109      	bne.n	800dc10 <HAL_TIM_PWM_Start_DMA+0x60>
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	2b02      	cmp	r3, #2
 800dc06:	bf0c      	ite	eq
 800dc08:	2301      	moveq	r3, #1
 800dc0a:	2300      	movne	r3, #0
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	e022      	b.n	800dc56 <HAL_TIM_PWM_Start_DMA+0xa6>
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	2b0c      	cmp	r3, #12
 800dc14:	d109      	bne.n	800dc2a <HAL_TIM_PWM_Start_DMA+0x7a>
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	2b02      	cmp	r3, #2
 800dc20:	bf0c      	ite	eq
 800dc22:	2301      	moveq	r3, #1
 800dc24:	2300      	movne	r3, #0
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	e015      	b.n	800dc56 <HAL_TIM_PWM_Start_DMA+0xa6>
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	2b10      	cmp	r3, #16
 800dc2e:	d109      	bne.n	800dc44 <HAL_TIM_PWM_Start_DMA+0x94>
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	2b02      	cmp	r3, #2
 800dc3a:	bf0c      	ite	eq
 800dc3c:	2301      	moveq	r3, #1
 800dc3e:	2300      	movne	r3, #0
 800dc40:	b2db      	uxtb	r3, r3
 800dc42:	e008      	b.n	800dc56 <HAL_TIM_PWM_Start_DMA+0xa6>
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	2b02      	cmp	r3, #2
 800dc4e:	bf0c      	ite	eq
 800dc50:	2301      	moveq	r3, #1
 800dc52:	2300      	movne	r3, #0
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d001      	beq.n	800dc5e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800dc5a:	2302      	movs	r3, #2
 800dc5c:	e1b5      	b.n	800dfca <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d109      	bne.n	800dc78 <HAL_TIM_PWM_Start_DMA+0xc8>
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dc6a:	b2db      	uxtb	r3, r3
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	bf0c      	ite	eq
 800dc70:	2301      	moveq	r3, #1
 800dc72:	2300      	movne	r3, #0
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	e03c      	b.n	800dcf2 <HAL_TIM_PWM_Start_DMA+0x142>
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	2b04      	cmp	r3, #4
 800dc7c:	d109      	bne.n	800dc92 <HAL_TIM_PWM_Start_DMA+0xe2>
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800dc84:	b2db      	uxtb	r3, r3
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	bf0c      	ite	eq
 800dc8a:	2301      	moveq	r3, #1
 800dc8c:	2300      	movne	r3, #0
 800dc8e:	b2db      	uxtb	r3, r3
 800dc90:	e02f      	b.n	800dcf2 <HAL_TIM_PWM_Start_DMA+0x142>
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	2b08      	cmp	r3, #8
 800dc96:	d109      	bne.n	800dcac <HAL_TIM_PWM_Start_DMA+0xfc>
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	bf0c      	ite	eq
 800dca4:	2301      	moveq	r3, #1
 800dca6:	2300      	movne	r3, #0
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	e022      	b.n	800dcf2 <HAL_TIM_PWM_Start_DMA+0x142>
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	2b0c      	cmp	r3, #12
 800dcb0:	d109      	bne.n	800dcc6 <HAL_TIM_PWM_Start_DMA+0x116>
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	bf0c      	ite	eq
 800dcbe:	2301      	moveq	r3, #1
 800dcc0:	2300      	movne	r3, #0
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	e015      	b.n	800dcf2 <HAL_TIM_PWM_Start_DMA+0x142>
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	2b10      	cmp	r3, #16
 800dcca:	d109      	bne.n	800dce0 <HAL_TIM_PWM_Start_DMA+0x130>
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	bf0c      	ite	eq
 800dcd8:	2301      	moveq	r3, #1
 800dcda:	2300      	movne	r3, #0
 800dcdc:	b2db      	uxtb	r3, r3
 800dcde:	e008      	b.n	800dcf2 <HAL_TIM_PWM_Start_DMA+0x142>
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	bf0c      	ite	eq
 800dcec:	2301      	moveq	r3, #1
 800dcee:	2300      	movne	r3, #0
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d034      	beq.n	800dd60 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d002      	beq.n	800dd02 <HAL_TIM_PWM_Start_DMA+0x152>
 800dcfc:	887b      	ldrh	r3, [r7, #2]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d101      	bne.n	800dd06 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800dd02:	2301      	movs	r3, #1
 800dd04:	e161      	b.n	800dfca <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d104      	bne.n	800dd16 <HAL_TIM_PWM_Start_DMA+0x166>
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2202      	movs	r2, #2
 800dd10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dd14:	e026      	b.n	800dd64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	2b04      	cmp	r3, #4
 800dd1a:	d104      	bne.n	800dd26 <HAL_TIM_PWM_Start_DMA+0x176>
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2202      	movs	r2, #2
 800dd20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dd24:	e01e      	b.n	800dd64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	2b08      	cmp	r3, #8
 800dd2a:	d104      	bne.n	800dd36 <HAL_TIM_PWM_Start_DMA+0x186>
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2202      	movs	r2, #2
 800dd30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dd34:	e016      	b.n	800dd64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	2b0c      	cmp	r3, #12
 800dd3a:	d104      	bne.n	800dd46 <HAL_TIM_PWM_Start_DMA+0x196>
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2202      	movs	r2, #2
 800dd40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dd44:	e00e      	b.n	800dd64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	2b10      	cmp	r3, #16
 800dd4a:	d104      	bne.n	800dd56 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2202      	movs	r2, #2
 800dd50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dd54:	e006      	b.n	800dd64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	2202      	movs	r2, #2
 800dd5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dd5e:	e001      	b.n	800dd64 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800dd60:	2301      	movs	r3, #1
 800dd62:	e132      	b.n	800dfca <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	2b0c      	cmp	r3, #12
 800dd68:	f200 80ae 	bhi.w	800dec8 <HAL_TIM_PWM_Start_DMA+0x318>
 800dd6c:	a201      	add	r2, pc, #4	@ (adr r2, 800dd74 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800dd6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd72:	bf00      	nop
 800dd74:	0800dda9 	.word	0x0800dda9
 800dd78:	0800dec9 	.word	0x0800dec9
 800dd7c:	0800dec9 	.word	0x0800dec9
 800dd80:	0800dec9 	.word	0x0800dec9
 800dd84:	0800ddf1 	.word	0x0800ddf1
 800dd88:	0800dec9 	.word	0x0800dec9
 800dd8c:	0800dec9 	.word	0x0800dec9
 800dd90:	0800dec9 	.word	0x0800dec9
 800dd94:	0800de39 	.word	0x0800de39
 800dd98:	0800dec9 	.word	0x0800dec9
 800dd9c:	0800dec9 	.word	0x0800dec9
 800dda0:	0800dec9 	.word	0x0800dec9
 800dda4:	0800de81 	.word	0x0800de81
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddac:	4a89      	ldr	r2, [pc, #548]	@ (800dfd4 <HAL_TIM_PWM_Start_DMA+0x424>)
 800ddae:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddb4:	4a88      	ldr	r2, [pc, #544]	@ (800dfd8 <HAL_TIM_PWM_Start_DMA+0x428>)
 800ddb6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddbc:	4a87      	ldr	r2, [pc, #540]	@ (800dfdc <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ddbe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800ddc4:	6879      	ldr	r1, [r7, #4]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	3334      	adds	r3, #52	@ 0x34
 800ddcc:	461a      	mov	r2, r3
 800ddce:	887b      	ldrh	r3, [r7, #2]
 800ddd0:	f7fa f8a8 	bl	8007f24 <HAL_DMA_Start_IT>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d001      	beq.n	800ddde <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ddda:	2301      	movs	r3, #1
 800dddc:	e0f5      	b.n	800dfca <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	68da      	ldr	r2, [r3, #12]
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ddec:	60da      	str	r2, [r3, #12]
      break;
 800ddee:	e06e      	b.n	800dece <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddf4:	4a77      	ldr	r2, [pc, #476]	@ (800dfd4 <HAL_TIM_PWM_Start_DMA+0x424>)
 800ddf6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddfc:	4a76      	ldr	r2, [pc, #472]	@ (800dfd8 <HAL_TIM_PWM_Start_DMA+0x428>)
 800ddfe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de04:	4a75      	ldr	r2, [pc, #468]	@ (800dfdc <HAL_TIM_PWM_Start_DMA+0x42c>)
 800de06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800de0c:	6879      	ldr	r1, [r7, #4]
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	3338      	adds	r3, #56	@ 0x38
 800de14:	461a      	mov	r2, r3
 800de16:	887b      	ldrh	r3, [r7, #2]
 800de18:	f7fa f884 	bl	8007f24 <HAL_DMA_Start_IT>
 800de1c:	4603      	mov	r3, r0
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d001      	beq.n	800de26 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800de22:	2301      	movs	r3, #1
 800de24:	e0d1      	b.n	800dfca <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	68da      	ldr	r2, [r3, #12]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800de34:	60da      	str	r2, [r3, #12]
      break;
 800de36:	e04a      	b.n	800dece <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de3c:	4a65      	ldr	r2, [pc, #404]	@ (800dfd4 <HAL_TIM_PWM_Start_DMA+0x424>)
 800de3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de44:	4a64      	ldr	r2, [pc, #400]	@ (800dfd8 <HAL_TIM_PWM_Start_DMA+0x428>)
 800de46:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de4c:	4a63      	ldr	r2, [pc, #396]	@ (800dfdc <HAL_TIM_PWM_Start_DMA+0x42c>)
 800de4e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800de54:	6879      	ldr	r1, [r7, #4]
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	333c      	adds	r3, #60	@ 0x3c
 800de5c:	461a      	mov	r2, r3
 800de5e:	887b      	ldrh	r3, [r7, #2]
 800de60:	f7fa f860 	bl	8007f24 <HAL_DMA_Start_IT>
 800de64:	4603      	mov	r3, r0
 800de66:	2b00      	cmp	r3, #0
 800de68:	d001      	beq.n	800de6e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800de6a:	2301      	movs	r3, #1
 800de6c:	e0ad      	b.n	800dfca <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	68da      	ldr	r2, [r3, #12]
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800de7c:	60da      	str	r2, [r3, #12]
      break;
 800de7e:	e026      	b.n	800dece <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de84:	4a53      	ldr	r2, [pc, #332]	@ (800dfd4 <HAL_TIM_PWM_Start_DMA+0x424>)
 800de86:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de8c:	4a52      	ldr	r2, [pc, #328]	@ (800dfd8 <HAL_TIM_PWM_Start_DMA+0x428>)
 800de8e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de94:	4a51      	ldr	r2, [pc, #324]	@ (800dfdc <HAL_TIM_PWM_Start_DMA+0x42c>)
 800de96:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800de9c:	6879      	ldr	r1, [r7, #4]
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	3340      	adds	r3, #64	@ 0x40
 800dea4:	461a      	mov	r2, r3
 800dea6:	887b      	ldrh	r3, [r7, #2]
 800dea8:	f7fa f83c 	bl	8007f24 <HAL_DMA_Start_IT>
 800deac:	4603      	mov	r3, r0
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d001      	beq.n	800deb6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800deb2:	2301      	movs	r3, #1
 800deb4:	e089      	b.n	800dfca <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	68da      	ldr	r2, [r3, #12]
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800dec4:	60da      	str	r2, [r3, #12]
      break;
 800dec6:	e002      	b.n	800dece <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800dec8:	2301      	movs	r3, #1
 800deca:	75fb      	strb	r3, [r7, #23]
      break;
 800decc:	bf00      	nop
  }

  if (status == HAL_OK)
 800dece:	7dfb      	ldrb	r3, [r7, #23]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d179      	bne.n	800dfc8 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	2201      	movs	r2, #1
 800deda:	68b9      	ldr	r1, [r7, #8]
 800dedc:	4618      	mov	r0, r3
 800dede:	f001 f95b 	bl	800f198 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	4a3e      	ldr	r2, [pc, #248]	@ (800dfe0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800dee8:	4293      	cmp	r3, r2
 800deea:	d018      	beq.n	800df1e <HAL_TIM_PWM_Start_DMA+0x36e>
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4a3c      	ldr	r2, [pc, #240]	@ (800dfe4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800def2:	4293      	cmp	r3, r2
 800def4:	d013      	beq.n	800df1e <HAL_TIM_PWM_Start_DMA+0x36e>
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4a3b      	ldr	r2, [pc, #236]	@ (800dfe8 <HAL_TIM_PWM_Start_DMA+0x438>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d00e      	beq.n	800df1e <HAL_TIM_PWM_Start_DMA+0x36e>
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	4a39      	ldr	r2, [pc, #228]	@ (800dfec <HAL_TIM_PWM_Start_DMA+0x43c>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d009      	beq.n	800df1e <HAL_TIM_PWM_Start_DMA+0x36e>
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4a38      	ldr	r2, [pc, #224]	@ (800dff0 <HAL_TIM_PWM_Start_DMA+0x440>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d004      	beq.n	800df1e <HAL_TIM_PWM_Start_DMA+0x36e>
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4a36      	ldr	r2, [pc, #216]	@ (800dff4 <HAL_TIM_PWM_Start_DMA+0x444>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d101      	bne.n	800df22 <HAL_TIM_PWM_Start_DMA+0x372>
 800df1e:	2301      	movs	r3, #1
 800df20:	e000      	b.n	800df24 <HAL_TIM_PWM_Start_DMA+0x374>
 800df22:	2300      	movs	r3, #0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d007      	beq.n	800df38 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800df36:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a28      	ldr	r2, [pc, #160]	@ (800dfe0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d022      	beq.n	800df88 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df4a:	d01d      	beq.n	800df88 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a29      	ldr	r2, [pc, #164]	@ (800dff8 <HAL_TIM_PWM_Start_DMA+0x448>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d018      	beq.n	800df88 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4a28      	ldr	r2, [pc, #160]	@ (800dffc <HAL_TIM_PWM_Start_DMA+0x44c>)
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d013      	beq.n	800df88 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	4a26      	ldr	r2, [pc, #152]	@ (800e000 <HAL_TIM_PWM_Start_DMA+0x450>)
 800df66:	4293      	cmp	r3, r2
 800df68:	d00e      	beq.n	800df88 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	4a1d      	ldr	r2, [pc, #116]	@ (800dfe4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d009      	beq.n	800df88 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4a1b      	ldr	r2, [pc, #108]	@ (800dfe8 <HAL_TIM_PWM_Start_DMA+0x438>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d004      	beq.n	800df88 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4a1c      	ldr	r2, [pc, #112]	@ (800dff4 <HAL_TIM_PWM_Start_DMA+0x444>)
 800df84:	4293      	cmp	r3, r2
 800df86:	d115      	bne.n	800dfb4 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	689a      	ldr	r2, [r3, #8]
 800df8e:	4b1d      	ldr	r3, [pc, #116]	@ (800e004 <HAL_TIM_PWM_Start_DMA+0x454>)
 800df90:	4013      	ands	r3, r2
 800df92:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	2b06      	cmp	r3, #6
 800df98:	d015      	beq.n	800dfc6 <HAL_TIM_PWM_Start_DMA+0x416>
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dfa0:	d011      	beq.n	800dfc6 <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	681a      	ldr	r2, [r3, #0]
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f042 0201 	orr.w	r2, r2, #1
 800dfb0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfb2:	e008      	b.n	800dfc6 <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	681a      	ldr	r2, [r3, #0]
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f042 0201 	orr.w	r2, r2, #1
 800dfc2:	601a      	str	r2, [r3, #0]
 800dfc4:	e000      	b.n	800dfc8 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfc6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800dfc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3718      	adds	r7, #24
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	0800e793 	.word	0x0800e793
 800dfd8:	0800e83b 	.word	0x0800e83b
 800dfdc:	0800e701 	.word	0x0800e701
 800dfe0:	40012c00 	.word	0x40012c00
 800dfe4:	40013400 	.word	0x40013400
 800dfe8:	40014000 	.word	0x40014000
 800dfec:	40014400 	.word	0x40014400
 800dff0:	40014800 	.word	0x40014800
 800dff4:	40015000 	.word	0x40015000
 800dff8:	40000400 	.word	0x40000400
 800dffc:	40000800 	.word	0x40000800
 800e000:	40000c00 	.word	0x40000c00
 800e004:	00010007 	.word	0x00010007

0800e008 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b086      	sub	sp, #24
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d101      	bne.n	800e01c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e018:	2301      	movs	r3, #1
 800e01a:	e097      	b.n	800e14c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e022:	b2db      	uxtb	r3, r3
 800e024:	2b00      	cmp	r3, #0
 800e026:	d106      	bne.n	800e036 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2200      	movs	r2, #0
 800e02c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f7f6 f8cd 	bl	80041d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2202      	movs	r2, #2
 800e03a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	689b      	ldr	r3, [r3, #8]
 800e044:	687a      	ldr	r2, [r7, #4]
 800e046:	6812      	ldr	r2, [r2, #0]
 800e048:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800e04c:	f023 0307 	bic.w	r3, r3, #7
 800e050:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	3304      	adds	r3, #4
 800e05a:	4619      	mov	r1, r3
 800e05c:	4610      	mov	r0, r2
 800e05e:	f000 fc21 	bl	800e8a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	689b      	ldr	r3, [r3, #8]
 800e068:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	699b      	ldr	r3, [r3, #24]
 800e070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	6a1b      	ldr	r3, [r3, #32]
 800e078:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	697a      	ldr	r2, [r7, #20]
 800e080:	4313      	orrs	r3, r2
 800e082:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e08a:	f023 0303 	bic.w	r3, r3, #3
 800e08e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	689a      	ldr	r2, [r3, #8]
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	699b      	ldr	r3, [r3, #24]
 800e098:	021b      	lsls	r3, r3, #8
 800e09a:	4313      	orrs	r3, r2
 800e09c:	693a      	ldr	r2, [r7, #16]
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800e0a8:	f023 030c 	bic.w	r3, r3, #12
 800e0ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e0b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e0b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	68da      	ldr	r2, [r3, #12]
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	69db      	ldr	r3, [r3, #28]
 800e0c2:	021b      	lsls	r3, r3, #8
 800e0c4:	4313      	orrs	r3, r2
 800e0c6:	693a      	ldr	r2, [r7, #16]
 800e0c8:	4313      	orrs	r3, r2
 800e0ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	691b      	ldr	r3, [r3, #16]
 800e0d0:	011a      	lsls	r2, r3, #4
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	6a1b      	ldr	r3, [r3, #32]
 800e0d6:	031b      	lsls	r3, r3, #12
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	693a      	ldr	r2, [r7, #16]
 800e0dc:	4313      	orrs	r3, r2
 800e0de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800e0e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800e0ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	685a      	ldr	r2, [r3, #4]
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	695b      	ldr	r3, [r3, #20]
 800e0f8:	011b      	lsls	r3, r3, #4
 800e0fa:	4313      	orrs	r3, r2
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	4313      	orrs	r3, r2
 800e100:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	697a      	ldr	r2, [r7, #20]
 800e108:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	693a      	ldr	r2, [r7, #16]
 800e110:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	68fa      	ldr	r2, [r7, #12]
 800e118:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2201      	movs	r2, #1
 800e11e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2201      	movs	r2, #1
 800e126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2201      	movs	r2, #1
 800e12e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2201      	movs	r2, #1
 800e136:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2201      	movs	r2, #1
 800e13e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2201      	movs	r2, #1
 800e146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e14a:	2300      	movs	r3, #0
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3718      	adds	r7, #24
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e164:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e16c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e174:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e17c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d110      	bne.n	800e1a6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e184:	7bfb      	ldrb	r3, [r7, #15]
 800e186:	2b01      	cmp	r3, #1
 800e188:	d102      	bne.n	800e190 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800e18a:	7b7b      	ldrb	r3, [r7, #13]
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d001      	beq.n	800e194 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800e190:	2301      	movs	r3, #1
 800e192:	e069      	b.n	800e268 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2202      	movs	r2, #2
 800e198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2202      	movs	r2, #2
 800e1a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e1a4:	e031      	b.n	800e20a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	2b04      	cmp	r3, #4
 800e1aa:	d110      	bne.n	800e1ce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e1ac:	7bbb      	ldrb	r3, [r7, #14]
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	d102      	bne.n	800e1b8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e1b2:	7b3b      	ldrb	r3, [r7, #12]
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d001      	beq.n	800e1bc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	e055      	b.n	800e268 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2202      	movs	r2, #2
 800e1c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2202      	movs	r2, #2
 800e1c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e1cc:	e01d      	b.n	800e20a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e1ce:	7bfb      	ldrb	r3, [r7, #15]
 800e1d0:	2b01      	cmp	r3, #1
 800e1d2:	d108      	bne.n	800e1e6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e1d4:	7bbb      	ldrb	r3, [r7, #14]
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	d105      	bne.n	800e1e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e1da:	7b7b      	ldrb	r3, [r7, #13]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d102      	bne.n	800e1e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e1e0:	7b3b      	ldrb	r3, [r7, #12]
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d001      	beq.n	800e1ea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e03e      	b.n	800e268 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2202      	movs	r2, #2
 800e1ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2202      	movs	r2, #2
 800e1f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2202      	movs	r2, #2
 800e1fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2202      	movs	r2, #2
 800e206:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d003      	beq.n	800e218 <HAL_TIM_Encoder_Start+0xc4>
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	2b04      	cmp	r3, #4
 800e214:	d008      	beq.n	800e228 <HAL_TIM_Encoder_Start+0xd4>
 800e216:	e00f      	b.n	800e238 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2201      	movs	r2, #1
 800e21e:	2100      	movs	r1, #0
 800e220:	4618      	mov	r0, r3
 800e222:	f000 ffb9 	bl	800f198 <TIM_CCxChannelCmd>
      break;
 800e226:	e016      	b.n	800e256 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2201      	movs	r2, #1
 800e22e:	2104      	movs	r1, #4
 800e230:	4618      	mov	r0, r3
 800e232:	f000 ffb1 	bl	800f198 <TIM_CCxChannelCmd>
      break;
 800e236:	e00e      	b.n	800e256 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2201      	movs	r2, #1
 800e23e:	2100      	movs	r1, #0
 800e240:	4618      	mov	r0, r3
 800e242:	f000 ffa9 	bl	800f198 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	2201      	movs	r2, #1
 800e24c:	2104      	movs	r1, #4
 800e24e:	4618      	mov	r0, r3
 800e250:	f000 ffa2 	bl	800f198 <TIM_CCxChannelCmd>
      break;
 800e254:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	681a      	ldr	r2, [r3, #0]
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f042 0201 	orr.w	r2, r2, #1
 800e264:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e266:	2300      	movs	r3, #0
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3710      	adds	r7, #16
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b086      	sub	sp, #24
 800e274:	af00      	add	r7, sp, #0
 800e276:	60f8      	str	r0, [r7, #12]
 800e278:	60b9      	str	r1, [r7, #8]
 800e27a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e27c:	2300      	movs	r3, #0
 800e27e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e286:	2b01      	cmp	r3, #1
 800e288:	d101      	bne.n	800e28e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e28a:	2302      	movs	r3, #2
 800e28c:	e0ff      	b.n	800e48e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2201      	movs	r2, #1
 800e292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2b14      	cmp	r3, #20
 800e29a:	f200 80f0 	bhi.w	800e47e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e29e:	a201      	add	r2, pc, #4	@ (adr r2, 800e2a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a4:	0800e2f9 	.word	0x0800e2f9
 800e2a8:	0800e47f 	.word	0x0800e47f
 800e2ac:	0800e47f 	.word	0x0800e47f
 800e2b0:	0800e47f 	.word	0x0800e47f
 800e2b4:	0800e339 	.word	0x0800e339
 800e2b8:	0800e47f 	.word	0x0800e47f
 800e2bc:	0800e47f 	.word	0x0800e47f
 800e2c0:	0800e47f 	.word	0x0800e47f
 800e2c4:	0800e37b 	.word	0x0800e37b
 800e2c8:	0800e47f 	.word	0x0800e47f
 800e2cc:	0800e47f 	.word	0x0800e47f
 800e2d0:	0800e47f 	.word	0x0800e47f
 800e2d4:	0800e3bb 	.word	0x0800e3bb
 800e2d8:	0800e47f 	.word	0x0800e47f
 800e2dc:	0800e47f 	.word	0x0800e47f
 800e2e0:	0800e47f 	.word	0x0800e47f
 800e2e4:	0800e3fd 	.word	0x0800e3fd
 800e2e8:	0800e47f 	.word	0x0800e47f
 800e2ec:	0800e47f 	.word	0x0800e47f
 800e2f0:	0800e47f 	.word	0x0800e47f
 800e2f4:	0800e43d 	.word	0x0800e43d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	68b9      	ldr	r1, [r7, #8]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f000 fb84 	bl	800ea0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	699a      	ldr	r2, [r3, #24]
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f042 0208 	orr.w	r2, r2, #8
 800e312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	699a      	ldr	r2, [r3, #24]
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f022 0204 	bic.w	r2, r2, #4
 800e322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	6999      	ldr	r1, [r3, #24]
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	691a      	ldr	r2, [r3, #16]
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	430a      	orrs	r2, r1
 800e334:	619a      	str	r2, [r3, #24]
      break;
 800e336:	e0a5      	b.n	800e484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	68b9      	ldr	r1, [r7, #8]
 800e33e:	4618      	mov	r0, r3
 800e340:	f000 fbfe 	bl	800eb40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	699a      	ldr	r2, [r3, #24]
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	699a      	ldr	r2, [r3, #24]
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	6999      	ldr	r1, [r3, #24]
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	691b      	ldr	r3, [r3, #16]
 800e36e:	021a      	lsls	r2, r3, #8
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	430a      	orrs	r2, r1
 800e376:	619a      	str	r2, [r3, #24]
      break;
 800e378:	e084      	b.n	800e484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	68b9      	ldr	r1, [r7, #8]
 800e380:	4618      	mov	r0, r3
 800e382:	f000 fc71 	bl	800ec68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	69da      	ldr	r2, [r3, #28]
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f042 0208 	orr.w	r2, r2, #8
 800e394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	69da      	ldr	r2, [r3, #28]
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f022 0204 	bic.w	r2, r2, #4
 800e3a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	69d9      	ldr	r1, [r3, #28]
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	691a      	ldr	r2, [r3, #16]
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	430a      	orrs	r2, r1
 800e3b6:	61da      	str	r2, [r3, #28]
      break;
 800e3b8:	e064      	b.n	800e484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	68b9      	ldr	r1, [r7, #8]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f000 fce3 	bl	800ed8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	69da      	ldr	r2, [r3, #28]
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e3d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	69da      	ldr	r2, [r3, #28]
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e3e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	69d9      	ldr	r1, [r3, #28]
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	691b      	ldr	r3, [r3, #16]
 800e3f0:	021a      	lsls	r2, r3, #8
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	430a      	orrs	r2, r1
 800e3f8:	61da      	str	r2, [r3, #28]
      break;
 800e3fa:	e043      	b.n	800e484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	68b9      	ldr	r1, [r7, #8]
 800e402:	4618      	mov	r0, r3
 800e404:	f000 fd56 	bl	800eeb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f042 0208 	orr.w	r2, r2, #8
 800e416:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f022 0204 	bic.w	r2, r2, #4
 800e426:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	691a      	ldr	r2, [r3, #16]
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	430a      	orrs	r2, r1
 800e438:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e43a:	e023      	b.n	800e484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	68b9      	ldr	r1, [r7, #8]
 800e442:	4618      	mov	r0, r3
 800e444:	f000 fda0 	bl	800ef88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e456:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e466:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	691b      	ldr	r3, [r3, #16]
 800e472:	021a      	lsls	r2, r3, #8
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	430a      	orrs	r2, r1
 800e47a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e47c:	e002      	b.n	800e484 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e47e:	2301      	movs	r3, #1
 800e480:	75fb      	strb	r3, [r7, #23]
      break;
 800e482:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	2200      	movs	r2, #0
 800e488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e48c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3718      	adds	r7, #24
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}
 800e496:	bf00      	nop

0800e498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b084      	sub	sp, #16
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d101      	bne.n	800e4b4 <HAL_TIM_ConfigClockSource+0x1c>
 800e4b0:	2302      	movs	r3, #2
 800e4b2:	e0f6      	b.n	800e6a2 <HAL_TIM_ConfigClockSource+0x20a>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2202      	movs	r2, #2
 800e4c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	689b      	ldr	r3, [r3, #8]
 800e4ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800e4d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e4d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e4de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	68ba      	ldr	r2, [r7, #8]
 800e4e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4a6f      	ldr	r2, [pc, #444]	@ (800e6ac <HAL_TIM_ConfigClockSource+0x214>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	f000 80c1 	beq.w	800e676 <HAL_TIM_ConfigClockSource+0x1de>
 800e4f4:	4a6d      	ldr	r2, [pc, #436]	@ (800e6ac <HAL_TIM_ConfigClockSource+0x214>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	f200 80c6 	bhi.w	800e688 <HAL_TIM_ConfigClockSource+0x1f0>
 800e4fc:	4a6c      	ldr	r2, [pc, #432]	@ (800e6b0 <HAL_TIM_ConfigClockSource+0x218>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	f000 80b9 	beq.w	800e676 <HAL_TIM_ConfigClockSource+0x1de>
 800e504:	4a6a      	ldr	r2, [pc, #424]	@ (800e6b0 <HAL_TIM_ConfigClockSource+0x218>)
 800e506:	4293      	cmp	r3, r2
 800e508:	f200 80be 	bhi.w	800e688 <HAL_TIM_ConfigClockSource+0x1f0>
 800e50c:	4a69      	ldr	r2, [pc, #420]	@ (800e6b4 <HAL_TIM_ConfigClockSource+0x21c>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	f000 80b1 	beq.w	800e676 <HAL_TIM_ConfigClockSource+0x1de>
 800e514:	4a67      	ldr	r2, [pc, #412]	@ (800e6b4 <HAL_TIM_ConfigClockSource+0x21c>)
 800e516:	4293      	cmp	r3, r2
 800e518:	f200 80b6 	bhi.w	800e688 <HAL_TIM_ConfigClockSource+0x1f0>
 800e51c:	4a66      	ldr	r2, [pc, #408]	@ (800e6b8 <HAL_TIM_ConfigClockSource+0x220>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	f000 80a9 	beq.w	800e676 <HAL_TIM_ConfigClockSource+0x1de>
 800e524:	4a64      	ldr	r2, [pc, #400]	@ (800e6b8 <HAL_TIM_ConfigClockSource+0x220>)
 800e526:	4293      	cmp	r3, r2
 800e528:	f200 80ae 	bhi.w	800e688 <HAL_TIM_ConfigClockSource+0x1f0>
 800e52c:	4a63      	ldr	r2, [pc, #396]	@ (800e6bc <HAL_TIM_ConfigClockSource+0x224>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	f000 80a1 	beq.w	800e676 <HAL_TIM_ConfigClockSource+0x1de>
 800e534:	4a61      	ldr	r2, [pc, #388]	@ (800e6bc <HAL_TIM_ConfigClockSource+0x224>)
 800e536:	4293      	cmp	r3, r2
 800e538:	f200 80a6 	bhi.w	800e688 <HAL_TIM_ConfigClockSource+0x1f0>
 800e53c:	4a60      	ldr	r2, [pc, #384]	@ (800e6c0 <HAL_TIM_ConfigClockSource+0x228>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	f000 8099 	beq.w	800e676 <HAL_TIM_ConfigClockSource+0x1de>
 800e544:	4a5e      	ldr	r2, [pc, #376]	@ (800e6c0 <HAL_TIM_ConfigClockSource+0x228>)
 800e546:	4293      	cmp	r3, r2
 800e548:	f200 809e 	bhi.w	800e688 <HAL_TIM_ConfigClockSource+0x1f0>
 800e54c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e550:	f000 8091 	beq.w	800e676 <HAL_TIM_ConfigClockSource+0x1de>
 800e554:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e558:	f200 8096 	bhi.w	800e688 <HAL_TIM_ConfigClockSource+0x1f0>
 800e55c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e560:	f000 8089 	beq.w	800e676 <HAL_TIM_ConfigClockSource+0x1de>
 800e564:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e568:	f200 808e 	bhi.w	800e688 <HAL_TIM_ConfigClockSource+0x1f0>
 800e56c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e570:	d03e      	beq.n	800e5f0 <HAL_TIM_ConfigClockSource+0x158>
 800e572:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e576:	f200 8087 	bhi.w	800e688 <HAL_TIM_ConfigClockSource+0x1f0>
 800e57a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e57e:	f000 8086 	beq.w	800e68e <HAL_TIM_ConfigClockSource+0x1f6>
 800e582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e586:	d87f      	bhi.n	800e688 <HAL_TIM_ConfigClockSource+0x1f0>
 800e588:	2b70      	cmp	r3, #112	@ 0x70
 800e58a:	d01a      	beq.n	800e5c2 <HAL_TIM_ConfigClockSource+0x12a>
 800e58c:	2b70      	cmp	r3, #112	@ 0x70
 800e58e:	d87b      	bhi.n	800e688 <HAL_TIM_ConfigClockSource+0x1f0>
 800e590:	2b60      	cmp	r3, #96	@ 0x60
 800e592:	d050      	beq.n	800e636 <HAL_TIM_ConfigClockSource+0x19e>
 800e594:	2b60      	cmp	r3, #96	@ 0x60
 800e596:	d877      	bhi.n	800e688 <HAL_TIM_ConfigClockSource+0x1f0>
 800e598:	2b50      	cmp	r3, #80	@ 0x50
 800e59a:	d03c      	beq.n	800e616 <HAL_TIM_ConfigClockSource+0x17e>
 800e59c:	2b50      	cmp	r3, #80	@ 0x50
 800e59e:	d873      	bhi.n	800e688 <HAL_TIM_ConfigClockSource+0x1f0>
 800e5a0:	2b40      	cmp	r3, #64	@ 0x40
 800e5a2:	d058      	beq.n	800e656 <HAL_TIM_ConfigClockSource+0x1be>
 800e5a4:	2b40      	cmp	r3, #64	@ 0x40
 800e5a6:	d86f      	bhi.n	800e688 <HAL_TIM_ConfigClockSource+0x1f0>
 800e5a8:	2b30      	cmp	r3, #48	@ 0x30
 800e5aa:	d064      	beq.n	800e676 <HAL_TIM_ConfigClockSource+0x1de>
 800e5ac:	2b30      	cmp	r3, #48	@ 0x30
 800e5ae:	d86b      	bhi.n	800e688 <HAL_TIM_ConfigClockSource+0x1f0>
 800e5b0:	2b20      	cmp	r3, #32
 800e5b2:	d060      	beq.n	800e676 <HAL_TIM_ConfigClockSource+0x1de>
 800e5b4:	2b20      	cmp	r3, #32
 800e5b6:	d867      	bhi.n	800e688 <HAL_TIM_ConfigClockSource+0x1f0>
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d05c      	beq.n	800e676 <HAL_TIM_ConfigClockSource+0x1de>
 800e5bc:	2b10      	cmp	r3, #16
 800e5be:	d05a      	beq.n	800e676 <HAL_TIM_ConfigClockSource+0x1de>
 800e5c0:	e062      	b.n	800e688 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e5d2:	f000 fdc1 	bl	800f158 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	689b      	ldr	r3, [r3, #8]
 800e5dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e5e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	68ba      	ldr	r2, [r7, #8]
 800e5ec:	609a      	str	r2, [r3, #8]
      break;
 800e5ee:	e04f      	b.n	800e690 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e600:	f000 fdaa 	bl	800f158 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	689a      	ldr	r2, [r3, #8]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e612:	609a      	str	r2, [r3, #8]
      break;
 800e614:	e03c      	b.n	800e690 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e622:	461a      	mov	r2, r3
 800e624:	f000 fd1c 	bl	800f060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2150      	movs	r1, #80	@ 0x50
 800e62e:	4618      	mov	r0, r3
 800e630:	f000 fd75 	bl	800f11e <TIM_ITRx_SetConfig>
      break;
 800e634:	e02c      	b.n	800e690 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e642:	461a      	mov	r2, r3
 800e644:	f000 fd3b 	bl	800f0be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2160      	movs	r1, #96	@ 0x60
 800e64e:	4618      	mov	r0, r3
 800e650:	f000 fd65 	bl	800f11e <TIM_ITRx_SetConfig>
      break;
 800e654:	e01c      	b.n	800e690 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e662:	461a      	mov	r2, r3
 800e664:	f000 fcfc 	bl	800f060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	2140      	movs	r1, #64	@ 0x40
 800e66e:	4618      	mov	r0, r3
 800e670:	f000 fd55 	bl	800f11e <TIM_ITRx_SetConfig>
      break;
 800e674:	e00c      	b.n	800e690 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	4619      	mov	r1, r3
 800e680:	4610      	mov	r0, r2
 800e682:	f000 fd4c 	bl	800f11e <TIM_ITRx_SetConfig>
      break;
 800e686:	e003      	b.n	800e690 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800e688:	2301      	movs	r3, #1
 800e68a:	73fb      	strb	r3, [r7, #15]
      break;
 800e68c:	e000      	b.n	800e690 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800e68e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2201      	movs	r2, #1
 800e694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2200      	movs	r2, #0
 800e69c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3710      	adds	r7, #16
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}
 800e6aa:	bf00      	nop
 800e6ac:	00100070 	.word	0x00100070
 800e6b0:	00100060 	.word	0x00100060
 800e6b4:	00100050 	.word	0x00100050
 800e6b8:	00100040 	.word	0x00100040
 800e6bc:	00100030 	.word	0x00100030
 800e6c0:	00100020 	.word	0x00100020

0800e6c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b083      	sub	sp, #12
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e6cc:	bf00      	nop
 800e6ce:	370c      	adds	r7, #12
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d6:	4770      	bx	lr

0800e6d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b083      	sub	sp, #12
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800e6e0:	bf00      	nop
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b083      	sub	sp, #12
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800e6f4:	bf00      	nop
 800e6f6:	370c      	adds	r7, #12
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr

0800e700 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b084      	sub	sp, #16
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e70c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e712:	687a      	ldr	r2, [r7, #4]
 800e714:	429a      	cmp	r2, r3
 800e716:	d107      	bne.n	800e728 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2201      	movs	r2, #1
 800e71c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2201      	movs	r2, #1
 800e722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e726:	e02a      	b.n	800e77e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	429a      	cmp	r2, r3
 800e730:	d107      	bne.n	800e742 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2202      	movs	r2, #2
 800e736:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2201      	movs	r2, #1
 800e73c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e740:	e01d      	b.n	800e77e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	429a      	cmp	r2, r3
 800e74a:	d107      	bne.n	800e75c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2204      	movs	r2, #4
 800e750:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2201      	movs	r2, #1
 800e756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e75a:	e010      	b.n	800e77e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e760:	687a      	ldr	r2, [r7, #4]
 800e762:	429a      	cmp	r2, r3
 800e764:	d107      	bne.n	800e776 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2208      	movs	r2, #8
 800e76a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2201      	movs	r2, #1
 800e770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e774:	e003      	b.n	800e77e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	2201      	movs	r2, #1
 800e77a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800e77e:	68f8      	ldr	r0, [r7, #12]
 800e780:	f7ff ffb4 	bl	800e6ec <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2200      	movs	r2, #0
 800e788:	771a      	strb	r2, [r3, #28]
}
 800e78a:	bf00      	nop
 800e78c:	3710      	adds	r7, #16
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}

0800e792 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800e792:	b580      	push	{r7, lr}
 800e794:	b084      	sub	sp, #16
 800e796:	af00      	add	r7, sp, #0
 800e798:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e79e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7a4:	687a      	ldr	r2, [r7, #4]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d10b      	bne.n	800e7c2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	2201      	movs	r2, #1
 800e7ae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	69db      	ldr	r3, [r3, #28]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d136      	bne.n	800e826 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e7c0:	e031      	b.n	800e826 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7c6:	687a      	ldr	r2, [r7, #4]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d10b      	bne.n	800e7e4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2202      	movs	r2, #2
 800e7d0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	69db      	ldr	r3, [r3, #28]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d125      	bne.n	800e826 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2201      	movs	r2, #1
 800e7de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e7e2:	e020      	b.n	800e826 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7e8:	687a      	ldr	r2, [r7, #4]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d10b      	bne.n	800e806 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2204      	movs	r2, #4
 800e7f2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	69db      	ldr	r3, [r3, #28]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d114      	bne.n	800e826 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2201      	movs	r2, #1
 800e800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e804:	e00f      	b.n	800e826 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d10a      	bne.n	800e826 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	2208      	movs	r2, #8
 800e814:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	69db      	ldr	r3, [r3, #28]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d103      	bne.n	800e826 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2201      	movs	r2, #1
 800e822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e826:	68f8      	ldr	r0, [r7, #12]
 800e828:	f7ff ff4c 	bl	800e6c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2200      	movs	r2, #0
 800e830:	771a      	strb	r2, [r3, #28]
}
 800e832:	bf00      	nop
 800e834:	3710      	adds	r7, #16
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}

0800e83a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e83a:	b580      	push	{r7, lr}
 800e83c:	b084      	sub	sp, #16
 800e83e:	af00      	add	r7, sp, #0
 800e840:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e846:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	429a      	cmp	r2, r3
 800e850:	d103      	bne.n	800e85a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	2201      	movs	r2, #1
 800e856:	771a      	strb	r2, [r3, #28]
 800e858:	e019      	b.n	800e88e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e85e:	687a      	ldr	r2, [r7, #4]
 800e860:	429a      	cmp	r2, r3
 800e862:	d103      	bne.n	800e86c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2202      	movs	r2, #2
 800e868:	771a      	strb	r2, [r3, #28]
 800e86a:	e010      	b.n	800e88e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	429a      	cmp	r2, r3
 800e874:	d103      	bne.n	800e87e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	2204      	movs	r2, #4
 800e87a:	771a      	strb	r2, [r3, #28]
 800e87c:	e007      	b.n	800e88e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e882:	687a      	ldr	r2, [r7, #4]
 800e884:	429a      	cmp	r2, r3
 800e886:	d102      	bne.n	800e88e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2208      	movs	r2, #8
 800e88c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800e88e:	68f8      	ldr	r0, [r7, #12]
 800e890:	f7ff ff22 	bl	800e6d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2200      	movs	r2, #0
 800e898:	771a      	strb	r2, [r3, #28]
}
 800e89a:	bf00      	nop
 800e89c:	3710      	adds	r7, #16
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
	...

0800e8a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b085      	sub	sp, #20
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	4a4c      	ldr	r2, [pc, #304]	@ (800e9e8 <TIM_Base_SetConfig+0x144>)
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	d017      	beq.n	800e8ec <TIM_Base_SetConfig+0x48>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e8c2:	d013      	beq.n	800e8ec <TIM_Base_SetConfig+0x48>
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	4a49      	ldr	r2, [pc, #292]	@ (800e9ec <TIM_Base_SetConfig+0x148>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d00f      	beq.n	800e8ec <TIM_Base_SetConfig+0x48>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	4a48      	ldr	r2, [pc, #288]	@ (800e9f0 <TIM_Base_SetConfig+0x14c>)
 800e8d0:	4293      	cmp	r3, r2
 800e8d2:	d00b      	beq.n	800e8ec <TIM_Base_SetConfig+0x48>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	4a47      	ldr	r2, [pc, #284]	@ (800e9f4 <TIM_Base_SetConfig+0x150>)
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d007      	beq.n	800e8ec <TIM_Base_SetConfig+0x48>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	4a46      	ldr	r2, [pc, #280]	@ (800e9f8 <TIM_Base_SetConfig+0x154>)
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d003      	beq.n	800e8ec <TIM_Base_SetConfig+0x48>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	4a45      	ldr	r2, [pc, #276]	@ (800e9fc <TIM_Base_SetConfig+0x158>)
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d108      	bne.n	800e8fe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e8f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	68fa      	ldr	r2, [r7, #12]
 800e8fa:	4313      	orrs	r3, r2
 800e8fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	4a39      	ldr	r2, [pc, #228]	@ (800e9e8 <TIM_Base_SetConfig+0x144>)
 800e902:	4293      	cmp	r3, r2
 800e904:	d023      	beq.n	800e94e <TIM_Base_SetConfig+0xaa>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e90c:	d01f      	beq.n	800e94e <TIM_Base_SetConfig+0xaa>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	4a36      	ldr	r2, [pc, #216]	@ (800e9ec <TIM_Base_SetConfig+0x148>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d01b      	beq.n	800e94e <TIM_Base_SetConfig+0xaa>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	4a35      	ldr	r2, [pc, #212]	@ (800e9f0 <TIM_Base_SetConfig+0x14c>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d017      	beq.n	800e94e <TIM_Base_SetConfig+0xaa>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	4a34      	ldr	r2, [pc, #208]	@ (800e9f4 <TIM_Base_SetConfig+0x150>)
 800e922:	4293      	cmp	r3, r2
 800e924:	d013      	beq.n	800e94e <TIM_Base_SetConfig+0xaa>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	4a33      	ldr	r2, [pc, #204]	@ (800e9f8 <TIM_Base_SetConfig+0x154>)
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d00f      	beq.n	800e94e <TIM_Base_SetConfig+0xaa>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	4a33      	ldr	r2, [pc, #204]	@ (800ea00 <TIM_Base_SetConfig+0x15c>)
 800e932:	4293      	cmp	r3, r2
 800e934:	d00b      	beq.n	800e94e <TIM_Base_SetConfig+0xaa>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	4a32      	ldr	r2, [pc, #200]	@ (800ea04 <TIM_Base_SetConfig+0x160>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d007      	beq.n	800e94e <TIM_Base_SetConfig+0xaa>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	4a31      	ldr	r2, [pc, #196]	@ (800ea08 <TIM_Base_SetConfig+0x164>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d003      	beq.n	800e94e <TIM_Base_SetConfig+0xaa>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	4a2c      	ldr	r2, [pc, #176]	@ (800e9fc <TIM_Base_SetConfig+0x158>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d108      	bne.n	800e960 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	68db      	ldr	r3, [r3, #12]
 800e95a:	68fa      	ldr	r2, [r7, #12]
 800e95c:	4313      	orrs	r3, r2
 800e95e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	695b      	ldr	r3, [r3, #20]
 800e96a:	4313      	orrs	r3, r2
 800e96c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	68fa      	ldr	r2, [r7, #12]
 800e972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	689a      	ldr	r2, [r3, #8]
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	4a18      	ldr	r2, [pc, #96]	@ (800e9e8 <TIM_Base_SetConfig+0x144>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	d013      	beq.n	800e9b4 <TIM_Base_SetConfig+0x110>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	4a1a      	ldr	r2, [pc, #104]	@ (800e9f8 <TIM_Base_SetConfig+0x154>)
 800e990:	4293      	cmp	r3, r2
 800e992:	d00f      	beq.n	800e9b4 <TIM_Base_SetConfig+0x110>
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	4a1a      	ldr	r2, [pc, #104]	@ (800ea00 <TIM_Base_SetConfig+0x15c>)
 800e998:	4293      	cmp	r3, r2
 800e99a:	d00b      	beq.n	800e9b4 <TIM_Base_SetConfig+0x110>
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	4a19      	ldr	r2, [pc, #100]	@ (800ea04 <TIM_Base_SetConfig+0x160>)
 800e9a0:	4293      	cmp	r3, r2
 800e9a2:	d007      	beq.n	800e9b4 <TIM_Base_SetConfig+0x110>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	4a18      	ldr	r2, [pc, #96]	@ (800ea08 <TIM_Base_SetConfig+0x164>)
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d003      	beq.n	800e9b4 <TIM_Base_SetConfig+0x110>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	4a13      	ldr	r2, [pc, #76]	@ (800e9fc <TIM_Base_SetConfig+0x158>)
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	d103      	bne.n	800e9bc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	691a      	ldr	r2, [r3, #16]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2201      	movs	r2, #1
 800e9c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	691b      	ldr	r3, [r3, #16]
 800e9c6:	f003 0301 	and.w	r3, r3, #1
 800e9ca:	2b01      	cmp	r3, #1
 800e9cc:	d105      	bne.n	800e9da <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	691b      	ldr	r3, [r3, #16]
 800e9d2:	f023 0201 	bic.w	r2, r3, #1
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	611a      	str	r2, [r3, #16]
  }
}
 800e9da:	bf00      	nop
 800e9dc:	3714      	adds	r7, #20
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e4:	4770      	bx	lr
 800e9e6:	bf00      	nop
 800e9e8:	40012c00 	.word	0x40012c00
 800e9ec:	40000400 	.word	0x40000400
 800e9f0:	40000800 	.word	0x40000800
 800e9f4:	40000c00 	.word	0x40000c00
 800e9f8:	40013400 	.word	0x40013400
 800e9fc:	40015000 	.word	0x40015000
 800ea00:	40014000 	.word	0x40014000
 800ea04:	40014400 	.word	0x40014400
 800ea08:	40014800 	.word	0x40014800

0800ea0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b087      	sub	sp, #28
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
 800ea14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6a1b      	ldr	r3, [r3, #32]
 800ea1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6a1b      	ldr	r3, [r3, #32]
 800ea20:	f023 0201 	bic.w	r2, r3, #1
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	699b      	ldr	r3, [r3, #24]
 800ea32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ea3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	f023 0303 	bic.w	r3, r3, #3
 800ea46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	68fa      	ldr	r2, [r7, #12]
 800ea4e:	4313      	orrs	r3, r2
 800ea50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	f023 0302 	bic.w	r3, r3, #2
 800ea58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	689b      	ldr	r3, [r3, #8]
 800ea5e:	697a      	ldr	r2, [r7, #20]
 800ea60:	4313      	orrs	r3, r2
 800ea62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	4a30      	ldr	r2, [pc, #192]	@ (800eb28 <TIM_OC1_SetConfig+0x11c>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d013      	beq.n	800ea94 <TIM_OC1_SetConfig+0x88>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	4a2f      	ldr	r2, [pc, #188]	@ (800eb2c <TIM_OC1_SetConfig+0x120>)
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d00f      	beq.n	800ea94 <TIM_OC1_SetConfig+0x88>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	4a2e      	ldr	r2, [pc, #184]	@ (800eb30 <TIM_OC1_SetConfig+0x124>)
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	d00b      	beq.n	800ea94 <TIM_OC1_SetConfig+0x88>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	4a2d      	ldr	r2, [pc, #180]	@ (800eb34 <TIM_OC1_SetConfig+0x128>)
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d007      	beq.n	800ea94 <TIM_OC1_SetConfig+0x88>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	4a2c      	ldr	r2, [pc, #176]	@ (800eb38 <TIM_OC1_SetConfig+0x12c>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d003      	beq.n	800ea94 <TIM_OC1_SetConfig+0x88>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	4a2b      	ldr	r2, [pc, #172]	@ (800eb3c <TIM_OC1_SetConfig+0x130>)
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d10c      	bne.n	800eaae <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	f023 0308 	bic.w	r3, r3, #8
 800ea9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	697a      	ldr	r2, [r7, #20]
 800eaa2:	4313      	orrs	r3, r2
 800eaa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	f023 0304 	bic.w	r3, r3, #4
 800eaac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	4a1d      	ldr	r2, [pc, #116]	@ (800eb28 <TIM_OC1_SetConfig+0x11c>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d013      	beq.n	800eade <TIM_OC1_SetConfig+0xd2>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	4a1c      	ldr	r2, [pc, #112]	@ (800eb2c <TIM_OC1_SetConfig+0x120>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d00f      	beq.n	800eade <TIM_OC1_SetConfig+0xd2>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	4a1b      	ldr	r2, [pc, #108]	@ (800eb30 <TIM_OC1_SetConfig+0x124>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d00b      	beq.n	800eade <TIM_OC1_SetConfig+0xd2>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4a1a      	ldr	r2, [pc, #104]	@ (800eb34 <TIM_OC1_SetConfig+0x128>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d007      	beq.n	800eade <TIM_OC1_SetConfig+0xd2>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	4a19      	ldr	r2, [pc, #100]	@ (800eb38 <TIM_OC1_SetConfig+0x12c>)
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d003      	beq.n	800eade <TIM_OC1_SetConfig+0xd2>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4a18      	ldr	r2, [pc, #96]	@ (800eb3c <TIM_OC1_SetConfig+0x130>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d111      	bne.n	800eb02 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eaec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	695b      	ldr	r3, [r3, #20]
 800eaf2:	693a      	ldr	r2, [r7, #16]
 800eaf4:	4313      	orrs	r3, r2
 800eaf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	699b      	ldr	r3, [r3, #24]
 800eafc:	693a      	ldr	r2, [r7, #16]
 800eafe:	4313      	orrs	r3, r2
 800eb00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	693a      	ldr	r2, [r7, #16]
 800eb06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	68fa      	ldr	r2, [r7, #12]
 800eb0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	685a      	ldr	r2, [r3, #4]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	697a      	ldr	r2, [r7, #20]
 800eb1a:	621a      	str	r2, [r3, #32]
}
 800eb1c:	bf00      	nop
 800eb1e:	371c      	adds	r7, #28
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr
 800eb28:	40012c00 	.word	0x40012c00
 800eb2c:	40013400 	.word	0x40013400
 800eb30:	40014000 	.word	0x40014000
 800eb34:	40014400 	.word	0x40014400
 800eb38:	40014800 	.word	0x40014800
 800eb3c:	40015000 	.word	0x40015000

0800eb40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b087      	sub	sp, #28
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6a1b      	ldr	r3, [r3, #32]
 800eb4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6a1b      	ldr	r3, [r3, #32]
 800eb54:	f023 0210 	bic.w	r2, r3, #16
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	699b      	ldr	r3, [r3, #24]
 800eb66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800eb6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eb72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eb7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	021b      	lsls	r3, r3, #8
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	4313      	orrs	r3, r2
 800eb86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	f023 0320 	bic.w	r3, r3, #32
 800eb8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	689b      	ldr	r3, [r3, #8]
 800eb94:	011b      	lsls	r3, r3, #4
 800eb96:	697a      	ldr	r2, [r7, #20]
 800eb98:	4313      	orrs	r3, r2
 800eb9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	4a2c      	ldr	r2, [pc, #176]	@ (800ec50 <TIM_OC2_SetConfig+0x110>)
 800eba0:	4293      	cmp	r3, r2
 800eba2:	d007      	beq.n	800ebb4 <TIM_OC2_SetConfig+0x74>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	4a2b      	ldr	r2, [pc, #172]	@ (800ec54 <TIM_OC2_SetConfig+0x114>)
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	d003      	beq.n	800ebb4 <TIM_OC2_SetConfig+0x74>
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	4a2a      	ldr	r2, [pc, #168]	@ (800ec58 <TIM_OC2_SetConfig+0x118>)
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	d10d      	bne.n	800ebd0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ebba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	68db      	ldr	r3, [r3, #12]
 800ebc0:	011b      	lsls	r3, r3, #4
 800ebc2:	697a      	ldr	r2, [r7, #20]
 800ebc4:	4313      	orrs	r3, r2
 800ebc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ebce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	4a1f      	ldr	r2, [pc, #124]	@ (800ec50 <TIM_OC2_SetConfig+0x110>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d013      	beq.n	800ec00 <TIM_OC2_SetConfig+0xc0>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	4a1e      	ldr	r2, [pc, #120]	@ (800ec54 <TIM_OC2_SetConfig+0x114>)
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	d00f      	beq.n	800ec00 <TIM_OC2_SetConfig+0xc0>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	4a1e      	ldr	r2, [pc, #120]	@ (800ec5c <TIM_OC2_SetConfig+0x11c>)
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d00b      	beq.n	800ec00 <TIM_OC2_SetConfig+0xc0>
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	4a1d      	ldr	r2, [pc, #116]	@ (800ec60 <TIM_OC2_SetConfig+0x120>)
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d007      	beq.n	800ec00 <TIM_OC2_SetConfig+0xc0>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	4a1c      	ldr	r2, [pc, #112]	@ (800ec64 <TIM_OC2_SetConfig+0x124>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d003      	beq.n	800ec00 <TIM_OC2_SetConfig+0xc0>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	4a17      	ldr	r2, [pc, #92]	@ (800ec58 <TIM_OC2_SetConfig+0x118>)
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	d113      	bne.n	800ec28 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ec06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ec0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	695b      	ldr	r3, [r3, #20]
 800ec14:	009b      	lsls	r3, r3, #2
 800ec16:	693a      	ldr	r2, [r7, #16]
 800ec18:	4313      	orrs	r3, r2
 800ec1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	699b      	ldr	r3, [r3, #24]
 800ec20:	009b      	lsls	r3, r3, #2
 800ec22:	693a      	ldr	r2, [r7, #16]
 800ec24:	4313      	orrs	r3, r2
 800ec26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	693a      	ldr	r2, [r7, #16]
 800ec2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	68fa      	ldr	r2, [r7, #12]
 800ec32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	685a      	ldr	r2, [r3, #4]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	697a      	ldr	r2, [r7, #20]
 800ec40:	621a      	str	r2, [r3, #32]
}
 800ec42:	bf00      	nop
 800ec44:	371c      	adds	r7, #28
 800ec46:	46bd      	mov	sp, r7
 800ec48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4c:	4770      	bx	lr
 800ec4e:	bf00      	nop
 800ec50:	40012c00 	.word	0x40012c00
 800ec54:	40013400 	.word	0x40013400
 800ec58:	40015000 	.word	0x40015000
 800ec5c:	40014000 	.word	0x40014000
 800ec60:	40014400 	.word	0x40014400
 800ec64:	40014800 	.word	0x40014800

0800ec68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b087      	sub	sp, #28
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6a1b      	ldr	r3, [r3, #32]
 800ec76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6a1b      	ldr	r3, [r3, #32]
 800ec7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	69db      	ldr	r3, [r3, #28]
 800ec8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ec96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	f023 0303 	bic.w	r3, r3, #3
 800eca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	68fa      	ldr	r2, [r7, #12]
 800ecaa:	4313      	orrs	r3, r2
 800ecac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ecb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	689b      	ldr	r3, [r3, #8]
 800ecba:	021b      	lsls	r3, r3, #8
 800ecbc:	697a      	ldr	r2, [r7, #20]
 800ecbe:	4313      	orrs	r3, r2
 800ecc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	4a2b      	ldr	r2, [pc, #172]	@ (800ed74 <TIM_OC3_SetConfig+0x10c>)
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d007      	beq.n	800ecda <TIM_OC3_SetConfig+0x72>
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	4a2a      	ldr	r2, [pc, #168]	@ (800ed78 <TIM_OC3_SetConfig+0x110>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d003      	beq.n	800ecda <TIM_OC3_SetConfig+0x72>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	4a29      	ldr	r2, [pc, #164]	@ (800ed7c <TIM_OC3_SetConfig+0x114>)
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	d10d      	bne.n	800ecf6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ece0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	68db      	ldr	r3, [r3, #12]
 800ece6:	021b      	lsls	r3, r3, #8
 800ece8:	697a      	ldr	r2, [r7, #20]
 800ecea:	4313      	orrs	r3, r2
 800ecec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ecf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	4a1e      	ldr	r2, [pc, #120]	@ (800ed74 <TIM_OC3_SetConfig+0x10c>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d013      	beq.n	800ed26 <TIM_OC3_SetConfig+0xbe>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	4a1d      	ldr	r2, [pc, #116]	@ (800ed78 <TIM_OC3_SetConfig+0x110>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d00f      	beq.n	800ed26 <TIM_OC3_SetConfig+0xbe>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	4a1d      	ldr	r2, [pc, #116]	@ (800ed80 <TIM_OC3_SetConfig+0x118>)
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d00b      	beq.n	800ed26 <TIM_OC3_SetConfig+0xbe>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	4a1c      	ldr	r2, [pc, #112]	@ (800ed84 <TIM_OC3_SetConfig+0x11c>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d007      	beq.n	800ed26 <TIM_OC3_SetConfig+0xbe>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	4a1b      	ldr	r2, [pc, #108]	@ (800ed88 <TIM_OC3_SetConfig+0x120>)
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d003      	beq.n	800ed26 <TIM_OC3_SetConfig+0xbe>
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	4a16      	ldr	r2, [pc, #88]	@ (800ed7c <TIM_OC3_SetConfig+0x114>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d113      	bne.n	800ed4e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ed2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ed34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	695b      	ldr	r3, [r3, #20]
 800ed3a:	011b      	lsls	r3, r3, #4
 800ed3c:	693a      	ldr	r2, [r7, #16]
 800ed3e:	4313      	orrs	r3, r2
 800ed40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	699b      	ldr	r3, [r3, #24]
 800ed46:	011b      	lsls	r3, r3, #4
 800ed48:	693a      	ldr	r2, [r7, #16]
 800ed4a:	4313      	orrs	r3, r2
 800ed4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	693a      	ldr	r2, [r7, #16]
 800ed52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	68fa      	ldr	r2, [r7, #12]
 800ed58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	685a      	ldr	r2, [r3, #4]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	697a      	ldr	r2, [r7, #20]
 800ed66:	621a      	str	r2, [r3, #32]
}
 800ed68:	bf00      	nop
 800ed6a:	371c      	adds	r7, #28
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr
 800ed74:	40012c00 	.word	0x40012c00
 800ed78:	40013400 	.word	0x40013400
 800ed7c:	40015000 	.word	0x40015000
 800ed80:	40014000 	.word	0x40014000
 800ed84:	40014400 	.word	0x40014400
 800ed88:	40014800 	.word	0x40014800

0800ed8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b087      	sub	sp, #28
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6a1b      	ldr	r3, [r3, #32]
 800ed9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6a1b      	ldr	r3, [r3, #32]
 800eda0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	685b      	ldr	r3, [r3, #4]
 800edac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	69db      	ldr	r3, [r3, #28]
 800edb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800edba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800edbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800edc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	021b      	lsls	r3, r3, #8
 800edce:	68fa      	ldr	r2, [r7, #12]
 800edd0:	4313      	orrs	r3, r2
 800edd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800edda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	689b      	ldr	r3, [r3, #8]
 800ede0:	031b      	lsls	r3, r3, #12
 800ede2:	697a      	ldr	r2, [r7, #20]
 800ede4:	4313      	orrs	r3, r2
 800ede6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	4a2c      	ldr	r2, [pc, #176]	@ (800ee9c <TIM_OC4_SetConfig+0x110>)
 800edec:	4293      	cmp	r3, r2
 800edee:	d007      	beq.n	800ee00 <TIM_OC4_SetConfig+0x74>
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	4a2b      	ldr	r2, [pc, #172]	@ (800eea0 <TIM_OC4_SetConfig+0x114>)
 800edf4:	4293      	cmp	r3, r2
 800edf6:	d003      	beq.n	800ee00 <TIM_OC4_SetConfig+0x74>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	4a2a      	ldr	r2, [pc, #168]	@ (800eea4 <TIM_OC4_SetConfig+0x118>)
 800edfc:	4293      	cmp	r3, r2
 800edfe:	d10d      	bne.n	800ee1c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ee06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	68db      	ldr	r3, [r3, #12]
 800ee0c:	031b      	lsls	r3, r3, #12
 800ee0e:	697a      	ldr	r2, [r7, #20]
 800ee10:	4313      	orrs	r3, r2
 800ee12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ee1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	4a1f      	ldr	r2, [pc, #124]	@ (800ee9c <TIM_OC4_SetConfig+0x110>)
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d013      	beq.n	800ee4c <TIM_OC4_SetConfig+0xc0>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	4a1e      	ldr	r2, [pc, #120]	@ (800eea0 <TIM_OC4_SetConfig+0x114>)
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d00f      	beq.n	800ee4c <TIM_OC4_SetConfig+0xc0>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	4a1e      	ldr	r2, [pc, #120]	@ (800eea8 <TIM_OC4_SetConfig+0x11c>)
 800ee30:	4293      	cmp	r3, r2
 800ee32:	d00b      	beq.n	800ee4c <TIM_OC4_SetConfig+0xc0>
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	4a1d      	ldr	r2, [pc, #116]	@ (800eeac <TIM_OC4_SetConfig+0x120>)
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	d007      	beq.n	800ee4c <TIM_OC4_SetConfig+0xc0>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	4a1c      	ldr	r2, [pc, #112]	@ (800eeb0 <TIM_OC4_SetConfig+0x124>)
 800ee40:	4293      	cmp	r3, r2
 800ee42:	d003      	beq.n	800ee4c <TIM_OC4_SetConfig+0xc0>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	4a17      	ldr	r2, [pc, #92]	@ (800eea4 <TIM_OC4_SetConfig+0x118>)
 800ee48:	4293      	cmp	r3, r2
 800ee4a:	d113      	bne.n	800ee74 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ee52:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ee5a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	695b      	ldr	r3, [r3, #20]
 800ee60:	019b      	lsls	r3, r3, #6
 800ee62:	693a      	ldr	r2, [r7, #16]
 800ee64:	4313      	orrs	r3, r2
 800ee66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	699b      	ldr	r3, [r3, #24]
 800ee6c:	019b      	lsls	r3, r3, #6
 800ee6e:	693a      	ldr	r2, [r7, #16]
 800ee70:	4313      	orrs	r3, r2
 800ee72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	693a      	ldr	r2, [r7, #16]
 800ee78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	68fa      	ldr	r2, [r7, #12]
 800ee7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	685a      	ldr	r2, [r3, #4]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	697a      	ldr	r2, [r7, #20]
 800ee8c:	621a      	str	r2, [r3, #32]
}
 800ee8e:	bf00      	nop
 800ee90:	371c      	adds	r7, #28
 800ee92:	46bd      	mov	sp, r7
 800ee94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee98:	4770      	bx	lr
 800ee9a:	bf00      	nop
 800ee9c:	40012c00 	.word	0x40012c00
 800eea0:	40013400 	.word	0x40013400
 800eea4:	40015000 	.word	0x40015000
 800eea8:	40014000 	.word	0x40014000
 800eeac:	40014400 	.word	0x40014400
 800eeb0:	40014800 	.word	0x40014800

0800eeb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b087      	sub	sp, #28
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6a1b      	ldr	r3, [r3, #32]
 800eec2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6a1b      	ldr	r3, [r3, #32]
 800eec8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eeda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	68fa      	ldr	r2, [r7, #12]
 800eeee:	4313      	orrs	r3, r2
 800eef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800eef8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	689b      	ldr	r3, [r3, #8]
 800eefe:	041b      	lsls	r3, r3, #16
 800ef00:	693a      	ldr	r2, [r7, #16]
 800ef02:	4313      	orrs	r3, r2
 800ef04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	4a19      	ldr	r2, [pc, #100]	@ (800ef70 <TIM_OC5_SetConfig+0xbc>)
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	d013      	beq.n	800ef36 <TIM_OC5_SetConfig+0x82>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	4a18      	ldr	r2, [pc, #96]	@ (800ef74 <TIM_OC5_SetConfig+0xc0>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d00f      	beq.n	800ef36 <TIM_OC5_SetConfig+0x82>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4a17      	ldr	r2, [pc, #92]	@ (800ef78 <TIM_OC5_SetConfig+0xc4>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d00b      	beq.n	800ef36 <TIM_OC5_SetConfig+0x82>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4a16      	ldr	r2, [pc, #88]	@ (800ef7c <TIM_OC5_SetConfig+0xc8>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d007      	beq.n	800ef36 <TIM_OC5_SetConfig+0x82>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	4a15      	ldr	r2, [pc, #84]	@ (800ef80 <TIM_OC5_SetConfig+0xcc>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d003      	beq.n	800ef36 <TIM_OC5_SetConfig+0x82>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4a14      	ldr	r2, [pc, #80]	@ (800ef84 <TIM_OC5_SetConfig+0xd0>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d109      	bne.n	800ef4a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ef3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	695b      	ldr	r3, [r3, #20]
 800ef42:	021b      	lsls	r3, r3, #8
 800ef44:	697a      	ldr	r2, [r7, #20]
 800ef46:	4313      	orrs	r3, r2
 800ef48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	697a      	ldr	r2, [r7, #20]
 800ef4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	68fa      	ldr	r2, [r7, #12]
 800ef54:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	685a      	ldr	r2, [r3, #4]
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	693a      	ldr	r2, [r7, #16]
 800ef62:	621a      	str	r2, [r3, #32]
}
 800ef64:	bf00      	nop
 800ef66:	371c      	adds	r7, #28
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6e:	4770      	bx	lr
 800ef70:	40012c00 	.word	0x40012c00
 800ef74:	40013400 	.word	0x40013400
 800ef78:	40014000 	.word	0x40014000
 800ef7c:	40014400 	.word	0x40014400
 800ef80:	40014800 	.word	0x40014800
 800ef84:	40015000 	.word	0x40015000

0800ef88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b087      	sub	sp, #28
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6a1b      	ldr	r3, [r3, #32]
 800ef96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6a1b      	ldr	r3, [r3, #32]
 800ef9c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	685b      	ldr	r3, [r3, #4]
 800efa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800efae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800efb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800efba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	021b      	lsls	r3, r3, #8
 800efc2:	68fa      	ldr	r2, [r7, #12]
 800efc4:	4313      	orrs	r3, r2
 800efc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800efce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	689b      	ldr	r3, [r3, #8]
 800efd4:	051b      	lsls	r3, r3, #20
 800efd6:	693a      	ldr	r2, [r7, #16]
 800efd8:	4313      	orrs	r3, r2
 800efda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	4a1a      	ldr	r2, [pc, #104]	@ (800f048 <TIM_OC6_SetConfig+0xc0>)
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d013      	beq.n	800f00c <TIM_OC6_SetConfig+0x84>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	4a19      	ldr	r2, [pc, #100]	@ (800f04c <TIM_OC6_SetConfig+0xc4>)
 800efe8:	4293      	cmp	r3, r2
 800efea:	d00f      	beq.n	800f00c <TIM_OC6_SetConfig+0x84>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	4a18      	ldr	r2, [pc, #96]	@ (800f050 <TIM_OC6_SetConfig+0xc8>)
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d00b      	beq.n	800f00c <TIM_OC6_SetConfig+0x84>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	4a17      	ldr	r2, [pc, #92]	@ (800f054 <TIM_OC6_SetConfig+0xcc>)
 800eff8:	4293      	cmp	r3, r2
 800effa:	d007      	beq.n	800f00c <TIM_OC6_SetConfig+0x84>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	4a16      	ldr	r2, [pc, #88]	@ (800f058 <TIM_OC6_SetConfig+0xd0>)
 800f000:	4293      	cmp	r3, r2
 800f002:	d003      	beq.n	800f00c <TIM_OC6_SetConfig+0x84>
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	4a15      	ldr	r2, [pc, #84]	@ (800f05c <TIM_OC6_SetConfig+0xd4>)
 800f008:	4293      	cmp	r3, r2
 800f00a:	d109      	bne.n	800f020 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f012:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	695b      	ldr	r3, [r3, #20]
 800f018:	029b      	lsls	r3, r3, #10
 800f01a:	697a      	ldr	r2, [r7, #20]
 800f01c:	4313      	orrs	r3, r2
 800f01e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	697a      	ldr	r2, [r7, #20]
 800f024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	68fa      	ldr	r2, [r7, #12]
 800f02a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	685a      	ldr	r2, [r3, #4]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	693a      	ldr	r2, [r7, #16]
 800f038:	621a      	str	r2, [r3, #32]
}
 800f03a:	bf00      	nop
 800f03c:	371c      	adds	r7, #28
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr
 800f046:	bf00      	nop
 800f048:	40012c00 	.word	0x40012c00
 800f04c:	40013400 	.word	0x40013400
 800f050:	40014000 	.word	0x40014000
 800f054:	40014400 	.word	0x40014400
 800f058:	40014800 	.word	0x40014800
 800f05c:	40015000 	.word	0x40015000

0800f060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f060:	b480      	push	{r7}
 800f062:	b087      	sub	sp, #28
 800f064:	af00      	add	r7, sp, #0
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	60b9      	str	r1, [r7, #8]
 800f06a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	6a1b      	ldr	r3, [r3, #32]
 800f070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	6a1b      	ldr	r3, [r3, #32]
 800f076:	f023 0201 	bic.w	r2, r3, #1
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	699b      	ldr	r3, [r3, #24]
 800f082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f08a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	011b      	lsls	r3, r3, #4
 800f090:	693a      	ldr	r2, [r7, #16]
 800f092:	4313      	orrs	r3, r2
 800f094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	f023 030a 	bic.w	r3, r3, #10
 800f09c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f09e:	697a      	ldr	r2, [r7, #20]
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	693a      	ldr	r2, [r7, #16]
 800f0aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	697a      	ldr	r2, [r7, #20]
 800f0b0:	621a      	str	r2, [r3, #32]
}
 800f0b2:	bf00      	nop
 800f0b4:	371c      	adds	r7, #28
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0bc:	4770      	bx	lr

0800f0be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f0be:	b480      	push	{r7}
 800f0c0:	b087      	sub	sp, #28
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	60f8      	str	r0, [r7, #12]
 800f0c6:	60b9      	str	r1, [r7, #8]
 800f0c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	6a1b      	ldr	r3, [r3, #32]
 800f0ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	6a1b      	ldr	r3, [r3, #32]
 800f0d4:	f023 0210 	bic.w	r2, r3, #16
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	699b      	ldr	r3, [r3, #24]
 800f0e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f0e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	031b      	lsls	r3, r3, #12
 800f0ee:	693a      	ldr	r2, [r7, #16]
 800f0f0:	4313      	orrs	r3, r2
 800f0f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f0fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	011b      	lsls	r3, r3, #4
 800f100:	697a      	ldr	r2, [r7, #20]
 800f102:	4313      	orrs	r3, r2
 800f104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	693a      	ldr	r2, [r7, #16]
 800f10a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	697a      	ldr	r2, [r7, #20]
 800f110:	621a      	str	r2, [r3, #32]
}
 800f112:	bf00      	nop
 800f114:	371c      	adds	r7, #28
 800f116:	46bd      	mov	sp, r7
 800f118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11c:	4770      	bx	lr

0800f11e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f11e:	b480      	push	{r7}
 800f120:	b085      	sub	sp, #20
 800f122:	af00      	add	r7, sp, #0
 800f124:	6078      	str	r0, [r7, #4]
 800f126:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	689b      	ldr	r3, [r3, #8]
 800f12c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f138:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f13a:	683a      	ldr	r2, [r7, #0]
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	4313      	orrs	r3, r2
 800f140:	f043 0307 	orr.w	r3, r3, #7
 800f144:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	68fa      	ldr	r2, [r7, #12]
 800f14a:	609a      	str	r2, [r3, #8]
}
 800f14c:	bf00      	nop
 800f14e:	3714      	adds	r7, #20
 800f150:	46bd      	mov	sp, r7
 800f152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f156:	4770      	bx	lr

0800f158 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f158:	b480      	push	{r7}
 800f15a:	b087      	sub	sp, #28
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	60f8      	str	r0, [r7, #12]
 800f160:	60b9      	str	r1, [r7, #8]
 800f162:	607a      	str	r2, [r7, #4]
 800f164:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	689b      	ldr	r3, [r3, #8]
 800f16a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f172:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	021a      	lsls	r2, r3, #8
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	431a      	orrs	r2, r3
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	4313      	orrs	r3, r2
 800f180:	697a      	ldr	r2, [r7, #20]
 800f182:	4313      	orrs	r3, r2
 800f184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	697a      	ldr	r2, [r7, #20]
 800f18a:	609a      	str	r2, [r3, #8]
}
 800f18c:	bf00      	nop
 800f18e:	371c      	adds	r7, #28
 800f190:	46bd      	mov	sp, r7
 800f192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f196:	4770      	bx	lr

0800f198 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f198:	b480      	push	{r7}
 800f19a:	b087      	sub	sp, #28
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	60f8      	str	r0, [r7, #12]
 800f1a0:	60b9      	str	r1, [r7, #8]
 800f1a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	f003 031f 	and.w	r3, r3, #31
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800f1b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	6a1a      	ldr	r2, [r3, #32]
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	43db      	mvns	r3, r3
 800f1ba:	401a      	ands	r2, r3
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	6a1a      	ldr	r2, [r3, #32]
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	f003 031f 	and.w	r3, r3, #31
 800f1ca:	6879      	ldr	r1, [r7, #4]
 800f1cc:	fa01 f303 	lsl.w	r3, r1, r3
 800f1d0:	431a      	orrs	r2, r3
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	621a      	str	r2, [r3, #32]
}
 800f1d6:	bf00      	nop
 800f1d8:	371c      	adds	r7, #28
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e0:	4770      	bx	lr
	...

0800f1e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b085      	sub	sp, #20
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	d101      	bne.n	800f1fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f1f8:	2302      	movs	r3, #2
 800f1fa:	e074      	b.n	800f2e6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2201      	movs	r2, #1
 800f200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2202      	movs	r2, #2
 800f208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	689b      	ldr	r3, [r3, #8]
 800f21a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	4a34      	ldr	r2, [pc, #208]	@ (800f2f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f222:	4293      	cmp	r3, r2
 800f224:	d009      	beq.n	800f23a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	4a33      	ldr	r2, [pc, #204]	@ (800f2f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f22c:	4293      	cmp	r3, r2
 800f22e:	d004      	beq.n	800f23a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4a31      	ldr	r2, [pc, #196]	@ (800f2fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f236:	4293      	cmp	r3, r2
 800f238:	d108      	bne.n	800f24c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f240:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	68fa      	ldr	r2, [r7, #12]
 800f248:	4313      	orrs	r3, r2
 800f24a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800f252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	68fa      	ldr	r2, [r7, #12]
 800f25e:	4313      	orrs	r3, r2
 800f260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	68fa      	ldr	r2, [r7, #12]
 800f268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	4a21      	ldr	r2, [pc, #132]	@ (800f2f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f270:	4293      	cmp	r3, r2
 800f272:	d022      	beq.n	800f2ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f27c:	d01d      	beq.n	800f2ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	4a1f      	ldr	r2, [pc, #124]	@ (800f300 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f284:	4293      	cmp	r3, r2
 800f286:	d018      	beq.n	800f2ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	4a1d      	ldr	r2, [pc, #116]	@ (800f304 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f28e:	4293      	cmp	r3, r2
 800f290:	d013      	beq.n	800f2ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	4a1c      	ldr	r2, [pc, #112]	@ (800f308 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f298:	4293      	cmp	r3, r2
 800f29a:	d00e      	beq.n	800f2ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4a15      	ldr	r2, [pc, #84]	@ (800f2f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d009      	beq.n	800f2ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	4a18      	ldr	r2, [pc, #96]	@ (800f30c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f2ac:	4293      	cmp	r3, r2
 800f2ae:	d004      	beq.n	800f2ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	4a11      	ldr	r2, [pc, #68]	@ (800f2fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d10c      	bne.n	800f2d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f2c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	689b      	ldr	r3, [r3, #8]
 800f2c6:	68ba      	ldr	r2, [r7, #8]
 800f2c8:	4313      	orrs	r3, r2
 800f2ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	68ba      	ldr	r2, [r7, #8]
 800f2d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f2e4:	2300      	movs	r3, #0
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3714      	adds	r7, #20
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f0:	4770      	bx	lr
 800f2f2:	bf00      	nop
 800f2f4:	40012c00 	.word	0x40012c00
 800f2f8:	40013400 	.word	0x40013400
 800f2fc:	40015000 	.word	0x40015000
 800f300:	40000400 	.word	0x40000400
 800f304:	40000800 	.word	0x40000800
 800f308:	40000c00 	.word	0x40000c00
 800f30c:	40014000 	.word	0x40014000

0800f310 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f310:	b480      	push	{r7}
 800f312:	b085      	sub	sp, #20
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f31a:	2300      	movs	r3, #0
 800f31c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f324:	2b01      	cmp	r3, #1
 800f326:	d101      	bne.n	800f32c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f328:	2302      	movs	r3, #2
 800f32a:	e078      	b.n	800f41e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2201      	movs	r2, #1
 800f330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	68db      	ldr	r3, [r3, #12]
 800f33e:	4313      	orrs	r3, r2
 800f340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	4313      	orrs	r3, r2
 800f34e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	685b      	ldr	r3, [r3, #4]
 800f35a:	4313      	orrs	r3, r2
 800f35c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	4313      	orrs	r3, r2
 800f36a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	691b      	ldr	r3, [r3, #16]
 800f376:	4313      	orrs	r3, r2
 800f378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	695b      	ldr	r3, [r3, #20]
 800f384:	4313      	orrs	r3, r2
 800f386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f392:	4313      	orrs	r3, r2
 800f394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	699b      	ldr	r3, [r3, #24]
 800f3a0:	041b      	lsls	r3, r3, #16
 800f3a2:	4313      	orrs	r3, r2
 800f3a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	69db      	ldr	r3, [r3, #28]
 800f3b0:	4313      	orrs	r3, r2
 800f3b2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	4a1c      	ldr	r2, [pc, #112]	@ (800f42c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	d009      	beq.n	800f3d2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	4a1b      	ldr	r2, [pc, #108]	@ (800f430 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d004      	beq.n	800f3d2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	4a19      	ldr	r2, [pc, #100]	@ (800f434 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	d11c      	bne.n	800f40c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3dc:	051b      	lsls	r3, r3, #20
 800f3de:	4313      	orrs	r3, r2
 800f3e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	6a1b      	ldr	r3, [r3, #32]
 800f3ec:	4313      	orrs	r3, r2
 800f3ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3fa:	4313      	orrs	r3, r2
 800f3fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f408:	4313      	orrs	r3, r2
 800f40a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	68fa      	ldr	r2, [r7, #12]
 800f412:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2200      	movs	r2, #0
 800f418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f41c:	2300      	movs	r3, #0
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3714      	adds	r7, #20
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr
 800f42a:	bf00      	nop
 800f42c:	40012c00 	.word	0x40012c00
 800f430:	40013400 	.word	0x40013400
 800f434:	40015000 	.word	0x40015000

0800f438 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d101      	bne.n	800f44a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f446:	2301      	movs	r3, #1
 800f448:	e042      	b.n	800f4d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f450:	2b00      	cmp	r3, #0
 800f452:	d106      	bne.n	800f462 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2200      	movs	r2, #0
 800f458:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f7f4 fd31 	bl	8003ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2224      	movs	r2, #36	@ 0x24
 800f466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	f022 0201 	bic.w	r2, r2, #1
 800f478:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d002      	beq.n	800f488 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f000 fbb2 	bl	800fbec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f000 f8b3 	bl	800f5f4 <UART_SetConfig>
 800f48e:	4603      	mov	r3, r0
 800f490:	2b01      	cmp	r3, #1
 800f492:	d101      	bne.n	800f498 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f494:	2301      	movs	r3, #1
 800f496:	e01b      	b.n	800f4d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	685a      	ldr	r2, [r3, #4]
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f4a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	689a      	ldr	r2, [r3, #8]
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f4b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	681a      	ldr	r2, [r3, #0]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	f042 0201 	orr.w	r2, r2, #1
 800f4c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f000 fc31 	bl	800fd30 <UART_CheckIdleState>
 800f4ce:	4603      	mov	r3, r0
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3708      	adds	r7, #8
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b08a      	sub	sp, #40	@ 0x28
 800f4dc:	af02      	add	r7, sp, #8
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	603b      	str	r3, [r7, #0]
 800f4e4:	4613      	mov	r3, r2
 800f4e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f4ee:	2b20      	cmp	r3, #32
 800f4f0:	d17b      	bne.n	800f5ea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d002      	beq.n	800f4fe <HAL_UART_Transmit+0x26>
 800f4f8:	88fb      	ldrh	r3, [r7, #6]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d101      	bne.n	800f502 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f4fe:	2301      	movs	r3, #1
 800f500:	e074      	b.n	800f5ec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	2200      	movs	r2, #0
 800f506:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	2221      	movs	r2, #33	@ 0x21
 800f50e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f512:	f7f5 fbaf 	bl	8004c74 <HAL_GetTick>
 800f516:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	88fa      	ldrh	r2, [r7, #6]
 800f51c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	88fa      	ldrh	r2, [r7, #6]
 800f524:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f530:	d108      	bne.n	800f544 <HAL_UART_Transmit+0x6c>
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	691b      	ldr	r3, [r3, #16]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d104      	bne.n	800f544 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f53a:	2300      	movs	r3, #0
 800f53c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	61bb      	str	r3, [r7, #24]
 800f542:	e003      	b.n	800f54c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f548:	2300      	movs	r3, #0
 800f54a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f54c:	e030      	b.n	800f5b0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	9300      	str	r3, [sp, #0]
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	2200      	movs	r2, #0
 800f556:	2180      	movs	r1, #128	@ 0x80
 800f558:	68f8      	ldr	r0, [r7, #12]
 800f55a:	f000 fc93 	bl	800fe84 <UART_WaitOnFlagUntilTimeout>
 800f55e:	4603      	mov	r3, r0
 800f560:	2b00      	cmp	r3, #0
 800f562:	d005      	beq.n	800f570 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2220      	movs	r2, #32
 800f568:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f56c:	2303      	movs	r3, #3
 800f56e:	e03d      	b.n	800f5ec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f570:	69fb      	ldr	r3, [r7, #28]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d10b      	bne.n	800f58e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f576:	69bb      	ldr	r3, [r7, #24]
 800f578:	881b      	ldrh	r3, [r3, #0]
 800f57a:	461a      	mov	r2, r3
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f584:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f586:	69bb      	ldr	r3, [r7, #24]
 800f588:	3302      	adds	r3, #2
 800f58a:	61bb      	str	r3, [r7, #24]
 800f58c:	e007      	b.n	800f59e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	781a      	ldrb	r2, [r3, #0]
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f598:	69fb      	ldr	r3, [r7, #28]
 800f59a:	3301      	adds	r3, #1
 800f59c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f5a4:	b29b      	uxth	r3, r3
 800f5a6:	3b01      	subs	r3, #1
 800f5a8:	b29a      	uxth	r2, r3
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d1c8      	bne.n	800f54e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	9300      	str	r3, [sp, #0]
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	2140      	movs	r1, #64	@ 0x40
 800f5c6:	68f8      	ldr	r0, [r7, #12]
 800f5c8:	f000 fc5c 	bl	800fe84 <UART_WaitOnFlagUntilTimeout>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d005      	beq.n	800f5de <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	2220      	movs	r2, #32
 800f5d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f5da:	2303      	movs	r3, #3
 800f5dc:	e006      	b.n	800f5ec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2220      	movs	r2, #32
 800f5e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	e000      	b.n	800f5ec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f5ea:	2302      	movs	r3, #2
  }
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3720      	adds	r7, #32
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f5f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f5f8:	b08c      	sub	sp, #48	@ 0x30
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f5fe:	2300      	movs	r3, #0
 800f600:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	689a      	ldr	r2, [r3, #8]
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	691b      	ldr	r3, [r3, #16]
 800f60c:	431a      	orrs	r2, r3
 800f60e:	697b      	ldr	r3, [r7, #20]
 800f610:	695b      	ldr	r3, [r3, #20]
 800f612:	431a      	orrs	r2, r3
 800f614:	697b      	ldr	r3, [r7, #20]
 800f616:	69db      	ldr	r3, [r3, #28]
 800f618:	4313      	orrs	r3, r2
 800f61a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	681a      	ldr	r2, [r3, #0]
 800f622:	4baa      	ldr	r3, [pc, #680]	@ (800f8cc <UART_SetConfig+0x2d8>)
 800f624:	4013      	ands	r3, r2
 800f626:	697a      	ldr	r2, [r7, #20]
 800f628:	6812      	ldr	r2, [r2, #0]
 800f62a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f62c:	430b      	orrs	r3, r1
 800f62e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	685b      	ldr	r3, [r3, #4]
 800f636:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	68da      	ldr	r2, [r3, #12]
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	430a      	orrs	r2, r1
 800f644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	699b      	ldr	r3, [r3, #24]
 800f64a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4a9f      	ldr	r2, [pc, #636]	@ (800f8d0 <UART_SetConfig+0x2dc>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d004      	beq.n	800f660 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	6a1b      	ldr	r3, [r3, #32]
 800f65a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f65c:	4313      	orrs	r3, r2
 800f65e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	689b      	ldr	r3, [r3, #8]
 800f666:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800f66a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800f66e:	697a      	ldr	r2, [r7, #20]
 800f670:	6812      	ldr	r2, [r2, #0]
 800f672:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f674:	430b      	orrs	r3, r1
 800f676:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f67e:	f023 010f 	bic.w	r1, r3, #15
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	430a      	orrs	r2, r1
 800f68c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	4a90      	ldr	r2, [pc, #576]	@ (800f8d4 <UART_SetConfig+0x2e0>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d125      	bne.n	800f6e4 <UART_SetConfig+0xf0>
 800f698:	4b8f      	ldr	r3, [pc, #572]	@ (800f8d8 <UART_SetConfig+0x2e4>)
 800f69a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f69e:	f003 0303 	and.w	r3, r3, #3
 800f6a2:	2b03      	cmp	r3, #3
 800f6a4:	d81a      	bhi.n	800f6dc <UART_SetConfig+0xe8>
 800f6a6:	a201      	add	r2, pc, #4	@ (adr r2, 800f6ac <UART_SetConfig+0xb8>)
 800f6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ac:	0800f6bd 	.word	0x0800f6bd
 800f6b0:	0800f6cd 	.word	0x0800f6cd
 800f6b4:	0800f6c5 	.word	0x0800f6c5
 800f6b8:	0800f6d5 	.word	0x0800f6d5
 800f6bc:	2301      	movs	r3, #1
 800f6be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6c2:	e116      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f6c4:	2302      	movs	r3, #2
 800f6c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6ca:	e112      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f6cc:	2304      	movs	r3, #4
 800f6ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6d2:	e10e      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f6d4:	2308      	movs	r3, #8
 800f6d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6da:	e10a      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f6dc:	2310      	movs	r3, #16
 800f6de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6e2:	e106      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4a7c      	ldr	r2, [pc, #496]	@ (800f8dc <UART_SetConfig+0x2e8>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d138      	bne.n	800f760 <UART_SetConfig+0x16c>
 800f6ee:	4b7a      	ldr	r3, [pc, #488]	@ (800f8d8 <UART_SetConfig+0x2e4>)
 800f6f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f6f4:	f003 030c 	and.w	r3, r3, #12
 800f6f8:	2b0c      	cmp	r3, #12
 800f6fa:	d82d      	bhi.n	800f758 <UART_SetConfig+0x164>
 800f6fc:	a201      	add	r2, pc, #4	@ (adr r2, 800f704 <UART_SetConfig+0x110>)
 800f6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f702:	bf00      	nop
 800f704:	0800f739 	.word	0x0800f739
 800f708:	0800f759 	.word	0x0800f759
 800f70c:	0800f759 	.word	0x0800f759
 800f710:	0800f759 	.word	0x0800f759
 800f714:	0800f749 	.word	0x0800f749
 800f718:	0800f759 	.word	0x0800f759
 800f71c:	0800f759 	.word	0x0800f759
 800f720:	0800f759 	.word	0x0800f759
 800f724:	0800f741 	.word	0x0800f741
 800f728:	0800f759 	.word	0x0800f759
 800f72c:	0800f759 	.word	0x0800f759
 800f730:	0800f759 	.word	0x0800f759
 800f734:	0800f751 	.word	0x0800f751
 800f738:	2300      	movs	r3, #0
 800f73a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f73e:	e0d8      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f740:	2302      	movs	r3, #2
 800f742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f746:	e0d4      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f748:	2304      	movs	r3, #4
 800f74a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f74e:	e0d0      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f750:	2308      	movs	r3, #8
 800f752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f756:	e0cc      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f758:	2310      	movs	r3, #16
 800f75a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f75e:	e0c8      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	4a5e      	ldr	r2, [pc, #376]	@ (800f8e0 <UART_SetConfig+0x2ec>)
 800f766:	4293      	cmp	r3, r2
 800f768:	d125      	bne.n	800f7b6 <UART_SetConfig+0x1c2>
 800f76a:	4b5b      	ldr	r3, [pc, #364]	@ (800f8d8 <UART_SetConfig+0x2e4>)
 800f76c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f770:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f774:	2b30      	cmp	r3, #48	@ 0x30
 800f776:	d016      	beq.n	800f7a6 <UART_SetConfig+0x1b2>
 800f778:	2b30      	cmp	r3, #48	@ 0x30
 800f77a:	d818      	bhi.n	800f7ae <UART_SetConfig+0x1ba>
 800f77c:	2b20      	cmp	r3, #32
 800f77e:	d00a      	beq.n	800f796 <UART_SetConfig+0x1a2>
 800f780:	2b20      	cmp	r3, #32
 800f782:	d814      	bhi.n	800f7ae <UART_SetConfig+0x1ba>
 800f784:	2b00      	cmp	r3, #0
 800f786:	d002      	beq.n	800f78e <UART_SetConfig+0x19a>
 800f788:	2b10      	cmp	r3, #16
 800f78a:	d008      	beq.n	800f79e <UART_SetConfig+0x1aa>
 800f78c:	e00f      	b.n	800f7ae <UART_SetConfig+0x1ba>
 800f78e:	2300      	movs	r3, #0
 800f790:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f794:	e0ad      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f796:	2302      	movs	r3, #2
 800f798:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f79c:	e0a9      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f79e:	2304      	movs	r3, #4
 800f7a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f7a4:	e0a5      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f7a6:	2308      	movs	r3, #8
 800f7a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f7ac:	e0a1      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f7ae:	2310      	movs	r3, #16
 800f7b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f7b4:	e09d      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4a4a      	ldr	r2, [pc, #296]	@ (800f8e4 <UART_SetConfig+0x2f0>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d125      	bne.n	800f80c <UART_SetConfig+0x218>
 800f7c0:	4b45      	ldr	r3, [pc, #276]	@ (800f8d8 <UART_SetConfig+0x2e4>)
 800f7c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f7ca:	2bc0      	cmp	r3, #192	@ 0xc0
 800f7cc:	d016      	beq.n	800f7fc <UART_SetConfig+0x208>
 800f7ce:	2bc0      	cmp	r3, #192	@ 0xc0
 800f7d0:	d818      	bhi.n	800f804 <UART_SetConfig+0x210>
 800f7d2:	2b80      	cmp	r3, #128	@ 0x80
 800f7d4:	d00a      	beq.n	800f7ec <UART_SetConfig+0x1f8>
 800f7d6:	2b80      	cmp	r3, #128	@ 0x80
 800f7d8:	d814      	bhi.n	800f804 <UART_SetConfig+0x210>
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d002      	beq.n	800f7e4 <UART_SetConfig+0x1f0>
 800f7de:	2b40      	cmp	r3, #64	@ 0x40
 800f7e0:	d008      	beq.n	800f7f4 <UART_SetConfig+0x200>
 800f7e2:	e00f      	b.n	800f804 <UART_SetConfig+0x210>
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f7ea:	e082      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f7ec:	2302      	movs	r3, #2
 800f7ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f7f2:	e07e      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f7f4:	2304      	movs	r3, #4
 800f7f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f7fa:	e07a      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f7fc:	2308      	movs	r3, #8
 800f7fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f802:	e076      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f804:	2310      	movs	r3, #16
 800f806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f80a:	e072      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	4a35      	ldr	r2, [pc, #212]	@ (800f8e8 <UART_SetConfig+0x2f4>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d12a      	bne.n	800f86c <UART_SetConfig+0x278>
 800f816:	4b30      	ldr	r3, [pc, #192]	@ (800f8d8 <UART_SetConfig+0x2e4>)
 800f818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f81c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f820:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f824:	d01a      	beq.n	800f85c <UART_SetConfig+0x268>
 800f826:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f82a:	d81b      	bhi.n	800f864 <UART_SetConfig+0x270>
 800f82c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f830:	d00c      	beq.n	800f84c <UART_SetConfig+0x258>
 800f832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f836:	d815      	bhi.n	800f864 <UART_SetConfig+0x270>
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d003      	beq.n	800f844 <UART_SetConfig+0x250>
 800f83c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f840:	d008      	beq.n	800f854 <UART_SetConfig+0x260>
 800f842:	e00f      	b.n	800f864 <UART_SetConfig+0x270>
 800f844:	2300      	movs	r3, #0
 800f846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f84a:	e052      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f84c:	2302      	movs	r3, #2
 800f84e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f852:	e04e      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f854:	2304      	movs	r3, #4
 800f856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f85a:	e04a      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f85c:	2308      	movs	r3, #8
 800f85e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f862:	e046      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f864:	2310      	movs	r3, #16
 800f866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f86a:	e042      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	4a17      	ldr	r2, [pc, #92]	@ (800f8d0 <UART_SetConfig+0x2dc>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d13a      	bne.n	800f8ec <UART_SetConfig+0x2f8>
 800f876:	4b18      	ldr	r3, [pc, #96]	@ (800f8d8 <UART_SetConfig+0x2e4>)
 800f878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f87c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f880:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f884:	d01a      	beq.n	800f8bc <UART_SetConfig+0x2c8>
 800f886:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f88a:	d81b      	bhi.n	800f8c4 <UART_SetConfig+0x2d0>
 800f88c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f890:	d00c      	beq.n	800f8ac <UART_SetConfig+0x2b8>
 800f892:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f896:	d815      	bhi.n	800f8c4 <UART_SetConfig+0x2d0>
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d003      	beq.n	800f8a4 <UART_SetConfig+0x2b0>
 800f89c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f8a0:	d008      	beq.n	800f8b4 <UART_SetConfig+0x2c0>
 800f8a2:	e00f      	b.n	800f8c4 <UART_SetConfig+0x2d0>
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f8aa:	e022      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f8ac:	2302      	movs	r3, #2
 800f8ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f8b2:	e01e      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f8b4:	2304      	movs	r3, #4
 800f8b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f8ba:	e01a      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f8bc:	2308      	movs	r3, #8
 800f8be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f8c2:	e016      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f8c4:	2310      	movs	r3, #16
 800f8c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f8ca:	e012      	b.n	800f8f2 <UART_SetConfig+0x2fe>
 800f8cc:	cfff69f3 	.word	0xcfff69f3
 800f8d0:	40008000 	.word	0x40008000
 800f8d4:	40013800 	.word	0x40013800
 800f8d8:	40021000 	.word	0x40021000
 800f8dc:	40004400 	.word	0x40004400
 800f8e0:	40004800 	.word	0x40004800
 800f8e4:	40004c00 	.word	0x40004c00
 800f8e8:	40005000 	.word	0x40005000
 800f8ec:	2310      	movs	r3, #16
 800f8ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	4aae      	ldr	r2, [pc, #696]	@ (800fbb0 <UART_SetConfig+0x5bc>)
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	f040 8097 	bne.w	800fa2c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f8fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f902:	2b08      	cmp	r3, #8
 800f904:	d823      	bhi.n	800f94e <UART_SetConfig+0x35a>
 800f906:	a201      	add	r2, pc, #4	@ (adr r2, 800f90c <UART_SetConfig+0x318>)
 800f908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f90c:	0800f931 	.word	0x0800f931
 800f910:	0800f94f 	.word	0x0800f94f
 800f914:	0800f939 	.word	0x0800f939
 800f918:	0800f94f 	.word	0x0800f94f
 800f91c:	0800f93f 	.word	0x0800f93f
 800f920:	0800f94f 	.word	0x0800f94f
 800f924:	0800f94f 	.word	0x0800f94f
 800f928:	0800f94f 	.word	0x0800f94f
 800f92c:	0800f947 	.word	0x0800f947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f930:	f7fc ff02 	bl	800c738 <HAL_RCC_GetPCLK1Freq>
 800f934:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f936:	e010      	b.n	800f95a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f938:	4b9e      	ldr	r3, [pc, #632]	@ (800fbb4 <UART_SetConfig+0x5c0>)
 800f93a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f93c:	e00d      	b.n	800f95a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f93e:	f7fc fe8d 	bl	800c65c <HAL_RCC_GetSysClockFreq>
 800f942:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f944:	e009      	b.n	800f95a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f94a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f94c:	e005      	b.n	800f95a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800f94e:	2300      	movs	r3, #0
 800f950:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f952:	2301      	movs	r3, #1
 800f954:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f958:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	f000 8130 	beq.w	800fbc2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f962:	697b      	ldr	r3, [r7, #20]
 800f964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f966:	4a94      	ldr	r2, [pc, #592]	@ (800fbb8 <UART_SetConfig+0x5c4>)
 800f968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f96c:	461a      	mov	r2, r3
 800f96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f970:	fbb3 f3f2 	udiv	r3, r3, r2
 800f974:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	685a      	ldr	r2, [r3, #4]
 800f97a:	4613      	mov	r3, r2
 800f97c:	005b      	lsls	r3, r3, #1
 800f97e:	4413      	add	r3, r2
 800f980:	69ba      	ldr	r2, [r7, #24]
 800f982:	429a      	cmp	r2, r3
 800f984:	d305      	bcc.n	800f992 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	685b      	ldr	r3, [r3, #4]
 800f98a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f98c:	69ba      	ldr	r2, [r7, #24]
 800f98e:	429a      	cmp	r2, r3
 800f990:	d903      	bls.n	800f99a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800f992:	2301      	movs	r3, #1
 800f994:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f998:	e113      	b.n	800fbc2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f99c:	2200      	movs	r2, #0
 800f99e:	60bb      	str	r3, [r7, #8]
 800f9a0:	60fa      	str	r2, [r7, #12]
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9a6:	4a84      	ldr	r2, [pc, #528]	@ (800fbb8 <UART_SetConfig+0x5c4>)
 800f9a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f9ac:	b29b      	uxth	r3, r3
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	603b      	str	r3, [r7, #0]
 800f9b2:	607a      	str	r2, [r7, #4]
 800f9b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f9bc:	f7f1 f98c 	bl	8000cd8 <__aeabi_uldivmod>
 800f9c0:	4602      	mov	r2, r0
 800f9c2:	460b      	mov	r3, r1
 800f9c4:	4610      	mov	r0, r2
 800f9c6:	4619      	mov	r1, r3
 800f9c8:	f04f 0200 	mov.w	r2, #0
 800f9cc:	f04f 0300 	mov.w	r3, #0
 800f9d0:	020b      	lsls	r3, r1, #8
 800f9d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f9d6:	0202      	lsls	r2, r0, #8
 800f9d8:	6979      	ldr	r1, [r7, #20]
 800f9da:	6849      	ldr	r1, [r1, #4]
 800f9dc:	0849      	lsrs	r1, r1, #1
 800f9de:	2000      	movs	r0, #0
 800f9e0:	460c      	mov	r4, r1
 800f9e2:	4605      	mov	r5, r0
 800f9e4:	eb12 0804 	adds.w	r8, r2, r4
 800f9e8:	eb43 0905 	adc.w	r9, r3, r5
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	685b      	ldr	r3, [r3, #4]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	469a      	mov	sl, r3
 800f9f4:	4693      	mov	fp, r2
 800f9f6:	4652      	mov	r2, sl
 800f9f8:	465b      	mov	r3, fp
 800f9fa:	4640      	mov	r0, r8
 800f9fc:	4649      	mov	r1, r9
 800f9fe:	f7f1 f96b 	bl	8000cd8 <__aeabi_uldivmod>
 800fa02:	4602      	mov	r2, r0
 800fa04:	460b      	mov	r3, r1
 800fa06:	4613      	mov	r3, r2
 800fa08:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fa0a:	6a3b      	ldr	r3, [r7, #32]
 800fa0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fa10:	d308      	bcc.n	800fa24 <UART_SetConfig+0x430>
 800fa12:	6a3b      	ldr	r3, [r7, #32]
 800fa14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fa18:	d204      	bcs.n	800fa24 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	6a3a      	ldr	r2, [r7, #32]
 800fa20:	60da      	str	r2, [r3, #12]
 800fa22:	e0ce      	b.n	800fbc2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800fa24:	2301      	movs	r3, #1
 800fa26:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800fa2a:	e0ca      	b.n	800fbc2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	69db      	ldr	r3, [r3, #28]
 800fa30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fa34:	d166      	bne.n	800fb04 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800fa36:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800fa3a:	2b08      	cmp	r3, #8
 800fa3c:	d827      	bhi.n	800fa8e <UART_SetConfig+0x49a>
 800fa3e:	a201      	add	r2, pc, #4	@ (adr r2, 800fa44 <UART_SetConfig+0x450>)
 800fa40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa44:	0800fa69 	.word	0x0800fa69
 800fa48:	0800fa71 	.word	0x0800fa71
 800fa4c:	0800fa79 	.word	0x0800fa79
 800fa50:	0800fa8f 	.word	0x0800fa8f
 800fa54:	0800fa7f 	.word	0x0800fa7f
 800fa58:	0800fa8f 	.word	0x0800fa8f
 800fa5c:	0800fa8f 	.word	0x0800fa8f
 800fa60:	0800fa8f 	.word	0x0800fa8f
 800fa64:	0800fa87 	.word	0x0800fa87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fa68:	f7fc fe66 	bl	800c738 <HAL_RCC_GetPCLK1Freq>
 800fa6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fa6e:	e014      	b.n	800fa9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fa70:	f7fc fe78 	bl	800c764 <HAL_RCC_GetPCLK2Freq>
 800fa74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fa76:	e010      	b.n	800fa9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fa78:	4b4e      	ldr	r3, [pc, #312]	@ (800fbb4 <UART_SetConfig+0x5c0>)
 800fa7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800fa7c:	e00d      	b.n	800fa9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fa7e:	f7fc fded 	bl	800c65c <HAL_RCC_GetSysClockFreq>
 800fa82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fa84:	e009      	b.n	800fa9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fa8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800fa8c:	e005      	b.n	800fa9a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800fa92:	2301      	movs	r3, #1
 800fa94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800fa98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fa9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	f000 8090 	beq.w	800fbc2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faa6:	4a44      	ldr	r2, [pc, #272]	@ (800fbb8 <UART_SetConfig+0x5c4>)
 800faa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800faac:	461a      	mov	r2, r3
 800faae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fab0:	fbb3 f3f2 	udiv	r3, r3, r2
 800fab4:	005a      	lsls	r2, r3, #1
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	685b      	ldr	r3, [r3, #4]
 800faba:	085b      	lsrs	r3, r3, #1
 800fabc:	441a      	add	r2, r3
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fac6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fac8:	6a3b      	ldr	r3, [r7, #32]
 800faca:	2b0f      	cmp	r3, #15
 800facc:	d916      	bls.n	800fafc <UART_SetConfig+0x508>
 800face:	6a3b      	ldr	r3, [r7, #32]
 800fad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fad4:	d212      	bcs.n	800fafc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fad6:	6a3b      	ldr	r3, [r7, #32]
 800fad8:	b29b      	uxth	r3, r3
 800fada:	f023 030f 	bic.w	r3, r3, #15
 800fade:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fae0:	6a3b      	ldr	r3, [r7, #32]
 800fae2:	085b      	lsrs	r3, r3, #1
 800fae4:	b29b      	uxth	r3, r3
 800fae6:	f003 0307 	and.w	r3, r3, #7
 800faea:	b29a      	uxth	r2, r3
 800faec:	8bfb      	ldrh	r3, [r7, #30]
 800faee:	4313      	orrs	r3, r2
 800faf0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	8bfa      	ldrh	r2, [r7, #30]
 800faf8:	60da      	str	r2, [r3, #12]
 800fafa:	e062      	b.n	800fbc2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800fafc:	2301      	movs	r3, #1
 800fafe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800fb02:	e05e      	b.n	800fbc2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fb04:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800fb08:	2b08      	cmp	r3, #8
 800fb0a:	d828      	bhi.n	800fb5e <UART_SetConfig+0x56a>
 800fb0c:	a201      	add	r2, pc, #4	@ (adr r2, 800fb14 <UART_SetConfig+0x520>)
 800fb0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb12:	bf00      	nop
 800fb14:	0800fb39 	.word	0x0800fb39
 800fb18:	0800fb41 	.word	0x0800fb41
 800fb1c:	0800fb49 	.word	0x0800fb49
 800fb20:	0800fb5f 	.word	0x0800fb5f
 800fb24:	0800fb4f 	.word	0x0800fb4f
 800fb28:	0800fb5f 	.word	0x0800fb5f
 800fb2c:	0800fb5f 	.word	0x0800fb5f
 800fb30:	0800fb5f 	.word	0x0800fb5f
 800fb34:	0800fb57 	.word	0x0800fb57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fb38:	f7fc fdfe 	bl	800c738 <HAL_RCC_GetPCLK1Freq>
 800fb3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fb3e:	e014      	b.n	800fb6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fb40:	f7fc fe10 	bl	800c764 <HAL_RCC_GetPCLK2Freq>
 800fb44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fb46:	e010      	b.n	800fb6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fb48:	4b1a      	ldr	r3, [pc, #104]	@ (800fbb4 <UART_SetConfig+0x5c0>)
 800fb4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800fb4c:	e00d      	b.n	800fb6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fb4e:	f7fc fd85 	bl	800c65c <HAL_RCC_GetSysClockFreq>
 800fb52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fb54:	e009      	b.n	800fb6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fb5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800fb5c:	e005      	b.n	800fb6a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800fb62:	2301      	movs	r3, #1
 800fb64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800fb68:	bf00      	nop
    }

    if (pclk != 0U)
 800fb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d028      	beq.n	800fbc2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb74:	4a10      	ldr	r2, [pc, #64]	@ (800fbb8 <UART_SetConfig+0x5c4>)
 800fb76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb7e:	fbb3 f2f2 	udiv	r2, r3, r2
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	685b      	ldr	r3, [r3, #4]
 800fb86:	085b      	lsrs	r3, r3, #1
 800fb88:	441a      	add	r2, r3
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	685b      	ldr	r3, [r3, #4]
 800fb8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fb94:	6a3b      	ldr	r3, [r7, #32]
 800fb96:	2b0f      	cmp	r3, #15
 800fb98:	d910      	bls.n	800fbbc <UART_SetConfig+0x5c8>
 800fb9a:	6a3b      	ldr	r3, [r7, #32]
 800fb9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fba0:	d20c      	bcs.n	800fbbc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fba2:	6a3b      	ldr	r3, [r7, #32]
 800fba4:	b29a      	uxth	r2, r3
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	60da      	str	r2, [r3, #12]
 800fbac:	e009      	b.n	800fbc2 <UART_SetConfig+0x5ce>
 800fbae:	bf00      	nop
 800fbb0:	40008000 	.word	0x40008000
 800fbb4:	00f42400 	.word	0x00f42400
 800fbb8:	080277d0 	.word	0x080277d0
      }
      else
      {
        ret = HAL_ERROR;
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	2201      	movs	r2, #1
 800fbce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fbde:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3730      	adds	r7, #48	@ 0x30
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fbec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b083      	sub	sp, #12
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbf8:	f003 0308 	and.w	r3, r3, #8
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d00a      	beq.n	800fc16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	685b      	ldr	r3, [r3, #4]
 800fc06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	430a      	orrs	r2, r1
 800fc14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc1a:	f003 0301 	and.w	r3, r3, #1
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d00a      	beq.n	800fc38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	685b      	ldr	r3, [r3, #4]
 800fc28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	430a      	orrs	r2, r1
 800fc36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc3c:	f003 0302 	and.w	r3, r3, #2
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d00a      	beq.n	800fc5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	430a      	orrs	r2, r1
 800fc58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc5e:	f003 0304 	and.w	r3, r3, #4
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d00a      	beq.n	800fc7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	685b      	ldr	r3, [r3, #4]
 800fc6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	430a      	orrs	r2, r1
 800fc7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc80:	f003 0310 	and.w	r3, r3, #16
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d00a      	beq.n	800fc9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	689b      	ldr	r3, [r3, #8]
 800fc8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	430a      	orrs	r2, r1
 800fc9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fca2:	f003 0320 	and.w	r3, r3, #32
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d00a      	beq.n	800fcc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	689b      	ldr	r3, [r3, #8]
 800fcb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	430a      	orrs	r2, r1
 800fcbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d01a      	beq.n	800fd02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	430a      	orrs	r2, r1
 800fce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fce6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fcea:	d10a      	bne.n	800fd02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	685b      	ldr	r3, [r3, #4]
 800fcf2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	430a      	orrs	r2, r1
 800fd00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d00a      	beq.n	800fd24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	685b      	ldr	r3, [r3, #4]
 800fd14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	430a      	orrs	r2, r1
 800fd22:	605a      	str	r2, [r3, #4]
  }
}
 800fd24:	bf00      	nop
 800fd26:	370c      	adds	r7, #12
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2e:	4770      	bx	lr

0800fd30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b098      	sub	sp, #96	@ 0x60
 800fd34:	af02      	add	r7, sp, #8
 800fd36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fd40:	f7f4 ff98 	bl	8004c74 <HAL_GetTick>
 800fd44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f003 0308 	and.w	r3, r3, #8
 800fd50:	2b08      	cmp	r3, #8
 800fd52:	d12f      	bne.n	800fdb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fd54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fd58:	9300      	str	r3, [sp, #0]
 800fd5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f000 f88e 	bl	800fe84 <UART_WaitOnFlagUntilTimeout>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d022      	beq.n	800fdb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd76:	e853 3f00 	ldrex	r3, [r3]
 800fd7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fd7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fd82:	653b      	str	r3, [r7, #80]	@ 0x50
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	461a      	mov	r2, r3
 800fd8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fd8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800fd8e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fd92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fd94:	e841 2300 	strex	r3, r2, [r1]
 800fd98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fd9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d1e6      	bne.n	800fd6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2220      	movs	r2, #32
 800fda4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fdb0:	2303      	movs	r3, #3
 800fdb2:	e063      	b.n	800fe7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	f003 0304 	and.w	r3, r3, #4
 800fdbe:	2b04      	cmp	r3, #4
 800fdc0:	d149      	bne.n	800fe56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fdc2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fdc6:	9300      	str	r3, [sp, #0]
 800fdc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fdca:	2200      	movs	r2, #0
 800fdcc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f000 f857 	bl	800fe84 <UART_WaitOnFlagUntilTimeout>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d03c      	beq.n	800fe56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fde4:	e853 3f00 	ldrex	r3, [r3]
 800fde8:	623b      	str	r3, [r7, #32]
   return(result);
 800fdea:	6a3b      	ldr	r3, [r7, #32]
 800fdec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fdf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fdfa:	633b      	str	r3, [r7, #48]	@ 0x30
 800fdfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fe00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe02:	e841 2300 	strex	r3, r2, [r1]
 800fe06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fe08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d1e6      	bne.n	800fddc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	3308      	adds	r3, #8
 800fe14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	e853 3f00 	ldrex	r3, [r3]
 800fe1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	f023 0301 	bic.w	r3, r3, #1
 800fe24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	3308      	adds	r3, #8
 800fe2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fe2e:	61fa      	str	r2, [r7, #28]
 800fe30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe32:	69b9      	ldr	r1, [r7, #24]
 800fe34:	69fa      	ldr	r2, [r7, #28]
 800fe36:	e841 2300 	strex	r3, r2, [r1]
 800fe3a:	617b      	str	r3, [r7, #20]
   return(result);
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d1e5      	bne.n	800fe0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2220      	movs	r2, #32
 800fe46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fe52:	2303      	movs	r3, #3
 800fe54:	e012      	b.n	800fe7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2220      	movs	r2, #32
 800fe5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2220      	movs	r2, #32
 800fe62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2200      	movs	r2, #0
 800fe76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fe7a:	2300      	movs	r3, #0
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3758      	adds	r7, #88	@ 0x58
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	603b      	str	r3, [r7, #0]
 800fe90:	4613      	mov	r3, r2
 800fe92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe94:	e04f      	b.n	800ff36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fe96:	69bb      	ldr	r3, [r7, #24]
 800fe98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe9c:	d04b      	beq.n	800ff36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fe9e:	f7f4 fee9 	bl	8004c74 <HAL_GetTick>
 800fea2:	4602      	mov	r2, r0
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	1ad3      	subs	r3, r2, r3
 800fea8:	69ba      	ldr	r2, [r7, #24]
 800feaa:	429a      	cmp	r2, r3
 800feac:	d302      	bcc.n	800feb4 <UART_WaitOnFlagUntilTimeout+0x30>
 800feae:	69bb      	ldr	r3, [r7, #24]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d101      	bne.n	800feb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800feb4:	2303      	movs	r3, #3
 800feb6:	e04e      	b.n	800ff56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	f003 0304 	and.w	r3, r3, #4
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d037      	beq.n	800ff36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	2b80      	cmp	r3, #128	@ 0x80
 800feca:	d034      	beq.n	800ff36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	2b40      	cmp	r3, #64	@ 0x40
 800fed0:	d031      	beq.n	800ff36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	69db      	ldr	r3, [r3, #28]
 800fed8:	f003 0308 	and.w	r3, r3, #8
 800fedc:	2b08      	cmp	r3, #8
 800fede:	d110      	bne.n	800ff02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	2208      	movs	r2, #8
 800fee6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fee8:	68f8      	ldr	r0, [r7, #12]
 800feea:	f000 f838 	bl	800ff5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	2208      	movs	r2, #8
 800fef2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	2200      	movs	r2, #0
 800fefa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fefe:	2301      	movs	r3, #1
 800ff00:	e029      	b.n	800ff56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	69db      	ldr	r3, [r3, #28]
 800ff08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ff0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ff10:	d111      	bne.n	800ff36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ff1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ff1c:	68f8      	ldr	r0, [r7, #12]
 800ff1e:	f000 f81e 	bl	800ff5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	2220      	movs	r2, #32
 800ff26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ff32:	2303      	movs	r3, #3
 800ff34:	e00f      	b.n	800ff56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	69da      	ldr	r2, [r3, #28]
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	4013      	ands	r3, r2
 800ff40:	68ba      	ldr	r2, [r7, #8]
 800ff42:	429a      	cmp	r2, r3
 800ff44:	bf0c      	ite	eq
 800ff46:	2301      	moveq	r3, #1
 800ff48:	2300      	movne	r3, #0
 800ff4a:	b2db      	uxtb	r3, r3
 800ff4c:	461a      	mov	r2, r3
 800ff4e:	79fb      	ldrb	r3, [r7, #7]
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d0a0      	beq.n	800fe96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ff54:	2300      	movs	r3, #0
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3710      	adds	r7, #16
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}

0800ff5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ff5e:	b480      	push	{r7}
 800ff60:	b095      	sub	sp, #84	@ 0x54
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff6e:	e853 3f00 	ldrex	r3, [r3]
 800ff72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ff74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ff7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	461a      	mov	r2, r3
 800ff82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff84:	643b      	str	r3, [r7, #64]	@ 0x40
 800ff86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ff8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ff8c:	e841 2300 	strex	r3, r2, [r1]
 800ff90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ff92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d1e6      	bne.n	800ff66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	3308      	adds	r3, #8
 800ff9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffa0:	6a3b      	ldr	r3, [r7, #32]
 800ffa2:	e853 3f00 	ldrex	r3, [r3]
 800ffa6:	61fb      	str	r3, [r7, #28]
   return(result);
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ffae:	f023 0301 	bic.w	r3, r3, #1
 800ffb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	3308      	adds	r3, #8
 800ffba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ffbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ffbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ffc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ffc4:	e841 2300 	strex	r3, r2, [r1]
 800ffc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ffca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d1e3      	bne.n	800ff98 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ffd4:	2b01      	cmp	r3, #1
 800ffd6:	d118      	bne.n	801000a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	e853 3f00 	ldrex	r3, [r3]
 800ffe4:	60bb      	str	r3, [r7, #8]
   return(result);
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	f023 0310 	bic.w	r3, r3, #16
 800ffec:	647b      	str	r3, [r7, #68]	@ 0x44
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	461a      	mov	r2, r3
 800fff4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fff6:	61bb      	str	r3, [r7, #24]
 800fff8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fffa:	6979      	ldr	r1, [r7, #20]
 800fffc:	69ba      	ldr	r2, [r7, #24]
 800fffe:	e841 2300 	strex	r3, r2, [r1]
 8010002:	613b      	str	r3, [r7, #16]
   return(result);
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d1e6      	bne.n	800ffd8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2220      	movs	r2, #32
 801000e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2200      	movs	r2, #0
 8010016:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2200      	movs	r2, #0
 801001c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801001e:	bf00      	nop
 8010020:	3754      	adds	r7, #84	@ 0x54
 8010022:	46bd      	mov	sp, r7
 8010024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010028:	4770      	bx	lr

0801002a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801002a:	b480      	push	{r7}
 801002c:	b085      	sub	sp, #20
 801002e:	af00      	add	r7, sp, #0
 8010030:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010038:	2b01      	cmp	r3, #1
 801003a:	d101      	bne.n	8010040 <HAL_UARTEx_DisableFifoMode+0x16>
 801003c:	2302      	movs	r3, #2
 801003e:	e027      	b.n	8010090 <HAL_UARTEx_DisableFifoMode+0x66>
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2201      	movs	r2, #1
 8010044:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2224      	movs	r2, #36	@ 0x24
 801004c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	681a      	ldr	r2, [r3, #0]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	f022 0201 	bic.w	r2, r2, #1
 8010066:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801006e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2200      	movs	r2, #0
 8010074:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	68fa      	ldr	r2, [r7, #12]
 801007c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2220      	movs	r2, #32
 8010082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2200      	movs	r2, #0
 801008a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801008e:	2300      	movs	r3, #0
}
 8010090:	4618      	mov	r0, r3
 8010092:	3714      	adds	r7, #20
 8010094:	46bd      	mov	sp, r7
 8010096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009a:	4770      	bx	lr

0801009c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b084      	sub	sp, #16
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80100ac:	2b01      	cmp	r3, #1
 80100ae:	d101      	bne.n	80100b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80100b0:	2302      	movs	r3, #2
 80100b2:	e02d      	b.n	8010110 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2201      	movs	r2, #1
 80100b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2224      	movs	r2, #36	@ 0x24
 80100c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	681a      	ldr	r2, [r3, #0]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	f022 0201 	bic.w	r2, r2, #1
 80100da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	689b      	ldr	r3, [r3, #8]
 80100e2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	683a      	ldr	r2, [r7, #0]
 80100ec:	430a      	orrs	r2, r1
 80100ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f000 f84f 	bl	8010194 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	68fa      	ldr	r2, [r7, #12]
 80100fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2220      	movs	r2, #32
 8010102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2200      	movs	r2, #0
 801010a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801010e:	2300      	movs	r3, #0
}
 8010110:	4618      	mov	r0, r3
 8010112:	3710      	adds	r7, #16
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}

08010118 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010128:	2b01      	cmp	r3, #1
 801012a:	d101      	bne.n	8010130 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801012c:	2302      	movs	r3, #2
 801012e:	e02d      	b.n	801018c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2201      	movs	r2, #1
 8010134:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2224      	movs	r2, #36	@ 0x24
 801013c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	681a      	ldr	r2, [r3, #0]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f022 0201 	bic.w	r2, r2, #1
 8010156:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	689b      	ldr	r3, [r3, #8]
 801015e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	683a      	ldr	r2, [r7, #0]
 8010168:	430a      	orrs	r2, r1
 801016a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f000 f811 	bl	8010194 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	68fa      	ldr	r2, [r7, #12]
 8010178:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2220      	movs	r2, #32
 801017e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2200      	movs	r2, #0
 8010186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801018a:	2300      	movs	r3, #0
}
 801018c:	4618      	mov	r0, r3
 801018e:	3710      	adds	r7, #16
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010194:	b480      	push	{r7}
 8010196:	b085      	sub	sp, #20
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d108      	bne.n	80101b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2201      	movs	r2, #1
 80101a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2201      	movs	r2, #1
 80101b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80101b4:	e031      	b.n	801021a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80101b6:	2308      	movs	r3, #8
 80101b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80101ba:	2308      	movs	r3, #8
 80101bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	689b      	ldr	r3, [r3, #8]
 80101c4:	0e5b      	lsrs	r3, r3, #25
 80101c6:	b2db      	uxtb	r3, r3
 80101c8:	f003 0307 	and.w	r3, r3, #7
 80101cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	689b      	ldr	r3, [r3, #8]
 80101d4:	0f5b      	lsrs	r3, r3, #29
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	f003 0307 	and.w	r3, r3, #7
 80101dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80101de:	7bbb      	ldrb	r3, [r7, #14]
 80101e0:	7b3a      	ldrb	r2, [r7, #12]
 80101e2:	4911      	ldr	r1, [pc, #68]	@ (8010228 <UARTEx_SetNbDataToProcess+0x94>)
 80101e4:	5c8a      	ldrb	r2, [r1, r2]
 80101e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80101ea:	7b3a      	ldrb	r2, [r7, #12]
 80101ec:	490f      	ldr	r1, [pc, #60]	@ (801022c <UARTEx_SetNbDataToProcess+0x98>)
 80101ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80101f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80101f4:	b29a      	uxth	r2, r3
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80101fc:	7bfb      	ldrb	r3, [r7, #15]
 80101fe:	7b7a      	ldrb	r2, [r7, #13]
 8010200:	4909      	ldr	r1, [pc, #36]	@ (8010228 <UARTEx_SetNbDataToProcess+0x94>)
 8010202:	5c8a      	ldrb	r2, [r1, r2]
 8010204:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010208:	7b7a      	ldrb	r2, [r7, #13]
 801020a:	4908      	ldr	r1, [pc, #32]	@ (801022c <UARTEx_SetNbDataToProcess+0x98>)
 801020c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801020e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010212:	b29a      	uxth	r2, r3
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801021a:	bf00      	nop
 801021c:	3714      	adds	r7, #20
 801021e:	46bd      	mov	sp, r7
 8010220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010224:	4770      	bx	lr
 8010226:	bf00      	nop
 8010228:	080277e8 	.word	0x080277e8
 801022c:	080277f0 	.word	0x080277f0

08010230 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8010230:	b480      	push	{r7}
 8010232:	b085      	sub	sp, #20
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2200      	movs	r2, #0
 801023c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010240:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8010244:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	b29a      	uxth	r2, r3
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8010250:	2300      	movs	r3, #0
}
 8010252:	4618      	mov	r0, r3
 8010254:	3714      	adds	r7, #20
 8010256:	46bd      	mov	sp, r7
 8010258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025c:	4770      	bx	lr

0801025e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801025e:	b480      	push	{r7}
 8010260:	b085      	sub	sp, #20
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010266:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 801026a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8010272:	b29a      	uxth	r2, r3
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	b29b      	uxth	r3, r3
 8010278:	43db      	mvns	r3, r3
 801027a:	b29b      	uxth	r3, r3
 801027c:	4013      	ands	r3, r2
 801027e:	b29a      	uxth	r2, r3
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8010286:	2300      	movs	r3, #0
}
 8010288:	4618      	mov	r0, r3
 801028a:	3714      	adds	r7, #20
 801028c:	46bd      	mov	sp, r7
 801028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010292:	4770      	bx	lr

08010294 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8010294:	b480      	push	{r7}
 8010296:	b085      	sub	sp, #20
 8010298:	af00      	add	r7, sp, #0
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	1d3b      	adds	r3, r7, #4
 801029e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	2201      	movs	r2, #1
 80102a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	2200      	movs	r2, #0
 80102ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	2200      	movs	r2, #0
 80102b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	2200      	movs	r2, #0
 80102be:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80102c2:	2300      	movs	r3, #0
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	3714      	adds	r7, #20
 80102c8:	46bd      	mov	sp, r7
 80102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ce:	4770      	bx	lr

080102d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80102d0:	b480      	push	{r7}
 80102d2:	b0a7      	sub	sp, #156	@ 0x9c
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
 80102d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80102da:	2300      	movs	r3, #0
 80102dc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80102e0:	687a      	ldr	r2, [r7, #4]
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	009b      	lsls	r3, r3, #2
 80102e8:	4413      	add	r3, r2
 80102ea:	881b      	ldrh	r3, [r3, #0]
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80102f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80102f6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	78db      	ldrb	r3, [r3, #3]
 80102fe:	2b03      	cmp	r3, #3
 8010300:	d81f      	bhi.n	8010342 <USB_ActivateEndpoint+0x72>
 8010302:	a201      	add	r2, pc, #4	@ (adr r2, 8010308 <USB_ActivateEndpoint+0x38>)
 8010304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010308:	08010319 	.word	0x08010319
 801030c:	08010335 	.word	0x08010335
 8010310:	0801034b 	.word	0x0801034b
 8010314:	08010327 	.word	0x08010327
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8010318:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 801031c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010320:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8010324:	e012      	b.n	801034c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8010326:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 801032a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 801032e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8010332:	e00b      	b.n	801034c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8010334:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8010338:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801033c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8010340:	e004      	b.n	801034c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8010342:	2301      	movs	r3, #1
 8010344:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8010348:	e000      	b.n	801034c <USB_ActivateEndpoint+0x7c>
      break;
 801034a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801034c:	687a      	ldr	r2, [r7, #4]
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	781b      	ldrb	r3, [r3, #0]
 8010352:	009b      	lsls	r3, r3, #2
 8010354:	441a      	add	r2, r3
 8010356:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 801035a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801035e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010362:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801036a:	b29b      	uxth	r3, r3
 801036c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801036e:	687a      	ldr	r2, [r7, #4]
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	781b      	ldrb	r3, [r3, #0]
 8010374:	009b      	lsls	r3, r3, #2
 8010376:	4413      	add	r3, r2
 8010378:	881b      	ldrh	r3, [r3, #0]
 801037a:	b29b      	uxth	r3, r3
 801037c:	b21b      	sxth	r3, r3
 801037e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010386:	b21a      	sxth	r2, r3
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	781b      	ldrb	r3, [r3, #0]
 801038c:	b21b      	sxth	r3, r3
 801038e:	4313      	orrs	r3, r2
 8010390:	b21b      	sxth	r3, r3
 8010392:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8010396:	687a      	ldr	r2, [r7, #4]
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	009b      	lsls	r3, r3, #2
 801039e:	441a      	add	r2, r3
 80103a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80103a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80103a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80103ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80103b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	7b1b      	ldrb	r3, [r3, #12]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	f040 8180 	bne.w	80106c2 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	785b      	ldrb	r3, [r3, #1]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	f000 8084 	beq.w	80104d4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	61bb      	str	r3, [r7, #24]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80103d6:	b29b      	uxth	r3, r3
 80103d8:	461a      	mov	r2, r3
 80103da:	69bb      	ldr	r3, [r7, #24]
 80103dc:	4413      	add	r3, r2
 80103de:	61bb      	str	r3, [r7, #24]
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	781b      	ldrb	r3, [r3, #0]
 80103e4:	00da      	lsls	r2, r3, #3
 80103e6:	69bb      	ldr	r3, [r7, #24]
 80103e8:	4413      	add	r3, r2
 80103ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80103ee:	617b      	str	r3, [r7, #20]
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	88db      	ldrh	r3, [r3, #6]
 80103f4:	085b      	lsrs	r3, r3, #1
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	005b      	lsls	r3, r3, #1
 80103fa:	b29a      	uxth	r2, r3
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010400:	687a      	ldr	r2, [r7, #4]
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	781b      	ldrb	r3, [r3, #0]
 8010406:	009b      	lsls	r3, r3, #2
 8010408:	4413      	add	r3, r2
 801040a:	881b      	ldrh	r3, [r3, #0]
 801040c:	827b      	strh	r3, [r7, #18]
 801040e:	8a7b      	ldrh	r3, [r7, #18]
 8010410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010414:	2b00      	cmp	r3, #0
 8010416:	d01b      	beq.n	8010450 <USB_ActivateEndpoint+0x180>
 8010418:	687a      	ldr	r2, [r7, #4]
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	781b      	ldrb	r3, [r3, #0]
 801041e:	009b      	lsls	r3, r3, #2
 8010420:	4413      	add	r3, r2
 8010422:	881b      	ldrh	r3, [r3, #0]
 8010424:	b29b      	uxth	r3, r3
 8010426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801042a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801042e:	823b      	strh	r3, [r7, #16]
 8010430:	687a      	ldr	r2, [r7, #4]
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	781b      	ldrb	r3, [r3, #0]
 8010436:	009b      	lsls	r3, r3, #2
 8010438:	441a      	add	r2, r3
 801043a:	8a3b      	ldrh	r3, [r7, #16]
 801043c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010440:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010444:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010448:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801044c:	b29b      	uxth	r3, r3
 801044e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	78db      	ldrb	r3, [r3, #3]
 8010454:	2b01      	cmp	r3, #1
 8010456:	d020      	beq.n	801049a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010458:	687a      	ldr	r2, [r7, #4]
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	781b      	ldrb	r3, [r3, #0]
 801045e:	009b      	lsls	r3, r3, #2
 8010460:	4413      	add	r3, r2
 8010462:	881b      	ldrh	r3, [r3, #0]
 8010464:	b29b      	uxth	r3, r3
 8010466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801046a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801046e:	81bb      	strh	r3, [r7, #12]
 8010470:	89bb      	ldrh	r3, [r7, #12]
 8010472:	f083 0320 	eor.w	r3, r3, #32
 8010476:	81bb      	strh	r3, [r7, #12]
 8010478:	687a      	ldr	r2, [r7, #4]
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	009b      	lsls	r3, r3, #2
 8010480:	441a      	add	r2, r3
 8010482:	89bb      	ldrh	r3, [r7, #12]
 8010484:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010488:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801048c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010494:	b29b      	uxth	r3, r3
 8010496:	8013      	strh	r3, [r2, #0]
 8010498:	e3f9      	b.n	8010c8e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801049a:	687a      	ldr	r2, [r7, #4]
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	009b      	lsls	r3, r3, #2
 80104a2:	4413      	add	r3, r2
 80104a4:	881b      	ldrh	r3, [r3, #0]
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80104ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80104b0:	81fb      	strh	r3, [r7, #14]
 80104b2:	687a      	ldr	r2, [r7, #4]
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	781b      	ldrb	r3, [r3, #0]
 80104b8:	009b      	lsls	r3, r3, #2
 80104ba:	441a      	add	r2, r3
 80104bc:	89fb      	ldrh	r3, [r7, #14]
 80104be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80104c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80104c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80104ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104ce:	b29b      	uxth	r3, r3
 80104d0:	8013      	strh	r3, [r2, #0]
 80104d2:	e3dc      	b.n	8010c8e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80104de:	b29b      	uxth	r3, r3
 80104e0:	461a      	mov	r2, r3
 80104e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104e4:	4413      	add	r3, r2
 80104e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	781b      	ldrb	r3, [r3, #0]
 80104ec:	00da      	lsls	r2, r3, #3
 80104ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104f0:	4413      	add	r3, r2
 80104f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80104f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	88db      	ldrh	r3, [r3, #6]
 80104fc:	085b      	lsrs	r3, r3, #1
 80104fe:	b29b      	uxth	r3, r3
 8010500:	005b      	lsls	r3, r3, #1
 8010502:	b29a      	uxth	r2, r3
 8010504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010506:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010512:	b29b      	uxth	r3, r3
 8010514:	461a      	mov	r2, r3
 8010516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010518:	4413      	add	r3, r2
 801051a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	781b      	ldrb	r3, [r3, #0]
 8010520:	00da      	lsls	r2, r3, #3
 8010522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010524:	4413      	add	r3, r2
 8010526:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801052a:	627b      	str	r3, [r7, #36]	@ 0x24
 801052c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801052e:	881b      	ldrh	r3, [r3, #0]
 8010530:	b29b      	uxth	r3, r3
 8010532:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010536:	b29a      	uxth	r2, r3
 8010538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801053a:	801a      	strh	r2, [r3, #0]
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	691b      	ldr	r3, [r3, #16]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d10a      	bne.n	801055a <USB_ActivateEndpoint+0x28a>
 8010544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010546:	881b      	ldrh	r3, [r3, #0]
 8010548:	b29b      	uxth	r3, r3
 801054a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801054e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010552:	b29a      	uxth	r2, r3
 8010554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010556:	801a      	strh	r2, [r3, #0]
 8010558:	e041      	b.n	80105de <USB_ActivateEndpoint+0x30e>
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	691b      	ldr	r3, [r3, #16]
 801055e:	2b3e      	cmp	r3, #62	@ 0x3e
 8010560:	d81c      	bhi.n	801059c <USB_ActivateEndpoint+0x2cc>
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	691b      	ldr	r3, [r3, #16]
 8010566:	085b      	lsrs	r3, r3, #1
 8010568:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	691b      	ldr	r3, [r3, #16]
 8010570:	f003 0301 	and.w	r3, r3, #1
 8010574:	2b00      	cmp	r3, #0
 8010576:	d004      	beq.n	8010582 <USB_ActivateEndpoint+0x2b2>
 8010578:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801057c:	3301      	adds	r3, #1
 801057e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010584:	881b      	ldrh	r3, [r3, #0]
 8010586:	b29a      	uxth	r2, r3
 8010588:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801058c:	b29b      	uxth	r3, r3
 801058e:	029b      	lsls	r3, r3, #10
 8010590:	b29b      	uxth	r3, r3
 8010592:	4313      	orrs	r3, r2
 8010594:	b29a      	uxth	r2, r3
 8010596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010598:	801a      	strh	r2, [r3, #0]
 801059a:	e020      	b.n	80105de <USB_ActivateEndpoint+0x30e>
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	691b      	ldr	r3, [r3, #16]
 80105a0:	095b      	lsrs	r3, r3, #5
 80105a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	691b      	ldr	r3, [r3, #16]
 80105aa:	f003 031f 	and.w	r3, r3, #31
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d104      	bne.n	80105bc <USB_ActivateEndpoint+0x2ec>
 80105b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80105b6:	3b01      	subs	r3, #1
 80105b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80105bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105be:	881b      	ldrh	r3, [r3, #0]
 80105c0:	b29a      	uxth	r2, r3
 80105c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	029b      	lsls	r3, r3, #10
 80105ca:	b29b      	uxth	r3, r3
 80105cc:	4313      	orrs	r3, r2
 80105ce:	b29b      	uxth	r3, r3
 80105d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80105d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80105d8:	b29a      	uxth	r2, r3
 80105da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	781b      	ldrb	r3, [r3, #0]
 80105e4:	009b      	lsls	r3, r3, #2
 80105e6:	4413      	add	r3, r2
 80105e8:	881b      	ldrh	r3, [r3, #0]
 80105ea:	847b      	strh	r3, [r7, #34]	@ 0x22
 80105ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80105ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d01b      	beq.n	801062e <USB_ActivateEndpoint+0x35e>
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	009b      	lsls	r3, r3, #2
 80105fe:	4413      	add	r3, r2
 8010600:	881b      	ldrh	r3, [r3, #0]
 8010602:	b29b      	uxth	r3, r3
 8010604:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801060c:	843b      	strh	r3, [r7, #32]
 801060e:	687a      	ldr	r2, [r7, #4]
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	781b      	ldrb	r3, [r3, #0]
 8010614:	009b      	lsls	r3, r3, #2
 8010616:	441a      	add	r2, r3
 8010618:	8c3b      	ldrh	r3, [r7, #32]
 801061a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801061e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010622:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801062a:	b29b      	uxth	r3, r3
 801062c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	781b      	ldrb	r3, [r3, #0]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d124      	bne.n	8010680 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010636:	687a      	ldr	r2, [r7, #4]
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	009b      	lsls	r3, r3, #2
 801063e:	4413      	add	r3, r2
 8010640:	881b      	ldrh	r3, [r3, #0]
 8010642:	b29b      	uxth	r3, r3
 8010644:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801064c:	83bb      	strh	r3, [r7, #28]
 801064e:	8bbb      	ldrh	r3, [r7, #28]
 8010650:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8010654:	83bb      	strh	r3, [r7, #28]
 8010656:	8bbb      	ldrh	r3, [r7, #28]
 8010658:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801065c:	83bb      	strh	r3, [r7, #28]
 801065e:	687a      	ldr	r2, [r7, #4]
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	781b      	ldrb	r3, [r3, #0]
 8010664:	009b      	lsls	r3, r3, #2
 8010666:	441a      	add	r2, r3
 8010668:	8bbb      	ldrh	r3, [r7, #28]
 801066a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801066e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801067a:	b29b      	uxth	r3, r3
 801067c:	8013      	strh	r3, [r2, #0]
 801067e:	e306      	b.n	8010c8e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8010680:	687a      	ldr	r2, [r7, #4]
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	781b      	ldrb	r3, [r3, #0]
 8010686:	009b      	lsls	r3, r3, #2
 8010688:	4413      	add	r3, r2
 801068a:	881b      	ldrh	r3, [r3, #0]
 801068c:	b29b      	uxth	r3, r3
 801068e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010696:	83fb      	strh	r3, [r7, #30]
 8010698:	8bfb      	ldrh	r3, [r7, #30]
 801069a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801069e:	83fb      	strh	r3, [r7, #30]
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	781b      	ldrb	r3, [r3, #0]
 80106a6:	009b      	lsls	r3, r3, #2
 80106a8:	441a      	add	r2, r3
 80106aa:	8bfb      	ldrh	r3, [r7, #30]
 80106ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80106b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80106b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80106b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106bc:	b29b      	uxth	r3, r3
 80106be:	8013      	strh	r3, [r2, #0]
 80106c0:	e2e5      	b.n	8010c8e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	78db      	ldrb	r3, [r3, #3]
 80106c6:	2b02      	cmp	r3, #2
 80106c8:	d11e      	bne.n	8010708 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80106ca:	687a      	ldr	r2, [r7, #4]
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	009b      	lsls	r3, r3, #2
 80106d2:	4413      	add	r3, r2
 80106d4:	881b      	ldrh	r3, [r3, #0]
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80106dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80106e0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80106e4:	687a      	ldr	r2, [r7, #4]
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	781b      	ldrb	r3, [r3, #0]
 80106ea:	009b      	lsls	r3, r3, #2
 80106ec:	441a      	add	r2, r3
 80106ee:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80106f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80106f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80106fa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80106fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010702:	b29b      	uxth	r3, r3
 8010704:	8013      	strh	r3, [r2, #0]
 8010706:	e01d      	b.n	8010744 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8010708:	687a      	ldr	r2, [r7, #4]
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	781b      	ldrb	r3, [r3, #0]
 801070e:	009b      	lsls	r3, r3, #2
 8010710:	4413      	add	r3, r2
 8010712:	881b      	ldrh	r3, [r3, #0]
 8010714:	b29b      	uxth	r3, r3
 8010716:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 801071a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801071e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8010722:	687a      	ldr	r2, [r7, #4]
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	781b      	ldrb	r3, [r3, #0]
 8010728:	009b      	lsls	r3, r3, #2
 801072a:	441a      	add	r2, r3
 801072c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8010730:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010734:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010738:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801073c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010740:	b29b      	uxth	r3, r3
 8010742:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801074e:	b29b      	uxth	r3, r3
 8010750:	461a      	mov	r2, r3
 8010752:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010754:	4413      	add	r3, r2
 8010756:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	00da      	lsls	r2, r3, #3
 801075e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010760:	4413      	add	r3, r2
 8010762:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010766:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	891b      	ldrh	r3, [r3, #8]
 801076c:	085b      	lsrs	r3, r3, #1
 801076e:	b29b      	uxth	r3, r3
 8010770:	005b      	lsls	r3, r3, #1
 8010772:	b29a      	uxth	r2, r3
 8010774:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010776:	801a      	strh	r2, [r3, #0]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	677b      	str	r3, [r7, #116]	@ 0x74
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010782:	b29b      	uxth	r3, r3
 8010784:	461a      	mov	r2, r3
 8010786:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010788:	4413      	add	r3, r2
 801078a:	677b      	str	r3, [r7, #116]	@ 0x74
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	781b      	ldrb	r3, [r3, #0]
 8010790:	00da      	lsls	r2, r3, #3
 8010792:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010794:	4413      	add	r3, r2
 8010796:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 801079a:	673b      	str	r3, [r7, #112]	@ 0x70
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	895b      	ldrh	r3, [r3, #10]
 80107a0:	085b      	lsrs	r3, r3, #1
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	005b      	lsls	r3, r3, #1
 80107a6:	b29a      	uxth	r2, r3
 80107a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80107aa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	785b      	ldrb	r3, [r3, #1]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	f040 81af 	bne.w	8010b14 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80107b6:	687a      	ldr	r2, [r7, #4]
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	009b      	lsls	r3, r3, #2
 80107be:	4413      	add	r3, r2
 80107c0:	881b      	ldrh	r3, [r3, #0]
 80107c2:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80107c6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80107ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d01d      	beq.n	801080e <USB_ActivateEndpoint+0x53e>
 80107d2:	687a      	ldr	r2, [r7, #4]
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	009b      	lsls	r3, r3, #2
 80107da:	4413      	add	r3, r2
 80107dc:	881b      	ldrh	r3, [r3, #0]
 80107de:	b29b      	uxth	r3, r3
 80107e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80107e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80107e8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80107ec:	687a      	ldr	r2, [r7, #4]
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	781b      	ldrb	r3, [r3, #0]
 80107f2:	009b      	lsls	r3, r3, #2
 80107f4:	441a      	add	r2, r3
 80107f6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80107fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80107fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010802:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801080a:	b29b      	uxth	r3, r3
 801080c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	781b      	ldrb	r3, [r3, #0]
 8010814:	009b      	lsls	r3, r3, #2
 8010816:	4413      	add	r3, r2
 8010818:	881b      	ldrh	r3, [r3, #0]
 801081a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 801081e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8010822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010826:	2b00      	cmp	r3, #0
 8010828:	d01d      	beq.n	8010866 <USB_ActivateEndpoint+0x596>
 801082a:	687a      	ldr	r2, [r7, #4]
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	781b      	ldrb	r3, [r3, #0]
 8010830:	009b      	lsls	r3, r3, #2
 8010832:	4413      	add	r3, r2
 8010834:	881b      	ldrh	r3, [r3, #0]
 8010836:	b29b      	uxth	r3, r3
 8010838:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801083c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010840:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8010844:	687a      	ldr	r2, [r7, #4]
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	009b      	lsls	r3, r3, #2
 801084c:	441a      	add	r2, r3
 801084e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8010852:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010856:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801085a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801085e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010862:	b29b      	uxth	r3, r3
 8010864:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	785b      	ldrb	r3, [r3, #1]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d16b      	bne.n	8010946 <USB_ActivateEndpoint+0x676>
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010878:	b29b      	uxth	r3, r3
 801087a:	461a      	mov	r2, r3
 801087c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801087e:	4413      	add	r3, r2
 8010880:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	781b      	ldrb	r3, [r3, #0]
 8010886:	00da      	lsls	r2, r3, #3
 8010888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801088a:	4413      	add	r3, r2
 801088c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010890:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010894:	881b      	ldrh	r3, [r3, #0]
 8010896:	b29b      	uxth	r3, r3
 8010898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801089c:	b29a      	uxth	r2, r3
 801089e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80108a0:	801a      	strh	r2, [r3, #0]
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	691b      	ldr	r3, [r3, #16]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d10a      	bne.n	80108c0 <USB_ActivateEndpoint+0x5f0>
 80108aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80108ac:	881b      	ldrh	r3, [r3, #0]
 80108ae:	b29b      	uxth	r3, r3
 80108b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80108b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80108b8:	b29a      	uxth	r2, r3
 80108ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80108bc:	801a      	strh	r2, [r3, #0]
 80108be:	e05d      	b.n	801097c <USB_ActivateEndpoint+0x6ac>
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	691b      	ldr	r3, [r3, #16]
 80108c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80108c6:	d81c      	bhi.n	8010902 <USB_ActivateEndpoint+0x632>
 80108c8:	683b      	ldr	r3, [r7, #0]
 80108ca:	691b      	ldr	r3, [r3, #16]
 80108cc:	085b      	lsrs	r3, r3, #1
 80108ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	691b      	ldr	r3, [r3, #16]
 80108d6:	f003 0301 	and.w	r3, r3, #1
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d004      	beq.n	80108e8 <USB_ActivateEndpoint+0x618>
 80108de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80108e2:	3301      	adds	r3, #1
 80108e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80108e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80108ea:	881b      	ldrh	r3, [r3, #0]
 80108ec:	b29a      	uxth	r2, r3
 80108ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80108f2:	b29b      	uxth	r3, r3
 80108f4:	029b      	lsls	r3, r3, #10
 80108f6:	b29b      	uxth	r3, r3
 80108f8:	4313      	orrs	r3, r2
 80108fa:	b29a      	uxth	r2, r3
 80108fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80108fe:	801a      	strh	r2, [r3, #0]
 8010900:	e03c      	b.n	801097c <USB_ActivateEndpoint+0x6ac>
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	691b      	ldr	r3, [r3, #16]
 8010906:	095b      	lsrs	r3, r3, #5
 8010908:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	691b      	ldr	r3, [r3, #16]
 8010910:	f003 031f 	and.w	r3, r3, #31
 8010914:	2b00      	cmp	r3, #0
 8010916:	d104      	bne.n	8010922 <USB_ActivateEndpoint+0x652>
 8010918:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801091c:	3b01      	subs	r3, #1
 801091e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010924:	881b      	ldrh	r3, [r3, #0]
 8010926:	b29a      	uxth	r2, r3
 8010928:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801092c:	b29b      	uxth	r3, r3
 801092e:	029b      	lsls	r3, r3, #10
 8010930:	b29b      	uxth	r3, r3
 8010932:	4313      	orrs	r3, r2
 8010934:	b29b      	uxth	r3, r3
 8010936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801093a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801093e:	b29a      	uxth	r2, r3
 8010940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010942:	801a      	strh	r2, [r3, #0]
 8010944:	e01a      	b.n	801097c <USB_ActivateEndpoint+0x6ac>
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	785b      	ldrb	r3, [r3, #1]
 801094a:	2b01      	cmp	r3, #1
 801094c:	d116      	bne.n	801097c <USB_ActivateEndpoint+0x6ac>
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	657b      	str	r3, [r7, #84]	@ 0x54
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010958:	b29b      	uxth	r3, r3
 801095a:	461a      	mov	r2, r3
 801095c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801095e:	4413      	add	r3, r2
 8010960:	657b      	str	r3, [r7, #84]	@ 0x54
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	00da      	lsls	r2, r3, #3
 8010968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801096a:	4413      	add	r3, r2
 801096c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010970:	653b      	str	r3, [r7, #80]	@ 0x50
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	691b      	ldr	r3, [r3, #16]
 8010976:	b29a      	uxth	r2, r3
 8010978:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801097a:	801a      	strh	r2, [r3, #0]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	785b      	ldrb	r3, [r3, #1]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d16b      	bne.n	8010a60 <USB_ActivateEndpoint+0x790>
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010992:	b29b      	uxth	r3, r3
 8010994:	461a      	mov	r2, r3
 8010996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010998:	4413      	add	r3, r2
 801099a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	781b      	ldrb	r3, [r3, #0]
 80109a0:	00da      	lsls	r2, r3, #3
 80109a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109a4:	4413      	add	r3, r2
 80109a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80109aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80109ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109ae:	881b      	ldrh	r3, [r3, #0]
 80109b0:	b29b      	uxth	r3, r3
 80109b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80109b6:	b29a      	uxth	r2, r3
 80109b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109ba:	801a      	strh	r2, [r3, #0]
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	691b      	ldr	r3, [r3, #16]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d10a      	bne.n	80109da <USB_ActivateEndpoint+0x70a>
 80109c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109c6:	881b      	ldrh	r3, [r3, #0]
 80109c8:	b29b      	uxth	r3, r3
 80109ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80109ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80109d2:	b29a      	uxth	r2, r3
 80109d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109d6:	801a      	strh	r2, [r3, #0]
 80109d8:	e05b      	b.n	8010a92 <USB_ActivateEndpoint+0x7c2>
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	691b      	ldr	r3, [r3, #16]
 80109de:	2b3e      	cmp	r3, #62	@ 0x3e
 80109e0:	d81c      	bhi.n	8010a1c <USB_ActivateEndpoint+0x74c>
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	691b      	ldr	r3, [r3, #16]
 80109e6:	085b      	lsrs	r3, r3, #1
 80109e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	691b      	ldr	r3, [r3, #16]
 80109f0:	f003 0301 	and.w	r3, r3, #1
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d004      	beq.n	8010a02 <USB_ActivateEndpoint+0x732>
 80109f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80109fc:	3301      	adds	r3, #1
 80109fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a04:	881b      	ldrh	r3, [r3, #0]
 8010a06:	b29a      	uxth	r2, r3
 8010a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010a0c:	b29b      	uxth	r3, r3
 8010a0e:	029b      	lsls	r3, r3, #10
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	4313      	orrs	r3, r2
 8010a14:	b29a      	uxth	r2, r3
 8010a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a18:	801a      	strh	r2, [r3, #0]
 8010a1a:	e03a      	b.n	8010a92 <USB_ActivateEndpoint+0x7c2>
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	691b      	ldr	r3, [r3, #16]
 8010a20:	095b      	lsrs	r3, r3, #5
 8010a22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	691b      	ldr	r3, [r3, #16]
 8010a2a:	f003 031f 	and.w	r3, r3, #31
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d104      	bne.n	8010a3c <USB_ActivateEndpoint+0x76c>
 8010a32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010a36:	3b01      	subs	r3, #1
 8010a38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a3e:	881b      	ldrh	r3, [r3, #0]
 8010a40:	b29a      	uxth	r2, r3
 8010a42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010a46:	b29b      	uxth	r3, r3
 8010a48:	029b      	lsls	r3, r3, #10
 8010a4a:	b29b      	uxth	r3, r3
 8010a4c:	4313      	orrs	r3, r2
 8010a4e:	b29b      	uxth	r3, r3
 8010a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a58:	b29a      	uxth	r2, r3
 8010a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a5c:	801a      	strh	r2, [r3, #0]
 8010a5e:	e018      	b.n	8010a92 <USB_ActivateEndpoint+0x7c2>
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	785b      	ldrb	r3, [r3, #1]
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	d114      	bne.n	8010a92 <USB_ActivateEndpoint+0x7c2>
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010a6e:	b29b      	uxth	r3, r3
 8010a70:	461a      	mov	r2, r3
 8010a72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a74:	4413      	add	r3, r2
 8010a76:	647b      	str	r3, [r7, #68]	@ 0x44
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	781b      	ldrb	r3, [r3, #0]
 8010a7c:	00da      	lsls	r2, r3, #3
 8010a7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a80:	4413      	add	r3, r2
 8010a82:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010a86:	643b      	str	r3, [r7, #64]	@ 0x40
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	691b      	ldr	r3, [r3, #16]
 8010a8c:	b29a      	uxth	r2, r3
 8010a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a90:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010a92:	687a      	ldr	r2, [r7, #4]
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	781b      	ldrb	r3, [r3, #0]
 8010a98:	009b      	lsls	r3, r3, #2
 8010a9a:	4413      	add	r3, r2
 8010a9c:	881b      	ldrh	r3, [r3, #0]
 8010a9e:	b29b      	uxth	r3, r3
 8010aa0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010aa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010aa8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010aaa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010aac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8010ab0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010ab2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010ab4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010ab8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010aba:	687a      	ldr	r2, [r7, #4]
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	781b      	ldrb	r3, [r3, #0]
 8010ac0:	009b      	lsls	r3, r3, #2
 8010ac2:	441a      	add	r2, r3
 8010ac4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010ac6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010aca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010ace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010ada:	687a      	ldr	r2, [r7, #4]
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	781b      	ldrb	r3, [r3, #0]
 8010ae0:	009b      	lsls	r3, r3, #2
 8010ae2:	4413      	add	r3, r2
 8010ae4:	881b      	ldrh	r3, [r3, #0]
 8010ae6:	b29b      	uxth	r3, r3
 8010ae8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010aec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010af0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8010af2:	687a      	ldr	r2, [r7, #4]
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	781b      	ldrb	r3, [r3, #0]
 8010af8:	009b      	lsls	r3, r3, #2
 8010afa:	441a      	add	r2, r3
 8010afc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010afe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010b02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010b06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b0e:	b29b      	uxth	r3, r3
 8010b10:	8013      	strh	r3, [r2, #0]
 8010b12:	e0bc      	b.n	8010c8e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010b14:	687a      	ldr	r2, [r7, #4]
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	009b      	lsls	r3, r3, #2
 8010b1c:	4413      	add	r3, r2
 8010b1e:	881b      	ldrh	r3, [r3, #0]
 8010b20:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8010b24:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010b28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d01d      	beq.n	8010b6c <USB_ActivateEndpoint+0x89c>
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	781b      	ldrb	r3, [r3, #0]
 8010b36:	009b      	lsls	r3, r3, #2
 8010b38:	4413      	add	r3, r2
 8010b3a:	881b      	ldrh	r3, [r3, #0]
 8010b3c:	b29b      	uxth	r3, r3
 8010b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010b46:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8010b4a:	687a      	ldr	r2, [r7, #4]
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	781b      	ldrb	r3, [r3, #0]
 8010b50:	009b      	lsls	r3, r3, #2
 8010b52:	441a      	add	r2, r3
 8010b54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010b58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010b5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010b60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010b6c:	687a      	ldr	r2, [r7, #4]
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	781b      	ldrb	r3, [r3, #0]
 8010b72:	009b      	lsls	r3, r3, #2
 8010b74:	4413      	add	r3, r2
 8010b76:	881b      	ldrh	r3, [r3, #0]
 8010b78:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8010b7c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8010b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d01d      	beq.n	8010bc4 <USB_ActivateEndpoint+0x8f4>
 8010b88:	687a      	ldr	r2, [r7, #4]
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	781b      	ldrb	r3, [r3, #0]
 8010b8e:	009b      	lsls	r3, r3, #2
 8010b90:	4413      	add	r3, r2
 8010b92:	881b      	ldrh	r3, [r3, #0]
 8010b94:	b29b      	uxth	r3, r3
 8010b96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010b9e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8010ba2:	687a      	ldr	r2, [r7, #4]
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	781b      	ldrb	r3, [r3, #0]
 8010ba8:	009b      	lsls	r3, r3, #2
 8010baa:	441a      	add	r2, r3
 8010bac:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8010bb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010bb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010bb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010bbc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010bc0:	b29b      	uxth	r3, r3
 8010bc2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	78db      	ldrb	r3, [r3, #3]
 8010bc8:	2b01      	cmp	r3, #1
 8010bca:	d024      	beq.n	8010c16 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010bcc:	687a      	ldr	r2, [r7, #4]
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	781b      	ldrb	r3, [r3, #0]
 8010bd2:	009b      	lsls	r3, r3, #2
 8010bd4:	4413      	add	r3, r2
 8010bd6:	881b      	ldrh	r3, [r3, #0]
 8010bd8:	b29b      	uxth	r3, r3
 8010bda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010bde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010be2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8010be6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010bea:	f083 0320 	eor.w	r3, r3, #32
 8010bee:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	781b      	ldrb	r3, [r3, #0]
 8010bf8:	009b      	lsls	r3, r3, #2
 8010bfa:	441a      	add	r2, r3
 8010bfc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010c00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010c04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010c08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010c0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	8013      	strh	r3, [r2, #0]
 8010c14:	e01d      	b.n	8010c52 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010c16:	687a      	ldr	r2, [r7, #4]
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	781b      	ldrb	r3, [r3, #0]
 8010c1c:	009b      	lsls	r3, r3, #2
 8010c1e:	4413      	add	r3, r2
 8010c20:	881b      	ldrh	r3, [r3, #0]
 8010c22:	b29b      	uxth	r3, r3
 8010c24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010c28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c2c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8010c30:	687a      	ldr	r2, [r7, #4]
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	781b      	ldrb	r3, [r3, #0]
 8010c36:	009b      	lsls	r3, r3, #2
 8010c38:	441a      	add	r2, r3
 8010c3a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8010c3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010c42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010c52:	687a      	ldr	r2, [r7, #4]
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	781b      	ldrb	r3, [r3, #0]
 8010c58:	009b      	lsls	r3, r3, #2
 8010c5a:	4413      	add	r3, r2
 8010c5c:	881b      	ldrh	r3, [r3, #0]
 8010c5e:	b29b      	uxth	r3, r3
 8010c60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010c68:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8010c6c:	687a      	ldr	r2, [r7, #4]
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	009b      	lsls	r3, r3, #2
 8010c74:	441a      	add	r2, r3
 8010c76:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8010c7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010c7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010c82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8010c8e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8010c92:	4618      	mov	r0, r3
 8010c94:	379c      	adds	r7, #156	@ 0x9c
 8010c96:	46bd      	mov	sp, r7
 8010c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9c:	4770      	bx	lr
 8010c9e:	bf00      	nop

08010ca0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010ca0:	b480      	push	{r7}
 8010ca2:	b08d      	sub	sp, #52	@ 0x34
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	7b1b      	ldrb	r3, [r3, #12]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	f040 808e 	bne.w	8010dd0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	785b      	ldrb	r3, [r3, #1]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d044      	beq.n	8010d46 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010cbc:	687a      	ldr	r2, [r7, #4]
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	781b      	ldrb	r3, [r3, #0]
 8010cc2:	009b      	lsls	r3, r3, #2
 8010cc4:	4413      	add	r3, r2
 8010cc6:	881b      	ldrh	r3, [r3, #0]
 8010cc8:	81bb      	strh	r3, [r7, #12]
 8010cca:	89bb      	ldrh	r3, [r7, #12]
 8010ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d01b      	beq.n	8010d0c <USB_DeactivateEndpoint+0x6c>
 8010cd4:	687a      	ldr	r2, [r7, #4]
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	781b      	ldrb	r3, [r3, #0]
 8010cda:	009b      	lsls	r3, r3, #2
 8010cdc:	4413      	add	r3, r2
 8010cde:	881b      	ldrh	r3, [r3, #0]
 8010ce0:	b29b      	uxth	r3, r3
 8010ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010cea:	817b      	strh	r3, [r7, #10]
 8010cec:	687a      	ldr	r2, [r7, #4]
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	781b      	ldrb	r3, [r3, #0]
 8010cf2:	009b      	lsls	r3, r3, #2
 8010cf4:	441a      	add	r2, r3
 8010cf6:	897b      	ldrh	r3, [r7, #10]
 8010cf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010cfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010d00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010d04:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010d08:	b29b      	uxth	r3, r3
 8010d0a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010d0c:	687a      	ldr	r2, [r7, #4]
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	781b      	ldrb	r3, [r3, #0]
 8010d12:	009b      	lsls	r3, r3, #2
 8010d14:	4413      	add	r3, r2
 8010d16:	881b      	ldrh	r3, [r3, #0]
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010d1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d22:	813b      	strh	r3, [r7, #8]
 8010d24:	687a      	ldr	r2, [r7, #4]
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	781b      	ldrb	r3, [r3, #0]
 8010d2a:	009b      	lsls	r3, r3, #2
 8010d2c:	441a      	add	r2, r3
 8010d2e:	893b      	ldrh	r3, [r7, #8]
 8010d30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010d34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d40:	b29b      	uxth	r3, r3
 8010d42:	8013      	strh	r3, [r2, #0]
 8010d44:	e192      	b.n	801106c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010d46:	687a      	ldr	r2, [r7, #4]
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	781b      	ldrb	r3, [r3, #0]
 8010d4c:	009b      	lsls	r3, r3, #2
 8010d4e:	4413      	add	r3, r2
 8010d50:	881b      	ldrh	r3, [r3, #0]
 8010d52:	827b      	strh	r3, [r7, #18]
 8010d54:	8a7b      	ldrh	r3, [r7, #18]
 8010d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d01b      	beq.n	8010d96 <USB_DeactivateEndpoint+0xf6>
 8010d5e:	687a      	ldr	r2, [r7, #4]
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	781b      	ldrb	r3, [r3, #0]
 8010d64:	009b      	lsls	r3, r3, #2
 8010d66:	4413      	add	r3, r2
 8010d68:	881b      	ldrh	r3, [r3, #0]
 8010d6a:	b29b      	uxth	r3, r3
 8010d6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010d74:	823b      	strh	r3, [r7, #16]
 8010d76:	687a      	ldr	r2, [r7, #4]
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	781b      	ldrb	r3, [r3, #0]
 8010d7c:	009b      	lsls	r3, r3, #2
 8010d7e:	441a      	add	r2, r3
 8010d80:	8a3b      	ldrh	r3, [r7, #16]
 8010d82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010d86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010d8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d92:	b29b      	uxth	r3, r3
 8010d94:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010d96:	687a      	ldr	r2, [r7, #4]
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	009b      	lsls	r3, r3, #2
 8010d9e:	4413      	add	r3, r2
 8010da0:	881b      	ldrh	r3, [r3, #0]
 8010da2:	b29b      	uxth	r3, r3
 8010da4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010da8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010dac:	81fb      	strh	r3, [r7, #14]
 8010dae:	687a      	ldr	r2, [r7, #4]
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	781b      	ldrb	r3, [r3, #0]
 8010db4:	009b      	lsls	r3, r3, #2
 8010db6:	441a      	add	r2, r3
 8010db8:	89fb      	ldrh	r3, [r7, #14]
 8010dba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010dbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010dc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010dca:	b29b      	uxth	r3, r3
 8010dcc:	8013      	strh	r3, [r2, #0]
 8010dce:	e14d      	b.n	801106c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	785b      	ldrb	r3, [r3, #1]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	f040 80a5 	bne.w	8010f24 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010dda:	687a      	ldr	r2, [r7, #4]
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	781b      	ldrb	r3, [r3, #0]
 8010de0:	009b      	lsls	r3, r3, #2
 8010de2:	4413      	add	r3, r2
 8010de4:	881b      	ldrh	r3, [r3, #0]
 8010de6:	843b      	strh	r3, [r7, #32]
 8010de8:	8c3b      	ldrh	r3, [r7, #32]
 8010dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d01b      	beq.n	8010e2a <USB_DeactivateEndpoint+0x18a>
 8010df2:	687a      	ldr	r2, [r7, #4]
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	009b      	lsls	r3, r3, #2
 8010dfa:	4413      	add	r3, r2
 8010dfc:	881b      	ldrh	r3, [r3, #0]
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010e04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010e08:	83fb      	strh	r3, [r7, #30]
 8010e0a:	687a      	ldr	r2, [r7, #4]
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	781b      	ldrb	r3, [r3, #0]
 8010e10:	009b      	lsls	r3, r3, #2
 8010e12:	441a      	add	r2, r3
 8010e14:	8bfb      	ldrh	r3, [r7, #30]
 8010e16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010e1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010e1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e26:	b29b      	uxth	r3, r3
 8010e28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010e2a:	687a      	ldr	r2, [r7, #4]
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	781b      	ldrb	r3, [r3, #0]
 8010e30:	009b      	lsls	r3, r3, #2
 8010e32:	4413      	add	r3, r2
 8010e34:	881b      	ldrh	r3, [r3, #0]
 8010e36:	83bb      	strh	r3, [r7, #28]
 8010e38:	8bbb      	ldrh	r3, [r7, #28]
 8010e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d01b      	beq.n	8010e7a <USB_DeactivateEndpoint+0x1da>
 8010e42:	687a      	ldr	r2, [r7, #4]
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	009b      	lsls	r3, r3, #2
 8010e4a:	4413      	add	r3, r2
 8010e4c:	881b      	ldrh	r3, [r3, #0]
 8010e4e:	b29b      	uxth	r3, r3
 8010e50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010e54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010e58:	837b      	strh	r3, [r7, #26]
 8010e5a:	687a      	ldr	r2, [r7, #4]
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	781b      	ldrb	r3, [r3, #0]
 8010e60:	009b      	lsls	r3, r3, #2
 8010e62:	441a      	add	r2, r3
 8010e64:	8b7b      	ldrh	r3, [r7, #26]
 8010e66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010e6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010e6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010e72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010e76:	b29b      	uxth	r3, r3
 8010e78:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8010e7a:	687a      	ldr	r2, [r7, #4]
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	781b      	ldrb	r3, [r3, #0]
 8010e80:	009b      	lsls	r3, r3, #2
 8010e82:	4413      	add	r3, r2
 8010e84:	881b      	ldrh	r3, [r3, #0]
 8010e86:	b29b      	uxth	r3, r3
 8010e88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010e90:	833b      	strh	r3, [r7, #24]
 8010e92:	687a      	ldr	r2, [r7, #4]
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	781b      	ldrb	r3, [r3, #0]
 8010e98:	009b      	lsls	r3, r3, #2
 8010e9a:	441a      	add	r2, r3
 8010e9c:	8b3b      	ldrh	r3, [r7, #24]
 8010e9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010ea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010eaa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010eb2:	687a      	ldr	r2, [r7, #4]
 8010eb4:	683b      	ldr	r3, [r7, #0]
 8010eb6:	781b      	ldrb	r3, [r3, #0]
 8010eb8:	009b      	lsls	r3, r3, #2
 8010eba:	4413      	add	r3, r2
 8010ebc:	881b      	ldrh	r3, [r3, #0]
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010ec8:	82fb      	strh	r3, [r7, #22]
 8010eca:	687a      	ldr	r2, [r7, #4]
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	781b      	ldrb	r3, [r3, #0]
 8010ed0:	009b      	lsls	r3, r3, #2
 8010ed2:	441a      	add	r2, r3
 8010ed4:	8afb      	ldrh	r3, [r7, #22]
 8010ed6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010eda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010eea:	687a      	ldr	r2, [r7, #4]
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	781b      	ldrb	r3, [r3, #0]
 8010ef0:	009b      	lsls	r3, r3, #2
 8010ef2:	4413      	add	r3, r2
 8010ef4:	881b      	ldrh	r3, [r3, #0]
 8010ef6:	b29b      	uxth	r3, r3
 8010ef8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010efc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010f00:	82bb      	strh	r3, [r7, #20]
 8010f02:	687a      	ldr	r2, [r7, #4]
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	009b      	lsls	r3, r3, #2
 8010f0a:	441a      	add	r2, r3
 8010f0c:	8abb      	ldrh	r3, [r7, #20]
 8010f0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010f12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010f16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f1e:	b29b      	uxth	r3, r3
 8010f20:	8013      	strh	r3, [r2, #0]
 8010f22:	e0a3      	b.n	801106c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010f24:	687a      	ldr	r2, [r7, #4]
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	781b      	ldrb	r3, [r3, #0]
 8010f2a:	009b      	lsls	r3, r3, #2
 8010f2c:	4413      	add	r3, r2
 8010f2e:	881b      	ldrh	r3, [r3, #0]
 8010f30:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8010f32:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010f34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d01b      	beq.n	8010f74 <USB_DeactivateEndpoint+0x2d4>
 8010f3c:	687a      	ldr	r2, [r7, #4]
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	781b      	ldrb	r3, [r3, #0]
 8010f42:	009b      	lsls	r3, r3, #2
 8010f44:	4413      	add	r3, r2
 8010f46:	881b      	ldrh	r3, [r3, #0]
 8010f48:	b29b      	uxth	r3, r3
 8010f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010f52:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8010f54:	687a      	ldr	r2, [r7, #4]
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	781b      	ldrb	r3, [r3, #0]
 8010f5a:	009b      	lsls	r3, r3, #2
 8010f5c:	441a      	add	r2, r3
 8010f5e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010f60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010f64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010f68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f70:	b29b      	uxth	r3, r3
 8010f72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010f74:	687a      	ldr	r2, [r7, #4]
 8010f76:	683b      	ldr	r3, [r7, #0]
 8010f78:	781b      	ldrb	r3, [r3, #0]
 8010f7a:	009b      	lsls	r3, r3, #2
 8010f7c:	4413      	add	r3, r2
 8010f7e:	881b      	ldrh	r3, [r3, #0]
 8010f80:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8010f82:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d01b      	beq.n	8010fc4 <USB_DeactivateEndpoint+0x324>
 8010f8c:	687a      	ldr	r2, [r7, #4]
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	781b      	ldrb	r3, [r3, #0]
 8010f92:	009b      	lsls	r3, r3, #2
 8010f94:	4413      	add	r3, r2
 8010f96:	881b      	ldrh	r3, [r3, #0]
 8010f98:	b29b      	uxth	r3, r3
 8010f9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010fa2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010fa4:	687a      	ldr	r2, [r7, #4]
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	781b      	ldrb	r3, [r3, #0]
 8010faa:	009b      	lsls	r3, r3, #2
 8010fac:	441a      	add	r2, r3
 8010fae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010fb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010fb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010fb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010fbc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010fc0:	b29b      	uxth	r3, r3
 8010fc2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	781b      	ldrb	r3, [r3, #0]
 8010fca:	009b      	lsls	r3, r3, #2
 8010fcc:	4413      	add	r3, r2
 8010fce:	881b      	ldrh	r3, [r3, #0]
 8010fd0:	b29b      	uxth	r3, r3
 8010fd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010fda:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010fdc:	687a      	ldr	r2, [r7, #4]
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	009b      	lsls	r3, r3, #2
 8010fe4:	441a      	add	r2, r3
 8010fe6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010fe8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010fec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010ff0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ff8:	b29b      	uxth	r3, r3
 8010ffa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010ffc:	687a      	ldr	r2, [r7, #4]
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	781b      	ldrb	r3, [r3, #0]
 8011002:	009b      	lsls	r3, r3, #2
 8011004:	4413      	add	r3, r2
 8011006:	881b      	ldrh	r3, [r3, #0]
 8011008:	b29b      	uxth	r3, r3
 801100a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801100e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011012:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8011014:	687a      	ldr	r2, [r7, #4]
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	781b      	ldrb	r3, [r3, #0]
 801101a:	009b      	lsls	r3, r3, #2
 801101c:	441a      	add	r2, r3
 801101e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011020:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011024:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011028:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801102c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011030:	b29b      	uxth	r3, r3
 8011032:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011034:	687a      	ldr	r2, [r7, #4]
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	009b      	lsls	r3, r3, #2
 801103c:	4413      	add	r3, r2
 801103e:	881b      	ldrh	r3, [r3, #0]
 8011040:	b29b      	uxth	r3, r3
 8011042:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801104a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801104c:	687a      	ldr	r2, [r7, #4]
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	781b      	ldrb	r3, [r3, #0]
 8011052:	009b      	lsls	r3, r3, #2
 8011054:	441a      	add	r2, r3
 8011056:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011058:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801105c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011060:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011064:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011068:	b29b      	uxth	r3, r3
 801106a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801106c:	2300      	movs	r3, #0
}
 801106e:	4618      	mov	r0, r3
 8011070:	3734      	adds	r7, #52	@ 0x34
 8011072:	46bd      	mov	sp, r7
 8011074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011078:	4770      	bx	lr

0801107a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801107a:	b580      	push	{r7, lr}
 801107c:	b0ac      	sub	sp, #176	@ 0xb0
 801107e:	af00      	add	r7, sp, #0
 8011080:	6078      	str	r0, [r7, #4]
 8011082:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	785b      	ldrb	r3, [r3, #1]
 8011088:	2b01      	cmp	r3, #1
 801108a:	f040 84ca 	bne.w	8011a22 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	699a      	ldr	r2, [r3, #24]
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	691b      	ldr	r3, [r3, #16]
 8011096:	429a      	cmp	r2, r3
 8011098:	d904      	bls.n	80110a4 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	691b      	ldr	r3, [r3, #16]
 801109e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80110a2:	e003      	b.n	80110ac <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	699b      	ldr	r3, [r3, #24]
 80110a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	7b1b      	ldrb	r3, [r3, #12]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d122      	bne.n	80110fa <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	6959      	ldr	r1, [r3, #20]
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	88da      	ldrh	r2, [r3, #6]
 80110bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80110c0:	b29b      	uxth	r3, r3
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f000 febd 	bl	8011e42 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	613b      	str	r3, [r7, #16]
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80110d2:	b29b      	uxth	r3, r3
 80110d4:	461a      	mov	r2, r3
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	4413      	add	r3, r2
 80110da:	613b      	str	r3, [r7, #16]
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	781b      	ldrb	r3, [r3, #0]
 80110e0:	00da      	lsls	r2, r3, #3
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	4413      	add	r3, r2
 80110e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80110ea:	60fb      	str	r3, [r7, #12]
 80110ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80110f0:	b29a      	uxth	r2, r3
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	801a      	strh	r2, [r3, #0]
 80110f6:	f000 bc6f 	b.w	80119d8 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	78db      	ldrb	r3, [r3, #3]
 80110fe:	2b02      	cmp	r3, #2
 8011100:	f040 831e 	bne.w	8011740 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	6a1a      	ldr	r2, [r3, #32]
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	691b      	ldr	r3, [r3, #16]
 801110c:	429a      	cmp	r2, r3
 801110e:	f240 82cf 	bls.w	80116b0 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011112:	687a      	ldr	r2, [r7, #4]
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	781b      	ldrb	r3, [r3, #0]
 8011118:	009b      	lsls	r3, r3, #2
 801111a:	4413      	add	r3, r2
 801111c:	881b      	ldrh	r3, [r3, #0]
 801111e:	b29b      	uxth	r3, r3
 8011120:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011128:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 801112c:	687a      	ldr	r2, [r7, #4]
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	009b      	lsls	r3, r3, #2
 8011134:	441a      	add	r2, r3
 8011136:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 801113a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801113e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011142:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801114a:	b29b      	uxth	r3, r3
 801114c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	6a1a      	ldr	r2, [r3, #32]
 8011152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011156:	1ad2      	subs	r2, r2, r3
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801115c:	687a      	ldr	r2, [r7, #4]
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	781b      	ldrb	r3, [r3, #0]
 8011162:	009b      	lsls	r3, r3, #2
 8011164:	4413      	add	r3, r2
 8011166:	881b      	ldrh	r3, [r3, #0]
 8011168:	b29b      	uxth	r3, r3
 801116a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801116e:	2b00      	cmp	r3, #0
 8011170:	f000 814f 	beq.w	8011412 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	633b      	str	r3, [r7, #48]	@ 0x30
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	785b      	ldrb	r3, [r3, #1]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d16b      	bne.n	8011258 <USB_EPStartXfer+0x1de>
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801118a:	b29b      	uxth	r3, r3
 801118c:	461a      	mov	r2, r3
 801118e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011190:	4413      	add	r3, r2
 8011192:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	781b      	ldrb	r3, [r3, #0]
 8011198:	00da      	lsls	r2, r3, #3
 801119a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801119c:	4413      	add	r3, r2
 801119e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80111a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80111a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111a6:	881b      	ldrh	r3, [r3, #0]
 80111a8:	b29b      	uxth	r3, r3
 80111aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80111ae:	b29a      	uxth	r2, r3
 80111b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111b2:	801a      	strh	r2, [r3, #0]
 80111b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d10a      	bne.n	80111d2 <USB_EPStartXfer+0x158>
 80111bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111be:	881b      	ldrh	r3, [r3, #0]
 80111c0:	b29b      	uxth	r3, r3
 80111c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80111c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80111ca:	b29a      	uxth	r2, r3
 80111cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ce:	801a      	strh	r2, [r3, #0]
 80111d0:	e05b      	b.n	801128a <USB_EPStartXfer+0x210>
 80111d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80111d8:	d81c      	bhi.n	8011214 <USB_EPStartXfer+0x19a>
 80111da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111de:	085b      	lsrs	r3, r3, #1
 80111e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80111e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111e8:	f003 0301 	and.w	r3, r3, #1
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d004      	beq.n	80111fa <USB_EPStartXfer+0x180>
 80111f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80111f4:	3301      	adds	r3, #1
 80111f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80111fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111fc:	881b      	ldrh	r3, [r3, #0]
 80111fe:	b29a      	uxth	r2, r3
 8011200:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011204:	b29b      	uxth	r3, r3
 8011206:	029b      	lsls	r3, r3, #10
 8011208:	b29b      	uxth	r3, r3
 801120a:	4313      	orrs	r3, r2
 801120c:	b29a      	uxth	r2, r3
 801120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011210:	801a      	strh	r2, [r3, #0]
 8011212:	e03a      	b.n	801128a <USB_EPStartXfer+0x210>
 8011214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011218:	095b      	lsrs	r3, r3, #5
 801121a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801121e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011222:	f003 031f 	and.w	r3, r3, #31
 8011226:	2b00      	cmp	r3, #0
 8011228:	d104      	bne.n	8011234 <USB_EPStartXfer+0x1ba>
 801122a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801122e:	3b01      	subs	r3, #1
 8011230:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011236:	881b      	ldrh	r3, [r3, #0]
 8011238:	b29a      	uxth	r2, r3
 801123a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801123e:	b29b      	uxth	r3, r3
 8011240:	029b      	lsls	r3, r3, #10
 8011242:	b29b      	uxth	r3, r3
 8011244:	4313      	orrs	r3, r2
 8011246:	b29b      	uxth	r3, r3
 8011248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801124c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011250:	b29a      	uxth	r2, r3
 8011252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011254:	801a      	strh	r2, [r3, #0]
 8011256:	e018      	b.n	801128a <USB_EPStartXfer+0x210>
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	785b      	ldrb	r3, [r3, #1]
 801125c:	2b01      	cmp	r3, #1
 801125e:	d114      	bne.n	801128a <USB_EPStartXfer+0x210>
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011266:	b29b      	uxth	r3, r3
 8011268:	461a      	mov	r2, r3
 801126a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801126c:	4413      	add	r3, r2
 801126e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	00da      	lsls	r2, r3, #3
 8011276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011278:	4413      	add	r3, r2
 801127a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801127e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011280:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011284:	b29a      	uxth	r2, r3
 8011286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011288:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	895b      	ldrh	r3, [r3, #10]
 801128e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	6959      	ldr	r1, [r3, #20]
 8011296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801129a:	b29b      	uxth	r3, r3
 801129c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f000 fdce 	bl	8011e42 <USB_WritePMA>
            ep->xfer_buff += len;
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	695a      	ldr	r2, [r3, #20]
 80112aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112ae:	441a      	add	r2, r3
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	6a1a      	ldr	r2, [r3, #32]
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	691b      	ldr	r3, [r3, #16]
 80112bc:	429a      	cmp	r2, r3
 80112be:	d907      	bls.n	80112d0 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	6a1a      	ldr	r2, [r3, #32]
 80112c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112c8:	1ad2      	subs	r2, r2, r3
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	621a      	str	r2, [r3, #32]
 80112ce:	e006      	b.n	80112de <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	6a1b      	ldr	r3, [r3, #32]
 80112d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80112d8:	683b      	ldr	r3, [r7, #0]
 80112da:	2200      	movs	r2, #0
 80112dc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	785b      	ldrb	r3, [r3, #1]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d16b      	bne.n	80113be <USB_EPStartXfer+0x344>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	61bb      	str	r3, [r7, #24]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80112f0:	b29b      	uxth	r3, r3
 80112f2:	461a      	mov	r2, r3
 80112f4:	69bb      	ldr	r3, [r7, #24]
 80112f6:	4413      	add	r3, r2
 80112f8:	61bb      	str	r3, [r7, #24]
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	781b      	ldrb	r3, [r3, #0]
 80112fe:	00da      	lsls	r2, r3, #3
 8011300:	69bb      	ldr	r3, [r7, #24]
 8011302:	4413      	add	r3, r2
 8011304:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011308:	617b      	str	r3, [r7, #20]
 801130a:	697b      	ldr	r3, [r7, #20]
 801130c:	881b      	ldrh	r3, [r3, #0]
 801130e:	b29b      	uxth	r3, r3
 8011310:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011314:	b29a      	uxth	r2, r3
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	801a      	strh	r2, [r3, #0]
 801131a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801131e:	2b00      	cmp	r3, #0
 8011320:	d10a      	bne.n	8011338 <USB_EPStartXfer+0x2be>
 8011322:	697b      	ldr	r3, [r7, #20]
 8011324:	881b      	ldrh	r3, [r3, #0]
 8011326:	b29b      	uxth	r3, r3
 8011328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801132c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011330:	b29a      	uxth	r2, r3
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	801a      	strh	r2, [r3, #0]
 8011336:	e05d      	b.n	80113f4 <USB_EPStartXfer+0x37a>
 8011338:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801133c:	2b3e      	cmp	r3, #62	@ 0x3e
 801133e:	d81c      	bhi.n	801137a <USB_EPStartXfer+0x300>
 8011340:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011344:	085b      	lsrs	r3, r3, #1
 8011346:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801134a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801134e:	f003 0301 	and.w	r3, r3, #1
 8011352:	2b00      	cmp	r3, #0
 8011354:	d004      	beq.n	8011360 <USB_EPStartXfer+0x2e6>
 8011356:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801135a:	3301      	adds	r3, #1
 801135c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011360:	697b      	ldr	r3, [r7, #20]
 8011362:	881b      	ldrh	r3, [r3, #0]
 8011364:	b29a      	uxth	r2, r3
 8011366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801136a:	b29b      	uxth	r3, r3
 801136c:	029b      	lsls	r3, r3, #10
 801136e:	b29b      	uxth	r3, r3
 8011370:	4313      	orrs	r3, r2
 8011372:	b29a      	uxth	r2, r3
 8011374:	697b      	ldr	r3, [r7, #20]
 8011376:	801a      	strh	r2, [r3, #0]
 8011378:	e03c      	b.n	80113f4 <USB_EPStartXfer+0x37a>
 801137a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801137e:	095b      	lsrs	r3, r3, #5
 8011380:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011388:	f003 031f 	and.w	r3, r3, #31
 801138c:	2b00      	cmp	r3, #0
 801138e:	d104      	bne.n	801139a <USB_EPStartXfer+0x320>
 8011390:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011394:	3b01      	subs	r3, #1
 8011396:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	881b      	ldrh	r3, [r3, #0]
 801139e:	b29a      	uxth	r2, r3
 80113a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80113a4:	b29b      	uxth	r3, r3
 80113a6:	029b      	lsls	r3, r3, #10
 80113a8:	b29b      	uxth	r3, r3
 80113aa:	4313      	orrs	r3, r2
 80113ac:	b29b      	uxth	r3, r3
 80113ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80113b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80113b6:	b29a      	uxth	r2, r3
 80113b8:	697b      	ldr	r3, [r7, #20]
 80113ba:	801a      	strh	r2, [r3, #0]
 80113bc:	e01a      	b.n	80113f4 <USB_EPStartXfer+0x37a>
 80113be:	683b      	ldr	r3, [r7, #0]
 80113c0:	785b      	ldrb	r3, [r3, #1]
 80113c2:	2b01      	cmp	r3, #1
 80113c4:	d116      	bne.n	80113f4 <USB_EPStartXfer+0x37a>
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	623b      	str	r3, [r7, #32]
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80113d0:	b29b      	uxth	r3, r3
 80113d2:	461a      	mov	r2, r3
 80113d4:	6a3b      	ldr	r3, [r7, #32]
 80113d6:	4413      	add	r3, r2
 80113d8:	623b      	str	r3, [r7, #32]
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	781b      	ldrb	r3, [r3, #0]
 80113de:	00da      	lsls	r2, r3, #3
 80113e0:	6a3b      	ldr	r3, [r7, #32]
 80113e2:	4413      	add	r3, r2
 80113e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80113e8:	61fb      	str	r3, [r7, #28]
 80113ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80113ee:	b29a      	uxth	r2, r3
 80113f0:	69fb      	ldr	r3, [r7, #28]
 80113f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	891b      	ldrh	r3, [r3, #8]
 80113f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	6959      	ldr	r1, [r3, #20]
 8011400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011404:	b29b      	uxth	r3, r3
 8011406:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f000 fd19 	bl	8011e42 <USB_WritePMA>
 8011410:	e2e2      	b.n	80119d8 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	785b      	ldrb	r3, [r3, #1]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d16b      	bne.n	80114f2 <USB_EPStartXfer+0x478>
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011424:	b29b      	uxth	r3, r3
 8011426:	461a      	mov	r2, r3
 8011428:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801142a:	4413      	add	r3, r2
 801142c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	781b      	ldrb	r3, [r3, #0]
 8011432:	00da      	lsls	r2, r3, #3
 8011434:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011436:	4413      	add	r3, r2
 8011438:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801143c:	647b      	str	r3, [r7, #68]	@ 0x44
 801143e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011440:	881b      	ldrh	r3, [r3, #0]
 8011442:	b29b      	uxth	r3, r3
 8011444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011448:	b29a      	uxth	r2, r3
 801144a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801144c:	801a      	strh	r2, [r3, #0]
 801144e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011452:	2b00      	cmp	r3, #0
 8011454:	d10a      	bne.n	801146c <USB_EPStartXfer+0x3f2>
 8011456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011458:	881b      	ldrh	r3, [r3, #0]
 801145a:	b29b      	uxth	r3, r3
 801145c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011464:	b29a      	uxth	r2, r3
 8011466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011468:	801a      	strh	r2, [r3, #0]
 801146a:	e05d      	b.n	8011528 <USB_EPStartXfer+0x4ae>
 801146c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011470:	2b3e      	cmp	r3, #62	@ 0x3e
 8011472:	d81c      	bhi.n	80114ae <USB_EPStartXfer+0x434>
 8011474:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011478:	085b      	lsrs	r3, r3, #1
 801147a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801147e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011482:	f003 0301 	and.w	r3, r3, #1
 8011486:	2b00      	cmp	r3, #0
 8011488:	d004      	beq.n	8011494 <USB_EPStartXfer+0x41a>
 801148a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801148e:	3301      	adds	r3, #1
 8011490:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011496:	881b      	ldrh	r3, [r3, #0]
 8011498:	b29a      	uxth	r2, r3
 801149a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801149e:	b29b      	uxth	r3, r3
 80114a0:	029b      	lsls	r3, r3, #10
 80114a2:	b29b      	uxth	r3, r3
 80114a4:	4313      	orrs	r3, r2
 80114a6:	b29a      	uxth	r2, r3
 80114a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80114aa:	801a      	strh	r2, [r3, #0]
 80114ac:	e03c      	b.n	8011528 <USB_EPStartXfer+0x4ae>
 80114ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80114b2:	095b      	lsrs	r3, r3, #5
 80114b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80114b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80114bc:	f003 031f 	and.w	r3, r3, #31
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d104      	bne.n	80114ce <USB_EPStartXfer+0x454>
 80114c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80114c8:	3b01      	subs	r3, #1
 80114ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80114ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80114d0:	881b      	ldrh	r3, [r3, #0]
 80114d2:	b29a      	uxth	r2, r3
 80114d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80114d8:	b29b      	uxth	r3, r3
 80114da:	029b      	lsls	r3, r3, #10
 80114dc:	b29b      	uxth	r3, r3
 80114de:	4313      	orrs	r3, r2
 80114e0:	b29b      	uxth	r3, r3
 80114e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80114e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80114ea:	b29a      	uxth	r2, r3
 80114ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80114ee:	801a      	strh	r2, [r3, #0]
 80114f0:	e01a      	b.n	8011528 <USB_EPStartXfer+0x4ae>
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	785b      	ldrb	r3, [r3, #1]
 80114f6:	2b01      	cmp	r3, #1
 80114f8:	d116      	bne.n	8011528 <USB_EPStartXfer+0x4ae>
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011504:	b29b      	uxth	r3, r3
 8011506:	461a      	mov	r2, r3
 8011508:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801150a:	4413      	add	r3, r2
 801150c:	653b      	str	r3, [r7, #80]	@ 0x50
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	781b      	ldrb	r3, [r3, #0]
 8011512:	00da      	lsls	r2, r3, #3
 8011514:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011516:	4413      	add	r3, r2
 8011518:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801151c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801151e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011522:	b29a      	uxth	r2, r3
 8011524:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011526:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	891b      	ldrh	r3, [r3, #8]
 801152c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	6959      	ldr	r1, [r3, #20]
 8011534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011538:	b29b      	uxth	r3, r3
 801153a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	f000 fc7f 	bl	8011e42 <USB_WritePMA>
            ep->xfer_buff += len;
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	695a      	ldr	r2, [r3, #20]
 8011548:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801154c:	441a      	add	r2, r3
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	6a1a      	ldr	r2, [r3, #32]
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	691b      	ldr	r3, [r3, #16]
 801155a:	429a      	cmp	r2, r3
 801155c:	d907      	bls.n	801156e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	6a1a      	ldr	r2, [r3, #32]
 8011562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011566:	1ad2      	subs	r2, r2, r3
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	621a      	str	r2, [r3, #32]
 801156c:	e006      	b.n	801157c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	6a1b      	ldr	r3, [r3, #32]
 8011572:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	2200      	movs	r2, #0
 801157a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	785b      	ldrb	r3, [r3, #1]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d16b      	bne.n	8011660 <USB_EPStartXfer+0x5e6>
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011592:	b29b      	uxth	r3, r3
 8011594:	461a      	mov	r2, r3
 8011596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011598:	4413      	add	r3, r2
 801159a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	781b      	ldrb	r3, [r3, #0]
 80115a0:	00da      	lsls	r2, r3, #3
 80115a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115a4:	4413      	add	r3, r2
 80115a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80115aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80115ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115ae:	881b      	ldrh	r3, [r3, #0]
 80115b0:	b29b      	uxth	r3, r3
 80115b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80115b6:	b29a      	uxth	r2, r3
 80115b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115ba:	801a      	strh	r2, [r3, #0]
 80115bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d10a      	bne.n	80115da <USB_EPStartXfer+0x560>
 80115c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115c6:	881b      	ldrh	r3, [r3, #0]
 80115c8:	b29b      	uxth	r3, r3
 80115ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80115ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80115d2:	b29a      	uxth	r2, r3
 80115d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115d6:	801a      	strh	r2, [r3, #0]
 80115d8:	e05b      	b.n	8011692 <USB_EPStartXfer+0x618>
 80115da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115de:	2b3e      	cmp	r3, #62	@ 0x3e
 80115e0:	d81c      	bhi.n	801161c <USB_EPStartXfer+0x5a2>
 80115e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115e6:	085b      	lsrs	r3, r3, #1
 80115e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80115ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115f0:	f003 0301 	and.w	r3, r3, #1
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d004      	beq.n	8011602 <USB_EPStartXfer+0x588>
 80115f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80115fc:	3301      	adds	r3, #1
 80115fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011604:	881b      	ldrh	r3, [r3, #0]
 8011606:	b29a      	uxth	r2, r3
 8011608:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801160c:	b29b      	uxth	r3, r3
 801160e:	029b      	lsls	r3, r3, #10
 8011610:	b29b      	uxth	r3, r3
 8011612:	4313      	orrs	r3, r2
 8011614:	b29a      	uxth	r2, r3
 8011616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011618:	801a      	strh	r2, [r3, #0]
 801161a:	e03a      	b.n	8011692 <USB_EPStartXfer+0x618>
 801161c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011620:	095b      	lsrs	r3, r3, #5
 8011622:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801162a:	f003 031f 	and.w	r3, r3, #31
 801162e:	2b00      	cmp	r3, #0
 8011630:	d104      	bne.n	801163c <USB_EPStartXfer+0x5c2>
 8011632:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011636:	3b01      	subs	r3, #1
 8011638:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801163c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801163e:	881b      	ldrh	r3, [r3, #0]
 8011640:	b29a      	uxth	r2, r3
 8011642:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011646:	b29b      	uxth	r3, r3
 8011648:	029b      	lsls	r3, r3, #10
 801164a:	b29b      	uxth	r3, r3
 801164c:	4313      	orrs	r3, r2
 801164e:	b29b      	uxth	r3, r3
 8011650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011658:	b29a      	uxth	r2, r3
 801165a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801165c:	801a      	strh	r2, [r3, #0]
 801165e:	e018      	b.n	8011692 <USB_EPStartXfer+0x618>
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	785b      	ldrb	r3, [r3, #1]
 8011664:	2b01      	cmp	r3, #1
 8011666:	d114      	bne.n	8011692 <USB_EPStartXfer+0x618>
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801166e:	b29b      	uxth	r3, r3
 8011670:	461a      	mov	r2, r3
 8011672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011674:	4413      	add	r3, r2
 8011676:	643b      	str	r3, [r7, #64]	@ 0x40
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	781b      	ldrb	r3, [r3, #0]
 801167c:	00da      	lsls	r2, r3, #3
 801167e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011680:	4413      	add	r3, r2
 8011682:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011688:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801168c:	b29a      	uxth	r2, r3
 801168e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011690:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	895b      	ldrh	r3, [r3, #10]
 8011696:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	6959      	ldr	r1, [r3, #20]
 801169e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80116a2:	b29b      	uxth	r3, r3
 80116a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80116a8:	6878      	ldr	r0, [r7, #4]
 80116aa:	f000 fbca 	bl	8011e42 <USB_WritePMA>
 80116ae:	e193      	b.n	80119d8 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	6a1b      	ldr	r3, [r3, #32]
 80116b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	009b      	lsls	r3, r3, #2
 80116c0:	4413      	add	r3, r2
 80116c2:	881b      	ldrh	r3, [r3, #0]
 80116c4:	b29b      	uxth	r3, r3
 80116c6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80116ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80116ce:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80116d2:	687a      	ldr	r2, [r7, #4]
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	781b      	ldrb	r3, [r3, #0]
 80116d8:	009b      	lsls	r3, r3, #2
 80116da:	441a      	add	r2, r3
 80116dc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80116e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80116e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80116e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80116ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116f0:	b29b      	uxth	r3, r3
 80116f2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80116fe:	b29b      	uxth	r3, r3
 8011700:	461a      	mov	r2, r3
 8011702:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011704:	4413      	add	r3, r2
 8011706:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	00da      	lsls	r2, r3, #3
 801170e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011710:	4413      	add	r3, r2
 8011712:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011716:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011718:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801171c:	b29a      	uxth	r2, r3
 801171e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011720:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	891b      	ldrh	r3, [r3, #8]
 8011726:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	6959      	ldr	r1, [r3, #20]
 801172e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011732:	b29b      	uxth	r3, r3
 8011734:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	f000 fb82 	bl	8011e42 <USB_WritePMA>
 801173e:	e14b      	b.n	80119d8 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	6a1a      	ldr	r2, [r3, #32]
 8011744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011748:	1ad2      	subs	r2, r2, r3
 801174a:	683b      	ldr	r3, [r7, #0]
 801174c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801174e:	687a      	ldr	r2, [r7, #4]
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	781b      	ldrb	r3, [r3, #0]
 8011754:	009b      	lsls	r3, r3, #2
 8011756:	4413      	add	r3, r2
 8011758:	881b      	ldrh	r3, [r3, #0]
 801175a:	b29b      	uxth	r3, r3
 801175c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011760:	2b00      	cmp	r3, #0
 8011762:	f000 809a 	beq.w	801189a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	673b      	str	r3, [r7, #112]	@ 0x70
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	785b      	ldrb	r3, [r3, #1]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d16b      	bne.n	801184a <USB_EPStartXfer+0x7d0>
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801177c:	b29b      	uxth	r3, r3
 801177e:	461a      	mov	r2, r3
 8011780:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011782:	4413      	add	r3, r2
 8011784:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	00da      	lsls	r2, r3, #3
 801178c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801178e:	4413      	add	r3, r2
 8011790:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011794:	667b      	str	r3, [r7, #100]	@ 0x64
 8011796:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011798:	881b      	ldrh	r3, [r3, #0]
 801179a:	b29b      	uxth	r3, r3
 801179c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80117a0:	b29a      	uxth	r2, r3
 80117a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80117a4:	801a      	strh	r2, [r3, #0]
 80117a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d10a      	bne.n	80117c4 <USB_EPStartXfer+0x74a>
 80117ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80117b0:	881b      	ldrh	r3, [r3, #0]
 80117b2:	b29b      	uxth	r3, r3
 80117b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80117b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80117bc:	b29a      	uxth	r2, r3
 80117be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80117c0:	801a      	strh	r2, [r3, #0]
 80117c2:	e05b      	b.n	801187c <USB_EPStartXfer+0x802>
 80117c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80117c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80117ca:	d81c      	bhi.n	8011806 <USB_EPStartXfer+0x78c>
 80117cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80117d0:	085b      	lsrs	r3, r3, #1
 80117d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80117d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80117da:	f003 0301 	and.w	r3, r3, #1
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d004      	beq.n	80117ec <USB_EPStartXfer+0x772>
 80117e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80117e6:	3301      	adds	r3, #1
 80117e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80117ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80117ee:	881b      	ldrh	r3, [r3, #0]
 80117f0:	b29a      	uxth	r2, r3
 80117f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80117f6:	b29b      	uxth	r3, r3
 80117f8:	029b      	lsls	r3, r3, #10
 80117fa:	b29b      	uxth	r3, r3
 80117fc:	4313      	orrs	r3, r2
 80117fe:	b29a      	uxth	r2, r3
 8011800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011802:	801a      	strh	r2, [r3, #0]
 8011804:	e03a      	b.n	801187c <USB_EPStartXfer+0x802>
 8011806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801180a:	095b      	lsrs	r3, r3, #5
 801180c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011814:	f003 031f 	and.w	r3, r3, #31
 8011818:	2b00      	cmp	r3, #0
 801181a:	d104      	bne.n	8011826 <USB_EPStartXfer+0x7ac>
 801181c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011820:	3b01      	subs	r3, #1
 8011822:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011826:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011828:	881b      	ldrh	r3, [r3, #0]
 801182a:	b29a      	uxth	r2, r3
 801182c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011830:	b29b      	uxth	r3, r3
 8011832:	029b      	lsls	r3, r3, #10
 8011834:	b29b      	uxth	r3, r3
 8011836:	4313      	orrs	r3, r2
 8011838:	b29b      	uxth	r3, r3
 801183a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801183e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011842:	b29a      	uxth	r2, r3
 8011844:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011846:	801a      	strh	r2, [r3, #0]
 8011848:	e018      	b.n	801187c <USB_EPStartXfer+0x802>
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	785b      	ldrb	r3, [r3, #1]
 801184e:	2b01      	cmp	r3, #1
 8011850:	d114      	bne.n	801187c <USB_EPStartXfer+0x802>
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011858:	b29b      	uxth	r3, r3
 801185a:	461a      	mov	r2, r3
 801185c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801185e:	4413      	add	r3, r2
 8011860:	673b      	str	r3, [r7, #112]	@ 0x70
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	781b      	ldrb	r3, [r3, #0]
 8011866:	00da      	lsls	r2, r3, #3
 8011868:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801186a:	4413      	add	r3, r2
 801186c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011870:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011876:	b29a      	uxth	r2, r3
 8011878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801187a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	895b      	ldrh	r3, [r3, #10]
 8011880:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	6959      	ldr	r1, [r3, #20]
 8011888:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801188c:	b29b      	uxth	r3, r3
 801188e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011892:	6878      	ldr	r0, [r7, #4]
 8011894:	f000 fad5 	bl	8011e42 <USB_WritePMA>
 8011898:	e09e      	b.n	80119d8 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	785b      	ldrb	r3, [r3, #1]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d16b      	bne.n	801197a <USB_EPStartXfer+0x900>
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80118ac:	b29b      	uxth	r3, r3
 80118ae:	461a      	mov	r2, r3
 80118b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80118b2:	4413      	add	r3, r2
 80118b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	781b      	ldrb	r3, [r3, #0]
 80118ba:	00da      	lsls	r2, r3, #3
 80118bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80118be:	4413      	add	r3, r2
 80118c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80118c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80118c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80118c8:	881b      	ldrh	r3, [r3, #0]
 80118ca:	b29b      	uxth	r3, r3
 80118cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80118d0:	b29a      	uxth	r2, r3
 80118d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80118d4:	801a      	strh	r2, [r3, #0]
 80118d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d10a      	bne.n	80118f4 <USB_EPStartXfer+0x87a>
 80118de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80118e0:	881b      	ldrh	r3, [r3, #0]
 80118e2:	b29b      	uxth	r3, r3
 80118e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80118e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80118ec:	b29a      	uxth	r2, r3
 80118ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80118f0:	801a      	strh	r2, [r3, #0]
 80118f2:	e063      	b.n	80119bc <USB_EPStartXfer+0x942>
 80118f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80118f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80118fa:	d81c      	bhi.n	8011936 <USB_EPStartXfer+0x8bc>
 80118fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011900:	085b      	lsrs	r3, r3, #1
 8011902:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801190a:	f003 0301 	and.w	r3, r3, #1
 801190e:	2b00      	cmp	r3, #0
 8011910:	d004      	beq.n	801191c <USB_EPStartXfer+0x8a2>
 8011912:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011916:	3301      	adds	r3, #1
 8011918:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801191c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801191e:	881b      	ldrh	r3, [r3, #0]
 8011920:	b29a      	uxth	r2, r3
 8011922:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011926:	b29b      	uxth	r3, r3
 8011928:	029b      	lsls	r3, r3, #10
 801192a:	b29b      	uxth	r3, r3
 801192c:	4313      	orrs	r3, r2
 801192e:	b29a      	uxth	r2, r3
 8011930:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011932:	801a      	strh	r2, [r3, #0]
 8011934:	e042      	b.n	80119bc <USB_EPStartXfer+0x942>
 8011936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801193a:	095b      	lsrs	r3, r3, #5
 801193c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011940:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011944:	f003 031f 	and.w	r3, r3, #31
 8011948:	2b00      	cmp	r3, #0
 801194a:	d104      	bne.n	8011956 <USB_EPStartXfer+0x8dc>
 801194c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011950:	3b01      	subs	r3, #1
 8011952:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011956:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011958:	881b      	ldrh	r3, [r3, #0]
 801195a:	b29a      	uxth	r2, r3
 801195c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011960:	b29b      	uxth	r3, r3
 8011962:	029b      	lsls	r3, r3, #10
 8011964:	b29b      	uxth	r3, r3
 8011966:	4313      	orrs	r3, r2
 8011968:	b29b      	uxth	r3, r3
 801196a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801196e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011972:	b29a      	uxth	r2, r3
 8011974:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011976:	801a      	strh	r2, [r3, #0]
 8011978:	e020      	b.n	80119bc <USB_EPStartXfer+0x942>
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	785b      	ldrb	r3, [r3, #1]
 801197e:	2b01      	cmp	r3, #1
 8011980:	d11c      	bne.n	80119bc <USB_EPStartXfer+0x942>
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801198e:	b29b      	uxth	r3, r3
 8011990:	461a      	mov	r2, r3
 8011992:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011996:	4413      	add	r3, r2
 8011998:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	781b      	ldrb	r3, [r3, #0]
 80119a0:	00da      	lsls	r2, r3, #3
 80119a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80119a6:	4413      	add	r3, r2
 80119a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80119ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80119b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80119b4:	b29a      	uxth	r2, r3
 80119b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80119ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	891b      	ldrh	r3, [r3, #8]
 80119c0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80119c4:	683b      	ldr	r3, [r7, #0]
 80119c6:	6959      	ldr	r1, [r3, #20]
 80119c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80119cc:	b29b      	uxth	r3, r3
 80119ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	f000 fa35 	bl	8011e42 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80119d8:	687a      	ldr	r2, [r7, #4]
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	781b      	ldrb	r3, [r3, #0]
 80119de:	009b      	lsls	r3, r3, #2
 80119e0:	4413      	add	r3, r2
 80119e2:	881b      	ldrh	r3, [r3, #0]
 80119e4:	b29b      	uxth	r3, r3
 80119e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80119ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80119ee:	817b      	strh	r3, [r7, #10]
 80119f0:	897b      	ldrh	r3, [r7, #10]
 80119f2:	f083 0310 	eor.w	r3, r3, #16
 80119f6:	817b      	strh	r3, [r7, #10]
 80119f8:	897b      	ldrh	r3, [r7, #10]
 80119fa:	f083 0320 	eor.w	r3, r3, #32
 80119fe:	817b      	strh	r3, [r7, #10]
 8011a00:	687a      	ldr	r2, [r7, #4]
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	009b      	lsls	r3, r3, #2
 8011a08:	441a      	add	r2, r3
 8011a0a:	897b      	ldrh	r3, [r7, #10]
 8011a0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a1c:	b29b      	uxth	r3, r3
 8011a1e:	8013      	strh	r3, [r2, #0]
 8011a20:	e0d5      	b.n	8011bce <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	7b1b      	ldrb	r3, [r3, #12]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d156      	bne.n	8011ad8 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	699b      	ldr	r3, [r3, #24]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d122      	bne.n	8011a78 <USB_EPStartXfer+0x9fe>
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	78db      	ldrb	r3, [r3, #3]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d11e      	bne.n	8011a78 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8011a3a:	687a      	ldr	r2, [r7, #4]
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	781b      	ldrb	r3, [r3, #0]
 8011a40:	009b      	lsls	r3, r3, #2
 8011a42:	4413      	add	r3, r2
 8011a44:	881b      	ldrh	r3, [r3, #0]
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a50:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8011a54:	687a      	ldr	r2, [r7, #4]
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	009b      	lsls	r3, r3, #2
 8011a5c:	441a      	add	r2, r3
 8011a5e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8011a62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a6a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a72:	b29b      	uxth	r3, r3
 8011a74:	8013      	strh	r3, [r2, #0]
 8011a76:	e01d      	b.n	8011ab4 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8011a78:	687a      	ldr	r2, [r7, #4]
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	781b      	ldrb	r3, [r3, #0]
 8011a7e:	009b      	lsls	r3, r3, #2
 8011a80:	4413      	add	r3, r2
 8011a82:	881b      	ldrh	r3, [r3, #0]
 8011a84:	b29b      	uxth	r3, r3
 8011a86:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8011a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a8e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8011a92:	687a      	ldr	r2, [r7, #4]
 8011a94:	683b      	ldr	r3, [r7, #0]
 8011a96:	781b      	ldrb	r3, [r3, #0]
 8011a98:	009b      	lsls	r3, r3, #2
 8011a9a:	441a      	add	r2, r3
 8011a9c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8011aa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011aa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011aa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ab0:	b29b      	uxth	r3, r3
 8011ab2:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	699a      	ldr	r2, [r3, #24]
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	691b      	ldr	r3, [r3, #16]
 8011abc:	429a      	cmp	r2, r3
 8011abe:	d907      	bls.n	8011ad0 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	699a      	ldr	r2, [r3, #24]
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	691b      	ldr	r3, [r3, #16]
 8011ac8:	1ad2      	subs	r2, r2, r3
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	619a      	str	r2, [r3, #24]
 8011ace:	e054      	b.n	8011b7a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	619a      	str	r2, [r3, #24]
 8011ad6:	e050      	b.n	8011b7a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	78db      	ldrb	r3, [r3, #3]
 8011adc:	2b02      	cmp	r3, #2
 8011ade:	d142      	bne.n	8011b66 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	69db      	ldr	r3, [r3, #28]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d048      	beq.n	8011b7a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8011ae8:	687a      	ldr	r2, [r7, #4]
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	781b      	ldrb	r3, [r3, #0]
 8011aee:	009b      	lsls	r3, r3, #2
 8011af0:	4413      	add	r3, r2
 8011af2:	881b      	ldrh	r3, [r3, #0]
 8011af4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011af8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011afc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d005      	beq.n	8011b10 <USB_EPStartXfer+0xa96>
 8011b04:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d10b      	bne.n	8011b28 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011b10:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011b14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d12e      	bne.n	8011b7a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011b1c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d128      	bne.n	8011b7a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8011b28:	687a      	ldr	r2, [r7, #4]
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	781b      	ldrb	r3, [r3, #0]
 8011b2e:	009b      	lsls	r3, r3, #2
 8011b30:	4413      	add	r3, r2
 8011b32:	881b      	ldrh	r3, [r3, #0]
 8011b34:	b29b      	uxth	r3, r3
 8011b36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b3e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8011b42:	687a      	ldr	r2, [r7, #4]
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	009b      	lsls	r3, r3, #2
 8011b4a:	441a      	add	r2, r3
 8011b4c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8011b50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011b5c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	8013      	strh	r3, [r2, #0]
 8011b64:	e009      	b.n	8011b7a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	78db      	ldrb	r3, [r3, #3]
 8011b6a:	2b01      	cmp	r3, #1
 8011b6c:	d103      	bne.n	8011b76 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8011b6e:	683b      	ldr	r3, [r7, #0]
 8011b70:	2200      	movs	r2, #0
 8011b72:	619a      	str	r2, [r3, #24]
 8011b74:	e001      	b.n	8011b7a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8011b76:	2301      	movs	r3, #1
 8011b78:	e02a      	b.n	8011bd0 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011b7a:	687a      	ldr	r2, [r7, #4]
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	781b      	ldrb	r3, [r3, #0]
 8011b80:	009b      	lsls	r3, r3, #2
 8011b82:	4413      	add	r3, r2
 8011b84:	881b      	ldrh	r3, [r3, #0]
 8011b86:	b29b      	uxth	r3, r3
 8011b88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011b8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b90:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011b94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011b98:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011b9c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011ba0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011ba4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011ba8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011bac:	687a      	ldr	r2, [r7, #4]
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	781b      	ldrb	r3, [r3, #0]
 8011bb2:	009b      	lsls	r3, r3, #2
 8011bb4:	441a      	add	r2, r3
 8011bb6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011bba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011bbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011bc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011bce:	2300      	movs	r3, #0
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	37b0      	adds	r7, #176	@ 0xb0
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}

08011bd8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011bd8:	b480      	push	{r7}
 8011bda:	b085      	sub	sp, #20
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	785b      	ldrb	r3, [r3, #1]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d020      	beq.n	8011c2c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8011bea:	687a      	ldr	r2, [r7, #4]
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	781b      	ldrb	r3, [r3, #0]
 8011bf0:	009b      	lsls	r3, r3, #2
 8011bf2:	4413      	add	r3, r2
 8011bf4:	881b      	ldrh	r3, [r3, #0]
 8011bf6:	b29b      	uxth	r3, r3
 8011bf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011bfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011c00:	81bb      	strh	r3, [r7, #12]
 8011c02:	89bb      	ldrh	r3, [r7, #12]
 8011c04:	f083 0310 	eor.w	r3, r3, #16
 8011c08:	81bb      	strh	r3, [r7, #12]
 8011c0a:	687a      	ldr	r2, [r7, #4]
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	781b      	ldrb	r3, [r3, #0]
 8011c10:	009b      	lsls	r3, r3, #2
 8011c12:	441a      	add	r2, r3
 8011c14:	89bb      	ldrh	r3, [r7, #12]
 8011c16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	8013      	strh	r3, [r2, #0]
 8011c2a:	e01f      	b.n	8011c6c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8011c2c:	687a      	ldr	r2, [r7, #4]
 8011c2e:	683b      	ldr	r3, [r7, #0]
 8011c30:	781b      	ldrb	r3, [r3, #0]
 8011c32:	009b      	lsls	r3, r3, #2
 8011c34:	4413      	add	r3, r2
 8011c36:	881b      	ldrh	r3, [r3, #0]
 8011c38:	b29b      	uxth	r3, r3
 8011c3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c42:	81fb      	strh	r3, [r7, #14]
 8011c44:	89fb      	ldrh	r3, [r7, #14]
 8011c46:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011c4a:	81fb      	strh	r3, [r7, #14]
 8011c4c:	687a      	ldr	r2, [r7, #4]
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	781b      	ldrb	r3, [r3, #0]
 8011c52:	009b      	lsls	r3, r3, #2
 8011c54:	441a      	add	r2, r3
 8011c56:	89fb      	ldrh	r3, [r7, #14]
 8011c58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c68:	b29b      	uxth	r3, r3
 8011c6a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011c6c:	2300      	movs	r3, #0
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	3714      	adds	r7, #20
 8011c72:	46bd      	mov	sp, r7
 8011c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c78:	4770      	bx	lr

08011c7a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011c7a:	b480      	push	{r7}
 8011c7c:	b087      	sub	sp, #28
 8011c7e:	af00      	add	r7, sp, #0
 8011c80:	6078      	str	r0, [r7, #4]
 8011c82:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	785b      	ldrb	r3, [r3, #1]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d04c      	beq.n	8011d26 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011c8c:	687a      	ldr	r2, [r7, #4]
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	781b      	ldrb	r3, [r3, #0]
 8011c92:	009b      	lsls	r3, r3, #2
 8011c94:	4413      	add	r3, r2
 8011c96:	881b      	ldrh	r3, [r3, #0]
 8011c98:	823b      	strh	r3, [r7, #16]
 8011c9a:	8a3b      	ldrh	r3, [r7, #16]
 8011c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d01b      	beq.n	8011cdc <USB_EPClearStall+0x62>
 8011ca4:	687a      	ldr	r2, [r7, #4]
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	781b      	ldrb	r3, [r3, #0]
 8011caa:	009b      	lsls	r3, r3, #2
 8011cac:	4413      	add	r3, r2
 8011cae:	881b      	ldrh	r3, [r3, #0]
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011cba:	81fb      	strh	r3, [r7, #14]
 8011cbc:	687a      	ldr	r2, [r7, #4]
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	781b      	ldrb	r3, [r3, #0]
 8011cc2:	009b      	lsls	r3, r3, #2
 8011cc4:	441a      	add	r2, r3
 8011cc6:	89fb      	ldrh	r3, [r7, #14]
 8011cc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011ccc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011cd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011cd4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	78db      	ldrb	r3, [r3, #3]
 8011ce0:	2b01      	cmp	r3, #1
 8011ce2:	d06c      	beq.n	8011dbe <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011ce4:	687a      	ldr	r2, [r7, #4]
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	781b      	ldrb	r3, [r3, #0]
 8011cea:	009b      	lsls	r3, r3, #2
 8011cec:	4413      	add	r3, r2
 8011cee:	881b      	ldrh	r3, [r3, #0]
 8011cf0:	b29b      	uxth	r3, r3
 8011cf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011cf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011cfa:	81bb      	strh	r3, [r7, #12]
 8011cfc:	89bb      	ldrh	r3, [r7, #12]
 8011cfe:	f083 0320 	eor.w	r3, r3, #32
 8011d02:	81bb      	strh	r3, [r7, #12]
 8011d04:	687a      	ldr	r2, [r7, #4]
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	781b      	ldrb	r3, [r3, #0]
 8011d0a:	009b      	lsls	r3, r3, #2
 8011d0c:	441a      	add	r2, r3
 8011d0e:	89bb      	ldrh	r3, [r7, #12]
 8011d10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d20:	b29b      	uxth	r3, r3
 8011d22:	8013      	strh	r3, [r2, #0]
 8011d24:	e04b      	b.n	8011dbe <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011d26:	687a      	ldr	r2, [r7, #4]
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	781b      	ldrb	r3, [r3, #0]
 8011d2c:	009b      	lsls	r3, r3, #2
 8011d2e:	4413      	add	r3, r2
 8011d30:	881b      	ldrh	r3, [r3, #0]
 8011d32:	82fb      	strh	r3, [r7, #22]
 8011d34:	8afb      	ldrh	r3, [r7, #22]
 8011d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d01b      	beq.n	8011d76 <USB_EPClearStall+0xfc>
 8011d3e:	687a      	ldr	r2, [r7, #4]
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	781b      	ldrb	r3, [r3, #0]
 8011d44:	009b      	lsls	r3, r3, #2
 8011d46:	4413      	add	r3, r2
 8011d48:	881b      	ldrh	r3, [r3, #0]
 8011d4a:	b29b      	uxth	r3, r3
 8011d4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d54:	82bb      	strh	r3, [r7, #20]
 8011d56:	687a      	ldr	r2, [r7, #4]
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	781b      	ldrb	r3, [r3, #0]
 8011d5c:	009b      	lsls	r3, r3, #2
 8011d5e:	441a      	add	r2, r3
 8011d60:	8abb      	ldrh	r3, [r7, #20]
 8011d62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011d76:	687a      	ldr	r2, [r7, #4]
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	781b      	ldrb	r3, [r3, #0]
 8011d7c:	009b      	lsls	r3, r3, #2
 8011d7e:	4413      	add	r3, r2
 8011d80:	881b      	ldrh	r3, [r3, #0]
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011d88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d8c:	827b      	strh	r3, [r7, #18]
 8011d8e:	8a7b      	ldrh	r3, [r7, #18]
 8011d90:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011d94:	827b      	strh	r3, [r7, #18]
 8011d96:	8a7b      	ldrh	r3, [r7, #18]
 8011d98:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011d9c:	827b      	strh	r3, [r7, #18]
 8011d9e:	687a      	ldr	r2, [r7, #4]
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	781b      	ldrb	r3, [r3, #0]
 8011da4:	009b      	lsls	r3, r3, #2
 8011da6:	441a      	add	r2, r3
 8011da8:	8a7b      	ldrh	r3, [r7, #18]
 8011daa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011dae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011dba:	b29b      	uxth	r3, r3
 8011dbc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011dbe:	2300      	movs	r3, #0
}
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	371c      	adds	r7, #28
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dca:	4770      	bx	lr

08011dcc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b083      	sub	sp, #12
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
 8011dd4:	460b      	mov	r3, r1
 8011dd6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8011dd8:	78fb      	ldrb	r3, [r7, #3]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d103      	bne.n	8011de6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	2280      	movs	r2, #128	@ 0x80
 8011de2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8011de6:	2300      	movs	r3, #0
}
 8011de8:	4618      	mov	r0, r3
 8011dea:	370c      	adds	r7, #12
 8011dec:	46bd      	mov	sp, r7
 8011dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df2:	4770      	bx	lr

08011df4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8011df4:	b480      	push	{r7}
 8011df6:	b083      	sub	sp, #12
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8011e02:	b29b      	uxth	r3, r3
 8011e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e0c:	b29a      	uxth	r2, r3
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8011e14:	2300      	movs	r3, #0
}
 8011e16:	4618      	mov	r0, r3
 8011e18:	370c      	adds	r7, #12
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e20:	4770      	bx	lr

08011e22 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8011e22:	b480      	push	{r7}
 8011e24:	b085      	sub	sp, #20
 8011e26:	af00      	add	r7, sp, #0
 8011e28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8011e30:	b29b      	uxth	r3, r3
 8011e32:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8011e34:	68fb      	ldr	r3, [r7, #12]
}
 8011e36:	4618      	mov	r0, r3
 8011e38:	3714      	adds	r7, #20
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e40:	4770      	bx	lr

08011e42 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011e42:	b480      	push	{r7}
 8011e44:	b08b      	sub	sp, #44	@ 0x2c
 8011e46:	af00      	add	r7, sp, #0
 8011e48:	60f8      	str	r0, [r7, #12]
 8011e4a:	60b9      	str	r1, [r7, #8]
 8011e4c:	4611      	mov	r1, r2
 8011e4e:	461a      	mov	r2, r3
 8011e50:	460b      	mov	r3, r1
 8011e52:	80fb      	strh	r3, [r7, #6]
 8011e54:	4613      	mov	r3, r2
 8011e56:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011e58:	88bb      	ldrh	r3, [r7, #4]
 8011e5a:	3301      	adds	r3, #1
 8011e5c:	085b      	lsrs	r3, r3, #1
 8011e5e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011e68:	88fa      	ldrh	r2, [r7, #6]
 8011e6a:	697b      	ldr	r3, [r7, #20]
 8011e6c:	4413      	add	r3, r2
 8011e6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011e72:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011e74:	69bb      	ldr	r3, [r7, #24]
 8011e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e78:	e01b      	b.n	8011eb2 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8011e7a:	69fb      	ldr	r3, [r7, #28]
 8011e7c:	781b      	ldrb	r3, [r3, #0]
 8011e7e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8011e80:	69fb      	ldr	r3, [r7, #28]
 8011e82:	3301      	adds	r3, #1
 8011e84:	781b      	ldrb	r3, [r3, #0]
 8011e86:	021b      	lsls	r3, r3, #8
 8011e88:	b21a      	sxth	r2, r3
 8011e8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011e8e:	4313      	orrs	r3, r2
 8011e90:	b21b      	sxth	r3, r3
 8011e92:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8011e94:	6a3b      	ldr	r3, [r7, #32]
 8011e96:	8a7a      	ldrh	r2, [r7, #18]
 8011e98:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8011e9a:	6a3b      	ldr	r3, [r7, #32]
 8011e9c:	3302      	adds	r3, #2
 8011e9e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8011ea0:	69fb      	ldr	r3, [r7, #28]
 8011ea2:	3301      	adds	r3, #1
 8011ea4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8011ea6:	69fb      	ldr	r3, [r7, #28]
 8011ea8:	3301      	adds	r3, #1
 8011eaa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eae:	3b01      	subs	r3, #1
 8011eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8011eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d1e0      	bne.n	8011e7a <USB_WritePMA+0x38>
  }
}
 8011eb8:	bf00      	nop
 8011eba:	bf00      	nop
 8011ebc:	372c      	adds	r7, #44	@ 0x2c
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec4:	4770      	bx	lr

08011ec6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011ec6:	b480      	push	{r7}
 8011ec8:	b08b      	sub	sp, #44	@ 0x2c
 8011eca:	af00      	add	r7, sp, #0
 8011ecc:	60f8      	str	r0, [r7, #12]
 8011ece:	60b9      	str	r1, [r7, #8]
 8011ed0:	4611      	mov	r1, r2
 8011ed2:	461a      	mov	r2, r3
 8011ed4:	460b      	mov	r3, r1
 8011ed6:	80fb      	strh	r3, [r7, #6]
 8011ed8:	4613      	mov	r3, r2
 8011eda:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8011edc:	88bb      	ldrh	r3, [r7, #4]
 8011ede:	085b      	lsrs	r3, r3, #1
 8011ee0:	b29b      	uxth	r3, r3
 8011ee2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011ee8:	68bb      	ldr	r3, [r7, #8]
 8011eea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011eec:	88fa      	ldrh	r2, [r7, #6]
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	4413      	add	r3, r2
 8011ef2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011ef6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011ef8:	69bb      	ldr	r3, [r7, #24]
 8011efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8011efc:	e018      	b.n	8011f30 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8011efe:	6a3b      	ldr	r3, [r7, #32]
 8011f00:	881b      	ldrh	r3, [r3, #0]
 8011f02:	b29b      	uxth	r3, r3
 8011f04:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8011f06:	6a3b      	ldr	r3, [r7, #32]
 8011f08:	3302      	adds	r3, #2
 8011f0a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011f0c:	693b      	ldr	r3, [r7, #16]
 8011f0e:	b2da      	uxtb	r2, r3
 8011f10:	69fb      	ldr	r3, [r7, #28]
 8011f12:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011f14:	69fb      	ldr	r3, [r7, #28]
 8011f16:	3301      	adds	r3, #1
 8011f18:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	0a1b      	lsrs	r3, r3, #8
 8011f1e:	b2da      	uxtb	r2, r3
 8011f20:	69fb      	ldr	r3, [r7, #28]
 8011f22:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011f24:	69fb      	ldr	r3, [r7, #28]
 8011f26:	3301      	adds	r3, #1
 8011f28:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f2c:	3b01      	subs	r3, #1
 8011f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d1e3      	bne.n	8011efe <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8011f36:	88bb      	ldrh	r3, [r7, #4]
 8011f38:	f003 0301 	and.w	r3, r3, #1
 8011f3c:	b29b      	uxth	r3, r3
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d007      	beq.n	8011f52 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8011f42:	6a3b      	ldr	r3, [r7, #32]
 8011f44:	881b      	ldrh	r3, [r3, #0]
 8011f46:	b29b      	uxth	r3, r3
 8011f48:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011f4a:	693b      	ldr	r3, [r7, #16]
 8011f4c:	b2da      	uxtb	r2, r3
 8011f4e:	69fb      	ldr	r3, [r7, #28]
 8011f50:	701a      	strb	r2, [r3, #0]
  }
}
 8011f52:	bf00      	nop
 8011f54:	372c      	adds	r7, #44	@ 0x2c
 8011f56:	46bd      	mov	sp, r7
 8011f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5c:	4770      	bx	lr

08011f5e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011f5e:	b580      	push	{r7, lr}
 8011f60:	b084      	sub	sp, #16
 8011f62:	af00      	add	r7, sp, #0
 8011f64:	6078      	str	r0, [r7, #4]
 8011f66:	460b      	mov	r3, r1
 8011f68:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011f6a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8011f6e:	f002 f8f9 	bl	8014164 <USBD_static_malloc>
 8011f72:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d105      	bne.n	8011f86 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8011f82:	2302      	movs	r3, #2
 8011f84:	e066      	b.n	8012054 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	68fa      	ldr	r2, [r7, #12]
 8011f8a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	7c1b      	ldrb	r3, [r3, #16]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d119      	bne.n	8011fca <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011f96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011f9a:	2202      	movs	r2, #2
 8011f9c:	2181      	movs	r1, #129	@ 0x81
 8011f9e:	6878      	ldr	r0, [r7, #4]
 8011fa0:	f001 ff87 	bl	8013eb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	2201      	movs	r2, #1
 8011fa8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011faa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011fae:	2202      	movs	r2, #2
 8011fb0:	2101      	movs	r1, #1
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f001 ff7d 	bl	8013eb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	2201      	movs	r2, #1
 8011fbc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2210      	movs	r2, #16
 8011fc4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8011fc8:	e016      	b.n	8011ff8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011fca:	2340      	movs	r3, #64	@ 0x40
 8011fcc:	2202      	movs	r2, #2
 8011fce:	2181      	movs	r1, #129	@ 0x81
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f001 ff6e 	bl	8013eb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2201      	movs	r2, #1
 8011fda:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011fdc:	2340      	movs	r3, #64	@ 0x40
 8011fde:	2202      	movs	r2, #2
 8011fe0:	2101      	movs	r1, #1
 8011fe2:	6878      	ldr	r0, [r7, #4]
 8011fe4:	f001 ff65 	bl	8013eb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2201      	movs	r2, #1
 8011fec:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2210      	movs	r2, #16
 8011ff4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011ff8:	2308      	movs	r3, #8
 8011ffa:	2203      	movs	r2, #3
 8011ffc:	2182      	movs	r1, #130	@ 0x82
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f001 ff57 	bl	8013eb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	2201      	movs	r2, #1
 8012008:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	2200      	movs	r2, #0
 801201a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	2200      	movs	r2, #0
 8012022:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	7c1b      	ldrb	r3, [r3, #16]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d109      	bne.n	8012042 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012034:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012038:	2101      	movs	r1, #1
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f002 f828 	bl	8014090 <USBD_LL_PrepareReceive>
 8012040:	e007      	b.n	8012052 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012048:	2340      	movs	r3, #64	@ 0x40
 801204a:	2101      	movs	r1, #1
 801204c:	6878      	ldr	r0, [r7, #4]
 801204e:	f002 f81f 	bl	8014090 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012052:	2300      	movs	r3, #0
}
 8012054:	4618      	mov	r0, r3
 8012056:	3710      	adds	r7, #16
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}

0801205c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b082      	sub	sp, #8
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
 8012064:	460b      	mov	r3, r1
 8012066:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8012068:	2181      	movs	r1, #129	@ 0x81
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f001 ff47 	bl	8013efe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	2200      	movs	r2, #0
 8012074:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8012076:	2101      	movs	r1, #1
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f001 ff40 	bl	8013efe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2200      	movs	r2, #0
 8012082:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8012086:	2182      	movs	r1, #130	@ 0x82
 8012088:	6878      	ldr	r0, [r7, #4]
 801208a:	f001 ff38 	bl	8013efe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2200      	movs	r2, #0
 8012092:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	2200      	movs	r2, #0
 801209a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d00e      	beq.n	80120c6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80120ae:	685b      	ldr	r3, [r3, #4]
 80120b0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80120b8:	4618      	mov	r0, r3
 80120ba:	f002 f861 	bl	8014180 <USBD_static_free>
    pdev->pClassData = NULL;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2200      	movs	r2, #0
 80120c2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80120c6:	2300      	movs	r3, #0
}
 80120c8:	4618      	mov	r0, r3
 80120ca:	3708      	adds	r7, #8
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}

080120d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b086      	sub	sp, #24
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
 80120d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80120e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80120e2:	2300      	movs	r3, #0
 80120e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80120e6:	2300      	movs	r3, #0
 80120e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80120ea:	2300      	movs	r3, #0
 80120ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80120ee:	693b      	ldr	r3, [r7, #16]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d101      	bne.n	80120f8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80120f4:	2303      	movs	r3, #3
 80120f6:	e0af      	b.n	8012258 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80120f8:	683b      	ldr	r3, [r7, #0]
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012100:	2b00      	cmp	r3, #0
 8012102:	d03f      	beq.n	8012184 <USBD_CDC_Setup+0xb4>
 8012104:	2b20      	cmp	r3, #32
 8012106:	f040 809f 	bne.w	8012248 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801210a:	683b      	ldr	r3, [r7, #0]
 801210c:	88db      	ldrh	r3, [r3, #6]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d02e      	beq.n	8012170 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	781b      	ldrb	r3, [r3, #0]
 8012116:	b25b      	sxtb	r3, r3
 8012118:	2b00      	cmp	r3, #0
 801211a:	da16      	bge.n	801214a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012122:	689b      	ldr	r3, [r3, #8]
 8012124:	683a      	ldr	r2, [r7, #0]
 8012126:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8012128:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801212a:	683a      	ldr	r2, [r7, #0]
 801212c:	88d2      	ldrh	r2, [r2, #6]
 801212e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012130:	683b      	ldr	r3, [r7, #0]
 8012132:	88db      	ldrh	r3, [r3, #6]
 8012134:	2b07      	cmp	r3, #7
 8012136:	bf28      	it	cs
 8012138:	2307      	movcs	r3, #7
 801213a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801213c:	693b      	ldr	r3, [r7, #16]
 801213e:	89fa      	ldrh	r2, [r7, #14]
 8012140:	4619      	mov	r1, r3
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f001 facd 	bl	80136e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8012148:	e085      	b.n	8012256 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801214a:	683b      	ldr	r3, [r7, #0]
 801214c:	785a      	ldrb	r2, [r3, #1]
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	88db      	ldrh	r3, [r3, #6]
 8012158:	b2da      	uxtb	r2, r3
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8012160:	6939      	ldr	r1, [r7, #16]
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	88db      	ldrh	r3, [r3, #6]
 8012166:	461a      	mov	r2, r3
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f001 fae6 	bl	801373a <USBD_CtlPrepareRx>
      break;
 801216e:	e072      	b.n	8012256 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012176:	689b      	ldr	r3, [r3, #8]
 8012178:	683a      	ldr	r2, [r7, #0]
 801217a:	7850      	ldrb	r0, [r2, #1]
 801217c:	2200      	movs	r2, #0
 801217e:	6839      	ldr	r1, [r7, #0]
 8012180:	4798      	blx	r3
      break;
 8012182:	e068      	b.n	8012256 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	785b      	ldrb	r3, [r3, #1]
 8012188:	2b0b      	cmp	r3, #11
 801218a:	d852      	bhi.n	8012232 <USBD_CDC_Setup+0x162>
 801218c:	a201      	add	r2, pc, #4	@ (adr r2, 8012194 <USBD_CDC_Setup+0xc4>)
 801218e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012192:	bf00      	nop
 8012194:	080121c5 	.word	0x080121c5
 8012198:	08012241 	.word	0x08012241
 801219c:	08012233 	.word	0x08012233
 80121a0:	08012233 	.word	0x08012233
 80121a4:	08012233 	.word	0x08012233
 80121a8:	08012233 	.word	0x08012233
 80121ac:	08012233 	.word	0x08012233
 80121b0:	08012233 	.word	0x08012233
 80121b4:	08012233 	.word	0x08012233
 80121b8:	08012233 	.word	0x08012233
 80121bc:	080121ef 	.word	0x080121ef
 80121c0:	08012219 	.word	0x08012219
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80121ca:	b2db      	uxtb	r3, r3
 80121cc:	2b03      	cmp	r3, #3
 80121ce:	d107      	bne.n	80121e0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80121d0:	f107 030a 	add.w	r3, r7, #10
 80121d4:	2202      	movs	r2, #2
 80121d6:	4619      	mov	r1, r3
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	f001 fa82 	bl	80136e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80121de:	e032      	b.n	8012246 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80121e0:	6839      	ldr	r1, [r7, #0]
 80121e2:	6878      	ldr	r0, [r7, #4]
 80121e4:	f001 fa0c 	bl	8013600 <USBD_CtlError>
            ret = USBD_FAIL;
 80121e8:	2303      	movs	r3, #3
 80121ea:	75fb      	strb	r3, [r7, #23]
          break;
 80121ec:	e02b      	b.n	8012246 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80121f4:	b2db      	uxtb	r3, r3
 80121f6:	2b03      	cmp	r3, #3
 80121f8:	d107      	bne.n	801220a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80121fa:	f107 030d 	add.w	r3, r7, #13
 80121fe:	2201      	movs	r2, #1
 8012200:	4619      	mov	r1, r3
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f001 fa6d 	bl	80136e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012208:	e01d      	b.n	8012246 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801220a:	6839      	ldr	r1, [r7, #0]
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f001 f9f7 	bl	8013600 <USBD_CtlError>
            ret = USBD_FAIL;
 8012212:	2303      	movs	r3, #3
 8012214:	75fb      	strb	r3, [r7, #23]
          break;
 8012216:	e016      	b.n	8012246 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801221e:	b2db      	uxtb	r3, r3
 8012220:	2b03      	cmp	r3, #3
 8012222:	d00f      	beq.n	8012244 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8012224:	6839      	ldr	r1, [r7, #0]
 8012226:	6878      	ldr	r0, [r7, #4]
 8012228:	f001 f9ea 	bl	8013600 <USBD_CtlError>
            ret = USBD_FAIL;
 801222c:	2303      	movs	r3, #3
 801222e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012230:	e008      	b.n	8012244 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012232:	6839      	ldr	r1, [r7, #0]
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	f001 f9e3 	bl	8013600 <USBD_CtlError>
          ret = USBD_FAIL;
 801223a:	2303      	movs	r3, #3
 801223c:	75fb      	strb	r3, [r7, #23]
          break;
 801223e:	e002      	b.n	8012246 <USBD_CDC_Setup+0x176>
          break;
 8012240:	bf00      	nop
 8012242:	e008      	b.n	8012256 <USBD_CDC_Setup+0x186>
          break;
 8012244:	bf00      	nop
      }
      break;
 8012246:	e006      	b.n	8012256 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8012248:	6839      	ldr	r1, [r7, #0]
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f001 f9d8 	bl	8013600 <USBD_CtlError>
      ret = USBD_FAIL;
 8012250:	2303      	movs	r3, #3
 8012252:	75fb      	strb	r3, [r7, #23]
      break;
 8012254:	bf00      	nop
  }

  return (uint8_t)ret;
 8012256:	7dfb      	ldrb	r3, [r7, #23]
}
 8012258:	4618      	mov	r0, r3
 801225a:	3718      	adds	r7, #24
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}

08012260 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b084      	sub	sp, #16
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
 8012268:	460b      	mov	r3, r1
 801226a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012272:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801227a:	2b00      	cmp	r3, #0
 801227c:	d101      	bne.n	8012282 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801227e:	2303      	movs	r3, #3
 8012280:	e04f      	b.n	8012322 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012288:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801228a:	78fa      	ldrb	r2, [r7, #3]
 801228c:	6879      	ldr	r1, [r7, #4]
 801228e:	4613      	mov	r3, r2
 8012290:	009b      	lsls	r3, r3, #2
 8012292:	4413      	add	r3, r2
 8012294:	009b      	lsls	r3, r3, #2
 8012296:	440b      	add	r3, r1
 8012298:	3318      	adds	r3, #24
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d029      	beq.n	80122f4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80122a0:	78fa      	ldrb	r2, [r7, #3]
 80122a2:	6879      	ldr	r1, [r7, #4]
 80122a4:	4613      	mov	r3, r2
 80122a6:	009b      	lsls	r3, r3, #2
 80122a8:	4413      	add	r3, r2
 80122aa:	009b      	lsls	r3, r3, #2
 80122ac:	440b      	add	r3, r1
 80122ae:	3318      	adds	r3, #24
 80122b0:	681a      	ldr	r2, [r3, #0]
 80122b2:	78f9      	ldrb	r1, [r7, #3]
 80122b4:	68f8      	ldr	r0, [r7, #12]
 80122b6:	460b      	mov	r3, r1
 80122b8:	009b      	lsls	r3, r3, #2
 80122ba:	440b      	add	r3, r1
 80122bc:	00db      	lsls	r3, r3, #3
 80122be:	4403      	add	r3, r0
 80122c0:	3320      	adds	r3, #32
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80122c8:	fb01 f303 	mul.w	r3, r1, r3
 80122cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d110      	bne.n	80122f4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80122d2:	78fa      	ldrb	r2, [r7, #3]
 80122d4:	6879      	ldr	r1, [r7, #4]
 80122d6:	4613      	mov	r3, r2
 80122d8:	009b      	lsls	r3, r3, #2
 80122da:	4413      	add	r3, r2
 80122dc:	009b      	lsls	r3, r3, #2
 80122de:	440b      	add	r3, r1
 80122e0:	3318      	adds	r3, #24
 80122e2:	2200      	movs	r2, #0
 80122e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80122e6:	78f9      	ldrb	r1, [r7, #3]
 80122e8:	2300      	movs	r3, #0
 80122ea:	2200      	movs	r2, #0
 80122ec:	6878      	ldr	r0, [r7, #4]
 80122ee:	f001 feae 	bl	801404e <USBD_LL_Transmit>
 80122f2:	e015      	b.n	8012320 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80122f4:	68bb      	ldr	r3, [r7, #8]
 80122f6:	2200      	movs	r2, #0
 80122f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012302:	691b      	ldr	r3, [r3, #16]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d00b      	beq.n	8012320 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801230e:	691b      	ldr	r3, [r3, #16]
 8012310:	68ba      	ldr	r2, [r7, #8]
 8012312:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8012316:	68ba      	ldr	r2, [r7, #8]
 8012318:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 801231c:	78fa      	ldrb	r2, [r7, #3]
 801231e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012320:	2300      	movs	r3, #0
}
 8012322:	4618      	mov	r0, r3
 8012324:	3710      	adds	r7, #16
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}

0801232a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801232a:	b580      	push	{r7, lr}
 801232c:	b084      	sub	sp, #16
 801232e:	af00      	add	r7, sp, #0
 8012330:	6078      	str	r0, [r7, #4]
 8012332:	460b      	mov	r3, r1
 8012334:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801233c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012344:	2b00      	cmp	r3, #0
 8012346:	d101      	bne.n	801234c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012348:	2303      	movs	r3, #3
 801234a:	e015      	b.n	8012378 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801234c:	78fb      	ldrb	r3, [r7, #3]
 801234e:	4619      	mov	r1, r3
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	f001 febe 	bl	80140d2 <USBD_LL_GetRxDataSize>
 8012356:	4602      	mov	r2, r0
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012364:	68db      	ldr	r3, [r3, #12]
 8012366:	68fa      	ldr	r2, [r7, #12]
 8012368:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801236c:	68fa      	ldr	r2, [r7, #12]
 801236e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8012372:	4611      	mov	r1, r2
 8012374:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012376:	2300      	movs	r3, #0
}
 8012378:	4618      	mov	r0, r3
 801237a:	3710      	adds	r7, #16
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}

08012380 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b084      	sub	sp, #16
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801238e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d101      	bne.n	801239a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8012396:	2303      	movs	r3, #3
 8012398:	e01a      	b.n	80123d0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d014      	beq.n	80123ce <USBD_CDC_EP0_RxReady+0x4e>
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80123aa:	2bff      	cmp	r3, #255	@ 0xff
 80123ac:	d00f      	beq.n	80123ce <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80123b4:	689b      	ldr	r3, [r3, #8]
 80123b6:	68fa      	ldr	r2, [r7, #12]
 80123b8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 80123bc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80123be:	68fa      	ldr	r2, [r7, #12]
 80123c0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80123c4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	22ff      	movs	r2, #255	@ 0xff
 80123ca:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80123ce:	2300      	movs	r3, #0
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3710      	adds	r7, #16
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80123d8:	b480      	push	{r7}
 80123da:	b083      	sub	sp, #12
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2243      	movs	r2, #67	@ 0x43
 80123e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80123e6:	4b03      	ldr	r3, [pc, #12]	@ (80123f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	370c      	adds	r7, #12
 80123ec:	46bd      	mov	sp, r7
 80123ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f2:	4770      	bx	lr
 80123f4:	2000030c 	.word	0x2000030c

080123f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80123f8:	b480      	push	{r7}
 80123fa:	b083      	sub	sp, #12
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2243      	movs	r2, #67	@ 0x43
 8012404:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8012406:	4b03      	ldr	r3, [pc, #12]	@ (8012414 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8012408:	4618      	mov	r0, r3
 801240a:	370c      	adds	r7, #12
 801240c:	46bd      	mov	sp, r7
 801240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012412:	4770      	bx	lr
 8012414:	200002c8 	.word	0x200002c8

08012418 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012418:	b480      	push	{r7}
 801241a:	b083      	sub	sp, #12
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	2243      	movs	r2, #67	@ 0x43
 8012424:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8012426:	4b03      	ldr	r3, [pc, #12]	@ (8012434 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8012428:	4618      	mov	r0, r3
 801242a:	370c      	adds	r7, #12
 801242c:	46bd      	mov	sp, r7
 801242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012432:	4770      	bx	lr
 8012434:	20000350 	.word	0x20000350

08012438 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012438:	b480      	push	{r7}
 801243a:	b083      	sub	sp, #12
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	220a      	movs	r2, #10
 8012444:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8012446:	4b03      	ldr	r3, [pc, #12]	@ (8012454 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012448:	4618      	mov	r0, r3
 801244a:	370c      	adds	r7, #12
 801244c:	46bd      	mov	sp, r7
 801244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012452:	4770      	bx	lr
 8012454:	20000284 	.word	0x20000284

08012458 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012458:	b480      	push	{r7}
 801245a:	b083      	sub	sp, #12
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d101      	bne.n	801246c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012468:	2303      	movs	r3, #3
 801246a:	e004      	b.n	8012476 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	683a      	ldr	r2, [r7, #0]
 8012470:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8012474:	2300      	movs	r3, #0
}
 8012476:	4618      	mov	r0, r3
 8012478:	370c      	adds	r7, #12
 801247a:	46bd      	mov	sp, r7
 801247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012480:	4770      	bx	lr

08012482 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012482:	b480      	push	{r7}
 8012484:	b087      	sub	sp, #28
 8012486:	af00      	add	r7, sp, #0
 8012488:	60f8      	str	r0, [r7, #12]
 801248a:	60b9      	str	r1, [r7, #8]
 801248c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012494:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d101      	bne.n	80124a0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801249c:	2303      	movs	r3, #3
 801249e:	e008      	b.n	80124b2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	68ba      	ldr	r2, [r7, #8]
 80124a4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	687a      	ldr	r2, [r7, #4]
 80124ac:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80124b0:	2300      	movs	r3, #0
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	371c      	adds	r7, #28
 80124b6:	46bd      	mov	sp, r7
 80124b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124bc:	4770      	bx	lr

080124be <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80124be:	b480      	push	{r7}
 80124c0:	b085      	sub	sp, #20
 80124c2:	af00      	add	r7, sp, #0
 80124c4:	6078      	str	r0, [r7, #4]
 80124c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80124ce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d101      	bne.n	80124da <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80124d6:	2303      	movs	r3, #3
 80124d8:	e004      	b.n	80124e4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	683a      	ldr	r2, [r7, #0]
 80124de:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80124e2:	2300      	movs	r3, #0
}
 80124e4:	4618      	mov	r0, r3
 80124e6:	3714      	adds	r7, #20
 80124e8:	46bd      	mov	sp, r7
 80124ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ee:	4770      	bx	lr

080124f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b084      	sub	sp, #16
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80124fe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8012500:	2301      	movs	r3, #1
 8012502:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801250a:	2b00      	cmp	r3, #0
 801250c:	d101      	bne.n	8012512 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801250e:	2303      	movs	r3, #3
 8012510:	e01a      	b.n	8012548 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8012512:	68bb      	ldr	r3, [r7, #8]
 8012514:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012518:	2b00      	cmp	r3, #0
 801251a:	d114      	bne.n	8012546 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801251c:	68bb      	ldr	r3, [r7, #8]
 801251e:	2201      	movs	r2, #1
 8012520:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801252e:	68bb      	ldr	r3, [r7, #8]
 8012530:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801253a:	2181      	movs	r1, #129	@ 0x81
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f001 fd86 	bl	801404e <USBD_LL_Transmit>

    ret = USBD_OK;
 8012542:	2300      	movs	r3, #0
 8012544:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8012546:	7bfb      	ldrb	r3, [r7, #15]
}
 8012548:	4618      	mov	r0, r3
 801254a:	3710      	adds	r7, #16
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}

08012550 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b084      	sub	sp, #16
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801255e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012566:	2b00      	cmp	r3, #0
 8012568:	d101      	bne.n	801256e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801256a:	2303      	movs	r3, #3
 801256c:	e016      	b.n	801259c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	7c1b      	ldrb	r3, [r3, #16]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d109      	bne.n	801258a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801257c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012580:	2101      	movs	r1, #1
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f001 fd84 	bl	8014090 <USBD_LL_PrepareReceive>
 8012588:	e007      	b.n	801259a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012590:	2340      	movs	r3, #64	@ 0x40
 8012592:	2101      	movs	r1, #1
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f001 fd7b 	bl	8014090 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801259a:	2300      	movs	r3, #0
}
 801259c:	4618      	mov	r0, r3
 801259e:	3710      	adds	r7, #16
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bd80      	pop	{r7, pc}

080125a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b086      	sub	sp, #24
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	60f8      	str	r0, [r7, #12]
 80125ac:	60b9      	str	r1, [r7, #8]
 80125ae:	4613      	mov	r3, r2
 80125b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d101      	bne.n	80125bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80125b8:	2303      	movs	r3, #3
 80125ba:	e01f      	b.n	80125fc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	2200      	movs	r2, #0
 80125c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	2200      	movs	r2, #0
 80125c8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	2200      	movs	r2, #0
 80125d0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80125d4:	68bb      	ldr	r3, [r7, #8]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d003      	beq.n	80125e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	68ba      	ldr	r2, [r7, #8]
 80125de:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	2201      	movs	r2, #1
 80125e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	79fa      	ldrb	r2, [r7, #7]
 80125ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80125f0:	68f8      	ldr	r0, [r7, #12]
 80125f2:	f001 fbe3 	bl	8013dbc <USBD_LL_Init>
 80125f6:	4603      	mov	r3, r0
 80125f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80125fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80125fc:	4618      	mov	r0, r3
 80125fe:	3718      	adds	r7, #24
 8012600:	46bd      	mov	sp, r7
 8012602:	bd80      	pop	{r7, pc}

08012604 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b084      	sub	sp, #16
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
 801260c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801260e:	2300      	movs	r3, #0
 8012610:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012612:	683b      	ldr	r3, [r7, #0]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d101      	bne.n	801261c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8012618:	2303      	movs	r3, #3
 801261a:	e016      	b.n	801264a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	683a      	ldr	r2, [r7, #0]
 8012620:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801262a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801262c:	2b00      	cmp	r3, #0
 801262e:	d00b      	beq.n	8012648 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012638:	f107 020e 	add.w	r2, r7, #14
 801263c:	4610      	mov	r0, r2
 801263e:	4798      	blx	r3
 8012640:	4602      	mov	r2, r0
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8012648:	2300      	movs	r3, #0
}
 801264a:	4618      	mov	r0, r3
 801264c:	3710      	adds	r7, #16
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}

08012652 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012652:	b580      	push	{r7, lr}
 8012654:	b082      	sub	sp, #8
 8012656:	af00      	add	r7, sp, #0
 8012658:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f001 fc0e 	bl	8013e7c <USBD_LL_Start>
 8012660:	4603      	mov	r3, r0
}
 8012662:	4618      	mov	r0, r3
 8012664:	3708      	adds	r7, #8
 8012666:	46bd      	mov	sp, r7
 8012668:	bd80      	pop	{r7, pc}

0801266a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801266a:	b480      	push	{r7}
 801266c:	b083      	sub	sp, #12
 801266e:	af00      	add	r7, sp, #0
 8012670:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012672:	2300      	movs	r3, #0
}
 8012674:	4618      	mov	r0, r3
 8012676:	370c      	adds	r7, #12
 8012678:	46bd      	mov	sp, r7
 801267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267e:	4770      	bx	lr

08012680 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b084      	sub	sp, #16
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	460b      	mov	r3, r1
 801268a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801268c:	2303      	movs	r3, #3
 801268e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012696:	2b00      	cmp	r3, #0
 8012698:	d009      	beq.n	80126ae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	78fa      	ldrb	r2, [r7, #3]
 80126a4:	4611      	mov	r1, r2
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	4798      	blx	r3
 80126aa:	4603      	mov	r3, r0
 80126ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80126ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80126b0:	4618      	mov	r0, r3
 80126b2:	3710      	adds	r7, #16
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}

080126b8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b082      	sub	sp, #8
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	460b      	mov	r3, r1
 80126c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d007      	beq.n	80126de <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80126d4:	685b      	ldr	r3, [r3, #4]
 80126d6:	78fa      	ldrb	r2, [r7, #3]
 80126d8:	4611      	mov	r1, r2
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	4798      	blx	r3
  }

  return USBD_OK;
 80126de:	2300      	movs	r3, #0
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	3708      	adds	r7, #8
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}

080126e8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b084      	sub	sp, #16
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
 80126f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80126f8:	6839      	ldr	r1, [r7, #0]
 80126fa:	4618      	mov	r0, r3
 80126fc:	f000 ff46 	bl	801358c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2201      	movs	r2, #1
 8012704:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 801270e:	461a      	mov	r2, r3
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801271c:	f003 031f 	and.w	r3, r3, #31
 8012720:	2b02      	cmp	r3, #2
 8012722:	d01a      	beq.n	801275a <USBD_LL_SetupStage+0x72>
 8012724:	2b02      	cmp	r3, #2
 8012726:	d822      	bhi.n	801276e <USBD_LL_SetupStage+0x86>
 8012728:	2b00      	cmp	r3, #0
 801272a:	d002      	beq.n	8012732 <USBD_LL_SetupStage+0x4a>
 801272c:	2b01      	cmp	r3, #1
 801272e:	d00a      	beq.n	8012746 <USBD_LL_SetupStage+0x5e>
 8012730:	e01d      	b.n	801276e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012738:	4619      	mov	r1, r3
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f000 f9ee 	bl	8012b1c <USBD_StdDevReq>
 8012740:	4603      	mov	r3, r0
 8012742:	73fb      	strb	r3, [r7, #15]
      break;
 8012744:	e020      	b.n	8012788 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801274c:	4619      	mov	r1, r3
 801274e:	6878      	ldr	r0, [r7, #4]
 8012750:	f000 fa52 	bl	8012bf8 <USBD_StdItfReq>
 8012754:	4603      	mov	r3, r0
 8012756:	73fb      	strb	r3, [r7, #15]
      break;
 8012758:	e016      	b.n	8012788 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012760:	4619      	mov	r1, r3
 8012762:	6878      	ldr	r0, [r7, #4]
 8012764:	f000 fa91 	bl	8012c8a <USBD_StdEPReq>
 8012768:	4603      	mov	r3, r0
 801276a:	73fb      	strb	r3, [r7, #15]
      break;
 801276c:	e00c      	b.n	8012788 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012774:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012778:	b2db      	uxtb	r3, r3
 801277a:	4619      	mov	r1, r3
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f001 fbdd 	bl	8013f3c <USBD_LL_StallEP>
 8012782:	4603      	mov	r3, r0
 8012784:	73fb      	strb	r3, [r7, #15]
      break;
 8012786:	bf00      	nop
  }

  return ret;
 8012788:	7bfb      	ldrb	r3, [r7, #15]
}
 801278a:	4618      	mov	r0, r3
 801278c:	3710      	adds	r7, #16
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}

08012792 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012792:	b580      	push	{r7, lr}
 8012794:	b086      	sub	sp, #24
 8012796:	af00      	add	r7, sp, #0
 8012798:	60f8      	str	r0, [r7, #12]
 801279a:	460b      	mov	r3, r1
 801279c:	607a      	str	r2, [r7, #4]
 801279e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80127a0:	7afb      	ldrb	r3, [r7, #11]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d138      	bne.n	8012818 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80127ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80127b4:	2b03      	cmp	r3, #3
 80127b6:	d14a      	bne.n	801284e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	689a      	ldr	r2, [r3, #8]
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	68db      	ldr	r3, [r3, #12]
 80127c0:	429a      	cmp	r2, r3
 80127c2:	d913      	bls.n	80127ec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80127c4:	693b      	ldr	r3, [r7, #16]
 80127c6:	689a      	ldr	r2, [r3, #8]
 80127c8:	693b      	ldr	r3, [r7, #16]
 80127ca:	68db      	ldr	r3, [r3, #12]
 80127cc:	1ad2      	subs	r2, r2, r3
 80127ce:	693b      	ldr	r3, [r7, #16]
 80127d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	68da      	ldr	r2, [r3, #12]
 80127d6:	693b      	ldr	r3, [r7, #16]
 80127d8:	689b      	ldr	r3, [r3, #8]
 80127da:	4293      	cmp	r3, r2
 80127dc:	bf28      	it	cs
 80127de:	4613      	movcs	r3, r2
 80127e0:	461a      	mov	r2, r3
 80127e2:	6879      	ldr	r1, [r7, #4]
 80127e4:	68f8      	ldr	r0, [r7, #12]
 80127e6:	f000 ffc5 	bl	8013774 <USBD_CtlContinueRx>
 80127ea:	e030      	b.n	801284e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80127f2:	b2db      	uxtb	r3, r3
 80127f4:	2b03      	cmp	r3, #3
 80127f6:	d10b      	bne.n	8012810 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80127fe:	691b      	ldr	r3, [r3, #16]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d005      	beq.n	8012810 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801280a:	691b      	ldr	r3, [r3, #16]
 801280c:	68f8      	ldr	r0, [r7, #12]
 801280e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012810:	68f8      	ldr	r0, [r7, #12]
 8012812:	f000 ffc0 	bl	8013796 <USBD_CtlSendStatus>
 8012816:	e01a      	b.n	801284e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801281e:	b2db      	uxtb	r3, r3
 8012820:	2b03      	cmp	r3, #3
 8012822:	d114      	bne.n	801284e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801282a:	699b      	ldr	r3, [r3, #24]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d00e      	beq.n	801284e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012836:	699b      	ldr	r3, [r3, #24]
 8012838:	7afa      	ldrb	r2, [r7, #11]
 801283a:	4611      	mov	r1, r2
 801283c:	68f8      	ldr	r0, [r7, #12]
 801283e:	4798      	blx	r3
 8012840:	4603      	mov	r3, r0
 8012842:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012844:	7dfb      	ldrb	r3, [r7, #23]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d001      	beq.n	801284e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801284a:	7dfb      	ldrb	r3, [r7, #23]
 801284c:	e000      	b.n	8012850 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801284e:	2300      	movs	r3, #0
}
 8012850:	4618      	mov	r0, r3
 8012852:	3718      	adds	r7, #24
 8012854:	46bd      	mov	sp, r7
 8012856:	bd80      	pop	{r7, pc}

08012858 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b086      	sub	sp, #24
 801285c:	af00      	add	r7, sp, #0
 801285e:	60f8      	str	r0, [r7, #12]
 8012860:	460b      	mov	r3, r1
 8012862:	607a      	str	r2, [r7, #4]
 8012864:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012866:	7afb      	ldrb	r3, [r7, #11]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d16b      	bne.n	8012944 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	3314      	adds	r3, #20
 8012870:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012878:	2b02      	cmp	r3, #2
 801287a:	d156      	bne.n	801292a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801287c:	693b      	ldr	r3, [r7, #16]
 801287e:	689a      	ldr	r2, [r3, #8]
 8012880:	693b      	ldr	r3, [r7, #16]
 8012882:	68db      	ldr	r3, [r3, #12]
 8012884:	429a      	cmp	r2, r3
 8012886:	d914      	bls.n	80128b2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012888:	693b      	ldr	r3, [r7, #16]
 801288a:	689a      	ldr	r2, [r3, #8]
 801288c:	693b      	ldr	r3, [r7, #16]
 801288e:	68db      	ldr	r3, [r3, #12]
 8012890:	1ad2      	subs	r2, r2, r3
 8012892:	693b      	ldr	r3, [r7, #16]
 8012894:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012896:	693b      	ldr	r3, [r7, #16]
 8012898:	689b      	ldr	r3, [r3, #8]
 801289a:	461a      	mov	r2, r3
 801289c:	6879      	ldr	r1, [r7, #4]
 801289e:	68f8      	ldr	r0, [r7, #12]
 80128a0:	f000 ff3a 	bl	8013718 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80128a4:	2300      	movs	r3, #0
 80128a6:	2200      	movs	r2, #0
 80128a8:	2100      	movs	r1, #0
 80128aa:	68f8      	ldr	r0, [r7, #12]
 80128ac:	f001 fbf0 	bl	8014090 <USBD_LL_PrepareReceive>
 80128b0:	e03b      	b.n	801292a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80128b2:	693b      	ldr	r3, [r7, #16]
 80128b4:	68da      	ldr	r2, [r3, #12]
 80128b6:	693b      	ldr	r3, [r7, #16]
 80128b8:	689b      	ldr	r3, [r3, #8]
 80128ba:	429a      	cmp	r2, r3
 80128bc:	d11c      	bne.n	80128f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80128be:	693b      	ldr	r3, [r7, #16]
 80128c0:	685a      	ldr	r2, [r3, #4]
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80128c6:	429a      	cmp	r2, r3
 80128c8:	d316      	bcc.n	80128f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80128ca:	693b      	ldr	r3, [r7, #16]
 80128cc:	685a      	ldr	r2, [r3, #4]
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80128d4:	429a      	cmp	r2, r3
 80128d6:	d20f      	bcs.n	80128f8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80128d8:	2200      	movs	r2, #0
 80128da:	2100      	movs	r1, #0
 80128dc:	68f8      	ldr	r0, [r7, #12]
 80128de:	f000 ff1b 	bl	8013718 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	2200      	movs	r2, #0
 80128e6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80128ea:	2300      	movs	r3, #0
 80128ec:	2200      	movs	r2, #0
 80128ee:	2100      	movs	r1, #0
 80128f0:	68f8      	ldr	r0, [r7, #12]
 80128f2:	f001 fbcd 	bl	8014090 <USBD_LL_PrepareReceive>
 80128f6:	e018      	b.n	801292a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80128fe:	b2db      	uxtb	r3, r3
 8012900:	2b03      	cmp	r3, #3
 8012902:	d10b      	bne.n	801291c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801290a:	68db      	ldr	r3, [r3, #12]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d005      	beq.n	801291c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012916:	68db      	ldr	r3, [r3, #12]
 8012918:	68f8      	ldr	r0, [r7, #12]
 801291a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801291c:	2180      	movs	r1, #128	@ 0x80
 801291e:	68f8      	ldr	r0, [r7, #12]
 8012920:	f001 fb0c 	bl	8013f3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012924:	68f8      	ldr	r0, [r7, #12]
 8012926:	f000 ff49 	bl	80137bc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8012930:	2b01      	cmp	r3, #1
 8012932:	d122      	bne.n	801297a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8012934:	68f8      	ldr	r0, [r7, #12]
 8012936:	f7ff fe98 	bl	801266a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	2200      	movs	r2, #0
 801293e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8012942:	e01a      	b.n	801297a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801294a:	b2db      	uxtb	r3, r3
 801294c:	2b03      	cmp	r3, #3
 801294e:	d114      	bne.n	801297a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012956:	695b      	ldr	r3, [r3, #20]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d00e      	beq.n	801297a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012962:	695b      	ldr	r3, [r3, #20]
 8012964:	7afa      	ldrb	r2, [r7, #11]
 8012966:	4611      	mov	r1, r2
 8012968:	68f8      	ldr	r0, [r7, #12]
 801296a:	4798      	blx	r3
 801296c:	4603      	mov	r3, r0
 801296e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012970:	7dfb      	ldrb	r3, [r7, #23]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d001      	beq.n	801297a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8012976:	7dfb      	ldrb	r3, [r7, #23]
 8012978:	e000      	b.n	801297c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801297a:	2300      	movs	r3, #0
}
 801297c:	4618      	mov	r0, r3
 801297e:	3718      	adds	r7, #24
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}

08012984 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b082      	sub	sp, #8
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2201      	movs	r2, #1
 8012990:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2200      	movs	r2, #0
 8012998:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	2200      	movs	r2, #0
 80129a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2200      	movs	r2, #0
 80129a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d101      	bne.n	80129b8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80129b4:	2303      	movs	r3, #3
 80129b6:	e02f      	b.n	8012a18 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d00f      	beq.n	80129e2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80129c8:	685b      	ldr	r3, [r3, #4]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d009      	beq.n	80129e2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80129d4:	685b      	ldr	r3, [r3, #4]
 80129d6:	687a      	ldr	r2, [r7, #4]
 80129d8:	6852      	ldr	r2, [r2, #4]
 80129da:	b2d2      	uxtb	r2, r2
 80129dc:	4611      	mov	r1, r2
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80129e2:	2340      	movs	r3, #64	@ 0x40
 80129e4:	2200      	movs	r2, #0
 80129e6:	2100      	movs	r1, #0
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f001 fa62 	bl	8013eb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2201      	movs	r2, #1
 80129f2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	2240      	movs	r2, #64	@ 0x40
 80129fa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80129fe:	2340      	movs	r3, #64	@ 0x40
 8012a00:	2200      	movs	r2, #0
 8012a02:	2180      	movs	r1, #128	@ 0x80
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f001 fa54 	bl	8013eb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2201      	movs	r2, #1
 8012a0e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	2240      	movs	r2, #64	@ 0x40
 8012a14:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8012a16:	2300      	movs	r3, #0
}
 8012a18:	4618      	mov	r0, r3
 8012a1a:	3708      	adds	r7, #8
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}

08012a20 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012a20:	b480      	push	{r7}
 8012a22:	b083      	sub	sp, #12
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
 8012a28:	460b      	mov	r3, r1
 8012a2a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	78fa      	ldrb	r2, [r7, #3]
 8012a30:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012a32:	2300      	movs	r3, #0
}
 8012a34:	4618      	mov	r0, r3
 8012a36:	370c      	adds	r7, #12
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3e:	4770      	bx	lr

08012a40 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012a40:	b480      	push	{r7}
 8012a42:	b083      	sub	sp, #12
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012a4e:	b2da      	uxtb	r2, r3
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	2204      	movs	r2, #4
 8012a5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8012a5e:	2300      	movs	r3, #0
}
 8012a60:	4618      	mov	r0, r3
 8012a62:	370c      	adds	r7, #12
 8012a64:	46bd      	mov	sp, r7
 8012a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6a:	4770      	bx	lr

08012a6c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012a6c:	b480      	push	{r7}
 8012a6e:	b083      	sub	sp, #12
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012a7a:	b2db      	uxtb	r3, r3
 8012a7c:	2b04      	cmp	r3, #4
 8012a7e:	d106      	bne.n	8012a8e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8012a86:	b2da      	uxtb	r2, r3
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8012a8e:	2300      	movs	r3, #0
}
 8012a90:	4618      	mov	r0, r3
 8012a92:	370c      	adds	r7, #12
 8012a94:	46bd      	mov	sp, r7
 8012a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9a:	4770      	bx	lr

08012a9c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b082      	sub	sp, #8
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d101      	bne.n	8012ab2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8012aae:	2303      	movs	r3, #3
 8012ab0:	e012      	b.n	8012ad8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ab8:	b2db      	uxtb	r3, r3
 8012aba:	2b03      	cmp	r3, #3
 8012abc:	d10b      	bne.n	8012ad6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012ac4:	69db      	ldr	r3, [r3, #28]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d005      	beq.n	8012ad6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012ad0:	69db      	ldr	r3, [r3, #28]
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012ad6:	2300      	movs	r3, #0
}
 8012ad8:	4618      	mov	r0, r3
 8012ada:	3708      	adds	r7, #8
 8012adc:	46bd      	mov	sp, r7
 8012ade:	bd80      	pop	{r7, pc}

08012ae0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012ae0:	b480      	push	{r7}
 8012ae2:	b087      	sub	sp, #28
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012af2:	697b      	ldr	r3, [r7, #20]
 8012af4:	3301      	adds	r3, #1
 8012af6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012af8:	697b      	ldr	r3, [r7, #20]
 8012afa:	781b      	ldrb	r3, [r3, #0]
 8012afc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012afe:	8a3b      	ldrh	r3, [r7, #16]
 8012b00:	021b      	lsls	r3, r3, #8
 8012b02:	b21a      	sxth	r2, r3
 8012b04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012b08:	4313      	orrs	r3, r2
 8012b0a:	b21b      	sxth	r3, r3
 8012b0c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012b0e:	89fb      	ldrh	r3, [r7, #14]
}
 8012b10:	4618      	mov	r0, r3
 8012b12:	371c      	adds	r7, #28
 8012b14:	46bd      	mov	sp, r7
 8012b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1a:	4770      	bx	lr

08012b1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b084      	sub	sp, #16
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
 8012b24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012b26:	2300      	movs	r3, #0
 8012b28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012b2a:	683b      	ldr	r3, [r7, #0]
 8012b2c:	781b      	ldrb	r3, [r3, #0]
 8012b2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012b32:	2b40      	cmp	r3, #64	@ 0x40
 8012b34:	d005      	beq.n	8012b42 <USBD_StdDevReq+0x26>
 8012b36:	2b40      	cmp	r3, #64	@ 0x40
 8012b38:	d853      	bhi.n	8012be2 <USBD_StdDevReq+0xc6>
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d00b      	beq.n	8012b56 <USBD_StdDevReq+0x3a>
 8012b3e:	2b20      	cmp	r3, #32
 8012b40:	d14f      	bne.n	8012be2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012b48:	689b      	ldr	r3, [r3, #8]
 8012b4a:	6839      	ldr	r1, [r7, #0]
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	4798      	blx	r3
 8012b50:	4603      	mov	r3, r0
 8012b52:	73fb      	strb	r3, [r7, #15]
      break;
 8012b54:	e04a      	b.n	8012bec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	785b      	ldrb	r3, [r3, #1]
 8012b5a:	2b09      	cmp	r3, #9
 8012b5c:	d83b      	bhi.n	8012bd6 <USBD_StdDevReq+0xba>
 8012b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8012b64 <USBD_StdDevReq+0x48>)
 8012b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b64:	08012bb9 	.word	0x08012bb9
 8012b68:	08012bcd 	.word	0x08012bcd
 8012b6c:	08012bd7 	.word	0x08012bd7
 8012b70:	08012bc3 	.word	0x08012bc3
 8012b74:	08012bd7 	.word	0x08012bd7
 8012b78:	08012b97 	.word	0x08012b97
 8012b7c:	08012b8d 	.word	0x08012b8d
 8012b80:	08012bd7 	.word	0x08012bd7
 8012b84:	08012baf 	.word	0x08012baf
 8012b88:	08012ba1 	.word	0x08012ba1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012b8c:	6839      	ldr	r1, [r7, #0]
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	f000 f9de 	bl	8012f50 <USBD_GetDescriptor>
          break;
 8012b94:	e024      	b.n	8012be0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012b96:	6839      	ldr	r1, [r7, #0]
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	f000 fb6d 	bl	8013278 <USBD_SetAddress>
          break;
 8012b9e:	e01f      	b.n	8012be0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012ba0:	6839      	ldr	r1, [r7, #0]
 8012ba2:	6878      	ldr	r0, [r7, #4]
 8012ba4:	f000 fbac 	bl	8013300 <USBD_SetConfig>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	73fb      	strb	r3, [r7, #15]
          break;
 8012bac:	e018      	b.n	8012be0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012bae:	6839      	ldr	r1, [r7, #0]
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	f000 fc4b 	bl	801344c <USBD_GetConfig>
          break;
 8012bb6:	e013      	b.n	8012be0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012bb8:	6839      	ldr	r1, [r7, #0]
 8012bba:	6878      	ldr	r0, [r7, #4]
 8012bbc:	f000 fc7c 	bl	80134b8 <USBD_GetStatus>
          break;
 8012bc0:	e00e      	b.n	8012be0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012bc2:	6839      	ldr	r1, [r7, #0]
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	f000 fcab 	bl	8013520 <USBD_SetFeature>
          break;
 8012bca:	e009      	b.n	8012be0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012bcc:	6839      	ldr	r1, [r7, #0]
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f000 fcba 	bl	8013548 <USBD_ClrFeature>
          break;
 8012bd4:	e004      	b.n	8012be0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8012bd6:	6839      	ldr	r1, [r7, #0]
 8012bd8:	6878      	ldr	r0, [r7, #4]
 8012bda:	f000 fd11 	bl	8013600 <USBD_CtlError>
          break;
 8012bde:	bf00      	nop
      }
      break;
 8012be0:	e004      	b.n	8012bec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8012be2:	6839      	ldr	r1, [r7, #0]
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	f000 fd0b 	bl	8013600 <USBD_CtlError>
      break;
 8012bea:	bf00      	nop
  }

  return ret;
 8012bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bee:	4618      	mov	r0, r3
 8012bf0:	3710      	adds	r7, #16
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bd80      	pop	{r7, pc}
 8012bf6:	bf00      	nop

08012bf8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b084      	sub	sp, #16
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
 8012c00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012c02:	2300      	movs	r3, #0
 8012c04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	781b      	ldrb	r3, [r3, #0]
 8012c0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012c0e:	2b40      	cmp	r3, #64	@ 0x40
 8012c10:	d005      	beq.n	8012c1e <USBD_StdItfReq+0x26>
 8012c12:	2b40      	cmp	r3, #64	@ 0x40
 8012c14:	d82f      	bhi.n	8012c76 <USBD_StdItfReq+0x7e>
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d001      	beq.n	8012c1e <USBD_StdItfReq+0x26>
 8012c1a:	2b20      	cmp	r3, #32
 8012c1c:	d12b      	bne.n	8012c76 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012c24:	b2db      	uxtb	r3, r3
 8012c26:	3b01      	subs	r3, #1
 8012c28:	2b02      	cmp	r3, #2
 8012c2a:	d81d      	bhi.n	8012c68 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	889b      	ldrh	r3, [r3, #4]
 8012c30:	b2db      	uxtb	r3, r3
 8012c32:	2b01      	cmp	r3, #1
 8012c34:	d813      	bhi.n	8012c5e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012c3c:	689b      	ldr	r3, [r3, #8]
 8012c3e:	6839      	ldr	r1, [r7, #0]
 8012c40:	6878      	ldr	r0, [r7, #4]
 8012c42:	4798      	blx	r3
 8012c44:	4603      	mov	r3, r0
 8012c46:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	88db      	ldrh	r3, [r3, #6]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d110      	bne.n	8012c72 <USBD_StdItfReq+0x7a>
 8012c50:	7bfb      	ldrb	r3, [r7, #15]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d10d      	bne.n	8012c72 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f000 fd9d 	bl	8013796 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012c5c:	e009      	b.n	8012c72 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8012c5e:	6839      	ldr	r1, [r7, #0]
 8012c60:	6878      	ldr	r0, [r7, #4]
 8012c62:	f000 fccd 	bl	8013600 <USBD_CtlError>
          break;
 8012c66:	e004      	b.n	8012c72 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8012c68:	6839      	ldr	r1, [r7, #0]
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f000 fcc8 	bl	8013600 <USBD_CtlError>
          break;
 8012c70:	e000      	b.n	8012c74 <USBD_StdItfReq+0x7c>
          break;
 8012c72:	bf00      	nop
      }
      break;
 8012c74:	e004      	b.n	8012c80 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8012c76:	6839      	ldr	r1, [r7, #0]
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	f000 fcc1 	bl	8013600 <USBD_CtlError>
      break;
 8012c7e:	bf00      	nop
  }

  return ret;
 8012c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	3710      	adds	r7, #16
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}

08012c8a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c8a:	b580      	push	{r7, lr}
 8012c8c:	b084      	sub	sp, #16
 8012c8e:	af00      	add	r7, sp, #0
 8012c90:	6078      	str	r0, [r7, #4]
 8012c92:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012c94:	2300      	movs	r3, #0
 8012c96:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	889b      	ldrh	r3, [r3, #4]
 8012c9c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012ca6:	2b40      	cmp	r3, #64	@ 0x40
 8012ca8:	d007      	beq.n	8012cba <USBD_StdEPReq+0x30>
 8012caa:	2b40      	cmp	r3, #64	@ 0x40
 8012cac:	f200 8145 	bhi.w	8012f3a <USBD_StdEPReq+0x2b0>
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d00c      	beq.n	8012cce <USBD_StdEPReq+0x44>
 8012cb4:	2b20      	cmp	r3, #32
 8012cb6:	f040 8140 	bne.w	8012f3a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012cc0:	689b      	ldr	r3, [r3, #8]
 8012cc2:	6839      	ldr	r1, [r7, #0]
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	4798      	blx	r3
 8012cc8:	4603      	mov	r3, r0
 8012cca:	73fb      	strb	r3, [r7, #15]
      break;
 8012ccc:	e13a      	b.n	8012f44 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	785b      	ldrb	r3, [r3, #1]
 8012cd2:	2b03      	cmp	r3, #3
 8012cd4:	d007      	beq.n	8012ce6 <USBD_StdEPReq+0x5c>
 8012cd6:	2b03      	cmp	r3, #3
 8012cd8:	f300 8129 	bgt.w	8012f2e <USBD_StdEPReq+0x2a4>
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d07f      	beq.n	8012de0 <USBD_StdEPReq+0x156>
 8012ce0:	2b01      	cmp	r3, #1
 8012ce2:	d03c      	beq.n	8012d5e <USBD_StdEPReq+0xd4>
 8012ce4:	e123      	b.n	8012f2e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012cec:	b2db      	uxtb	r3, r3
 8012cee:	2b02      	cmp	r3, #2
 8012cf0:	d002      	beq.n	8012cf8 <USBD_StdEPReq+0x6e>
 8012cf2:	2b03      	cmp	r3, #3
 8012cf4:	d016      	beq.n	8012d24 <USBD_StdEPReq+0x9a>
 8012cf6:	e02c      	b.n	8012d52 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012cf8:	7bbb      	ldrb	r3, [r7, #14]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d00d      	beq.n	8012d1a <USBD_StdEPReq+0x90>
 8012cfe:	7bbb      	ldrb	r3, [r7, #14]
 8012d00:	2b80      	cmp	r3, #128	@ 0x80
 8012d02:	d00a      	beq.n	8012d1a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012d04:	7bbb      	ldrb	r3, [r7, #14]
 8012d06:	4619      	mov	r1, r3
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f001 f917 	bl	8013f3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012d0e:	2180      	movs	r1, #128	@ 0x80
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f001 f913 	bl	8013f3c <USBD_LL_StallEP>
 8012d16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012d18:	e020      	b.n	8012d5c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8012d1a:	6839      	ldr	r1, [r7, #0]
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	f000 fc6f 	bl	8013600 <USBD_CtlError>
              break;
 8012d22:	e01b      	b.n	8012d5c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012d24:	683b      	ldr	r3, [r7, #0]
 8012d26:	885b      	ldrh	r3, [r3, #2]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d10e      	bne.n	8012d4a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012d2c:	7bbb      	ldrb	r3, [r7, #14]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d00b      	beq.n	8012d4a <USBD_StdEPReq+0xc0>
 8012d32:	7bbb      	ldrb	r3, [r7, #14]
 8012d34:	2b80      	cmp	r3, #128	@ 0x80
 8012d36:	d008      	beq.n	8012d4a <USBD_StdEPReq+0xc0>
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	88db      	ldrh	r3, [r3, #6]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d104      	bne.n	8012d4a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012d40:	7bbb      	ldrb	r3, [r7, #14]
 8012d42:	4619      	mov	r1, r3
 8012d44:	6878      	ldr	r0, [r7, #4]
 8012d46:	f001 f8f9 	bl	8013f3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	f000 fd23 	bl	8013796 <USBD_CtlSendStatus>

              break;
 8012d50:	e004      	b.n	8012d5c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8012d52:	6839      	ldr	r1, [r7, #0]
 8012d54:	6878      	ldr	r0, [r7, #4]
 8012d56:	f000 fc53 	bl	8013600 <USBD_CtlError>
              break;
 8012d5a:	bf00      	nop
          }
          break;
 8012d5c:	e0ec      	b.n	8012f38 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012d64:	b2db      	uxtb	r3, r3
 8012d66:	2b02      	cmp	r3, #2
 8012d68:	d002      	beq.n	8012d70 <USBD_StdEPReq+0xe6>
 8012d6a:	2b03      	cmp	r3, #3
 8012d6c:	d016      	beq.n	8012d9c <USBD_StdEPReq+0x112>
 8012d6e:	e030      	b.n	8012dd2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012d70:	7bbb      	ldrb	r3, [r7, #14]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d00d      	beq.n	8012d92 <USBD_StdEPReq+0x108>
 8012d76:	7bbb      	ldrb	r3, [r7, #14]
 8012d78:	2b80      	cmp	r3, #128	@ 0x80
 8012d7a:	d00a      	beq.n	8012d92 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012d7c:	7bbb      	ldrb	r3, [r7, #14]
 8012d7e:	4619      	mov	r1, r3
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f001 f8db 	bl	8013f3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012d86:	2180      	movs	r1, #128	@ 0x80
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	f001 f8d7 	bl	8013f3c <USBD_LL_StallEP>
 8012d8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012d90:	e025      	b.n	8012dde <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8012d92:	6839      	ldr	r1, [r7, #0]
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f000 fc33 	bl	8013600 <USBD_CtlError>
              break;
 8012d9a:	e020      	b.n	8012dde <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012d9c:	683b      	ldr	r3, [r7, #0]
 8012d9e:	885b      	ldrh	r3, [r3, #2]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d11b      	bne.n	8012ddc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012da4:	7bbb      	ldrb	r3, [r7, #14]
 8012da6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d004      	beq.n	8012db8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012dae:	7bbb      	ldrb	r3, [r7, #14]
 8012db0:	4619      	mov	r1, r3
 8012db2:	6878      	ldr	r0, [r7, #4]
 8012db4:	f001 f8e1 	bl	8013f7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	f000 fcec 	bl	8013796 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012dc4:	689b      	ldr	r3, [r3, #8]
 8012dc6:	6839      	ldr	r1, [r7, #0]
 8012dc8:	6878      	ldr	r0, [r7, #4]
 8012dca:	4798      	blx	r3
 8012dcc:	4603      	mov	r3, r0
 8012dce:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8012dd0:	e004      	b.n	8012ddc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8012dd2:	6839      	ldr	r1, [r7, #0]
 8012dd4:	6878      	ldr	r0, [r7, #4]
 8012dd6:	f000 fc13 	bl	8013600 <USBD_CtlError>
              break;
 8012dda:	e000      	b.n	8012dde <USBD_StdEPReq+0x154>
              break;
 8012ddc:	bf00      	nop
          }
          break;
 8012dde:	e0ab      	b.n	8012f38 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012de6:	b2db      	uxtb	r3, r3
 8012de8:	2b02      	cmp	r3, #2
 8012dea:	d002      	beq.n	8012df2 <USBD_StdEPReq+0x168>
 8012dec:	2b03      	cmp	r3, #3
 8012dee:	d032      	beq.n	8012e56 <USBD_StdEPReq+0x1cc>
 8012df0:	e097      	b.n	8012f22 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012df2:	7bbb      	ldrb	r3, [r7, #14]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d007      	beq.n	8012e08 <USBD_StdEPReq+0x17e>
 8012df8:	7bbb      	ldrb	r3, [r7, #14]
 8012dfa:	2b80      	cmp	r3, #128	@ 0x80
 8012dfc:	d004      	beq.n	8012e08 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8012dfe:	6839      	ldr	r1, [r7, #0]
 8012e00:	6878      	ldr	r0, [r7, #4]
 8012e02:	f000 fbfd 	bl	8013600 <USBD_CtlError>
                break;
 8012e06:	e091      	b.n	8012f2c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012e08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	da0b      	bge.n	8012e28 <USBD_StdEPReq+0x19e>
 8012e10:	7bbb      	ldrb	r3, [r7, #14]
 8012e12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012e16:	4613      	mov	r3, r2
 8012e18:	009b      	lsls	r3, r3, #2
 8012e1a:	4413      	add	r3, r2
 8012e1c:	009b      	lsls	r3, r3, #2
 8012e1e:	3310      	adds	r3, #16
 8012e20:	687a      	ldr	r2, [r7, #4]
 8012e22:	4413      	add	r3, r2
 8012e24:	3304      	adds	r3, #4
 8012e26:	e00b      	b.n	8012e40 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012e28:	7bbb      	ldrb	r3, [r7, #14]
 8012e2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012e2e:	4613      	mov	r3, r2
 8012e30:	009b      	lsls	r3, r3, #2
 8012e32:	4413      	add	r3, r2
 8012e34:	009b      	lsls	r3, r3, #2
 8012e36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012e3a:	687a      	ldr	r2, [r7, #4]
 8012e3c:	4413      	add	r3, r2
 8012e3e:	3304      	adds	r3, #4
 8012e40:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	2200      	movs	r2, #0
 8012e46:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	2202      	movs	r2, #2
 8012e4c:	4619      	mov	r1, r3
 8012e4e:	6878      	ldr	r0, [r7, #4]
 8012e50:	f000 fc47 	bl	80136e2 <USBD_CtlSendData>
              break;
 8012e54:	e06a      	b.n	8012f2c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012e56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	da11      	bge.n	8012e82 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012e5e:	7bbb      	ldrb	r3, [r7, #14]
 8012e60:	f003 020f 	and.w	r2, r3, #15
 8012e64:	6879      	ldr	r1, [r7, #4]
 8012e66:	4613      	mov	r3, r2
 8012e68:	009b      	lsls	r3, r3, #2
 8012e6a:	4413      	add	r3, r2
 8012e6c:	009b      	lsls	r3, r3, #2
 8012e6e:	440b      	add	r3, r1
 8012e70:	3324      	adds	r3, #36	@ 0x24
 8012e72:	881b      	ldrh	r3, [r3, #0]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d117      	bne.n	8012ea8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012e78:	6839      	ldr	r1, [r7, #0]
 8012e7a:	6878      	ldr	r0, [r7, #4]
 8012e7c:	f000 fbc0 	bl	8013600 <USBD_CtlError>
                  break;
 8012e80:	e054      	b.n	8012f2c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012e82:	7bbb      	ldrb	r3, [r7, #14]
 8012e84:	f003 020f 	and.w	r2, r3, #15
 8012e88:	6879      	ldr	r1, [r7, #4]
 8012e8a:	4613      	mov	r3, r2
 8012e8c:	009b      	lsls	r3, r3, #2
 8012e8e:	4413      	add	r3, r2
 8012e90:	009b      	lsls	r3, r3, #2
 8012e92:	440b      	add	r3, r1
 8012e94:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012e98:	881b      	ldrh	r3, [r3, #0]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d104      	bne.n	8012ea8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012e9e:	6839      	ldr	r1, [r7, #0]
 8012ea0:	6878      	ldr	r0, [r7, #4]
 8012ea2:	f000 fbad 	bl	8013600 <USBD_CtlError>
                  break;
 8012ea6:	e041      	b.n	8012f2c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012ea8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	da0b      	bge.n	8012ec8 <USBD_StdEPReq+0x23e>
 8012eb0:	7bbb      	ldrb	r3, [r7, #14]
 8012eb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012eb6:	4613      	mov	r3, r2
 8012eb8:	009b      	lsls	r3, r3, #2
 8012eba:	4413      	add	r3, r2
 8012ebc:	009b      	lsls	r3, r3, #2
 8012ebe:	3310      	adds	r3, #16
 8012ec0:	687a      	ldr	r2, [r7, #4]
 8012ec2:	4413      	add	r3, r2
 8012ec4:	3304      	adds	r3, #4
 8012ec6:	e00b      	b.n	8012ee0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012ec8:	7bbb      	ldrb	r3, [r7, #14]
 8012eca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012ece:	4613      	mov	r3, r2
 8012ed0:	009b      	lsls	r3, r3, #2
 8012ed2:	4413      	add	r3, r2
 8012ed4:	009b      	lsls	r3, r3, #2
 8012ed6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012eda:	687a      	ldr	r2, [r7, #4]
 8012edc:	4413      	add	r3, r2
 8012ede:	3304      	adds	r3, #4
 8012ee0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012ee2:	7bbb      	ldrb	r3, [r7, #14]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d002      	beq.n	8012eee <USBD_StdEPReq+0x264>
 8012ee8:	7bbb      	ldrb	r3, [r7, #14]
 8012eea:	2b80      	cmp	r3, #128	@ 0x80
 8012eec:	d103      	bne.n	8012ef6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8012eee:	68bb      	ldr	r3, [r7, #8]
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	601a      	str	r2, [r3, #0]
 8012ef4:	e00e      	b.n	8012f14 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012ef6:	7bbb      	ldrb	r3, [r7, #14]
 8012ef8:	4619      	mov	r1, r3
 8012efa:	6878      	ldr	r0, [r7, #4]
 8012efc:	f001 f85c 	bl	8013fb8 <USBD_LL_IsStallEP>
 8012f00:	4603      	mov	r3, r0
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d003      	beq.n	8012f0e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8012f06:	68bb      	ldr	r3, [r7, #8]
 8012f08:	2201      	movs	r2, #1
 8012f0a:	601a      	str	r2, [r3, #0]
 8012f0c:	e002      	b.n	8012f14 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	2200      	movs	r2, #0
 8012f12:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	2202      	movs	r2, #2
 8012f18:	4619      	mov	r1, r3
 8012f1a:	6878      	ldr	r0, [r7, #4]
 8012f1c:	f000 fbe1 	bl	80136e2 <USBD_CtlSendData>
              break;
 8012f20:	e004      	b.n	8012f2c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8012f22:	6839      	ldr	r1, [r7, #0]
 8012f24:	6878      	ldr	r0, [r7, #4]
 8012f26:	f000 fb6b 	bl	8013600 <USBD_CtlError>
              break;
 8012f2a:	bf00      	nop
          }
          break;
 8012f2c:	e004      	b.n	8012f38 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8012f2e:	6839      	ldr	r1, [r7, #0]
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f000 fb65 	bl	8013600 <USBD_CtlError>
          break;
 8012f36:	bf00      	nop
      }
      break;
 8012f38:	e004      	b.n	8012f44 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8012f3a:	6839      	ldr	r1, [r7, #0]
 8012f3c:	6878      	ldr	r0, [r7, #4]
 8012f3e:	f000 fb5f 	bl	8013600 <USBD_CtlError>
      break;
 8012f42:	bf00      	nop
  }

  return ret;
 8012f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f46:	4618      	mov	r0, r3
 8012f48:	3710      	adds	r7, #16
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	bd80      	pop	{r7, pc}
	...

08012f50 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b084      	sub	sp, #16
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
 8012f58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012f62:	2300      	movs	r3, #0
 8012f64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	885b      	ldrh	r3, [r3, #2]
 8012f6a:	0a1b      	lsrs	r3, r3, #8
 8012f6c:	b29b      	uxth	r3, r3
 8012f6e:	3b01      	subs	r3, #1
 8012f70:	2b0e      	cmp	r3, #14
 8012f72:	f200 8152 	bhi.w	801321a <USBD_GetDescriptor+0x2ca>
 8012f76:	a201      	add	r2, pc, #4	@ (adr r2, 8012f7c <USBD_GetDescriptor+0x2c>)
 8012f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f7c:	08012fed 	.word	0x08012fed
 8012f80:	08013005 	.word	0x08013005
 8012f84:	08013045 	.word	0x08013045
 8012f88:	0801321b 	.word	0x0801321b
 8012f8c:	0801321b 	.word	0x0801321b
 8012f90:	080131bb 	.word	0x080131bb
 8012f94:	080131e7 	.word	0x080131e7
 8012f98:	0801321b 	.word	0x0801321b
 8012f9c:	0801321b 	.word	0x0801321b
 8012fa0:	0801321b 	.word	0x0801321b
 8012fa4:	0801321b 	.word	0x0801321b
 8012fa8:	0801321b 	.word	0x0801321b
 8012fac:	0801321b 	.word	0x0801321b
 8012fb0:	0801321b 	.word	0x0801321b
 8012fb4:	08012fb9 	.word	0x08012fb9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012fbe:	69db      	ldr	r3, [r3, #28]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d00b      	beq.n	8012fdc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012fca:	69db      	ldr	r3, [r3, #28]
 8012fcc:	687a      	ldr	r2, [r7, #4]
 8012fce:	7c12      	ldrb	r2, [r2, #16]
 8012fd0:	f107 0108 	add.w	r1, r7, #8
 8012fd4:	4610      	mov	r0, r2
 8012fd6:	4798      	blx	r3
 8012fd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012fda:	e126      	b.n	801322a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012fdc:	6839      	ldr	r1, [r7, #0]
 8012fde:	6878      	ldr	r0, [r7, #4]
 8012fe0:	f000 fb0e 	bl	8013600 <USBD_CtlError>
        err++;
 8012fe4:	7afb      	ldrb	r3, [r7, #11]
 8012fe6:	3301      	adds	r3, #1
 8012fe8:	72fb      	strb	r3, [r7, #11]
      break;
 8012fea:	e11e      	b.n	801322a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	687a      	ldr	r2, [r7, #4]
 8012ff6:	7c12      	ldrb	r2, [r2, #16]
 8012ff8:	f107 0108 	add.w	r1, r7, #8
 8012ffc:	4610      	mov	r0, r2
 8012ffe:	4798      	blx	r3
 8013000:	60f8      	str	r0, [r7, #12]
      break;
 8013002:	e112      	b.n	801322a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	7c1b      	ldrb	r3, [r3, #16]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d10d      	bne.n	8013028 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013014:	f107 0208 	add.w	r2, r7, #8
 8013018:	4610      	mov	r0, r2
 801301a:	4798      	blx	r3
 801301c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	3301      	adds	r3, #1
 8013022:	2202      	movs	r2, #2
 8013024:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013026:	e100      	b.n	801322a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801302e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013030:	f107 0208 	add.w	r2, r7, #8
 8013034:	4610      	mov	r0, r2
 8013036:	4798      	blx	r3
 8013038:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	3301      	adds	r3, #1
 801303e:	2202      	movs	r2, #2
 8013040:	701a      	strb	r2, [r3, #0]
      break;
 8013042:	e0f2      	b.n	801322a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013044:	683b      	ldr	r3, [r7, #0]
 8013046:	885b      	ldrh	r3, [r3, #2]
 8013048:	b2db      	uxtb	r3, r3
 801304a:	2b05      	cmp	r3, #5
 801304c:	f200 80ac 	bhi.w	80131a8 <USBD_GetDescriptor+0x258>
 8013050:	a201      	add	r2, pc, #4	@ (adr r2, 8013058 <USBD_GetDescriptor+0x108>)
 8013052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013056:	bf00      	nop
 8013058:	08013071 	.word	0x08013071
 801305c:	080130a5 	.word	0x080130a5
 8013060:	080130d9 	.word	0x080130d9
 8013064:	0801310d 	.word	0x0801310d
 8013068:	08013141 	.word	0x08013141
 801306c:	08013175 	.word	0x08013175
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013076:	685b      	ldr	r3, [r3, #4]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d00b      	beq.n	8013094 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013082:	685b      	ldr	r3, [r3, #4]
 8013084:	687a      	ldr	r2, [r7, #4]
 8013086:	7c12      	ldrb	r2, [r2, #16]
 8013088:	f107 0108 	add.w	r1, r7, #8
 801308c:	4610      	mov	r0, r2
 801308e:	4798      	blx	r3
 8013090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013092:	e091      	b.n	80131b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013094:	6839      	ldr	r1, [r7, #0]
 8013096:	6878      	ldr	r0, [r7, #4]
 8013098:	f000 fab2 	bl	8013600 <USBD_CtlError>
            err++;
 801309c:	7afb      	ldrb	r3, [r7, #11]
 801309e:	3301      	adds	r3, #1
 80130a0:	72fb      	strb	r3, [r7, #11]
          break;
 80130a2:	e089      	b.n	80131b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80130aa:	689b      	ldr	r3, [r3, #8]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d00b      	beq.n	80130c8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80130b6:	689b      	ldr	r3, [r3, #8]
 80130b8:	687a      	ldr	r2, [r7, #4]
 80130ba:	7c12      	ldrb	r2, [r2, #16]
 80130bc:	f107 0108 	add.w	r1, r7, #8
 80130c0:	4610      	mov	r0, r2
 80130c2:	4798      	blx	r3
 80130c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80130c6:	e077      	b.n	80131b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80130c8:	6839      	ldr	r1, [r7, #0]
 80130ca:	6878      	ldr	r0, [r7, #4]
 80130cc:	f000 fa98 	bl	8013600 <USBD_CtlError>
            err++;
 80130d0:	7afb      	ldrb	r3, [r7, #11]
 80130d2:	3301      	adds	r3, #1
 80130d4:	72fb      	strb	r3, [r7, #11]
          break;
 80130d6:	e06f      	b.n	80131b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80130de:	68db      	ldr	r3, [r3, #12]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d00b      	beq.n	80130fc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80130ea:	68db      	ldr	r3, [r3, #12]
 80130ec:	687a      	ldr	r2, [r7, #4]
 80130ee:	7c12      	ldrb	r2, [r2, #16]
 80130f0:	f107 0108 	add.w	r1, r7, #8
 80130f4:	4610      	mov	r0, r2
 80130f6:	4798      	blx	r3
 80130f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80130fa:	e05d      	b.n	80131b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80130fc:	6839      	ldr	r1, [r7, #0]
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f000 fa7e 	bl	8013600 <USBD_CtlError>
            err++;
 8013104:	7afb      	ldrb	r3, [r7, #11]
 8013106:	3301      	adds	r3, #1
 8013108:	72fb      	strb	r3, [r7, #11]
          break;
 801310a:	e055      	b.n	80131b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013112:	691b      	ldr	r3, [r3, #16]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d00b      	beq.n	8013130 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801311e:	691b      	ldr	r3, [r3, #16]
 8013120:	687a      	ldr	r2, [r7, #4]
 8013122:	7c12      	ldrb	r2, [r2, #16]
 8013124:	f107 0108 	add.w	r1, r7, #8
 8013128:	4610      	mov	r0, r2
 801312a:	4798      	blx	r3
 801312c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801312e:	e043      	b.n	80131b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013130:	6839      	ldr	r1, [r7, #0]
 8013132:	6878      	ldr	r0, [r7, #4]
 8013134:	f000 fa64 	bl	8013600 <USBD_CtlError>
            err++;
 8013138:	7afb      	ldrb	r3, [r7, #11]
 801313a:	3301      	adds	r3, #1
 801313c:	72fb      	strb	r3, [r7, #11]
          break;
 801313e:	e03b      	b.n	80131b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013146:	695b      	ldr	r3, [r3, #20]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d00b      	beq.n	8013164 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013152:	695b      	ldr	r3, [r3, #20]
 8013154:	687a      	ldr	r2, [r7, #4]
 8013156:	7c12      	ldrb	r2, [r2, #16]
 8013158:	f107 0108 	add.w	r1, r7, #8
 801315c:	4610      	mov	r0, r2
 801315e:	4798      	blx	r3
 8013160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013162:	e029      	b.n	80131b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013164:	6839      	ldr	r1, [r7, #0]
 8013166:	6878      	ldr	r0, [r7, #4]
 8013168:	f000 fa4a 	bl	8013600 <USBD_CtlError>
            err++;
 801316c:	7afb      	ldrb	r3, [r7, #11]
 801316e:	3301      	adds	r3, #1
 8013170:	72fb      	strb	r3, [r7, #11]
          break;
 8013172:	e021      	b.n	80131b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801317a:	699b      	ldr	r3, [r3, #24]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d00b      	beq.n	8013198 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013186:	699b      	ldr	r3, [r3, #24]
 8013188:	687a      	ldr	r2, [r7, #4]
 801318a:	7c12      	ldrb	r2, [r2, #16]
 801318c:	f107 0108 	add.w	r1, r7, #8
 8013190:	4610      	mov	r0, r2
 8013192:	4798      	blx	r3
 8013194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013196:	e00f      	b.n	80131b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013198:	6839      	ldr	r1, [r7, #0]
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f000 fa30 	bl	8013600 <USBD_CtlError>
            err++;
 80131a0:	7afb      	ldrb	r3, [r7, #11]
 80131a2:	3301      	adds	r3, #1
 80131a4:	72fb      	strb	r3, [r7, #11]
          break;
 80131a6:	e007      	b.n	80131b8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80131a8:	6839      	ldr	r1, [r7, #0]
 80131aa:	6878      	ldr	r0, [r7, #4]
 80131ac:	f000 fa28 	bl	8013600 <USBD_CtlError>
          err++;
 80131b0:	7afb      	ldrb	r3, [r7, #11]
 80131b2:	3301      	adds	r3, #1
 80131b4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80131b6:	bf00      	nop
      }
      break;
 80131b8:	e037      	b.n	801322a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	7c1b      	ldrb	r3, [r3, #16]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d109      	bne.n	80131d6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80131c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80131ca:	f107 0208 	add.w	r2, r7, #8
 80131ce:	4610      	mov	r0, r2
 80131d0:	4798      	blx	r3
 80131d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80131d4:	e029      	b.n	801322a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80131d6:	6839      	ldr	r1, [r7, #0]
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	f000 fa11 	bl	8013600 <USBD_CtlError>
        err++;
 80131de:	7afb      	ldrb	r3, [r7, #11]
 80131e0:	3301      	adds	r3, #1
 80131e2:	72fb      	strb	r3, [r7, #11]
      break;
 80131e4:	e021      	b.n	801322a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	7c1b      	ldrb	r3, [r3, #16]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d10d      	bne.n	801320a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80131f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80131f6:	f107 0208 	add.w	r2, r7, #8
 80131fa:	4610      	mov	r0, r2
 80131fc:	4798      	blx	r3
 80131fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	3301      	adds	r3, #1
 8013204:	2207      	movs	r2, #7
 8013206:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013208:	e00f      	b.n	801322a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801320a:	6839      	ldr	r1, [r7, #0]
 801320c:	6878      	ldr	r0, [r7, #4]
 801320e:	f000 f9f7 	bl	8013600 <USBD_CtlError>
        err++;
 8013212:	7afb      	ldrb	r3, [r7, #11]
 8013214:	3301      	adds	r3, #1
 8013216:	72fb      	strb	r3, [r7, #11]
      break;
 8013218:	e007      	b.n	801322a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801321a:	6839      	ldr	r1, [r7, #0]
 801321c:	6878      	ldr	r0, [r7, #4]
 801321e:	f000 f9ef 	bl	8013600 <USBD_CtlError>
      err++;
 8013222:	7afb      	ldrb	r3, [r7, #11]
 8013224:	3301      	adds	r3, #1
 8013226:	72fb      	strb	r3, [r7, #11]
      break;
 8013228:	bf00      	nop
  }

  if (err != 0U)
 801322a:	7afb      	ldrb	r3, [r7, #11]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d11e      	bne.n	801326e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8013230:	683b      	ldr	r3, [r7, #0]
 8013232:	88db      	ldrh	r3, [r3, #6]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d016      	beq.n	8013266 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8013238:	893b      	ldrh	r3, [r7, #8]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d00e      	beq.n	801325c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	88da      	ldrh	r2, [r3, #6]
 8013242:	893b      	ldrh	r3, [r7, #8]
 8013244:	4293      	cmp	r3, r2
 8013246:	bf28      	it	cs
 8013248:	4613      	movcs	r3, r2
 801324a:	b29b      	uxth	r3, r3
 801324c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801324e:	893b      	ldrh	r3, [r7, #8]
 8013250:	461a      	mov	r2, r3
 8013252:	68f9      	ldr	r1, [r7, #12]
 8013254:	6878      	ldr	r0, [r7, #4]
 8013256:	f000 fa44 	bl	80136e2 <USBD_CtlSendData>
 801325a:	e009      	b.n	8013270 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801325c:	6839      	ldr	r1, [r7, #0]
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	f000 f9ce 	bl	8013600 <USBD_CtlError>
 8013264:	e004      	b.n	8013270 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013266:	6878      	ldr	r0, [r7, #4]
 8013268:	f000 fa95 	bl	8013796 <USBD_CtlSendStatus>
 801326c:	e000      	b.n	8013270 <USBD_GetDescriptor+0x320>
    return;
 801326e:	bf00      	nop
  }
}
 8013270:	3710      	adds	r7, #16
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}
 8013276:	bf00      	nop

08013278 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b084      	sub	sp, #16
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013282:	683b      	ldr	r3, [r7, #0]
 8013284:	889b      	ldrh	r3, [r3, #4]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d131      	bne.n	80132ee <USBD_SetAddress+0x76>
 801328a:	683b      	ldr	r3, [r7, #0]
 801328c:	88db      	ldrh	r3, [r3, #6]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d12d      	bne.n	80132ee <USBD_SetAddress+0x76>
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	885b      	ldrh	r3, [r3, #2]
 8013296:	2b7f      	cmp	r3, #127	@ 0x7f
 8013298:	d829      	bhi.n	80132ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801329a:	683b      	ldr	r3, [r7, #0]
 801329c:	885b      	ldrh	r3, [r3, #2]
 801329e:	b2db      	uxtb	r3, r3
 80132a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80132a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80132ac:	b2db      	uxtb	r3, r3
 80132ae:	2b03      	cmp	r3, #3
 80132b0:	d104      	bne.n	80132bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80132b2:	6839      	ldr	r1, [r7, #0]
 80132b4:	6878      	ldr	r0, [r7, #4]
 80132b6:	f000 f9a3 	bl	8013600 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80132ba:	e01d      	b.n	80132f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	7bfa      	ldrb	r2, [r7, #15]
 80132c0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80132c4:	7bfb      	ldrb	r3, [r7, #15]
 80132c6:	4619      	mov	r1, r3
 80132c8:	6878      	ldr	r0, [r7, #4]
 80132ca:	f000 fea1 	bl	8014010 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80132ce:	6878      	ldr	r0, [r7, #4]
 80132d0:	f000 fa61 	bl	8013796 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80132d4:	7bfb      	ldrb	r3, [r7, #15]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d004      	beq.n	80132e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	2202      	movs	r2, #2
 80132de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80132e2:	e009      	b.n	80132f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2201      	movs	r2, #1
 80132e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80132ec:	e004      	b.n	80132f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80132ee:	6839      	ldr	r1, [r7, #0]
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f000 f985 	bl	8013600 <USBD_CtlError>
  }
}
 80132f6:	bf00      	nop
 80132f8:	bf00      	nop
 80132fa:	3710      	adds	r7, #16
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}

08013300 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b084      	sub	sp, #16
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
 8013308:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801330a:	2300      	movs	r3, #0
 801330c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801330e:	683b      	ldr	r3, [r7, #0]
 8013310:	885b      	ldrh	r3, [r3, #2]
 8013312:	b2da      	uxtb	r2, r3
 8013314:	4b4c      	ldr	r3, [pc, #304]	@ (8013448 <USBD_SetConfig+0x148>)
 8013316:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013318:	4b4b      	ldr	r3, [pc, #300]	@ (8013448 <USBD_SetConfig+0x148>)
 801331a:	781b      	ldrb	r3, [r3, #0]
 801331c:	2b01      	cmp	r3, #1
 801331e:	d905      	bls.n	801332c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013320:	6839      	ldr	r1, [r7, #0]
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f000 f96c 	bl	8013600 <USBD_CtlError>
    return USBD_FAIL;
 8013328:	2303      	movs	r3, #3
 801332a:	e088      	b.n	801343e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013332:	b2db      	uxtb	r3, r3
 8013334:	2b02      	cmp	r3, #2
 8013336:	d002      	beq.n	801333e <USBD_SetConfig+0x3e>
 8013338:	2b03      	cmp	r3, #3
 801333a:	d025      	beq.n	8013388 <USBD_SetConfig+0x88>
 801333c:	e071      	b.n	8013422 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801333e:	4b42      	ldr	r3, [pc, #264]	@ (8013448 <USBD_SetConfig+0x148>)
 8013340:	781b      	ldrb	r3, [r3, #0]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d01c      	beq.n	8013380 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8013346:	4b40      	ldr	r3, [pc, #256]	@ (8013448 <USBD_SetConfig+0x148>)
 8013348:	781b      	ldrb	r3, [r3, #0]
 801334a:	461a      	mov	r2, r3
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013350:	4b3d      	ldr	r3, [pc, #244]	@ (8013448 <USBD_SetConfig+0x148>)
 8013352:	781b      	ldrb	r3, [r3, #0]
 8013354:	4619      	mov	r1, r3
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f7ff f992 	bl	8012680 <USBD_SetClassConfig>
 801335c:	4603      	mov	r3, r0
 801335e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013360:	7bfb      	ldrb	r3, [r7, #15]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d004      	beq.n	8013370 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8013366:	6839      	ldr	r1, [r7, #0]
 8013368:	6878      	ldr	r0, [r7, #4]
 801336a:	f000 f949 	bl	8013600 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801336e:	e065      	b.n	801343c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8013370:	6878      	ldr	r0, [r7, #4]
 8013372:	f000 fa10 	bl	8013796 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	2203      	movs	r2, #3
 801337a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801337e:	e05d      	b.n	801343c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f000 fa08 	bl	8013796 <USBD_CtlSendStatus>
      break;
 8013386:	e059      	b.n	801343c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013388:	4b2f      	ldr	r3, [pc, #188]	@ (8013448 <USBD_SetConfig+0x148>)
 801338a:	781b      	ldrb	r3, [r3, #0]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d112      	bne.n	80133b6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2202      	movs	r2, #2
 8013394:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8013398:	4b2b      	ldr	r3, [pc, #172]	@ (8013448 <USBD_SetConfig+0x148>)
 801339a:	781b      	ldrb	r3, [r3, #0]
 801339c:	461a      	mov	r2, r3
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80133a2:	4b29      	ldr	r3, [pc, #164]	@ (8013448 <USBD_SetConfig+0x148>)
 80133a4:	781b      	ldrb	r3, [r3, #0]
 80133a6:	4619      	mov	r1, r3
 80133a8:	6878      	ldr	r0, [r7, #4]
 80133aa:	f7ff f985 	bl	80126b8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f000 f9f1 	bl	8013796 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80133b4:	e042      	b.n	801343c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80133b6:	4b24      	ldr	r3, [pc, #144]	@ (8013448 <USBD_SetConfig+0x148>)
 80133b8:	781b      	ldrb	r3, [r3, #0]
 80133ba:	461a      	mov	r2, r3
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	685b      	ldr	r3, [r3, #4]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d02a      	beq.n	801341a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	685b      	ldr	r3, [r3, #4]
 80133c8:	b2db      	uxtb	r3, r3
 80133ca:	4619      	mov	r1, r3
 80133cc:	6878      	ldr	r0, [r7, #4]
 80133ce:	f7ff f973 	bl	80126b8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80133d2:	4b1d      	ldr	r3, [pc, #116]	@ (8013448 <USBD_SetConfig+0x148>)
 80133d4:	781b      	ldrb	r3, [r3, #0]
 80133d6:	461a      	mov	r2, r3
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80133dc:	4b1a      	ldr	r3, [pc, #104]	@ (8013448 <USBD_SetConfig+0x148>)
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	4619      	mov	r1, r3
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f7ff f94c 	bl	8012680 <USBD_SetClassConfig>
 80133e8:	4603      	mov	r3, r0
 80133ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80133ec:	7bfb      	ldrb	r3, [r7, #15]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d00f      	beq.n	8013412 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80133f2:	6839      	ldr	r1, [r7, #0]
 80133f4:	6878      	ldr	r0, [r7, #4]
 80133f6:	f000 f903 	bl	8013600 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	685b      	ldr	r3, [r3, #4]
 80133fe:	b2db      	uxtb	r3, r3
 8013400:	4619      	mov	r1, r3
 8013402:	6878      	ldr	r0, [r7, #4]
 8013404:	f7ff f958 	bl	80126b8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	2202      	movs	r2, #2
 801340c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013410:	e014      	b.n	801343c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8013412:	6878      	ldr	r0, [r7, #4]
 8013414:	f000 f9bf 	bl	8013796 <USBD_CtlSendStatus>
      break;
 8013418:	e010      	b.n	801343c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801341a:	6878      	ldr	r0, [r7, #4]
 801341c:	f000 f9bb 	bl	8013796 <USBD_CtlSendStatus>
      break;
 8013420:	e00c      	b.n	801343c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8013422:	6839      	ldr	r1, [r7, #0]
 8013424:	6878      	ldr	r0, [r7, #4]
 8013426:	f000 f8eb 	bl	8013600 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801342a:	4b07      	ldr	r3, [pc, #28]	@ (8013448 <USBD_SetConfig+0x148>)
 801342c:	781b      	ldrb	r3, [r3, #0]
 801342e:	4619      	mov	r1, r3
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	f7ff f941 	bl	80126b8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013436:	2303      	movs	r3, #3
 8013438:	73fb      	strb	r3, [r7, #15]
      break;
 801343a:	bf00      	nop
  }

  return ret;
 801343c:	7bfb      	ldrb	r3, [r7, #15]
}
 801343e:	4618      	mov	r0, r3
 8013440:	3710      	adds	r7, #16
 8013442:	46bd      	mov	sp, r7
 8013444:	bd80      	pop	{r7, pc}
 8013446:	bf00      	nop
 8013448:	20011f2c 	.word	0x20011f2c

0801344c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b082      	sub	sp, #8
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
 8013454:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	88db      	ldrh	r3, [r3, #6]
 801345a:	2b01      	cmp	r3, #1
 801345c:	d004      	beq.n	8013468 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801345e:	6839      	ldr	r1, [r7, #0]
 8013460:	6878      	ldr	r0, [r7, #4]
 8013462:	f000 f8cd 	bl	8013600 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013466:	e023      	b.n	80134b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801346e:	b2db      	uxtb	r3, r3
 8013470:	2b02      	cmp	r3, #2
 8013472:	dc02      	bgt.n	801347a <USBD_GetConfig+0x2e>
 8013474:	2b00      	cmp	r3, #0
 8013476:	dc03      	bgt.n	8013480 <USBD_GetConfig+0x34>
 8013478:	e015      	b.n	80134a6 <USBD_GetConfig+0x5a>
 801347a:	2b03      	cmp	r3, #3
 801347c:	d00b      	beq.n	8013496 <USBD_GetConfig+0x4a>
 801347e:	e012      	b.n	80134a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2200      	movs	r2, #0
 8013484:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	3308      	adds	r3, #8
 801348a:	2201      	movs	r2, #1
 801348c:	4619      	mov	r1, r3
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	f000 f927 	bl	80136e2 <USBD_CtlSendData>
        break;
 8013494:	e00c      	b.n	80134b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	3304      	adds	r3, #4
 801349a:	2201      	movs	r2, #1
 801349c:	4619      	mov	r1, r3
 801349e:	6878      	ldr	r0, [r7, #4]
 80134a0:	f000 f91f 	bl	80136e2 <USBD_CtlSendData>
        break;
 80134a4:	e004      	b.n	80134b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80134a6:	6839      	ldr	r1, [r7, #0]
 80134a8:	6878      	ldr	r0, [r7, #4]
 80134aa:	f000 f8a9 	bl	8013600 <USBD_CtlError>
        break;
 80134ae:	bf00      	nop
}
 80134b0:	bf00      	nop
 80134b2:	3708      	adds	r7, #8
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}

080134b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b082      	sub	sp, #8
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
 80134c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80134c8:	b2db      	uxtb	r3, r3
 80134ca:	3b01      	subs	r3, #1
 80134cc:	2b02      	cmp	r3, #2
 80134ce:	d81e      	bhi.n	801350e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	88db      	ldrh	r3, [r3, #6]
 80134d4:	2b02      	cmp	r3, #2
 80134d6:	d004      	beq.n	80134e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80134d8:	6839      	ldr	r1, [r7, #0]
 80134da:	6878      	ldr	r0, [r7, #4]
 80134dc:	f000 f890 	bl	8013600 <USBD_CtlError>
        break;
 80134e0:	e01a      	b.n	8013518 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	2201      	movs	r2, #1
 80134e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d005      	beq.n	80134fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	68db      	ldr	r3, [r3, #12]
 80134f6:	f043 0202 	orr.w	r2, r3, #2
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	330c      	adds	r3, #12
 8013502:	2202      	movs	r2, #2
 8013504:	4619      	mov	r1, r3
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	f000 f8eb 	bl	80136e2 <USBD_CtlSendData>
      break;
 801350c:	e004      	b.n	8013518 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801350e:	6839      	ldr	r1, [r7, #0]
 8013510:	6878      	ldr	r0, [r7, #4]
 8013512:	f000 f875 	bl	8013600 <USBD_CtlError>
      break;
 8013516:	bf00      	nop
  }
}
 8013518:	bf00      	nop
 801351a:	3708      	adds	r7, #8
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}

08013520 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b082      	sub	sp, #8
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
 8013528:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801352a:	683b      	ldr	r3, [r7, #0]
 801352c:	885b      	ldrh	r3, [r3, #2]
 801352e:	2b01      	cmp	r3, #1
 8013530:	d106      	bne.n	8013540 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	2201      	movs	r2, #1
 8013536:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f000 f92b 	bl	8013796 <USBD_CtlSendStatus>
  }
}
 8013540:	bf00      	nop
 8013542:	3708      	adds	r7, #8
 8013544:	46bd      	mov	sp, r7
 8013546:	bd80      	pop	{r7, pc}

08013548 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b082      	sub	sp, #8
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
 8013550:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013558:	b2db      	uxtb	r3, r3
 801355a:	3b01      	subs	r3, #1
 801355c:	2b02      	cmp	r3, #2
 801355e:	d80b      	bhi.n	8013578 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013560:	683b      	ldr	r3, [r7, #0]
 8013562:	885b      	ldrh	r3, [r3, #2]
 8013564:	2b01      	cmp	r3, #1
 8013566:	d10c      	bne.n	8013582 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	2200      	movs	r2, #0
 801356c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f000 f910 	bl	8013796 <USBD_CtlSendStatus>
      }
      break;
 8013576:	e004      	b.n	8013582 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013578:	6839      	ldr	r1, [r7, #0]
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f000 f840 	bl	8013600 <USBD_CtlError>
      break;
 8013580:	e000      	b.n	8013584 <USBD_ClrFeature+0x3c>
      break;
 8013582:	bf00      	nop
  }
}
 8013584:	bf00      	nop
 8013586:	3708      	adds	r7, #8
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}

0801358c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b084      	sub	sp, #16
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
 8013594:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	781a      	ldrb	r2, [r3, #0]
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	3301      	adds	r3, #1
 80135a6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	781a      	ldrb	r2, [r3, #0]
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	3301      	adds	r3, #1
 80135b4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80135b6:	68f8      	ldr	r0, [r7, #12]
 80135b8:	f7ff fa92 	bl	8012ae0 <SWAPBYTE>
 80135bc:	4603      	mov	r3, r0
 80135be:	461a      	mov	r2, r3
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	3301      	adds	r3, #1
 80135c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	3301      	adds	r3, #1
 80135ce:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80135d0:	68f8      	ldr	r0, [r7, #12]
 80135d2:	f7ff fa85 	bl	8012ae0 <SWAPBYTE>
 80135d6:	4603      	mov	r3, r0
 80135d8:	461a      	mov	r2, r3
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	3301      	adds	r3, #1
 80135e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	3301      	adds	r3, #1
 80135e8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80135ea:	68f8      	ldr	r0, [r7, #12]
 80135ec:	f7ff fa78 	bl	8012ae0 <SWAPBYTE>
 80135f0:	4603      	mov	r3, r0
 80135f2:	461a      	mov	r2, r3
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	80da      	strh	r2, [r3, #6]
}
 80135f8:	bf00      	nop
 80135fa:	3710      	adds	r7, #16
 80135fc:	46bd      	mov	sp, r7
 80135fe:	bd80      	pop	{r7, pc}

08013600 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b082      	sub	sp, #8
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
 8013608:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801360a:	2180      	movs	r1, #128	@ 0x80
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f000 fc95 	bl	8013f3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013612:	2100      	movs	r1, #0
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f000 fc91 	bl	8013f3c <USBD_LL_StallEP>
}
 801361a:	bf00      	nop
 801361c:	3708      	adds	r7, #8
 801361e:	46bd      	mov	sp, r7
 8013620:	bd80      	pop	{r7, pc}

08013622 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013622:	b580      	push	{r7, lr}
 8013624:	b086      	sub	sp, #24
 8013626:	af00      	add	r7, sp, #0
 8013628:	60f8      	str	r0, [r7, #12]
 801362a:	60b9      	str	r1, [r7, #8]
 801362c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801362e:	2300      	movs	r3, #0
 8013630:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d036      	beq.n	80136a6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801363c:	6938      	ldr	r0, [r7, #16]
 801363e:	f000 f836 	bl	80136ae <USBD_GetLen>
 8013642:	4603      	mov	r3, r0
 8013644:	3301      	adds	r3, #1
 8013646:	b29b      	uxth	r3, r3
 8013648:	005b      	lsls	r3, r3, #1
 801364a:	b29a      	uxth	r2, r3
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8013650:	7dfb      	ldrb	r3, [r7, #23]
 8013652:	68ba      	ldr	r2, [r7, #8]
 8013654:	4413      	add	r3, r2
 8013656:	687a      	ldr	r2, [r7, #4]
 8013658:	7812      	ldrb	r2, [r2, #0]
 801365a:	701a      	strb	r2, [r3, #0]
  idx++;
 801365c:	7dfb      	ldrb	r3, [r7, #23]
 801365e:	3301      	adds	r3, #1
 8013660:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013662:	7dfb      	ldrb	r3, [r7, #23]
 8013664:	68ba      	ldr	r2, [r7, #8]
 8013666:	4413      	add	r3, r2
 8013668:	2203      	movs	r2, #3
 801366a:	701a      	strb	r2, [r3, #0]
  idx++;
 801366c:	7dfb      	ldrb	r3, [r7, #23]
 801366e:	3301      	adds	r3, #1
 8013670:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013672:	e013      	b.n	801369c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8013674:	7dfb      	ldrb	r3, [r7, #23]
 8013676:	68ba      	ldr	r2, [r7, #8]
 8013678:	4413      	add	r3, r2
 801367a:	693a      	ldr	r2, [r7, #16]
 801367c:	7812      	ldrb	r2, [r2, #0]
 801367e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	3301      	adds	r3, #1
 8013684:	613b      	str	r3, [r7, #16]
    idx++;
 8013686:	7dfb      	ldrb	r3, [r7, #23]
 8013688:	3301      	adds	r3, #1
 801368a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801368c:	7dfb      	ldrb	r3, [r7, #23]
 801368e:	68ba      	ldr	r2, [r7, #8]
 8013690:	4413      	add	r3, r2
 8013692:	2200      	movs	r2, #0
 8013694:	701a      	strb	r2, [r3, #0]
    idx++;
 8013696:	7dfb      	ldrb	r3, [r7, #23]
 8013698:	3301      	adds	r3, #1
 801369a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801369c:	693b      	ldr	r3, [r7, #16]
 801369e:	781b      	ldrb	r3, [r3, #0]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d1e7      	bne.n	8013674 <USBD_GetString+0x52>
 80136a4:	e000      	b.n	80136a8 <USBD_GetString+0x86>
    return;
 80136a6:	bf00      	nop
  }
}
 80136a8:	3718      	adds	r7, #24
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd80      	pop	{r7, pc}

080136ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80136ae:	b480      	push	{r7}
 80136b0:	b085      	sub	sp, #20
 80136b2:	af00      	add	r7, sp, #0
 80136b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80136b6:	2300      	movs	r3, #0
 80136b8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80136be:	e005      	b.n	80136cc <USBD_GetLen+0x1e>
  {
    len++;
 80136c0:	7bfb      	ldrb	r3, [r7, #15]
 80136c2:	3301      	adds	r3, #1
 80136c4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80136c6:	68bb      	ldr	r3, [r7, #8]
 80136c8:	3301      	adds	r3, #1
 80136ca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80136cc:	68bb      	ldr	r3, [r7, #8]
 80136ce:	781b      	ldrb	r3, [r3, #0]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d1f5      	bne.n	80136c0 <USBD_GetLen+0x12>
  }

  return len;
 80136d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80136d6:	4618      	mov	r0, r3
 80136d8:	3714      	adds	r7, #20
 80136da:	46bd      	mov	sp, r7
 80136dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e0:	4770      	bx	lr

080136e2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80136e2:	b580      	push	{r7, lr}
 80136e4:	b084      	sub	sp, #16
 80136e6:	af00      	add	r7, sp, #0
 80136e8:	60f8      	str	r0, [r7, #12]
 80136ea:	60b9      	str	r1, [r7, #8]
 80136ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	2202      	movs	r2, #2
 80136f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	687a      	ldr	r2, [r7, #4]
 80136fa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	687a      	ldr	r2, [r7, #4]
 8013700:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	68ba      	ldr	r2, [r7, #8]
 8013706:	2100      	movs	r1, #0
 8013708:	68f8      	ldr	r0, [r7, #12]
 801370a:	f000 fca0 	bl	801404e <USBD_LL_Transmit>

  return USBD_OK;
 801370e:	2300      	movs	r3, #0
}
 8013710:	4618      	mov	r0, r3
 8013712:	3710      	adds	r7, #16
 8013714:	46bd      	mov	sp, r7
 8013716:	bd80      	pop	{r7, pc}

08013718 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b084      	sub	sp, #16
 801371c:	af00      	add	r7, sp, #0
 801371e:	60f8      	str	r0, [r7, #12]
 8013720:	60b9      	str	r1, [r7, #8]
 8013722:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	68ba      	ldr	r2, [r7, #8]
 8013728:	2100      	movs	r1, #0
 801372a:	68f8      	ldr	r0, [r7, #12]
 801372c:	f000 fc8f 	bl	801404e <USBD_LL_Transmit>

  return USBD_OK;
 8013730:	2300      	movs	r3, #0
}
 8013732:	4618      	mov	r0, r3
 8013734:	3710      	adds	r7, #16
 8013736:	46bd      	mov	sp, r7
 8013738:	bd80      	pop	{r7, pc}

0801373a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801373a:	b580      	push	{r7, lr}
 801373c:	b084      	sub	sp, #16
 801373e:	af00      	add	r7, sp, #0
 8013740:	60f8      	str	r0, [r7, #12]
 8013742:	60b9      	str	r1, [r7, #8]
 8013744:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	2203      	movs	r2, #3
 801374a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	687a      	ldr	r2, [r7, #4]
 8013752:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	687a      	ldr	r2, [r7, #4]
 801375a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	68ba      	ldr	r2, [r7, #8]
 8013762:	2100      	movs	r1, #0
 8013764:	68f8      	ldr	r0, [r7, #12]
 8013766:	f000 fc93 	bl	8014090 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801376a:	2300      	movs	r3, #0
}
 801376c:	4618      	mov	r0, r3
 801376e:	3710      	adds	r7, #16
 8013770:	46bd      	mov	sp, r7
 8013772:	bd80      	pop	{r7, pc}

08013774 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b084      	sub	sp, #16
 8013778:	af00      	add	r7, sp, #0
 801377a:	60f8      	str	r0, [r7, #12]
 801377c:	60b9      	str	r1, [r7, #8]
 801377e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	68ba      	ldr	r2, [r7, #8]
 8013784:	2100      	movs	r1, #0
 8013786:	68f8      	ldr	r0, [r7, #12]
 8013788:	f000 fc82 	bl	8014090 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801378c:	2300      	movs	r3, #0
}
 801378e:	4618      	mov	r0, r3
 8013790:	3710      	adds	r7, #16
 8013792:	46bd      	mov	sp, r7
 8013794:	bd80      	pop	{r7, pc}

08013796 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013796:	b580      	push	{r7, lr}
 8013798:	b082      	sub	sp, #8
 801379a:	af00      	add	r7, sp, #0
 801379c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	2204      	movs	r2, #4
 80137a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80137a6:	2300      	movs	r3, #0
 80137a8:	2200      	movs	r2, #0
 80137aa:	2100      	movs	r1, #0
 80137ac:	6878      	ldr	r0, [r7, #4]
 80137ae:	f000 fc4e 	bl	801404e <USBD_LL_Transmit>

  return USBD_OK;
 80137b2:	2300      	movs	r3, #0
}
 80137b4:	4618      	mov	r0, r3
 80137b6:	3708      	adds	r7, #8
 80137b8:	46bd      	mov	sp, r7
 80137ba:	bd80      	pop	{r7, pc}

080137bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b082      	sub	sp, #8
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2205      	movs	r2, #5
 80137c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80137cc:	2300      	movs	r3, #0
 80137ce:	2200      	movs	r2, #0
 80137d0:	2100      	movs	r1, #0
 80137d2:	6878      	ldr	r0, [r7, #4]
 80137d4:	f000 fc5c 	bl	8014090 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80137d8:	2300      	movs	r3, #0
}
 80137da:	4618      	mov	r0, r3
 80137dc:	3708      	adds	r7, #8
 80137de:	46bd      	mov	sp, r7
 80137e0:	bd80      	pop	{r7, pc}
	...

080137e4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80137e8:	2200      	movs	r2, #0
 80137ea:	4912      	ldr	r1, [pc, #72]	@ (8013834 <MX_USB_Device_Init+0x50>)
 80137ec:	4812      	ldr	r0, [pc, #72]	@ (8013838 <MX_USB_Device_Init+0x54>)
 80137ee:	f7fe fed9 	bl	80125a4 <USBD_Init>
 80137f2:	4603      	mov	r3, r0
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d001      	beq.n	80137fc <MX_USB_Device_Init+0x18>
    Error_Handler();
 80137f8:	f7ef fd40 	bl	800327c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80137fc:	490f      	ldr	r1, [pc, #60]	@ (801383c <MX_USB_Device_Init+0x58>)
 80137fe:	480e      	ldr	r0, [pc, #56]	@ (8013838 <MX_USB_Device_Init+0x54>)
 8013800:	f7fe ff00 	bl	8012604 <USBD_RegisterClass>
 8013804:	4603      	mov	r3, r0
 8013806:	2b00      	cmp	r3, #0
 8013808:	d001      	beq.n	801380e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801380a:	f7ef fd37 	bl	800327c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801380e:	490c      	ldr	r1, [pc, #48]	@ (8013840 <MX_USB_Device_Init+0x5c>)
 8013810:	4809      	ldr	r0, [pc, #36]	@ (8013838 <MX_USB_Device_Init+0x54>)
 8013812:	f7fe fe21 	bl	8012458 <USBD_CDC_RegisterInterface>
 8013816:	4603      	mov	r3, r0
 8013818:	2b00      	cmp	r3, #0
 801381a:	d001      	beq.n	8013820 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 801381c:	f7ef fd2e 	bl	800327c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8013820:	4805      	ldr	r0, [pc, #20]	@ (8013838 <MX_USB_Device_Init+0x54>)
 8013822:	f7fe ff16 	bl	8012652 <USBD_Start>
 8013826:	4603      	mov	r3, r0
 8013828:	2b00      	cmp	r3, #0
 801382a:	d001      	beq.n	8013830 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 801382c:	f7ef fd26 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8013830:	bf00      	nop
 8013832:	bd80      	pop	{r7, pc}
 8013834:	200003a8 	.word	0x200003a8
 8013838:	20011f30 	.word	0x20011f30
 801383c:	20000290 	.word	0x20000290
 8013840:	20000394 	.word	0x20000394

08013844 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013848:	2200      	movs	r2, #0
 801384a:	4905      	ldr	r1, [pc, #20]	@ (8013860 <CDC_Init_FS+0x1c>)
 801384c:	4805      	ldr	r0, [pc, #20]	@ (8013864 <CDC_Init_FS+0x20>)
 801384e:	f7fe fe18 	bl	8012482 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013852:	4905      	ldr	r1, [pc, #20]	@ (8013868 <CDC_Init_FS+0x24>)
 8013854:	4803      	ldr	r0, [pc, #12]	@ (8013864 <CDC_Init_FS+0x20>)
 8013856:	f7fe fe32 	bl	80124be <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801385a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801385c:	4618      	mov	r0, r3
 801385e:	bd80      	pop	{r7, pc}
 8013860:	20012600 	.word	0x20012600
 8013864:	20011f30 	.word	0x20011f30
 8013868:	20012200 	.word	0x20012200

0801386c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801386c:	b480      	push	{r7}
 801386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013870:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013872:	4618      	mov	r0, r3
 8013874:	46bd      	mov	sp, r7
 8013876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387a:	4770      	bx	lr

0801387c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801387c:	b480      	push	{r7}
 801387e:	b083      	sub	sp, #12
 8013880:	af00      	add	r7, sp, #0
 8013882:	4603      	mov	r3, r0
 8013884:	6039      	str	r1, [r7, #0]
 8013886:	71fb      	strb	r3, [r7, #7]
 8013888:	4613      	mov	r3, r2
 801388a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801388c:	79fb      	ldrb	r3, [r7, #7]
 801388e:	2b23      	cmp	r3, #35	@ 0x23
 8013890:	d84a      	bhi.n	8013928 <CDC_Control_FS+0xac>
 8013892:	a201      	add	r2, pc, #4	@ (adr r2, 8013898 <CDC_Control_FS+0x1c>)
 8013894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013898:	08013929 	.word	0x08013929
 801389c:	08013929 	.word	0x08013929
 80138a0:	08013929 	.word	0x08013929
 80138a4:	08013929 	.word	0x08013929
 80138a8:	08013929 	.word	0x08013929
 80138ac:	08013929 	.word	0x08013929
 80138b0:	08013929 	.word	0x08013929
 80138b4:	08013929 	.word	0x08013929
 80138b8:	08013929 	.word	0x08013929
 80138bc:	08013929 	.word	0x08013929
 80138c0:	08013929 	.word	0x08013929
 80138c4:	08013929 	.word	0x08013929
 80138c8:	08013929 	.word	0x08013929
 80138cc:	08013929 	.word	0x08013929
 80138d0:	08013929 	.word	0x08013929
 80138d4:	08013929 	.word	0x08013929
 80138d8:	08013929 	.word	0x08013929
 80138dc:	08013929 	.word	0x08013929
 80138e0:	08013929 	.word	0x08013929
 80138e4:	08013929 	.word	0x08013929
 80138e8:	08013929 	.word	0x08013929
 80138ec:	08013929 	.word	0x08013929
 80138f0:	08013929 	.word	0x08013929
 80138f4:	08013929 	.word	0x08013929
 80138f8:	08013929 	.word	0x08013929
 80138fc:	08013929 	.word	0x08013929
 8013900:	08013929 	.word	0x08013929
 8013904:	08013929 	.word	0x08013929
 8013908:	08013929 	.word	0x08013929
 801390c:	08013929 	.word	0x08013929
 8013910:	08013929 	.word	0x08013929
 8013914:	08013929 	.word	0x08013929
 8013918:	08013929 	.word	0x08013929
 801391c:	08013929 	.word	0x08013929
 8013920:	08013929 	.word	0x08013929
 8013924:	08013929 	.word	0x08013929
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013928:	bf00      	nop
  }

  return (USBD_OK);
 801392a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801392c:	4618      	mov	r0, r3
 801392e:	370c      	adds	r7, #12
 8013930:	46bd      	mov	sp, r7
 8013932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013936:	4770      	bx	lr

08013938 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013938:	b580      	push	{r7, lr}
 801393a:	b082      	sub	sp, #8
 801393c:	af00      	add	r7, sp, #0
 801393e:	6078      	str	r0, [r7, #4]
 8013940:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013942:	6879      	ldr	r1, [r7, #4]
 8013944:	4805      	ldr	r0, [pc, #20]	@ (801395c <CDC_Receive_FS+0x24>)
 8013946:	f7fe fdba 	bl	80124be <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801394a:	4804      	ldr	r0, [pc, #16]	@ (801395c <CDC_Receive_FS+0x24>)
 801394c:	f7fe fe00 	bl	8012550 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013950:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013952:	4618      	mov	r0, r3
 8013954:	3708      	adds	r7, #8
 8013956:	46bd      	mov	sp, r7
 8013958:	bd80      	pop	{r7, pc}
 801395a:	bf00      	nop
 801395c:	20011f30 	.word	0x20011f30

08013960 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b084      	sub	sp, #16
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
 8013968:	460b      	mov	r3, r1
 801396a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801396c:	2300      	movs	r3, #0
 801396e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013970:	4b0d      	ldr	r3, [pc, #52]	@ (80139a8 <CDC_Transmit_FS+0x48>)
 8013972:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8013976:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801397e:	2b00      	cmp	r3, #0
 8013980:	d001      	beq.n	8013986 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8013982:	2301      	movs	r3, #1
 8013984:	e00b      	b.n	801399e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8013986:	887b      	ldrh	r3, [r7, #2]
 8013988:	461a      	mov	r2, r3
 801398a:	6879      	ldr	r1, [r7, #4]
 801398c:	4806      	ldr	r0, [pc, #24]	@ (80139a8 <CDC_Transmit_FS+0x48>)
 801398e:	f7fe fd78 	bl	8012482 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8013992:	4805      	ldr	r0, [pc, #20]	@ (80139a8 <CDC_Transmit_FS+0x48>)
 8013994:	f7fe fdac 	bl	80124f0 <USBD_CDC_TransmitPacket>
 8013998:	4603      	mov	r3, r0
 801399a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801399c:	7bfb      	ldrb	r3, [r7, #15]
}
 801399e:	4618      	mov	r0, r3
 80139a0:	3710      	adds	r7, #16
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}
 80139a6:	bf00      	nop
 80139a8:	20011f30 	.word	0x20011f30

080139ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80139ac:	b480      	push	{r7}
 80139ae:	b087      	sub	sp, #28
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	60f8      	str	r0, [r7, #12]
 80139b4:	60b9      	str	r1, [r7, #8]
 80139b6:	4613      	mov	r3, r2
 80139b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80139ba:	2300      	movs	r3, #0
 80139bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80139be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80139c2:	4618      	mov	r0, r3
 80139c4:	371c      	adds	r7, #28
 80139c6:	46bd      	mov	sp, r7
 80139c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139cc:	4770      	bx	lr
	...

080139d0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80139d0:	b480      	push	{r7}
 80139d2:	b083      	sub	sp, #12
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	4603      	mov	r3, r0
 80139d8:	6039      	str	r1, [r7, #0]
 80139da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80139dc:	683b      	ldr	r3, [r7, #0]
 80139de:	2212      	movs	r2, #18
 80139e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80139e2:	4b03      	ldr	r3, [pc, #12]	@ (80139f0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80139e4:	4618      	mov	r0, r3
 80139e6:	370c      	adds	r7, #12
 80139e8:	46bd      	mov	sp, r7
 80139ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ee:	4770      	bx	lr
 80139f0:	200003c8 	.word	0x200003c8

080139f4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80139f4:	b480      	push	{r7}
 80139f6:	b083      	sub	sp, #12
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	4603      	mov	r3, r0
 80139fc:	6039      	str	r1, [r7, #0]
 80139fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	2204      	movs	r2, #4
 8013a04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013a06:	4b03      	ldr	r3, [pc, #12]	@ (8013a14 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8013a08:	4618      	mov	r0, r3
 8013a0a:	370c      	adds	r7, #12
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a12:	4770      	bx	lr
 8013a14:	200003dc 	.word	0x200003dc

08013a18 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b082      	sub	sp, #8
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	4603      	mov	r3, r0
 8013a20:	6039      	str	r1, [r7, #0]
 8013a22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013a24:	79fb      	ldrb	r3, [r7, #7]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d105      	bne.n	8013a36 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8013a2a:	683a      	ldr	r2, [r7, #0]
 8013a2c:	4907      	ldr	r1, [pc, #28]	@ (8013a4c <USBD_CDC_ProductStrDescriptor+0x34>)
 8013a2e:	4808      	ldr	r0, [pc, #32]	@ (8013a50 <USBD_CDC_ProductStrDescriptor+0x38>)
 8013a30:	f7ff fdf7 	bl	8013622 <USBD_GetString>
 8013a34:	e004      	b.n	8013a40 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8013a36:	683a      	ldr	r2, [r7, #0]
 8013a38:	4904      	ldr	r1, [pc, #16]	@ (8013a4c <USBD_CDC_ProductStrDescriptor+0x34>)
 8013a3a:	4805      	ldr	r0, [pc, #20]	@ (8013a50 <USBD_CDC_ProductStrDescriptor+0x38>)
 8013a3c:	f7ff fdf1 	bl	8013622 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013a40:	4b02      	ldr	r3, [pc, #8]	@ (8013a4c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	3708      	adds	r7, #8
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}
 8013a4a:	bf00      	nop
 8013a4c:	20012a00 	.word	0x20012a00
 8013a50:	08018c48 	.word	0x08018c48

08013a54 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b082      	sub	sp, #8
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	6039      	str	r1, [r7, #0]
 8013a5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013a60:	683a      	ldr	r2, [r7, #0]
 8013a62:	4904      	ldr	r1, [pc, #16]	@ (8013a74 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8013a64:	4804      	ldr	r0, [pc, #16]	@ (8013a78 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8013a66:	f7ff fddc 	bl	8013622 <USBD_GetString>
  return USBD_StrDesc;
 8013a6a:	4b02      	ldr	r3, [pc, #8]	@ (8013a74 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	3708      	adds	r7, #8
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bd80      	pop	{r7, pc}
 8013a74:	20012a00 	.word	0x20012a00
 8013a78:	08018c60 	.word	0x08018c60

08013a7c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b082      	sub	sp, #8
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	4603      	mov	r3, r0
 8013a84:	6039      	str	r1, [r7, #0]
 8013a86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013a88:	683b      	ldr	r3, [r7, #0]
 8013a8a:	221a      	movs	r2, #26
 8013a8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013a8e:	f000 f843 	bl	8013b18 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8013a92:	4b02      	ldr	r3, [pc, #8]	@ (8013a9c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8013a94:	4618      	mov	r0, r3
 8013a96:	3708      	adds	r7, #8
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd80      	pop	{r7, pc}
 8013a9c:	200003e0 	.word	0x200003e0

08013aa0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b082      	sub	sp, #8
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	6039      	str	r1, [r7, #0]
 8013aaa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013aac:	79fb      	ldrb	r3, [r7, #7]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d105      	bne.n	8013abe <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8013ab2:	683a      	ldr	r2, [r7, #0]
 8013ab4:	4907      	ldr	r1, [pc, #28]	@ (8013ad4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8013ab6:	4808      	ldr	r0, [pc, #32]	@ (8013ad8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013ab8:	f7ff fdb3 	bl	8013622 <USBD_GetString>
 8013abc:	e004      	b.n	8013ac8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8013abe:	683a      	ldr	r2, [r7, #0]
 8013ac0:	4904      	ldr	r1, [pc, #16]	@ (8013ad4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8013ac2:	4805      	ldr	r0, [pc, #20]	@ (8013ad8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013ac4:	f7ff fdad 	bl	8013622 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013ac8:	4b02      	ldr	r3, [pc, #8]	@ (8013ad4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8013aca:	4618      	mov	r0, r3
 8013acc:	3708      	adds	r7, #8
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}
 8013ad2:	bf00      	nop
 8013ad4:	20012a00 	.word	0x20012a00
 8013ad8:	08018c74 	.word	0x08018c74

08013adc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b082      	sub	sp, #8
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	6039      	str	r1, [r7, #0]
 8013ae6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013ae8:	79fb      	ldrb	r3, [r7, #7]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d105      	bne.n	8013afa <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8013aee:	683a      	ldr	r2, [r7, #0]
 8013af0:	4907      	ldr	r1, [pc, #28]	@ (8013b10 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8013af2:	4808      	ldr	r0, [pc, #32]	@ (8013b14 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8013af4:	f7ff fd95 	bl	8013622 <USBD_GetString>
 8013af8:	e004      	b.n	8013b04 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8013afa:	683a      	ldr	r2, [r7, #0]
 8013afc:	4904      	ldr	r1, [pc, #16]	@ (8013b10 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8013afe:	4805      	ldr	r0, [pc, #20]	@ (8013b14 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8013b00:	f7ff fd8f 	bl	8013622 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013b04:	4b02      	ldr	r3, [pc, #8]	@ (8013b10 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8013b06:	4618      	mov	r0, r3
 8013b08:	3708      	adds	r7, #8
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	bd80      	pop	{r7, pc}
 8013b0e:	bf00      	nop
 8013b10:	20012a00 	.word	0x20012a00
 8013b14:	08018c80 	.word	0x08018c80

08013b18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b084      	sub	sp, #16
 8013b1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8013b5c <Get_SerialNum+0x44>)
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013b24:	4b0e      	ldr	r3, [pc, #56]	@ (8013b60 <Get_SerialNum+0x48>)
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8013b64 <Get_SerialNum+0x4c>)
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013b30:	68fa      	ldr	r2, [r7, #12]
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	4413      	add	r3, r2
 8013b36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d009      	beq.n	8013b52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013b3e:	2208      	movs	r2, #8
 8013b40:	4909      	ldr	r1, [pc, #36]	@ (8013b68 <Get_SerialNum+0x50>)
 8013b42:	68f8      	ldr	r0, [r7, #12]
 8013b44:	f000 f814 	bl	8013b70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013b48:	2204      	movs	r2, #4
 8013b4a:	4908      	ldr	r1, [pc, #32]	@ (8013b6c <Get_SerialNum+0x54>)
 8013b4c:	68b8      	ldr	r0, [r7, #8]
 8013b4e:	f000 f80f 	bl	8013b70 <IntToUnicode>
  }
}
 8013b52:	bf00      	nop
 8013b54:	3710      	adds	r7, #16
 8013b56:	46bd      	mov	sp, r7
 8013b58:	bd80      	pop	{r7, pc}
 8013b5a:	bf00      	nop
 8013b5c:	1fff7590 	.word	0x1fff7590
 8013b60:	1fff7594 	.word	0x1fff7594
 8013b64:	1fff7598 	.word	0x1fff7598
 8013b68:	200003e2 	.word	0x200003e2
 8013b6c:	200003f2 	.word	0x200003f2

08013b70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013b70:	b480      	push	{r7}
 8013b72:	b087      	sub	sp, #28
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	60f8      	str	r0, [r7, #12]
 8013b78:	60b9      	str	r1, [r7, #8]
 8013b7a:	4613      	mov	r3, r2
 8013b7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013b7e:	2300      	movs	r3, #0
 8013b80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013b82:	2300      	movs	r3, #0
 8013b84:	75fb      	strb	r3, [r7, #23]
 8013b86:	e027      	b.n	8013bd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	0f1b      	lsrs	r3, r3, #28
 8013b8c:	2b09      	cmp	r3, #9
 8013b8e:	d80b      	bhi.n	8013ba8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	0f1b      	lsrs	r3, r3, #28
 8013b94:	b2da      	uxtb	r2, r3
 8013b96:	7dfb      	ldrb	r3, [r7, #23]
 8013b98:	005b      	lsls	r3, r3, #1
 8013b9a:	4619      	mov	r1, r3
 8013b9c:	68bb      	ldr	r3, [r7, #8]
 8013b9e:	440b      	add	r3, r1
 8013ba0:	3230      	adds	r2, #48	@ 0x30
 8013ba2:	b2d2      	uxtb	r2, r2
 8013ba4:	701a      	strb	r2, [r3, #0]
 8013ba6:	e00a      	b.n	8013bbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	0f1b      	lsrs	r3, r3, #28
 8013bac:	b2da      	uxtb	r2, r3
 8013bae:	7dfb      	ldrb	r3, [r7, #23]
 8013bb0:	005b      	lsls	r3, r3, #1
 8013bb2:	4619      	mov	r1, r3
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	440b      	add	r3, r1
 8013bb8:	3237      	adds	r2, #55	@ 0x37
 8013bba:	b2d2      	uxtb	r2, r2
 8013bbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	011b      	lsls	r3, r3, #4
 8013bc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013bc4:	7dfb      	ldrb	r3, [r7, #23]
 8013bc6:	005b      	lsls	r3, r3, #1
 8013bc8:	3301      	adds	r3, #1
 8013bca:	68ba      	ldr	r2, [r7, #8]
 8013bcc:	4413      	add	r3, r2
 8013bce:	2200      	movs	r2, #0
 8013bd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013bd2:	7dfb      	ldrb	r3, [r7, #23]
 8013bd4:	3301      	adds	r3, #1
 8013bd6:	75fb      	strb	r3, [r7, #23]
 8013bd8:	7dfa      	ldrb	r2, [r7, #23]
 8013bda:	79fb      	ldrb	r3, [r7, #7]
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	d3d3      	bcc.n	8013b88 <IntToUnicode+0x18>
  }
}
 8013be0:	bf00      	nop
 8013be2:	bf00      	nop
 8013be4:	371c      	adds	r7, #28
 8013be6:	46bd      	mov	sp, r7
 8013be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bec:	4770      	bx	lr
	...

08013bf0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b098      	sub	sp, #96	@ 0x60
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8013bf8:	f107 030c 	add.w	r3, r7, #12
 8013bfc:	2254      	movs	r2, #84	@ 0x54
 8013bfe:	2100      	movs	r1, #0
 8013c00:	4618      	mov	r0, r3
 8013c02:	f001 fb8f 	bl	8015324 <memset>
  if(pcdHandle->Instance==USB)
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	4a15      	ldr	r2, [pc, #84]	@ (8013c60 <HAL_PCD_MspInit+0x70>)
 8013c0c:	4293      	cmp	r3, r2
 8013c0e:	d122      	bne.n	8013c56 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8013c10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8013c14:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8013c16:	2300      	movs	r3, #0
 8013c18:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8013c1a:	f107 030c 	add.w	r3, r7, #12
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f7f8 fe28 	bl	800c874 <HAL_RCCEx_PeriphCLKConfig>
 8013c24:	4603      	mov	r3, r0
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d001      	beq.n	8013c2e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8013c2a:	f7ef fb27 	bl	800327c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8013c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8013c64 <HAL_PCD_MspInit+0x74>)
 8013c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013c32:	4a0c      	ldr	r2, [pc, #48]	@ (8013c64 <HAL_PCD_MspInit+0x74>)
 8013c34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8013c38:	6593      	str	r3, [r2, #88]	@ 0x58
 8013c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8013c64 <HAL_PCD_MspInit+0x74>)
 8013c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013c3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013c42:	60bb      	str	r3, [r7, #8]
 8013c44:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8013c46:	2200      	movs	r2, #0
 8013c48:	2100      	movs	r1, #0
 8013c4a:	2014      	movs	r0, #20
 8013c4c:	f7f3 fd25 	bl	800769a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8013c50:	2014      	movs	r0, #20
 8013c52:	f7f3 fd3c 	bl	80076ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8013c56:	bf00      	nop
 8013c58:	3760      	adds	r7, #96	@ 0x60
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bd80      	pop	{r7, pc}
 8013c5e:	bf00      	nop
 8013c60:	40005c00 	.word	0x40005c00
 8013c64:	40021000 	.word	0x40021000

08013c68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b082      	sub	sp, #8
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8013c7c:	4619      	mov	r1, r3
 8013c7e:	4610      	mov	r0, r2
 8013c80:	f7fe fd32 	bl	80126e8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8013c84:	bf00      	nop
 8013c86:	3708      	adds	r7, #8
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd80      	pop	{r7, pc}

08013c8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b082      	sub	sp, #8
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
 8013c94:	460b      	mov	r3, r1
 8013c96:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8013c9e:	78fa      	ldrb	r2, [r7, #3]
 8013ca0:	6879      	ldr	r1, [r7, #4]
 8013ca2:	4613      	mov	r3, r2
 8013ca4:	009b      	lsls	r3, r3, #2
 8013ca6:	4413      	add	r3, r2
 8013ca8:	00db      	lsls	r3, r3, #3
 8013caa:	440b      	add	r3, r1
 8013cac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013cb0:	681a      	ldr	r2, [r3, #0]
 8013cb2:	78fb      	ldrb	r3, [r7, #3]
 8013cb4:	4619      	mov	r1, r3
 8013cb6:	f7fe fd6c 	bl	8012792 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8013cba:	bf00      	nop
 8013cbc:	3708      	adds	r7, #8
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	bd80      	pop	{r7, pc}

08013cc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013cc2:	b580      	push	{r7, lr}
 8013cc4:	b082      	sub	sp, #8
 8013cc6:	af00      	add	r7, sp, #0
 8013cc8:	6078      	str	r0, [r7, #4]
 8013cca:	460b      	mov	r3, r1
 8013ccc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8013cd4:	78fa      	ldrb	r2, [r7, #3]
 8013cd6:	6879      	ldr	r1, [r7, #4]
 8013cd8:	4613      	mov	r3, r2
 8013cda:	009b      	lsls	r3, r3, #2
 8013cdc:	4413      	add	r3, r2
 8013cde:	00db      	lsls	r3, r3, #3
 8013ce0:	440b      	add	r3, r1
 8013ce2:	3324      	adds	r3, #36	@ 0x24
 8013ce4:	681a      	ldr	r2, [r3, #0]
 8013ce6:	78fb      	ldrb	r3, [r7, #3]
 8013ce8:	4619      	mov	r1, r3
 8013cea:	f7fe fdb5 	bl	8012858 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8013cee:	bf00      	nop
 8013cf0:	3708      	adds	r7, #8
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bd80      	pop	{r7, pc}

08013cf6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013cf6:	b580      	push	{r7, lr}
 8013cf8:	b082      	sub	sp, #8
 8013cfa:	af00      	add	r7, sp, #0
 8013cfc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013d04:	4618      	mov	r0, r3
 8013d06:	f7fe fec9 	bl	8012a9c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8013d0a:	bf00      	nop
 8013d0c:	3708      	adds	r7, #8
 8013d0e:	46bd      	mov	sp, r7
 8013d10:	bd80      	pop	{r7, pc}

08013d12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013d12:	b580      	push	{r7, lr}
 8013d14:	b084      	sub	sp, #16
 8013d16:	af00      	add	r7, sp, #0
 8013d18:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013d1a:	2301      	movs	r3, #1
 8013d1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	795b      	ldrb	r3, [r3, #5]
 8013d22:	2b02      	cmp	r3, #2
 8013d24:	d001      	beq.n	8013d2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013d26:	f7ef faa9 	bl	800327c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013d30:	7bfa      	ldrb	r2, [r7, #15]
 8013d32:	4611      	mov	r1, r2
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7fe fe73 	bl	8012a20 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013d40:	4618      	mov	r0, r3
 8013d42:	f7fe fe1f 	bl	8012984 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8013d46:	bf00      	nop
 8013d48:	3710      	adds	r7, #16
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd80      	pop	{r7, pc}
	...

08013d50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b082      	sub	sp, #8
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f7fe fe6e 	bl	8012a40 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	7a5b      	ldrb	r3, [r3, #9]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d005      	beq.n	8013d78 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013d6c:	4b04      	ldr	r3, [pc, #16]	@ (8013d80 <HAL_PCD_SuspendCallback+0x30>)
 8013d6e:	691b      	ldr	r3, [r3, #16]
 8013d70:	4a03      	ldr	r2, [pc, #12]	@ (8013d80 <HAL_PCD_SuspendCallback+0x30>)
 8013d72:	f043 0306 	orr.w	r3, r3, #6
 8013d76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8013d78:	bf00      	nop
 8013d7a:	3708      	adds	r7, #8
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd80      	pop	{r7, pc}
 8013d80:	e000ed00 	.word	0xe000ed00

08013d84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b082      	sub	sp, #8
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	7a5b      	ldrb	r3, [r3, #9]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d007      	beq.n	8013da4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013d94:	4b08      	ldr	r3, [pc, #32]	@ (8013db8 <HAL_PCD_ResumeCallback+0x34>)
 8013d96:	691b      	ldr	r3, [r3, #16]
 8013d98:	4a07      	ldr	r2, [pc, #28]	@ (8013db8 <HAL_PCD_ResumeCallback+0x34>)
 8013d9a:	f023 0306 	bic.w	r3, r3, #6
 8013d9e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013da0:	f000 f9f8 	bl	8014194 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7fe fe5e 	bl	8012a6c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8013db0:	bf00      	nop
 8013db2:	3708      	adds	r7, #8
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bd80      	pop	{r7, pc}
 8013db8:	e000ed00 	.word	0xe000ed00

08013dbc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b082      	sub	sp, #8
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8013dc4:	4a2b      	ldr	r2, [pc, #172]	@ (8013e74 <USBD_LL_Init+0xb8>)
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	4a29      	ldr	r2, [pc, #164]	@ (8013e74 <USBD_LL_Init+0xb8>)
 8013dd0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8013dd4:	4b27      	ldr	r3, [pc, #156]	@ (8013e74 <USBD_LL_Init+0xb8>)
 8013dd6:	4a28      	ldr	r2, [pc, #160]	@ (8013e78 <USBD_LL_Init+0xbc>)
 8013dd8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8013dda:	4b26      	ldr	r3, [pc, #152]	@ (8013e74 <USBD_LL_Init+0xb8>)
 8013ddc:	2208      	movs	r2, #8
 8013dde:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8013de0:	4b24      	ldr	r3, [pc, #144]	@ (8013e74 <USBD_LL_Init+0xb8>)
 8013de2:	2202      	movs	r2, #2
 8013de4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013de6:	4b23      	ldr	r3, [pc, #140]	@ (8013e74 <USBD_LL_Init+0xb8>)
 8013de8:	2202      	movs	r2, #2
 8013dea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8013dec:	4b21      	ldr	r3, [pc, #132]	@ (8013e74 <USBD_LL_Init+0xb8>)
 8013dee:	2200      	movs	r2, #0
 8013df0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8013df2:	4b20      	ldr	r3, [pc, #128]	@ (8013e74 <USBD_LL_Init+0xb8>)
 8013df4:	2200      	movs	r2, #0
 8013df6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8013df8:	4b1e      	ldr	r3, [pc, #120]	@ (8013e74 <USBD_LL_Init+0xb8>)
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8013dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8013e74 <USBD_LL_Init+0xb8>)
 8013e00:	2200      	movs	r2, #0
 8013e02:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8013e04:	481b      	ldr	r0, [pc, #108]	@ (8013e74 <USBD_LL_Init+0xb8>)
 8013e06:	f7f6 fa25 	bl	800a254 <HAL_PCD_Init>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d001      	beq.n	8013e14 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8013e10:	f7ef fa34 	bl	800327c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8013e1a:	2318      	movs	r3, #24
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	2100      	movs	r1, #0
 8013e20:	f7f7 feac 	bl	800bb7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8013e2a:	2358      	movs	r3, #88	@ 0x58
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	2180      	movs	r1, #128	@ 0x80
 8013e30:	f7f7 fea4 	bl	800bb7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8013e3a:	23c0      	movs	r3, #192	@ 0xc0
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	2181      	movs	r1, #129	@ 0x81
 8013e40:	f7f7 fe9c 	bl	800bb7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8013e4a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8013e4e:	2200      	movs	r2, #0
 8013e50:	2101      	movs	r1, #1
 8013e52:	f7f7 fe93 	bl	800bb7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8013e5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013e60:	2200      	movs	r2, #0
 8013e62:	2182      	movs	r1, #130	@ 0x82
 8013e64:	f7f7 fe8a 	bl	800bb7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8013e68:	2300      	movs	r3, #0
}
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	3708      	adds	r7, #8
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	bd80      	pop	{r7, pc}
 8013e72:	bf00      	nop
 8013e74:	20012c00 	.word	0x20012c00
 8013e78:	40005c00 	.word	0x40005c00

08013e7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b084      	sub	sp, #16
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e84:	2300      	movs	r3, #0
 8013e86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013e88:	2300      	movs	r3, #0
 8013e8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7f6 faac 	bl	800a3f0 <HAL_PCD_Start>
 8013e98:	4603      	mov	r3, r0
 8013e9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013e9c:	7bfb      	ldrb	r3, [r7, #15]
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f000 f97e 	bl	80141a0 <USBD_Get_USB_Status>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013ea8:	7bbb      	ldrb	r3, [r7, #14]
}
 8013eaa:	4618      	mov	r0, r3
 8013eac:	3710      	adds	r7, #16
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd80      	pop	{r7, pc}

08013eb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013eb2:	b580      	push	{r7, lr}
 8013eb4:	b084      	sub	sp, #16
 8013eb6:	af00      	add	r7, sp, #0
 8013eb8:	6078      	str	r0, [r7, #4]
 8013eba:	4608      	mov	r0, r1
 8013ebc:	4611      	mov	r1, r2
 8013ebe:	461a      	mov	r2, r3
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	70fb      	strb	r3, [r7, #3]
 8013ec4:	460b      	mov	r3, r1
 8013ec6:	70bb      	strb	r3, [r7, #2]
 8013ec8:	4613      	mov	r3, r2
 8013eca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ecc:	2300      	movs	r3, #0
 8013ece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8013eda:	78bb      	ldrb	r3, [r7, #2]
 8013edc:	883a      	ldrh	r2, [r7, #0]
 8013ede:	78f9      	ldrb	r1, [r7, #3]
 8013ee0:	f7f6 fbf3 	bl	800a6ca <HAL_PCD_EP_Open>
 8013ee4:	4603      	mov	r3, r0
 8013ee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ee8:	7bfb      	ldrb	r3, [r7, #15]
 8013eea:	4618      	mov	r0, r3
 8013eec:	f000 f958 	bl	80141a0 <USBD_Get_USB_Status>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013ef4:	7bbb      	ldrb	r3, [r7, #14]
}
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	3710      	adds	r7, #16
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd80      	pop	{r7, pc}

08013efe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013efe:	b580      	push	{r7, lr}
 8013f00:	b084      	sub	sp, #16
 8013f02:	af00      	add	r7, sp, #0
 8013f04:	6078      	str	r0, [r7, #4]
 8013f06:	460b      	mov	r3, r1
 8013f08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013f0e:	2300      	movs	r3, #0
 8013f10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8013f18:	78fa      	ldrb	r2, [r7, #3]
 8013f1a:	4611      	mov	r1, r2
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	f7f6 fc33 	bl	800a788 <HAL_PCD_EP_Close>
 8013f22:	4603      	mov	r3, r0
 8013f24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013f26:	7bfb      	ldrb	r3, [r7, #15]
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f000 f939 	bl	80141a0 <USBD_Get_USB_Status>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013f32:	7bbb      	ldrb	r3, [r7, #14]
}
 8013f34:	4618      	mov	r0, r3
 8013f36:	3710      	adds	r7, #16
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}

08013f3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b084      	sub	sp, #16
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
 8013f44:	460b      	mov	r3, r1
 8013f46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f48:	2300      	movs	r3, #0
 8013f4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8013f56:	78fa      	ldrb	r2, [r7, #3]
 8013f58:	4611      	mov	r1, r2
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	f7f6 fcdc 	bl	800a918 <HAL_PCD_EP_SetStall>
 8013f60:	4603      	mov	r3, r0
 8013f62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013f64:	7bfb      	ldrb	r3, [r7, #15]
 8013f66:	4618      	mov	r0, r3
 8013f68:	f000 f91a 	bl	80141a0 <USBD_Get_USB_Status>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013f70:	7bbb      	ldrb	r3, [r7, #14]
}
 8013f72:	4618      	mov	r0, r3
 8013f74:	3710      	adds	r7, #16
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}

08013f7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013f7a:	b580      	push	{r7, lr}
 8013f7c:	b084      	sub	sp, #16
 8013f7e:	af00      	add	r7, sp, #0
 8013f80:	6078      	str	r0, [r7, #4]
 8013f82:	460b      	mov	r3, r1
 8013f84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f86:	2300      	movs	r3, #0
 8013f88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8013f94:	78fa      	ldrb	r2, [r7, #3]
 8013f96:	4611      	mov	r1, r2
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f7f6 fd0f 	bl	800a9bc <HAL_PCD_EP_ClrStall>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013fa2:	7bfb      	ldrb	r3, [r7, #15]
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f000 f8fb 	bl	80141a0 <USBD_Get_USB_Status>
 8013faa:	4603      	mov	r3, r0
 8013fac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013fae:	7bbb      	ldrb	r3, [r7, #14]
}
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	3710      	adds	r7, #16
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bd80      	pop	{r7, pc}

08013fb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013fb8:	b480      	push	{r7}
 8013fba:	b085      	sub	sp, #20
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
 8013fc0:	460b      	mov	r3, r1
 8013fc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8013fca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013fcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	da0b      	bge.n	8013fec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013fd4:	78fb      	ldrb	r3, [r7, #3]
 8013fd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013fda:	68f9      	ldr	r1, [r7, #12]
 8013fdc:	4613      	mov	r3, r2
 8013fde:	009b      	lsls	r3, r3, #2
 8013fe0:	4413      	add	r3, r2
 8013fe2:	00db      	lsls	r3, r3, #3
 8013fe4:	440b      	add	r3, r1
 8013fe6:	3312      	adds	r3, #18
 8013fe8:	781b      	ldrb	r3, [r3, #0]
 8013fea:	e00b      	b.n	8014004 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013fec:	78fb      	ldrb	r3, [r7, #3]
 8013fee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013ff2:	68f9      	ldr	r1, [r7, #12]
 8013ff4:	4613      	mov	r3, r2
 8013ff6:	009b      	lsls	r3, r3, #2
 8013ff8:	4413      	add	r3, r2
 8013ffa:	00db      	lsls	r3, r3, #3
 8013ffc:	440b      	add	r3, r1
 8013ffe:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8014002:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014004:	4618      	mov	r0, r3
 8014006:	3714      	adds	r7, #20
 8014008:	46bd      	mov	sp, r7
 801400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400e:	4770      	bx	lr

08014010 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b084      	sub	sp, #16
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
 8014018:	460b      	mov	r3, r1
 801401a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801401c:	2300      	movs	r3, #0
 801401e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014020:	2300      	movs	r3, #0
 8014022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801402a:	78fa      	ldrb	r2, [r7, #3]
 801402c:	4611      	mov	r1, r2
 801402e:	4618      	mov	r0, r3
 8014030:	f7f6 fb27 	bl	800a682 <HAL_PCD_SetAddress>
 8014034:	4603      	mov	r3, r0
 8014036:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014038:	7bfb      	ldrb	r3, [r7, #15]
 801403a:	4618      	mov	r0, r3
 801403c:	f000 f8b0 	bl	80141a0 <USBD_Get_USB_Status>
 8014040:	4603      	mov	r3, r0
 8014042:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014044:	7bbb      	ldrb	r3, [r7, #14]
}
 8014046:	4618      	mov	r0, r3
 8014048:	3710      	adds	r7, #16
 801404a:	46bd      	mov	sp, r7
 801404c:	bd80      	pop	{r7, pc}

0801404e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801404e:	b580      	push	{r7, lr}
 8014050:	b086      	sub	sp, #24
 8014052:	af00      	add	r7, sp, #0
 8014054:	60f8      	str	r0, [r7, #12]
 8014056:	607a      	str	r2, [r7, #4]
 8014058:	603b      	str	r3, [r7, #0]
 801405a:	460b      	mov	r3, r1
 801405c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801405e:	2300      	movs	r3, #0
 8014060:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014062:	2300      	movs	r3, #0
 8014064:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801406c:	7af9      	ldrb	r1, [r7, #11]
 801406e:	683b      	ldr	r3, [r7, #0]
 8014070:	687a      	ldr	r2, [r7, #4]
 8014072:	f7f6 fc1a 	bl	800a8aa <HAL_PCD_EP_Transmit>
 8014076:	4603      	mov	r3, r0
 8014078:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801407a:	7dfb      	ldrb	r3, [r7, #23]
 801407c:	4618      	mov	r0, r3
 801407e:	f000 f88f 	bl	80141a0 <USBD_Get_USB_Status>
 8014082:	4603      	mov	r3, r0
 8014084:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014086:	7dbb      	ldrb	r3, [r7, #22]
}
 8014088:	4618      	mov	r0, r3
 801408a:	3718      	adds	r7, #24
 801408c:	46bd      	mov	sp, r7
 801408e:	bd80      	pop	{r7, pc}

08014090 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b086      	sub	sp, #24
 8014094:	af00      	add	r7, sp, #0
 8014096:	60f8      	str	r0, [r7, #12]
 8014098:	607a      	str	r2, [r7, #4]
 801409a:	603b      	str	r3, [r7, #0]
 801409c:	460b      	mov	r3, r1
 801409e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80140a0:	2300      	movs	r3, #0
 80140a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80140a4:	2300      	movs	r3, #0
 80140a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80140ae:	7af9      	ldrb	r1, [r7, #11]
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	687a      	ldr	r2, [r7, #4]
 80140b4:	f7f6 fbb0 	bl	800a818 <HAL_PCD_EP_Receive>
 80140b8:	4603      	mov	r3, r0
 80140ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80140bc:	7dfb      	ldrb	r3, [r7, #23]
 80140be:	4618      	mov	r0, r3
 80140c0:	f000 f86e 	bl	80141a0 <USBD_Get_USB_Status>
 80140c4:	4603      	mov	r3, r0
 80140c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80140c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80140ca:	4618      	mov	r0, r3
 80140cc:	3718      	adds	r7, #24
 80140ce:	46bd      	mov	sp, r7
 80140d0:	bd80      	pop	{r7, pc}

080140d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80140d2:	b580      	push	{r7, lr}
 80140d4:	b082      	sub	sp, #8
 80140d6:	af00      	add	r7, sp, #0
 80140d8:	6078      	str	r0, [r7, #4]
 80140da:	460b      	mov	r3, r1
 80140dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80140e4:	78fa      	ldrb	r2, [r7, #3]
 80140e6:	4611      	mov	r1, r2
 80140e8:	4618      	mov	r0, r3
 80140ea:	f7f6 fbc6 	bl	800a87a <HAL_PCD_EP_GetRxCount>
 80140ee:	4603      	mov	r3, r0
}
 80140f0:	4618      	mov	r0, r3
 80140f2:	3708      	adds	r7, #8
 80140f4:	46bd      	mov	sp, r7
 80140f6:	bd80      	pop	{r7, pc}

080140f8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b082      	sub	sp, #8
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
 8014100:	460b      	mov	r3, r1
 8014102:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8014104:	78fb      	ldrb	r3, [r7, #3]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d002      	beq.n	8014110 <HAL_PCDEx_LPM_Callback+0x18>
 801410a:	2b01      	cmp	r3, #1
 801410c:	d013      	beq.n	8014136 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801410e:	e023      	b.n	8014158 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	7a5b      	ldrb	r3, [r3, #9]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d007      	beq.n	8014128 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8014118:	f000 f83c 	bl	8014194 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801411c:	4b10      	ldr	r3, [pc, #64]	@ (8014160 <HAL_PCDEx_LPM_Callback+0x68>)
 801411e:	691b      	ldr	r3, [r3, #16]
 8014120:	4a0f      	ldr	r2, [pc, #60]	@ (8014160 <HAL_PCDEx_LPM_Callback+0x68>)
 8014122:	f023 0306 	bic.w	r3, r3, #6
 8014126:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801412e:	4618      	mov	r0, r3
 8014130:	f7fe fc9c 	bl	8012a6c <USBD_LL_Resume>
    break;
 8014134:	e010      	b.n	8014158 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801413c:	4618      	mov	r0, r3
 801413e:	f7fe fc7f 	bl	8012a40 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	7a5b      	ldrb	r3, [r3, #9]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d005      	beq.n	8014156 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801414a:	4b05      	ldr	r3, [pc, #20]	@ (8014160 <HAL_PCDEx_LPM_Callback+0x68>)
 801414c:	691b      	ldr	r3, [r3, #16]
 801414e:	4a04      	ldr	r2, [pc, #16]	@ (8014160 <HAL_PCDEx_LPM_Callback+0x68>)
 8014150:	f043 0306 	orr.w	r3, r3, #6
 8014154:	6113      	str	r3, [r2, #16]
    break;
 8014156:	bf00      	nop
}
 8014158:	bf00      	nop
 801415a:	3708      	adds	r7, #8
 801415c:	46bd      	mov	sp, r7
 801415e:	bd80      	pop	{r7, pc}
 8014160:	e000ed00 	.word	0xe000ed00

08014164 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014164:	b480      	push	{r7}
 8014166:	b083      	sub	sp, #12
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801416c:	4b03      	ldr	r3, [pc, #12]	@ (801417c <USBD_static_malloc+0x18>)
}
 801416e:	4618      	mov	r0, r3
 8014170:	370c      	adds	r7, #12
 8014172:	46bd      	mov	sp, r7
 8014174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014178:	4770      	bx	lr
 801417a:	bf00      	nop
 801417c:	20012edc 	.word	0x20012edc

08014180 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014180:	b480      	push	{r7}
 8014182:	b083      	sub	sp, #12
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]

}
 8014188:	bf00      	nop
 801418a:	370c      	adds	r7, #12
 801418c:	46bd      	mov	sp, r7
 801418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014192:	4770      	bx	lr

08014194 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8014194:	b580      	push	{r7, lr}
 8014196:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8014198:	f7ed fdf4 	bl	8001d84 <SystemClock_Config>
}
 801419c:	bf00      	nop
 801419e:	bd80      	pop	{r7, pc}

080141a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80141a0:	b480      	push	{r7}
 80141a2:	b085      	sub	sp, #20
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	4603      	mov	r3, r0
 80141a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80141aa:	2300      	movs	r3, #0
 80141ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80141ae:	79fb      	ldrb	r3, [r7, #7]
 80141b0:	2b03      	cmp	r3, #3
 80141b2:	d817      	bhi.n	80141e4 <USBD_Get_USB_Status+0x44>
 80141b4:	a201      	add	r2, pc, #4	@ (adr r2, 80141bc <USBD_Get_USB_Status+0x1c>)
 80141b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141ba:	bf00      	nop
 80141bc:	080141cd 	.word	0x080141cd
 80141c0:	080141d3 	.word	0x080141d3
 80141c4:	080141d9 	.word	0x080141d9
 80141c8:	080141df 	.word	0x080141df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80141cc:	2300      	movs	r3, #0
 80141ce:	73fb      	strb	r3, [r7, #15]
    break;
 80141d0:	e00b      	b.n	80141ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80141d2:	2303      	movs	r3, #3
 80141d4:	73fb      	strb	r3, [r7, #15]
    break;
 80141d6:	e008      	b.n	80141ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80141d8:	2301      	movs	r3, #1
 80141da:	73fb      	strb	r3, [r7, #15]
    break;
 80141dc:	e005      	b.n	80141ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80141de:	2303      	movs	r3, #3
 80141e0:	73fb      	strb	r3, [r7, #15]
    break;
 80141e2:	e002      	b.n	80141ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80141e4:	2303      	movs	r3, #3
 80141e6:	73fb      	strb	r3, [r7, #15]
    break;
 80141e8:	bf00      	nop
  }
  return usb_status;
 80141ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80141ec:	4618      	mov	r0, r3
 80141ee:	3714      	adds	r7, #20
 80141f0:	46bd      	mov	sp, r7
 80141f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f6:	4770      	bx	lr

080141f8 <__cvt>:
 80141f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80141fc:	ec57 6b10 	vmov	r6, r7, d0
 8014200:	2f00      	cmp	r7, #0
 8014202:	460c      	mov	r4, r1
 8014204:	4619      	mov	r1, r3
 8014206:	463b      	mov	r3, r7
 8014208:	bfbb      	ittet	lt
 801420a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801420e:	461f      	movlt	r7, r3
 8014210:	2300      	movge	r3, #0
 8014212:	232d      	movlt	r3, #45	@ 0x2d
 8014214:	700b      	strb	r3, [r1, #0]
 8014216:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014218:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801421c:	4691      	mov	r9, r2
 801421e:	f023 0820 	bic.w	r8, r3, #32
 8014222:	bfbc      	itt	lt
 8014224:	4632      	movlt	r2, r6
 8014226:	4616      	movlt	r6, r2
 8014228:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801422c:	d005      	beq.n	801423a <__cvt+0x42>
 801422e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8014232:	d100      	bne.n	8014236 <__cvt+0x3e>
 8014234:	3401      	adds	r4, #1
 8014236:	2102      	movs	r1, #2
 8014238:	e000      	b.n	801423c <__cvt+0x44>
 801423a:	2103      	movs	r1, #3
 801423c:	ab03      	add	r3, sp, #12
 801423e:	9301      	str	r3, [sp, #4]
 8014240:	ab02      	add	r3, sp, #8
 8014242:	9300      	str	r3, [sp, #0]
 8014244:	ec47 6b10 	vmov	d0, r6, r7
 8014248:	4653      	mov	r3, sl
 801424a:	4622      	mov	r2, r4
 801424c:	f001 f978 	bl	8015540 <_dtoa_r>
 8014250:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8014254:	4605      	mov	r5, r0
 8014256:	d119      	bne.n	801428c <__cvt+0x94>
 8014258:	f019 0f01 	tst.w	r9, #1
 801425c:	d00e      	beq.n	801427c <__cvt+0x84>
 801425e:	eb00 0904 	add.w	r9, r0, r4
 8014262:	2200      	movs	r2, #0
 8014264:	2300      	movs	r3, #0
 8014266:	4630      	mov	r0, r6
 8014268:	4639      	mov	r1, r7
 801426a:	f7ec fc55 	bl	8000b18 <__aeabi_dcmpeq>
 801426e:	b108      	cbz	r0, 8014274 <__cvt+0x7c>
 8014270:	f8cd 900c 	str.w	r9, [sp, #12]
 8014274:	2230      	movs	r2, #48	@ 0x30
 8014276:	9b03      	ldr	r3, [sp, #12]
 8014278:	454b      	cmp	r3, r9
 801427a:	d31e      	bcc.n	80142ba <__cvt+0xc2>
 801427c:	9b03      	ldr	r3, [sp, #12]
 801427e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014280:	1b5b      	subs	r3, r3, r5
 8014282:	4628      	mov	r0, r5
 8014284:	6013      	str	r3, [r2, #0]
 8014286:	b004      	add	sp, #16
 8014288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801428c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014290:	eb00 0904 	add.w	r9, r0, r4
 8014294:	d1e5      	bne.n	8014262 <__cvt+0x6a>
 8014296:	7803      	ldrb	r3, [r0, #0]
 8014298:	2b30      	cmp	r3, #48	@ 0x30
 801429a:	d10a      	bne.n	80142b2 <__cvt+0xba>
 801429c:	2200      	movs	r2, #0
 801429e:	2300      	movs	r3, #0
 80142a0:	4630      	mov	r0, r6
 80142a2:	4639      	mov	r1, r7
 80142a4:	f7ec fc38 	bl	8000b18 <__aeabi_dcmpeq>
 80142a8:	b918      	cbnz	r0, 80142b2 <__cvt+0xba>
 80142aa:	f1c4 0401 	rsb	r4, r4, #1
 80142ae:	f8ca 4000 	str.w	r4, [sl]
 80142b2:	f8da 3000 	ldr.w	r3, [sl]
 80142b6:	4499      	add	r9, r3
 80142b8:	e7d3      	b.n	8014262 <__cvt+0x6a>
 80142ba:	1c59      	adds	r1, r3, #1
 80142bc:	9103      	str	r1, [sp, #12]
 80142be:	701a      	strb	r2, [r3, #0]
 80142c0:	e7d9      	b.n	8014276 <__cvt+0x7e>

080142c2 <__exponent>:
 80142c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80142c4:	2900      	cmp	r1, #0
 80142c6:	bfba      	itte	lt
 80142c8:	4249      	neglt	r1, r1
 80142ca:	232d      	movlt	r3, #45	@ 0x2d
 80142cc:	232b      	movge	r3, #43	@ 0x2b
 80142ce:	2909      	cmp	r1, #9
 80142d0:	7002      	strb	r2, [r0, #0]
 80142d2:	7043      	strb	r3, [r0, #1]
 80142d4:	dd29      	ble.n	801432a <__exponent+0x68>
 80142d6:	f10d 0307 	add.w	r3, sp, #7
 80142da:	461d      	mov	r5, r3
 80142dc:	270a      	movs	r7, #10
 80142de:	461a      	mov	r2, r3
 80142e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80142e4:	fb07 1416 	mls	r4, r7, r6, r1
 80142e8:	3430      	adds	r4, #48	@ 0x30
 80142ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80142ee:	460c      	mov	r4, r1
 80142f0:	2c63      	cmp	r4, #99	@ 0x63
 80142f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80142f6:	4631      	mov	r1, r6
 80142f8:	dcf1      	bgt.n	80142de <__exponent+0x1c>
 80142fa:	3130      	adds	r1, #48	@ 0x30
 80142fc:	1e94      	subs	r4, r2, #2
 80142fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014302:	1c41      	adds	r1, r0, #1
 8014304:	4623      	mov	r3, r4
 8014306:	42ab      	cmp	r3, r5
 8014308:	d30a      	bcc.n	8014320 <__exponent+0x5e>
 801430a:	f10d 0309 	add.w	r3, sp, #9
 801430e:	1a9b      	subs	r3, r3, r2
 8014310:	42ac      	cmp	r4, r5
 8014312:	bf88      	it	hi
 8014314:	2300      	movhi	r3, #0
 8014316:	3302      	adds	r3, #2
 8014318:	4403      	add	r3, r0
 801431a:	1a18      	subs	r0, r3, r0
 801431c:	b003      	add	sp, #12
 801431e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014320:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014324:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014328:	e7ed      	b.n	8014306 <__exponent+0x44>
 801432a:	2330      	movs	r3, #48	@ 0x30
 801432c:	3130      	adds	r1, #48	@ 0x30
 801432e:	7083      	strb	r3, [r0, #2]
 8014330:	70c1      	strb	r1, [r0, #3]
 8014332:	1d03      	adds	r3, r0, #4
 8014334:	e7f1      	b.n	801431a <__exponent+0x58>
	...

08014338 <_printf_float>:
 8014338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801433c:	b08d      	sub	sp, #52	@ 0x34
 801433e:	460c      	mov	r4, r1
 8014340:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014344:	4616      	mov	r6, r2
 8014346:	461f      	mov	r7, r3
 8014348:	4605      	mov	r5, r0
 801434a:	f000 fff3 	bl	8015334 <_localeconv_r>
 801434e:	6803      	ldr	r3, [r0, #0]
 8014350:	9304      	str	r3, [sp, #16]
 8014352:	4618      	mov	r0, r3
 8014354:	f7eb ffb4 	bl	80002c0 <strlen>
 8014358:	2300      	movs	r3, #0
 801435a:	930a      	str	r3, [sp, #40]	@ 0x28
 801435c:	f8d8 3000 	ldr.w	r3, [r8]
 8014360:	9005      	str	r0, [sp, #20]
 8014362:	3307      	adds	r3, #7
 8014364:	f023 0307 	bic.w	r3, r3, #7
 8014368:	f103 0208 	add.w	r2, r3, #8
 801436c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014370:	f8d4 b000 	ldr.w	fp, [r4]
 8014374:	f8c8 2000 	str.w	r2, [r8]
 8014378:	e9d3 8900 	ldrd	r8, r9, [r3]
 801437c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8014380:	9307      	str	r3, [sp, #28]
 8014382:	f8cd 8018 	str.w	r8, [sp, #24]
 8014386:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801438a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801438e:	4b9c      	ldr	r3, [pc, #624]	@ (8014600 <_printf_float+0x2c8>)
 8014390:	f04f 32ff 	mov.w	r2, #4294967295
 8014394:	f7ec fbf2 	bl	8000b7c <__aeabi_dcmpun>
 8014398:	bb70      	cbnz	r0, 80143f8 <_printf_float+0xc0>
 801439a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801439e:	4b98      	ldr	r3, [pc, #608]	@ (8014600 <_printf_float+0x2c8>)
 80143a0:	f04f 32ff 	mov.w	r2, #4294967295
 80143a4:	f7ec fbcc 	bl	8000b40 <__aeabi_dcmple>
 80143a8:	bb30      	cbnz	r0, 80143f8 <_printf_float+0xc0>
 80143aa:	2200      	movs	r2, #0
 80143ac:	2300      	movs	r3, #0
 80143ae:	4640      	mov	r0, r8
 80143b0:	4649      	mov	r1, r9
 80143b2:	f7ec fbbb 	bl	8000b2c <__aeabi_dcmplt>
 80143b6:	b110      	cbz	r0, 80143be <_printf_float+0x86>
 80143b8:	232d      	movs	r3, #45	@ 0x2d
 80143ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80143be:	4a91      	ldr	r2, [pc, #580]	@ (8014604 <_printf_float+0x2cc>)
 80143c0:	4b91      	ldr	r3, [pc, #580]	@ (8014608 <_printf_float+0x2d0>)
 80143c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80143c6:	bf94      	ite	ls
 80143c8:	4690      	movls	r8, r2
 80143ca:	4698      	movhi	r8, r3
 80143cc:	2303      	movs	r3, #3
 80143ce:	6123      	str	r3, [r4, #16]
 80143d0:	f02b 0304 	bic.w	r3, fp, #4
 80143d4:	6023      	str	r3, [r4, #0]
 80143d6:	f04f 0900 	mov.w	r9, #0
 80143da:	9700      	str	r7, [sp, #0]
 80143dc:	4633      	mov	r3, r6
 80143de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80143e0:	4621      	mov	r1, r4
 80143e2:	4628      	mov	r0, r5
 80143e4:	f000 f9d2 	bl	801478c <_printf_common>
 80143e8:	3001      	adds	r0, #1
 80143ea:	f040 808d 	bne.w	8014508 <_printf_float+0x1d0>
 80143ee:	f04f 30ff 	mov.w	r0, #4294967295
 80143f2:	b00d      	add	sp, #52	@ 0x34
 80143f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143f8:	4642      	mov	r2, r8
 80143fa:	464b      	mov	r3, r9
 80143fc:	4640      	mov	r0, r8
 80143fe:	4649      	mov	r1, r9
 8014400:	f7ec fbbc 	bl	8000b7c <__aeabi_dcmpun>
 8014404:	b140      	cbz	r0, 8014418 <_printf_float+0xe0>
 8014406:	464b      	mov	r3, r9
 8014408:	2b00      	cmp	r3, #0
 801440a:	bfbc      	itt	lt
 801440c:	232d      	movlt	r3, #45	@ 0x2d
 801440e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014412:	4a7e      	ldr	r2, [pc, #504]	@ (801460c <_printf_float+0x2d4>)
 8014414:	4b7e      	ldr	r3, [pc, #504]	@ (8014610 <_printf_float+0x2d8>)
 8014416:	e7d4      	b.n	80143c2 <_printf_float+0x8a>
 8014418:	6863      	ldr	r3, [r4, #4]
 801441a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801441e:	9206      	str	r2, [sp, #24]
 8014420:	1c5a      	adds	r2, r3, #1
 8014422:	d13b      	bne.n	801449c <_printf_float+0x164>
 8014424:	2306      	movs	r3, #6
 8014426:	6063      	str	r3, [r4, #4]
 8014428:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801442c:	2300      	movs	r3, #0
 801442e:	6022      	str	r2, [r4, #0]
 8014430:	9303      	str	r3, [sp, #12]
 8014432:	ab0a      	add	r3, sp, #40	@ 0x28
 8014434:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014438:	ab09      	add	r3, sp, #36	@ 0x24
 801443a:	9300      	str	r3, [sp, #0]
 801443c:	6861      	ldr	r1, [r4, #4]
 801443e:	ec49 8b10 	vmov	d0, r8, r9
 8014442:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014446:	4628      	mov	r0, r5
 8014448:	f7ff fed6 	bl	80141f8 <__cvt>
 801444c:	9b06      	ldr	r3, [sp, #24]
 801444e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014450:	2b47      	cmp	r3, #71	@ 0x47
 8014452:	4680      	mov	r8, r0
 8014454:	d129      	bne.n	80144aa <_printf_float+0x172>
 8014456:	1cc8      	adds	r0, r1, #3
 8014458:	db02      	blt.n	8014460 <_printf_float+0x128>
 801445a:	6863      	ldr	r3, [r4, #4]
 801445c:	4299      	cmp	r1, r3
 801445e:	dd41      	ble.n	80144e4 <_printf_float+0x1ac>
 8014460:	f1aa 0a02 	sub.w	sl, sl, #2
 8014464:	fa5f fa8a 	uxtb.w	sl, sl
 8014468:	3901      	subs	r1, #1
 801446a:	4652      	mov	r2, sl
 801446c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014470:	9109      	str	r1, [sp, #36]	@ 0x24
 8014472:	f7ff ff26 	bl	80142c2 <__exponent>
 8014476:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014478:	1813      	adds	r3, r2, r0
 801447a:	2a01      	cmp	r2, #1
 801447c:	4681      	mov	r9, r0
 801447e:	6123      	str	r3, [r4, #16]
 8014480:	dc02      	bgt.n	8014488 <_printf_float+0x150>
 8014482:	6822      	ldr	r2, [r4, #0]
 8014484:	07d2      	lsls	r2, r2, #31
 8014486:	d501      	bpl.n	801448c <_printf_float+0x154>
 8014488:	3301      	adds	r3, #1
 801448a:	6123      	str	r3, [r4, #16]
 801448c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8014490:	2b00      	cmp	r3, #0
 8014492:	d0a2      	beq.n	80143da <_printf_float+0xa2>
 8014494:	232d      	movs	r3, #45	@ 0x2d
 8014496:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801449a:	e79e      	b.n	80143da <_printf_float+0xa2>
 801449c:	9a06      	ldr	r2, [sp, #24]
 801449e:	2a47      	cmp	r2, #71	@ 0x47
 80144a0:	d1c2      	bne.n	8014428 <_printf_float+0xf0>
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d1c0      	bne.n	8014428 <_printf_float+0xf0>
 80144a6:	2301      	movs	r3, #1
 80144a8:	e7bd      	b.n	8014426 <_printf_float+0xee>
 80144aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80144ae:	d9db      	bls.n	8014468 <_printf_float+0x130>
 80144b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80144b4:	d118      	bne.n	80144e8 <_printf_float+0x1b0>
 80144b6:	2900      	cmp	r1, #0
 80144b8:	6863      	ldr	r3, [r4, #4]
 80144ba:	dd0b      	ble.n	80144d4 <_printf_float+0x19c>
 80144bc:	6121      	str	r1, [r4, #16]
 80144be:	b913      	cbnz	r3, 80144c6 <_printf_float+0x18e>
 80144c0:	6822      	ldr	r2, [r4, #0]
 80144c2:	07d0      	lsls	r0, r2, #31
 80144c4:	d502      	bpl.n	80144cc <_printf_float+0x194>
 80144c6:	3301      	adds	r3, #1
 80144c8:	440b      	add	r3, r1
 80144ca:	6123      	str	r3, [r4, #16]
 80144cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80144ce:	f04f 0900 	mov.w	r9, #0
 80144d2:	e7db      	b.n	801448c <_printf_float+0x154>
 80144d4:	b913      	cbnz	r3, 80144dc <_printf_float+0x1a4>
 80144d6:	6822      	ldr	r2, [r4, #0]
 80144d8:	07d2      	lsls	r2, r2, #31
 80144da:	d501      	bpl.n	80144e0 <_printf_float+0x1a8>
 80144dc:	3302      	adds	r3, #2
 80144de:	e7f4      	b.n	80144ca <_printf_float+0x192>
 80144e0:	2301      	movs	r3, #1
 80144e2:	e7f2      	b.n	80144ca <_printf_float+0x192>
 80144e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80144e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80144ea:	4299      	cmp	r1, r3
 80144ec:	db05      	blt.n	80144fa <_printf_float+0x1c2>
 80144ee:	6823      	ldr	r3, [r4, #0]
 80144f0:	6121      	str	r1, [r4, #16]
 80144f2:	07d8      	lsls	r0, r3, #31
 80144f4:	d5ea      	bpl.n	80144cc <_printf_float+0x194>
 80144f6:	1c4b      	adds	r3, r1, #1
 80144f8:	e7e7      	b.n	80144ca <_printf_float+0x192>
 80144fa:	2900      	cmp	r1, #0
 80144fc:	bfd4      	ite	le
 80144fe:	f1c1 0202 	rsble	r2, r1, #2
 8014502:	2201      	movgt	r2, #1
 8014504:	4413      	add	r3, r2
 8014506:	e7e0      	b.n	80144ca <_printf_float+0x192>
 8014508:	6823      	ldr	r3, [r4, #0]
 801450a:	055a      	lsls	r2, r3, #21
 801450c:	d407      	bmi.n	801451e <_printf_float+0x1e6>
 801450e:	6923      	ldr	r3, [r4, #16]
 8014510:	4642      	mov	r2, r8
 8014512:	4631      	mov	r1, r6
 8014514:	4628      	mov	r0, r5
 8014516:	47b8      	blx	r7
 8014518:	3001      	adds	r0, #1
 801451a:	d12b      	bne.n	8014574 <_printf_float+0x23c>
 801451c:	e767      	b.n	80143ee <_printf_float+0xb6>
 801451e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014522:	f240 80dd 	bls.w	80146e0 <_printf_float+0x3a8>
 8014526:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801452a:	2200      	movs	r2, #0
 801452c:	2300      	movs	r3, #0
 801452e:	f7ec faf3 	bl	8000b18 <__aeabi_dcmpeq>
 8014532:	2800      	cmp	r0, #0
 8014534:	d033      	beq.n	801459e <_printf_float+0x266>
 8014536:	4a37      	ldr	r2, [pc, #220]	@ (8014614 <_printf_float+0x2dc>)
 8014538:	2301      	movs	r3, #1
 801453a:	4631      	mov	r1, r6
 801453c:	4628      	mov	r0, r5
 801453e:	47b8      	blx	r7
 8014540:	3001      	adds	r0, #1
 8014542:	f43f af54 	beq.w	80143ee <_printf_float+0xb6>
 8014546:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801454a:	4543      	cmp	r3, r8
 801454c:	db02      	blt.n	8014554 <_printf_float+0x21c>
 801454e:	6823      	ldr	r3, [r4, #0]
 8014550:	07d8      	lsls	r0, r3, #31
 8014552:	d50f      	bpl.n	8014574 <_printf_float+0x23c>
 8014554:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014558:	4631      	mov	r1, r6
 801455a:	4628      	mov	r0, r5
 801455c:	47b8      	blx	r7
 801455e:	3001      	adds	r0, #1
 8014560:	f43f af45 	beq.w	80143ee <_printf_float+0xb6>
 8014564:	f04f 0900 	mov.w	r9, #0
 8014568:	f108 38ff 	add.w	r8, r8, #4294967295
 801456c:	f104 0a1a 	add.w	sl, r4, #26
 8014570:	45c8      	cmp	r8, r9
 8014572:	dc09      	bgt.n	8014588 <_printf_float+0x250>
 8014574:	6823      	ldr	r3, [r4, #0]
 8014576:	079b      	lsls	r3, r3, #30
 8014578:	f100 8103 	bmi.w	8014782 <_printf_float+0x44a>
 801457c:	68e0      	ldr	r0, [r4, #12]
 801457e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014580:	4298      	cmp	r0, r3
 8014582:	bfb8      	it	lt
 8014584:	4618      	movlt	r0, r3
 8014586:	e734      	b.n	80143f2 <_printf_float+0xba>
 8014588:	2301      	movs	r3, #1
 801458a:	4652      	mov	r2, sl
 801458c:	4631      	mov	r1, r6
 801458e:	4628      	mov	r0, r5
 8014590:	47b8      	blx	r7
 8014592:	3001      	adds	r0, #1
 8014594:	f43f af2b 	beq.w	80143ee <_printf_float+0xb6>
 8014598:	f109 0901 	add.w	r9, r9, #1
 801459c:	e7e8      	b.n	8014570 <_printf_float+0x238>
 801459e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	dc39      	bgt.n	8014618 <_printf_float+0x2e0>
 80145a4:	4a1b      	ldr	r2, [pc, #108]	@ (8014614 <_printf_float+0x2dc>)
 80145a6:	2301      	movs	r3, #1
 80145a8:	4631      	mov	r1, r6
 80145aa:	4628      	mov	r0, r5
 80145ac:	47b8      	blx	r7
 80145ae:	3001      	adds	r0, #1
 80145b0:	f43f af1d 	beq.w	80143ee <_printf_float+0xb6>
 80145b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80145b8:	ea59 0303 	orrs.w	r3, r9, r3
 80145bc:	d102      	bne.n	80145c4 <_printf_float+0x28c>
 80145be:	6823      	ldr	r3, [r4, #0]
 80145c0:	07d9      	lsls	r1, r3, #31
 80145c2:	d5d7      	bpl.n	8014574 <_printf_float+0x23c>
 80145c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80145c8:	4631      	mov	r1, r6
 80145ca:	4628      	mov	r0, r5
 80145cc:	47b8      	blx	r7
 80145ce:	3001      	adds	r0, #1
 80145d0:	f43f af0d 	beq.w	80143ee <_printf_float+0xb6>
 80145d4:	f04f 0a00 	mov.w	sl, #0
 80145d8:	f104 0b1a 	add.w	fp, r4, #26
 80145dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145de:	425b      	negs	r3, r3
 80145e0:	4553      	cmp	r3, sl
 80145e2:	dc01      	bgt.n	80145e8 <_printf_float+0x2b0>
 80145e4:	464b      	mov	r3, r9
 80145e6:	e793      	b.n	8014510 <_printf_float+0x1d8>
 80145e8:	2301      	movs	r3, #1
 80145ea:	465a      	mov	r2, fp
 80145ec:	4631      	mov	r1, r6
 80145ee:	4628      	mov	r0, r5
 80145f0:	47b8      	blx	r7
 80145f2:	3001      	adds	r0, #1
 80145f4:	f43f aefb 	beq.w	80143ee <_printf_float+0xb6>
 80145f8:	f10a 0a01 	add.w	sl, sl, #1
 80145fc:	e7ee      	b.n	80145dc <_printf_float+0x2a4>
 80145fe:	bf00      	nop
 8014600:	7fefffff 	.word	0x7fefffff
 8014604:	080277f8 	.word	0x080277f8
 8014608:	080277fc 	.word	0x080277fc
 801460c:	08027800 	.word	0x08027800
 8014610:	08027804 	.word	0x08027804
 8014614:	08027808 	.word	0x08027808
 8014618:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801461a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801461e:	4553      	cmp	r3, sl
 8014620:	bfa8      	it	ge
 8014622:	4653      	movge	r3, sl
 8014624:	2b00      	cmp	r3, #0
 8014626:	4699      	mov	r9, r3
 8014628:	dc36      	bgt.n	8014698 <_printf_float+0x360>
 801462a:	f04f 0b00 	mov.w	fp, #0
 801462e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014632:	f104 021a 	add.w	r2, r4, #26
 8014636:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014638:	9306      	str	r3, [sp, #24]
 801463a:	eba3 0309 	sub.w	r3, r3, r9
 801463e:	455b      	cmp	r3, fp
 8014640:	dc31      	bgt.n	80146a6 <_printf_float+0x36e>
 8014642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014644:	459a      	cmp	sl, r3
 8014646:	dc3a      	bgt.n	80146be <_printf_float+0x386>
 8014648:	6823      	ldr	r3, [r4, #0]
 801464a:	07da      	lsls	r2, r3, #31
 801464c:	d437      	bmi.n	80146be <_printf_float+0x386>
 801464e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014650:	ebaa 0903 	sub.w	r9, sl, r3
 8014654:	9b06      	ldr	r3, [sp, #24]
 8014656:	ebaa 0303 	sub.w	r3, sl, r3
 801465a:	4599      	cmp	r9, r3
 801465c:	bfa8      	it	ge
 801465e:	4699      	movge	r9, r3
 8014660:	f1b9 0f00 	cmp.w	r9, #0
 8014664:	dc33      	bgt.n	80146ce <_printf_float+0x396>
 8014666:	f04f 0800 	mov.w	r8, #0
 801466a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801466e:	f104 0b1a 	add.w	fp, r4, #26
 8014672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014674:	ebaa 0303 	sub.w	r3, sl, r3
 8014678:	eba3 0309 	sub.w	r3, r3, r9
 801467c:	4543      	cmp	r3, r8
 801467e:	f77f af79 	ble.w	8014574 <_printf_float+0x23c>
 8014682:	2301      	movs	r3, #1
 8014684:	465a      	mov	r2, fp
 8014686:	4631      	mov	r1, r6
 8014688:	4628      	mov	r0, r5
 801468a:	47b8      	blx	r7
 801468c:	3001      	adds	r0, #1
 801468e:	f43f aeae 	beq.w	80143ee <_printf_float+0xb6>
 8014692:	f108 0801 	add.w	r8, r8, #1
 8014696:	e7ec      	b.n	8014672 <_printf_float+0x33a>
 8014698:	4642      	mov	r2, r8
 801469a:	4631      	mov	r1, r6
 801469c:	4628      	mov	r0, r5
 801469e:	47b8      	blx	r7
 80146a0:	3001      	adds	r0, #1
 80146a2:	d1c2      	bne.n	801462a <_printf_float+0x2f2>
 80146a4:	e6a3      	b.n	80143ee <_printf_float+0xb6>
 80146a6:	2301      	movs	r3, #1
 80146a8:	4631      	mov	r1, r6
 80146aa:	4628      	mov	r0, r5
 80146ac:	9206      	str	r2, [sp, #24]
 80146ae:	47b8      	blx	r7
 80146b0:	3001      	adds	r0, #1
 80146b2:	f43f ae9c 	beq.w	80143ee <_printf_float+0xb6>
 80146b6:	9a06      	ldr	r2, [sp, #24]
 80146b8:	f10b 0b01 	add.w	fp, fp, #1
 80146bc:	e7bb      	b.n	8014636 <_printf_float+0x2fe>
 80146be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80146c2:	4631      	mov	r1, r6
 80146c4:	4628      	mov	r0, r5
 80146c6:	47b8      	blx	r7
 80146c8:	3001      	adds	r0, #1
 80146ca:	d1c0      	bne.n	801464e <_printf_float+0x316>
 80146cc:	e68f      	b.n	80143ee <_printf_float+0xb6>
 80146ce:	9a06      	ldr	r2, [sp, #24]
 80146d0:	464b      	mov	r3, r9
 80146d2:	4442      	add	r2, r8
 80146d4:	4631      	mov	r1, r6
 80146d6:	4628      	mov	r0, r5
 80146d8:	47b8      	blx	r7
 80146da:	3001      	adds	r0, #1
 80146dc:	d1c3      	bne.n	8014666 <_printf_float+0x32e>
 80146de:	e686      	b.n	80143ee <_printf_float+0xb6>
 80146e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80146e4:	f1ba 0f01 	cmp.w	sl, #1
 80146e8:	dc01      	bgt.n	80146ee <_printf_float+0x3b6>
 80146ea:	07db      	lsls	r3, r3, #31
 80146ec:	d536      	bpl.n	801475c <_printf_float+0x424>
 80146ee:	2301      	movs	r3, #1
 80146f0:	4642      	mov	r2, r8
 80146f2:	4631      	mov	r1, r6
 80146f4:	4628      	mov	r0, r5
 80146f6:	47b8      	blx	r7
 80146f8:	3001      	adds	r0, #1
 80146fa:	f43f ae78 	beq.w	80143ee <_printf_float+0xb6>
 80146fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014702:	4631      	mov	r1, r6
 8014704:	4628      	mov	r0, r5
 8014706:	47b8      	blx	r7
 8014708:	3001      	adds	r0, #1
 801470a:	f43f ae70 	beq.w	80143ee <_printf_float+0xb6>
 801470e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014712:	2200      	movs	r2, #0
 8014714:	2300      	movs	r3, #0
 8014716:	f10a 3aff 	add.w	sl, sl, #4294967295
 801471a:	f7ec f9fd 	bl	8000b18 <__aeabi_dcmpeq>
 801471e:	b9c0      	cbnz	r0, 8014752 <_printf_float+0x41a>
 8014720:	4653      	mov	r3, sl
 8014722:	f108 0201 	add.w	r2, r8, #1
 8014726:	4631      	mov	r1, r6
 8014728:	4628      	mov	r0, r5
 801472a:	47b8      	blx	r7
 801472c:	3001      	adds	r0, #1
 801472e:	d10c      	bne.n	801474a <_printf_float+0x412>
 8014730:	e65d      	b.n	80143ee <_printf_float+0xb6>
 8014732:	2301      	movs	r3, #1
 8014734:	465a      	mov	r2, fp
 8014736:	4631      	mov	r1, r6
 8014738:	4628      	mov	r0, r5
 801473a:	47b8      	blx	r7
 801473c:	3001      	adds	r0, #1
 801473e:	f43f ae56 	beq.w	80143ee <_printf_float+0xb6>
 8014742:	f108 0801 	add.w	r8, r8, #1
 8014746:	45d0      	cmp	r8, sl
 8014748:	dbf3      	blt.n	8014732 <_printf_float+0x3fa>
 801474a:	464b      	mov	r3, r9
 801474c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014750:	e6df      	b.n	8014512 <_printf_float+0x1da>
 8014752:	f04f 0800 	mov.w	r8, #0
 8014756:	f104 0b1a 	add.w	fp, r4, #26
 801475a:	e7f4      	b.n	8014746 <_printf_float+0x40e>
 801475c:	2301      	movs	r3, #1
 801475e:	4642      	mov	r2, r8
 8014760:	e7e1      	b.n	8014726 <_printf_float+0x3ee>
 8014762:	2301      	movs	r3, #1
 8014764:	464a      	mov	r2, r9
 8014766:	4631      	mov	r1, r6
 8014768:	4628      	mov	r0, r5
 801476a:	47b8      	blx	r7
 801476c:	3001      	adds	r0, #1
 801476e:	f43f ae3e 	beq.w	80143ee <_printf_float+0xb6>
 8014772:	f108 0801 	add.w	r8, r8, #1
 8014776:	68e3      	ldr	r3, [r4, #12]
 8014778:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801477a:	1a5b      	subs	r3, r3, r1
 801477c:	4543      	cmp	r3, r8
 801477e:	dcf0      	bgt.n	8014762 <_printf_float+0x42a>
 8014780:	e6fc      	b.n	801457c <_printf_float+0x244>
 8014782:	f04f 0800 	mov.w	r8, #0
 8014786:	f104 0919 	add.w	r9, r4, #25
 801478a:	e7f4      	b.n	8014776 <_printf_float+0x43e>

0801478c <_printf_common>:
 801478c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014790:	4616      	mov	r6, r2
 8014792:	4698      	mov	r8, r3
 8014794:	688a      	ldr	r2, [r1, #8]
 8014796:	690b      	ldr	r3, [r1, #16]
 8014798:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801479c:	4293      	cmp	r3, r2
 801479e:	bfb8      	it	lt
 80147a0:	4613      	movlt	r3, r2
 80147a2:	6033      	str	r3, [r6, #0]
 80147a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80147a8:	4607      	mov	r7, r0
 80147aa:	460c      	mov	r4, r1
 80147ac:	b10a      	cbz	r2, 80147b2 <_printf_common+0x26>
 80147ae:	3301      	adds	r3, #1
 80147b0:	6033      	str	r3, [r6, #0]
 80147b2:	6823      	ldr	r3, [r4, #0]
 80147b4:	0699      	lsls	r1, r3, #26
 80147b6:	bf42      	ittt	mi
 80147b8:	6833      	ldrmi	r3, [r6, #0]
 80147ba:	3302      	addmi	r3, #2
 80147bc:	6033      	strmi	r3, [r6, #0]
 80147be:	6825      	ldr	r5, [r4, #0]
 80147c0:	f015 0506 	ands.w	r5, r5, #6
 80147c4:	d106      	bne.n	80147d4 <_printf_common+0x48>
 80147c6:	f104 0a19 	add.w	sl, r4, #25
 80147ca:	68e3      	ldr	r3, [r4, #12]
 80147cc:	6832      	ldr	r2, [r6, #0]
 80147ce:	1a9b      	subs	r3, r3, r2
 80147d0:	42ab      	cmp	r3, r5
 80147d2:	dc26      	bgt.n	8014822 <_printf_common+0x96>
 80147d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80147d8:	6822      	ldr	r2, [r4, #0]
 80147da:	3b00      	subs	r3, #0
 80147dc:	bf18      	it	ne
 80147de:	2301      	movne	r3, #1
 80147e0:	0692      	lsls	r2, r2, #26
 80147e2:	d42b      	bmi.n	801483c <_printf_common+0xb0>
 80147e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80147e8:	4641      	mov	r1, r8
 80147ea:	4638      	mov	r0, r7
 80147ec:	47c8      	blx	r9
 80147ee:	3001      	adds	r0, #1
 80147f0:	d01e      	beq.n	8014830 <_printf_common+0xa4>
 80147f2:	6823      	ldr	r3, [r4, #0]
 80147f4:	6922      	ldr	r2, [r4, #16]
 80147f6:	f003 0306 	and.w	r3, r3, #6
 80147fa:	2b04      	cmp	r3, #4
 80147fc:	bf02      	ittt	eq
 80147fe:	68e5      	ldreq	r5, [r4, #12]
 8014800:	6833      	ldreq	r3, [r6, #0]
 8014802:	1aed      	subeq	r5, r5, r3
 8014804:	68a3      	ldr	r3, [r4, #8]
 8014806:	bf0c      	ite	eq
 8014808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801480c:	2500      	movne	r5, #0
 801480e:	4293      	cmp	r3, r2
 8014810:	bfc4      	itt	gt
 8014812:	1a9b      	subgt	r3, r3, r2
 8014814:	18ed      	addgt	r5, r5, r3
 8014816:	2600      	movs	r6, #0
 8014818:	341a      	adds	r4, #26
 801481a:	42b5      	cmp	r5, r6
 801481c:	d11a      	bne.n	8014854 <_printf_common+0xc8>
 801481e:	2000      	movs	r0, #0
 8014820:	e008      	b.n	8014834 <_printf_common+0xa8>
 8014822:	2301      	movs	r3, #1
 8014824:	4652      	mov	r2, sl
 8014826:	4641      	mov	r1, r8
 8014828:	4638      	mov	r0, r7
 801482a:	47c8      	blx	r9
 801482c:	3001      	adds	r0, #1
 801482e:	d103      	bne.n	8014838 <_printf_common+0xac>
 8014830:	f04f 30ff 	mov.w	r0, #4294967295
 8014834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014838:	3501      	adds	r5, #1
 801483a:	e7c6      	b.n	80147ca <_printf_common+0x3e>
 801483c:	18e1      	adds	r1, r4, r3
 801483e:	1c5a      	adds	r2, r3, #1
 8014840:	2030      	movs	r0, #48	@ 0x30
 8014842:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014846:	4422      	add	r2, r4
 8014848:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801484c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014850:	3302      	adds	r3, #2
 8014852:	e7c7      	b.n	80147e4 <_printf_common+0x58>
 8014854:	2301      	movs	r3, #1
 8014856:	4622      	mov	r2, r4
 8014858:	4641      	mov	r1, r8
 801485a:	4638      	mov	r0, r7
 801485c:	47c8      	blx	r9
 801485e:	3001      	adds	r0, #1
 8014860:	d0e6      	beq.n	8014830 <_printf_common+0xa4>
 8014862:	3601      	adds	r6, #1
 8014864:	e7d9      	b.n	801481a <_printf_common+0x8e>
	...

08014868 <_printf_i>:
 8014868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801486c:	7e0f      	ldrb	r7, [r1, #24]
 801486e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014870:	2f78      	cmp	r7, #120	@ 0x78
 8014872:	4691      	mov	r9, r2
 8014874:	4680      	mov	r8, r0
 8014876:	460c      	mov	r4, r1
 8014878:	469a      	mov	sl, r3
 801487a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801487e:	d807      	bhi.n	8014890 <_printf_i+0x28>
 8014880:	2f62      	cmp	r7, #98	@ 0x62
 8014882:	d80a      	bhi.n	801489a <_printf_i+0x32>
 8014884:	2f00      	cmp	r7, #0
 8014886:	f000 80d2 	beq.w	8014a2e <_printf_i+0x1c6>
 801488a:	2f58      	cmp	r7, #88	@ 0x58
 801488c:	f000 80b9 	beq.w	8014a02 <_printf_i+0x19a>
 8014890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014894:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014898:	e03a      	b.n	8014910 <_printf_i+0xa8>
 801489a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801489e:	2b15      	cmp	r3, #21
 80148a0:	d8f6      	bhi.n	8014890 <_printf_i+0x28>
 80148a2:	a101      	add	r1, pc, #4	@ (adr r1, 80148a8 <_printf_i+0x40>)
 80148a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80148a8:	08014901 	.word	0x08014901
 80148ac:	08014915 	.word	0x08014915
 80148b0:	08014891 	.word	0x08014891
 80148b4:	08014891 	.word	0x08014891
 80148b8:	08014891 	.word	0x08014891
 80148bc:	08014891 	.word	0x08014891
 80148c0:	08014915 	.word	0x08014915
 80148c4:	08014891 	.word	0x08014891
 80148c8:	08014891 	.word	0x08014891
 80148cc:	08014891 	.word	0x08014891
 80148d0:	08014891 	.word	0x08014891
 80148d4:	08014a15 	.word	0x08014a15
 80148d8:	0801493f 	.word	0x0801493f
 80148dc:	080149cf 	.word	0x080149cf
 80148e0:	08014891 	.word	0x08014891
 80148e4:	08014891 	.word	0x08014891
 80148e8:	08014a37 	.word	0x08014a37
 80148ec:	08014891 	.word	0x08014891
 80148f0:	0801493f 	.word	0x0801493f
 80148f4:	08014891 	.word	0x08014891
 80148f8:	08014891 	.word	0x08014891
 80148fc:	080149d7 	.word	0x080149d7
 8014900:	6833      	ldr	r3, [r6, #0]
 8014902:	1d1a      	adds	r2, r3, #4
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	6032      	str	r2, [r6, #0]
 8014908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801490c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014910:	2301      	movs	r3, #1
 8014912:	e09d      	b.n	8014a50 <_printf_i+0x1e8>
 8014914:	6833      	ldr	r3, [r6, #0]
 8014916:	6820      	ldr	r0, [r4, #0]
 8014918:	1d19      	adds	r1, r3, #4
 801491a:	6031      	str	r1, [r6, #0]
 801491c:	0606      	lsls	r6, r0, #24
 801491e:	d501      	bpl.n	8014924 <_printf_i+0xbc>
 8014920:	681d      	ldr	r5, [r3, #0]
 8014922:	e003      	b.n	801492c <_printf_i+0xc4>
 8014924:	0645      	lsls	r5, r0, #25
 8014926:	d5fb      	bpl.n	8014920 <_printf_i+0xb8>
 8014928:	f9b3 5000 	ldrsh.w	r5, [r3]
 801492c:	2d00      	cmp	r5, #0
 801492e:	da03      	bge.n	8014938 <_printf_i+0xd0>
 8014930:	232d      	movs	r3, #45	@ 0x2d
 8014932:	426d      	negs	r5, r5
 8014934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014938:	4859      	ldr	r0, [pc, #356]	@ (8014aa0 <_printf_i+0x238>)
 801493a:	230a      	movs	r3, #10
 801493c:	e011      	b.n	8014962 <_printf_i+0xfa>
 801493e:	6821      	ldr	r1, [r4, #0]
 8014940:	6833      	ldr	r3, [r6, #0]
 8014942:	0608      	lsls	r0, r1, #24
 8014944:	f853 5b04 	ldr.w	r5, [r3], #4
 8014948:	d402      	bmi.n	8014950 <_printf_i+0xe8>
 801494a:	0649      	lsls	r1, r1, #25
 801494c:	bf48      	it	mi
 801494e:	b2ad      	uxthmi	r5, r5
 8014950:	2f6f      	cmp	r7, #111	@ 0x6f
 8014952:	4853      	ldr	r0, [pc, #332]	@ (8014aa0 <_printf_i+0x238>)
 8014954:	6033      	str	r3, [r6, #0]
 8014956:	bf14      	ite	ne
 8014958:	230a      	movne	r3, #10
 801495a:	2308      	moveq	r3, #8
 801495c:	2100      	movs	r1, #0
 801495e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014962:	6866      	ldr	r6, [r4, #4]
 8014964:	60a6      	str	r6, [r4, #8]
 8014966:	2e00      	cmp	r6, #0
 8014968:	bfa2      	ittt	ge
 801496a:	6821      	ldrge	r1, [r4, #0]
 801496c:	f021 0104 	bicge.w	r1, r1, #4
 8014970:	6021      	strge	r1, [r4, #0]
 8014972:	b90d      	cbnz	r5, 8014978 <_printf_i+0x110>
 8014974:	2e00      	cmp	r6, #0
 8014976:	d04b      	beq.n	8014a10 <_printf_i+0x1a8>
 8014978:	4616      	mov	r6, r2
 801497a:	fbb5 f1f3 	udiv	r1, r5, r3
 801497e:	fb03 5711 	mls	r7, r3, r1, r5
 8014982:	5dc7      	ldrb	r7, [r0, r7]
 8014984:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014988:	462f      	mov	r7, r5
 801498a:	42bb      	cmp	r3, r7
 801498c:	460d      	mov	r5, r1
 801498e:	d9f4      	bls.n	801497a <_printf_i+0x112>
 8014990:	2b08      	cmp	r3, #8
 8014992:	d10b      	bne.n	80149ac <_printf_i+0x144>
 8014994:	6823      	ldr	r3, [r4, #0]
 8014996:	07df      	lsls	r7, r3, #31
 8014998:	d508      	bpl.n	80149ac <_printf_i+0x144>
 801499a:	6923      	ldr	r3, [r4, #16]
 801499c:	6861      	ldr	r1, [r4, #4]
 801499e:	4299      	cmp	r1, r3
 80149a0:	bfde      	ittt	le
 80149a2:	2330      	movle	r3, #48	@ 0x30
 80149a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80149a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80149ac:	1b92      	subs	r2, r2, r6
 80149ae:	6122      	str	r2, [r4, #16]
 80149b0:	f8cd a000 	str.w	sl, [sp]
 80149b4:	464b      	mov	r3, r9
 80149b6:	aa03      	add	r2, sp, #12
 80149b8:	4621      	mov	r1, r4
 80149ba:	4640      	mov	r0, r8
 80149bc:	f7ff fee6 	bl	801478c <_printf_common>
 80149c0:	3001      	adds	r0, #1
 80149c2:	d14a      	bne.n	8014a5a <_printf_i+0x1f2>
 80149c4:	f04f 30ff 	mov.w	r0, #4294967295
 80149c8:	b004      	add	sp, #16
 80149ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149ce:	6823      	ldr	r3, [r4, #0]
 80149d0:	f043 0320 	orr.w	r3, r3, #32
 80149d4:	6023      	str	r3, [r4, #0]
 80149d6:	4833      	ldr	r0, [pc, #204]	@ (8014aa4 <_printf_i+0x23c>)
 80149d8:	2778      	movs	r7, #120	@ 0x78
 80149da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80149de:	6823      	ldr	r3, [r4, #0]
 80149e0:	6831      	ldr	r1, [r6, #0]
 80149e2:	061f      	lsls	r7, r3, #24
 80149e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80149e8:	d402      	bmi.n	80149f0 <_printf_i+0x188>
 80149ea:	065f      	lsls	r7, r3, #25
 80149ec:	bf48      	it	mi
 80149ee:	b2ad      	uxthmi	r5, r5
 80149f0:	6031      	str	r1, [r6, #0]
 80149f2:	07d9      	lsls	r1, r3, #31
 80149f4:	bf44      	itt	mi
 80149f6:	f043 0320 	orrmi.w	r3, r3, #32
 80149fa:	6023      	strmi	r3, [r4, #0]
 80149fc:	b11d      	cbz	r5, 8014a06 <_printf_i+0x19e>
 80149fe:	2310      	movs	r3, #16
 8014a00:	e7ac      	b.n	801495c <_printf_i+0xf4>
 8014a02:	4827      	ldr	r0, [pc, #156]	@ (8014aa0 <_printf_i+0x238>)
 8014a04:	e7e9      	b.n	80149da <_printf_i+0x172>
 8014a06:	6823      	ldr	r3, [r4, #0]
 8014a08:	f023 0320 	bic.w	r3, r3, #32
 8014a0c:	6023      	str	r3, [r4, #0]
 8014a0e:	e7f6      	b.n	80149fe <_printf_i+0x196>
 8014a10:	4616      	mov	r6, r2
 8014a12:	e7bd      	b.n	8014990 <_printf_i+0x128>
 8014a14:	6833      	ldr	r3, [r6, #0]
 8014a16:	6825      	ldr	r5, [r4, #0]
 8014a18:	6961      	ldr	r1, [r4, #20]
 8014a1a:	1d18      	adds	r0, r3, #4
 8014a1c:	6030      	str	r0, [r6, #0]
 8014a1e:	062e      	lsls	r6, r5, #24
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	d501      	bpl.n	8014a28 <_printf_i+0x1c0>
 8014a24:	6019      	str	r1, [r3, #0]
 8014a26:	e002      	b.n	8014a2e <_printf_i+0x1c6>
 8014a28:	0668      	lsls	r0, r5, #25
 8014a2a:	d5fb      	bpl.n	8014a24 <_printf_i+0x1bc>
 8014a2c:	8019      	strh	r1, [r3, #0]
 8014a2e:	2300      	movs	r3, #0
 8014a30:	6123      	str	r3, [r4, #16]
 8014a32:	4616      	mov	r6, r2
 8014a34:	e7bc      	b.n	80149b0 <_printf_i+0x148>
 8014a36:	6833      	ldr	r3, [r6, #0]
 8014a38:	1d1a      	adds	r2, r3, #4
 8014a3a:	6032      	str	r2, [r6, #0]
 8014a3c:	681e      	ldr	r6, [r3, #0]
 8014a3e:	6862      	ldr	r2, [r4, #4]
 8014a40:	2100      	movs	r1, #0
 8014a42:	4630      	mov	r0, r6
 8014a44:	f7eb fbec 	bl	8000220 <memchr>
 8014a48:	b108      	cbz	r0, 8014a4e <_printf_i+0x1e6>
 8014a4a:	1b80      	subs	r0, r0, r6
 8014a4c:	6060      	str	r0, [r4, #4]
 8014a4e:	6863      	ldr	r3, [r4, #4]
 8014a50:	6123      	str	r3, [r4, #16]
 8014a52:	2300      	movs	r3, #0
 8014a54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014a58:	e7aa      	b.n	80149b0 <_printf_i+0x148>
 8014a5a:	6923      	ldr	r3, [r4, #16]
 8014a5c:	4632      	mov	r2, r6
 8014a5e:	4649      	mov	r1, r9
 8014a60:	4640      	mov	r0, r8
 8014a62:	47d0      	blx	sl
 8014a64:	3001      	adds	r0, #1
 8014a66:	d0ad      	beq.n	80149c4 <_printf_i+0x15c>
 8014a68:	6823      	ldr	r3, [r4, #0]
 8014a6a:	079b      	lsls	r3, r3, #30
 8014a6c:	d413      	bmi.n	8014a96 <_printf_i+0x22e>
 8014a6e:	68e0      	ldr	r0, [r4, #12]
 8014a70:	9b03      	ldr	r3, [sp, #12]
 8014a72:	4298      	cmp	r0, r3
 8014a74:	bfb8      	it	lt
 8014a76:	4618      	movlt	r0, r3
 8014a78:	e7a6      	b.n	80149c8 <_printf_i+0x160>
 8014a7a:	2301      	movs	r3, #1
 8014a7c:	4632      	mov	r2, r6
 8014a7e:	4649      	mov	r1, r9
 8014a80:	4640      	mov	r0, r8
 8014a82:	47d0      	blx	sl
 8014a84:	3001      	adds	r0, #1
 8014a86:	d09d      	beq.n	80149c4 <_printf_i+0x15c>
 8014a88:	3501      	adds	r5, #1
 8014a8a:	68e3      	ldr	r3, [r4, #12]
 8014a8c:	9903      	ldr	r1, [sp, #12]
 8014a8e:	1a5b      	subs	r3, r3, r1
 8014a90:	42ab      	cmp	r3, r5
 8014a92:	dcf2      	bgt.n	8014a7a <_printf_i+0x212>
 8014a94:	e7eb      	b.n	8014a6e <_printf_i+0x206>
 8014a96:	2500      	movs	r5, #0
 8014a98:	f104 0619 	add.w	r6, r4, #25
 8014a9c:	e7f5      	b.n	8014a8a <_printf_i+0x222>
 8014a9e:	bf00      	nop
 8014aa0:	0802780a 	.word	0x0802780a
 8014aa4:	0802781b 	.word	0x0802781b

08014aa8 <_scanf_float>:
 8014aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aac:	b087      	sub	sp, #28
 8014aae:	4617      	mov	r7, r2
 8014ab0:	9303      	str	r3, [sp, #12]
 8014ab2:	688b      	ldr	r3, [r1, #8]
 8014ab4:	1e5a      	subs	r2, r3, #1
 8014ab6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014aba:	bf81      	itttt	hi
 8014abc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014ac0:	eb03 0b05 	addhi.w	fp, r3, r5
 8014ac4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014ac8:	608b      	strhi	r3, [r1, #8]
 8014aca:	680b      	ldr	r3, [r1, #0]
 8014acc:	460a      	mov	r2, r1
 8014ace:	f04f 0500 	mov.w	r5, #0
 8014ad2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8014ad6:	f842 3b1c 	str.w	r3, [r2], #28
 8014ada:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014ade:	4680      	mov	r8, r0
 8014ae0:	460c      	mov	r4, r1
 8014ae2:	bf98      	it	ls
 8014ae4:	f04f 0b00 	movls.w	fp, #0
 8014ae8:	9201      	str	r2, [sp, #4]
 8014aea:	4616      	mov	r6, r2
 8014aec:	46aa      	mov	sl, r5
 8014aee:	46a9      	mov	r9, r5
 8014af0:	9502      	str	r5, [sp, #8]
 8014af2:	68a2      	ldr	r2, [r4, #8]
 8014af4:	b152      	cbz	r2, 8014b0c <_scanf_float+0x64>
 8014af6:	683b      	ldr	r3, [r7, #0]
 8014af8:	781b      	ldrb	r3, [r3, #0]
 8014afa:	2b4e      	cmp	r3, #78	@ 0x4e
 8014afc:	d864      	bhi.n	8014bc8 <_scanf_float+0x120>
 8014afe:	2b40      	cmp	r3, #64	@ 0x40
 8014b00:	d83c      	bhi.n	8014b7c <_scanf_float+0xd4>
 8014b02:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8014b06:	b2c8      	uxtb	r0, r1
 8014b08:	280e      	cmp	r0, #14
 8014b0a:	d93a      	bls.n	8014b82 <_scanf_float+0xda>
 8014b0c:	f1b9 0f00 	cmp.w	r9, #0
 8014b10:	d003      	beq.n	8014b1a <_scanf_float+0x72>
 8014b12:	6823      	ldr	r3, [r4, #0]
 8014b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014b18:	6023      	str	r3, [r4, #0]
 8014b1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014b1e:	f1ba 0f01 	cmp.w	sl, #1
 8014b22:	f200 8117 	bhi.w	8014d54 <_scanf_float+0x2ac>
 8014b26:	9b01      	ldr	r3, [sp, #4]
 8014b28:	429e      	cmp	r6, r3
 8014b2a:	f200 8108 	bhi.w	8014d3e <_scanf_float+0x296>
 8014b2e:	2001      	movs	r0, #1
 8014b30:	b007      	add	sp, #28
 8014b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b36:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8014b3a:	2a0d      	cmp	r2, #13
 8014b3c:	d8e6      	bhi.n	8014b0c <_scanf_float+0x64>
 8014b3e:	a101      	add	r1, pc, #4	@ (adr r1, 8014b44 <_scanf_float+0x9c>)
 8014b40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014b44:	08014c8b 	.word	0x08014c8b
 8014b48:	08014b0d 	.word	0x08014b0d
 8014b4c:	08014b0d 	.word	0x08014b0d
 8014b50:	08014b0d 	.word	0x08014b0d
 8014b54:	08014ceb 	.word	0x08014ceb
 8014b58:	08014cc3 	.word	0x08014cc3
 8014b5c:	08014b0d 	.word	0x08014b0d
 8014b60:	08014b0d 	.word	0x08014b0d
 8014b64:	08014c99 	.word	0x08014c99
 8014b68:	08014b0d 	.word	0x08014b0d
 8014b6c:	08014b0d 	.word	0x08014b0d
 8014b70:	08014b0d 	.word	0x08014b0d
 8014b74:	08014b0d 	.word	0x08014b0d
 8014b78:	08014c51 	.word	0x08014c51
 8014b7c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8014b80:	e7db      	b.n	8014b3a <_scanf_float+0x92>
 8014b82:	290e      	cmp	r1, #14
 8014b84:	d8c2      	bhi.n	8014b0c <_scanf_float+0x64>
 8014b86:	a001      	add	r0, pc, #4	@ (adr r0, 8014b8c <_scanf_float+0xe4>)
 8014b88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014b8c:	08014c41 	.word	0x08014c41
 8014b90:	08014b0d 	.word	0x08014b0d
 8014b94:	08014c41 	.word	0x08014c41
 8014b98:	08014cd7 	.word	0x08014cd7
 8014b9c:	08014b0d 	.word	0x08014b0d
 8014ba0:	08014be9 	.word	0x08014be9
 8014ba4:	08014c27 	.word	0x08014c27
 8014ba8:	08014c27 	.word	0x08014c27
 8014bac:	08014c27 	.word	0x08014c27
 8014bb0:	08014c27 	.word	0x08014c27
 8014bb4:	08014c27 	.word	0x08014c27
 8014bb8:	08014c27 	.word	0x08014c27
 8014bbc:	08014c27 	.word	0x08014c27
 8014bc0:	08014c27 	.word	0x08014c27
 8014bc4:	08014c27 	.word	0x08014c27
 8014bc8:	2b6e      	cmp	r3, #110	@ 0x6e
 8014bca:	d809      	bhi.n	8014be0 <_scanf_float+0x138>
 8014bcc:	2b60      	cmp	r3, #96	@ 0x60
 8014bce:	d8b2      	bhi.n	8014b36 <_scanf_float+0x8e>
 8014bd0:	2b54      	cmp	r3, #84	@ 0x54
 8014bd2:	d07b      	beq.n	8014ccc <_scanf_float+0x224>
 8014bd4:	2b59      	cmp	r3, #89	@ 0x59
 8014bd6:	d199      	bne.n	8014b0c <_scanf_float+0x64>
 8014bd8:	2d07      	cmp	r5, #7
 8014bda:	d197      	bne.n	8014b0c <_scanf_float+0x64>
 8014bdc:	2508      	movs	r5, #8
 8014bde:	e02c      	b.n	8014c3a <_scanf_float+0x192>
 8014be0:	2b74      	cmp	r3, #116	@ 0x74
 8014be2:	d073      	beq.n	8014ccc <_scanf_float+0x224>
 8014be4:	2b79      	cmp	r3, #121	@ 0x79
 8014be6:	e7f6      	b.n	8014bd6 <_scanf_float+0x12e>
 8014be8:	6821      	ldr	r1, [r4, #0]
 8014bea:	05c8      	lsls	r0, r1, #23
 8014bec:	d51b      	bpl.n	8014c26 <_scanf_float+0x17e>
 8014bee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8014bf2:	6021      	str	r1, [r4, #0]
 8014bf4:	f109 0901 	add.w	r9, r9, #1
 8014bf8:	f1bb 0f00 	cmp.w	fp, #0
 8014bfc:	d003      	beq.n	8014c06 <_scanf_float+0x15e>
 8014bfe:	3201      	adds	r2, #1
 8014c00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014c04:	60a2      	str	r2, [r4, #8]
 8014c06:	68a3      	ldr	r3, [r4, #8]
 8014c08:	3b01      	subs	r3, #1
 8014c0a:	60a3      	str	r3, [r4, #8]
 8014c0c:	6923      	ldr	r3, [r4, #16]
 8014c0e:	3301      	adds	r3, #1
 8014c10:	6123      	str	r3, [r4, #16]
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	3b01      	subs	r3, #1
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	607b      	str	r3, [r7, #4]
 8014c1a:	f340 8087 	ble.w	8014d2c <_scanf_float+0x284>
 8014c1e:	683b      	ldr	r3, [r7, #0]
 8014c20:	3301      	adds	r3, #1
 8014c22:	603b      	str	r3, [r7, #0]
 8014c24:	e765      	b.n	8014af2 <_scanf_float+0x4a>
 8014c26:	eb1a 0105 	adds.w	r1, sl, r5
 8014c2a:	f47f af6f 	bne.w	8014b0c <_scanf_float+0x64>
 8014c2e:	6822      	ldr	r2, [r4, #0]
 8014c30:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8014c34:	6022      	str	r2, [r4, #0]
 8014c36:	460d      	mov	r5, r1
 8014c38:	468a      	mov	sl, r1
 8014c3a:	f806 3b01 	strb.w	r3, [r6], #1
 8014c3e:	e7e2      	b.n	8014c06 <_scanf_float+0x15e>
 8014c40:	6822      	ldr	r2, [r4, #0]
 8014c42:	0610      	lsls	r0, r2, #24
 8014c44:	f57f af62 	bpl.w	8014b0c <_scanf_float+0x64>
 8014c48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014c4c:	6022      	str	r2, [r4, #0]
 8014c4e:	e7f4      	b.n	8014c3a <_scanf_float+0x192>
 8014c50:	f1ba 0f00 	cmp.w	sl, #0
 8014c54:	d10e      	bne.n	8014c74 <_scanf_float+0x1cc>
 8014c56:	f1b9 0f00 	cmp.w	r9, #0
 8014c5a:	d10e      	bne.n	8014c7a <_scanf_float+0x1d2>
 8014c5c:	6822      	ldr	r2, [r4, #0]
 8014c5e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014c62:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014c66:	d108      	bne.n	8014c7a <_scanf_float+0x1d2>
 8014c68:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014c6c:	6022      	str	r2, [r4, #0]
 8014c6e:	f04f 0a01 	mov.w	sl, #1
 8014c72:	e7e2      	b.n	8014c3a <_scanf_float+0x192>
 8014c74:	f1ba 0f02 	cmp.w	sl, #2
 8014c78:	d055      	beq.n	8014d26 <_scanf_float+0x27e>
 8014c7a:	2d01      	cmp	r5, #1
 8014c7c:	d002      	beq.n	8014c84 <_scanf_float+0x1dc>
 8014c7e:	2d04      	cmp	r5, #4
 8014c80:	f47f af44 	bne.w	8014b0c <_scanf_float+0x64>
 8014c84:	3501      	adds	r5, #1
 8014c86:	b2ed      	uxtb	r5, r5
 8014c88:	e7d7      	b.n	8014c3a <_scanf_float+0x192>
 8014c8a:	f1ba 0f01 	cmp.w	sl, #1
 8014c8e:	f47f af3d 	bne.w	8014b0c <_scanf_float+0x64>
 8014c92:	f04f 0a02 	mov.w	sl, #2
 8014c96:	e7d0      	b.n	8014c3a <_scanf_float+0x192>
 8014c98:	b97d      	cbnz	r5, 8014cba <_scanf_float+0x212>
 8014c9a:	f1b9 0f00 	cmp.w	r9, #0
 8014c9e:	f47f af38 	bne.w	8014b12 <_scanf_float+0x6a>
 8014ca2:	6822      	ldr	r2, [r4, #0]
 8014ca4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014ca8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014cac:	f040 8108 	bne.w	8014ec0 <_scanf_float+0x418>
 8014cb0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014cb4:	6022      	str	r2, [r4, #0]
 8014cb6:	2501      	movs	r5, #1
 8014cb8:	e7bf      	b.n	8014c3a <_scanf_float+0x192>
 8014cba:	2d03      	cmp	r5, #3
 8014cbc:	d0e2      	beq.n	8014c84 <_scanf_float+0x1dc>
 8014cbe:	2d05      	cmp	r5, #5
 8014cc0:	e7de      	b.n	8014c80 <_scanf_float+0x1d8>
 8014cc2:	2d02      	cmp	r5, #2
 8014cc4:	f47f af22 	bne.w	8014b0c <_scanf_float+0x64>
 8014cc8:	2503      	movs	r5, #3
 8014cca:	e7b6      	b.n	8014c3a <_scanf_float+0x192>
 8014ccc:	2d06      	cmp	r5, #6
 8014cce:	f47f af1d 	bne.w	8014b0c <_scanf_float+0x64>
 8014cd2:	2507      	movs	r5, #7
 8014cd4:	e7b1      	b.n	8014c3a <_scanf_float+0x192>
 8014cd6:	6822      	ldr	r2, [r4, #0]
 8014cd8:	0591      	lsls	r1, r2, #22
 8014cda:	f57f af17 	bpl.w	8014b0c <_scanf_float+0x64>
 8014cde:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8014ce2:	6022      	str	r2, [r4, #0]
 8014ce4:	f8cd 9008 	str.w	r9, [sp, #8]
 8014ce8:	e7a7      	b.n	8014c3a <_scanf_float+0x192>
 8014cea:	6822      	ldr	r2, [r4, #0]
 8014cec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8014cf0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8014cf4:	d006      	beq.n	8014d04 <_scanf_float+0x25c>
 8014cf6:	0550      	lsls	r0, r2, #21
 8014cf8:	f57f af08 	bpl.w	8014b0c <_scanf_float+0x64>
 8014cfc:	f1b9 0f00 	cmp.w	r9, #0
 8014d00:	f000 80de 	beq.w	8014ec0 <_scanf_float+0x418>
 8014d04:	0591      	lsls	r1, r2, #22
 8014d06:	bf58      	it	pl
 8014d08:	9902      	ldrpl	r1, [sp, #8]
 8014d0a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014d0e:	bf58      	it	pl
 8014d10:	eba9 0101 	subpl.w	r1, r9, r1
 8014d14:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8014d18:	bf58      	it	pl
 8014d1a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014d1e:	6022      	str	r2, [r4, #0]
 8014d20:	f04f 0900 	mov.w	r9, #0
 8014d24:	e789      	b.n	8014c3a <_scanf_float+0x192>
 8014d26:	f04f 0a03 	mov.w	sl, #3
 8014d2a:	e786      	b.n	8014c3a <_scanf_float+0x192>
 8014d2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014d30:	4639      	mov	r1, r7
 8014d32:	4640      	mov	r0, r8
 8014d34:	4798      	blx	r3
 8014d36:	2800      	cmp	r0, #0
 8014d38:	f43f aedb 	beq.w	8014af2 <_scanf_float+0x4a>
 8014d3c:	e6e6      	b.n	8014b0c <_scanf_float+0x64>
 8014d3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014d42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014d46:	463a      	mov	r2, r7
 8014d48:	4640      	mov	r0, r8
 8014d4a:	4798      	blx	r3
 8014d4c:	6923      	ldr	r3, [r4, #16]
 8014d4e:	3b01      	subs	r3, #1
 8014d50:	6123      	str	r3, [r4, #16]
 8014d52:	e6e8      	b.n	8014b26 <_scanf_float+0x7e>
 8014d54:	1e6b      	subs	r3, r5, #1
 8014d56:	2b06      	cmp	r3, #6
 8014d58:	d824      	bhi.n	8014da4 <_scanf_float+0x2fc>
 8014d5a:	2d02      	cmp	r5, #2
 8014d5c:	d836      	bhi.n	8014dcc <_scanf_float+0x324>
 8014d5e:	9b01      	ldr	r3, [sp, #4]
 8014d60:	429e      	cmp	r6, r3
 8014d62:	f67f aee4 	bls.w	8014b2e <_scanf_float+0x86>
 8014d66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014d6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014d6e:	463a      	mov	r2, r7
 8014d70:	4640      	mov	r0, r8
 8014d72:	4798      	blx	r3
 8014d74:	6923      	ldr	r3, [r4, #16]
 8014d76:	3b01      	subs	r3, #1
 8014d78:	6123      	str	r3, [r4, #16]
 8014d7a:	e7f0      	b.n	8014d5e <_scanf_float+0x2b6>
 8014d7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014d80:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8014d84:	463a      	mov	r2, r7
 8014d86:	4640      	mov	r0, r8
 8014d88:	4798      	blx	r3
 8014d8a:	6923      	ldr	r3, [r4, #16]
 8014d8c:	3b01      	subs	r3, #1
 8014d8e:	6123      	str	r3, [r4, #16]
 8014d90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014d94:	fa5f fa8a 	uxtb.w	sl, sl
 8014d98:	f1ba 0f02 	cmp.w	sl, #2
 8014d9c:	d1ee      	bne.n	8014d7c <_scanf_float+0x2d4>
 8014d9e:	3d03      	subs	r5, #3
 8014da0:	b2ed      	uxtb	r5, r5
 8014da2:	1b76      	subs	r6, r6, r5
 8014da4:	6823      	ldr	r3, [r4, #0]
 8014da6:	05da      	lsls	r2, r3, #23
 8014da8:	d530      	bpl.n	8014e0c <_scanf_float+0x364>
 8014daa:	055b      	lsls	r3, r3, #21
 8014dac:	d511      	bpl.n	8014dd2 <_scanf_float+0x32a>
 8014dae:	9b01      	ldr	r3, [sp, #4]
 8014db0:	429e      	cmp	r6, r3
 8014db2:	f67f aebc 	bls.w	8014b2e <_scanf_float+0x86>
 8014db6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014dba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014dbe:	463a      	mov	r2, r7
 8014dc0:	4640      	mov	r0, r8
 8014dc2:	4798      	blx	r3
 8014dc4:	6923      	ldr	r3, [r4, #16]
 8014dc6:	3b01      	subs	r3, #1
 8014dc8:	6123      	str	r3, [r4, #16]
 8014dca:	e7f0      	b.n	8014dae <_scanf_float+0x306>
 8014dcc:	46aa      	mov	sl, r5
 8014dce:	46b3      	mov	fp, r6
 8014dd0:	e7de      	b.n	8014d90 <_scanf_float+0x2e8>
 8014dd2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014dd6:	6923      	ldr	r3, [r4, #16]
 8014dd8:	2965      	cmp	r1, #101	@ 0x65
 8014dda:	f103 33ff 	add.w	r3, r3, #4294967295
 8014dde:	f106 35ff 	add.w	r5, r6, #4294967295
 8014de2:	6123      	str	r3, [r4, #16]
 8014de4:	d00c      	beq.n	8014e00 <_scanf_float+0x358>
 8014de6:	2945      	cmp	r1, #69	@ 0x45
 8014de8:	d00a      	beq.n	8014e00 <_scanf_float+0x358>
 8014dea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014dee:	463a      	mov	r2, r7
 8014df0:	4640      	mov	r0, r8
 8014df2:	4798      	blx	r3
 8014df4:	6923      	ldr	r3, [r4, #16]
 8014df6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014dfa:	3b01      	subs	r3, #1
 8014dfc:	1eb5      	subs	r5, r6, #2
 8014dfe:	6123      	str	r3, [r4, #16]
 8014e00:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014e04:	463a      	mov	r2, r7
 8014e06:	4640      	mov	r0, r8
 8014e08:	4798      	blx	r3
 8014e0a:	462e      	mov	r6, r5
 8014e0c:	6822      	ldr	r2, [r4, #0]
 8014e0e:	f012 0210 	ands.w	r2, r2, #16
 8014e12:	d001      	beq.n	8014e18 <_scanf_float+0x370>
 8014e14:	2000      	movs	r0, #0
 8014e16:	e68b      	b.n	8014b30 <_scanf_float+0x88>
 8014e18:	7032      	strb	r2, [r6, #0]
 8014e1a:	6823      	ldr	r3, [r4, #0]
 8014e1c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8014e20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014e24:	d11c      	bne.n	8014e60 <_scanf_float+0x3b8>
 8014e26:	9b02      	ldr	r3, [sp, #8]
 8014e28:	454b      	cmp	r3, r9
 8014e2a:	eba3 0209 	sub.w	r2, r3, r9
 8014e2e:	d123      	bne.n	8014e78 <_scanf_float+0x3d0>
 8014e30:	9901      	ldr	r1, [sp, #4]
 8014e32:	2200      	movs	r2, #0
 8014e34:	4640      	mov	r0, r8
 8014e36:	f002 fcfb 	bl	8017830 <_strtod_r>
 8014e3a:	9b03      	ldr	r3, [sp, #12]
 8014e3c:	6821      	ldr	r1, [r4, #0]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	f011 0f02 	tst.w	r1, #2
 8014e44:	ec57 6b10 	vmov	r6, r7, d0
 8014e48:	f103 0204 	add.w	r2, r3, #4
 8014e4c:	d01f      	beq.n	8014e8e <_scanf_float+0x3e6>
 8014e4e:	9903      	ldr	r1, [sp, #12]
 8014e50:	600a      	str	r2, [r1, #0]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	e9c3 6700 	strd	r6, r7, [r3]
 8014e58:	68e3      	ldr	r3, [r4, #12]
 8014e5a:	3301      	adds	r3, #1
 8014e5c:	60e3      	str	r3, [r4, #12]
 8014e5e:	e7d9      	b.n	8014e14 <_scanf_float+0x36c>
 8014e60:	9b04      	ldr	r3, [sp, #16]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d0e4      	beq.n	8014e30 <_scanf_float+0x388>
 8014e66:	9905      	ldr	r1, [sp, #20]
 8014e68:	230a      	movs	r3, #10
 8014e6a:	3101      	adds	r1, #1
 8014e6c:	4640      	mov	r0, r8
 8014e6e:	f002 fd5f 	bl	8017930 <_strtol_r>
 8014e72:	9b04      	ldr	r3, [sp, #16]
 8014e74:	9e05      	ldr	r6, [sp, #20]
 8014e76:	1ac2      	subs	r2, r0, r3
 8014e78:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8014e7c:	429e      	cmp	r6, r3
 8014e7e:	bf28      	it	cs
 8014e80:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8014e84:	4910      	ldr	r1, [pc, #64]	@ (8014ec8 <_scanf_float+0x420>)
 8014e86:	4630      	mov	r0, r6
 8014e88:	f000 f954 	bl	8015134 <siprintf>
 8014e8c:	e7d0      	b.n	8014e30 <_scanf_float+0x388>
 8014e8e:	f011 0f04 	tst.w	r1, #4
 8014e92:	9903      	ldr	r1, [sp, #12]
 8014e94:	600a      	str	r2, [r1, #0]
 8014e96:	d1dc      	bne.n	8014e52 <_scanf_float+0x3aa>
 8014e98:	681d      	ldr	r5, [r3, #0]
 8014e9a:	4632      	mov	r2, r6
 8014e9c:	463b      	mov	r3, r7
 8014e9e:	4630      	mov	r0, r6
 8014ea0:	4639      	mov	r1, r7
 8014ea2:	f7eb fe6b 	bl	8000b7c <__aeabi_dcmpun>
 8014ea6:	b128      	cbz	r0, 8014eb4 <_scanf_float+0x40c>
 8014ea8:	4808      	ldr	r0, [pc, #32]	@ (8014ecc <_scanf_float+0x424>)
 8014eaa:	f000 fabb 	bl	8015424 <nanf>
 8014eae:	ed85 0a00 	vstr	s0, [r5]
 8014eb2:	e7d1      	b.n	8014e58 <_scanf_float+0x3b0>
 8014eb4:	4630      	mov	r0, r6
 8014eb6:	4639      	mov	r1, r7
 8014eb8:	f7eb febe 	bl	8000c38 <__aeabi_d2f>
 8014ebc:	6028      	str	r0, [r5, #0]
 8014ebe:	e7cb      	b.n	8014e58 <_scanf_float+0x3b0>
 8014ec0:	f04f 0900 	mov.w	r9, #0
 8014ec4:	e629      	b.n	8014b1a <_scanf_float+0x72>
 8014ec6:	bf00      	nop
 8014ec8:	0802782c 	.word	0x0802782c
 8014ecc:	08027bc5 	.word	0x08027bc5

08014ed0 <std>:
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	b510      	push	{r4, lr}
 8014ed4:	4604      	mov	r4, r0
 8014ed6:	e9c0 3300 	strd	r3, r3, [r0]
 8014eda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014ede:	6083      	str	r3, [r0, #8]
 8014ee0:	8181      	strh	r1, [r0, #12]
 8014ee2:	6643      	str	r3, [r0, #100]	@ 0x64
 8014ee4:	81c2      	strh	r2, [r0, #14]
 8014ee6:	6183      	str	r3, [r0, #24]
 8014ee8:	4619      	mov	r1, r3
 8014eea:	2208      	movs	r2, #8
 8014eec:	305c      	adds	r0, #92	@ 0x5c
 8014eee:	f000 fa19 	bl	8015324 <memset>
 8014ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8014f28 <std+0x58>)
 8014ef4:	6263      	str	r3, [r4, #36]	@ 0x24
 8014ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8014f2c <std+0x5c>)
 8014ef8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014efa:	4b0d      	ldr	r3, [pc, #52]	@ (8014f30 <std+0x60>)
 8014efc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014efe:	4b0d      	ldr	r3, [pc, #52]	@ (8014f34 <std+0x64>)
 8014f00:	6323      	str	r3, [r4, #48]	@ 0x30
 8014f02:	4b0d      	ldr	r3, [pc, #52]	@ (8014f38 <std+0x68>)
 8014f04:	6224      	str	r4, [r4, #32]
 8014f06:	429c      	cmp	r4, r3
 8014f08:	d006      	beq.n	8014f18 <std+0x48>
 8014f0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014f0e:	4294      	cmp	r4, r2
 8014f10:	d002      	beq.n	8014f18 <std+0x48>
 8014f12:	33d0      	adds	r3, #208	@ 0xd0
 8014f14:	429c      	cmp	r4, r3
 8014f16:	d105      	bne.n	8014f24 <std+0x54>
 8014f18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f20:	f000 ba7c 	b.w	801541c <__retarget_lock_init_recursive>
 8014f24:	bd10      	pop	{r4, pc}
 8014f26:	bf00      	nop
 8014f28:	08015175 	.word	0x08015175
 8014f2c:	08015197 	.word	0x08015197
 8014f30:	080151cf 	.word	0x080151cf
 8014f34:	080151f3 	.word	0x080151f3
 8014f38:	200130fc 	.word	0x200130fc

08014f3c <stdio_exit_handler>:
 8014f3c:	4a02      	ldr	r2, [pc, #8]	@ (8014f48 <stdio_exit_handler+0xc>)
 8014f3e:	4903      	ldr	r1, [pc, #12]	@ (8014f4c <stdio_exit_handler+0x10>)
 8014f40:	4803      	ldr	r0, [pc, #12]	@ (8014f50 <stdio_exit_handler+0x14>)
 8014f42:	f000 b869 	b.w	8015018 <_fwalk_sglue>
 8014f46:	bf00      	nop
 8014f48:	200003fc 	.word	0x200003fc
 8014f4c:	08017f71 	.word	0x08017f71
 8014f50:	2000040c 	.word	0x2000040c

08014f54 <cleanup_stdio>:
 8014f54:	6841      	ldr	r1, [r0, #4]
 8014f56:	4b0c      	ldr	r3, [pc, #48]	@ (8014f88 <cleanup_stdio+0x34>)
 8014f58:	4299      	cmp	r1, r3
 8014f5a:	b510      	push	{r4, lr}
 8014f5c:	4604      	mov	r4, r0
 8014f5e:	d001      	beq.n	8014f64 <cleanup_stdio+0x10>
 8014f60:	f003 f806 	bl	8017f70 <_fflush_r>
 8014f64:	68a1      	ldr	r1, [r4, #8]
 8014f66:	4b09      	ldr	r3, [pc, #36]	@ (8014f8c <cleanup_stdio+0x38>)
 8014f68:	4299      	cmp	r1, r3
 8014f6a:	d002      	beq.n	8014f72 <cleanup_stdio+0x1e>
 8014f6c:	4620      	mov	r0, r4
 8014f6e:	f002 ffff 	bl	8017f70 <_fflush_r>
 8014f72:	68e1      	ldr	r1, [r4, #12]
 8014f74:	4b06      	ldr	r3, [pc, #24]	@ (8014f90 <cleanup_stdio+0x3c>)
 8014f76:	4299      	cmp	r1, r3
 8014f78:	d004      	beq.n	8014f84 <cleanup_stdio+0x30>
 8014f7a:	4620      	mov	r0, r4
 8014f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f80:	f002 bff6 	b.w	8017f70 <_fflush_r>
 8014f84:	bd10      	pop	{r4, pc}
 8014f86:	bf00      	nop
 8014f88:	200130fc 	.word	0x200130fc
 8014f8c:	20013164 	.word	0x20013164
 8014f90:	200131cc 	.word	0x200131cc

08014f94 <global_stdio_init.part.0>:
 8014f94:	b510      	push	{r4, lr}
 8014f96:	4b0b      	ldr	r3, [pc, #44]	@ (8014fc4 <global_stdio_init.part.0+0x30>)
 8014f98:	4c0b      	ldr	r4, [pc, #44]	@ (8014fc8 <global_stdio_init.part.0+0x34>)
 8014f9a:	4a0c      	ldr	r2, [pc, #48]	@ (8014fcc <global_stdio_init.part.0+0x38>)
 8014f9c:	601a      	str	r2, [r3, #0]
 8014f9e:	4620      	mov	r0, r4
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	2104      	movs	r1, #4
 8014fa4:	f7ff ff94 	bl	8014ed0 <std>
 8014fa8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014fac:	2201      	movs	r2, #1
 8014fae:	2109      	movs	r1, #9
 8014fb0:	f7ff ff8e 	bl	8014ed0 <std>
 8014fb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014fb8:	2202      	movs	r2, #2
 8014fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fbe:	2112      	movs	r1, #18
 8014fc0:	f7ff bf86 	b.w	8014ed0 <std>
 8014fc4:	20013234 	.word	0x20013234
 8014fc8:	200130fc 	.word	0x200130fc
 8014fcc:	08014f3d 	.word	0x08014f3d

08014fd0 <__sfp_lock_acquire>:
 8014fd0:	4801      	ldr	r0, [pc, #4]	@ (8014fd8 <__sfp_lock_acquire+0x8>)
 8014fd2:	f000 ba24 	b.w	801541e <__retarget_lock_acquire_recursive>
 8014fd6:	bf00      	nop
 8014fd8:	2001323d 	.word	0x2001323d

08014fdc <__sfp_lock_release>:
 8014fdc:	4801      	ldr	r0, [pc, #4]	@ (8014fe4 <__sfp_lock_release+0x8>)
 8014fde:	f000 ba1f 	b.w	8015420 <__retarget_lock_release_recursive>
 8014fe2:	bf00      	nop
 8014fe4:	2001323d 	.word	0x2001323d

08014fe8 <__sinit>:
 8014fe8:	b510      	push	{r4, lr}
 8014fea:	4604      	mov	r4, r0
 8014fec:	f7ff fff0 	bl	8014fd0 <__sfp_lock_acquire>
 8014ff0:	6a23      	ldr	r3, [r4, #32]
 8014ff2:	b11b      	cbz	r3, 8014ffc <__sinit+0x14>
 8014ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ff8:	f7ff bff0 	b.w	8014fdc <__sfp_lock_release>
 8014ffc:	4b04      	ldr	r3, [pc, #16]	@ (8015010 <__sinit+0x28>)
 8014ffe:	6223      	str	r3, [r4, #32]
 8015000:	4b04      	ldr	r3, [pc, #16]	@ (8015014 <__sinit+0x2c>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d1f5      	bne.n	8014ff4 <__sinit+0xc>
 8015008:	f7ff ffc4 	bl	8014f94 <global_stdio_init.part.0>
 801500c:	e7f2      	b.n	8014ff4 <__sinit+0xc>
 801500e:	bf00      	nop
 8015010:	08014f55 	.word	0x08014f55
 8015014:	20013234 	.word	0x20013234

08015018 <_fwalk_sglue>:
 8015018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801501c:	4607      	mov	r7, r0
 801501e:	4688      	mov	r8, r1
 8015020:	4614      	mov	r4, r2
 8015022:	2600      	movs	r6, #0
 8015024:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015028:	f1b9 0901 	subs.w	r9, r9, #1
 801502c:	d505      	bpl.n	801503a <_fwalk_sglue+0x22>
 801502e:	6824      	ldr	r4, [r4, #0]
 8015030:	2c00      	cmp	r4, #0
 8015032:	d1f7      	bne.n	8015024 <_fwalk_sglue+0xc>
 8015034:	4630      	mov	r0, r6
 8015036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801503a:	89ab      	ldrh	r3, [r5, #12]
 801503c:	2b01      	cmp	r3, #1
 801503e:	d907      	bls.n	8015050 <_fwalk_sglue+0x38>
 8015040:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015044:	3301      	adds	r3, #1
 8015046:	d003      	beq.n	8015050 <_fwalk_sglue+0x38>
 8015048:	4629      	mov	r1, r5
 801504a:	4638      	mov	r0, r7
 801504c:	47c0      	blx	r8
 801504e:	4306      	orrs	r6, r0
 8015050:	3568      	adds	r5, #104	@ 0x68
 8015052:	e7e9      	b.n	8015028 <_fwalk_sglue+0x10>

08015054 <iprintf>:
 8015054:	b40f      	push	{r0, r1, r2, r3}
 8015056:	b507      	push	{r0, r1, r2, lr}
 8015058:	4906      	ldr	r1, [pc, #24]	@ (8015074 <iprintf+0x20>)
 801505a:	ab04      	add	r3, sp, #16
 801505c:	6808      	ldr	r0, [r1, #0]
 801505e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015062:	6881      	ldr	r1, [r0, #8]
 8015064:	9301      	str	r3, [sp, #4]
 8015066:	f002 fde7 	bl	8017c38 <_vfiprintf_r>
 801506a:	b003      	add	sp, #12
 801506c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015070:	b004      	add	sp, #16
 8015072:	4770      	bx	lr
 8015074:	20000408 	.word	0x20000408

08015078 <_puts_r>:
 8015078:	6a03      	ldr	r3, [r0, #32]
 801507a:	b570      	push	{r4, r5, r6, lr}
 801507c:	6884      	ldr	r4, [r0, #8]
 801507e:	4605      	mov	r5, r0
 8015080:	460e      	mov	r6, r1
 8015082:	b90b      	cbnz	r3, 8015088 <_puts_r+0x10>
 8015084:	f7ff ffb0 	bl	8014fe8 <__sinit>
 8015088:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801508a:	07db      	lsls	r3, r3, #31
 801508c:	d405      	bmi.n	801509a <_puts_r+0x22>
 801508e:	89a3      	ldrh	r3, [r4, #12]
 8015090:	0598      	lsls	r0, r3, #22
 8015092:	d402      	bmi.n	801509a <_puts_r+0x22>
 8015094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015096:	f000 f9c2 	bl	801541e <__retarget_lock_acquire_recursive>
 801509a:	89a3      	ldrh	r3, [r4, #12]
 801509c:	0719      	lsls	r1, r3, #28
 801509e:	d502      	bpl.n	80150a6 <_puts_r+0x2e>
 80150a0:	6923      	ldr	r3, [r4, #16]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d135      	bne.n	8015112 <_puts_r+0x9a>
 80150a6:	4621      	mov	r1, r4
 80150a8:	4628      	mov	r0, r5
 80150aa:	f000 f8e5 	bl	8015278 <__swsetup_r>
 80150ae:	b380      	cbz	r0, 8015112 <_puts_r+0x9a>
 80150b0:	f04f 35ff 	mov.w	r5, #4294967295
 80150b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80150b6:	07da      	lsls	r2, r3, #31
 80150b8:	d405      	bmi.n	80150c6 <_puts_r+0x4e>
 80150ba:	89a3      	ldrh	r3, [r4, #12]
 80150bc:	059b      	lsls	r3, r3, #22
 80150be:	d402      	bmi.n	80150c6 <_puts_r+0x4e>
 80150c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80150c2:	f000 f9ad 	bl	8015420 <__retarget_lock_release_recursive>
 80150c6:	4628      	mov	r0, r5
 80150c8:	bd70      	pop	{r4, r5, r6, pc}
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	da04      	bge.n	80150d8 <_puts_r+0x60>
 80150ce:	69a2      	ldr	r2, [r4, #24]
 80150d0:	429a      	cmp	r2, r3
 80150d2:	dc17      	bgt.n	8015104 <_puts_r+0x8c>
 80150d4:	290a      	cmp	r1, #10
 80150d6:	d015      	beq.n	8015104 <_puts_r+0x8c>
 80150d8:	6823      	ldr	r3, [r4, #0]
 80150da:	1c5a      	adds	r2, r3, #1
 80150dc:	6022      	str	r2, [r4, #0]
 80150de:	7019      	strb	r1, [r3, #0]
 80150e0:	68a3      	ldr	r3, [r4, #8]
 80150e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80150e6:	3b01      	subs	r3, #1
 80150e8:	60a3      	str	r3, [r4, #8]
 80150ea:	2900      	cmp	r1, #0
 80150ec:	d1ed      	bne.n	80150ca <_puts_r+0x52>
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	da11      	bge.n	8015116 <_puts_r+0x9e>
 80150f2:	4622      	mov	r2, r4
 80150f4:	210a      	movs	r1, #10
 80150f6:	4628      	mov	r0, r5
 80150f8:	f000 f87f 	bl	80151fa <__swbuf_r>
 80150fc:	3001      	adds	r0, #1
 80150fe:	d0d7      	beq.n	80150b0 <_puts_r+0x38>
 8015100:	250a      	movs	r5, #10
 8015102:	e7d7      	b.n	80150b4 <_puts_r+0x3c>
 8015104:	4622      	mov	r2, r4
 8015106:	4628      	mov	r0, r5
 8015108:	f000 f877 	bl	80151fa <__swbuf_r>
 801510c:	3001      	adds	r0, #1
 801510e:	d1e7      	bne.n	80150e0 <_puts_r+0x68>
 8015110:	e7ce      	b.n	80150b0 <_puts_r+0x38>
 8015112:	3e01      	subs	r6, #1
 8015114:	e7e4      	b.n	80150e0 <_puts_r+0x68>
 8015116:	6823      	ldr	r3, [r4, #0]
 8015118:	1c5a      	adds	r2, r3, #1
 801511a:	6022      	str	r2, [r4, #0]
 801511c:	220a      	movs	r2, #10
 801511e:	701a      	strb	r2, [r3, #0]
 8015120:	e7ee      	b.n	8015100 <_puts_r+0x88>
	...

08015124 <puts>:
 8015124:	4b02      	ldr	r3, [pc, #8]	@ (8015130 <puts+0xc>)
 8015126:	4601      	mov	r1, r0
 8015128:	6818      	ldr	r0, [r3, #0]
 801512a:	f7ff bfa5 	b.w	8015078 <_puts_r>
 801512e:	bf00      	nop
 8015130:	20000408 	.word	0x20000408

08015134 <siprintf>:
 8015134:	b40e      	push	{r1, r2, r3}
 8015136:	b500      	push	{lr}
 8015138:	b09c      	sub	sp, #112	@ 0x70
 801513a:	ab1d      	add	r3, sp, #116	@ 0x74
 801513c:	9002      	str	r0, [sp, #8]
 801513e:	9006      	str	r0, [sp, #24]
 8015140:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015144:	4809      	ldr	r0, [pc, #36]	@ (801516c <siprintf+0x38>)
 8015146:	9107      	str	r1, [sp, #28]
 8015148:	9104      	str	r1, [sp, #16]
 801514a:	4909      	ldr	r1, [pc, #36]	@ (8015170 <siprintf+0x3c>)
 801514c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015150:	9105      	str	r1, [sp, #20]
 8015152:	6800      	ldr	r0, [r0, #0]
 8015154:	9301      	str	r3, [sp, #4]
 8015156:	a902      	add	r1, sp, #8
 8015158:	f002 fc48 	bl	80179ec <_svfiprintf_r>
 801515c:	9b02      	ldr	r3, [sp, #8]
 801515e:	2200      	movs	r2, #0
 8015160:	701a      	strb	r2, [r3, #0]
 8015162:	b01c      	add	sp, #112	@ 0x70
 8015164:	f85d eb04 	ldr.w	lr, [sp], #4
 8015168:	b003      	add	sp, #12
 801516a:	4770      	bx	lr
 801516c:	20000408 	.word	0x20000408
 8015170:	ffff0208 	.word	0xffff0208

08015174 <__sread>:
 8015174:	b510      	push	{r4, lr}
 8015176:	460c      	mov	r4, r1
 8015178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801517c:	f000 f900 	bl	8015380 <_read_r>
 8015180:	2800      	cmp	r0, #0
 8015182:	bfab      	itete	ge
 8015184:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015186:	89a3      	ldrhlt	r3, [r4, #12]
 8015188:	181b      	addge	r3, r3, r0
 801518a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801518e:	bfac      	ite	ge
 8015190:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015192:	81a3      	strhlt	r3, [r4, #12]
 8015194:	bd10      	pop	{r4, pc}

08015196 <__swrite>:
 8015196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801519a:	461f      	mov	r7, r3
 801519c:	898b      	ldrh	r3, [r1, #12]
 801519e:	05db      	lsls	r3, r3, #23
 80151a0:	4605      	mov	r5, r0
 80151a2:	460c      	mov	r4, r1
 80151a4:	4616      	mov	r6, r2
 80151a6:	d505      	bpl.n	80151b4 <__swrite+0x1e>
 80151a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151ac:	2302      	movs	r3, #2
 80151ae:	2200      	movs	r2, #0
 80151b0:	f000 f8d4 	bl	801535c <_lseek_r>
 80151b4:	89a3      	ldrh	r3, [r4, #12]
 80151b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80151ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80151be:	81a3      	strh	r3, [r4, #12]
 80151c0:	4632      	mov	r2, r6
 80151c2:	463b      	mov	r3, r7
 80151c4:	4628      	mov	r0, r5
 80151c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80151ca:	f000 b8eb 	b.w	80153a4 <_write_r>

080151ce <__sseek>:
 80151ce:	b510      	push	{r4, lr}
 80151d0:	460c      	mov	r4, r1
 80151d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151d6:	f000 f8c1 	bl	801535c <_lseek_r>
 80151da:	1c43      	adds	r3, r0, #1
 80151dc:	89a3      	ldrh	r3, [r4, #12]
 80151de:	bf15      	itete	ne
 80151e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80151e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80151e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80151ea:	81a3      	strheq	r3, [r4, #12]
 80151ec:	bf18      	it	ne
 80151ee:	81a3      	strhne	r3, [r4, #12]
 80151f0:	bd10      	pop	{r4, pc}

080151f2 <__sclose>:
 80151f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151f6:	f000 b8a1 	b.w	801533c <_close_r>

080151fa <__swbuf_r>:
 80151fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151fc:	460e      	mov	r6, r1
 80151fe:	4614      	mov	r4, r2
 8015200:	4605      	mov	r5, r0
 8015202:	b118      	cbz	r0, 801520c <__swbuf_r+0x12>
 8015204:	6a03      	ldr	r3, [r0, #32]
 8015206:	b90b      	cbnz	r3, 801520c <__swbuf_r+0x12>
 8015208:	f7ff feee 	bl	8014fe8 <__sinit>
 801520c:	69a3      	ldr	r3, [r4, #24]
 801520e:	60a3      	str	r3, [r4, #8]
 8015210:	89a3      	ldrh	r3, [r4, #12]
 8015212:	071a      	lsls	r2, r3, #28
 8015214:	d501      	bpl.n	801521a <__swbuf_r+0x20>
 8015216:	6923      	ldr	r3, [r4, #16]
 8015218:	b943      	cbnz	r3, 801522c <__swbuf_r+0x32>
 801521a:	4621      	mov	r1, r4
 801521c:	4628      	mov	r0, r5
 801521e:	f000 f82b 	bl	8015278 <__swsetup_r>
 8015222:	b118      	cbz	r0, 801522c <__swbuf_r+0x32>
 8015224:	f04f 37ff 	mov.w	r7, #4294967295
 8015228:	4638      	mov	r0, r7
 801522a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801522c:	6823      	ldr	r3, [r4, #0]
 801522e:	6922      	ldr	r2, [r4, #16]
 8015230:	1a98      	subs	r0, r3, r2
 8015232:	6963      	ldr	r3, [r4, #20]
 8015234:	b2f6      	uxtb	r6, r6
 8015236:	4283      	cmp	r3, r0
 8015238:	4637      	mov	r7, r6
 801523a:	dc05      	bgt.n	8015248 <__swbuf_r+0x4e>
 801523c:	4621      	mov	r1, r4
 801523e:	4628      	mov	r0, r5
 8015240:	f002 fe96 	bl	8017f70 <_fflush_r>
 8015244:	2800      	cmp	r0, #0
 8015246:	d1ed      	bne.n	8015224 <__swbuf_r+0x2a>
 8015248:	68a3      	ldr	r3, [r4, #8]
 801524a:	3b01      	subs	r3, #1
 801524c:	60a3      	str	r3, [r4, #8]
 801524e:	6823      	ldr	r3, [r4, #0]
 8015250:	1c5a      	adds	r2, r3, #1
 8015252:	6022      	str	r2, [r4, #0]
 8015254:	701e      	strb	r6, [r3, #0]
 8015256:	6962      	ldr	r2, [r4, #20]
 8015258:	1c43      	adds	r3, r0, #1
 801525a:	429a      	cmp	r2, r3
 801525c:	d004      	beq.n	8015268 <__swbuf_r+0x6e>
 801525e:	89a3      	ldrh	r3, [r4, #12]
 8015260:	07db      	lsls	r3, r3, #31
 8015262:	d5e1      	bpl.n	8015228 <__swbuf_r+0x2e>
 8015264:	2e0a      	cmp	r6, #10
 8015266:	d1df      	bne.n	8015228 <__swbuf_r+0x2e>
 8015268:	4621      	mov	r1, r4
 801526a:	4628      	mov	r0, r5
 801526c:	f002 fe80 	bl	8017f70 <_fflush_r>
 8015270:	2800      	cmp	r0, #0
 8015272:	d0d9      	beq.n	8015228 <__swbuf_r+0x2e>
 8015274:	e7d6      	b.n	8015224 <__swbuf_r+0x2a>
	...

08015278 <__swsetup_r>:
 8015278:	b538      	push	{r3, r4, r5, lr}
 801527a:	4b29      	ldr	r3, [pc, #164]	@ (8015320 <__swsetup_r+0xa8>)
 801527c:	4605      	mov	r5, r0
 801527e:	6818      	ldr	r0, [r3, #0]
 8015280:	460c      	mov	r4, r1
 8015282:	b118      	cbz	r0, 801528c <__swsetup_r+0x14>
 8015284:	6a03      	ldr	r3, [r0, #32]
 8015286:	b90b      	cbnz	r3, 801528c <__swsetup_r+0x14>
 8015288:	f7ff feae 	bl	8014fe8 <__sinit>
 801528c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015290:	0719      	lsls	r1, r3, #28
 8015292:	d422      	bmi.n	80152da <__swsetup_r+0x62>
 8015294:	06da      	lsls	r2, r3, #27
 8015296:	d407      	bmi.n	80152a8 <__swsetup_r+0x30>
 8015298:	2209      	movs	r2, #9
 801529a:	602a      	str	r2, [r5, #0]
 801529c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80152a0:	81a3      	strh	r3, [r4, #12]
 80152a2:	f04f 30ff 	mov.w	r0, #4294967295
 80152a6:	e033      	b.n	8015310 <__swsetup_r+0x98>
 80152a8:	0758      	lsls	r0, r3, #29
 80152aa:	d512      	bpl.n	80152d2 <__swsetup_r+0x5a>
 80152ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80152ae:	b141      	cbz	r1, 80152c2 <__swsetup_r+0x4a>
 80152b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80152b4:	4299      	cmp	r1, r3
 80152b6:	d002      	beq.n	80152be <__swsetup_r+0x46>
 80152b8:	4628      	mov	r0, r5
 80152ba:	f000 ff05 	bl	80160c8 <_free_r>
 80152be:	2300      	movs	r3, #0
 80152c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80152c2:	89a3      	ldrh	r3, [r4, #12]
 80152c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80152c8:	81a3      	strh	r3, [r4, #12]
 80152ca:	2300      	movs	r3, #0
 80152cc:	6063      	str	r3, [r4, #4]
 80152ce:	6923      	ldr	r3, [r4, #16]
 80152d0:	6023      	str	r3, [r4, #0]
 80152d2:	89a3      	ldrh	r3, [r4, #12]
 80152d4:	f043 0308 	orr.w	r3, r3, #8
 80152d8:	81a3      	strh	r3, [r4, #12]
 80152da:	6923      	ldr	r3, [r4, #16]
 80152dc:	b94b      	cbnz	r3, 80152f2 <__swsetup_r+0x7a>
 80152de:	89a3      	ldrh	r3, [r4, #12]
 80152e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80152e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80152e8:	d003      	beq.n	80152f2 <__swsetup_r+0x7a>
 80152ea:	4621      	mov	r1, r4
 80152ec:	4628      	mov	r0, r5
 80152ee:	f002 fe8d 	bl	801800c <__smakebuf_r>
 80152f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152f6:	f013 0201 	ands.w	r2, r3, #1
 80152fa:	d00a      	beq.n	8015312 <__swsetup_r+0x9a>
 80152fc:	2200      	movs	r2, #0
 80152fe:	60a2      	str	r2, [r4, #8]
 8015300:	6962      	ldr	r2, [r4, #20]
 8015302:	4252      	negs	r2, r2
 8015304:	61a2      	str	r2, [r4, #24]
 8015306:	6922      	ldr	r2, [r4, #16]
 8015308:	b942      	cbnz	r2, 801531c <__swsetup_r+0xa4>
 801530a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801530e:	d1c5      	bne.n	801529c <__swsetup_r+0x24>
 8015310:	bd38      	pop	{r3, r4, r5, pc}
 8015312:	0799      	lsls	r1, r3, #30
 8015314:	bf58      	it	pl
 8015316:	6962      	ldrpl	r2, [r4, #20]
 8015318:	60a2      	str	r2, [r4, #8]
 801531a:	e7f4      	b.n	8015306 <__swsetup_r+0x8e>
 801531c:	2000      	movs	r0, #0
 801531e:	e7f7      	b.n	8015310 <__swsetup_r+0x98>
 8015320:	20000408 	.word	0x20000408

08015324 <memset>:
 8015324:	4402      	add	r2, r0
 8015326:	4603      	mov	r3, r0
 8015328:	4293      	cmp	r3, r2
 801532a:	d100      	bne.n	801532e <memset+0xa>
 801532c:	4770      	bx	lr
 801532e:	f803 1b01 	strb.w	r1, [r3], #1
 8015332:	e7f9      	b.n	8015328 <memset+0x4>

08015334 <_localeconv_r>:
 8015334:	4800      	ldr	r0, [pc, #0]	@ (8015338 <_localeconv_r+0x4>)
 8015336:	4770      	bx	lr
 8015338:	20000548 	.word	0x20000548

0801533c <_close_r>:
 801533c:	b538      	push	{r3, r4, r5, lr}
 801533e:	4d06      	ldr	r5, [pc, #24]	@ (8015358 <_close_r+0x1c>)
 8015340:	2300      	movs	r3, #0
 8015342:	4604      	mov	r4, r0
 8015344:	4608      	mov	r0, r1
 8015346:	602b      	str	r3, [r5, #0]
 8015348:	f7ef fadc 	bl	8004904 <_close>
 801534c:	1c43      	adds	r3, r0, #1
 801534e:	d102      	bne.n	8015356 <_close_r+0x1a>
 8015350:	682b      	ldr	r3, [r5, #0]
 8015352:	b103      	cbz	r3, 8015356 <_close_r+0x1a>
 8015354:	6023      	str	r3, [r4, #0]
 8015356:	bd38      	pop	{r3, r4, r5, pc}
 8015358:	20013238 	.word	0x20013238

0801535c <_lseek_r>:
 801535c:	b538      	push	{r3, r4, r5, lr}
 801535e:	4d07      	ldr	r5, [pc, #28]	@ (801537c <_lseek_r+0x20>)
 8015360:	4604      	mov	r4, r0
 8015362:	4608      	mov	r0, r1
 8015364:	4611      	mov	r1, r2
 8015366:	2200      	movs	r2, #0
 8015368:	602a      	str	r2, [r5, #0]
 801536a:	461a      	mov	r2, r3
 801536c:	f7ef faf1 	bl	8004952 <_lseek>
 8015370:	1c43      	adds	r3, r0, #1
 8015372:	d102      	bne.n	801537a <_lseek_r+0x1e>
 8015374:	682b      	ldr	r3, [r5, #0]
 8015376:	b103      	cbz	r3, 801537a <_lseek_r+0x1e>
 8015378:	6023      	str	r3, [r4, #0]
 801537a:	bd38      	pop	{r3, r4, r5, pc}
 801537c:	20013238 	.word	0x20013238

08015380 <_read_r>:
 8015380:	b538      	push	{r3, r4, r5, lr}
 8015382:	4d07      	ldr	r5, [pc, #28]	@ (80153a0 <_read_r+0x20>)
 8015384:	4604      	mov	r4, r0
 8015386:	4608      	mov	r0, r1
 8015388:	4611      	mov	r1, r2
 801538a:	2200      	movs	r2, #0
 801538c:	602a      	str	r2, [r5, #0]
 801538e:	461a      	mov	r2, r3
 8015390:	f7ef fa7f 	bl	8004892 <_read>
 8015394:	1c43      	adds	r3, r0, #1
 8015396:	d102      	bne.n	801539e <_read_r+0x1e>
 8015398:	682b      	ldr	r3, [r5, #0]
 801539a:	b103      	cbz	r3, 801539e <_read_r+0x1e>
 801539c:	6023      	str	r3, [r4, #0]
 801539e:	bd38      	pop	{r3, r4, r5, pc}
 80153a0:	20013238 	.word	0x20013238

080153a4 <_write_r>:
 80153a4:	b538      	push	{r3, r4, r5, lr}
 80153a6:	4d07      	ldr	r5, [pc, #28]	@ (80153c4 <_write_r+0x20>)
 80153a8:	4604      	mov	r4, r0
 80153aa:	4608      	mov	r0, r1
 80153ac:	4611      	mov	r1, r2
 80153ae:	2200      	movs	r2, #0
 80153b0:	602a      	str	r2, [r5, #0]
 80153b2:	461a      	mov	r2, r3
 80153b4:	f7ef fa8a 	bl	80048cc <_write>
 80153b8:	1c43      	adds	r3, r0, #1
 80153ba:	d102      	bne.n	80153c2 <_write_r+0x1e>
 80153bc:	682b      	ldr	r3, [r5, #0]
 80153be:	b103      	cbz	r3, 80153c2 <_write_r+0x1e>
 80153c0:	6023      	str	r3, [r4, #0]
 80153c2:	bd38      	pop	{r3, r4, r5, pc}
 80153c4:	20013238 	.word	0x20013238

080153c8 <__errno>:
 80153c8:	4b01      	ldr	r3, [pc, #4]	@ (80153d0 <__errno+0x8>)
 80153ca:	6818      	ldr	r0, [r3, #0]
 80153cc:	4770      	bx	lr
 80153ce:	bf00      	nop
 80153d0:	20000408 	.word	0x20000408

080153d4 <__libc_init_array>:
 80153d4:	b570      	push	{r4, r5, r6, lr}
 80153d6:	4d0d      	ldr	r5, [pc, #52]	@ (801540c <__libc_init_array+0x38>)
 80153d8:	4c0d      	ldr	r4, [pc, #52]	@ (8015410 <__libc_init_array+0x3c>)
 80153da:	1b64      	subs	r4, r4, r5
 80153dc:	10a4      	asrs	r4, r4, #2
 80153de:	2600      	movs	r6, #0
 80153e0:	42a6      	cmp	r6, r4
 80153e2:	d109      	bne.n	80153f8 <__libc_init_array+0x24>
 80153e4:	4d0b      	ldr	r5, [pc, #44]	@ (8015414 <__libc_init_array+0x40>)
 80153e6:	4c0c      	ldr	r4, [pc, #48]	@ (8015418 <__libc_init_array+0x44>)
 80153e8:	f003 fae0 	bl	80189ac <_init>
 80153ec:	1b64      	subs	r4, r4, r5
 80153ee:	10a4      	asrs	r4, r4, #2
 80153f0:	2600      	movs	r6, #0
 80153f2:	42a6      	cmp	r6, r4
 80153f4:	d105      	bne.n	8015402 <__libc_init_array+0x2e>
 80153f6:	bd70      	pop	{r4, r5, r6, pc}
 80153f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80153fc:	4798      	blx	r3
 80153fe:	3601      	adds	r6, #1
 8015400:	e7ee      	b.n	80153e0 <__libc_init_array+0xc>
 8015402:	f855 3b04 	ldr.w	r3, [r5], #4
 8015406:	4798      	blx	r3
 8015408:	3601      	adds	r6, #1
 801540a:	e7f2      	b.n	80153f2 <__libc_init_array+0x1e>
 801540c:	08027c30 	.word	0x08027c30
 8015410:	08027c30 	.word	0x08027c30
 8015414:	08027c30 	.word	0x08027c30
 8015418:	08027c34 	.word	0x08027c34

0801541c <__retarget_lock_init_recursive>:
 801541c:	4770      	bx	lr

0801541e <__retarget_lock_acquire_recursive>:
 801541e:	4770      	bx	lr

08015420 <__retarget_lock_release_recursive>:
 8015420:	4770      	bx	lr
	...

08015424 <nanf>:
 8015424:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801542c <nanf+0x8>
 8015428:	4770      	bx	lr
 801542a:	bf00      	nop
 801542c:	7fc00000 	.word	0x7fc00000

08015430 <quorem>:
 8015430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015434:	6903      	ldr	r3, [r0, #16]
 8015436:	690c      	ldr	r4, [r1, #16]
 8015438:	42a3      	cmp	r3, r4
 801543a:	4607      	mov	r7, r0
 801543c:	db7e      	blt.n	801553c <quorem+0x10c>
 801543e:	3c01      	subs	r4, #1
 8015440:	f101 0814 	add.w	r8, r1, #20
 8015444:	00a3      	lsls	r3, r4, #2
 8015446:	f100 0514 	add.w	r5, r0, #20
 801544a:	9300      	str	r3, [sp, #0]
 801544c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015450:	9301      	str	r3, [sp, #4]
 8015452:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015456:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801545a:	3301      	adds	r3, #1
 801545c:	429a      	cmp	r2, r3
 801545e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015462:	fbb2 f6f3 	udiv	r6, r2, r3
 8015466:	d32e      	bcc.n	80154c6 <quorem+0x96>
 8015468:	f04f 0a00 	mov.w	sl, #0
 801546c:	46c4      	mov	ip, r8
 801546e:	46ae      	mov	lr, r5
 8015470:	46d3      	mov	fp, sl
 8015472:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015476:	b298      	uxth	r0, r3
 8015478:	fb06 a000 	mla	r0, r6, r0, sl
 801547c:	0c02      	lsrs	r2, r0, #16
 801547e:	0c1b      	lsrs	r3, r3, #16
 8015480:	fb06 2303 	mla	r3, r6, r3, r2
 8015484:	f8de 2000 	ldr.w	r2, [lr]
 8015488:	b280      	uxth	r0, r0
 801548a:	b292      	uxth	r2, r2
 801548c:	1a12      	subs	r2, r2, r0
 801548e:	445a      	add	r2, fp
 8015490:	f8de 0000 	ldr.w	r0, [lr]
 8015494:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015498:	b29b      	uxth	r3, r3
 801549a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801549e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80154a2:	b292      	uxth	r2, r2
 80154a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80154a8:	45e1      	cmp	r9, ip
 80154aa:	f84e 2b04 	str.w	r2, [lr], #4
 80154ae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80154b2:	d2de      	bcs.n	8015472 <quorem+0x42>
 80154b4:	9b00      	ldr	r3, [sp, #0]
 80154b6:	58eb      	ldr	r3, [r5, r3]
 80154b8:	b92b      	cbnz	r3, 80154c6 <quorem+0x96>
 80154ba:	9b01      	ldr	r3, [sp, #4]
 80154bc:	3b04      	subs	r3, #4
 80154be:	429d      	cmp	r5, r3
 80154c0:	461a      	mov	r2, r3
 80154c2:	d32f      	bcc.n	8015524 <quorem+0xf4>
 80154c4:	613c      	str	r4, [r7, #16]
 80154c6:	4638      	mov	r0, r7
 80154c8:	f001 f9c2 	bl	8016850 <__mcmp>
 80154cc:	2800      	cmp	r0, #0
 80154ce:	db25      	blt.n	801551c <quorem+0xec>
 80154d0:	4629      	mov	r1, r5
 80154d2:	2000      	movs	r0, #0
 80154d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80154d8:	f8d1 c000 	ldr.w	ip, [r1]
 80154dc:	fa1f fe82 	uxth.w	lr, r2
 80154e0:	fa1f f38c 	uxth.w	r3, ip
 80154e4:	eba3 030e 	sub.w	r3, r3, lr
 80154e8:	4403      	add	r3, r0
 80154ea:	0c12      	lsrs	r2, r2, #16
 80154ec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80154f0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80154f4:	b29b      	uxth	r3, r3
 80154f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80154fa:	45c1      	cmp	r9, r8
 80154fc:	f841 3b04 	str.w	r3, [r1], #4
 8015500:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015504:	d2e6      	bcs.n	80154d4 <quorem+0xa4>
 8015506:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801550a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801550e:	b922      	cbnz	r2, 801551a <quorem+0xea>
 8015510:	3b04      	subs	r3, #4
 8015512:	429d      	cmp	r5, r3
 8015514:	461a      	mov	r2, r3
 8015516:	d30b      	bcc.n	8015530 <quorem+0x100>
 8015518:	613c      	str	r4, [r7, #16]
 801551a:	3601      	adds	r6, #1
 801551c:	4630      	mov	r0, r6
 801551e:	b003      	add	sp, #12
 8015520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015524:	6812      	ldr	r2, [r2, #0]
 8015526:	3b04      	subs	r3, #4
 8015528:	2a00      	cmp	r2, #0
 801552a:	d1cb      	bne.n	80154c4 <quorem+0x94>
 801552c:	3c01      	subs	r4, #1
 801552e:	e7c6      	b.n	80154be <quorem+0x8e>
 8015530:	6812      	ldr	r2, [r2, #0]
 8015532:	3b04      	subs	r3, #4
 8015534:	2a00      	cmp	r2, #0
 8015536:	d1ef      	bne.n	8015518 <quorem+0xe8>
 8015538:	3c01      	subs	r4, #1
 801553a:	e7ea      	b.n	8015512 <quorem+0xe2>
 801553c:	2000      	movs	r0, #0
 801553e:	e7ee      	b.n	801551e <quorem+0xee>

08015540 <_dtoa_r>:
 8015540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015544:	69c7      	ldr	r7, [r0, #28]
 8015546:	b099      	sub	sp, #100	@ 0x64
 8015548:	ed8d 0b02 	vstr	d0, [sp, #8]
 801554c:	ec55 4b10 	vmov	r4, r5, d0
 8015550:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8015552:	9109      	str	r1, [sp, #36]	@ 0x24
 8015554:	4683      	mov	fp, r0
 8015556:	920e      	str	r2, [sp, #56]	@ 0x38
 8015558:	9313      	str	r3, [sp, #76]	@ 0x4c
 801555a:	b97f      	cbnz	r7, 801557c <_dtoa_r+0x3c>
 801555c:	2010      	movs	r0, #16
 801555e:	f000 fdfd 	bl	801615c <malloc>
 8015562:	4602      	mov	r2, r0
 8015564:	f8cb 001c 	str.w	r0, [fp, #28]
 8015568:	b920      	cbnz	r0, 8015574 <_dtoa_r+0x34>
 801556a:	4ba7      	ldr	r3, [pc, #668]	@ (8015808 <_dtoa_r+0x2c8>)
 801556c:	21ef      	movs	r1, #239	@ 0xef
 801556e:	48a7      	ldr	r0, [pc, #668]	@ (801580c <_dtoa_r+0x2cc>)
 8015570:	f002 fdfe 	bl	8018170 <__assert_func>
 8015574:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015578:	6007      	str	r7, [r0, #0]
 801557a:	60c7      	str	r7, [r0, #12]
 801557c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015580:	6819      	ldr	r1, [r3, #0]
 8015582:	b159      	cbz	r1, 801559c <_dtoa_r+0x5c>
 8015584:	685a      	ldr	r2, [r3, #4]
 8015586:	604a      	str	r2, [r1, #4]
 8015588:	2301      	movs	r3, #1
 801558a:	4093      	lsls	r3, r2
 801558c:	608b      	str	r3, [r1, #8]
 801558e:	4658      	mov	r0, fp
 8015590:	f000 feda 	bl	8016348 <_Bfree>
 8015594:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015598:	2200      	movs	r2, #0
 801559a:	601a      	str	r2, [r3, #0]
 801559c:	1e2b      	subs	r3, r5, #0
 801559e:	bfb9      	ittee	lt
 80155a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80155a4:	9303      	strlt	r3, [sp, #12]
 80155a6:	2300      	movge	r3, #0
 80155a8:	6033      	strge	r3, [r6, #0]
 80155aa:	9f03      	ldr	r7, [sp, #12]
 80155ac:	4b98      	ldr	r3, [pc, #608]	@ (8015810 <_dtoa_r+0x2d0>)
 80155ae:	bfbc      	itt	lt
 80155b0:	2201      	movlt	r2, #1
 80155b2:	6032      	strlt	r2, [r6, #0]
 80155b4:	43bb      	bics	r3, r7
 80155b6:	d112      	bne.n	80155de <_dtoa_r+0x9e>
 80155b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80155ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80155be:	6013      	str	r3, [r2, #0]
 80155c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80155c4:	4323      	orrs	r3, r4
 80155c6:	f000 854d 	beq.w	8016064 <_dtoa_r+0xb24>
 80155ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80155cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8015824 <_dtoa_r+0x2e4>
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	f000 854f 	beq.w	8016074 <_dtoa_r+0xb34>
 80155d6:	f10a 0303 	add.w	r3, sl, #3
 80155da:	f000 bd49 	b.w	8016070 <_dtoa_r+0xb30>
 80155de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80155e2:	2200      	movs	r2, #0
 80155e4:	ec51 0b17 	vmov	r0, r1, d7
 80155e8:	2300      	movs	r3, #0
 80155ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80155ee:	f7eb fa93 	bl	8000b18 <__aeabi_dcmpeq>
 80155f2:	4680      	mov	r8, r0
 80155f4:	b158      	cbz	r0, 801560e <_dtoa_r+0xce>
 80155f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80155f8:	2301      	movs	r3, #1
 80155fa:	6013      	str	r3, [r2, #0]
 80155fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80155fe:	b113      	cbz	r3, 8015606 <_dtoa_r+0xc6>
 8015600:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015602:	4b84      	ldr	r3, [pc, #528]	@ (8015814 <_dtoa_r+0x2d4>)
 8015604:	6013      	str	r3, [r2, #0]
 8015606:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8015828 <_dtoa_r+0x2e8>
 801560a:	f000 bd33 	b.w	8016074 <_dtoa_r+0xb34>
 801560e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8015612:	aa16      	add	r2, sp, #88	@ 0x58
 8015614:	a917      	add	r1, sp, #92	@ 0x5c
 8015616:	4658      	mov	r0, fp
 8015618:	f001 fa3a 	bl	8016a90 <__d2b>
 801561c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8015620:	4681      	mov	r9, r0
 8015622:	2e00      	cmp	r6, #0
 8015624:	d077      	beq.n	8015716 <_dtoa_r+0x1d6>
 8015626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015628:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801562c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015630:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015634:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015638:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801563c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015640:	4619      	mov	r1, r3
 8015642:	2200      	movs	r2, #0
 8015644:	4b74      	ldr	r3, [pc, #464]	@ (8015818 <_dtoa_r+0x2d8>)
 8015646:	f7ea fe47 	bl	80002d8 <__aeabi_dsub>
 801564a:	a369      	add	r3, pc, #420	@ (adr r3, 80157f0 <_dtoa_r+0x2b0>)
 801564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015650:	f7ea fffa 	bl	8000648 <__aeabi_dmul>
 8015654:	a368      	add	r3, pc, #416	@ (adr r3, 80157f8 <_dtoa_r+0x2b8>)
 8015656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801565a:	f7ea fe3f 	bl	80002dc <__adddf3>
 801565e:	4604      	mov	r4, r0
 8015660:	4630      	mov	r0, r6
 8015662:	460d      	mov	r5, r1
 8015664:	f7ea ff86 	bl	8000574 <__aeabi_i2d>
 8015668:	a365      	add	r3, pc, #404	@ (adr r3, 8015800 <_dtoa_r+0x2c0>)
 801566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801566e:	f7ea ffeb 	bl	8000648 <__aeabi_dmul>
 8015672:	4602      	mov	r2, r0
 8015674:	460b      	mov	r3, r1
 8015676:	4620      	mov	r0, r4
 8015678:	4629      	mov	r1, r5
 801567a:	f7ea fe2f 	bl	80002dc <__adddf3>
 801567e:	4604      	mov	r4, r0
 8015680:	460d      	mov	r5, r1
 8015682:	f7eb fa91 	bl	8000ba8 <__aeabi_d2iz>
 8015686:	2200      	movs	r2, #0
 8015688:	4607      	mov	r7, r0
 801568a:	2300      	movs	r3, #0
 801568c:	4620      	mov	r0, r4
 801568e:	4629      	mov	r1, r5
 8015690:	f7eb fa4c 	bl	8000b2c <__aeabi_dcmplt>
 8015694:	b140      	cbz	r0, 80156a8 <_dtoa_r+0x168>
 8015696:	4638      	mov	r0, r7
 8015698:	f7ea ff6c 	bl	8000574 <__aeabi_i2d>
 801569c:	4622      	mov	r2, r4
 801569e:	462b      	mov	r3, r5
 80156a0:	f7eb fa3a 	bl	8000b18 <__aeabi_dcmpeq>
 80156a4:	b900      	cbnz	r0, 80156a8 <_dtoa_r+0x168>
 80156a6:	3f01      	subs	r7, #1
 80156a8:	2f16      	cmp	r7, #22
 80156aa:	d851      	bhi.n	8015750 <_dtoa_r+0x210>
 80156ac:	4b5b      	ldr	r3, [pc, #364]	@ (801581c <_dtoa_r+0x2dc>)
 80156ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80156b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80156ba:	f7eb fa37 	bl	8000b2c <__aeabi_dcmplt>
 80156be:	2800      	cmp	r0, #0
 80156c0:	d048      	beq.n	8015754 <_dtoa_r+0x214>
 80156c2:	3f01      	subs	r7, #1
 80156c4:	2300      	movs	r3, #0
 80156c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80156c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80156ca:	1b9b      	subs	r3, r3, r6
 80156cc:	1e5a      	subs	r2, r3, #1
 80156ce:	bf44      	itt	mi
 80156d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80156d4:	2300      	movmi	r3, #0
 80156d6:	9208      	str	r2, [sp, #32]
 80156d8:	bf54      	ite	pl
 80156da:	f04f 0800 	movpl.w	r8, #0
 80156de:	9308      	strmi	r3, [sp, #32]
 80156e0:	2f00      	cmp	r7, #0
 80156e2:	db39      	blt.n	8015758 <_dtoa_r+0x218>
 80156e4:	9b08      	ldr	r3, [sp, #32]
 80156e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80156e8:	443b      	add	r3, r7
 80156ea:	9308      	str	r3, [sp, #32]
 80156ec:	2300      	movs	r3, #0
 80156ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80156f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156f2:	2b09      	cmp	r3, #9
 80156f4:	d864      	bhi.n	80157c0 <_dtoa_r+0x280>
 80156f6:	2b05      	cmp	r3, #5
 80156f8:	bfc4      	itt	gt
 80156fa:	3b04      	subgt	r3, #4
 80156fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80156fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015700:	f1a3 0302 	sub.w	r3, r3, #2
 8015704:	bfcc      	ite	gt
 8015706:	2400      	movgt	r4, #0
 8015708:	2401      	movle	r4, #1
 801570a:	2b03      	cmp	r3, #3
 801570c:	d863      	bhi.n	80157d6 <_dtoa_r+0x296>
 801570e:	e8df f003 	tbb	[pc, r3]
 8015712:	372a      	.short	0x372a
 8015714:	5535      	.short	0x5535
 8015716:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801571a:	441e      	add	r6, r3
 801571c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8015720:	2b20      	cmp	r3, #32
 8015722:	bfc1      	itttt	gt
 8015724:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015728:	409f      	lslgt	r7, r3
 801572a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801572e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8015732:	bfd6      	itet	le
 8015734:	f1c3 0320 	rsble	r3, r3, #32
 8015738:	ea47 0003 	orrgt.w	r0, r7, r3
 801573c:	fa04 f003 	lslle.w	r0, r4, r3
 8015740:	f7ea ff08 	bl	8000554 <__aeabi_ui2d>
 8015744:	2201      	movs	r2, #1
 8015746:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801574a:	3e01      	subs	r6, #1
 801574c:	9214      	str	r2, [sp, #80]	@ 0x50
 801574e:	e777      	b.n	8015640 <_dtoa_r+0x100>
 8015750:	2301      	movs	r3, #1
 8015752:	e7b8      	b.n	80156c6 <_dtoa_r+0x186>
 8015754:	9012      	str	r0, [sp, #72]	@ 0x48
 8015756:	e7b7      	b.n	80156c8 <_dtoa_r+0x188>
 8015758:	427b      	negs	r3, r7
 801575a:	930a      	str	r3, [sp, #40]	@ 0x28
 801575c:	2300      	movs	r3, #0
 801575e:	eba8 0807 	sub.w	r8, r8, r7
 8015762:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015764:	e7c4      	b.n	80156f0 <_dtoa_r+0x1b0>
 8015766:	2300      	movs	r3, #0
 8015768:	930b      	str	r3, [sp, #44]	@ 0x2c
 801576a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801576c:	2b00      	cmp	r3, #0
 801576e:	dc35      	bgt.n	80157dc <_dtoa_r+0x29c>
 8015770:	2301      	movs	r3, #1
 8015772:	9300      	str	r3, [sp, #0]
 8015774:	9307      	str	r3, [sp, #28]
 8015776:	461a      	mov	r2, r3
 8015778:	920e      	str	r2, [sp, #56]	@ 0x38
 801577a:	e00b      	b.n	8015794 <_dtoa_r+0x254>
 801577c:	2301      	movs	r3, #1
 801577e:	e7f3      	b.n	8015768 <_dtoa_r+0x228>
 8015780:	2300      	movs	r3, #0
 8015782:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015784:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015786:	18fb      	adds	r3, r7, r3
 8015788:	9300      	str	r3, [sp, #0]
 801578a:	3301      	adds	r3, #1
 801578c:	2b01      	cmp	r3, #1
 801578e:	9307      	str	r3, [sp, #28]
 8015790:	bfb8      	it	lt
 8015792:	2301      	movlt	r3, #1
 8015794:	f8db 001c 	ldr.w	r0, [fp, #28]
 8015798:	2100      	movs	r1, #0
 801579a:	2204      	movs	r2, #4
 801579c:	f102 0514 	add.w	r5, r2, #20
 80157a0:	429d      	cmp	r5, r3
 80157a2:	d91f      	bls.n	80157e4 <_dtoa_r+0x2a4>
 80157a4:	6041      	str	r1, [r0, #4]
 80157a6:	4658      	mov	r0, fp
 80157a8:	f000 fd8e 	bl	80162c8 <_Balloc>
 80157ac:	4682      	mov	sl, r0
 80157ae:	2800      	cmp	r0, #0
 80157b0:	d13c      	bne.n	801582c <_dtoa_r+0x2ec>
 80157b2:	4b1b      	ldr	r3, [pc, #108]	@ (8015820 <_dtoa_r+0x2e0>)
 80157b4:	4602      	mov	r2, r0
 80157b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80157ba:	e6d8      	b.n	801556e <_dtoa_r+0x2e>
 80157bc:	2301      	movs	r3, #1
 80157be:	e7e0      	b.n	8015782 <_dtoa_r+0x242>
 80157c0:	2401      	movs	r4, #1
 80157c2:	2300      	movs	r3, #0
 80157c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80157c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80157c8:	f04f 33ff 	mov.w	r3, #4294967295
 80157cc:	9300      	str	r3, [sp, #0]
 80157ce:	9307      	str	r3, [sp, #28]
 80157d0:	2200      	movs	r2, #0
 80157d2:	2312      	movs	r3, #18
 80157d4:	e7d0      	b.n	8015778 <_dtoa_r+0x238>
 80157d6:	2301      	movs	r3, #1
 80157d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80157da:	e7f5      	b.n	80157c8 <_dtoa_r+0x288>
 80157dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80157de:	9300      	str	r3, [sp, #0]
 80157e0:	9307      	str	r3, [sp, #28]
 80157e2:	e7d7      	b.n	8015794 <_dtoa_r+0x254>
 80157e4:	3101      	adds	r1, #1
 80157e6:	0052      	lsls	r2, r2, #1
 80157e8:	e7d8      	b.n	801579c <_dtoa_r+0x25c>
 80157ea:	bf00      	nop
 80157ec:	f3af 8000 	nop.w
 80157f0:	636f4361 	.word	0x636f4361
 80157f4:	3fd287a7 	.word	0x3fd287a7
 80157f8:	8b60c8b3 	.word	0x8b60c8b3
 80157fc:	3fc68a28 	.word	0x3fc68a28
 8015800:	509f79fb 	.word	0x509f79fb
 8015804:	3fd34413 	.word	0x3fd34413
 8015808:	0802783e 	.word	0x0802783e
 801580c:	08027855 	.word	0x08027855
 8015810:	7ff00000 	.word	0x7ff00000
 8015814:	08027809 	.word	0x08027809
 8015818:	3ff80000 	.word	0x3ff80000
 801581c:	08027950 	.word	0x08027950
 8015820:	080278ad 	.word	0x080278ad
 8015824:	0802783a 	.word	0x0802783a
 8015828:	08027808 	.word	0x08027808
 801582c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015830:	6018      	str	r0, [r3, #0]
 8015832:	9b07      	ldr	r3, [sp, #28]
 8015834:	2b0e      	cmp	r3, #14
 8015836:	f200 80a4 	bhi.w	8015982 <_dtoa_r+0x442>
 801583a:	2c00      	cmp	r4, #0
 801583c:	f000 80a1 	beq.w	8015982 <_dtoa_r+0x442>
 8015840:	2f00      	cmp	r7, #0
 8015842:	dd33      	ble.n	80158ac <_dtoa_r+0x36c>
 8015844:	4bad      	ldr	r3, [pc, #692]	@ (8015afc <_dtoa_r+0x5bc>)
 8015846:	f007 020f 	and.w	r2, r7, #15
 801584a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801584e:	ed93 7b00 	vldr	d7, [r3]
 8015852:	05f8      	lsls	r0, r7, #23
 8015854:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015858:	ea4f 1427 	mov.w	r4, r7, asr #4
 801585c:	d516      	bpl.n	801588c <_dtoa_r+0x34c>
 801585e:	4ba8      	ldr	r3, [pc, #672]	@ (8015b00 <_dtoa_r+0x5c0>)
 8015860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015864:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015868:	f7eb f818 	bl	800089c <__aeabi_ddiv>
 801586c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015870:	f004 040f 	and.w	r4, r4, #15
 8015874:	2603      	movs	r6, #3
 8015876:	4da2      	ldr	r5, [pc, #648]	@ (8015b00 <_dtoa_r+0x5c0>)
 8015878:	b954      	cbnz	r4, 8015890 <_dtoa_r+0x350>
 801587a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801587e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015882:	f7eb f80b 	bl	800089c <__aeabi_ddiv>
 8015886:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801588a:	e028      	b.n	80158de <_dtoa_r+0x39e>
 801588c:	2602      	movs	r6, #2
 801588e:	e7f2      	b.n	8015876 <_dtoa_r+0x336>
 8015890:	07e1      	lsls	r1, r4, #31
 8015892:	d508      	bpl.n	80158a6 <_dtoa_r+0x366>
 8015894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015898:	e9d5 2300 	ldrd	r2, r3, [r5]
 801589c:	f7ea fed4 	bl	8000648 <__aeabi_dmul>
 80158a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80158a4:	3601      	adds	r6, #1
 80158a6:	1064      	asrs	r4, r4, #1
 80158a8:	3508      	adds	r5, #8
 80158aa:	e7e5      	b.n	8015878 <_dtoa_r+0x338>
 80158ac:	f000 80d2 	beq.w	8015a54 <_dtoa_r+0x514>
 80158b0:	427c      	negs	r4, r7
 80158b2:	4b92      	ldr	r3, [pc, #584]	@ (8015afc <_dtoa_r+0x5bc>)
 80158b4:	4d92      	ldr	r5, [pc, #584]	@ (8015b00 <_dtoa_r+0x5c0>)
 80158b6:	f004 020f 	and.w	r2, r4, #15
 80158ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80158be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80158c6:	f7ea febf 	bl	8000648 <__aeabi_dmul>
 80158ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80158ce:	1124      	asrs	r4, r4, #4
 80158d0:	2300      	movs	r3, #0
 80158d2:	2602      	movs	r6, #2
 80158d4:	2c00      	cmp	r4, #0
 80158d6:	f040 80b2 	bne.w	8015a3e <_dtoa_r+0x4fe>
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d1d3      	bne.n	8015886 <_dtoa_r+0x346>
 80158de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80158e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	f000 80b7 	beq.w	8015a58 <_dtoa_r+0x518>
 80158ea:	4b86      	ldr	r3, [pc, #536]	@ (8015b04 <_dtoa_r+0x5c4>)
 80158ec:	2200      	movs	r2, #0
 80158ee:	4620      	mov	r0, r4
 80158f0:	4629      	mov	r1, r5
 80158f2:	f7eb f91b 	bl	8000b2c <__aeabi_dcmplt>
 80158f6:	2800      	cmp	r0, #0
 80158f8:	f000 80ae 	beq.w	8015a58 <_dtoa_r+0x518>
 80158fc:	9b07      	ldr	r3, [sp, #28]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	f000 80aa 	beq.w	8015a58 <_dtoa_r+0x518>
 8015904:	9b00      	ldr	r3, [sp, #0]
 8015906:	2b00      	cmp	r3, #0
 8015908:	dd37      	ble.n	801597a <_dtoa_r+0x43a>
 801590a:	1e7b      	subs	r3, r7, #1
 801590c:	9304      	str	r3, [sp, #16]
 801590e:	4620      	mov	r0, r4
 8015910:	4b7d      	ldr	r3, [pc, #500]	@ (8015b08 <_dtoa_r+0x5c8>)
 8015912:	2200      	movs	r2, #0
 8015914:	4629      	mov	r1, r5
 8015916:	f7ea fe97 	bl	8000648 <__aeabi_dmul>
 801591a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801591e:	9c00      	ldr	r4, [sp, #0]
 8015920:	3601      	adds	r6, #1
 8015922:	4630      	mov	r0, r6
 8015924:	f7ea fe26 	bl	8000574 <__aeabi_i2d>
 8015928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801592c:	f7ea fe8c 	bl	8000648 <__aeabi_dmul>
 8015930:	4b76      	ldr	r3, [pc, #472]	@ (8015b0c <_dtoa_r+0x5cc>)
 8015932:	2200      	movs	r2, #0
 8015934:	f7ea fcd2 	bl	80002dc <__adddf3>
 8015938:	4605      	mov	r5, r0
 801593a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801593e:	2c00      	cmp	r4, #0
 8015940:	f040 808d 	bne.w	8015a5e <_dtoa_r+0x51e>
 8015944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015948:	4b71      	ldr	r3, [pc, #452]	@ (8015b10 <_dtoa_r+0x5d0>)
 801594a:	2200      	movs	r2, #0
 801594c:	f7ea fcc4 	bl	80002d8 <__aeabi_dsub>
 8015950:	4602      	mov	r2, r0
 8015952:	460b      	mov	r3, r1
 8015954:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015958:	462a      	mov	r2, r5
 801595a:	4633      	mov	r3, r6
 801595c:	f7eb f904 	bl	8000b68 <__aeabi_dcmpgt>
 8015960:	2800      	cmp	r0, #0
 8015962:	f040 828b 	bne.w	8015e7c <_dtoa_r+0x93c>
 8015966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801596a:	462a      	mov	r2, r5
 801596c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015970:	f7eb f8dc 	bl	8000b2c <__aeabi_dcmplt>
 8015974:	2800      	cmp	r0, #0
 8015976:	f040 8128 	bne.w	8015bca <_dtoa_r+0x68a>
 801597a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801597e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015982:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015984:	2b00      	cmp	r3, #0
 8015986:	f2c0 815a 	blt.w	8015c3e <_dtoa_r+0x6fe>
 801598a:	2f0e      	cmp	r7, #14
 801598c:	f300 8157 	bgt.w	8015c3e <_dtoa_r+0x6fe>
 8015990:	4b5a      	ldr	r3, [pc, #360]	@ (8015afc <_dtoa_r+0x5bc>)
 8015992:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015996:	ed93 7b00 	vldr	d7, [r3]
 801599a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801599c:	2b00      	cmp	r3, #0
 801599e:	ed8d 7b00 	vstr	d7, [sp]
 80159a2:	da03      	bge.n	80159ac <_dtoa_r+0x46c>
 80159a4:	9b07      	ldr	r3, [sp, #28]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	f340 8101 	ble.w	8015bae <_dtoa_r+0x66e>
 80159ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80159b0:	4656      	mov	r6, sl
 80159b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80159b6:	4620      	mov	r0, r4
 80159b8:	4629      	mov	r1, r5
 80159ba:	f7ea ff6f 	bl	800089c <__aeabi_ddiv>
 80159be:	f7eb f8f3 	bl	8000ba8 <__aeabi_d2iz>
 80159c2:	4680      	mov	r8, r0
 80159c4:	f7ea fdd6 	bl	8000574 <__aeabi_i2d>
 80159c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80159cc:	f7ea fe3c 	bl	8000648 <__aeabi_dmul>
 80159d0:	4602      	mov	r2, r0
 80159d2:	460b      	mov	r3, r1
 80159d4:	4620      	mov	r0, r4
 80159d6:	4629      	mov	r1, r5
 80159d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80159dc:	f7ea fc7c 	bl	80002d8 <__aeabi_dsub>
 80159e0:	f806 4b01 	strb.w	r4, [r6], #1
 80159e4:	9d07      	ldr	r5, [sp, #28]
 80159e6:	eba6 040a 	sub.w	r4, r6, sl
 80159ea:	42a5      	cmp	r5, r4
 80159ec:	4602      	mov	r2, r0
 80159ee:	460b      	mov	r3, r1
 80159f0:	f040 8117 	bne.w	8015c22 <_dtoa_r+0x6e2>
 80159f4:	f7ea fc72 	bl	80002dc <__adddf3>
 80159f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80159fc:	4604      	mov	r4, r0
 80159fe:	460d      	mov	r5, r1
 8015a00:	f7eb f8b2 	bl	8000b68 <__aeabi_dcmpgt>
 8015a04:	2800      	cmp	r0, #0
 8015a06:	f040 80f9 	bne.w	8015bfc <_dtoa_r+0x6bc>
 8015a0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a0e:	4620      	mov	r0, r4
 8015a10:	4629      	mov	r1, r5
 8015a12:	f7eb f881 	bl	8000b18 <__aeabi_dcmpeq>
 8015a16:	b118      	cbz	r0, 8015a20 <_dtoa_r+0x4e0>
 8015a18:	f018 0f01 	tst.w	r8, #1
 8015a1c:	f040 80ee 	bne.w	8015bfc <_dtoa_r+0x6bc>
 8015a20:	4649      	mov	r1, r9
 8015a22:	4658      	mov	r0, fp
 8015a24:	f000 fc90 	bl	8016348 <_Bfree>
 8015a28:	2300      	movs	r3, #0
 8015a2a:	7033      	strb	r3, [r6, #0]
 8015a2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015a2e:	3701      	adds	r7, #1
 8015a30:	601f      	str	r7, [r3, #0]
 8015a32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	f000 831d 	beq.w	8016074 <_dtoa_r+0xb34>
 8015a3a:	601e      	str	r6, [r3, #0]
 8015a3c:	e31a      	b.n	8016074 <_dtoa_r+0xb34>
 8015a3e:	07e2      	lsls	r2, r4, #31
 8015a40:	d505      	bpl.n	8015a4e <_dtoa_r+0x50e>
 8015a42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015a46:	f7ea fdff 	bl	8000648 <__aeabi_dmul>
 8015a4a:	3601      	adds	r6, #1
 8015a4c:	2301      	movs	r3, #1
 8015a4e:	1064      	asrs	r4, r4, #1
 8015a50:	3508      	adds	r5, #8
 8015a52:	e73f      	b.n	80158d4 <_dtoa_r+0x394>
 8015a54:	2602      	movs	r6, #2
 8015a56:	e742      	b.n	80158de <_dtoa_r+0x39e>
 8015a58:	9c07      	ldr	r4, [sp, #28]
 8015a5a:	9704      	str	r7, [sp, #16]
 8015a5c:	e761      	b.n	8015922 <_dtoa_r+0x3e2>
 8015a5e:	4b27      	ldr	r3, [pc, #156]	@ (8015afc <_dtoa_r+0x5bc>)
 8015a60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015a62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015a66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015a6a:	4454      	add	r4, sl
 8015a6c:	2900      	cmp	r1, #0
 8015a6e:	d053      	beq.n	8015b18 <_dtoa_r+0x5d8>
 8015a70:	4928      	ldr	r1, [pc, #160]	@ (8015b14 <_dtoa_r+0x5d4>)
 8015a72:	2000      	movs	r0, #0
 8015a74:	f7ea ff12 	bl	800089c <__aeabi_ddiv>
 8015a78:	4633      	mov	r3, r6
 8015a7a:	462a      	mov	r2, r5
 8015a7c:	f7ea fc2c 	bl	80002d8 <__aeabi_dsub>
 8015a80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015a84:	4656      	mov	r6, sl
 8015a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015a8a:	f7eb f88d 	bl	8000ba8 <__aeabi_d2iz>
 8015a8e:	4605      	mov	r5, r0
 8015a90:	f7ea fd70 	bl	8000574 <__aeabi_i2d>
 8015a94:	4602      	mov	r2, r0
 8015a96:	460b      	mov	r3, r1
 8015a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015a9c:	f7ea fc1c 	bl	80002d8 <__aeabi_dsub>
 8015aa0:	3530      	adds	r5, #48	@ 0x30
 8015aa2:	4602      	mov	r2, r0
 8015aa4:	460b      	mov	r3, r1
 8015aa6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015aaa:	f806 5b01 	strb.w	r5, [r6], #1
 8015aae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015ab2:	f7eb f83b 	bl	8000b2c <__aeabi_dcmplt>
 8015ab6:	2800      	cmp	r0, #0
 8015ab8:	d171      	bne.n	8015b9e <_dtoa_r+0x65e>
 8015aba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015abe:	4911      	ldr	r1, [pc, #68]	@ (8015b04 <_dtoa_r+0x5c4>)
 8015ac0:	2000      	movs	r0, #0
 8015ac2:	f7ea fc09 	bl	80002d8 <__aeabi_dsub>
 8015ac6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015aca:	f7eb f82f 	bl	8000b2c <__aeabi_dcmplt>
 8015ace:	2800      	cmp	r0, #0
 8015ad0:	f040 8095 	bne.w	8015bfe <_dtoa_r+0x6be>
 8015ad4:	42a6      	cmp	r6, r4
 8015ad6:	f43f af50 	beq.w	801597a <_dtoa_r+0x43a>
 8015ada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015ade:	4b0a      	ldr	r3, [pc, #40]	@ (8015b08 <_dtoa_r+0x5c8>)
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	f7ea fdb1 	bl	8000648 <__aeabi_dmul>
 8015ae6:	4b08      	ldr	r3, [pc, #32]	@ (8015b08 <_dtoa_r+0x5c8>)
 8015ae8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015aec:	2200      	movs	r2, #0
 8015aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015af2:	f7ea fda9 	bl	8000648 <__aeabi_dmul>
 8015af6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015afa:	e7c4      	b.n	8015a86 <_dtoa_r+0x546>
 8015afc:	08027950 	.word	0x08027950
 8015b00:	08027928 	.word	0x08027928
 8015b04:	3ff00000 	.word	0x3ff00000
 8015b08:	40240000 	.word	0x40240000
 8015b0c:	401c0000 	.word	0x401c0000
 8015b10:	40140000 	.word	0x40140000
 8015b14:	3fe00000 	.word	0x3fe00000
 8015b18:	4631      	mov	r1, r6
 8015b1a:	4628      	mov	r0, r5
 8015b1c:	f7ea fd94 	bl	8000648 <__aeabi_dmul>
 8015b20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015b24:	9415      	str	r4, [sp, #84]	@ 0x54
 8015b26:	4656      	mov	r6, sl
 8015b28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b2c:	f7eb f83c 	bl	8000ba8 <__aeabi_d2iz>
 8015b30:	4605      	mov	r5, r0
 8015b32:	f7ea fd1f 	bl	8000574 <__aeabi_i2d>
 8015b36:	4602      	mov	r2, r0
 8015b38:	460b      	mov	r3, r1
 8015b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b3e:	f7ea fbcb 	bl	80002d8 <__aeabi_dsub>
 8015b42:	3530      	adds	r5, #48	@ 0x30
 8015b44:	f806 5b01 	strb.w	r5, [r6], #1
 8015b48:	4602      	mov	r2, r0
 8015b4a:	460b      	mov	r3, r1
 8015b4c:	42a6      	cmp	r6, r4
 8015b4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015b52:	f04f 0200 	mov.w	r2, #0
 8015b56:	d124      	bne.n	8015ba2 <_dtoa_r+0x662>
 8015b58:	4bac      	ldr	r3, [pc, #688]	@ (8015e0c <_dtoa_r+0x8cc>)
 8015b5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015b5e:	f7ea fbbd 	bl	80002dc <__adddf3>
 8015b62:	4602      	mov	r2, r0
 8015b64:	460b      	mov	r3, r1
 8015b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b6a:	f7ea fffd 	bl	8000b68 <__aeabi_dcmpgt>
 8015b6e:	2800      	cmp	r0, #0
 8015b70:	d145      	bne.n	8015bfe <_dtoa_r+0x6be>
 8015b72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015b76:	49a5      	ldr	r1, [pc, #660]	@ (8015e0c <_dtoa_r+0x8cc>)
 8015b78:	2000      	movs	r0, #0
 8015b7a:	f7ea fbad 	bl	80002d8 <__aeabi_dsub>
 8015b7e:	4602      	mov	r2, r0
 8015b80:	460b      	mov	r3, r1
 8015b82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b86:	f7ea ffd1 	bl	8000b2c <__aeabi_dcmplt>
 8015b8a:	2800      	cmp	r0, #0
 8015b8c:	f43f aef5 	beq.w	801597a <_dtoa_r+0x43a>
 8015b90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8015b92:	1e73      	subs	r3, r6, #1
 8015b94:	9315      	str	r3, [sp, #84]	@ 0x54
 8015b96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015b9a:	2b30      	cmp	r3, #48	@ 0x30
 8015b9c:	d0f8      	beq.n	8015b90 <_dtoa_r+0x650>
 8015b9e:	9f04      	ldr	r7, [sp, #16]
 8015ba0:	e73e      	b.n	8015a20 <_dtoa_r+0x4e0>
 8015ba2:	4b9b      	ldr	r3, [pc, #620]	@ (8015e10 <_dtoa_r+0x8d0>)
 8015ba4:	f7ea fd50 	bl	8000648 <__aeabi_dmul>
 8015ba8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015bac:	e7bc      	b.n	8015b28 <_dtoa_r+0x5e8>
 8015bae:	d10c      	bne.n	8015bca <_dtoa_r+0x68a>
 8015bb0:	4b98      	ldr	r3, [pc, #608]	@ (8015e14 <_dtoa_r+0x8d4>)
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015bb8:	f7ea fd46 	bl	8000648 <__aeabi_dmul>
 8015bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015bc0:	f7ea ffc8 	bl	8000b54 <__aeabi_dcmpge>
 8015bc4:	2800      	cmp	r0, #0
 8015bc6:	f000 8157 	beq.w	8015e78 <_dtoa_r+0x938>
 8015bca:	2400      	movs	r4, #0
 8015bcc:	4625      	mov	r5, r4
 8015bce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015bd0:	43db      	mvns	r3, r3
 8015bd2:	9304      	str	r3, [sp, #16]
 8015bd4:	4656      	mov	r6, sl
 8015bd6:	2700      	movs	r7, #0
 8015bd8:	4621      	mov	r1, r4
 8015bda:	4658      	mov	r0, fp
 8015bdc:	f000 fbb4 	bl	8016348 <_Bfree>
 8015be0:	2d00      	cmp	r5, #0
 8015be2:	d0dc      	beq.n	8015b9e <_dtoa_r+0x65e>
 8015be4:	b12f      	cbz	r7, 8015bf2 <_dtoa_r+0x6b2>
 8015be6:	42af      	cmp	r7, r5
 8015be8:	d003      	beq.n	8015bf2 <_dtoa_r+0x6b2>
 8015bea:	4639      	mov	r1, r7
 8015bec:	4658      	mov	r0, fp
 8015bee:	f000 fbab 	bl	8016348 <_Bfree>
 8015bf2:	4629      	mov	r1, r5
 8015bf4:	4658      	mov	r0, fp
 8015bf6:	f000 fba7 	bl	8016348 <_Bfree>
 8015bfa:	e7d0      	b.n	8015b9e <_dtoa_r+0x65e>
 8015bfc:	9704      	str	r7, [sp, #16]
 8015bfe:	4633      	mov	r3, r6
 8015c00:	461e      	mov	r6, r3
 8015c02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015c06:	2a39      	cmp	r2, #57	@ 0x39
 8015c08:	d107      	bne.n	8015c1a <_dtoa_r+0x6da>
 8015c0a:	459a      	cmp	sl, r3
 8015c0c:	d1f8      	bne.n	8015c00 <_dtoa_r+0x6c0>
 8015c0e:	9a04      	ldr	r2, [sp, #16]
 8015c10:	3201      	adds	r2, #1
 8015c12:	9204      	str	r2, [sp, #16]
 8015c14:	2230      	movs	r2, #48	@ 0x30
 8015c16:	f88a 2000 	strb.w	r2, [sl]
 8015c1a:	781a      	ldrb	r2, [r3, #0]
 8015c1c:	3201      	adds	r2, #1
 8015c1e:	701a      	strb	r2, [r3, #0]
 8015c20:	e7bd      	b.n	8015b9e <_dtoa_r+0x65e>
 8015c22:	4b7b      	ldr	r3, [pc, #492]	@ (8015e10 <_dtoa_r+0x8d0>)
 8015c24:	2200      	movs	r2, #0
 8015c26:	f7ea fd0f 	bl	8000648 <__aeabi_dmul>
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	2300      	movs	r3, #0
 8015c2e:	4604      	mov	r4, r0
 8015c30:	460d      	mov	r5, r1
 8015c32:	f7ea ff71 	bl	8000b18 <__aeabi_dcmpeq>
 8015c36:	2800      	cmp	r0, #0
 8015c38:	f43f aebb 	beq.w	80159b2 <_dtoa_r+0x472>
 8015c3c:	e6f0      	b.n	8015a20 <_dtoa_r+0x4e0>
 8015c3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015c40:	2a00      	cmp	r2, #0
 8015c42:	f000 80db 	beq.w	8015dfc <_dtoa_r+0x8bc>
 8015c46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015c48:	2a01      	cmp	r2, #1
 8015c4a:	f300 80bf 	bgt.w	8015dcc <_dtoa_r+0x88c>
 8015c4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015c50:	2a00      	cmp	r2, #0
 8015c52:	f000 80b7 	beq.w	8015dc4 <_dtoa_r+0x884>
 8015c56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015c5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015c5c:	4646      	mov	r6, r8
 8015c5e:	9a08      	ldr	r2, [sp, #32]
 8015c60:	2101      	movs	r1, #1
 8015c62:	441a      	add	r2, r3
 8015c64:	4658      	mov	r0, fp
 8015c66:	4498      	add	r8, r3
 8015c68:	9208      	str	r2, [sp, #32]
 8015c6a:	f000 fc6b 	bl	8016544 <__i2b>
 8015c6e:	4605      	mov	r5, r0
 8015c70:	b15e      	cbz	r6, 8015c8a <_dtoa_r+0x74a>
 8015c72:	9b08      	ldr	r3, [sp, #32]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	dd08      	ble.n	8015c8a <_dtoa_r+0x74a>
 8015c78:	42b3      	cmp	r3, r6
 8015c7a:	9a08      	ldr	r2, [sp, #32]
 8015c7c:	bfa8      	it	ge
 8015c7e:	4633      	movge	r3, r6
 8015c80:	eba8 0803 	sub.w	r8, r8, r3
 8015c84:	1af6      	subs	r6, r6, r3
 8015c86:	1ad3      	subs	r3, r2, r3
 8015c88:	9308      	str	r3, [sp, #32]
 8015c8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015c8c:	b1f3      	cbz	r3, 8015ccc <_dtoa_r+0x78c>
 8015c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	f000 80b7 	beq.w	8015e04 <_dtoa_r+0x8c4>
 8015c96:	b18c      	cbz	r4, 8015cbc <_dtoa_r+0x77c>
 8015c98:	4629      	mov	r1, r5
 8015c9a:	4622      	mov	r2, r4
 8015c9c:	4658      	mov	r0, fp
 8015c9e:	f000 fd11 	bl	80166c4 <__pow5mult>
 8015ca2:	464a      	mov	r2, r9
 8015ca4:	4601      	mov	r1, r0
 8015ca6:	4605      	mov	r5, r0
 8015ca8:	4658      	mov	r0, fp
 8015caa:	f000 fc61 	bl	8016570 <__multiply>
 8015cae:	4649      	mov	r1, r9
 8015cb0:	9004      	str	r0, [sp, #16]
 8015cb2:	4658      	mov	r0, fp
 8015cb4:	f000 fb48 	bl	8016348 <_Bfree>
 8015cb8:	9b04      	ldr	r3, [sp, #16]
 8015cba:	4699      	mov	r9, r3
 8015cbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015cbe:	1b1a      	subs	r2, r3, r4
 8015cc0:	d004      	beq.n	8015ccc <_dtoa_r+0x78c>
 8015cc2:	4649      	mov	r1, r9
 8015cc4:	4658      	mov	r0, fp
 8015cc6:	f000 fcfd 	bl	80166c4 <__pow5mult>
 8015cca:	4681      	mov	r9, r0
 8015ccc:	2101      	movs	r1, #1
 8015cce:	4658      	mov	r0, fp
 8015cd0:	f000 fc38 	bl	8016544 <__i2b>
 8015cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015cd6:	4604      	mov	r4, r0
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	f000 81cf 	beq.w	801607c <_dtoa_r+0xb3c>
 8015cde:	461a      	mov	r2, r3
 8015ce0:	4601      	mov	r1, r0
 8015ce2:	4658      	mov	r0, fp
 8015ce4:	f000 fcee 	bl	80166c4 <__pow5mult>
 8015ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015cea:	2b01      	cmp	r3, #1
 8015cec:	4604      	mov	r4, r0
 8015cee:	f300 8095 	bgt.w	8015e1c <_dtoa_r+0x8dc>
 8015cf2:	9b02      	ldr	r3, [sp, #8]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	f040 8087 	bne.w	8015e08 <_dtoa_r+0x8c8>
 8015cfa:	9b03      	ldr	r3, [sp, #12]
 8015cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	f040 8089 	bne.w	8015e18 <_dtoa_r+0x8d8>
 8015d06:	9b03      	ldr	r3, [sp, #12]
 8015d08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015d0c:	0d1b      	lsrs	r3, r3, #20
 8015d0e:	051b      	lsls	r3, r3, #20
 8015d10:	b12b      	cbz	r3, 8015d1e <_dtoa_r+0x7de>
 8015d12:	9b08      	ldr	r3, [sp, #32]
 8015d14:	3301      	adds	r3, #1
 8015d16:	9308      	str	r3, [sp, #32]
 8015d18:	f108 0801 	add.w	r8, r8, #1
 8015d1c:	2301      	movs	r3, #1
 8015d1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015d20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	f000 81b0 	beq.w	8016088 <_dtoa_r+0xb48>
 8015d28:	6923      	ldr	r3, [r4, #16]
 8015d2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015d2e:	6918      	ldr	r0, [r3, #16]
 8015d30:	f000 fbbc 	bl	80164ac <__hi0bits>
 8015d34:	f1c0 0020 	rsb	r0, r0, #32
 8015d38:	9b08      	ldr	r3, [sp, #32]
 8015d3a:	4418      	add	r0, r3
 8015d3c:	f010 001f 	ands.w	r0, r0, #31
 8015d40:	d077      	beq.n	8015e32 <_dtoa_r+0x8f2>
 8015d42:	f1c0 0320 	rsb	r3, r0, #32
 8015d46:	2b04      	cmp	r3, #4
 8015d48:	dd6b      	ble.n	8015e22 <_dtoa_r+0x8e2>
 8015d4a:	9b08      	ldr	r3, [sp, #32]
 8015d4c:	f1c0 001c 	rsb	r0, r0, #28
 8015d50:	4403      	add	r3, r0
 8015d52:	4480      	add	r8, r0
 8015d54:	4406      	add	r6, r0
 8015d56:	9308      	str	r3, [sp, #32]
 8015d58:	f1b8 0f00 	cmp.w	r8, #0
 8015d5c:	dd05      	ble.n	8015d6a <_dtoa_r+0x82a>
 8015d5e:	4649      	mov	r1, r9
 8015d60:	4642      	mov	r2, r8
 8015d62:	4658      	mov	r0, fp
 8015d64:	f000 fd08 	bl	8016778 <__lshift>
 8015d68:	4681      	mov	r9, r0
 8015d6a:	9b08      	ldr	r3, [sp, #32]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	dd05      	ble.n	8015d7c <_dtoa_r+0x83c>
 8015d70:	4621      	mov	r1, r4
 8015d72:	461a      	mov	r2, r3
 8015d74:	4658      	mov	r0, fp
 8015d76:	f000 fcff 	bl	8016778 <__lshift>
 8015d7a:	4604      	mov	r4, r0
 8015d7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d059      	beq.n	8015e36 <_dtoa_r+0x8f6>
 8015d82:	4621      	mov	r1, r4
 8015d84:	4648      	mov	r0, r9
 8015d86:	f000 fd63 	bl	8016850 <__mcmp>
 8015d8a:	2800      	cmp	r0, #0
 8015d8c:	da53      	bge.n	8015e36 <_dtoa_r+0x8f6>
 8015d8e:	1e7b      	subs	r3, r7, #1
 8015d90:	9304      	str	r3, [sp, #16]
 8015d92:	4649      	mov	r1, r9
 8015d94:	2300      	movs	r3, #0
 8015d96:	220a      	movs	r2, #10
 8015d98:	4658      	mov	r0, fp
 8015d9a:	f000 faf7 	bl	801638c <__multadd>
 8015d9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015da0:	4681      	mov	r9, r0
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	f000 8172 	beq.w	801608c <_dtoa_r+0xb4c>
 8015da8:	2300      	movs	r3, #0
 8015daa:	4629      	mov	r1, r5
 8015dac:	220a      	movs	r2, #10
 8015dae:	4658      	mov	r0, fp
 8015db0:	f000 faec 	bl	801638c <__multadd>
 8015db4:	9b00      	ldr	r3, [sp, #0]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	4605      	mov	r5, r0
 8015dba:	dc67      	bgt.n	8015e8c <_dtoa_r+0x94c>
 8015dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015dbe:	2b02      	cmp	r3, #2
 8015dc0:	dc41      	bgt.n	8015e46 <_dtoa_r+0x906>
 8015dc2:	e063      	b.n	8015e8c <_dtoa_r+0x94c>
 8015dc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015dc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015dca:	e746      	b.n	8015c5a <_dtoa_r+0x71a>
 8015dcc:	9b07      	ldr	r3, [sp, #28]
 8015dce:	1e5c      	subs	r4, r3, #1
 8015dd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015dd2:	42a3      	cmp	r3, r4
 8015dd4:	bfbf      	itttt	lt
 8015dd6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015dd8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8015dda:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8015ddc:	1ae3      	sublt	r3, r4, r3
 8015dde:	bfb4      	ite	lt
 8015de0:	18d2      	addlt	r2, r2, r3
 8015de2:	1b1c      	subge	r4, r3, r4
 8015de4:	9b07      	ldr	r3, [sp, #28]
 8015de6:	bfbc      	itt	lt
 8015de8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8015dea:	2400      	movlt	r4, #0
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	bfb5      	itete	lt
 8015df0:	eba8 0603 	sublt.w	r6, r8, r3
 8015df4:	9b07      	ldrge	r3, [sp, #28]
 8015df6:	2300      	movlt	r3, #0
 8015df8:	4646      	movge	r6, r8
 8015dfa:	e730      	b.n	8015c5e <_dtoa_r+0x71e>
 8015dfc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015dfe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015e00:	4646      	mov	r6, r8
 8015e02:	e735      	b.n	8015c70 <_dtoa_r+0x730>
 8015e04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015e06:	e75c      	b.n	8015cc2 <_dtoa_r+0x782>
 8015e08:	2300      	movs	r3, #0
 8015e0a:	e788      	b.n	8015d1e <_dtoa_r+0x7de>
 8015e0c:	3fe00000 	.word	0x3fe00000
 8015e10:	40240000 	.word	0x40240000
 8015e14:	40140000 	.word	0x40140000
 8015e18:	9b02      	ldr	r3, [sp, #8]
 8015e1a:	e780      	b.n	8015d1e <_dtoa_r+0x7de>
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015e20:	e782      	b.n	8015d28 <_dtoa_r+0x7e8>
 8015e22:	d099      	beq.n	8015d58 <_dtoa_r+0x818>
 8015e24:	9a08      	ldr	r2, [sp, #32]
 8015e26:	331c      	adds	r3, #28
 8015e28:	441a      	add	r2, r3
 8015e2a:	4498      	add	r8, r3
 8015e2c:	441e      	add	r6, r3
 8015e2e:	9208      	str	r2, [sp, #32]
 8015e30:	e792      	b.n	8015d58 <_dtoa_r+0x818>
 8015e32:	4603      	mov	r3, r0
 8015e34:	e7f6      	b.n	8015e24 <_dtoa_r+0x8e4>
 8015e36:	9b07      	ldr	r3, [sp, #28]
 8015e38:	9704      	str	r7, [sp, #16]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	dc20      	bgt.n	8015e80 <_dtoa_r+0x940>
 8015e3e:	9300      	str	r3, [sp, #0]
 8015e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e42:	2b02      	cmp	r3, #2
 8015e44:	dd1e      	ble.n	8015e84 <_dtoa_r+0x944>
 8015e46:	9b00      	ldr	r3, [sp, #0]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	f47f aec0 	bne.w	8015bce <_dtoa_r+0x68e>
 8015e4e:	4621      	mov	r1, r4
 8015e50:	2205      	movs	r2, #5
 8015e52:	4658      	mov	r0, fp
 8015e54:	f000 fa9a 	bl	801638c <__multadd>
 8015e58:	4601      	mov	r1, r0
 8015e5a:	4604      	mov	r4, r0
 8015e5c:	4648      	mov	r0, r9
 8015e5e:	f000 fcf7 	bl	8016850 <__mcmp>
 8015e62:	2800      	cmp	r0, #0
 8015e64:	f77f aeb3 	ble.w	8015bce <_dtoa_r+0x68e>
 8015e68:	4656      	mov	r6, sl
 8015e6a:	2331      	movs	r3, #49	@ 0x31
 8015e6c:	f806 3b01 	strb.w	r3, [r6], #1
 8015e70:	9b04      	ldr	r3, [sp, #16]
 8015e72:	3301      	adds	r3, #1
 8015e74:	9304      	str	r3, [sp, #16]
 8015e76:	e6ae      	b.n	8015bd6 <_dtoa_r+0x696>
 8015e78:	9c07      	ldr	r4, [sp, #28]
 8015e7a:	9704      	str	r7, [sp, #16]
 8015e7c:	4625      	mov	r5, r4
 8015e7e:	e7f3      	b.n	8015e68 <_dtoa_r+0x928>
 8015e80:	9b07      	ldr	r3, [sp, #28]
 8015e82:	9300      	str	r3, [sp, #0]
 8015e84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	f000 8104 	beq.w	8016094 <_dtoa_r+0xb54>
 8015e8c:	2e00      	cmp	r6, #0
 8015e8e:	dd05      	ble.n	8015e9c <_dtoa_r+0x95c>
 8015e90:	4629      	mov	r1, r5
 8015e92:	4632      	mov	r2, r6
 8015e94:	4658      	mov	r0, fp
 8015e96:	f000 fc6f 	bl	8016778 <__lshift>
 8015e9a:	4605      	mov	r5, r0
 8015e9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d05a      	beq.n	8015f58 <_dtoa_r+0xa18>
 8015ea2:	6869      	ldr	r1, [r5, #4]
 8015ea4:	4658      	mov	r0, fp
 8015ea6:	f000 fa0f 	bl	80162c8 <_Balloc>
 8015eaa:	4606      	mov	r6, r0
 8015eac:	b928      	cbnz	r0, 8015eba <_dtoa_r+0x97a>
 8015eae:	4b84      	ldr	r3, [pc, #528]	@ (80160c0 <_dtoa_r+0xb80>)
 8015eb0:	4602      	mov	r2, r0
 8015eb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015eb6:	f7ff bb5a 	b.w	801556e <_dtoa_r+0x2e>
 8015eba:	692a      	ldr	r2, [r5, #16]
 8015ebc:	3202      	adds	r2, #2
 8015ebe:	0092      	lsls	r2, r2, #2
 8015ec0:	f105 010c 	add.w	r1, r5, #12
 8015ec4:	300c      	adds	r0, #12
 8015ec6:	f002 f93b 	bl	8018140 <memcpy>
 8015eca:	2201      	movs	r2, #1
 8015ecc:	4631      	mov	r1, r6
 8015ece:	4658      	mov	r0, fp
 8015ed0:	f000 fc52 	bl	8016778 <__lshift>
 8015ed4:	f10a 0301 	add.w	r3, sl, #1
 8015ed8:	9307      	str	r3, [sp, #28]
 8015eda:	9b00      	ldr	r3, [sp, #0]
 8015edc:	4453      	add	r3, sl
 8015ede:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015ee0:	9b02      	ldr	r3, [sp, #8]
 8015ee2:	f003 0301 	and.w	r3, r3, #1
 8015ee6:	462f      	mov	r7, r5
 8015ee8:	930a      	str	r3, [sp, #40]	@ 0x28
 8015eea:	4605      	mov	r5, r0
 8015eec:	9b07      	ldr	r3, [sp, #28]
 8015eee:	4621      	mov	r1, r4
 8015ef0:	3b01      	subs	r3, #1
 8015ef2:	4648      	mov	r0, r9
 8015ef4:	9300      	str	r3, [sp, #0]
 8015ef6:	f7ff fa9b 	bl	8015430 <quorem>
 8015efa:	4639      	mov	r1, r7
 8015efc:	9002      	str	r0, [sp, #8]
 8015efe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8015f02:	4648      	mov	r0, r9
 8015f04:	f000 fca4 	bl	8016850 <__mcmp>
 8015f08:	462a      	mov	r2, r5
 8015f0a:	9008      	str	r0, [sp, #32]
 8015f0c:	4621      	mov	r1, r4
 8015f0e:	4658      	mov	r0, fp
 8015f10:	f000 fcba 	bl	8016888 <__mdiff>
 8015f14:	68c2      	ldr	r2, [r0, #12]
 8015f16:	4606      	mov	r6, r0
 8015f18:	bb02      	cbnz	r2, 8015f5c <_dtoa_r+0xa1c>
 8015f1a:	4601      	mov	r1, r0
 8015f1c:	4648      	mov	r0, r9
 8015f1e:	f000 fc97 	bl	8016850 <__mcmp>
 8015f22:	4602      	mov	r2, r0
 8015f24:	4631      	mov	r1, r6
 8015f26:	4658      	mov	r0, fp
 8015f28:	920e      	str	r2, [sp, #56]	@ 0x38
 8015f2a:	f000 fa0d 	bl	8016348 <_Bfree>
 8015f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015f32:	9e07      	ldr	r6, [sp, #28]
 8015f34:	ea43 0102 	orr.w	r1, r3, r2
 8015f38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015f3a:	4319      	orrs	r1, r3
 8015f3c:	d110      	bne.n	8015f60 <_dtoa_r+0xa20>
 8015f3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015f42:	d029      	beq.n	8015f98 <_dtoa_r+0xa58>
 8015f44:	9b08      	ldr	r3, [sp, #32]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	dd02      	ble.n	8015f50 <_dtoa_r+0xa10>
 8015f4a:	9b02      	ldr	r3, [sp, #8]
 8015f4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8015f50:	9b00      	ldr	r3, [sp, #0]
 8015f52:	f883 8000 	strb.w	r8, [r3]
 8015f56:	e63f      	b.n	8015bd8 <_dtoa_r+0x698>
 8015f58:	4628      	mov	r0, r5
 8015f5a:	e7bb      	b.n	8015ed4 <_dtoa_r+0x994>
 8015f5c:	2201      	movs	r2, #1
 8015f5e:	e7e1      	b.n	8015f24 <_dtoa_r+0x9e4>
 8015f60:	9b08      	ldr	r3, [sp, #32]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	db04      	blt.n	8015f70 <_dtoa_r+0xa30>
 8015f66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015f68:	430b      	orrs	r3, r1
 8015f6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015f6c:	430b      	orrs	r3, r1
 8015f6e:	d120      	bne.n	8015fb2 <_dtoa_r+0xa72>
 8015f70:	2a00      	cmp	r2, #0
 8015f72:	dded      	ble.n	8015f50 <_dtoa_r+0xa10>
 8015f74:	4649      	mov	r1, r9
 8015f76:	2201      	movs	r2, #1
 8015f78:	4658      	mov	r0, fp
 8015f7a:	f000 fbfd 	bl	8016778 <__lshift>
 8015f7e:	4621      	mov	r1, r4
 8015f80:	4681      	mov	r9, r0
 8015f82:	f000 fc65 	bl	8016850 <__mcmp>
 8015f86:	2800      	cmp	r0, #0
 8015f88:	dc03      	bgt.n	8015f92 <_dtoa_r+0xa52>
 8015f8a:	d1e1      	bne.n	8015f50 <_dtoa_r+0xa10>
 8015f8c:	f018 0f01 	tst.w	r8, #1
 8015f90:	d0de      	beq.n	8015f50 <_dtoa_r+0xa10>
 8015f92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015f96:	d1d8      	bne.n	8015f4a <_dtoa_r+0xa0a>
 8015f98:	9a00      	ldr	r2, [sp, #0]
 8015f9a:	2339      	movs	r3, #57	@ 0x39
 8015f9c:	7013      	strb	r3, [r2, #0]
 8015f9e:	4633      	mov	r3, r6
 8015fa0:	461e      	mov	r6, r3
 8015fa2:	3b01      	subs	r3, #1
 8015fa4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015fa8:	2a39      	cmp	r2, #57	@ 0x39
 8015faa:	d052      	beq.n	8016052 <_dtoa_r+0xb12>
 8015fac:	3201      	adds	r2, #1
 8015fae:	701a      	strb	r2, [r3, #0]
 8015fb0:	e612      	b.n	8015bd8 <_dtoa_r+0x698>
 8015fb2:	2a00      	cmp	r2, #0
 8015fb4:	dd07      	ble.n	8015fc6 <_dtoa_r+0xa86>
 8015fb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015fba:	d0ed      	beq.n	8015f98 <_dtoa_r+0xa58>
 8015fbc:	9a00      	ldr	r2, [sp, #0]
 8015fbe:	f108 0301 	add.w	r3, r8, #1
 8015fc2:	7013      	strb	r3, [r2, #0]
 8015fc4:	e608      	b.n	8015bd8 <_dtoa_r+0x698>
 8015fc6:	9b07      	ldr	r3, [sp, #28]
 8015fc8:	9a07      	ldr	r2, [sp, #28]
 8015fca:	f803 8c01 	strb.w	r8, [r3, #-1]
 8015fce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015fd0:	4293      	cmp	r3, r2
 8015fd2:	d028      	beq.n	8016026 <_dtoa_r+0xae6>
 8015fd4:	4649      	mov	r1, r9
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	220a      	movs	r2, #10
 8015fda:	4658      	mov	r0, fp
 8015fdc:	f000 f9d6 	bl	801638c <__multadd>
 8015fe0:	42af      	cmp	r7, r5
 8015fe2:	4681      	mov	r9, r0
 8015fe4:	f04f 0300 	mov.w	r3, #0
 8015fe8:	f04f 020a 	mov.w	r2, #10
 8015fec:	4639      	mov	r1, r7
 8015fee:	4658      	mov	r0, fp
 8015ff0:	d107      	bne.n	8016002 <_dtoa_r+0xac2>
 8015ff2:	f000 f9cb 	bl	801638c <__multadd>
 8015ff6:	4607      	mov	r7, r0
 8015ff8:	4605      	mov	r5, r0
 8015ffa:	9b07      	ldr	r3, [sp, #28]
 8015ffc:	3301      	adds	r3, #1
 8015ffe:	9307      	str	r3, [sp, #28]
 8016000:	e774      	b.n	8015eec <_dtoa_r+0x9ac>
 8016002:	f000 f9c3 	bl	801638c <__multadd>
 8016006:	4629      	mov	r1, r5
 8016008:	4607      	mov	r7, r0
 801600a:	2300      	movs	r3, #0
 801600c:	220a      	movs	r2, #10
 801600e:	4658      	mov	r0, fp
 8016010:	f000 f9bc 	bl	801638c <__multadd>
 8016014:	4605      	mov	r5, r0
 8016016:	e7f0      	b.n	8015ffa <_dtoa_r+0xaba>
 8016018:	9b00      	ldr	r3, [sp, #0]
 801601a:	2b00      	cmp	r3, #0
 801601c:	bfcc      	ite	gt
 801601e:	461e      	movgt	r6, r3
 8016020:	2601      	movle	r6, #1
 8016022:	4456      	add	r6, sl
 8016024:	2700      	movs	r7, #0
 8016026:	4649      	mov	r1, r9
 8016028:	2201      	movs	r2, #1
 801602a:	4658      	mov	r0, fp
 801602c:	f000 fba4 	bl	8016778 <__lshift>
 8016030:	4621      	mov	r1, r4
 8016032:	4681      	mov	r9, r0
 8016034:	f000 fc0c 	bl	8016850 <__mcmp>
 8016038:	2800      	cmp	r0, #0
 801603a:	dcb0      	bgt.n	8015f9e <_dtoa_r+0xa5e>
 801603c:	d102      	bne.n	8016044 <_dtoa_r+0xb04>
 801603e:	f018 0f01 	tst.w	r8, #1
 8016042:	d1ac      	bne.n	8015f9e <_dtoa_r+0xa5e>
 8016044:	4633      	mov	r3, r6
 8016046:	461e      	mov	r6, r3
 8016048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801604c:	2a30      	cmp	r2, #48	@ 0x30
 801604e:	d0fa      	beq.n	8016046 <_dtoa_r+0xb06>
 8016050:	e5c2      	b.n	8015bd8 <_dtoa_r+0x698>
 8016052:	459a      	cmp	sl, r3
 8016054:	d1a4      	bne.n	8015fa0 <_dtoa_r+0xa60>
 8016056:	9b04      	ldr	r3, [sp, #16]
 8016058:	3301      	adds	r3, #1
 801605a:	9304      	str	r3, [sp, #16]
 801605c:	2331      	movs	r3, #49	@ 0x31
 801605e:	f88a 3000 	strb.w	r3, [sl]
 8016062:	e5b9      	b.n	8015bd8 <_dtoa_r+0x698>
 8016064:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016066:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80160c4 <_dtoa_r+0xb84>
 801606a:	b11b      	cbz	r3, 8016074 <_dtoa_r+0xb34>
 801606c:	f10a 0308 	add.w	r3, sl, #8
 8016070:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8016072:	6013      	str	r3, [r2, #0]
 8016074:	4650      	mov	r0, sl
 8016076:	b019      	add	sp, #100	@ 0x64
 8016078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801607c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801607e:	2b01      	cmp	r3, #1
 8016080:	f77f ae37 	ble.w	8015cf2 <_dtoa_r+0x7b2>
 8016084:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016086:	930a      	str	r3, [sp, #40]	@ 0x28
 8016088:	2001      	movs	r0, #1
 801608a:	e655      	b.n	8015d38 <_dtoa_r+0x7f8>
 801608c:	9b00      	ldr	r3, [sp, #0]
 801608e:	2b00      	cmp	r3, #0
 8016090:	f77f aed6 	ble.w	8015e40 <_dtoa_r+0x900>
 8016094:	4656      	mov	r6, sl
 8016096:	4621      	mov	r1, r4
 8016098:	4648      	mov	r0, r9
 801609a:	f7ff f9c9 	bl	8015430 <quorem>
 801609e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80160a2:	f806 8b01 	strb.w	r8, [r6], #1
 80160a6:	9b00      	ldr	r3, [sp, #0]
 80160a8:	eba6 020a 	sub.w	r2, r6, sl
 80160ac:	4293      	cmp	r3, r2
 80160ae:	ddb3      	ble.n	8016018 <_dtoa_r+0xad8>
 80160b0:	4649      	mov	r1, r9
 80160b2:	2300      	movs	r3, #0
 80160b4:	220a      	movs	r2, #10
 80160b6:	4658      	mov	r0, fp
 80160b8:	f000 f968 	bl	801638c <__multadd>
 80160bc:	4681      	mov	r9, r0
 80160be:	e7ea      	b.n	8016096 <_dtoa_r+0xb56>
 80160c0:	080278ad 	.word	0x080278ad
 80160c4:	08027831 	.word	0x08027831

080160c8 <_free_r>:
 80160c8:	b538      	push	{r3, r4, r5, lr}
 80160ca:	4605      	mov	r5, r0
 80160cc:	2900      	cmp	r1, #0
 80160ce:	d041      	beq.n	8016154 <_free_r+0x8c>
 80160d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80160d4:	1f0c      	subs	r4, r1, #4
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	bfb8      	it	lt
 80160da:	18e4      	addlt	r4, r4, r3
 80160dc:	f000 f8e8 	bl	80162b0 <__malloc_lock>
 80160e0:	4a1d      	ldr	r2, [pc, #116]	@ (8016158 <_free_r+0x90>)
 80160e2:	6813      	ldr	r3, [r2, #0]
 80160e4:	b933      	cbnz	r3, 80160f4 <_free_r+0x2c>
 80160e6:	6063      	str	r3, [r4, #4]
 80160e8:	6014      	str	r4, [r2, #0]
 80160ea:	4628      	mov	r0, r5
 80160ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80160f0:	f000 b8e4 	b.w	80162bc <__malloc_unlock>
 80160f4:	42a3      	cmp	r3, r4
 80160f6:	d908      	bls.n	801610a <_free_r+0x42>
 80160f8:	6820      	ldr	r0, [r4, #0]
 80160fa:	1821      	adds	r1, r4, r0
 80160fc:	428b      	cmp	r3, r1
 80160fe:	bf01      	itttt	eq
 8016100:	6819      	ldreq	r1, [r3, #0]
 8016102:	685b      	ldreq	r3, [r3, #4]
 8016104:	1809      	addeq	r1, r1, r0
 8016106:	6021      	streq	r1, [r4, #0]
 8016108:	e7ed      	b.n	80160e6 <_free_r+0x1e>
 801610a:	461a      	mov	r2, r3
 801610c:	685b      	ldr	r3, [r3, #4]
 801610e:	b10b      	cbz	r3, 8016114 <_free_r+0x4c>
 8016110:	42a3      	cmp	r3, r4
 8016112:	d9fa      	bls.n	801610a <_free_r+0x42>
 8016114:	6811      	ldr	r1, [r2, #0]
 8016116:	1850      	adds	r0, r2, r1
 8016118:	42a0      	cmp	r0, r4
 801611a:	d10b      	bne.n	8016134 <_free_r+0x6c>
 801611c:	6820      	ldr	r0, [r4, #0]
 801611e:	4401      	add	r1, r0
 8016120:	1850      	adds	r0, r2, r1
 8016122:	4283      	cmp	r3, r0
 8016124:	6011      	str	r1, [r2, #0]
 8016126:	d1e0      	bne.n	80160ea <_free_r+0x22>
 8016128:	6818      	ldr	r0, [r3, #0]
 801612a:	685b      	ldr	r3, [r3, #4]
 801612c:	6053      	str	r3, [r2, #4]
 801612e:	4408      	add	r0, r1
 8016130:	6010      	str	r0, [r2, #0]
 8016132:	e7da      	b.n	80160ea <_free_r+0x22>
 8016134:	d902      	bls.n	801613c <_free_r+0x74>
 8016136:	230c      	movs	r3, #12
 8016138:	602b      	str	r3, [r5, #0]
 801613a:	e7d6      	b.n	80160ea <_free_r+0x22>
 801613c:	6820      	ldr	r0, [r4, #0]
 801613e:	1821      	adds	r1, r4, r0
 8016140:	428b      	cmp	r3, r1
 8016142:	bf04      	itt	eq
 8016144:	6819      	ldreq	r1, [r3, #0]
 8016146:	685b      	ldreq	r3, [r3, #4]
 8016148:	6063      	str	r3, [r4, #4]
 801614a:	bf04      	itt	eq
 801614c:	1809      	addeq	r1, r1, r0
 801614e:	6021      	streq	r1, [r4, #0]
 8016150:	6054      	str	r4, [r2, #4]
 8016152:	e7ca      	b.n	80160ea <_free_r+0x22>
 8016154:	bd38      	pop	{r3, r4, r5, pc}
 8016156:	bf00      	nop
 8016158:	20013244 	.word	0x20013244

0801615c <malloc>:
 801615c:	4b02      	ldr	r3, [pc, #8]	@ (8016168 <malloc+0xc>)
 801615e:	4601      	mov	r1, r0
 8016160:	6818      	ldr	r0, [r3, #0]
 8016162:	f000 b825 	b.w	80161b0 <_malloc_r>
 8016166:	bf00      	nop
 8016168:	20000408 	.word	0x20000408

0801616c <sbrk_aligned>:
 801616c:	b570      	push	{r4, r5, r6, lr}
 801616e:	4e0f      	ldr	r6, [pc, #60]	@ (80161ac <sbrk_aligned+0x40>)
 8016170:	460c      	mov	r4, r1
 8016172:	6831      	ldr	r1, [r6, #0]
 8016174:	4605      	mov	r5, r0
 8016176:	b911      	cbnz	r1, 801617e <sbrk_aligned+0x12>
 8016178:	f001 ffd2 	bl	8018120 <_sbrk_r>
 801617c:	6030      	str	r0, [r6, #0]
 801617e:	4621      	mov	r1, r4
 8016180:	4628      	mov	r0, r5
 8016182:	f001 ffcd 	bl	8018120 <_sbrk_r>
 8016186:	1c43      	adds	r3, r0, #1
 8016188:	d103      	bne.n	8016192 <sbrk_aligned+0x26>
 801618a:	f04f 34ff 	mov.w	r4, #4294967295
 801618e:	4620      	mov	r0, r4
 8016190:	bd70      	pop	{r4, r5, r6, pc}
 8016192:	1cc4      	adds	r4, r0, #3
 8016194:	f024 0403 	bic.w	r4, r4, #3
 8016198:	42a0      	cmp	r0, r4
 801619a:	d0f8      	beq.n	801618e <sbrk_aligned+0x22>
 801619c:	1a21      	subs	r1, r4, r0
 801619e:	4628      	mov	r0, r5
 80161a0:	f001 ffbe 	bl	8018120 <_sbrk_r>
 80161a4:	3001      	adds	r0, #1
 80161a6:	d1f2      	bne.n	801618e <sbrk_aligned+0x22>
 80161a8:	e7ef      	b.n	801618a <sbrk_aligned+0x1e>
 80161aa:	bf00      	nop
 80161ac:	20013240 	.word	0x20013240

080161b0 <_malloc_r>:
 80161b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161b4:	1ccd      	adds	r5, r1, #3
 80161b6:	f025 0503 	bic.w	r5, r5, #3
 80161ba:	3508      	adds	r5, #8
 80161bc:	2d0c      	cmp	r5, #12
 80161be:	bf38      	it	cc
 80161c0:	250c      	movcc	r5, #12
 80161c2:	2d00      	cmp	r5, #0
 80161c4:	4606      	mov	r6, r0
 80161c6:	db01      	blt.n	80161cc <_malloc_r+0x1c>
 80161c8:	42a9      	cmp	r1, r5
 80161ca:	d904      	bls.n	80161d6 <_malloc_r+0x26>
 80161cc:	230c      	movs	r3, #12
 80161ce:	6033      	str	r3, [r6, #0]
 80161d0:	2000      	movs	r0, #0
 80161d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80162ac <_malloc_r+0xfc>
 80161da:	f000 f869 	bl	80162b0 <__malloc_lock>
 80161de:	f8d8 3000 	ldr.w	r3, [r8]
 80161e2:	461c      	mov	r4, r3
 80161e4:	bb44      	cbnz	r4, 8016238 <_malloc_r+0x88>
 80161e6:	4629      	mov	r1, r5
 80161e8:	4630      	mov	r0, r6
 80161ea:	f7ff ffbf 	bl	801616c <sbrk_aligned>
 80161ee:	1c43      	adds	r3, r0, #1
 80161f0:	4604      	mov	r4, r0
 80161f2:	d158      	bne.n	80162a6 <_malloc_r+0xf6>
 80161f4:	f8d8 4000 	ldr.w	r4, [r8]
 80161f8:	4627      	mov	r7, r4
 80161fa:	2f00      	cmp	r7, #0
 80161fc:	d143      	bne.n	8016286 <_malloc_r+0xd6>
 80161fe:	2c00      	cmp	r4, #0
 8016200:	d04b      	beq.n	801629a <_malloc_r+0xea>
 8016202:	6823      	ldr	r3, [r4, #0]
 8016204:	4639      	mov	r1, r7
 8016206:	4630      	mov	r0, r6
 8016208:	eb04 0903 	add.w	r9, r4, r3
 801620c:	f001 ff88 	bl	8018120 <_sbrk_r>
 8016210:	4581      	cmp	r9, r0
 8016212:	d142      	bne.n	801629a <_malloc_r+0xea>
 8016214:	6821      	ldr	r1, [r4, #0]
 8016216:	1a6d      	subs	r5, r5, r1
 8016218:	4629      	mov	r1, r5
 801621a:	4630      	mov	r0, r6
 801621c:	f7ff ffa6 	bl	801616c <sbrk_aligned>
 8016220:	3001      	adds	r0, #1
 8016222:	d03a      	beq.n	801629a <_malloc_r+0xea>
 8016224:	6823      	ldr	r3, [r4, #0]
 8016226:	442b      	add	r3, r5
 8016228:	6023      	str	r3, [r4, #0]
 801622a:	f8d8 3000 	ldr.w	r3, [r8]
 801622e:	685a      	ldr	r2, [r3, #4]
 8016230:	bb62      	cbnz	r2, 801628c <_malloc_r+0xdc>
 8016232:	f8c8 7000 	str.w	r7, [r8]
 8016236:	e00f      	b.n	8016258 <_malloc_r+0xa8>
 8016238:	6822      	ldr	r2, [r4, #0]
 801623a:	1b52      	subs	r2, r2, r5
 801623c:	d420      	bmi.n	8016280 <_malloc_r+0xd0>
 801623e:	2a0b      	cmp	r2, #11
 8016240:	d917      	bls.n	8016272 <_malloc_r+0xc2>
 8016242:	1961      	adds	r1, r4, r5
 8016244:	42a3      	cmp	r3, r4
 8016246:	6025      	str	r5, [r4, #0]
 8016248:	bf18      	it	ne
 801624a:	6059      	strne	r1, [r3, #4]
 801624c:	6863      	ldr	r3, [r4, #4]
 801624e:	bf08      	it	eq
 8016250:	f8c8 1000 	streq.w	r1, [r8]
 8016254:	5162      	str	r2, [r4, r5]
 8016256:	604b      	str	r3, [r1, #4]
 8016258:	4630      	mov	r0, r6
 801625a:	f000 f82f 	bl	80162bc <__malloc_unlock>
 801625e:	f104 000b 	add.w	r0, r4, #11
 8016262:	1d23      	adds	r3, r4, #4
 8016264:	f020 0007 	bic.w	r0, r0, #7
 8016268:	1ac2      	subs	r2, r0, r3
 801626a:	bf1c      	itt	ne
 801626c:	1a1b      	subne	r3, r3, r0
 801626e:	50a3      	strne	r3, [r4, r2]
 8016270:	e7af      	b.n	80161d2 <_malloc_r+0x22>
 8016272:	6862      	ldr	r2, [r4, #4]
 8016274:	42a3      	cmp	r3, r4
 8016276:	bf0c      	ite	eq
 8016278:	f8c8 2000 	streq.w	r2, [r8]
 801627c:	605a      	strne	r2, [r3, #4]
 801627e:	e7eb      	b.n	8016258 <_malloc_r+0xa8>
 8016280:	4623      	mov	r3, r4
 8016282:	6864      	ldr	r4, [r4, #4]
 8016284:	e7ae      	b.n	80161e4 <_malloc_r+0x34>
 8016286:	463c      	mov	r4, r7
 8016288:	687f      	ldr	r7, [r7, #4]
 801628a:	e7b6      	b.n	80161fa <_malloc_r+0x4a>
 801628c:	461a      	mov	r2, r3
 801628e:	685b      	ldr	r3, [r3, #4]
 8016290:	42a3      	cmp	r3, r4
 8016292:	d1fb      	bne.n	801628c <_malloc_r+0xdc>
 8016294:	2300      	movs	r3, #0
 8016296:	6053      	str	r3, [r2, #4]
 8016298:	e7de      	b.n	8016258 <_malloc_r+0xa8>
 801629a:	230c      	movs	r3, #12
 801629c:	6033      	str	r3, [r6, #0]
 801629e:	4630      	mov	r0, r6
 80162a0:	f000 f80c 	bl	80162bc <__malloc_unlock>
 80162a4:	e794      	b.n	80161d0 <_malloc_r+0x20>
 80162a6:	6005      	str	r5, [r0, #0]
 80162a8:	e7d6      	b.n	8016258 <_malloc_r+0xa8>
 80162aa:	bf00      	nop
 80162ac:	20013244 	.word	0x20013244

080162b0 <__malloc_lock>:
 80162b0:	4801      	ldr	r0, [pc, #4]	@ (80162b8 <__malloc_lock+0x8>)
 80162b2:	f7ff b8b4 	b.w	801541e <__retarget_lock_acquire_recursive>
 80162b6:	bf00      	nop
 80162b8:	2001323c 	.word	0x2001323c

080162bc <__malloc_unlock>:
 80162bc:	4801      	ldr	r0, [pc, #4]	@ (80162c4 <__malloc_unlock+0x8>)
 80162be:	f7ff b8af 	b.w	8015420 <__retarget_lock_release_recursive>
 80162c2:	bf00      	nop
 80162c4:	2001323c 	.word	0x2001323c

080162c8 <_Balloc>:
 80162c8:	b570      	push	{r4, r5, r6, lr}
 80162ca:	69c6      	ldr	r6, [r0, #28]
 80162cc:	4604      	mov	r4, r0
 80162ce:	460d      	mov	r5, r1
 80162d0:	b976      	cbnz	r6, 80162f0 <_Balloc+0x28>
 80162d2:	2010      	movs	r0, #16
 80162d4:	f7ff ff42 	bl	801615c <malloc>
 80162d8:	4602      	mov	r2, r0
 80162da:	61e0      	str	r0, [r4, #28]
 80162dc:	b920      	cbnz	r0, 80162e8 <_Balloc+0x20>
 80162de:	4b18      	ldr	r3, [pc, #96]	@ (8016340 <_Balloc+0x78>)
 80162e0:	4818      	ldr	r0, [pc, #96]	@ (8016344 <_Balloc+0x7c>)
 80162e2:	216b      	movs	r1, #107	@ 0x6b
 80162e4:	f001 ff44 	bl	8018170 <__assert_func>
 80162e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80162ec:	6006      	str	r6, [r0, #0]
 80162ee:	60c6      	str	r6, [r0, #12]
 80162f0:	69e6      	ldr	r6, [r4, #28]
 80162f2:	68f3      	ldr	r3, [r6, #12]
 80162f4:	b183      	cbz	r3, 8016318 <_Balloc+0x50>
 80162f6:	69e3      	ldr	r3, [r4, #28]
 80162f8:	68db      	ldr	r3, [r3, #12]
 80162fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80162fe:	b9b8      	cbnz	r0, 8016330 <_Balloc+0x68>
 8016300:	2101      	movs	r1, #1
 8016302:	fa01 f605 	lsl.w	r6, r1, r5
 8016306:	1d72      	adds	r2, r6, #5
 8016308:	0092      	lsls	r2, r2, #2
 801630a:	4620      	mov	r0, r4
 801630c:	f001 ff4e 	bl	80181ac <_calloc_r>
 8016310:	b160      	cbz	r0, 801632c <_Balloc+0x64>
 8016312:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016316:	e00e      	b.n	8016336 <_Balloc+0x6e>
 8016318:	2221      	movs	r2, #33	@ 0x21
 801631a:	2104      	movs	r1, #4
 801631c:	4620      	mov	r0, r4
 801631e:	f001 ff45 	bl	80181ac <_calloc_r>
 8016322:	69e3      	ldr	r3, [r4, #28]
 8016324:	60f0      	str	r0, [r6, #12]
 8016326:	68db      	ldr	r3, [r3, #12]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d1e4      	bne.n	80162f6 <_Balloc+0x2e>
 801632c:	2000      	movs	r0, #0
 801632e:	bd70      	pop	{r4, r5, r6, pc}
 8016330:	6802      	ldr	r2, [r0, #0]
 8016332:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016336:	2300      	movs	r3, #0
 8016338:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801633c:	e7f7      	b.n	801632e <_Balloc+0x66>
 801633e:	bf00      	nop
 8016340:	0802783e 	.word	0x0802783e
 8016344:	080278be 	.word	0x080278be

08016348 <_Bfree>:
 8016348:	b570      	push	{r4, r5, r6, lr}
 801634a:	69c6      	ldr	r6, [r0, #28]
 801634c:	4605      	mov	r5, r0
 801634e:	460c      	mov	r4, r1
 8016350:	b976      	cbnz	r6, 8016370 <_Bfree+0x28>
 8016352:	2010      	movs	r0, #16
 8016354:	f7ff ff02 	bl	801615c <malloc>
 8016358:	4602      	mov	r2, r0
 801635a:	61e8      	str	r0, [r5, #28]
 801635c:	b920      	cbnz	r0, 8016368 <_Bfree+0x20>
 801635e:	4b09      	ldr	r3, [pc, #36]	@ (8016384 <_Bfree+0x3c>)
 8016360:	4809      	ldr	r0, [pc, #36]	@ (8016388 <_Bfree+0x40>)
 8016362:	218f      	movs	r1, #143	@ 0x8f
 8016364:	f001 ff04 	bl	8018170 <__assert_func>
 8016368:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801636c:	6006      	str	r6, [r0, #0]
 801636e:	60c6      	str	r6, [r0, #12]
 8016370:	b13c      	cbz	r4, 8016382 <_Bfree+0x3a>
 8016372:	69eb      	ldr	r3, [r5, #28]
 8016374:	6862      	ldr	r2, [r4, #4]
 8016376:	68db      	ldr	r3, [r3, #12]
 8016378:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801637c:	6021      	str	r1, [r4, #0]
 801637e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016382:	bd70      	pop	{r4, r5, r6, pc}
 8016384:	0802783e 	.word	0x0802783e
 8016388:	080278be 	.word	0x080278be

0801638c <__multadd>:
 801638c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016390:	690d      	ldr	r5, [r1, #16]
 8016392:	4607      	mov	r7, r0
 8016394:	460c      	mov	r4, r1
 8016396:	461e      	mov	r6, r3
 8016398:	f101 0c14 	add.w	ip, r1, #20
 801639c:	2000      	movs	r0, #0
 801639e:	f8dc 3000 	ldr.w	r3, [ip]
 80163a2:	b299      	uxth	r1, r3
 80163a4:	fb02 6101 	mla	r1, r2, r1, r6
 80163a8:	0c1e      	lsrs	r6, r3, #16
 80163aa:	0c0b      	lsrs	r3, r1, #16
 80163ac:	fb02 3306 	mla	r3, r2, r6, r3
 80163b0:	b289      	uxth	r1, r1
 80163b2:	3001      	adds	r0, #1
 80163b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80163b8:	4285      	cmp	r5, r0
 80163ba:	f84c 1b04 	str.w	r1, [ip], #4
 80163be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80163c2:	dcec      	bgt.n	801639e <__multadd+0x12>
 80163c4:	b30e      	cbz	r6, 801640a <__multadd+0x7e>
 80163c6:	68a3      	ldr	r3, [r4, #8]
 80163c8:	42ab      	cmp	r3, r5
 80163ca:	dc19      	bgt.n	8016400 <__multadd+0x74>
 80163cc:	6861      	ldr	r1, [r4, #4]
 80163ce:	4638      	mov	r0, r7
 80163d0:	3101      	adds	r1, #1
 80163d2:	f7ff ff79 	bl	80162c8 <_Balloc>
 80163d6:	4680      	mov	r8, r0
 80163d8:	b928      	cbnz	r0, 80163e6 <__multadd+0x5a>
 80163da:	4602      	mov	r2, r0
 80163dc:	4b0c      	ldr	r3, [pc, #48]	@ (8016410 <__multadd+0x84>)
 80163de:	480d      	ldr	r0, [pc, #52]	@ (8016414 <__multadd+0x88>)
 80163e0:	21ba      	movs	r1, #186	@ 0xba
 80163e2:	f001 fec5 	bl	8018170 <__assert_func>
 80163e6:	6922      	ldr	r2, [r4, #16]
 80163e8:	3202      	adds	r2, #2
 80163ea:	f104 010c 	add.w	r1, r4, #12
 80163ee:	0092      	lsls	r2, r2, #2
 80163f0:	300c      	adds	r0, #12
 80163f2:	f001 fea5 	bl	8018140 <memcpy>
 80163f6:	4621      	mov	r1, r4
 80163f8:	4638      	mov	r0, r7
 80163fa:	f7ff ffa5 	bl	8016348 <_Bfree>
 80163fe:	4644      	mov	r4, r8
 8016400:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016404:	3501      	adds	r5, #1
 8016406:	615e      	str	r6, [r3, #20]
 8016408:	6125      	str	r5, [r4, #16]
 801640a:	4620      	mov	r0, r4
 801640c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016410:	080278ad 	.word	0x080278ad
 8016414:	080278be 	.word	0x080278be

08016418 <__s2b>:
 8016418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801641c:	460c      	mov	r4, r1
 801641e:	4615      	mov	r5, r2
 8016420:	461f      	mov	r7, r3
 8016422:	2209      	movs	r2, #9
 8016424:	3308      	adds	r3, #8
 8016426:	4606      	mov	r6, r0
 8016428:	fb93 f3f2 	sdiv	r3, r3, r2
 801642c:	2100      	movs	r1, #0
 801642e:	2201      	movs	r2, #1
 8016430:	429a      	cmp	r2, r3
 8016432:	db09      	blt.n	8016448 <__s2b+0x30>
 8016434:	4630      	mov	r0, r6
 8016436:	f7ff ff47 	bl	80162c8 <_Balloc>
 801643a:	b940      	cbnz	r0, 801644e <__s2b+0x36>
 801643c:	4602      	mov	r2, r0
 801643e:	4b19      	ldr	r3, [pc, #100]	@ (80164a4 <__s2b+0x8c>)
 8016440:	4819      	ldr	r0, [pc, #100]	@ (80164a8 <__s2b+0x90>)
 8016442:	21d3      	movs	r1, #211	@ 0xd3
 8016444:	f001 fe94 	bl	8018170 <__assert_func>
 8016448:	0052      	lsls	r2, r2, #1
 801644a:	3101      	adds	r1, #1
 801644c:	e7f0      	b.n	8016430 <__s2b+0x18>
 801644e:	9b08      	ldr	r3, [sp, #32]
 8016450:	6143      	str	r3, [r0, #20]
 8016452:	2d09      	cmp	r5, #9
 8016454:	f04f 0301 	mov.w	r3, #1
 8016458:	6103      	str	r3, [r0, #16]
 801645a:	dd16      	ble.n	801648a <__s2b+0x72>
 801645c:	f104 0909 	add.w	r9, r4, #9
 8016460:	46c8      	mov	r8, r9
 8016462:	442c      	add	r4, r5
 8016464:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016468:	4601      	mov	r1, r0
 801646a:	3b30      	subs	r3, #48	@ 0x30
 801646c:	220a      	movs	r2, #10
 801646e:	4630      	mov	r0, r6
 8016470:	f7ff ff8c 	bl	801638c <__multadd>
 8016474:	45a0      	cmp	r8, r4
 8016476:	d1f5      	bne.n	8016464 <__s2b+0x4c>
 8016478:	f1a5 0408 	sub.w	r4, r5, #8
 801647c:	444c      	add	r4, r9
 801647e:	1b2d      	subs	r5, r5, r4
 8016480:	1963      	adds	r3, r4, r5
 8016482:	42bb      	cmp	r3, r7
 8016484:	db04      	blt.n	8016490 <__s2b+0x78>
 8016486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801648a:	340a      	adds	r4, #10
 801648c:	2509      	movs	r5, #9
 801648e:	e7f6      	b.n	801647e <__s2b+0x66>
 8016490:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016494:	4601      	mov	r1, r0
 8016496:	3b30      	subs	r3, #48	@ 0x30
 8016498:	220a      	movs	r2, #10
 801649a:	4630      	mov	r0, r6
 801649c:	f7ff ff76 	bl	801638c <__multadd>
 80164a0:	e7ee      	b.n	8016480 <__s2b+0x68>
 80164a2:	bf00      	nop
 80164a4:	080278ad 	.word	0x080278ad
 80164a8:	080278be 	.word	0x080278be

080164ac <__hi0bits>:
 80164ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80164b0:	4603      	mov	r3, r0
 80164b2:	bf36      	itet	cc
 80164b4:	0403      	lslcc	r3, r0, #16
 80164b6:	2000      	movcs	r0, #0
 80164b8:	2010      	movcc	r0, #16
 80164ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80164be:	bf3c      	itt	cc
 80164c0:	021b      	lslcc	r3, r3, #8
 80164c2:	3008      	addcc	r0, #8
 80164c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80164c8:	bf3c      	itt	cc
 80164ca:	011b      	lslcc	r3, r3, #4
 80164cc:	3004      	addcc	r0, #4
 80164ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80164d2:	bf3c      	itt	cc
 80164d4:	009b      	lslcc	r3, r3, #2
 80164d6:	3002      	addcc	r0, #2
 80164d8:	2b00      	cmp	r3, #0
 80164da:	db05      	blt.n	80164e8 <__hi0bits+0x3c>
 80164dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80164e0:	f100 0001 	add.w	r0, r0, #1
 80164e4:	bf08      	it	eq
 80164e6:	2020      	moveq	r0, #32
 80164e8:	4770      	bx	lr

080164ea <__lo0bits>:
 80164ea:	6803      	ldr	r3, [r0, #0]
 80164ec:	4602      	mov	r2, r0
 80164ee:	f013 0007 	ands.w	r0, r3, #7
 80164f2:	d00b      	beq.n	801650c <__lo0bits+0x22>
 80164f4:	07d9      	lsls	r1, r3, #31
 80164f6:	d421      	bmi.n	801653c <__lo0bits+0x52>
 80164f8:	0798      	lsls	r0, r3, #30
 80164fa:	bf49      	itett	mi
 80164fc:	085b      	lsrmi	r3, r3, #1
 80164fe:	089b      	lsrpl	r3, r3, #2
 8016500:	2001      	movmi	r0, #1
 8016502:	6013      	strmi	r3, [r2, #0]
 8016504:	bf5c      	itt	pl
 8016506:	6013      	strpl	r3, [r2, #0]
 8016508:	2002      	movpl	r0, #2
 801650a:	4770      	bx	lr
 801650c:	b299      	uxth	r1, r3
 801650e:	b909      	cbnz	r1, 8016514 <__lo0bits+0x2a>
 8016510:	0c1b      	lsrs	r3, r3, #16
 8016512:	2010      	movs	r0, #16
 8016514:	b2d9      	uxtb	r1, r3
 8016516:	b909      	cbnz	r1, 801651c <__lo0bits+0x32>
 8016518:	3008      	adds	r0, #8
 801651a:	0a1b      	lsrs	r3, r3, #8
 801651c:	0719      	lsls	r1, r3, #28
 801651e:	bf04      	itt	eq
 8016520:	091b      	lsreq	r3, r3, #4
 8016522:	3004      	addeq	r0, #4
 8016524:	0799      	lsls	r1, r3, #30
 8016526:	bf04      	itt	eq
 8016528:	089b      	lsreq	r3, r3, #2
 801652a:	3002      	addeq	r0, #2
 801652c:	07d9      	lsls	r1, r3, #31
 801652e:	d403      	bmi.n	8016538 <__lo0bits+0x4e>
 8016530:	085b      	lsrs	r3, r3, #1
 8016532:	f100 0001 	add.w	r0, r0, #1
 8016536:	d003      	beq.n	8016540 <__lo0bits+0x56>
 8016538:	6013      	str	r3, [r2, #0]
 801653a:	4770      	bx	lr
 801653c:	2000      	movs	r0, #0
 801653e:	4770      	bx	lr
 8016540:	2020      	movs	r0, #32
 8016542:	4770      	bx	lr

08016544 <__i2b>:
 8016544:	b510      	push	{r4, lr}
 8016546:	460c      	mov	r4, r1
 8016548:	2101      	movs	r1, #1
 801654a:	f7ff febd 	bl	80162c8 <_Balloc>
 801654e:	4602      	mov	r2, r0
 8016550:	b928      	cbnz	r0, 801655e <__i2b+0x1a>
 8016552:	4b05      	ldr	r3, [pc, #20]	@ (8016568 <__i2b+0x24>)
 8016554:	4805      	ldr	r0, [pc, #20]	@ (801656c <__i2b+0x28>)
 8016556:	f240 1145 	movw	r1, #325	@ 0x145
 801655a:	f001 fe09 	bl	8018170 <__assert_func>
 801655e:	2301      	movs	r3, #1
 8016560:	6144      	str	r4, [r0, #20]
 8016562:	6103      	str	r3, [r0, #16]
 8016564:	bd10      	pop	{r4, pc}
 8016566:	bf00      	nop
 8016568:	080278ad 	.word	0x080278ad
 801656c:	080278be 	.word	0x080278be

08016570 <__multiply>:
 8016570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016574:	4614      	mov	r4, r2
 8016576:	690a      	ldr	r2, [r1, #16]
 8016578:	6923      	ldr	r3, [r4, #16]
 801657a:	429a      	cmp	r2, r3
 801657c:	bfa8      	it	ge
 801657e:	4623      	movge	r3, r4
 8016580:	460f      	mov	r7, r1
 8016582:	bfa4      	itt	ge
 8016584:	460c      	movge	r4, r1
 8016586:	461f      	movge	r7, r3
 8016588:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801658c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8016590:	68a3      	ldr	r3, [r4, #8]
 8016592:	6861      	ldr	r1, [r4, #4]
 8016594:	eb0a 0609 	add.w	r6, sl, r9
 8016598:	42b3      	cmp	r3, r6
 801659a:	b085      	sub	sp, #20
 801659c:	bfb8      	it	lt
 801659e:	3101      	addlt	r1, #1
 80165a0:	f7ff fe92 	bl	80162c8 <_Balloc>
 80165a4:	b930      	cbnz	r0, 80165b4 <__multiply+0x44>
 80165a6:	4602      	mov	r2, r0
 80165a8:	4b44      	ldr	r3, [pc, #272]	@ (80166bc <__multiply+0x14c>)
 80165aa:	4845      	ldr	r0, [pc, #276]	@ (80166c0 <__multiply+0x150>)
 80165ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80165b0:	f001 fdde 	bl	8018170 <__assert_func>
 80165b4:	f100 0514 	add.w	r5, r0, #20
 80165b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80165bc:	462b      	mov	r3, r5
 80165be:	2200      	movs	r2, #0
 80165c0:	4543      	cmp	r3, r8
 80165c2:	d321      	bcc.n	8016608 <__multiply+0x98>
 80165c4:	f107 0114 	add.w	r1, r7, #20
 80165c8:	f104 0214 	add.w	r2, r4, #20
 80165cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80165d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80165d4:	9302      	str	r3, [sp, #8]
 80165d6:	1b13      	subs	r3, r2, r4
 80165d8:	3b15      	subs	r3, #21
 80165da:	f023 0303 	bic.w	r3, r3, #3
 80165de:	3304      	adds	r3, #4
 80165e0:	f104 0715 	add.w	r7, r4, #21
 80165e4:	42ba      	cmp	r2, r7
 80165e6:	bf38      	it	cc
 80165e8:	2304      	movcc	r3, #4
 80165ea:	9301      	str	r3, [sp, #4]
 80165ec:	9b02      	ldr	r3, [sp, #8]
 80165ee:	9103      	str	r1, [sp, #12]
 80165f0:	428b      	cmp	r3, r1
 80165f2:	d80c      	bhi.n	801660e <__multiply+0x9e>
 80165f4:	2e00      	cmp	r6, #0
 80165f6:	dd03      	ble.n	8016600 <__multiply+0x90>
 80165f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d05b      	beq.n	80166b8 <__multiply+0x148>
 8016600:	6106      	str	r6, [r0, #16]
 8016602:	b005      	add	sp, #20
 8016604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016608:	f843 2b04 	str.w	r2, [r3], #4
 801660c:	e7d8      	b.n	80165c0 <__multiply+0x50>
 801660e:	f8b1 a000 	ldrh.w	sl, [r1]
 8016612:	f1ba 0f00 	cmp.w	sl, #0
 8016616:	d024      	beq.n	8016662 <__multiply+0xf2>
 8016618:	f104 0e14 	add.w	lr, r4, #20
 801661c:	46a9      	mov	r9, r5
 801661e:	f04f 0c00 	mov.w	ip, #0
 8016622:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016626:	f8d9 3000 	ldr.w	r3, [r9]
 801662a:	fa1f fb87 	uxth.w	fp, r7
 801662e:	b29b      	uxth	r3, r3
 8016630:	fb0a 330b 	mla	r3, sl, fp, r3
 8016634:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8016638:	f8d9 7000 	ldr.w	r7, [r9]
 801663c:	4463      	add	r3, ip
 801663e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016642:	fb0a c70b 	mla	r7, sl, fp, ip
 8016646:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801664a:	b29b      	uxth	r3, r3
 801664c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016650:	4572      	cmp	r2, lr
 8016652:	f849 3b04 	str.w	r3, [r9], #4
 8016656:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801665a:	d8e2      	bhi.n	8016622 <__multiply+0xb2>
 801665c:	9b01      	ldr	r3, [sp, #4]
 801665e:	f845 c003 	str.w	ip, [r5, r3]
 8016662:	9b03      	ldr	r3, [sp, #12]
 8016664:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016668:	3104      	adds	r1, #4
 801666a:	f1b9 0f00 	cmp.w	r9, #0
 801666e:	d021      	beq.n	80166b4 <__multiply+0x144>
 8016670:	682b      	ldr	r3, [r5, #0]
 8016672:	f104 0c14 	add.w	ip, r4, #20
 8016676:	46ae      	mov	lr, r5
 8016678:	f04f 0a00 	mov.w	sl, #0
 801667c:	f8bc b000 	ldrh.w	fp, [ip]
 8016680:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8016684:	fb09 770b 	mla	r7, r9, fp, r7
 8016688:	4457      	add	r7, sl
 801668a:	b29b      	uxth	r3, r3
 801668c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016690:	f84e 3b04 	str.w	r3, [lr], #4
 8016694:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016698:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801669c:	f8be 3000 	ldrh.w	r3, [lr]
 80166a0:	fb09 330a 	mla	r3, r9, sl, r3
 80166a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80166a8:	4562      	cmp	r2, ip
 80166aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80166ae:	d8e5      	bhi.n	801667c <__multiply+0x10c>
 80166b0:	9f01      	ldr	r7, [sp, #4]
 80166b2:	51eb      	str	r3, [r5, r7]
 80166b4:	3504      	adds	r5, #4
 80166b6:	e799      	b.n	80165ec <__multiply+0x7c>
 80166b8:	3e01      	subs	r6, #1
 80166ba:	e79b      	b.n	80165f4 <__multiply+0x84>
 80166bc:	080278ad 	.word	0x080278ad
 80166c0:	080278be 	.word	0x080278be

080166c4 <__pow5mult>:
 80166c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80166c8:	4615      	mov	r5, r2
 80166ca:	f012 0203 	ands.w	r2, r2, #3
 80166ce:	4607      	mov	r7, r0
 80166d0:	460e      	mov	r6, r1
 80166d2:	d007      	beq.n	80166e4 <__pow5mult+0x20>
 80166d4:	4c25      	ldr	r4, [pc, #148]	@ (801676c <__pow5mult+0xa8>)
 80166d6:	3a01      	subs	r2, #1
 80166d8:	2300      	movs	r3, #0
 80166da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80166de:	f7ff fe55 	bl	801638c <__multadd>
 80166e2:	4606      	mov	r6, r0
 80166e4:	10ad      	asrs	r5, r5, #2
 80166e6:	d03d      	beq.n	8016764 <__pow5mult+0xa0>
 80166e8:	69fc      	ldr	r4, [r7, #28]
 80166ea:	b97c      	cbnz	r4, 801670c <__pow5mult+0x48>
 80166ec:	2010      	movs	r0, #16
 80166ee:	f7ff fd35 	bl	801615c <malloc>
 80166f2:	4602      	mov	r2, r0
 80166f4:	61f8      	str	r0, [r7, #28]
 80166f6:	b928      	cbnz	r0, 8016704 <__pow5mult+0x40>
 80166f8:	4b1d      	ldr	r3, [pc, #116]	@ (8016770 <__pow5mult+0xac>)
 80166fa:	481e      	ldr	r0, [pc, #120]	@ (8016774 <__pow5mult+0xb0>)
 80166fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016700:	f001 fd36 	bl	8018170 <__assert_func>
 8016704:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016708:	6004      	str	r4, [r0, #0]
 801670a:	60c4      	str	r4, [r0, #12]
 801670c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016710:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016714:	b94c      	cbnz	r4, 801672a <__pow5mult+0x66>
 8016716:	f240 2171 	movw	r1, #625	@ 0x271
 801671a:	4638      	mov	r0, r7
 801671c:	f7ff ff12 	bl	8016544 <__i2b>
 8016720:	2300      	movs	r3, #0
 8016722:	f8c8 0008 	str.w	r0, [r8, #8]
 8016726:	4604      	mov	r4, r0
 8016728:	6003      	str	r3, [r0, #0]
 801672a:	f04f 0900 	mov.w	r9, #0
 801672e:	07eb      	lsls	r3, r5, #31
 8016730:	d50a      	bpl.n	8016748 <__pow5mult+0x84>
 8016732:	4631      	mov	r1, r6
 8016734:	4622      	mov	r2, r4
 8016736:	4638      	mov	r0, r7
 8016738:	f7ff ff1a 	bl	8016570 <__multiply>
 801673c:	4631      	mov	r1, r6
 801673e:	4680      	mov	r8, r0
 8016740:	4638      	mov	r0, r7
 8016742:	f7ff fe01 	bl	8016348 <_Bfree>
 8016746:	4646      	mov	r6, r8
 8016748:	106d      	asrs	r5, r5, #1
 801674a:	d00b      	beq.n	8016764 <__pow5mult+0xa0>
 801674c:	6820      	ldr	r0, [r4, #0]
 801674e:	b938      	cbnz	r0, 8016760 <__pow5mult+0x9c>
 8016750:	4622      	mov	r2, r4
 8016752:	4621      	mov	r1, r4
 8016754:	4638      	mov	r0, r7
 8016756:	f7ff ff0b 	bl	8016570 <__multiply>
 801675a:	6020      	str	r0, [r4, #0]
 801675c:	f8c0 9000 	str.w	r9, [r0]
 8016760:	4604      	mov	r4, r0
 8016762:	e7e4      	b.n	801672e <__pow5mult+0x6a>
 8016764:	4630      	mov	r0, r6
 8016766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801676a:	bf00      	nop
 801676c:	08027918 	.word	0x08027918
 8016770:	0802783e 	.word	0x0802783e
 8016774:	080278be 	.word	0x080278be

08016778 <__lshift>:
 8016778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801677c:	460c      	mov	r4, r1
 801677e:	6849      	ldr	r1, [r1, #4]
 8016780:	6923      	ldr	r3, [r4, #16]
 8016782:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016786:	68a3      	ldr	r3, [r4, #8]
 8016788:	4607      	mov	r7, r0
 801678a:	4691      	mov	r9, r2
 801678c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016790:	f108 0601 	add.w	r6, r8, #1
 8016794:	42b3      	cmp	r3, r6
 8016796:	db0b      	blt.n	80167b0 <__lshift+0x38>
 8016798:	4638      	mov	r0, r7
 801679a:	f7ff fd95 	bl	80162c8 <_Balloc>
 801679e:	4605      	mov	r5, r0
 80167a0:	b948      	cbnz	r0, 80167b6 <__lshift+0x3e>
 80167a2:	4602      	mov	r2, r0
 80167a4:	4b28      	ldr	r3, [pc, #160]	@ (8016848 <__lshift+0xd0>)
 80167a6:	4829      	ldr	r0, [pc, #164]	@ (801684c <__lshift+0xd4>)
 80167a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80167ac:	f001 fce0 	bl	8018170 <__assert_func>
 80167b0:	3101      	adds	r1, #1
 80167b2:	005b      	lsls	r3, r3, #1
 80167b4:	e7ee      	b.n	8016794 <__lshift+0x1c>
 80167b6:	2300      	movs	r3, #0
 80167b8:	f100 0114 	add.w	r1, r0, #20
 80167bc:	f100 0210 	add.w	r2, r0, #16
 80167c0:	4618      	mov	r0, r3
 80167c2:	4553      	cmp	r3, sl
 80167c4:	db33      	blt.n	801682e <__lshift+0xb6>
 80167c6:	6920      	ldr	r0, [r4, #16]
 80167c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80167cc:	f104 0314 	add.w	r3, r4, #20
 80167d0:	f019 091f 	ands.w	r9, r9, #31
 80167d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80167d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80167dc:	d02b      	beq.n	8016836 <__lshift+0xbe>
 80167de:	f1c9 0e20 	rsb	lr, r9, #32
 80167e2:	468a      	mov	sl, r1
 80167e4:	2200      	movs	r2, #0
 80167e6:	6818      	ldr	r0, [r3, #0]
 80167e8:	fa00 f009 	lsl.w	r0, r0, r9
 80167ec:	4310      	orrs	r0, r2
 80167ee:	f84a 0b04 	str.w	r0, [sl], #4
 80167f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80167f6:	459c      	cmp	ip, r3
 80167f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80167fc:	d8f3      	bhi.n	80167e6 <__lshift+0x6e>
 80167fe:	ebac 0304 	sub.w	r3, ip, r4
 8016802:	3b15      	subs	r3, #21
 8016804:	f023 0303 	bic.w	r3, r3, #3
 8016808:	3304      	adds	r3, #4
 801680a:	f104 0015 	add.w	r0, r4, #21
 801680e:	4584      	cmp	ip, r0
 8016810:	bf38      	it	cc
 8016812:	2304      	movcc	r3, #4
 8016814:	50ca      	str	r2, [r1, r3]
 8016816:	b10a      	cbz	r2, 801681c <__lshift+0xa4>
 8016818:	f108 0602 	add.w	r6, r8, #2
 801681c:	3e01      	subs	r6, #1
 801681e:	4638      	mov	r0, r7
 8016820:	612e      	str	r6, [r5, #16]
 8016822:	4621      	mov	r1, r4
 8016824:	f7ff fd90 	bl	8016348 <_Bfree>
 8016828:	4628      	mov	r0, r5
 801682a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801682e:	f842 0f04 	str.w	r0, [r2, #4]!
 8016832:	3301      	adds	r3, #1
 8016834:	e7c5      	b.n	80167c2 <__lshift+0x4a>
 8016836:	3904      	subs	r1, #4
 8016838:	f853 2b04 	ldr.w	r2, [r3], #4
 801683c:	f841 2f04 	str.w	r2, [r1, #4]!
 8016840:	459c      	cmp	ip, r3
 8016842:	d8f9      	bhi.n	8016838 <__lshift+0xc0>
 8016844:	e7ea      	b.n	801681c <__lshift+0xa4>
 8016846:	bf00      	nop
 8016848:	080278ad 	.word	0x080278ad
 801684c:	080278be 	.word	0x080278be

08016850 <__mcmp>:
 8016850:	690a      	ldr	r2, [r1, #16]
 8016852:	4603      	mov	r3, r0
 8016854:	6900      	ldr	r0, [r0, #16]
 8016856:	1a80      	subs	r0, r0, r2
 8016858:	b530      	push	{r4, r5, lr}
 801685a:	d10e      	bne.n	801687a <__mcmp+0x2a>
 801685c:	3314      	adds	r3, #20
 801685e:	3114      	adds	r1, #20
 8016860:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016864:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016868:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801686c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016870:	4295      	cmp	r5, r2
 8016872:	d003      	beq.n	801687c <__mcmp+0x2c>
 8016874:	d205      	bcs.n	8016882 <__mcmp+0x32>
 8016876:	f04f 30ff 	mov.w	r0, #4294967295
 801687a:	bd30      	pop	{r4, r5, pc}
 801687c:	42a3      	cmp	r3, r4
 801687e:	d3f3      	bcc.n	8016868 <__mcmp+0x18>
 8016880:	e7fb      	b.n	801687a <__mcmp+0x2a>
 8016882:	2001      	movs	r0, #1
 8016884:	e7f9      	b.n	801687a <__mcmp+0x2a>
	...

08016888 <__mdiff>:
 8016888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801688c:	4689      	mov	r9, r1
 801688e:	4606      	mov	r6, r0
 8016890:	4611      	mov	r1, r2
 8016892:	4648      	mov	r0, r9
 8016894:	4614      	mov	r4, r2
 8016896:	f7ff ffdb 	bl	8016850 <__mcmp>
 801689a:	1e05      	subs	r5, r0, #0
 801689c:	d112      	bne.n	80168c4 <__mdiff+0x3c>
 801689e:	4629      	mov	r1, r5
 80168a0:	4630      	mov	r0, r6
 80168a2:	f7ff fd11 	bl	80162c8 <_Balloc>
 80168a6:	4602      	mov	r2, r0
 80168a8:	b928      	cbnz	r0, 80168b6 <__mdiff+0x2e>
 80168aa:	4b3f      	ldr	r3, [pc, #252]	@ (80169a8 <__mdiff+0x120>)
 80168ac:	f240 2137 	movw	r1, #567	@ 0x237
 80168b0:	483e      	ldr	r0, [pc, #248]	@ (80169ac <__mdiff+0x124>)
 80168b2:	f001 fc5d 	bl	8018170 <__assert_func>
 80168b6:	2301      	movs	r3, #1
 80168b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80168bc:	4610      	mov	r0, r2
 80168be:	b003      	add	sp, #12
 80168c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168c4:	bfbc      	itt	lt
 80168c6:	464b      	movlt	r3, r9
 80168c8:	46a1      	movlt	r9, r4
 80168ca:	4630      	mov	r0, r6
 80168cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80168d0:	bfba      	itte	lt
 80168d2:	461c      	movlt	r4, r3
 80168d4:	2501      	movlt	r5, #1
 80168d6:	2500      	movge	r5, #0
 80168d8:	f7ff fcf6 	bl	80162c8 <_Balloc>
 80168dc:	4602      	mov	r2, r0
 80168de:	b918      	cbnz	r0, 80168e8 <__mdiff+0x60>
 80168e0:	4b31      	ldr	r3, [pc, #196]	@ (80169a8 <__mdiff+0x120>)
 80168e2:	f240 2145 	movw	r1, #581	@ 0x245
 80168e6:	e7e3      	b.n	80168b0 <__mdiff+0x28>
 80168e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80168ec:	6926      	ldr	r6, [r4, #16]
 80168ee:	60c5      	str	r5, [r0, #12]
 80168f0:	f109 0310 	add.w	r3, r9, #16
 80168f4:	f109 0514 	add.w	r5, r9, #20
 80168f8:	f104 0e14 	add.w	lr, r4, #20
 80168fc:	f100 0b14 	add.w	fp, r0, #20
 8016900:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016904:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016908:	9301      	str	r3, [sp, #4]
 801690a:	46d9      	mov	r9, fp
 801690c:	f04f 0c00 	mov.w	ip, #0
 8016910:	9b01      	ldr	r3, [sp, #4]
 8016912:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016916:	f853 af04 	ldr.w	sl, [r3, #4]!
 801691a:	9301      	str	r3, [sp, #4]
 801691c:	fa1f f38a 	uxth.w	r3, sl
 8016920:	4619      	mov	r1, r3
 8016922:	b283      	uxth	r3, r0
 8016924:	1acb      	subs	r3, r1, r3
 8016926:	0c00      	lsrs	r0, r0, #16
 8016928:	4463      	add	r3, ip
 801692a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801692e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016932:	b29b      	uxth	r3, r3
 8016934:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016938:	4576      	cmp	r6, lr
 801693a:	f849 3b04 	str.w	r3, [r9], #4
 801693e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016942:	d8e5      	bhi.n	8016910 <__mdiff+0x88>
 8016944:	1b33      	subs	r3, r6, r4
 8016946:	3b15      	subs	r3, #21
 8016948:	f023 0303 	bic.w	r3, r3, #3
 801694c:	3415      	adds	r4, #21
 801694e:	3304      	adds	r3, #4
 8016950:	42a6      	cmp	r6, r4
 8016952:	bf38      	it	cc
 8016954:	2304      	movcc	r3, #4
 8016956:	441d      	add	r5, r3
 8016958:	445b      	add	r3, fp
 801695a:	461e      	mov	r6, r3
 801695c:	462c      	mov	r4, r5
 801695e:	4544      	cmp	r4, r8
 8016960:	d30e      	bcc.n	8016980 <__mdiff+0xf8>
 8016962:	f108 0103 	add.w	r1, r8, #3
 8016966:	1b49      	subs	r1, r1, r5
 8016968:	f021 0103 	bic.w	r1, r1, #3
 801696c:	3d03      	subs	r5, #3
 801696e:	45a8      	cmp	r8, r5
 8016970:	bf38      	it	cc
 8016972:	2100      	movcc	r1, #0
 8016974:	440b      	add	r3, r1
 8016976:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801697a:	b191      	cbz	r1, 80169a2 <__mdiff+0x11a>
 801697c:	6117      	str	r7, [r2, #16]
 801697e:	e79d      	b.n	80168bc <__mdiff+0x34>
 8016980:	f854 1b04 	ldr.w	r1, [r4], #4
 8016984:	46e6      	mov	lr, ip
 8016986:	0c08      	lsrs	r0, r1, #16
 8016988:	fa1c fc81 	uxtah	ip, ip, r1
 801698c:	4471      	add	r1, lr
 801698e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016992:	b289      	uxth	r1, r1
 8016994:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016998:	f846 1b04 	str.w	r1, [r6], #4
 801699c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80169a0:	e7dd      	b.n	801695e <__mdiff+0xd6>
 80169a2:	3f01      	subs	r7, #1
 80169a4:	e7e7      	b.n	8016976 <__mdiff+0xee>
 80169a6:	bf00      	nop
 80169a8:	080278ad 	.word	0x080278ad
 80169ac:	080278be 	.word	0x080278be

080169b0 <__ulp>:
 80169b0:	b082      	sub	sp, #8
 80169b2:	ed8d 0b00 	vstr	d0, [sp]
 80169b6:	9a01      	ldr	r2, [sp, #4]
 80169b8:	4b0f      	ldr	r3, [pc, #60]	@ (80169f8 <__ulp+0x48>)
 80169ba:	4013      	ands	r3, r2
 80169bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	dc08      	bgt.n	80169d6 <__ulp+0x26>
 80169c4:	425b      	negs	r3, r3
 80169c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80169ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80169ce:	da04      	bge.n	80169da <__ulp+0x2a>
 80169d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80169d4:	4113      	asrs	r3, r2
 80169d6:	2200      	movs	r2, #0
 80169d8:	e008      	b.n	80169ec <__ulp+0x3c>
 80169da:	f1a2 0314 	sub.w	r3, r2, #20
 80169de:	2b1e      	cmp	r3, #30
 80169e0:	bfda      	itte	le
 80169e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80169e6:	40da      	lsrle	r2, r3
 80169e8:	2201      	movgt	r2, #1
 80169ea:	2300      	movs	r3, #0
 80169ec:	4619      	mov	r1, r3
 80169ee:	4610      	mov	r0, r2
 80169f0:	ec41 0b10 	vmov	d0, r0, r1
 80169f4:	b002      	add	sp, #8
 80169f6:	4770      	bx	lr
 80169f8:	7ff00000 	.word	0x7ff00000

080169fc <__b2d>:
 80169fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a00:	6906      	ldr	r6, [r0, #16]
 8016a02:	f100 0814 	add.w	r8, r0, #20
 8016a06:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016a0a:	1f37      	subs	r7, r6, #4
 8016a0c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016a10:	4610      	mov	r0, r2
 8016a12:	f7ff fd4b 	bl	80164ac <__hi0bits>
 8016a16:	f1c0 0320 	rsb	r3, r0, #32
 8016a1a:	280a      	cmp	r0, #10
 8016a1c:	600b      	str	r3, [r1, #0]
 8016a1e:	491b      	ldr	r1, [pc, #108]	@ (8016a8c <__b2d+0x90>)
 8016a20:	dc15      	bgt.n	8016a4e <__b2d+0x52>
 8016a22:	f1c0 0c0b 	rsb	ip, r0, #11
 8016a26:	fa22 f30c 	lsr.w	r3, r2, ip
 8016a2a:	45b8      	cmp	r8, r7
 8016a2c:	ea43 0501 	orr.w	r5, r3, r1
 8016a30:	bf34      	ite	cc
 8016a32:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016a36:	2300      	movcs	r3, #0
 8016a38:	3015      	adds	r0, #21
 8016a3a:	fa02 f000 	lsl.w	r0, r2, r0
 8016a3e:	fa23 f30c 	lsr.w	r3, r3, ip
 8016a42:	4303      	orrs	r3, r0
 8016a44:	461c      	mov	r4, r3
 8016a46:	ec45 4b10 	vmov	d0, r4, r5
 8016a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a4e:	45b8      	cmp	r8, r7
 8016a50:	bf3a      	itte	cc
 8016a52:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016a56:	f1a6 0708 	subcc.w	r7, r6, #8
 8016a5a:	2300      	movcs	r3, #0
 8016a5c:	380b      	subs	r0, #11
 8016a5e:	d012      	beq.n	8016a86 <__b2d+0x8a>
 8016a60:	f1c0 0120 	rsb	r1, r0, #32
 8016a64:	fa23 f401 	lsr.w	r4, r3, r1
 8016a68:	4082      	lsls	r2, r0
 8016a6a:	4322      	orrs	r2, r4
 8016a6c:	4547      	cmp	r7, r8
 8016a6e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016a72:	bf8c      	ite	hi
 8016a74:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016a78:	2200      	movls	r2, #0
 8016a7a:	4083      	lsls	r3, r0
 8016a7c:	40ca      	lsrs	r2, r1
 8016a7e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016a82:	4313      	orrs	r3, r2
 8016a84:	e7de      	b.n	8016a44 <__b2d+0x48>
 8016a86:	ea42 0501 	orr.w	r5, r2, r1
 8016a8a:	e7db      	b.n	8016a44 <__b2d+0x48>
 8016a8c:	3ff00000 	.word	0x3ff00000

08016a90 <__d2b>:
 8016a90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016a94:	460f      	mov	r7, r1
 8016a96:	2101      	movs	r1, #1
 8016a98:	ec59 8b10 	vmov	r8, r9, d0
 8016a9c:	4616      	mov	r6, r2
 8016a9e:	f7ff fc13 	bl	80162c8 <_Balloc>
 8016aa2:	4604      	mov	r4, r0
 8016aa4:	b930      	cbnz	r0, 8016ab4 <__d2b+0x24>
 8016aa6:	4602      	mov	r2, r0
 8016aa8:	4b23      	ldr	r3, [pc, #140]	@ (8016b38 <__d2b+0xa8>)
 8016aaa:	4824      	ldr	r0, [pc, #144]	@ (8016b3c <__d2b+0xac>)
 8016aac:	f240 310f 	movw	r1, #783	@ 0x30f
 8016ab0:	f001 fb5e 	bl	8018170 <__assert_func>
 8016ab4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016ab8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016abc:	b10d      	cbz	r5, 8016ac2 <__d2b+0x32>
 8016abe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016ac2:	9301      	str	r3, [sp, #4]
 8016ac4:	f1b8 0300 	subs.w	r3, r8, #0
 8016ac8:	d023      	beq.n	8016b12 <__d2b+0x82>
 8016aca:	4668      	mov	r0, sp
 8016acc:	9300      	str	r3, [sp, #0]
 8016ace:	f7ff fd0c 	bl	80164ea <__lo0bits>
 8016ad2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016ad6:	b1d0      	cbz	r0, 8016b0e <__d2b+0x7e>
 8016ad8:	f1c0 0320 	rsb	r3, r0, #32
 8016adc:	fa02 f303 	lsl.w	r3, r2, r3
 8016ae0:	430b      	orrs	r3, r1
 8016ae2:	40c2      	lsrs	r2, r0
 8016ae4:	6163      	str	r3, [r4, #20]
 8016ae6:	9201      	str	r2, [sp, #4]
 8016ae8:	9b01      	ldr	r3, [sp, #4]
 8016aea:	61a3      	str	r3, [r4, #24]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	bf0c      	ite	eq
 8016af0:	2201      	moveq	r2, #1
 8016af2:	2202      	movne	r2, #2
 8016af4:	6122      	str	r2, [r4, #16]
 8016af6:	b1a5      	cbz	r5, 8016b22 <__d2b+0x92>
 8016af8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016afc:	4405      	add	r5, r0
 8016afe:	603d      	str	r5, [r7, #0]
 8016b00:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016b04:	6030      	str	r0, [r6, #0]
 8016b06:	4620      	mov	r0, r4
 8016b08:	b003      	add	sp, #12
 8016b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b0e:	6161      	str	r1, [r4, #20]
 8016b10:	e7ea      	b.n	8016ae8 <__d2b+0x58>
 8016b12:	a801      	add	r0, sp, #4
 8016b14:	f7ff fce9 	bl	80164ea <__lo0bits>
 8016b18:	9b01      	ldr	r3, [sp, #4]
 8016b1a:	6163      	str	r3, [r4, #20]
 8016b1c:	3020      	adds	r0, #32
 8016b1e:	2201      	movs	r2, #1
 8016b20:	e7e8      	b.n	8016af4 <__d2b+0x64>
 8016b22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016b26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016b2a:	6038      	str	r0, [r7, #0]
 8016b2c:	6918      	ldr	r0, [r3, #16]
 8016b2e:	f7ff fcbd 	bl	80164ac <__hi0bits>
 8016b32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016b36:	e7e5      	b.n	8016b04 <__d2b+0x74>
 8016b38:	080278ad 	.word	0x080278ad
 8016b3c:	080278be 	.word	0x080278be

08016b40 <__ratio>:
 8016b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b44:	b085      	sub	sp, #20
 8016b46:	e9cd 1000 	strd	r1, r0, [sp]
 8016b4a:	a902      	add	r1, sp, #8
 8016b4c:	f7ff ff56 	bl	80169fc <__b2d>
 8016b50:	9800      	ldr	r0, [sp, #0]
 8016b52:	a903      	add	r1, sp, #12
 8016b54:	ec55 4b10 	vmov	r4, r5, d0
 8016b58:	f7ff ff50 	bl	80169fc <__b2d>
 8016b5c:	9b01      	ldr	r3, [sp, #4]
 8016b5e:	6919      	ldr	r1, [r3, #16]
 8016b60:	9b00      	ldr	r3, [sp, #0]
 8016b62:	691b      	ldr	r3, [r3, #16]
 8016b64:	1ac9      	subs	r1, r1, r3
 8016b66:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8016b6a:	1a9b      	subs	r3, r3, r2
 8016b6c:	ec5b ab10 	vmov	sl, fp, d0
 8016b70:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	bfce      	itee	gt
 8016b78:	462a      	movgt	r2, r5
 8016b7a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016b7e:	465a      	movle	r2, fp
 8016b80:	462f      	mov	r7, r5
 8016b82:	46d9      	mov	r9, fp
 8016b84:	bfcc      	ite	gt
 8016b86:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016b8a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8016b8e:	464b      	mov	r3, r9
 8016b90:	4652      	mov	r2, sl
 8016b92:	4620      	mov	r0, r4
 8016b94:	4639      	mov	r1, r7
 8016b96:	f7e9 fe81 	bl	800089c <__aeabi_ddiv>
 8016b9a:	ec41 0b10 	vmov	d0, r0, r1
 8016b9e:	b005      	add	sp, #20
 8016ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016ba4 <__copybits>:
 8016ba4:	3901      	subs	r1, #1
 8016ba6:	b570      	push	{r4, r5, r6, lr}
 8016ba8:	1149      	asrs	r1, r1, #5
 8016baa:	6914      	ldr	r4, [r2, #16]
 8016bac:	3101      	adds	r1, #1
 8016bae:	f102 0314 	add.w	r3, r2, #20
 8016bb2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016bb6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016bba:	1f05      	subs	r5, r0, #4
 8016bbc:	42a3      	cmp	r3, r4
 8016bbe:	d30c      	bcc.n	8016bda <__copybits+0x36>
 8016bc0:	1aa3      	subs	r3, r4, r2
 8016bc2:	3b11      	subs	r3, #17
 8016bc4:	f023 0303 	bic.w	r3, r3, #3
 8016bc8:	3211      	adds	r2, #17
 8016bca:	42a2      	cmp	r2, r4
 8016bcc:	bf88      	it	hi
 8016bce:	2300      	movhi	r3, #0
 8016bd0:	4418      	add	r0, r3
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	4288      	cmp	r0, r1
 8016bd6:	d305      	bcc.n	8016be4 <__copybits+0x40>
 8016bd8:	bd70      	pop	{r4, r5, r6, pc}
 8016bda:	f853 6b04 	ldr.w	r6, [r3], #4
 8016bde:	f845 6f04 	str.w	r6, [r5, #4]!
 8016be2:	e7eb      	b.n	8016bbc <__copybits+0x18>
 8016be4:	f840 3b04 	str.w	r3, [r0], #4
 8016be8:	e7f4      	b.n	8016bd4 <__copybits+0x30>

08016bea <__any_on>:
 8016bea:	f100 0214 	add.w	r2, r0, #20
 8016bee:	6900      	ldr	r0, [r0, #16]
 8016bf0:	114b      	asrs	r3, r1, #5
 8016bf2:	4298      	cmp	r0, r3
 8016bf4:	b510      	push	{r4, lr}
 8016bf6:	db11      	blt.n	8016c1c <__any_on+0x32>
 8016bf8:	dd0a      	ble.n	8016c10 <__any_on+0x26>
 8016bfa:	f011 011f 	ands.w	r1, r1, #31
 8016bfe:	d007      	beq.n	8016c10 <__any_on+0x26>
 8016c00:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016c04:	fa24 f001 	lsr.w	r0, r4, r1
 8016c08:	fa00 f101 	lsl.w	r1, r0, r1
 8016c0c:	428c      	cmp	r4, r1
 8016c0e:	d10b      	bne.n	8016c28 <__any_on+0x3e>
 8016c10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016c14:	4293      	cmp	r3, r2
 8016c16:	d803      	bhi.n	8016c20 <__any_on+0x36>
 8016c18:	2000      	movs	r0, #0
 8016c1a:	bd10      	pop	{r4, pc}
 8016c1c:	4603      	mov	r3, r0
 8016c1e:	e7f7      	b.n	8016c10 <__any_on+0x26>
 8016c20:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016c24:	2900      	cmp	r1, #0
 8016c26:	d0f5      	beq.n	8016c14 <__any_on+0x2a>
 8016c28:	2001      	movs	r0, #1
 8016c2a:	e7f6      	b.n	8016c1a <__any_on+0x30>

08016c2c <sulp>:
 8016c2c:	b570      	push	{r4, r5, r6, lr}
 8016c2e:	4604      	mov	r4, r0
 8016c30:	460d      	mov	r5, r1
 8016c32:	ec45 4b10 	vmov	d0, r4, r5
 8016c36:	4616      	mov	r6, r2
 8016c38:	f7ff feba 	bl	80169b0 <__ulp>
 8016c3c:	ec51 0b10 	vmov	r0, r1, d0
 8016c40:	b17e      	cbz	r6, 8016c62 <sulp+0x36>
 8016c42:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016c46:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	dd09      	ble.n	8016c62 <sulp+0x36>
 8016c4e:	051b      	lsls	r3, r3, #20
 8016c50:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8016c54:	2400      	movs	r4, #0
 8016c56:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8016c5a:	4622      	mov	r2, r4
 8016c5c:	462b      	mov	r3, r5
 8016c5e:	f7e9 fcf3 	bl	8000648 <__aeabi_dmul>
 8016c62:	ec41 0b10 	vmov	d0, r0, r1
 8016c66:	bd70      	pop	{r4, r5, r6, pc}

08016c68 <_strtod_l>:
 8016c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c6c:	b09f      	sub	sp, #124	@ 0x7c
 8016c6e:	460c      	mov	r4, r1
 8016c70:	9217      	str	r2, [sp, #92]	@ 0x5c
 8016c72:	2200      	movs	r2, #0
 8016c74:	921a      	str	r2, [sp, #104]	@ 0x68
 8016c76:	9005      	str	r0, [sp, #20]
 8016c78:	f04f 0a00 	mov.w	sl, #0
 8016c7c:	f04f 0b00 	mov.w	fp, #0
 8016c80:	460a      	mov	r2, r1
 8016c82:	9219      	str	r2, [sp, #100]	@ 0x64
 8016c84:	7811      	ldrb	r1, [r2, #0]
 8016c86:	292b      	cmp	r1, #43	@ 0x2b
 8016c88:	d04a      	beq.n	8016d20 <_strtod_l+0xb8>
 8016c8a:	d838      	bhi.n	8016cfe <_strtod_l+0x96>
 8016c8c:	290d      	cmp	r1, #13
 8016c8e:	d832      	bhi.n	8016cf6 <_strtod_l+0x8e>
 8016c90:	2908      	cmp	r1, #8
 8016c92:	d832      	bhi.n	8016cfa <_strtod_l+0x92>
 8016c94:	2900      	cmp	r1, #0
 8016c96:	d03b      	beq.n	8016d10 <_strtod_l+0xa8>
 8016c98:	2200      	movs	r2, #0
 8016c9a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016c9c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8016c9e:	782a      	ldrb	r2, [r5, #0]
 8016ca0:	2a30      	cmp	r2, #48	@ 0x30
 8016ca2:	f040 80b3 	bne.w	8016e0c <_strtod_l+0x1a4>
 8016ca6:	786a      	ldrb	r2, [r5, #1]
 8016ca8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016cac:	2a58      	cmp	r2, #88	@ 0x58
 8016cae:	d16e      	bne.n	8016d8e <_strtod_l+0x126>
 8016cb0:	9302      	str	r3, [sp, #8]
 8016cb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016cb4:	9301      	str	r3, [sp, #4]
 8016cb6:	ab1a      	add	r3, sp, #104	@ 0x68
 8016cb8:	9300      	str	r3, [sp, #0]
 8016cba:	4a8e      	ldr	r2, [pc, #568]	@ (8016ef4 <_strtod_l+0x28c>)
 8016cbc:	9805      	ldr	r0, [sp, #20]
 8016cbe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016cc0:	a919      	add	r1, sp, #100	@ 0x64
 8016cc2:	f001 faef 	bl	80182a4 <__gethex>
 8016cc6:	f010 060f 	ands.w	r6, r0, #15
 8016cca:	4604      	mov	r4, r0
 8016ccc:	d005      	beq.n	8016cda <_strtod_l+0x72>
 8016cce:	2e06      	cmp	r6, #6
 8016cd0:	d128      	bne.n	8016d24 <_strtod_l+0xbc>
 8016cd2:	3501      	adds	r5, #1
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	9519      	str	r5, [sp, #100]	@ 0x64
 8016cd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016cda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	f040 858e 	bne.w	80177fe <_strtod_l+0xb96>
 8016ce2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016ce4:	b1cb      	cbz	r3, 8016d1a <_strtod_l+0xb2>
 8016ce6:	4652      	mov	r2, sl
 8016ce8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8016cec:	ec43 2b10 	vmov	d0, r2, r3
 8016cf0:	b01f      	add	sp, #124	@ 0x7c
 8016cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cf6:	2920      	cmp	r1, #32
 8016cf8:	d1ce      	bne.n	8016c98 <_strtod_l+0x30>
 8016cfa:	3201      	adds	r2, #1
 8016cfc:	e7c1      	b.n	8016c82 <_strtod_l+0x1a>
 8016cfe:	292d      	cmp	r1, #45	@ 0x2d
 8016d00:	d1ca      	bne.n	8016c98 <_strtod_l+0x30>
 8016d02:	2101      	movs	r1, #1
 8016d04:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016d06:	1c51      	adds	r1, r2, #1
 8016d08:	9119      	str	r1, [sp, #100]	@ 0x64
 8016d0a:	7852      	ldrb	r2, [r2, #1]
 8016d0c:	2a00      	cmp	r2, #0
 8016d0e:	d1c5      	bne.n	8016c9c <_strtod_l+0x34>
 8016d10:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016d12:	9419      	str	r4, [sp, #100]	@ 0x64
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	f040 8570 	bne.w	80177fa <_strtod_l+0xb92>
 8016d1a:	4652      	mov	r2, sl
 8016d1c:	465b      	mov	r3, fp
 8016d1e:	e7e5      	b.n	8016cec <_strtod_l+0x84>
 8016d20:	2100      	movs	r1, #0
 8016d22:	e7ef      	b.n	8016d04 <_strtod_l+0x9c>
 8016d24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016d26:	b13a      	cbz	r2, 8016d38 <_strtod_l+0xd0>
 8016d28:	2135      	movs	r1, #53	@ 0x35
 8016d2a:	a81c      	add	r0, sp, #112	@ 0x70
 8016d2c:	f7ff ff3a 	bl	8016ba4 <__copybits>
 8016d30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016d32:	9805      	ldr	r0, [sp, #20]
 8016d34:	f7ff fb08 	bl	8016348 <_Bfree>
 8016d38:	3e01      	subs	r6, #1
 8016d3a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016d3c:	2e04      	cmp	r6, #4
 8016d3e:	d806      	bhi.n	8016d4e <_strtod_l+0xe6>
 8016d40:	e8df f006 	tbb	[pc, r6]
 8016d44:	201d0314 	.word	0x201d0314
 8016d48:	14          	.byte	0x14
 8016d49:	00          	.byte	0x00
 8016d4a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8016d4e:	05e1      	lsls	r1, r4, #23
 8016d50:	bf48      	it	mi
 8016d52:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016d56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016d5a:	0d1b      	lsrs	r3, r3, #20
 8016d5c:	051b      	lsls	r3, r3, #20
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d1bb      	bne.n	8016cda <_strtod_l+0x72>
 8016d62:	f7fe fb31 	bl	80153c8 <__errno>
 8016d66:	2322      	movs	r3, #34	@ 0x22
 8016d68:	6003      	str	r3, [r0, #0]
 8016d6a:	e7b6      	b.n	8016cda <_strtod_l+0x72>
 8016d6c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8016d70:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016d74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016d78:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016d7c:	e7e7      	b.n	8016d4e <_strtod_l+0xe6>
 8016d7e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8016efc <_strtod_l+0x294>
 8016d82:	e7e4      	b.n	8016d4e <_strtod_l+0xe6>
 8016d84:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016d88:	f04f 3aff 	mov.w	sl, #4294967295
 8016d8c:	e7df      	b.n	8016d4e <_strtod_l+0xe6>
 8016d8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d90:	1c5a      	adds	r2, r3, #1
 8016d92:	9219      	str	r2, [sp, #100]	@ 0x64
 8016d94:	785b      	ldrb	r3, [r3, #1]
 8016d96:	2b30      	cmp	r3, #48	@ 0x30
 8016d98:	d0f9      	beq.n	8016d8e <_strtod_l+0x126>
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d09d      	beq.n	8016cda <_strtod_l+0x72>
 8016d9e:	2301      	movs	r3, #1
 8016da0:	9309      	str	r3, [sp, #36]	@ 0x24
 8016da2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016da4:	930c      	str	r3, [sp, #48]	@ 0x30
 8016da6:	2300      	movs	r3, #0
 8016da8:	9308      	str	r3, [sp, #32]
 8016daa:	930a      	str	r3, [sp, #40]	@ 0x28
 8016dac:	461f      	mov	r7, r3
 8016dae:	220a      	movs	r2, #10
 8016db0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8016db2:	7805      	ldrb	r5, [r0, #0]
 8016db4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8016db8:	b2d9      	uxtb	r1, r3
 8016dba:	2909      	cmp	r1, #9
 8016dbc:	d928      	bls.n	8016e10 <_strtod_l+0x1a8>
 8016dbe:	494e      	ldr	r1, [pc, #312]	@ (8016ef8 <_strtod_l+0x290>)
 8016dc0:	2201      	movs	r2, #1
 8016dc2:	f001 f979 	bl	80180b8 <strncmp>
 8016dc6:	2800      	cmp	r0, #0
 8016dc8:	d032      	beq.n	8016e30 <_strtod_l+0x1c8>
 8016dca:	2000      	movs	r0, #0
 8016dcc:	462a      	mov	r2, r5
 8016dce:	4681      	mov	r9, r0
 8016dd0:	463d      	mov	r5, r7
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	2a65      	cmp	r2, #101	@ 0x65
 8016dd6:	d001      	beq.n	8016ddc <_strtod_l+0x174>
 8016dd8:	2a45      	cmp	r2, #69	@ 0x45
 8016dda:	d114      	bne.n	8016e06 <_strtod_l+0x19e>
 8016ddc:	b91d      	cbnz	r5, 8016de6 <_strtod_l+0x17e>
 8016dde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016de0:	4302      	orrs	r2, r0
 8016de2:	d095      	beq.n	8016d10 <_strtod_l+0xa8>
 8016de4:	2500      	movs	r5, #0
 8016de6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8016de8:	1c62      	adds	r2, r4, #1
 8016dea:	9219      	str	r2, [sp, #100]	@ 0x64
 8016dec:	7862      	ldrb	r2, [r4, #1]
 8016dee:	2a2b      	cmp	r2, #43	@ 0x2b
 8016df0:	d077      	beq.n	8016ee2 <_strtod_l+0x27a>
 8016df2:	2a2d      	cmp	r2, #45	@ 0x2d
 8016df4:	d07b      	beq.n	8016eee <_strtod_l+0x286>
 8016df6:	f04f 0c00 	mov.w	ip, #0
 8016dfa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016dfe:	2909      	cmp	r1, #9
 8016e00:	f240 8082 	bls.w	8016f08 <_strtod_l+0x2a0>
 8016e04:	9419      	str	r4, [sp, #100]	@ 0x64
 8016e06:	f04f 0800 	mov.w	r8, #0
 8016e0a:	e0a2      	b.n	8016f52 <_strtod_l+0x2ea>
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	e7c7      	b.n	8016da0 <_strtod_l+0x138>
 8016e10:	2f08      	cmp	r7, #8
 8016e12:	bfd5      	itete	le
 8016e14:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8016e16:	9908      	ldrgt	r1, [sp, #32]
 8016e18:	fb02 3301 	mlale	r3, r2, r1, r3
 8016e1c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8016e20:	f100 0001 	add.w	r0, r0, #1
 8016e24:	bfd4      	ite	le
 8016e26:	930a      	strle	r3, [sp, #40]	@ 0x28
 8016e28:	9308      	strgt	r3, [sp, #32]
 8016e2a:	3701      	adds	r7, #1
 8016e2c:	9019      	str	r0, [sp, #100]	@ 0x64
 8016e2e:	e7bf      	b.n	8016db0 <_strtod_l+0x148>
 8016e30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016e32:	1c5a      	adds	r2, r3, #1
 8016e34:	9219      	str	r2, [sp, #100]	@ 0x64
 8016e36:	785a      	ldrb	r2, [r3, #1]
 8016e38:	b37f      	cbz	r7, 8016e9a <_strtod_l+0x232>
 8016e3a:	4681      	mov	r9, r0
 8016e3c:	463d      	mov	r5, r7
 8016e3e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8016e42:	2b09      	cmp	r3, #9
 8016e44:	d912      	bls.n	8016e6c <_strtod_l+0x204>
 8016e46:	2301      	movs	r3, #1
 8016e48:	e7c4      	b.n	8016dd4 <_strtod_l+0x16c>
 8016e4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016e4c:	1c5a      	adds	r2, r3, #1
 8016e4e:	9219      	str	r2, [sp, #100]	@ 0x64
 8016e50:	785a      	ldrb	r2, [r3, #1]
 8016e52:	3001      	adds	r0, #1
 8016e54:	2a30      	cmp	r2, #48	@ 0x30
 8016e56:	d0f8      	beq.n	8016e4a <_strtod_l+0x1e2>
 8016e58:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016e5c:	2b08      	cmp	r3, #8
 8016e5e:	f200 84d3 	bhi.w	8017808 <_strtod_l+0xba0>
 8016e62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016e64:	930c      	str	r3, [sp, #48]	@ 0x30
 8016e66:	4681      	mov	r9, r0
 8016e68:	2000      	movs	r0, #0
 8016e6a:	4605      	mov	r5, r0
 8016e6c:	3a30      	subs	r2, #48	@ 0x30
 8016e6e:	f100 0301 	add.w	r3, r0, #1
 8016e72:	d02a      	beq.n	8016eca <_strtod_l+0x262>
 8016e74:	4499      	add	r9, r3
 8016e76:	eb00 0c05 	add.w	ip, r0, r5
 8016e7a:	462b      	mov	r3, r5
 8016e7c:	210a      	movs	r1, #10
 8016e7e:	4563      	cmp	r3, ip
 8016e80:	d10d      	bne.n	8016e9e <_strtod_l+0x236>
 8016e82:	1c69      	adds	r1, r5, #1
 8016e84:	4401      	add	r1, r0
 8016e86:	4428      	add	r0, r5
 8016e88:	2808      	cmp	r0, #8
 8016e8a:	dc16      	bgt.n	8016eba <_strtod_l+0x252>
 8016e8c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016e8e:	230a      	movs	r3, #10
 8016e90:	fb03 2300 	mla	r3, r3, r0, r2
 8016e94:	930a      	str	r3, [sp, #40]	@ 0x28
 8016e96:	2300      	movs	r3, #0
 8016e98:	e018      	b.n	8016ecc <_strtod_l+0x264>
 8016e9a:	4638      	mov	r0, r7
 8016e9c:	e7da      	b.n	8016e54 <_strtod_l+0x1ec>
 8016e9e:	2b08      	cmp	r3, #8
 8016ea0:	f103 0301 	add.w	r3, r3, #1
 8016ea4:	dc03      	bgt.n	8016eae <_strtod_l+0x246>
 8016ea6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8016ea8:	434e      	muls	r6, r1
 8016eaa:	960a      	str	r6, [sp, #40]	@ 0x28
 8016eac:	e7e7      	b.n	8016e7e <_strtod_l+0x216>
 8016eae:	2b10      	cmp	r3, #16
 8016eb0:	bfde      	ittt	le
 8016eb2:	9e08      	ldrle	r6, [sp, #32]
 8016eb4:	434e      	mulle	r6, r1
 8016eb6:	9608      	strle	r6, [sp, #32]
 8016eb8:	e7e1      	b.n	8016e7e <_strtod_l+0x216>
 8016eba:	280f      	cmp	r0, #15
 8016ebc:	dceb      	bgt.n	8016e96 <_strtod_l+0x22e>
 8016ebe:	9808      	ldr	r0, [sp, #32]
 8016ec0:	230a      	movs	r3, #10
 8016ec2:	fb03 2300 	mla	r3, r3, r0, r2
 8016ec6:	9308      	str	r3, [sp, #32]
 8016ec8:	e7e5      	b.n	8016e96 <_strtod_l+0x22e>
 8016eca:	4629      	mov	r1, r5
 8016ecc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016ece:	1c50      	adds	r0, r2, #1
 8016ed0:	9019      	str	r0, [sp, #100]	@ 0x64
 8016ed2:	7852      	ldrb	r2, [r2, #1]
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	460d      	mov	r5, r1
 8016ed8:	e7b1      	b.n	8016e3e <_strtod_l+0x1d6>
 8016eda:	f04f 0900 	mov.w	r9, #0
 8016ede:	2301      	movs	r3, #1
 8016ee0:	e77d      	b.n	8016dde <_strtod_l+0x176>
 8016ee2:	f04f 0c00 	mov.w	ip, #0
 8016ee6:	1ca2      	adds	r2, r4, #2
 8016ee8:	9219      	str	r2, [sp, #100]	@ 0x64
 8016eea:	78a2      	ldrb	r2, [r4, #2]
 8016eec:	e785      	b.n	8016dfa <_strtod_l+0x192>
 8016eee:	f04f 0c01 	mov.w	ip, #1
 8016ef2:	e7f8      	b.n	8016ee6 <_strtod_l+0x27e>
 8016ef4:	08027a30 	.word	0x08027a30
 8016ef8:	08027a18 	.word	0x08027a18
 8016efc:	7ff00000 	.word	0x7ff00000
 8016f00:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016f02:	1c51      	adds	r1, r2, #1
 8016f04:	9119      	str	r1, [sp, #100]	@ 0x64
 8016f06:	7852      	ldrb	r2, [r2, #1]
 8016f08:	2a30      	cmp	r2, #48	@ 0x30
 8016f0a:	d0f9      	beq.n	8016f00 <_strtod_l+0x298>
 8016f0c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8016f10:	2908      	cmp	r1, #8
 8016f12:	f63f af78 	bhi.w	8016e06 <_strtod_l+0x19e>
 8016f16:	3a30      	subs	r2, #48	@ 0x30
 8016f18:	920e      	str	r2, [sp, #56]	@ 0x38
 8016f1a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016f1c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016f1e:	f04f 080a 	mov.w	r8, #10
 8016f22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016f24:	1c56      	adds	r6, r2, #1
 8016f26:	9619      	str	r6, [sp, #100]	@ 0x64
 8016f28:	7852      	ldrb	r2, [r2, #1]
 8016f2a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016f2e:	f1be 0f09 	cmp.w	lr, #9
 8016f32:	d939      	bls.n	8016fa8 <_strtod_l+0x340>
 8016f34:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016f36:	1a76      	subs	r6, r6, r1
 8016f38:	2e08      	cmp	r6, #8
 8016f3a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8016f3e:	dc03      	bgt.n	8016f48 <_strtod_l+0x2e0>
 8016f40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8016f42:	4588      	cmp	r8, r1
 8016f44:	bfa8      	it	ge
 8016f46:	4688      	movge	r8, r1
 8016f48:	f1bc 0f00 	cmp.w	ip, #0
 8016f4c:	d001      	beq.n	8016f52 <_strtod_l+0x2ea>
 8016f4e:	f1c8 0800 	rsb	r8, r8, #0
 8016f52:	2d00      	cmp	r5, #0
 8016f54:	d14e      	bne.n	8016ff4 <_strtod_l+0x38c>
 8016f56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016f58:	4308      	orrs	r0, r1
 8016f5a:	f47f aebe 	bne.w	8016cda <_strtod_l+0x72>
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	f47f aed6 	bne.w	8016d10 <_strtod_l+0xa8>
 8016f64:	2a69      	cmp	r2, #105	@ 0x69
 8016f66:	d028      	beq.n	8016fba <_strtod_l+0x352>
 8016f68:	dc25      	bgt.n	8016fb6 <_strtod_l+0x34e>
 8016f6a:	2a49      	cmp	r2, #73	@ 0x49
 8016f6c:	d025      	beq.n	8016fba <_strtod_l+0x352>
 8016f6e:	2a4e      	cmp	r2, #78	@ 0x4e
 8016f70:	f47f aece 	bne.w	8016d10 <_strtod_l+0xa8>
 8016f74:	499b      	ldr	r1, [pc, #620]	@ (80171e4 <_strtod_l+0x57c>)
 8016f76:	a819      	add	r0, sp, #100	@ 0x64
 8016f78:	f001 fbb6 	bl	80186e8 <__match>
 8016f7c:	2800      	cmp	r0, #0
 8016f7e:	f43f aec7 	beq.w	8016d10 <_strtod_l+0xa8>
 8016f82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f84:	781b      	ldrb	r3, [r3, #0]
 8016f86:	2b28      	cmp	r3, #40	@ 0x28
 8016f88:	d12e      	bne.n	8016fe8 <_strtod_l+0x380>
 8016f8a:	4997      	ldr	r1, [pc, #604]	@ (80171e8 <_strtod_l+0x580>)
 8016f8c:	aa1c      	add	r2, sp, #112	@ 0x70
 8016f8e:	a819      	add	r0, sp, #100	@ 0x64
 8016f90:	f001 fbbe 	bl	8018710 <__hexnan>
 8016f94:	2805      	cmp	r0, #5
 8016f96:	d127      	bne.n	8016fe8 <_strtod_l+0x380>
 8016f98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016f9a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8016f9e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016fa2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016fa6:	e698      	b.n	8016cda <_strtod_l+0x72>
 8016fa8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8016faa:	fb08 2101 	mla	r1, r8, r1, r2
 8016fae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8016fb2:	920e      	str	r2, [sp, #56]	@ 0x38
 8016fb4:	e7b5      	b.n	8016f22 <_strtod_l+0x2ba>
 8016fb6:	2a6e      	cmp	r2, #110	@ 0x6e
 8016fb8:	e7da      	b.n	8016f70 <_strtod_l+0x308>
 8016fba:	498c      	ldr	r1, [pc, #560]	@ (80171ec <_strtod_l+0x584>)
 8016fbc:	a819      	add	r0, sp, #100	@ 0x64
 8016fbe:	f001 fb93 	bl	80186e8 <__match>
 8016fc2:	2800      	cmp	r0, #0
 8016fc4:	f43f aea4 	beq.w	8016d10 <_strtod_l+0xa8>
 8016fc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016fca:	4989      	ldr	r1, [pc, #548]	@ (80171f0 <_strtod_l+0x588>)
 8016fcc:	3b01      	subs	r3, #1
 8016fce:	a819      	add	r0, sp, #100	@ 0x64
 8016fd0:	9319      	str	r3, [sp, #100]	@ 0x64
 8016fd2:	f001 fb89 	bl	80186e8 <__match>
 8016fd6:	b910      	cbnz	r0, 8016fde <_strtod_l+0x376>
 8016fd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016fda:	3301      	adds	r3, #1
 8016fdc:	9319      	str	r3, [sp, #100]	@ 0x64
 8016fde:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8017200 <_strtod_l+0x598>
 8016fe2:	f04f 0a00 	mov.w	sl, #0
 8016fe6:	e678      	b.n	8016cda <_strtod_l+0x72>
 8016fe8:	4882      	ldr	r0, [pc, #520]	@ (80171f4 <_strtod_l+0x58c>)
 8016fea:	f001 f8b9 	bl	8018160 <nan>
 8016fee:	ec5b ab10 	vmov	sl, fp, d0
 8016ff2:	e672      	b.n	8016cda <_strtod_l+0x72>
 8016ff4:	eba8 0309 	sub.w	r3, r8, r9
 8016ff8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016ffa:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ffc:	2f00      	cmp	r7, #0
 8016ffe:	bf08      	it	eq
 8017000:	462f      	moveq	r7, r5
 8017002:	2d10      	cmp	r5, #16
 8017004:	462c      	mov	r4, r5
 8017006:	bfa8      	it	ge
 8017008:	2410      	movge	r4, #16
 801700a:	f7e9 faa3 	bl	8000554 <__aeabi_ui2d>
 801700e:	2d09      	cmp	r5, #9
 8017010:	4682      	mov	sl, r0
 8017012:	468b      	mov	fp, r1
 8017014:	dc13      	bgt.n	801703e <_strtod_l+0x3d6>
 8017016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017018:	2b00      	cmp	r3, #0
 801701a:	f43f ae5e 	beq.w	8016cda <_strtod_l+0x72>
 801701e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017020:	dd78      	ble.n	8017114 <_strtod_l+0x4ac>
 8017022:	2b16      	cmp	r3, #22
 8017024:	dc5f      	bgt.n	80170e6 <_strtod_l+0x47e>
 8017026:	4974      	ldr	r1, [pc, #464]	@ (80171f8 <_strtod_l+0x590>)
 8017028:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801702c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017030:	4652      	mov	r2, sl
 8017032:	465b      	mov	r3, fp
 8017034:	f7e9 fb08 	bl	8000648 <__aeabi_dmul>
 8017038:	4682      	mov	sl, r0
 801703a:	468b      	mov	fp, r1
 801703c:	e64d      	b.n	8016cda <_strtod_l+0x72>
 801703e:	4b6e      	ldr	r3, [pc, #440]	@ (80171f8 <_strtod_l+0x590>)
 8017040:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017044:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8017048:	f7e9 fafe 	bl	8000648 <__aeabi_dmul>
 801704c:	4682      	mov	sl, r0
 801704e:	9808      	ldr	r0, [sp, #32]
 8017050:	468b      	mov	fp, r1
 8017052:	f7e9 fa7f 	bl	8000554 <__aeabi_ui2d>
 8017056:	4602      	mov	r2, r0
 8017058:	460b      	mov	r3, r1
 801705a:	4650      	mov	r0, sl
 801705c:	4659      	mov	r1, fp
 801705e:	f7e9 f93d 	bl	80002dc <__adddf3>
 8017062:	2d0f      	cmp	r5, #15
 8017064:	4682      	mov	sl, r0
 8017066:	468b      	mov	fp, r1
 8017068:	ddd5      	ble.n	8017016 <_strtod_l+0x3ae>
 801706a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801706c:	1b2c      	subs	r4, r5, r4
 801706e:	441c      	add	r4, r3
 8017070:	2c00      	cmp	r4, #0
 8017072:	f340 8096 	ble.w	80171a2 <_strtod_l+0x53a>
 8017076:	f014 030f 	ands.w	r3, r4, #15
 801707a:	d00a      	beq.n	8017092 <_strtod_l+0x42a>
 801707c:	495e      	ldr	r1, [pc, #376]	@ (80171f8 <_strtod_l+0x590>)
 801707e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017082:	4652      	mov	r2, sl
 8017084:	465b      	mov	r3, fp
 8017086:	e9d1 0100 	ldrd	r0, r1, [r1]
 801708a:	f7e9 fadd 	bl	8000648 <__aeabi_dmul>
 801708e:	4682      	mov	sl, r0
 8017090:	468b      	mov	fp, r1
 8017092:	f034 040f 	bics.w	r4, r4, #15
 8017096:	d073      	beq.n	8017180 <_strtod_l+0x518>
 8017098:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801709c:	dd48      	ble.n	8017130 <_strtod_l+0x4c8>
 801709e:	2400      	movs	r4, #0
 80170a0:	46a0      	mov	r8, r4
 80170a2:	940a      	str	r4, [sp, #40]	@ 0x28
 80170a4:	46a1      	mov	r9, r4
 80170a6:	9a05      	ldr	r2, [sp, #20]
 80170a8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8017200 <_strtod_l+0x598>
 80170ac:	2322      	movs	r3, #34	@ 0x22
 80170ae:	6013      	str	r3, [r2, #0]
 80170b0:	f04f 0a00 	mov.w	sl, #0
 80170b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	f43f ae0f 	beq.w	8016cda <_strtod_l+0x72>
 80170bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80170be:	9805      	ldr	r0, [sp, #20]
 80170c0:	f7ff f942 	bl	8016348 <_Bfree>
 80170c4:	9805      	ldr	r0, [sp, #20]
 80170c6:	4649      	mov	r1, r9
 80170c8:	f7ff f93e 	bl	8016348 <_Bfree>
 80170cc:	9805      	ldr	r0, [sp, #20]
 80170ce:	4641      	mov	r1, r8
 80170d0:	f7ff f93a 	bl	8016348 <_Bfree>
 80170d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80170d6:	9805      	ldr	r0, [sp, #20]
 80170d8:	f7ff f936 	bl	8016348 <_Bfree>
 80170dc:	9805      	ldr	r0, [sp, #20]
 80170de:	4621      	mov	r1, r4
 80170e0:	f7ff f932 	bl	8016348 <_Bfree>
 80170e4:	e5f9      	b.n	8016cda <_strtod_l+0x72>
 80170e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80170e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80170ec:	4293      	cmp	r3, r2
 80170ee:	dbbc      	blt.n	801706a <_strtod_l+0x402>
 80170f0:	4c41      	ldr	r4, [pc, #260]	@ (80171f8 <_strtod_l+0x590>)
 80170f2:	f1c5 050f 	rsb	r5, r5, #15
 80170f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80170fa:	4652      	mov	r2, sl
 80170fc:	465b      	mov	r3, fp
 80170fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017102:	f7e9 faa1 	bl	8000648 <__aeabi_dmul>
 8017106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017108:	1b5d      	subs	r5, r3, r5
 801710a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801710e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017112:	e78f      	b.n	8017034 <_strtod_l+0x3cc>
 8017114:	3316      	adds	r3, #22
 8017116:	dba8      	blt.n	801706a <_strtod_l+0x402>
 8017118:	4b37      	ldr	r3, [pc, #220]	@ (80171f8 <_strtod_l+0x590>)
 801711a:	eba9 0808 	sub.w	r8, r9, r8
 801711e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8017122:	e9d8 2300 	ldrd	r2, r3, [r8]
 8017126:	4650      	mov	r0, sl
 8017128:	4659      	mov	r1, fp
 801712a:	f7e9 fbb7 	bl	800089c <__aeabi_ddiv>
 801712e:	e783      	b.n	8017038 <_strtod_l+0x3d0>
 8017130:	4b32      	ldr	r3, [pc, #200]	@ (80171fc <_strtod_l+0x594>)
 8017132:	9308      	str	r3, [sp, #32]
 8017134:	2300      	movs	r3, #0
 8017136:	1124      	asrs	r4, r4, #4
 8017138:	4650      	mov	r0, sl
 801713a:	4659      	mov	r1, fp
 801713c:	461e      	mov	r6, r3
 801713e:	2c01      	cmp	r4, #1
 8017140:	dc21      	bgt.n	8017186 <_strtod_l+0x51e>
 8017142:	b10b      	cbz	r3, 8017148 <_strtod_l+0x4e0>
 8017144:	4682      	mov	sl, r0
 8017146:	468b      	mov	fp, r1
 8017148:	492c      	ldr	r1, [pc, #176]	@ (80171fc <_strtod_l+0x594>)
 801714a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801714e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8017152:	4652      	mov	r2, sl
 8017154:	465b      	mov	r3, fp
 8017156:	e9d1 0100 	ldrd	r0, r1, [r1]
 801715a:	f7e9 fa75 	bl	8000648 <__aeabi_dmul>
 801715e:	4b28      	ldr	r3, [pc, #160]	@ (8017200 <_strtod_l+0x598>)
 8017160:	460a      	mov	r2, r1
 8017162:	400b      	ands	r3, r1
 8017164:	4927      	ldr	r1, [pc, #156]	@ (8017204 <_strtod_l+0x59c>)
 8017166:	428b      	cmp	r3, r1
 8017168:	4682      	mov	sl, r0
 801716a:	d898      	bhi.n	801709e <_strtod_l+0x436>
 801716c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8017170:	428b      	cmp	r3, r1
 8017172:	bf86      	itte	hi
 8017174:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8017208 <_strtod_l+0x5a0>
 8017178:	f04f 3aff 	movhi.w	sl, #4294967295
 801717c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8017180:	2300      	movs	r3, #0
 8017182:	9308      	str	r3, [sp, #32]
 8017184:	e07a      	b.n	801727c <_strtod_l+0x614>
 8017186:	07e2      	lsls	r2, r4, #31
 8017188:	d505      	bpl.n	8017196 <_strtod_l+0x52e>
 801718a:	9b08      	ldr	r3, [sp, #32]
 801718c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017190:	f7e9 fa5a 	bl	8000648 <__aeabi_dmul>
 8017194:	2301      	movs	r3, #1
 8017196:	9a08      	ldr	r2, [sp, #32]
 8017198:	3208      	adds	r2, #8
 801719a:	3601      	adds	r6, #1
 801719c:	1064      	asrs	r4, r4, #1
 801719e:	9208      	str	r2, [sp, #32]
 80171a0:	e7cd      	b.n	801713e <_strtod_l+0x4d6>
 80171a2:	d0ed      	beq.n	8017180 <_strtod_l+0x518>
 80171a4:	4264      	negs	r4, r4
 80171a6:	f014 020f 	ands.w	r2, r4, #15
 80171aa:	d00a      	beq.n	80171c2 <_strtod_l+0x55a>
 80171ac:	4b12      	ldr	r3, [pc, #72]	@ (80171f8 <_strtod_l+0x590>)
 80171ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80171b2:	4650      	mov	r0, sl
 80171b4:	4659      	mov	r1, fp
 80171b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ba:	f7e9 fb6f 	bl	800089c <__aeabi_ddiv>
 80171be:	4682      	mov	sl, r0
 80171c0:	468b      	mov	fp, r1
 80171c2:	1124      	asrs	r4, r4, #4
 80171c4:	d0dc      	beq.n	8017180 <_strtod_l+0x518>
 80171c6:	2c1f      	cmp	r4, #31
 80171c8:	dd20      	ble.n	801720c <_strtod_l+0x5a4>
 80171ca:	2400      	movs	r4, #0
 80171cc:	46a0      	mov	r8, r4
 80171ce:	940a      	str	r4, [sp, #40]	@ 0x28
 80171d0:	46a1      	mov	r9, r4
 80171d2:	9a05      	ldr	r2, [sp, #20]
 80171d4:	2322      	movs	r3, #34	@ 0x22
 80171d6:	f04f 0a00 	mov.w	sl, #0
 80171da:	f04f 0b00 	mov.w	fp, #0
 80171de:	6013      	str	r3, [r2, #0]
 80171e0:	e768      	b.n	80170b4 <_strtod_l+0x44c>
 80171e2:	bf00      	nop
 80171e4:	08027805 	.word	0x08027805
 80171e8:	08027a1c 	.word	0x08027a1c
 80171ec:	080277fd 	.word	0x080277fd
 80171f0:	08027834 	.word	0x08027834
 80171f4:	08027bc5 	.word	0x08027bc5
 80171f8:	08027950 	.word	0x08027950
 80171fc:	08027928 	.word	0x08027928
 8017200:	7ff00000 	.word	0x7ff00000
 8017204:	7ca00000 	.word	0x7ca00000
 8017208:	7fefffff 	.word	0x7fefffff
 801720c:	f014 0310 	ands.w	r3, r4, #16
 8017210:	bf18      	it	ne
 8017212:	236a      	movne	r3, #106	@ 0x6a
 8017214:	4ea9      	ldr	r6, [pc, #676]	@ (80174bc <_strtod_l+0x854>)
 8017216:	9308      	str	r3, [sp, #32]
 8017218:	4650      	mov	r0, sl
 801721a:	4659      	mov	r1, fp
 801721c:	2300      	movs	r3, #0
 801721e:	07e2      	lsls	r2, r4, #31
 8017220:	d504      	bpl.n	801722c <_strtod_l+0x5c4>
 8017222:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017226:	f7e9 fa0f 	bl	8000648 <__aeabi_dmul>
 801722a:	2301      	movs	r3, #1
 801722c:	1064      	asrs	r4, r4, #1
 801722e:	f106 0608 	add.w	r6, r6, #8
 8017232:	d1f4      	bne.n	801721e <_strtod_l+0x5b6>
 8017234:	b10b      	cbz	r3, 801723a <_strtod_l+0x5d2>
 8017236:	4682      	mov	sl, r0
 8017238:	468b      	mov	fp, r1
 801723a:	9b08      	ldr	r3, [sp, #32]
 801723c:	b1b3      	cbz	r3, 801726c <_strtod_l+0x604>
 801723e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8017242:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8017246:	2b00      	cmp	r3, #0
 8017248:	4659      	mov	r1, fp
 801724a:	dd0f      	ble.n	801726c <_strtod_l+0x604>
 801724c:	2b1f      	cmp	r3, #31
 801724e:	dd55      	ble.n	80172fc <_strtod_l+0x694>
 8017250:	2b34      	cmp	r3, #52	@ 0x34
 8017252:	bfde      	ittt	le
 8017254:	f04f 33ff 	movle.w	r3, #4294967295
 8017258:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801725c:	4093      	lslle	r3, r2
 801725e:	f04f 0a00 	mov.w	sl, #0
 8017262:	bfcc      	ite	gt
 8017264:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8017268:	ea03 0b01 	andle.w	fp, r3, r1
 801726c:	2200      	movs	r2, #0
 801726e:	2300      	movs	r3, #0
 8017270:	4650      	mov	r0, sl
 8017272:	4659      	mov	r1, fp
 8017274:	f7e9 fc50 	bl	8000b18 <__aeabi_dcmpeq>
 8017278:	2800      	cmp	r0, #0
 801727a:	d1a6      	bne.n	80171ca <_strtod_l+0x562>
 801727c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801727e:	9300      	str	r3, [sp, #0]
 8017280:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017282:	9805      	ldr	r0, [sp, #20]
 8017284:	462b      	mov	r3, r5
 8017286:	463a      	mov	r2, r7
 8017288:	f7ff f8c6 	bl	8016418 <__s2b>
 801728c:	900a      	str	r0, [sp, #40]	@ 0x28
 801728e:	2800      	cmp	r0, #0
 8017290:	f43f af05 	beq.w	801709e <_strtod_l+0x436>
 8017294:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017296:	2a00      	cmp	r2, #0
 8017298:	eba9 0308 	sub.w	r3, r9, r8
 801729c:	bfa8      	it	ge
 801729e:	2300      	movge	r3, #0
 80172a0:	9312      	str	r3, [sp, #72]	@ 0x48
 80172a2:	2400      	movs	r4, #0
 80172a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80172a8:	9316      	str	r3, [sp, #88]	@ 0x58
 80172aa:	46a0      	mov	r8, r4
 80172ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80172ae:	9805      	ldr	r0, [sp, #20]
 80172b0:	6859      	ldr	r1, [r3, #4]
 80172b2:	f7ff f809 	bl	80162c8 <_Balloc>
 80172b6:	4681      	mov	r9, r0
 80172b8:	2800      	cmp	r0, #0
 80172ba:	f43f aef4 	beq.w	80170a6 <_strtod_l+0x43e>
 80172be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80172c0:	691a      	ldr	r2, [r3, #16]
 80172c2:	3202      	adds	r2, #2
 80172c4:	f103 010c 	add.w	r1, r3, #12
 80172c8:	0092      	lsls	r2, r2, #2
 80172ca:	300c      	adds	r0, #12
 80172cc:	f000 ff38 	bl	8018140 <memcpy>
 80172d0:	ec4b ab10 	vmov	d0, sl, fp
 80172d4:	9805      	ldr	r0, [sp, #20]
 80172d6:	aa1c      	add	r2, sp, #112	@ 0x70
 80172d8:	a91b      	add	r1, sp, #108	@ 0x6c
 80172da:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80172de:	f7ff fbd7 	bl	8016a90 <__d2b>
 80172e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80172e4:	2800      	cmp	r0, #0
 80172e6:	f43f aede 	beq.w	80170a6 <_strtod_l+0x43e>
 80172ea:	9805      	ldr	r0, [sp, #20]
 80172ec:	2101      	movs	r1, #1
 80172ee:	f7ff f929 	bl	8016544 <__i2b>
 80172f2:	4680      	mov	r8, r0
 80172f4:	b948      	cbnz	r0, 801730a <_strtod_l+0x6a2>
 80172f6:	f04f 0800 	mov.w	r8, #0
 80172fa:	e6d4      	b.n	80170a6 <_strtod_l+0x43e>
 80172fc:	f04f 32ff 	mov.w	r2, #4294967295
 8017300:	fa02 f303 	lsl.w	r3, r2, r3
 8017304:	ea03 0a0a 	and.w	sl, r3, sl
 8017308:	e7b0      	b.n	801726c <_strtod_l+0x604>
 801730a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801730c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801730e:	2d00      	cmp	r5, #0
 8017310:	bfab      	itete	ge
 8017312:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8017314:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8017316:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8017318:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801731a:	bfac      	ite	ge
 801731c:	18ef      	addge	r7, r5, r3
 801731e:	1b5e      	sublt	r6, r3, r5
 8017320:	9b08      	ldr	r3, [sp, #32]
 8017322:	1aed      	subs	r5, r5, r3
 8017324:	4415      	add	r5, r2
 8017326:	4b66      	ldr	r3, [pc, #408]	@ (80174c0 <_strtod_l+0x858>)
 8017328:	3d01      	subs	r5, #1
 801732a:	429d      	cmp	r5, r3
 801732c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8017330:	da50      	bge.n	80173d4 <_strtod_l+0x76c>
 8017332:	1b5b      	subs	r3, r3, r5
 8017334:	2b1f      	cmp	r3, #31
 8017336:	eba2 0203 	sub.w	r2, r2, r3
 801733a:	f04f 0101 	mov.w	r1, #1
 801733e:	dc3d      	bgt.n	80173bc <_strtod_l+0x754>
 8017340:	fa01 f303 	lsl.w	r3, r1, r3
 8017344:	9313      	str	r3, [sp, #76]	@ 0x4c
 8017346:	2300      	movs	r3, #0
 8017348:	9310      	str	r3, [sp, #64]	@ 0x40
 801734a:	18bd      	adds	r5, r7, r2
 801734c:	9b08      	ldr	r3, [sp, #32]
 801734e:	42af      	cmp	r7, r5
 8017350:	4416      	add	r6, r2
 8017352:	441e      	add	r6, r3
 8017354:	463b      	mov	r3, r7
 8017356:	bfa8      	it	ge
 8017358:	462b      	movge	r3, r5
 801735a:	42b3      	cmp	r3, r6
 801735c:	bfa8      	it	ge
 801735e:	4633      	movge	r3, r6
 8017360:	2b00      	cmp	r3, #0
 8017362:	bfc2      	ittt	gt
 8017364:	1aed      	subgt	r5, r5, r3
 8017366:	1af6      	subgt	r6, r6, r3
 8017368:	1aff      	subgt	r7, r7, r3
 801736a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801736c:	2b00      	cmp	r3, #0
 801736e:	dd16      	ble.n	801739e <_strtod_l+0x736>
 8017370:	4641      	mov	r1, r8
 8017372:	9805      	ldr	r0, [sp, #20]
 8017374:	461a      	mov	r2, r3
 8017376:	f7ff f9a5 	bl	80166c4 <__pow5mult>
 801737a:	4680      	mov	r8, r0
 801737c:	2800      	cmp	r0, #0
 801737e:	d0ba      	beq.n	80172f6 <_strtod_l+0x68e>
 8017380:	4601      	mov	r1, r0
 8017382:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8017384:	9805      	ldr	r0, [sp, #20]
 8017386:	f7ff f8f3 	bl	8016570 <__multiply>
 801738a:	900e      	str	r0, [sp, #56]	@ 0x38
 801738c:	2800      	cmp	r0, #0
 801738e:	f43f ae8a 	beq.w	80170a6 <_strtod_l+0x43e>
 8017392:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017394:	9805      	ldr	r0, [sp, #20]
 8017396:	f7fe ffd7 	bl	8016348 <_Bfree>
 801739a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801739c:	931a      	str	r3, [sp, #104]	@ 0x68
 801739e:	2d00      	cmp	r5, #0
 80173a0:	dc1d      	bgt.n	80173de <_strtod_l+0x776>
 80173a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	dd23      	ble.n	80173f0 <_strtod_l+0x788>
 80173a8:	4649      	mov	r1, r9
 80173aa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80173ac:	9805      	ldr	r0, [sp, #20]
 80173ae:	f7ff f989 	bl	80166c4 <__pow5mult>
 80173b2:	4681      	mov	r9, r0
 80173b4:	b9e0      	cbnz	r0, 80173f0 <_strtod_l+0x788>
 80173b6:	f04f 0900 	mov.w	r9, #0
 80173ba:	e674      	b.n	80170a6 <_strtod_l+0x43e>
 80173bc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80173c0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80173c4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80173c8:	35e2      	adds	r5, #226	@ 0xe2
 80173ca:	fa01 f305 	lsl.w	r3, r1, r5
 80173ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80173d0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80173d2:	e7ba      	b.n	801734a <_strtod_l+0x6e2>
 80173d4:	2300      	movs	r3, #0
 80173d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80173d8:	2301      	movs	r3, #1
 80173da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80173dc:	e7b5      	b.n	801734a <_strtod_l+0x6e2>
 80173de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80173e0:	9805      	ldr	r0, [sp, #20]
 80173e2:	462a      	mov	r2, r5
 80173e4:	f7ff f9c8 	bl	8016778 <__lshift>
 80173e8:	901a      	str	r0, [sp, #104]	@ 0x68
 80173ea:	2800      	cmp	r0, #0
 80173ec:	d1d9      	bne.n	80173a2 <_strtod_l+0x73a>
 80173ee:	e65a      	b.n	80170a6 <_strtod_l+0x43e>
 80173f0:	2e00      	cmp	r6, #0
 80173f2:	dd07      	ble.n	8017404 <_strtod_l+0x79c>
 80173f4:	4649      	mov	r1, r9
 80173f6:	9805      	ldr	r0, [sp, #20]
 80173f8:	4632      	mov	r2, r6
 80173fa:	f7ff f9bd 	bl	8016778 <__lshift>
 80173fe:	4681      	mov	r9, r0
 8017400:	2800      	cmp	r0, #0
 8017402:	d0d8      	beq.n	80173b6 <_strtod_l+0x74e>
 8017404:	2f00      	cmp	r7, #0
 8017406:	dd08      	ble.n	801741a <_strtod_l+0x7b2>
 8017408:	4641      	mov	r1, r8
 801740a:	9805      	ldr	r0, [sp, #20]
 801740c:	463a      	mov	r2, r7
 801740e:	f7ff f9b3 	bl	8016778 <__lshift>
 8017412:	4680      	mov	r8, r0
 8017414:	2800      	cmp	r0, #0
 8017416:	f43f ae46 	beq.w	80170a6 <_strtod_l+0x43e>
 801741a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801741c:	9805      	ldr	r0, [sp, #20]
 801741e:	464a      	mov	r2, r9
 8017420:	f7ff fa32 	bl	8016888 <__mdiff>
 8017424:	4604      	mov	r4, r0
 8017426:	2800      	cmp	r0, #0
 8017428:	f43f ae3d 	beq.w	80170a6 <_strtod_l+0x43e>
 801742c:	68c3      	ldr	r3, [r0, #12]
 801742e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017430:	2300      	movs	r3, #0
 8017432:	60c3      	str	r3, [r0, #12]
 8017434:	4641      	mov	r1, r8
 8017436:	f7ff fa0b 	bl	8016850 <__mcmp>
 801743a:	2800      	cmp	r0, #0
 801743c:	da46      	bge.n	80174cc <_strtod_l+0x864>
 801743e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017440:	ea53 030a 	orrs.w	r3, r3, sl
 8017444:	d16c      	bne.n	8017520 <_strtod_l+0x8b8>
 8017446:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801744a:	2b00      	cmp	r3, #0
 801744c:	d168      	bne.n	8017520 <_strtod_l+0x8b8>
 801744e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017452:	0d1b      	lsrs	r3, r3, #20
 8017454:	051b      	lsls	r3, r3, #20
 8017456:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801745a:	d961      	bls.n	8017520 <_strtod_l+0x8b8>
 801745c:	6963      	ldr	r3, [r4, #20]
 801745e:	b913      	cbnz	r3, 8017466 <_strtod_l+0x7fe>
 8017460:	6923      	ldr	r3, [r4, #16]
 8017462:	2b01      	cmp	r3, #1
 8017464:	dd5c      	ble.n	8017520 <_strtod_l+0x8b8>
 8017466:	4621      	mov	r1, r4
 8017468:	2201      	movs	r2, #1
 801746a:	9805      	ldr	r0, [sp, #20]
 801746c:	f7ff f984 	bl	8016778 <__lshift>
 8017470:	4641      	mov	r1, r8
 8017472:	4604      	mov	r4, r0
 8017474:	f7ff f9ec 	bl	8016850 <__mcmp>
 8017478:	2800      	cmp	r0, #0
 801747a:	dd51      	ble.n	8017520 <_strtod_l+0x8b8>
 801747c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017480:	9a08      	ldr	r2, [sp, #32]
 8017482:	0d1b      	lsrs	r3, r3, #20
 8017484:	051b      	lsls	r3, r3, #20
 8017486:	2a00      	cmp	r2, #0
 8017488:	d06b      	beq.n	8017562 <_strtod_l+0x8fa>
 801748a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801748e:	d868      	bhi.n	8017562 <_strtod_l+0x8fa>
 8017490:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8017494:	f67f ae9d 	bls.w	80171d2 <_strtod_l+0x56a>
 8017498:	4b0a      	ldr	r3, [pc, #40]	@ (80174c4 <_strtod_l+0x85c>)
 801749a:	4650      	mov	r0, sl
 801749c:	4659      	mov	r1, fp
 801749e:	2200      	movs	r2, #0
 80174a0:	f7e9 f8d2 	bl	8000648 <__aeabi_dmul>
 80174a4:	4b08      	ldr	r3, [pc, #32]	@ (80174c8 <_strtod_l+0x860>)
 80174a6:	400b      	ands	r3, r1
 80174a8:	4682      	mov	sl, r0
 80174aa:	468b      	mov	fp, r1
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	f47f ae05 	bne.w	80170bc <_strtod_l+0x454>
 80174b2:	9a05      	ldr	r2, [sp, #20]
 80174b4:	2322      	movs	r3, #34	@ 0x22
 80174b6:	6013      	str	r3, [r2, #0]
 80174b8:	e600      	b.n	80170bc <_strtod_l+0x454>
 80174ba:	bf00      	nop
 80174bc:	08027a48 	.word	0x08027a48
 80174c0:	fffffc02 	.word	0xfffffc02
 80174c4:	39500000 	.word	0x39500000
 80174c8:	7ff00000 	.word	0x7ff00000
 80174cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80174d0:	d165      	bne.n	801759e <_strtod_l+0x936>
 80174d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80174d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80174d8:	b35a      	cbz	r2, 8017532 <_strtod_l+0x8ca>
 80174da:	4a9f      	ldr	r2, [pc, #636]	@ (8017758 <_strtod_l+0xaf0>)
 80174dc:	4293      	cmp	r3, r2
 80174de:	d12b      	bne.n	8017538 <_strtod_l+0x8d0>
 80174e0:	9b08      	ldr	r3, [sp, #32]
 80174e2:	4651      	mov	r1, sl
 80174e4:	b303      	cbz	r3, 8017528 <_strtod_l+0x8c0>
 80174e6:	4b9d      	ldr	r3, [pc, #628]	@ (801775c <_strtod_l+0xaf4>)
 80174e8:	465a      	mov	r2, fp
 80174ea:	4013      	ands	r3, r2
 80174ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80174f0:	f04f 32ff 	mov.w	r2, #4294967295
 80174f4:	d81b      	bhi.n	801752e <_strtod_l+0x8c6>
 80174f6:	0d1b      	lsrs	r3, r3, #20
 80174f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80174fc:	fa02 f303 	lsl.w	r3, r2, r3
 8017500:	4299      	cmp	r1, r3
 8017502:	d119      	bne.n	8017538 <_strtod_l+0x8d0>
 8017504:	4b96      	ldr	r3, [pc, #600]	@ (8017760 <_strtod_l+0xaf8>)
 8017506:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017508:	429a      	cmp	r2, r3
 801750a:	d102      	bne.n	8017512 <_strtod_l+0x8aa>
 801750c:	3101      	adds	r1, #1
 801750e:	f43f adca 	beq.w	80170a6 <_strtod_l+0x43e>
 8017512:	4b92      	ldr	r3, [pc, #584]	@ (801775c <_strtod_l+0xaf4>)
 8017514:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017516:	401a      	ands	r2, r3
 8017518:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801751c:	f04f 0a00 	mov.w	sl, #0
 8017520:	9b08      	ldr	r3, [sp, #32]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d1b8      	bne.n	8017498 <_strtod_l+0x830>
 8017526:	e5c9      	b.n	80170bc <_strtod_l+0x454>
 8017528:	f04f 33ff 	mov.w	r3, #4294967295
 801752c:	e7e8      	b.n	8017500 <_strtod_l+0x898>
 801752e:	4613      	mov	r3, r2
 8017530:	e7e6      	b.n	8017500 <_strtod_l+0x898>
 8017532:	ea53 030a 	orrs.w	r3, r3, sl
 8017536:	d0a1      	beq.n	801747c <_strtod_l+0x814>
 8017538:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801753a:	b1db      	cbz	r3, 8017574 <_strtod_l+0x90c>
 801753c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801753e:	4213      	tst	r3, r2
 8017540:	d0ee      	beq.n	8017520 <_strtod_l+0x8b8>
 8017542:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017544:	9a08      	ldr	r2, [sp, #32]
 8017546:	4650      	mov	r0, sl
 8017548:	4659      	mov	r1, fp
 801754a:	b1bb      	cbz	r3, 801757c <_strtod_l+0x914>
 801754c:	f7ff fb6e 	bl	8016c2c <sulp>
 8017550:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017554:	ec53 2b10 	vmov	r2, r3, d0
 8017558:	f7e8 fec0 	bl	80002dc <__adddf3>
 801755c:	4682      	mov	sl, r0
 801755e:	468b      	mov	fp, r1
 8017560:	e7de      	b.n	8017520 <_strtod_l+0x8b8>
 8017562:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8017566:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801756a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801756e:	f04f 3aff 	mov.w	sl, #4294967295
 8017572:	e7d5      	b.n	8017520 <_strtod_l+0x8b8>
 8017574:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017576:	ea13 0f0a 	tst.w	r3, sl
 801757a:	e7e1      	b.n	8017540 <_strtod_l+0x8d8>
 801757c:	f7ff fb56 	bl	8016c2c <sulp>
 8017580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017584:	ec53 2b10 	vmov	r2, r3, d0
 8017588:	f7e8 fea6 	bl	80002d8 <__aeabi_dsub>
 801758c:	2200      	movs	r2, #0
 801758e:	2300      	movs	r3, #0
 8017590:	4682      	mov	sl, r0
 8017592:	468b      	mov	fp, r1
 8017594:	f7e9 fac0 	bl	8000b18 <__aeabi_dcmpeq>
 8017598:	2800      	cmp	r0, #0
 801759a:	d0c1      	beq.n	8017520 <_strtod_l+0x8b8>
 801759c:	e619      	b.n	80171d2 <_strtod_l+0x56a>
 801759e:	4641      	mov	r1, r8
 80175a0:	4620      	mov	r0, r4
 80175a2:	f7ff facd 	bl	8016b40 <__ratio>
 80175a6:	ec57 6b10 	vmov	r6, r7, d0
 80175aa:	2200      	movs	r2, #0
 80175ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80175b0:	4630      	mov	r0, r6
 80175b2:	4639      	mov	r1, r7
 80175b4:	f7e9 fac4 	bl	8000b40 <__aeabi_dcmple>
 80175b8:	2800      	cmp	r0, #0
 80175ba:	d06f      	beq.n	801769c <_strtod_l+0xa34>
 80175bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d17a      	bne.n	80176b8 <_strtod_l+0xa50>
 80175c2:	f1ba 0f00 	cmp.w	sl, #0
 80175c6:	d158      	bne.n	801767a <_strtod_l+0xa12>
 80175c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80175ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d15a      	bne.n	8017688 <_strtod_l+0xa20>
 80175d2:	4b64      	ldr	r3, [pc, #400]	@ (8017764 <_strtod_l+0xafc>)
 80175d4:	2200      	movs	r2, #0
 80175d6:	4630      	mov	r0, r6
 80175d8:	4639      	mov	r1, r7
 80175da:	f7e9 faa7 	bl	8000b2c <__aeabi_dcmplt>
 80175de:	2800      	cmp	r0, #0
 80175e0:	d159      	bne.n	8017696 <_strtod_l+0xa2e>
 80175e2:	4630      	mov	r0, r6
 80175e4:	4639      	mov	r1, r7
 80175e6:	4b60      	ldr	r3, [pc, #384]	@ (8017768 <_strtod_l+0xb00>)
 80175e8:	2200      	movs	r2, #0
 80175ea:	f7e9 f82d 	bl	8000648 <__aeabi_dmul>
 80175ee:	4606      	mov	r6, r0
 80175f0:	460f      	mov	r7, r1
 80175f2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80175f6:	9606      	str	r6, [sp, #24]
 80175f8:	9307      	str	r3, [sp, #28]
 80175fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80175fe:	4d57      	ldr	r5, [pc, #348]	@ (801775c <_strtod_l+0xaf4>)
 8017600:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8017604:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017606:	401d      	ands	r5, r3
 8017608:	4b58      	ldr	r3, [pc, #352]	@ (801776c <_strtod_l+0xb04>)
 801760a:	429d      	cmp	r5, r3
 801760c:	f040 80b2 	bne.w	8017774 <_strtod_l+0xb0c>
 8017610:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017612:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8017616:	ec4b ab10 	vmov	d0, sl, fp
 801761a:	f7ff f9c9 	bl	80169b0 <__ulp>
 801761e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017622:	ec51 0b10 	vmov	r0, r1, d0
 8017626:	f7e9 f80f 	bl	8000648 <__aeabi_dmul>
 801762a:	4652      	mov	r2, sl
 801762c:	465b      	mov	r3, fp
 801762e:	f7e8 fe55 	bl	80002dc <__adddf3>
 8017632:	460b      	mov	r3, r1
 8017634:	4949      	ldr	r1, [pc, #292]	@ (801775c <_strtod_l+0xaf4>)
 8017636:	4a4e      	ldr	r2, [pc, #312]	@ (8017770 <_strtod_l+0xb08>)
 8017638:	4019      	ands	r1, r3
 801763a:	4291      	cmp	r1, r2
 801763c:	4682      	mov	sl, r0
 801763e:	d942      	bls.n	80176c6 <_strtod_l+0xa5e>
 8017640:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017642:	4b47      	ldr	r3, [pc, #284]	@ (8017760 <_strtod_l+0xaf8>)
 8017644:	429a      	cmp	r2, r3
 8017646:	d103      	bne.n	8017650 <_strtod_l+0x9e8>
 8017648:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801764a:	3301      	adds	r3, #1
 801764c:	f43f ad2b 	beq.w	80170a6 <_strtod_l+0x43e>
 8017650:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8017760 <_strtod_l+0xaf8>
 8017654:	f04f 3aff 	mov.w	sl, #4294967295
 8017658:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801765a:	9805      	ldr	r0, [sp, #20]
 801765c:	f7fe fe74 	bl	8016348 <_Bfree>
 8017660:	9805      	ldr	r0, [sp, #20]
 8017662:	4649      	mov	r1, r9
 8017664:	f7fe fe70 	bl	8016348 <_Bfree>
 8017668:	9805      	ldr	r0, [sp, #20]
 801766a:	4641      	mov	r1, r8
 801766c:	f7fe fe6c 	bl	8016348 <_Bfree>
 8017670:	9805      	ldr	r0, [sp, #20]
 8017672:	4621      	mov	r1, r4
 8017674:	f7fe fe68 	bl	8016348 <_Bfree>
 8017678:	e618      	b.n	80172ac <_strtod_l+0x644>
 801767a:	f1ba 0f01 	cmp.w	sl, #1
 801767e:	d103      	bne.n	8017688 <_strtod_l+0xa20>
 8017680:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017682:	2b00      	cmp	r3, #0
 8017684:	f43f ada5 	beq.w	80171d2 <_strtod_l+0x56a>
 8017688:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8017738 <_strtod_l+0xad0>
 801768c:	4f35      	ldr	r7, [pc, #212]	@ (8017764 <_strtod_l+0xafc>)
 801768e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017692:	2600      	movs	r6, #0
 8017694:	e7b1      	b.n	80175fa <_strtod_l+0x992>
 8017696:	4f34      	ldr	r7, [pc, #208]	@ (8017768 <_strtod_l+0xb00>)
 8017698:	2600      	movs	r6, #0
 801769a:	e7aa      	b.n	80175f2 <_strtod_l+0x98a>
 801769c:	4b32      	ldr	r3, [pc, #200]	@ (8017768 <_strtod_l+0xb00>)
 801769e:	4630      	mov	r0, r6
 80176a0:	4639      	mov	r1, r7
 80176a2:	2200      	movs	r2, #0
 80176a4:	f7e8 ffd0 	bl	8000648 <__aeabi_dmul>
 80176a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80176aa:	4606      	mov	r6, r0
 80176ac:	460f      	mov	r7, r1
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d09f      	beq.n	80175f2 <_strtod_l+0x98a>
 80176b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80176b6:	e7a0      	b.n	80175fa <_strtod_l+0x992>
 80176b8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8017740 <_strtod_l+0xad8>
 80176bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80176c0:	ec57 6b17 	vmov	r6, r7, d7
 80176c4:	e799      	b.n	80175fa <_strtod_l+0x992>
 80176c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80176ca:	9b08      	ldr	r3, [sp, #32]
 80176cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d1c1      	bne.n	8017658 <_strtod_l+0x9f0>
 80176d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80176d8:	0d1b      	lsrs	r3, r3, #20
 80176da:	051b      	lsls	r3, r3, #20
 80176dc:	429d      	cmp	r5, r3
 80176de:	d1bb      	bne.n	8017658 <_strtod_l+0x9f0>
 80176e0:	4630      	mov	r0, r6
 80176e2:	4639      	mov	r1, r7
 80176e4:	f7e9 fb10 	bl	8000d08 <__aeabi_d2lz>
 80176e8:	f7e8 ff80 	bl	80005ec <__aeabi_l2d>
 80176ec:	4602      	mov	r2, r0
 80176ee:	460b      	mov	r3, r1
 80176f0:	4630      	mov	r0, r6
 80176f2:	4639      	mov	r1, r7
 80176f4:	f7e8 fdf0 	bl	80002d8 <__aeabi_dsub>
 80176f8:	460b      	mov	r3, r1
 80176fa:	4602      	mov	r2, r0
 80176fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8017700:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8017704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017706:	ea46 060a 	orr.w	r6, r6, sl
 801770a:	431e      	orrs	r6, r3
 801770c:	d06f      	beq.n	80177ee <_strtod_l+0xb86>
 801770e:	a30e      	add	r3, pc, #56	@ (adr r3, 8017748 <_strtod_l+0xae0>)
 8017710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017714:	f7e9 fa0a 	bl	8000b2c <__aeabi_dcmplt>
 8017718:	2800      	cmp	r0, #0
 801771a:	f47f accf 	bne.w	80170bc <_strtod_l+0x454>
 801771e:	a30c      	add	r3, pc, #48	@ (adr r3, 8017750 <_strtod_l+0xae8>)
 8017720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017724:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017728:	f7e9 fa1e 	bl	8000b68 <__aeabi_dcmpgt>
 801772c:	2800      	cmp	r0, #0
 801772e:	d093      	beq.n	8017658 <_strtod_l+0x9f0>
 8017730:	e4c4      	b.n	80170bc <_strtod_l+0x454>
 8017732:	bf00      	nop
 8017734:	f3af 8000 	nop.w
 8017738:	00000000 	.word	0x00000000
 801773c:	bff00000 	.word	0xbff00000
 8017740:	00000000 	.word	0x00000000
 8017744:	3ff00000 	.word	0x3ff00000
 8017748:	94a03595 	.word	0x94a03595
 801774c:	3fdfffff 	.word	0x3fdfffff
 8017750:	35afe535 	.word	0x35afe535
 8017754:	3fe00000 	.word	0x3fe00000
 8017758:	000fffff 	.word	0x000fffff
 801775c:	7ff00000 	.word	0x7ff00000
 8017760:	7fefffff 	.word	0x7fefffff
 8017764:	3ff00000 	.word	0x3ff00000
 8017768:	3fe00000 	.word	0x3fe00000
 801776c:	7fe00000 	.word	0x7fe00000
 8017770:	7c9fffff 	.word	0x7c9fffff
 8017774:	9b08      	ldr	r3, [sp, #32]
 8017776:	b323      	cbz	r3, 80177c2 <_strtod_l+0xb5a>
 8017778:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801777c:	d821      	bhi.n	80177c2 <_strtod_l+0xb5a>
 801777e:	a328      	add	r3, pc, #160	@ (adr r3, 8017820 <_strtod_l+0xbb8>)
 8017780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017784:	4630      	mov	r0, r6
 8017786:	4639      	mov	r1, r7
 8017788:	f7e9 f9da 	bl	8000b40 <__aeabi_dcmple>
 801778c:	b1a0      	cbz	r0, 80177b8 <_strtod_l+0xb50>
 801778e:	4639      	mov	r1, r7
 8017790:	4630      	mov	r0, r6
 8017792:	f7e9 fa31 	bl	8000bf8 <__aeabi_d2uiz>
 8017796:	2801      	cmp	r0, #1
 8017798:	bf38      	it	cc
 801779a:	2001      	movcc	r0, #1
 801779c:	f7e8 feda 	bl	8000554 <__aeabi_ui2d>
 80177a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80177a2:	4606      	mov	r6, r0
 80177a4:	460f      	mov	r7, r1
 80177a6:	b9fb      	cbnz	r3, 80177e8 <_strtod_l+0xb80>
 80177a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80177ac:	9014      	str	r0, [sp, #80]	@ 0x50
 80177ae:	9315      	str	r3, [sp, #84]	@ 0x54
 80177b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80177b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80177b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80177ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80177be:	1b5b      	subs	r3, r3, r5
 80177c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80177c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80177c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80177ca:	f7ff f8f1 	bl	80169b0 <__ulp>
 80177ce:	4650      	mov	r0, sl
 80177d0:	ec53 2b10 	vmov	r2, r3, d0
 80177d4:	4659      	mov	r1, fp
 80177d6:	f7e8 ff37 	bl	8000648 <__aeabi_dmul>
 80177da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80177de:	f7e8 fd7d 	bl	80002dc <__adddf3>
 80177e2:	4682      	mov	sl, r0
 80177e4:	468b      	mov	fp, r1
 80177e6:	e770      	b.n	80176ca <_strtod_l+0xa62>
 80177e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80177ec:	e7e0      	b.n	80177b0 <_strtod_l+0xb48>
 80177ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8017828 <_strtod_l+0xbc0>)
 80177f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177f4:	f7e9 f99a 	bl	8000b2c <__aeabi_dcmplt>
 80177f8:	e798      	b.n	801772c <_strtod_l+0xac4>
 80177fa:	2300      	movs	r3, #0
 80177fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80177fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8017800:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017802:	6013      	str	r3, [r2, #0]
 8017804:	f7ff ba6d 	b.w	8016ce2 <_strtod_l+0x7a>
 8017808:	2a65      	cmp	r2, #101	@ 0x65
 801780a:	f43f ab66 	beq.w	8016eda <_strtod_l+0x272>
 801780e:	2a45      	cmp	r2, #69	@ 0x45
 8017810:	f43f ab63 	beq.w	8016eda <_strtod_l+0x272>
 8017814:	2301      	movs	r3, #1
 8017816:	f7ff bb9e 	b.w	8016f56 <_strtod_l+0x2ee>
 801781a:	bf00      	nop
 801781c:	f3af 8000 	nop.w
 8017820:	ffc00000 	.word	0xffc00000
 8017824:	41dfffff 	.word	0x41dfffff
 8017828:	94a03595 	.word	0x94a03595
 801782c:	3fcfffff 	.word	0x3fcfffff

08017830 <_strtod_r>:
 8017830:	4b01      	ldr	r3, [pc, #4]	@ (8017838 <_strtod_r+0x8>)
 8017832:	f7ff ba19 	b.w	8016c68 <_strtod_l>
 8017836:	bf00      	nop
 8017838:	20000458 	.word	0x20000458

0801783c <_strtol_l.constprop.0>:
 801783c:	2b24      	cmp	r3, #36	@ 0x24
 801783e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017842:	4686      	mov	lr, r0
 8017844:	4690      	mov	r8, r2
 8017846:	d801      	bhi.n	801784c <_strtol_l.constprop.0+0x10>
 8017848:	2b01      	cmp	r3, #1
 801784a:	d106      	bne.n	801785a <_strtol_l.constprop.0+0x1e>
 801784c:	f7fd fdbc 	bl	80153c8 <__errno>
 8017850:	2316      	movs	r3, #22
 8017852:	6003      	str	r3, [r0, #0]
 8017854:	2000      	movs	r0, #0
 8017856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801785a:	4834      	ldr	r0, [pc, #208]	@ (801792c <_strtol_l.constprop.0+0xf0>)
 801785c:	460d      	mov	r5, r1
 801785e:	462a      	mov	r2, r5
 8017860:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017864:	5d06      	ldrb	r6, [r0, r4]
 8017866:	f016 0608 	ands.w	r6, r6, #8
 801786a:	d1f8      	bne.n	801785e <_strtol_l.constprop.0+0x22>
 801786c:	2c2d      	cmp	r4, #45	@ 0x2d
 801786e:	d12d      	bne.n	80178cc <_strtol_l.constprop.0+0x90>
 8017870:	782c      	ldrb	r4, [r5, #0]
 8017872:	2601      	movs	r6, #1
 8017874:	1c95      	adds	r5, r2, #2
 8017876:	f033 0210 	bics.w	r2, r3, #16
 801787a:	d109      	bne.n	8017890 <_strtol_l.constprop.0+0x54>
 801787c:	2c30      	cmp	r4, #48	@ 0x30
 801787e:	d12a      	bne.n	80178d6 <_strtol_l.constprop.0+0x9a>
 8017880:	782a      	ldrb	r2, [r5, #0]
 8017882:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017886:	2a58      	cmp	r2, #88	@ 0x58
 8017888:	d125      	bne.n	80178d6 <_strtol_l.constprop.0+0x9a>
 801788a:	786c      	ldrb	r4, [r5, #1]
 801788c:	2310      	movs	r3, #16
 801788e:	3502      	adds	r5, #2
 8017890:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8017894:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017898:	2200      	movs	r2, #0
 801789a:	fbbc f9f3 	udiv	r9, ip, r3
 801789e:	4610      	mov	r0, r2
 80178a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80178a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80178a8:	2f09      	cmp	r7, #9
 80178aa:	d81b      	bhi.n	80178e4 <_strtol_l.constprop.0+0xa8>
 80178ac:	463c      	mov	r4, r7
 80178ae:	42a3      	cmp	r3, r4
 80178b0:	dd27      	ble.n	8017902 <_strtol_l.constprop.0+0xc6>
 80178b2:	1c57      	adds	r7, r2, #1
 80178b4:	d007      	beq.n	80178c6 <_strtol_l.constprop.0+0x8a>
 80178b6:	4581      	cmp	r9, r0
 80178b8:	d320      	bcc.n	80178fc <_strtol_l.constprop.0+0xc0>
 80178ba:	d101      	bne.n	80178c0 <_strtol_l.constprop.0+0x84>
 80178bc:	45a2      	cmp	sl, r4
 80178be:	db1d      	blt.n	80178fc <_strtol_l.constprop.0+0xc0>
 80178c0:	fb00 4003 	mla	r0, r0, r3, r4
 80178c4:	2201      	movs	r2, #1
 80178c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80178ca:	e7eb      	b.n	80178a4 <_strtol_l.constprop.0+0x68>
 80178cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80178ce:	bf04      	itt	eq
 80178d0:	782c      	ldrbeq	r4, [r5, #0]
 80178d2:	1c95      	addeq	r5, r2, #2
 80178d4:	e7cf      	b.n	8017876 <_strtol_l.constprop.0+0x3a>
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d1da      	bne.n	8017890 <_strtol_l.constprop.0+0x54>
 80178da:	2c30      	cmp	r4, #48	@ 0x30
 80178dc:	bf0c      	ite	eq
 80178de:	2308      	moveq	r3, #8
 80178e0:	230a      	movne	r3, #10
 80178e2:	e7d5      	b.n	8017890 <_strtol_l.constprop.0+0x54>
 80178e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80178e8:	2f19      	cmp	r7, #25
 80178ea:	d801      	bhi.n	80178f0 <_strtol_l.constprop.0+0xb4>
 80178ec:	3c37      	subs	r4, #55	@ 0x37
 80178ee:	e7de      	b.n	80178ae <_strtol_l.constprop.0+0x72>
 80178f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80178f4:	2f19      	cmp	r7, #25
 80178f6:	d804      	bhi.n	8017902 <_strtol_l.constprop.0+0xc6>
 80178f8:	3c57      	subs	r4, #87	@ 0x57
 80178fa:	e7d8      	b.n	80178ae <_strtol_l.constprop.0+0x72>
 80178fc:	f04f 32ff 	mov.w	r2, #4294967295
 8017900:	e7e1      	b.n	80178c6 <_strtol_l.constprop.0+0x8a>
 8017902:	1c53      	adds	r3, r2, #1
 8017904:	d108      	bne.n	8017918 <_strtol_l.constprop.0+0xdc>
 8017906:	2322      	movs	r3, #34	@ 0x22
 8017908:	f8ce 3000 	str.w	r3, [lr]
 801790c:	4660      	mov	r0, ip
 801790e:	f1b8 0f00 	cmp.w	r8, #0
 8017912:	d0a0      	beq.n	8017856 <_strtol_l.constprop.0+0x1a>
 8017914:	1e69      	subs	r1, r5, #1
 8017916:	e006      	b.n	8017926 <_strtol_l.constprop.0+0xea>
 8017918:	b106      	cbz	r6, 801791c <_strtol_l.constprop.0+0xe0>
 801791a:	4240      	negs	r0, r0
 801791c:	f1b8 0f00 	cmp.w	r8, #0
 8017920:	d099      	beq.n	8017856 <_strtol_l.constprop.0+0x1a>
 8017922:	2a00      	cmp	r2, #0
 8017924:	d1f6      	bne.n	8017914 <_strtol_l.constprop.0+0xd8>
 8017926:	f8c8 1000 	str.w	r1, [r8]
 801792a:	e794      	b.n	8017856 <_strtol_l.constprop.0+0x1a>
 801792c:	08027a71 	.word	0x08027a71

08017930 <_strtol_r>:
 8017930:	f7ff bf84 	b.w	801783c <_strtol_l.constprop.0>

08017934 <__ssputs_r>:
 8017934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017938:	688e      	ldr	r6, [r1, #8]
 801793a:	461f      	mov	r7, r3
 801793c:	42be      	cmp	r6, r7
 801793e:	680b      	ldr	r3, [r1, #0]
 8017940:	4682      	mov	sl, r0
 8017942:	460c      	mov	r4, r1
 8017944:	4690      	mov	r8, r2
 8017946:	d82d      	bhi.n	80179a4 <__ssputs_r+0x70>
 8017948:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801794c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017950:	d026      	beq.n	80179a0 <__ssputs_r+0x6c>
 8017952:	6965      	ldr	r5, [r4, #20]
 8017954:	6909      	ldr	r1, [r1, #16]
 8017956:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801795a:	eba3 0901 	sub.w	r9, r3, r1
 801795e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017962:	1c7b      	adds	r3, r7, #1
 8017964:	444b      	add	r3, r9
 8017966:	106d      	asrs	r5, r5, #1
 8017968:	429d      	cmp	r5, r3
 801796a:	bf38      	it	cc
 801796c:	461d      	movcc	r5, r3
 801796e:	0553      	lsls	r3, r2, #21
 8017970:	d527      	bpl.n	80179c2 <__ssputs_r+0x8e>
 8017972:	4629      	mov	r1, r5
 8017974:	f7fe fc1c 	bl	80161b0 <_malloc_r>
 8017978:	4606      	mov	r6, r0
 801797a:	b360      	cbz	r0, 80179d6 <__ssputs_r+0xa2>
 801797c:	6921      	ldr	r1, [r4, #16]
 801797e:	464a      	mov	r2, r9
 8017980:	f000 fbde 	bl	8018140 <memcpy>
 8017984:	89a3      	ldrh	r3, [r4, #12]
 8017986:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801798a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801798e:	81a3      	strh	r3, [r4, #12]
 8017990:	6126      	str	r6, [r4, #16]
 8017992:	6165      	str	r5, [r4, #20]
 8017994:	444e      	add	r6, r9
 8017996:	eba5 0509 	sub.w	r5, r5, r9
 801799a:	6026      	str	r6, [r4, #0]
 801799c:	60a5      	str	r5, [r4, #8]
 801799e:	463e      	mov	r6, r7
 80179a0:	42be      	cmp	r6, r7
 80179a2:	d900      	bls.n	80179a6 <__ssputs_r+0x72>
 80179a4:	463e      	mov	r6, r7
 80179a6:	6820      	ldr	r0, [r4, #0]
 80179a8:	4632      	mov	r2, r6
 80179aa:	4641      	mov	r1, r8
 80179ac:	f000 fb6a 	bl	8018084 <memmove>
 80179b0:	68a3      	ldr	r3, [r4, #8]
 80179b2:	1b9b      	subs	r3, r3, r6
 80179b4:	60a3      	str	r3, [r4, #8]
 80179b6:	6823      	ldr	r3, [r4, #0]
 80179b8:	4433      	add	r3, r6
 80179ba:	6023      	str	r3, [r4, #0]
 80179bc:	2000      	movs	r0, #0
 80179be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179c2:	462a      	mov	r2, r5
 80179c4:	f000 ff51 	bl	801886a <_realloc_r>
 80179c8:	4606      	mov	r6, r0
 80179ca:	2800      	cmp	r0, #0
 80179cc:	d1e0      	bne.n	8017990 <__ssputs_r+0x5c>
 80179ce:	6921      	ldr	r1, [r4, #16]
 80179d0:	4650      	mov	r0, sl
 80179d2:	f7fe fb79 	bl	80160c8 <_free_r>
 80179d6:	230c      	movs	r3, #12
 80179d8:	f8ca 3000 	str.w	r3, [sl]
 80179dc:	89a3      	ldrh	r3, [r4, #12]
 80179de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80179e2:	81a3      	strh	r3, [r4, #12]
 80179e4:	f04f 30ff 	mov.w	r0, #4294967295
 80179e8:	e7e9      	b.n	80179be <__ssputs_r+0x8a>
	...

080179ec <_svfiprintf_r>:
 80179ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179f0:	4698      	mov	r8, r3
 80179f2:	898b      	ldrh	r3, [r1, #12]
 80179f4:	061b      	lsls	r3, r3, #24
 80179f6:	b09d      	sub	sp, #116	@ 0x74
 80179f8:	4607      	mov	r7, r0
 80179fa:	460d      	mov	r5, r1
 80179fc:	4614      	mov	r4, r2
 80179fe:	d510      	bpl.n	8017a22 <_svfiprintf_r+0x36>
 8017a00:	690b      	ldr	r3, [r1, #16]
 8017a02:	b973      	cbnz	r3, 8017a22 <_svfiprintf_r+0x36>
 8017a04:	2140      	movs	r1, #64	@ 0x40
 8017a06:	f7fe fbd3 	bl	80161b0 <_malloc_r>
 8017a0a:	6028      	str	r0, [r5, #0]
 8017a0c:	6128      	str	r0, [r5, #16]
 8017a0e:	b930      	cbnz	r0, 8017a1e <_svfiprintf_r+0x32>
 8017a10:	230c      	movs	r3, #12
 8017a12:	603b      	str	r3, [r7, #0]
 8017a14:	f04f 30ff 	mov.w	r0, #4294967295
 8017a18:	b01d      	add	sp, #116	@ 0x74
 8017a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a1e:	2340      	movs	r3, #64	@ 0x40
 8017a20:	616b      	str	r3, [r5, #20]
 8017a22:	2300      	movs	r3, #0
 8017a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a26:	2320      	movs	r3, #32
 8017a28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017a2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017a30:	2330      	movs	r3, #48	@ 0x30
 8017a32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017bd0 <_svfiprintf_r+0x1e4>
 8017a36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017a3a:	f04f 0901 	mov.w	r9, #1
 8017a3e:	4623      	mov	r3, r4
 8017a40:	469a      	mov	sl, r3
 8017a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a46:	b10a      	cbz	r2, 8017a4c <_svfiprintf_r+0x60>
 8017a48:	2a25      	cmp	r2, #37	@ 0x25
 8017a4a:	d1f9      	bne.n	8017a40 <_svfiprintf_r+0x54>
 8017a4c:	ebba 0b04 	subs.w	fp, sl, r4
 8017a50:	d00b      	beq.n	8017a6a <_svfiprintf_r+0x7e>
 8017a52:	465b      	mov	r3, fp
 8017a54:	4622      	mov	r2, r4
 8017a56:	4629      	mov	r1, r5
 8017a58:	4638      	mov	r0, r7
 8017a5a:	f7ff ff6b 	bl	8017934 <__ssputs_r>
 8017a5e:	3001      	adds	r0, #1
 8017a60:	f000 80a7 	beq.w	8017bb2 <_svfiprintf_r+0x1c6>
 8017a64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017a66:	445a      	add	r2, fp
 8017a68:	9209      	str	r2, [sp, #36]	@ 0x24
 8017a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	f000 809f 	beq.w	8017bb2 <_svfiprintf_r+0x1c6>
 8017a74:	2300      	movs	r3, #0
 8017a76:	f04f 32ff 	mov.w	r2, #4294967295
 8017a7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017a7e:	f10a 0a01 	add.w	sl, sl, #1
 8017a82:	9304      	str	r3, [sp, #16]
 8017a84:	9307      	str	r3, [sp, #28]
 8017a86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017a8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8017a8c:	4654      	mov	r4, sl
 8017a8e:	2205      	movs	r2, #5
 8017a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a94:	484e      	ldr	r0, [pc, #312]	@ (8017bd0 <_svfiprintf_r+0x1e4>)
 8017a96:	f7e8 fbc3 	bl	8000220 <memchr>
 8017a9a:	9a04      	ldr	r2, [sp, #16]
 8017a9c:	b9d8      	cbnz	r0, 8017ad6 <_svfiprintf_r+0xea>
 8017a9e:	06d0      	lsls	r0, r2, #27
 8017aa0:	bf44      	itt	mi
 8017aa2:	2320      	movmi	r3, #32
 8017aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017aa8:	0711      	lsls	r1, r2, #28
 8017aaa:	bf44      	itt	mi
 8017aac:	232b      	movmi	r3, #43	@ 0x2b
 8017aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8017ab6:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ab8:	d015      	beq.n	8017ae6 <_svfiprintf_r+0xfa>
 8017aba:	9a07      	ldr	r2, [sp, #28]
 8017abc:	4654      	mov	r4, sl
 8017abe:	2000      	movs	r0, #0
 8017ac0:	f04f 0c0a 	mov.w	ip, #10
 8017ac4:	4621      	mov	r1, r4
 8017ac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017aca:	3b30      	subs	r3, #48	@ 0x30
 8017acc:	2b09      	cmp	r3, #9
 8017ace:	d94b      	bls.n	8017b68 <_svfiprintf_r+0x17c>
 8017ad0:	b1b0      	cbz	r0, 8017b00 <_svfiprintf_r+0x114>
 8017ad2:	9207      	str	r2, [sp, #28]
 8017ad4:	e014      	b.n	8017b00 <_svfiprintf_r+0x114>
 8017ad6:	eba0 0308 	sub.w	r3, r0, r8
 8017ada:	fa09 f303 	lsl.w	r3, r9, r3
 8017ade:	4313      	orrs	r3, r2
 8017ae0:	9304      	str	r3, [sp, #16]
 8017ae2:	46a2      	mov	sl, r4
 8017ae4:	e7d2      	b.n	8017a8c <_svfiprintf_r+0xa0>
 8017ae6:	9b03      	ldr	r3, [sp, #12]
 8017ae8:	1d19      	adds	r1, r3, #4
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	9103      	str	r1, [sp, #12]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	bfbb      	ittet	lt
 8017af2:	425b      	neglt	r3, r3
 8017af4:	f042 0202 	orrlt.w	r2, r2, #2
 8017af8:	9307      	strge	r3, [sp, #28]
 8017afa:	9307      	strlt	r3, [sp, #28]
 8017afc:	bfb8      	it	lt
 8017afe:	9204      	strlt	r2, [sp, #16]
 8017b00:	7823      	ldrb	r3, [r4, #0]
 8017b02:	2b2e      	cmp	r3, #46	@ 0x2e
 8017b04:	d10a      	bne.n	8017b1c <_svfiprintf_r+0x130>
 8017b06:	7863      	ldrb	r3, [r4, #1]
 8017b08:	2b2a      	cmp	r3, #42	@ 0x2a
 8017b0a:	d132      	bne.n	8017b72 <_svfiprintf_r+0x186>
 8017b0c:	9b03      	ldr	r3, [sp, #12]
 8017b0e:	1d1a      	adds	r2, r3, #4
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	9203      	str	r2, [sp, #12]
 8017b14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017b18:	3402      	adds	r4, #2
 8017b1a:	9305      	str	r3, [sp, #20]
 8017b1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017be0 <_svfiprintf_r+0x1f4>
 8017b20:	7821      	ldrb	r1, [r4, #0]
 8017b22:	2203      	movs	r2, #3
 8017b24:	4650      	mov	r0, sl
 8017b26:	f7e8 fb7b 	bl	8000220 <memchr>
 8017b2a:	b138      	cbz	r0, 8017b3c <_svfiprintf_r+0x150>
 8017b2c:	9b04      	ldr	r3, [sp, #16]
 8017b2e:	eba0 000a 	sub.w	r0, r0, sl
 8017b32:	2240      	movs	r2, #64	@ 0x40
 8017b34:	4082      	lsls	r2, r0
 8017b36:	4313      	orrs	r3, r2
 8017b38:	3401      	adds	r4, #1
 8017b3a:	9304      	str	r3, [sp, #16]
 8017b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b40:	4824      	ldr	r0, [pc, #144]	@ (8017bd4 <_svfiprintf_r+0x1e8>)
 8017b42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017b46:	2206      	movs	r2, #6
 8017b48:	f7e8 fb6a 	bl	8000220 <memchr>
 8017b4c:	2800      	cmp	r0, #0
 8017b4e:	d036      	beq.n	8017bbe <_svfiprintf_r+0x1d2>
 8017b50:	4b21      	ldr	r3, [pc, #132]	@ (8017bd8 <_svfiprintf_r+0x1ec>)
 8017b52:	bb1b      	cbnz	r3, 8017b9c <_svfiprintf_r+0x1b0>
 8017b54:	9b03      	ldr	r3, [sp, #12]
 8017b56:	3307      	adds	r3, #7
 8017b58:	f023 0307 	bic.w	r3, r3, #7
 8017b5c:	3308      	adds	r3, #8
 8017b5e:	9303      	str	r3, [sp, #12]
 8017b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017b62:	4433      	add	r3, r6
 8017b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b66:	e76a      	b.n	8017a3e <_svfiprintf_r+0x52>
 8017b68:	fb0c 3202 	mla	r2, ip, r2, r3
 8017b6c:	460c      	mov	r4, r1
 8017b6e:	2001      	movs	r0, #1
 8017b70:	e7a8      	b.n	8017ac4 <_svfiprintf_r+0xd8>
 8017b72:	2300      	movs	r3, #0
 8017b74:	3401      	adds	r4, #1
 8017b76:	9305      	str	r3, [sp, #20]
 8017b78:	4619      	mov	r1, r3
 8017b7a:	f04f 0c0a 	mov.w	ip, #10
 8017b7e:	4620      	mov	r0, r4
 8017b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017b84:	3a30      	subs	r2, #48	@ 0x30
 8017b86:	2a09      	cmp	r2, #9
 8017b88:	d903      	bls.n	8017b92 <_svfiprintf_r+0x1a6>
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d0c6      	beq.n	8017b1c <_svfiprintf_r+0x130>
 8017b8e:	9105      	str	r1, [sp, #20]
 8017b90:	e7c4      	b.n	8017b1c <_svfiprintf_r+0x130>
 8017b92:	fb0c 2101 	mla	r1, ip, r1, r2
 8017b96:	4604      	mov	r4, r0
 8017b98:	2301      	movs	r3, #1
 8017b9a:	e7f0      	b.n	8017b7e <_svfiprintf_r+0x192>
 8017b9c:	ab03      	add	r3, sp, #12
 8017b9e:	9300      	str	r3, [sp, #0]
 8017ba0:	462a      	mov	r2, r5
 8017ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8017bdc <_svfiprintf_r+0x1f0>)
 8017ba4:	a904      	add	r1, sp, #16
 8017ba6:	4638      	mov	r0, r7
 8017ba8:	f7fc fbc6 	bl	8014338 <_printf_float>
 8017bac:	1c42      	adds	r2, r0, #1
 8017bae:	4606      	mov	r6, r0
 8017bb0:	d1d6      	bne.n	8017b60 <_svfiprintf_r+0x174>
 8017bb2:	89ab      	ldrh	r3, [r5, #12]
 8017bb4:	065b      	lsls	r3, r3, #25
 8017bb6:	f53f af2d 	bmi.w	8017a14 <_svfiprintf_r+0x28>
 8017bba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017bbc:	e72c      	b.n	8017a18 <_svfiprintf_r+0x2c>
 8017bbe:	ab03      	add	r3, sp, #12
 8017bc0:	9300      	str	r3, [sp, #0]
 8017bc2:	462a      	mov	r2, r5
 8017bc4:	4b05      	ldr	r3, [pc, #20]	@ (8017bdc <_svfiprintf_r+0x1f0>)
 8017bc6:	a904      	add	r1, sp, #16
 8017bc8:	4638      	mov	r0, r7
 8017bca:	f7fc fe4d 	bl	8014868 <_printf_i>
 8017bce:	e7ed      	b.n	8017bac <_svfiprintf_r+0x1c0>
 8017bd0:	08027b71 	.word	0x08027b71
 8017bd4:	08027b7b 	.word	0x08027b7b
 8017bd8:	08014339 	.word	0x08014339
 8017bdc:	08017935 	.word	0x08017935
 8017be0:	08027b77 	.word	0x08027b77

08017be4 <__sfputc_r>:
 8017be4:	6893      	ldr	r3, [r2, #8]
 8017be6:	3b01      	subs	r3, #1
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	b410      	push	{r4}
 8017bec:	6093      	str	r3, [r2, #8]
 8017bee:	da08      	bge.n	8017c02 <__sfputc_r+0x1e>
 8017bf0:	6994      	ldr	r4, [r2, #24]
 8017bf2:	42a3      	cmp	r3, r4
 8017bf4:	db01      	blt.n	8017bfa <__sfputc_r+0x16>
 8017bf6:	290a      	cmp	r1, #10
 8017bf8:	d103      	bne.n	8017c02 <__sfputc_r+0x1e>
 8017bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bfe:	f7fd bafc 	b.w	80151fa <__swbuf_r>
 8017c02:	6813      	ldr	r3, [r2, #0]
 8017c04:	1c58      	adds	r0, r3, #1
 8017c06:	6010      	str	r0, [r2, #0]
 8017c08:	7019      	strb	r1, [r3, #0]
 8017c0a:	4608      	mov	r0, r1
 8017c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c10:	4770      	bx	lr

08017c12 <__sfputs_r>:
 8017c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c14:	4606      	mov	r6, r0
 8017c16:	460f      	mov	r7, r1
 8017c18:	4614      	mov	r4, r2
 8017c1a:	18d5      	adds	r5, r2, r3
 8017c1c:	42ac      	cmp	r4, r5
 8017c1e:	d101      	bne.n	8017c24 <__sfputs_r+0x12>
 8017c20:	2000      	movs	r0, #0
 8017c22:	e007      	b.n	8017c34 <__sfputs_r+0x22>
 8017c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c28:	463a      	mov	r2, r7
 8017c2a:	4630      	mov	r0, r6
 8017c2c:	f7ff ffda 	bl	8017be4 <__sfputc_r>
 8017c30:	1c43      	adds	r3, r0, #1
 8017c32:	d1f3      	bne.n	8017c1c <__sfputs_r+0xa>
 8017c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017c38 <_vfiprintf_r>:
 8017c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c3c:	460d      	mov	r5, r1
 8017c3e:	b09d      	sub	sp, #116	@ 0x74
 8017c40:	4614      	mov	r4, r2
 8017c42:	4698      	mov	r8, r3
 8017c44:	4606      	mov	r6, r0
 8017c46:	b118      	cbz	r0, 8017c50 <_vfiprintf_r+0x18>
 8017c48:	6a03      	ldr	r3, [r0, #32]
 8017c4a:	b90b      	cbnz	r3, 8017c50 <_vfiprintf_r+0x18>
 8017c4c:	f7fd f9cc 	bl	8014fe8 <__sinit>
 8017c50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017c52:	07d9      	lsls	r1, r3, #31
 8017c54:	d405      	bmi.n	8017c62 <_vfiprintf_r+0x2a>
 8017c56:	89ab      	ldrh	r3, [r5, #12]
 8017c58:	059a      	lsls	r2, r3, #22
 8017c5a:	d402      	bmi.n	8017c62 <_vfiprintf_r+0x2a>
 8017c5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017c5e:	f7fd fbde 	bl	801541e <__retarget_lock_acquire_recursive>
 8017c62:	89ab      	ldrh	r3, [r5, #12]
 8017c64:	071b      	lsls	r3, r3, #28
 8017c66:	d501      	bpl.n	8017c6c <_vfiprintf_r+0x34>
 8017c68:	692b      	ldr	r3, [r5, #16]
 8017c6a:	b99b      	cbnz	r3, 8017c94 <_vfiprintf_r+0x5c>
 8017c6c:	4629      	mov	r1, r5
 8017c6e:	4630      	mov	r0, r6
 8017c70:	f7fd fb02 	bl	8015278 <__swsetup_r>
 8017c74:	b170      	cbz	r0, 8017c94 <_vfiprintf_r+0x5c>
 8017c76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017c78:	07dc      	lsls	r4, r3, #31
 8017c7a:	d504      	bpl.n	8017c86 <_vfiprintf_r+0x4e>
 8017c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8017c80:	b01d      	add	sp, #116	@ 0x74
 8017c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c86:	89ab      	ldrh	r3, [r5, #12]
 8017c88:	0598      	lsls	r0, r3, #22
 8017c8a:	d4f7      	bmi.n	8017c7c <_vfiprintf_r+0x44>
 8017c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017c8e:	f7fd fbc7 	bl	8015420 <__retarget_lock_release_recursive>
 8017c92:	e7f3      	b.n	8017c7c <_vfiprintf_r+0x44>
 8017c94:	2300      	movs	r3, #0
 8017c96:	9309      	str	r3, [sp, #36]	@ 0x24
 8017c98:	2320      	movs	r3, #32
 8017c9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017c9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ca2:	2330      	movs	r3, #48	@ 0x30
 8017ca4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017e54 <_vfiprintf_r+0x21c>
 8017ca8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017cac:	f04f 0901 	mov.w	r9, #1
 8017cb0:	4623      	mov	r3, r4
 8017cb2:	469a      	mov	sl, r3
 8017cb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cb8:	b10a      	cbz	r2, 8017cbe <_vfiprintf_r+0x86>
 8017cba:	2a25      	cmp	r2, #37	@ 0x25
 8017cbc:	d1f9      	bne.n	8017cb2 <_vfiprintf_r+0x7a>
 8017cbe:	ebba 0b04 	subs.w	fp, sl, r4
 8017cc2:	d00b      	beq.n	8017cdc <_vfiprintf_r+0xa4>
 8017cc4:	465b      	mov	r3, fp
 8017cc6:	4622      	mov	r2, r4
 8017cc8:	4629      	mov	r1, r5
 8017cca:	4630      	mov	r0, r6
 8017ccc:	f7ff ffa1 	bl	8017c12 <__sfputs_r>
 8017cd0:	3001      	adds	r0, #1
 8017cd2:	f000 80a7 	beq.w	8017e24 <_vfiprintf_r+0x1ec>
 8017cd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017cd8:	445a      	add	r2, fp
 8017cda:	9209      	str	r2, [sp, #36]	@ 0x24
 8017cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	f000 809f 	beq.w	8017e24 <_vfiprintf_r+0x1ec>
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8017cec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017cf0:	f10a 0a01 	add.w	sl, sl, #1
 8017cf4:	9304      	str	r3, [sp, #16]
 8017cf6:	9307      	str	r3, [sp, #28]
 8017cf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017cfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8017cfe:	4654      	mov	r4, sl
 8017d00:	2205      	movs	r2, #5
 8017d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d06:	4853      	ldr	r0, [pc, #332]	@ (8017e54 <_vfiprintf_r+0x21c>)
 8017d08:	f7e8 fa8a 	bl	8000220 <memchr>
 8017d0c:	9a04      	ldr	r2, [sp, #16]
 8017d0e:	b9d8      	cbnz	r0, 8017d48 <_vfiprintf_r+0x110>
 8017d10:	06d1      	lsls	r1, r2, #27
 8017d12:	bf44      	itt	mi
 8017d14:	2320      	movmi	r3, #32
 8017d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017d1a:	0713      	lsls	r3, r2, #28
 8017d1c:	bf44      	itt	mi
 8017d1e:	232b      	movmi	r3, #43	@ 0x2b
 8017d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017d24:	f89a 3000 	ldrb.w	r3, [sl]
 8017d28:	2b2a      	cmp	r3, #42	@ 0x2a
 8017d2a:	d015      	beq.n	8017d58 <_vfiprintf_r+0x120>
 8017d2c:	9a07      	ldr	r2, [sp, #28]
 8017d2e:	4654      	mov	r4, sl
 8017d30:	2000      	movs	r0, #0
 8017d32:	f04f 0c0a 	mov.w	ip, #10
 8017d36:	4621      	mov	r1, r4
 8017d38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d3c:	3b30      	subs	r3, #48	@ 0x30
 8017d3e:	2b09      	cmp	r3, #9
 8017d40:	d94b      	bls.n	8017dda <_vfiprintf_r+0x1a2>
 8017d42:	b1b0      	cbz	r0, 8017d72 <_vfiprintf_r+0x13a>
 8017d44:	9207      	str	r2, [sp, #28]
 8017d46:	e014      	b.n	8017d72 <_vfiprintf_r+0x13a>
 8017d48:	eba0 0308 	sub.w	r3, r0, r8
 8017d4c:	fa09 f303 	lsl.w	r3, r9, r3
 8017d50:	4313      	orrs	r3, r2
 8017d52:	9304      	str	r3, [sp, #16]
 8017d54:	46a2      	mov	sl, r4
 8017d56:	e7d2      	b.n	8017cfe <_vfiprintf_r+0xc6>
 8017d58:	9b03      	ldr	r3, [sp, #12]
 8017d5a:	1d19      	adds	r1, r3, #4
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	9103      	str	r1, [sp, #12]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	bfbb      	ittet	lt
 8017d64:	425b      	neglt	r3, r3
 8017d66:	f042 0202 	orrlt.w	r2, r2, #2
 8017d6a:	9307      	strge	r3, [sp, #28]
 8017d6c:	9307      	strlt	r3, [sp, #28]
 8017d6e:	bfb8      	it	lt
 8017d70:	9204      	strlt	r2, [sp, #16]
 8017d72:	7823      	ldrb	r3, [r4, #0]
 8017d74:	2b2e      	cmp	r3, #46	@ 0x2e
 8017d76:	d10a      	bne.n	8017d8e <_vfiprintf_r+0x156>
 8017d78:	7863      	ldrb	r3, [r4, #1]
 8017d7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8017d7c:	d132      	bne.n	8017de4 <_vfiprintf_r+0x1ac>
 8017d7e:	9b03      	ldr	r3, [sp, #12]
 8017d80:	1d1a      	adds	r2, r3, #4
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	9203      	str	r2, [sp, #12]
 8017d86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017d8a:	3402      	adds	r4, #2
 8017d8c:	9305      	str	r3, [sp, #20]
 8017d8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017e64 <_vfiprintf_r+0x22c>
 8017d92:	7821      	ldrb	r1, [r4, #0]
 8017d94:	2203      	movs	r2, #3
 8017d96:	4650      	mov	r0, sl
 8017d98:	f7e8 fa42 	bl	8000220 <memchr>
 8017d9c:	b138      	cbz	r0, 8017dae <_vfiprintf_r+0x176>
 8017d9e:	9b04      	ldr	r3, [sp, #16]
 8017da0:	eba0 000a 	sub.w	r0, r0, sl
 8017da4:	2240      	movs	r2, #64	@ 0x40
 8017da6:	4082      	lsls	r2, r0
 8017da8:	4313      	orrs	r3, r2
 8017daa:	3401      	adds	r4, #1
 8017dac:	9304      	str	r3, [sp, #16]
 8017dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017db2:	4829      	ldr	r0, [pc, #164]	@ (8017e58 <_vfiprintf_r+0x220>)
 8017db4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017db8:	2206      	movs	r2, #6
 8017dba:	f7e8 fa31 	bl	8000220 <memchr>
 8017dbe:	2800      	cmp	r0, #0
 8017dc0:	d03f      	beq.n	8017e42 <_vfiprintf_r+0x20a>
 8017dc2:	4b26      	ldr	r3, [pc, #152]	@ (8017e5c <_vfiprintf_r+0x224>)
 8017dc4:	bb1b      	cbnz	r3, 8017e0e <_vfiprintf_r+0x1d6>
 8017dc6:	9b03      	ldr	r3, [sp, #12]
 8017dc8:	3307      	adds	r3, #7
 8017dca:	f023 0307 	bic.w	r3, r3, #7
 8017dce:	3308      	adds	r3, #8
 8017dd0:	9303      	str	r3, [sp, #12]
 8017dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017dd4:	443b      	add	r3, r7
 8017dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8017dd8:	e76a      	b.n	8017cb0 <_vfiprintf_r+0x78>
 8017dda:	fb0c 3202 	mla	r2, ip, r2, r3
 8017dde:	460c      	mov	r4, r1
 8017de0:	2001      	movs	r0, #1
 8017de2:	e7a8      	b.n	8017d36 <_vfiprintf_r+0xfe>
 8017de4:	2300      	movs	r3, #0
 8017de6:	3401      	adds	r4, #1
 8017de8:	9305      	str	r3, [sp, #20]
 8017dea:	4619      	mov	r1, r3
 8017dec:	f04f 0c0a 	mov.w	ip, #10
 8017df0:	4620      	mov	r0, r4
 8017df2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017df6:	3a30      	subs	r2, #48	@ 0x30
 8017df8:	2a09      	cmp	r2, #9
 8017dfa:	d903      	bls.n	8017e04 <_vfiprintf_r+0x1cc>
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d0c6      	beq.n	8017d8e <_vfiprintf_r+0x156>
 8017e00:	9105      	str	r1, [sp, #20]
 8017e02:	e7c4      	b.n	8017d8e <_vfiprintf_r+0x156>
 8017e04:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e08:	4604      	mov	r4, r0
 8017e0a:	2301      	movs	r3, #1
 8017e0c:	e7f0      	b.n	8017df0 <_vfiprintf_r+0x1b8>
 8017e0e:	ab03      	add	r3, sp, #12
 8017e10:	9300      	str	r3, [sp, #0]
 8017e12:	462a      	mov	r2, r5
 8017e14:	4b12      	ldr	r3, [pc, #72]	@ (8017e60 <_vfiprintf_r+0x228>)
 8017e16:	a904      	add	r1, sp, #16
 8017e18:	4630      	mov	r0, r6
 8017e1a:	f7fc fa8d 	bl	8014338 <_printf_float>
 8017e1e:	4607      	mov	r7, r0
 8017e20:	1c78      	adds	r0, r7, #1
 8017e22:	d1d6      	bne.n	8017dd2 <_vfiprintf_r+0x19a>
 8017e24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017e26:	07d9      	lsls	r1, r3, #31
 8017e28:	d405      	bmi.n	8017e36 <_vfiprintf_r+0x1fe>
 8017e2a:	89ab      	ldrh	r3, [r5, #12]
 8017e2c:	059a      	lsls	r2, r3, #22
 8017e2e:	d402      	bmi.n	8017e36 <_vfiprintf_r+0x1fe>
 8017e30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017e32:	f7fd faf5 	bl	8015420 <__retarget_lock_release_recursive>
 8017e36:	89ab      	ldrh	r3, [r5, #12]
 8017e38:	065b      	lsls	r3, r3, #25
 8017e3a:	f53f af1f 	bmi.w	8017c7c <_vfiprintf_r+0x44>
 8017e3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e40:	e71e      	b.n	8017c80 <_vfiprintf_r+0x48>
 8017e42:	ab03      	add	r3, sp, #12
 8017e44:	9300      	str	r3, [sp, #0]
 8017e46:	462a      	mov	r2, r5
 8017e48:	4b05      	ldr	r3, [pc, #20]	@ (8017e60 <_vfiprintf_r+0x228>)
 8017e4a:	a904      	add	r1, sp, #16
 8017e4c:	4630      	mov	r0, r6
 8017e4e:	f7fc fd0b 	bl	8014868 <_printf_i>
 8017e52:	e7e4      	b.n	8017e1e <_vfiprintf_r+0x1e6>
 8017e54:	08027b71 	.word	0x08027b71
 8017e58:	08027b7b 	.word	0x08027b7b
 8017e5c:	08014339 	.word	0x08014339
 8017e60:	08017c13 	.word	0x08017c13
 8017e64:	08027b77 	.word	0x08027b77

08017e68 <__sflush_r>:
 8017e68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e70:	0716      	lsls	r6, r2, #28
 8017e72:	4605      	mov	r5, r0
 8017e74:	460c      	mov	r4, r1
 8017e76:	d454      	bmi.n	8017f22 <__sflush_r+0xba>
 8017e78:	684b      	ldr	r3, [r1, #4]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	dc02      	bgt.n	8017e84 <__sflush_r+0x1c>
 8017e7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	dd48      	ble.n	8017f16 <__sflush_r+0xae>
 8017e84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017e86:	2e00      	cmp	r6, #0
 8017e88:	d045      	beq.n	8017f16 <__sflush_r+0xae>
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017e90:	682f      	ldr	r7, [r5, #0]
 8017e92:	6a21      	ldr	r1, [r4, #32]
 8017e94:	602b      	str	r3, [r5, #0]
 8017e96:	d030      	beq.n	8017efa <__sflush_r+0x92>
 8017e98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017e9a:	89a3      	ldrh	r3, [r4, #12]
 8017e9c:	0759      	lsls	r1, r3, #29
 8017e9e:	d505      	bpl.n	8017eac <__sflush_r+0x44>
 8017ea0:	6863      	ldr	r3, [r4, #4]
 8017ea2:	1ad2      	subs	r2, r2, r3
 8017ea4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017ea6:	b10b      	cbz	r3, 8017eac <__sflush_r+0x44>
 8017ea8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017eaa:	1ad2      	subs	r2, r2, r3
 8017eac:	2300      	movs	r3, #0
 8017eae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017eb0:	6a21      	ldr	r1, [r4, #32]
 8017eb2:	4628      	mov	r0, r5
 8017eb4:	47b0      	blx	r6
 8017eb6:	1c43      	adds	r3, r0, #1
 8017eb8:	89a3      	ldrh	r3, [r4, #12]
 8017eba:	d106      	bne.n	8017eca <__sflush_r+0x62>
 8017ebc:	6829      	ldr	r1, [r5, #0]
 8017ebe:	291d      	cmp	r1, #29
 8017ec0:	d82b      	bhi.n	8017f1a <__sflush_r+0xb2>
 8017ec2:	4a2a      	ldr	r2, [pc, #168]	@ (8017f6c <__sflush_r+0x104>)
 8017ec4:	410a      	asrs	r2, r1
 8017ec6:	07d6      	lsls	r6, r2, #31
 8017ec8:	d427      	bmi.n	8017f1a <__sflush_r+0xb2>
 8017eca:	2200      	movs	r2, #0
 8017ecc:	6062      	str	r2, [r4, #4]
 8017ece:	04d9      	lsls	r1, r3, #19
 8017ed0:	6922      	ldr	r2, [r4, #16]
 8017ed2:	6022      	str	r2, [r4, #0]
 8017ed4:	d504      	bpl.n	8017ee0 <__sflush_r+0x78>
 8017ed6:	1c42      	adds	r2, r0, #1
 8017ed8:	d101      	bne.n	8017ede <__sflush_r+0x76>
 8017eda:	682b      	ldr	r3, [r5, #0]
 8017edc:	b903      	cbnz	r3, 8017ee0 <__sflush_r+0x78>
 8017ede:	6560      	str	r0, [r4, #84]	@ 0x54
 8017ee0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017ee2:	602f      	str	r7, [r5, #0]
 8017ee4:	b1b9      	cbz	r1, 8017f16 <__sflush_r+0xae>
 8017ee6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017eea:	4299      	cmp	r1, r3
 8017eec:	d002      	beq.n	8017ef4 <__sflush_r+0x8c>
 8017eee:	4628      	mov	r0, r5
 8017ef0:	f7fe f8ea 	bl	80160c8 <_free_r>
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	6363      	str	r3, [r4, #52]	@ 0x34
 8017ef8:	e00d      	b.n	8017f16 <__sflush_r+0xae>
 8017efa:	2301      	movs	r3, #1
 8017efc:	4628      	mov	r0, r5
 8017efe:	47b0      	blx	r6
 8017f00:	4602      	mov	r2, r0
 8017f02:	1c50      	adds	r0, r2, #1
 8017f04:	d1c9      	bne.n	8017e9a <__sflush_r+0x32>
 8017f06:	682b      	ldr	r3, [r5, #0]
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d0c6      	beq.n	8017e9a <__sflush_r+0x32>
 8017f0c:	2b1d      	cmp	r3, #29
 8017f0e:	d001      	beq.n	8017f14 <__sflush_r+0xac>
 8017f10:	2b16      	cmp	r3, #22
 8017f12:	d11e      	bne.n	8017f52 <__sflush_r+0xea>
 8017f14:	602f      	str	r7, [r5, #0]
 8017f16:	2000      	movs	r0, #0
 8017f18:	e022      	b.n	8017f60 <__sflush_r+0xf8>
 8017f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017f1e:	b21b      	sxth	r3, r3
 8017f20:	e01b      	b.n	8017f5a <__sflush_r+0xf2>
 8017f22:	690f      	ldr	r7, [r1, #16]
 8017f24:	2f00      	cmp	r7, #0
 8017f26:	d0f6      	beq.n	8017f16 <__sflush_r+0xae>
 8017f28:	0793      	lsls	r3, r2, #30
 8017f2a:	680e      	ldr	r6, [r1, #0]
 8017f2c:	bf08      	it	eq
 8017f2e:	694b      	ldreq	r3, [r1, #20]
 8017f30:	600f      	str	r7, [r1, #0]
 8017f32:	bf18      	it	ne
 8017f34:	2300      	movne	r3, #0
 8017f36:	eba6 0807 	sub.w	r8, r6, r7
 8017f3a:	608b      	str	r3, [r1, #8]
 8017f3c:	f1b8 0f00 	cmp.w	r8, #0
 8017f40:	dde9      	ble.n	8017f16 <__sflush_r+0xae>
 8017f42:	6a21      	ldr	r1, [r4, #32]
 8017f44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017f46:	4643      	mov	r3, r8
 8017f48:	463a      	mov	r2, r7
 8017f4a:	4628      	mov	r0, r5
 8017f4c:	47b0      	blx	r6
 8017f4e:	2800      	cmp	r0, #0
 8017f50:	dc08      	bgt.n	8017f64 <__sflush_r+0xfc>
 8017f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017f5a:	81a3      	strh	r3, [r4, #12]
 8017f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8017f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f64:	4407      	add	r7, r0
 8017f66:	eba8 0800 	sub.w	r8, r8, r0
 8017f6a:	e7e7      	b.n	8017f3c <__sflush_r+0xd4>
 8017f6c:	dfbffffe 	.word	0xdfbffffe

08017f70 <_fflush_r>:
 8017f70:	b538      	push	{r3, r4, r5, lr}
 8017f72:	690b      	ldr	r3, [r1, #16]
 8017f74:	4605      	mov	r5, r0
 8017f76:	460c      	mov	r4, r1
 8017f78:	b913      	cbnz	r3, 8017f80 <_fflush_r+0x10>
 8017f7a:	2500      	movs	r5, #0
 8017f7c:	4628      	mov	r0, r5
 8017f7e:	bd38      	pop	{r3, r4, r5, pc}
 8017f80:	b118      	cbz	r0, 8017f8a <_fflush_r+0x1a>
 8017f82:	6a03      	ldr	r3, [r0, #32]
 8017f84:	b90b      	cbnz	r3, 8017f8a <_fflush_r+0x1a>
 8017f86:	f7fd f82f 	bl	8014fe8 <__sinit>
 8017f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d0f3      	beq.n	8017f7a <_fflush_r+0xa>
 8017f92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017f94:	07d0      	lsls	r0, r2, #31
 8017f96:	d404      	bmi.n	8017fa2 <_fflush_r+0x32>
 8017f98:	0599      	lsls	r1, r3, #22
 8017f9a:	d402      	bmi.n	8017fa2 <_fflush_r+0x32>
 8017f9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017f9e:	f7fd fa3e 	bl	801541e <__retarget_lock_acquire_recursive>
 8017fa2:	4628      	mov	r0, r5
 8017fa4:	4621      	mov	r1, r4
 8017fa6:	f7ff ff5f 	bl	8017e68 <__sflush_r>
 8017faa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017fac:	07da      	lsls	r2, r3, #31
 8017fae:	4605      	mov	r5, r0
 8017fb0:	d4e4      	bmi.n	8017f7c <_fflush_r+0xc>
 8017fb2:	89a3      	ldrh	r3, [r4, #12]
 8017fb4:	059b      	lsls	r3, r3, #22
 8017fb6:	d4e1      	bmi.n	8017f7c <_fflush_r+0xc>
 8017fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017fba:	f7fd fa31 	bl	8015420 <__retarget_lock_release_recursive>
 8017fbe:	e7dd      	b.n	8017f7c <_fflush_r+0xc>

08017fc0 <__swhatbuf_r>:
 8017fc0:	b570      	push	{r4, r5, r6, lr}
 8017fc2:	460c      	mov	r4, r1
 8017fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017fc8:	2900      	cmp	r1, #0
 8017fca:	b096      	sub	sp, #88	@ 0x58
 8017fcc:	4615      	mov	r5, r2
 8017fce:	461e      	mov	r6, r3
 8017fd0:	da0d      	bge.n	8017fee <__swhatbuf_r+0x2e>
 8017fd2:	89a3      	ldrh	r3, [r4, #12]
 8017fd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017fd8:	f04f 0100 	mov.w	r1, #0
 8017fdc:	bf14      	ite	ne
 8017fde:	2340      	movne	r3, #64	@ 0x40
 8017fe0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017fe4:	2000      	movs	r0, #0
 8017fe6:	6031      	str	r1, [r6, #0]
 8017fe8:	602b      	str	r3, [r5, #0]
 8017fea:	b016      	add	sp, #88	@ 0x58
 8017fec:	bd70      	pop	{r4, r5, r6, pc}
 8017fee:	466a      	mov	r2, sp
 8017ff0:	f000 f874 	bl	80180dc <_fstat_r>
 8017ff4:	2800      	cmp	r0, #0
 8017ff6:	dbec      	blt.n	8017fd2 <__swhatbuf_r+0x12>
 8017ff8:	9901      	ldr	r1, [sp, #4]
 8017ffa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017ffe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018002:	4259      	negs	r1, r3
 8018004:	4159      	adcs	r1, r3
 8018006:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801800a:	e7eb      	b.n	8017fe4 <__swhatbuf_r+0x24>

0801800c <__smakebuf_r>:
 801800c:	898b      	ldrh	r3, [r1, #12]
 801800e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018010:	079d      	lsls	r5, r3, #30
 8018012:	4606      	mov	r6, r0
 8018014:	460c      	mov	r4, r1
 8018016:	d507      	bpl.n	8018028 <__smakebuf_r+0x1c>
 8018018:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801801c:	6023      	str	r3, [r4, #0]
 801801e:	6123      	str	r3, [r4, #16]
 8018020:	2301      	movs	r3, #1
 8018022:	6163      	str	r3, [r4, #20]
 8018024:	b003      	add	sp, #12
 8018026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018028:	ab01      	add	r3, sp, #4
 801802a:	466a      	mov	r2, sp
 801802c:	f7ff ffc8 	bl	8017fc0 <__swhatbuf_r>
 8018030:	9f00      	ldr	r7, [sp, #0]
 8018032:	4605      	mov	r5, r0
 8018034:	4639      	mov	r1, r7
 8018036:	4630      	mov	r0, r6
 8018038:	f7fe f8ba 	bl	80161b0 <_malloc_r>
 801803c:	b948      	cbnz	r0, 8018052 <__smakebuf_r+0x46>
 801803e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018042:	059a      	lsls	r2, r3, #22
 8018044:	d4ee      	bmi.n	8018024 <__smakebuf_r+0x18>
 8018046:	f023 0303 	bic.w	r3, r3, #3
 801804a:	f043 0302 	orr.w	r3, r3, #2
 801804e:	81a3      	strh	r3, [r4, #12]
 8018050:	e7e2      	b.n	8018018 <__smakebuf_r+0xc>
 8018052:	89a3      	ldrh	r3, [r4, #12]
 8018054:	6020      	str	r0, [r4, #0]
 8018056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801805a:	81a3      	strh	r3, [r4, #12]
 801805c:	9b01      	ldr	r3, [sp, #4]
 801805e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018062:	b15b      	cbz	r3, 801807c <__smakebuf_r+0x70>
 8018064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018068:	4630      	mov	r0, r6
 801806a:	f000 f849 	bl	8018100 <_isatty_r>
 801806e:	b128      	cbz	r0, 801807c <__smakebuf_r+0x70>
 8018070:	89a3      	ldrh	r3, [r4, #12]
 8018072:	f023 0303 	bic.w	r3, r3, #3
 8018076:	f043 0301 	orr.w	r3, r3, #1
 801807a:	81a3      	strh	r3, [r4, #12]
 801807c:	89a3      	ldrh	r3, [r4, #12]
 801807e:	431d      	orrs	r5, r3
 8018080:	81a5      	strh	r5, [r4, #12]
 8018082:	e7cf      	b.n	8018024 <__smakebuf_r+0x18>

08018084 <memmove>:
 8018084:	4288      	cmp	r0, r1
 8018086:	b510      	push	{r4, lr}
 8018088:	eb01 0402 	add.w	r4, r1, r2
 801808c:	d902      	bls.n	8018094 <memmove+0x10>
 801808e:	4284      	cmp	r4, r0
 8018090:	4623      	mov	r3, r4
 8018092:	d807      	bhi.n	80180a4 <memmove+0x20>
 8018094:	1e43      	subs	r3, r0, #1
 8018096:	42a1      	cmp	r1, r4
 8018098:	d008      	beq.n	80180ac <memmove+0x28>
 801809a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801809e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80180a2:	e7f8      	b.n	8018096 <memmove+0x12>
 80180a4:	4402      	add	r2, r0
 80180a6:	4601      	mov	r1, r0
 80180a8:	428a      	cmp	r2, r1
 80180aa:	d100      	bne.n	80180ae <memmove+0x2a>
 80180ac:	bd10      	pop	{r4, pc}
 80180ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80180b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80180b6:	e7f7      	b.n	80180a8 <memmove+0x24>

080180b8 <strncmp>:
 80180b8:	b510      	push	{r4, lr}
 80180ba:	b16a      	cbz	r2, 80180d8 <strncmp+0x20>
 80180bc:	3901      	subs	r1, #1
 80180be:	1884      	adds	r4, r0, r2
 80180c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80180c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80180c8:	429a      	cmp	r2, r3
 80180ca:	d103      	bne.n	80180d4 <strncmp+0x1c>
 80180cc:	42a0      	cmp	r0, r4
 80180ce:	d001      	beq.n	80180d4 <strncmp+0x1c>
 80180d0:	2a00      	cmp	r2, #0
 80180d2:	d1f5      	bne.n	80180c0 <strncmp+0x8>
 80180d4:	1ad0      	subs	r0, r2, r3
 80180d6:	bd10      	pop	{r4, pc}
 80180d8:	4610      	mov	r0, r2
 80180da:	e7fc      	b.n	80180d6 <strncmp+0x1e>

080180dc <_fstat_r>:
 80180dc:	b538      	push	{r3, r4, r5, lr}
 80180de:	4d07      	ldr	r5, [pc, #28]	@ (80180fc <_fstat_r+0x20>)
 80180e0:	2300      	movs	r3, #0
 80180e2:	4604      	mov	r4, r0
 80180e4:	4608      	mov	r0, r1
 80180e6:	4611      	mov	r1, r2
 80180e8:	602b      	str	r3, [r5, #0]
 80180ea:	f7ec fc17 	bl	800491c <_fstat>
 80180ee:	1c43      	adds	r3, r0, #1
 80180f0:	d102      	bne.n	80180f8 <_fstat_r+0x1c>
 80180f2:	682b      	ldr	r3, [r5, #0]
 80180f4:	b103      	cbz	r3, 80180f8 <_fstat_r+0x1c>
 80180f6:	6023      	str	r3, [r4, #0]
 80180f8:	bd38      	pop	{r3, r4, r5, pc}
 80180fa:	bf00      	nop
 80180fc:	20013238 	.word	0x20013238

08018100 <_isatty_r>:
 8018100:	b538      	push	{r3, r4, r5, lr}
 8018102:	4d06      	ldr	r5, [pc, #24]	@ (801811c <_isatty_r+0x1c>)
 8018104:	2300      	movs	r3, #0
 8018106:	4604      	mov	r4, r0
 8018108:	4608      	mov	r0, r1
 801810a:	602b      	str	r3, [r5, #0]
 801810c:	f7ec fc16 	bl	800493c <_isatty>
 8018110:	1c43      	adds	r3, r0, #1
 8018112:	d102      	bne.n	801811a <_isatty_r+0x1a>
 8018114:	682b      	ldr	r3, [r5, #0]
 8018116:	b103      	cbz	r3, 801811a <_isatty_r+0x1a>
 8018118:	6023      	str	r3, [r4, #0]
 801811a:	bd38      	pop	{r3, r4, r5, pc}
 801811c:	20013238 	.word	0x20013238

08018120 <_sbrk_r>:
 8018120:	b538      	push	{r3, r4, r5, lr}
 8018122:	4d06      	ldr	r5, [pc, #24]	@ (801813c <_sbrk_r+0x1c>)
 8018124:	2300      	movs	r3, #0
 8018126:	4604      	mov	r4, r0
 8018128:	4608      	mov	r0, r1
 801812a:	602b      	str	r3, [r5, #0]
 801812c:	f7ec fc1e 	bl	800496c <_sbrk>
 8018130:	1c43      	adds	r3, r0, #1
 8018132:	d102      	bne.n	801813a <_sbrk_r+0x1a>
 8018134:	682b      	ldr	r3, [r5, #0]
 8018136:	b103      	cbz	r3, 801813a <_sbrk_r+0x1a>
 8018138:	6023      	str	r3, [r4, #0]
 801813a:	bd38      	pop	{r3, r4, r5, pc}
 801813c:	20013238 	.word	0x20013238

08018140 <memcpy>:
 8018140:	440a      	add	r2, r1
 8018142:	4291      	cmp	r1, r2
 8018144:	f100 33ff 	add.w	r3, r0, #4294967295
 8018148:	d100      	bne.n	801814c <memcpy+0xc>
 801814a:	4770      	bx	lr
 801814c:	b510      	push	{r4, lr}
 801814e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018156:	4291      	cmp	r1, r2
 8018158:	d1f9      	bne.n	801814e <memcpy+0xe>
 801815a:	bd10      	pop	{r4, pc}
 801815c:	0000      	movs	r0, r0
	...

08018160 <nan>:
 8018160:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018168 <nan+0x8>
 8018164:	4770      	bx	lr
 8018166:	bf00      	nop
 8018168:	00000000 	.word	0x00000000
 801816c:	7ff80000 	.word	0x7ff80000

08018170 <__assert_func>:
 8018170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018172:	4614      	mov	r4, r2
 8018174:	461a      	mov	r2, r3
 8018176:	4b09      	ldr	r3, [pc, #36]	@ (801819c <__assert_func+0x2c>)
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	4605      	mov	r5, r0
 801817c:	68d8      	ldr	r0, [r3, #12]
 801817e:	b954      	cbnz	r4, 8018196 <__assert_func+0x26>
 8018180:	4b07      	ldr	r3, [pc, #28]	@ (80181a0 <__assert_func+0x30>)
 8018182:	461c      	mov	r4, r3
 8018184:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018188:	9100      	str	r1, [sp, #0]
 801818a:	462b      	mov	r3, r5
 801818c:	4905      	ldr	r1, [pc, #20]	@ (80181a4 <__assert_func+0x34>)
 801818e:	f000 fba7 	bl	80188e0 <fiprintf>
 8018192:	f000 fbb7 	bl	8018904 <abort>
 8018196:	4b04      	ldr	r3, [pc, #16]	@ (80181a8 <__assert_func+0x38>)
 8018198:	e7f4      	b.n	8018184 <__assert_func+0x14>
 801819a:	bf00      	nop
 801819c:	20000408 	.word	0x20000408
 80181a0:	08027bc5 	.word	0x08027bc5
 80181a4:	08027b97 	.word	0x08027b97
 80181a8:	08027b8a 	.word	0x08027b8a

080181ac <_calloc_r>:
 80181ac:	b570      	push	{r4, r5, r6, lr}
 80181ae:	fba1 5402 	umull	r5, r4, r1, r2
 80181b2:	b93c      	cbnz	r4, 80181c4 <_calloc_r+0x18>
 80181b4:	4629      	mov	r1, r5
 80181b6:	f7fd fffb 	bl	80161b0 <_malloc_r>
 80181ba:	4606      	mov	r6, r0
 80181bc:	b928      	cbnz	r0, 80181ca <_calloc_r+0x1e>
 80181be:	2600      	movs	r6, #0
 80181c0:	4630      	mov	r0, r6
 80181c2:	bd70      	pop	{r4, r5, r6, pc}
 80181c4:	220c      	movs	r2, #12
 80181c6:	6002      	str	r2, [r0, #0]
 80181c8:	e7f9      	b.n	80181be <_calloc_r+0x12>
 80181ca:	462a      	mov	r2, r5
 80181cc:	4621      	mov	r1, r4
 80181ce:	f7fd f8a9 	bl	8015324 <memset>
 80181d2:	e7f5      	b.n	80181c0 <_calloc_r+0x14>

080181d4 <rshift>:
 80181d4:	6903      	ldr	r3, [r0, #16]
 80181d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80181da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80181de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80181e2:	f100 0414 	add.w	r4, r0, #20
 80181e6:	dd45      	ble.n	8018274 <rshift+0xa0>
 80181e8:	f011 011f 	ands.w	r1, r1, #31
 80181ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80181f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80181f4:	d10c      	bne.n	8018210 <rshift+0x3c>
 80181f6:	f100 0710 	add.w	r7, r0, #16
 80181fa:	4629      	mov	r1, r5
 80181fc:	42b1      	cmp	r1, r6
 80181fe:	d334      	bcc.n	801826a <rshift+0x96>
 8018200:	1a9b      	subs	r3, r3, r2
 8018202:	009b      	lsls	r3, r3, #2
 8018204:	1eea      	subs	r2, r5, #3
 8018206:	4296      	cmp	r6, r2
 8018208:	bf38      	it	cc
 801820a:	2300      	movcc	r3, #0
 801820c:	4423      	add	r3, r4
 801820e:	e015      	b.n	801823c <rshift+0x68>
 8018210:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018214:	f1c1 0820 	rsb	r8, r1, #32
 8018218:	40cf      	lsrs	r7, r1
 801821a:	f105 0e04 	add.w	lr, r5, #4
 801821e:	46a1      	mov	r9, r4
 8018220:	4576      	cmp	r6, lr
 8018222:	46f4      	mov	ip, lr
 8018224:	d815      	bhi.n	8018252 <rshift+0x7e>
 8018226:	1a9a      	subs	r2, r3, r2
 8018228:	0092      	lsls	r2, r2, #2
 801822a:	3a04      	subs	r2, #4
 801822c:	3501      	adds	r5, #1
 801822e:	42ae      	cmp	r6, r5
 8018230:	bf38      	it	cc
 8018232:	2200      	movcc	r2, #0
 8018234:	18a3      	adds	r3, r4, r2
 8018236:	50a7      	str	r7, [r4, r2]
 8018238:	b107      	cbz	r7, 801823c <rshift+0x68>
 801823a:	3304      	adds	r3, #4
 801823c:	1b1a      	subs	r2, r3, r4
 801823e:	42a3      	cmp	r3, r4
 8018240:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018244:	bf08      	it	eq
 8018246:	2300      	moveq	r3, #0
 8018248:	6102      	str	r2, [r0, #16]
 801824a:	bf08      	it	eq
 801824c:	6143      	streq	r3, [r0, #20]
 801824e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018252:	f8dc c000 	ldr.w	ip, [ip]
 8018256:	fa0c fc08 	lsl.w	ip, ip, r8
 801825a:	ea4c 0707 	orr.w	r7, ip, r7
 801825e:	f849 7b04 	str.w	r7, [r9], #4
 8018262:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018266:	40cf      	lsrs	r7, r1
 8018268:	e7da      	b.n	8018220 <rshift+0x4c>
 801826a:	f851 cb04 	ldr.w	ip, [r1], #4
 801826e:	f847 cf04 	str.w	ip, [r7, #4]!
 8018272:	e7c3      	b.n	80181fc <rshift+0x28>
 8018274:	4623      	mov	r3, r4
 8018276:	e7e1      	b.n	801823c <rshift+0x68>

08018278 <__hexdig_fun>:
 8018278:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801827c:	2b09      	cmp	r3, #9
 801827e:	d802      	bhi.n	8018286 <__hexdig_fun+0xe>
 8018280:	3820      	subs	r0, #32
 8018282:	b2c0      	uxtb	r0, r0
 8018284:	4770      	bx	lr
 8018286:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801828a:	2b05      	cmp	r3, #5
 801828c:	d801      	bhi.n	8018292 <__hexdig_fun+0x1a>
 801828e:	3847      	subs	r0, #71	@ 0x47
 8018290:	e7f7      	b.n	8018282 <__hexdig_fun+0xa>
 8018292:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8018296:	2b05      	cmp	r3, #5
 8018298:	d801      	bhi.n	801829e <__hexdig_fun+0x26>
 801829a:	3827      	subs	r0, #39	@ 0x27
 801829c:	e7f1      	b.n	8018282 <__hexdig_fun+0xa>
 801829e:	2000      	movs	r0, #0
 80182a0:	4770      	bx	lr
	...

080182a4 <__gethex>:
 80182a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182a8:	b085      	sub	sp, #20
 80182aa:	468a      	mov	sl, r1
 80182ac:	9302      	str	r3, [sp, #8]
 80182ae:	680b      	ldr	r3, [r1, #0]
 80182b0:	9001      	str	r0, [sp, #4]
 80182b2:	4690      	mov	r8, r2
 80182b4:	1c9c      	adds	r4, r3, #2
 80182b6:	46a1      	mov	r9, r4
 80182b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80182bc:	2830      	cmp	r0, #48	@ 0x30
 80182be:	d0fa      	beq.n	80182b6 <__gethex+0x12>
 80182c0:	eba9 0303 	sub.w	r3, r9, r3
 80182c4:	f1a3 0b02 	sub.w	fp, r3, #2
 80182c8:	f7ff ffd6 	bl	8018278 <__hexdig_fun>
 80182cc:	4605      	mov	r5, r0
 80182ce:	2800      	cmp	r0, #0
 80182d0:	d168      	bne.n	80183a4 <__gethex+0x100>
 80182d2:	49a0      	ldr	r1, [pc, #640]	@ (8018554 <__gethex+0x2b0>)
 80182d4:	2201      	movs	r2, #1
 80182d6:	4648      	mov	r0, r9
 80182d8:	f7ff feee 	bl	80180b8 <strncmp>
 80182dc:	4607      	mov	r7, r0
 80182de:	2800      	cmp	r0, #0
 80182e0:	d167      	bne.n	80183b2 <__gethex+0x10e>
 80182e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80182e6:	4626      	mov	r6, r4
 80182e8:	f7ff ffc6 	bl	8018278 <__hexdig_fun>
 80182ec:	2800      	cmp	r0, #0
 80182ee:	d062      	beq.n	80183b6 <__gethex+0x112>
 80182f0:	4623      	mov	r3, r4
 80182f2:	7818      	ldrb	r0, [r3, #0]
 80182f4:	2830      	cmp	r0, #48	@ 0x30
 80182f6:	4699      	mov	r9, r3
 80182f8:	f103 0301 	add.w	r3, r3, #1
 80182fc:	d0f9      	beq.n	80182f2 <__gethex+0x4e>
 80182fe:	f7ff ffbb 	bl	8018278 <__hexdig_fun>
 8018302:	fab0 f580 	clz	r5, r0
 8018306:	096d      	lsrs	r5, r5, #5
 8018308:	f04f 0b01 	mov.w	fp, #1
 801830c:	464a      	mov	r2, r9
 801830e:	4616      	mov	r6, r2
 8018310:	3201      	adds	r2, #1
 8018312:	7830      	ldrb	r0, [r6, #0]
 8018314:	f7ff ffb0 	bl	8018278 <__hexdig_fun>
 8018318:	2800      	cmp	r0, #0
 801831a:	d1f8      	bne.n	801830e <__gethex+0x6a>
 801831c:	498d      	ldr	r1, [pc, #564]	@ (8018554 <__gethex+0x2b0>)
 801831e:	2201      	movs	r2, #1
 8018320:	4630      	mov	r0, r6
 8018322:	f7ff fec9 	bl	80180b8 <strncmp>
 8018326:	2800      	cmp	r0, #0
 8018328:	d13f      	bne.n	80183aa <__gethex+0x106>
 801832a:	b944      	cbnz	r4, 801833e <__gethex+0x9a>
 801832c:	1c74      	adds	r4, r6, #1
 801832e:	4622      	mov	r2, r4
 8018330:	4616      	mov	r6, r2
 8018332:	3201      	adds	r2, #1
 8018334:	7830      	ldrb	r0, [r6, #0]
 8018336:	f7ff ff9f 	bl	8018278 <__hexdig_fun>
 801833a:	2800      	cmp	r0, #0
 801833c:	d1f8      	bne.n	8018330 <__gethex+0x8c>
 801833e:	1ba4      	subs	r4, r4, r6
 8018340:	00a7      	lsls	r7, r4, #2
 8018342:	7833      	ldrb	r3, [r6, #0]
 8018344:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8018348:	2b50      	cmp	r3, #80	@ 0x50
 801834a:	d13e      	bne.n	80183ca <__gethex+0x126>
 801834c:	7873      	ldrb	r3, [r6, #1]
 801834e:	2b2b      	cmp	r3, #43	@ 0x2b
 8018350:	d033      	beq.n	80183ba <__gethex+0x116>
 8018352:	2b2d      	cmp	r3, #45	@ 0x2d
 8018354:	d034      	beq.n	80183c0 <__gethex+0x11c>
 8018356:	1c71      	adds	r1, r6, #1
 8018358:	2400      	movs	r4, #0
 801835a:	7808      	ldrb	r0, [r1, #0]
 801835c:	f7ff ff8c 	bl	8018278 <__hexdig_fun>
 8018360:	1e43      	subs	r3, r0, #1
 8018362:	b2db      	uxtb	r3, r3
 8018364:	2b18      	cmp	r3, #24
 8018366:	d830      	bhi.n	80183ca <__gethex+0x126>
 8018368:	f1a0 0210 	sub.w	r2, r0, #16
 801836c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018370:	f7ff ff82 	bl	8018278 <__hexdig_fun>
 8018374:	f100 3cff 	add.w	ip, r0, #4294967295
 8018378:	fa5f fc8c 	uxtb.w	ip, ip
 801837c:	f1bc 0f18 	cmp.w	ip, #24
 8018380:	f04f 030a 	mov.w	r3, #10
 8018384:	d91e      	bls.n	80183c4 <__gethex+0x120>
 8018386:	b104      	cbz	r4, 801838a <__gethex+0xe6>
 8018388:	4252      	negs	r2, r2
 801838a:	4417      	add	r7, r2
 801838c:	f8ca 1000 	str.w	r1, [sl]
 8018390:	b1ed      	cbz	r5, 80183ce <__gethex+0x12a>
 8018392:	f1bb 0f00 	cmp.w	fp, #0
 8018396:	bf0c      	ite	eq
 8018398:	2506      	moveq	r5, #6
 801839a:	2500      	movne	r5, #0
 801839c:	4628      	mov	r0, r5
 801839e:	b005      	add	sp, #20
 80183a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183a4:	2500      	movs	r5, #0
 80183a6:	462c      	mov	r4, r5
 80183a8:	e7b0      	b.n	801830c <__gethex+0x68>
 80183aa:	2c00      	cmp	r4, #0
 80183ac:	d1c7      	bne.n	801833e <__gethex+0x9a>
 80183ae:	4627      	mov	r7, r4
 80183b0:	e7c7      	b.n	8018342 <__gethex+0x9e>
 80183b2:	464e      	mov	r6, r9
 80183b4:	462f      	mov	r7, r5
 80183b6:	2501      	movs	r5, #1
 80183b8:	e7c3      	b.n	8018342 <__gethex+0x9e>
 80183ba:	2400      	movs	r4, #0
 80183bc:	1cb1      	adds	r1, r6, #2
 80183be:	e7cc      	b.n	801835a <__gethex+0xb6>
 80183c0:	2401      	movs	r4, #1
 80183c2:	e7fb      	b.n	80183bc <__gethex+0x118>
 80183c4:	fb03 0002 	mla	r0, r3, r2, r0
 80183c8:	e7ce      	b.n	8018368 <__gethex+0xc4>
 80183ca:	4631      	mov	r1, r6
 80183cc:	e7de      	b.n	801838c <__gethex+0xe8>
 80183ce:	eba6 0309 	sub.w	r3, r6, r9
 80183d2:	3b01      	subs	r3, #1
 80183d4:	4629      	mov	r1, r5
 80183d6:	2b07      	cmp	r3, #7
 80183d8:	dc0a      	bgt.n	80183f0 <__gethex+0x14c>
 80183da:	9801      	ldr	r0, [sp, #4]
 80183dc:	f7fd ff74 	bl	80162c8 <_Balloc>
 80183e0:	4604      	mov	r4, r0
 80183e2:	b940      	cbnz	r0, 80183f6 <__gethex+0x152>
 80183e4:	4b5c      	ldr	r3, [pc, #368]	@ (8018558 <__gethex+0x2b4>)
 80183e6:	4602      	mov	r2, r0
 80183e8:	21e4      	movs	r1, #228	@ 0xe4
 80183ea:	485c      	ldr	r0, [pc, #368]	@ (801855c <__gethex+0x2b8>)
 80183ec:	f7ff fec0 	bl	8018170 <__assert_func>
 80183f0:	3101      	adds	r1, #1
 80183f2:	105b      	asrs	r3, r3, #1
 80183f4:	e7ef      	b.n	80183d6 <__gethex+0x132>
 80183f6:	f100 0a14 	add.w	sl, r0, #20
 80183fa:	2300      	movs	r3, #0
 80183fc:	4655      	mov	r5, sl
 80183fe:	469b      	mov	fp, r3
 8018400:	45b1      	cmp	r9, r6
 8018402:	d337      	bcc.n	8018474 <__gethex+0x1d0>
 8018404:	f845 bb04 	str.w	fp, [r5], #4
 8018408:	eba5 050a 	sub.w	r5, r5, sl
 801840c:	10ad      	asrs	r5, r5, #2
 801840e:	6125      	str	r5, [r4, #16]
 8018410:	4658      	mov	r0, fp
 8018412:	f7fe f84b 	bl	80164ac <__hi0bits>
 8018416:	016d      	lsls	r5, r5, #5
 8018418:	f8d8 6000 	ldr.w	r6, [r8]
 801841c:	1a2d      	subs	r5, r5, r0
 801841e:	42b5      	cmp	r5, r6
 8018420:	dd54      	ble.n	80184cc <__gethex+0x228>
 8018422:	1bad      	subs	r5, r5, r6
 8018424:	4629      	mov	r1, r5
 8018426:	4620      	mov	r0, r4
 8018428:	f7fe fbdf 	bl	8016bea <__any_on>
 801842c:	4681      	mov	r9, r0
 801842e:	b178      	cbz	r0, 8018450 <__gethex+0x1ac>
 8018430:	1e6b      	subs	r3, r5, #1
 8018432:	1159      	asrs	r1, r3, #5
 8018434:	f003 021f 	and.w	r2, r3, #31
 8018438:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801843c:	f04f 0901 	mov.w	r9, #1
 8018440:	fa09 f202 	lsl.w	r2, r9, r2
 8018444:	420a      	tst	r2, r1
 8018446:	d003      	beq.n	8018450 <__gethex+0x1ac>
 8018448:	454b      	cmp	r3, r9
 801844a:	dc36      	bgt.n	80184ba <__gethex+0x216>
 801844c:	f04f 0902 	mov.w	r9, #2
 8018450:	4629      	mov	r1, r5
 8018452:	4620      	mov	r0, r4
 8018454:	f7ff febe 	bl	80181d4 <rshift>
 8018458:	442f      	add	r7, r5
 801845a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801845e:	42bb      	cmp	r3, r7
 8018460:	da42      	bge.n	80184e8 <__gethex+0x244>
 8018462:	9801      	ldr	r0, [sp, #4]
 8018464:	4621      	mov	r1, r4
 8018466:	f7fd ff6f 	bl	8016348 <_Bfree>
 801846a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801846c:	2300      	movs	r3, #0
 801846e:	6013      	str	r3, [r2, #0]
 8018470:	25a3      	movs	r5, #163	@ 0xa3
 8018472:	e793      	b.n	801839c <__gethex+0xf8>
 8018474:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8018478:	2a2e      	cmp	r2, #46	@ 0x2e
 801847a:	d012      	beq.n	80184a2 <__gethex+0x1fe>
 801847c:	2b20      	cmp	r3, #32
 801847e:	d104      	bne.n	801848a <__gethex+0x1e6>
 8018480:	f845 bb04 	str.w	fp, [r5], #4
 8018484:	f04f 0b00 	mov.w	fp, #0
 8018488:	465b      	mov	r3, fp
 801848a:	7830      	ldrb	r0, [r6, #0]
 801848c:	9303      	str	r3, [sp, #12]
 801848e:	f7ff fef3 	bl	8018278 <__hexdig_fun>
 8018492:	9b03      	ldr	r3, [sp, #12]
 8018494:	f000 000f 	and.w	r0, r0, #15
 8018498:	4098      	lsls	r0, r3
 801849a:	ea4b 0b00 	orr.w	fp, fp, r0
 801849e:	3304      	adds	r3, #4
 80184a0:	e7ae      	b.n	8018400 <__gethex+0x15c>
 80184a2:	45b1      	cmp	r9, r6
 80184a4:	d8ea      	bhi.n	801847c <__gethex+0x1d8>
 80184a6:	492b      	ldr	r1, [pc, #172]	@ (8018554 <__gethex+0x2b0>)
 80184a8:	9303      	str	r3, [sp, #12]
 80184aa:	2201      	movs	r2, #1
 80184ac:	4630      	mov	r0, r6
 80184ae:	f7ff fe03 	bl	80180b8 <strncmp>
 80184b2:	9b03      	ldr	r3, [sp, #12]
 80184b4:	2800      	cmp	r0, #0
 80184b6:	d1e1      	bne.n	801847c <__gethex+0x1d8>
 80184b8:	e7a2      	b.n	8018400 <__gethex+0x15c>
 80184ba:	1ea9      	subs	r1, r5, #2
 80184bc:	4620      	mov	r0, r4
 80184be:	f7fe fb94 	bl	8016bea <__any_on>
 80184c2:	2800      	cmp	r0, #0
 80184c4:	d0c2      	beq.n	801844c <__gethex+0x1a8>
 80184c6:	f04f 0903 	mov.w	r9, #3
 80184ca:	e7c1      	b.n	8018450 <__gethex+0x1ac>
 80184cc:	da09      	bge.n	80184e2 <__gethex+0x23e>
 80184ce:	1b75      	subs	r5, r6, r5
 80184d0:	4621      	mov	r1, r4
 80184d2:	9801      	ldr	r0, [sp, #4]
 80184d4:	462a      	mov	r2, r5
 80184d6:	f7fe f94f 	bl	8016778 <__lshift>
 80184da:	1b7f      	subs	r7, r7, r5
 80184dc:	4604      	mov	r4, r0
 80184de:	f100 0a14 	add.w	sl, r0, #20
 80184e2:	f04f 0900 	mov.w	r9, #0
 80184e6:	e7b8      	b.n	801845a <__gethex+0x1b6>
 80184e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80184ec:	42bd      	cmp	r5, r7
 80184ee:	dd6f      	ble.n	80185d0 <__gethex+0x32c>
 80184f0:	1bed      	subs	r5, r5, r7
 80184f2:	42ae      	cmp	r6, r5
 80184f4:	dc34      	bgt.n	8018560 <__gethex+0x2bc>
 80184f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80184fa:	2b02      	cmp	r3, #2
 80184fc:	d022      	beq.n	8018544 <__gethex+0x2a0>
 80184fe:	2b03      	cmp	r3, #3
 8018500:	d024      	beq.n	801854c <__gethex+0x2a8>
 8018502:	2b01      	cmp	r3, #1
 8018504:	d115      	bne.n	8018532 <__gethex+0x28e>
 8018506:	42ae      	cmp	r6, r5
 8018508:	d113      	bne.n	8018532 <__gethex+0x28e>
 801850a:	2e01      	cmp	r6, #1
 801850c:	d10b      	bne.n	8018526 <__gethex+0x282>
 801850e:	9a02      	ldr	r2, [sp, #8]
 8018510:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018514:	6013      	str	r3, [r2, #0]
 8018516:	2301      	movs	r3, #1
 8018518:	6123      	str	r3, [r4, #16]
 801851a:	f8ca 3000 	str.w	r3, [sl]
 801851e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018520:	2562      	movs	r5, #98	@ 0x62
 8018522:	601c      	str	r4, [r3, #0]
 8018524:	e73a      	b.n	801839c <__gethex+0xf8>
 8018526:	1e71      	subs	r1, r6, #1
 8018528:	4620      	mov	r0, r4
 801852a:	f7fe fb5e 	bl	8016bea <__any_on>
 801852e:	2800      	cmp	r0, #0
 8018530:	d1ed      	bne.n	801850e <__gethex+0x26a>
 8018532:	9801      	ldr	r0, [sp, #4]
 8018534:	4621      	mov	r1, r4
 8018536:	f7fd ff07 	bl	8016348 <_Bfree>
 801853a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801853c:	2300      	movs	r3, #0
 801853e:	6013      	str	r3, [r2, #0]
 8018540:	2550      	movs	r5, #80	@ 0x50
 8018542:	e72b      	b.n	801839c <__gethex+0xf8>
 8018544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018546:	2b00      	cmp	r3, #0
 8018548:	d1f3      	bne.n	8018532 <__gethex+0x28e>
 801854a:	e7e0      	b.n	801850e <__gethex+0x26a>
 801854c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801854e:	2b00      	cmp	r3, #0
 8018550:	d1dd      	bne.n	801850e <__gethex+0x26a>
 8018552:	e7ee      	b.n	8018532 <__gethex+0x28e>
 8018554:	08027a18 	.word	0x08027a18
 8018558:	080278ad 	.word	0x080278ad
 801855c:	08027bc6 	.word	0x08027bc6
 8018560:	1e6f      	subs	r7, r5, #1
 8018562:	f1b9 0f00 	cmp.w	r9, #0
 8018566:	d130      	bne.n	80185ca <__gethex+0x326>
 8018568:	b127      	cbz	r7, 8018574 <__gethex+0x2d0>
 801856a:	4639      	mov	r1, r7
 801856c:	4620      	mov	r0, r4
 801856e:	f7fe fb3c 	bl	8016bea <__any_on>
 8018572:	4681      	mov	r9, r0
 8018574:	117a      	asrs	r2, r7, #5
 8018576:	2301      	movs	r3, #1
 8018578:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801857c:	f007 071f 	and.w	r7, r7, #31
 8018580:	40bb      	lsls	r3, r7
 8018582:	4213      	tst	r3, r2
 8018584:	4629      	mov	r1, r5
 8018586:	4620      	mov	r0, r4
 8018588:	bf18      	it	ne
 801858a:	f049 0902 	orrne.w	r9, r9, #2
 801858e:	f7ff fe21 	bl	80181d4 <rshift>
 8018592:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8018596:	1b76      	subs	r6, r6, r5
 8018598:	2502      	movs	r5, #2
 801859a:	f1b9 0f00 	cmp.w	r9, #0
 801859e:	d047      	beq.n	8018630 <__gethex+0x38c>
 80185a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80185a4:	2b02      	cmp	r3, #2
 80185a6:	d015      	beq.n	80185d4 <__gethex+0x330>
 80185a8:	2b03      	cmp	r3, #3
 80185aa:	d017      	beq.n	80185dc <__gethex+0x338>
 80185ac:	2b01      	cmp	r3, #1
 80185ae:	d109      	bne.n	80185c4 <__gethex+0x320>
 80185b0:	f019 0f02 	tst.w	r9, #2
 80185b4:	d006      	beq.n	80185c4 <__gethex+0x320>
 80185b6:	f8da 3000 	ldr.w	r3, [sl]
 80185ba:	ea49 0903 	orr.w	r9, r9, r3
 80185be:	f019 0f01 	tst.w	r9, #1
 80185c2:	d10e      	bne.n	80185e2 <__gethex+0x33e>
 80185c4:	f045 0510 	orr.w	r5, r5, #16
 80185c8:	e032      	b.n	8018630 <__gethex+0x38c>
 80185ca:	f04f 0901 	mov.w	r9, #1
 80185ce:	e7d1      	b.n	8018574 <__gethex+0x2d0>
 80185d0:	2501      	movs	r5, #1
 80185d2:	e7e2      	b.n	801859a <__gethex+0x2f6>
 80185d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80185d6:	f1c3 0301 	rsb	r3, r3, #1
 80185da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80185dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d0f0      	beq.n	80185c4 <__gethex+0x320>
 80185e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80185e6:	f104 0314 	add.w	r3, r4, #20
 80185ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80185ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80185f2:	f04f 0c00 	mov.w	ip, #0
 80185f6:	4618      	mov	r0, r3
 80185f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80185fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018600:	d01b      	beq.n	801863a <__gethex+0x396>
 8018602:	3201      	adds	r2, #1
 8018604:	6002      	str	r2, [r0, #0]
 8018606:	2d02      	cmp	r5, #2
 8018608:	f104 0314 	add.w	r3, r4, #20
 801860c:	d13c      	bne.n	8018688 <__gethex+0x3e4>
 801860e:	f8d8 2000 	ldr.w	r2, [r8]
 8018612:	3a01      	subs	r2, #1
 8018614:	42b2      	cmp	r2, r6
 8018616:	d109      	bne.n	801862c <__gethex+0x388>
 8018618:	1171      	asrs	r1, r6, #5
 801861a:	2201      	movs	r2, #1
 801861c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018620:	f006 061f 	and.w	r6, r6, #31
 8018624:	fa02 f606 	lsl.w	r6, r2, r6
 8018628:	421e      	tst	r6, r3
 801862a:	d13a      	bne.n	80186a2 <__gethex+0x3fe>
 801862c:	f045 0520 	orr.w	r5, r5, #32
 8018630:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018632:	601c      	str	r4, [r3, #0]
 8018634:	9b02      	ldr	r3, [sp, #8]
 8018636:	601f      	str	r7, [r3, #0]
 8018638:	e6b0      	b.n	801839c <__gethex+0xf8>
 801863a:	4299      	cmp	r1, r3
 801863c:	f843 cc04 	str.w	ip, [r3, #-4]
 8018640:	d8d9      	bhi.n	80185f6 <__gethex+0x352>
 8018642:	68a3      	ldr	r3, [r4, #8]
 8018644:	459b      	cmp	fp, r3
 8018646:	db17      	blt.n	8018678 <__gethex+0x3d4>
 8018648:	6861      	ldr	r1, [r4, #4]
 801864a:	9801      	ldr	r0, [sp, #4]
 801864c:	3101      	adds	r1, #1
 801864e:	f7fd fe3b 	bl	80162c8 <_Balloc>
 8018652:	4681      	mov	r9, r0
 8018654:	b918      	cbnz	r0, 801865e <__gethex+0x3ba>
 8018656:	4b1a      	ldr	r3, [pc, #104]	@ (80186c0 <__gethex+0x41c>)
 8018658:	4602      	mov	r2, r0
 801865a:	2184      	movs	r1, #132	@ 0x84
 801865c:	e6c5      	b.n	80183ea <__gethex+0x146>
 801865e:	6922      	ldr	r2, [r4, #16]
 8018660:	3202      	adds	r2, #2
 8018662:	f104 010c 	add.w	r1, r4, #12
 8018666:	0092      	lsls	r2, r2, #2
 8018668:	300c      	adds	r0, #12
 801866a:	f7ff fd69 	bl	8018140 <memcpy>
 801866e:	4621      	mov	r1, r4
 8018670:	9801      	ldr	r0, [sp, #4]
 8018672:	f7fd fe69 	bl	8016348 <_Bfree>
 8018676:	464c      	mov	r4, r9
 8018678:	6923      	ldr	r3, [r4, #16]
 801867a:	1c5a      	adds	r2, r3, #1
 801867c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018680:	6122      	str	r2, [r4, #16]
 8018682:	2201      	movs	r2, #1
 8018684:	615a      	str	r2, [r3, #20]
 8018686:	e7be      	b.n	8018606 <__gethex+0x362>
 8018688:	6922      	ldr	r2, [r4, #16]
 801868a:	455a      	cmp	r2, fp
 801868c:	dd0b      	ble.n	80186a6 <__gethex+0x402>
 801868e:	2101      	movs	r1, #1
 8018690:	4620      	mov	r0, r4
 8018692:	f7ff fd9f 	bl	80181d4 <rshift>
 8018696:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801869a:	3701      	adds	r7, #1
 801869c:	42bb      	cmp	r3, r7
 801869e:	f6ff aee0 	blt.w	8018462 <__gethex+0x1be>
 80186a2:	2501      	movs	r5, #1
 80186a4:	e7c2      	b.n	801862c <__gethex+0x388>
 80186a6:	f016 061f 	ands.w	r6, r6, #31
 80186aa:	d0fa      	beq.n	80186a2 <__gethex+0x3fe>
 80186ac:	4453      	add	r3, sl
 80186ae:	f1c6 0620 	rsb	r6, r6, #32
 80186b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80186b6:	f7fd fef9 	bl	80164ac <__hi0bits>
 80186ba:	42b0      	cmp	r0, r6
 80186bc:	dbe7      	blt.n	801868e <__gethex+0x3ea>
 80186be:	e7f0      	b.n	80186a2 <__gethex+0x3fe>
 80186c0:	080278ad 	.word	0x080278ad

080186c4 <L_shift>:
 80186c4:	f1c2 0208 	rsb	r2, r2, #8
 80186c8:	0092      	lsls	r2, r2, #2
 80186ca:	b570      	push	{r4, r5, r6, lr}
 80186cc:	f1c2 0620 	rsb	r6, r2, #32
 80186d0:	6843      	ldr	r3, [r0, #4]
 80186d2:	6804      	ldr	r4, [r0, #0]
 80186d4:	fa03 f506 	lsl.w	r5, r3, r6
 80186d8:	432c      	orrs	r4, r5
 80186da:	40d3      	lsrs	r3, r2
 80186dc:	6004      	str	r4, [r0, #0]
 80186de:	f840 3f04 	str.w	r3, [r0, #4]!
 80186e2:	4288      	cmp	r0, r1
 80186e4:	d3f4      	bcc.n	80186d0 <L_shift+0xc>
 80186e6:	bd70      	pop	{r4, r5, r6, pc}

080186e8 <__match>:
 80186e8:	b530      	push	{r4, r5, lr}
 80186ea:	6803      	ldr	r3, [r0, #0]
 80186ec:	3301      	adds	r3, #1
 80186ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80186f2:	b914      	cbnz	r4, 80186fa <__match+0x12>
 80186f4:	6003      	str	r3, [r0, #0]
 80186f6:	2001      	movs	r0, #1
 80186f8:	bd30      	pop	{r4, r5, pc}
 80186fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80186fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8018702:	2d19      	cmp	r5, #25
 8018704:	bf98      	it	ls
 8018706:	3220      	addls	r2, #32
 8018708:	42a2      	cmp	r2, r4
 801870a:	d0f0      	beq.n	80186ee <__match+0x6>
 801870c:	2000      	movs	r0, #0
 801870e:	e7f3      	b.n	80186f8 <__match+0x10>

08018710 <__hexnan>:
 8018710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018714:	680b      	ldr	r3, [r1, #0]
 8018716:	6801      	ldr	r1, [r0, #0]
 8018718:	115e      	asrs	r6, r3, #5
 801871a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801871e:	f013 031f 	ands.w	r3, r3, #31
 8018722:	b087      	sub	sp, #28
 8018724:	bf18      	it	ne
 8018726:	3604      	addne	r6, #4
 8018728:	2500      	movs	r5, #0
 801872a:	1f37      	subs	r7, r6, #4
 801872c:	4682      	mov	sl, r0
 801872e:	4690      	mov	r8, r2
 8018730:	9301      	str	r3, [sp, #4]
 8018732:	f846 5c04 	str.w	r5, [r6, #-4]
 8018736:	46b9      	mov	r9, r7
 8018738:	463c      	mov	r4, r7
 801873a:	9502      	str	r5, [sp, #8]
 801873c:	46ab      	mov	fp, r5
 801873e:	784a      	ldrb	r2, [r1, #1]
 8018740:	1c4b      	adds	r3, r1, #1
 8018742:	9303      	str	r3, [sp, #12]
 8018744:	b342      	cbz	r2, 8018798 <__hexnan+0x88>
 8018746:	4610      	mov	r0, r2
 8018748:	9105      	str	r1, [sp, #20]
 801874a:	9204      	str	r2, [sp, #16]
 801874c:	f7ff fd94 	bl	8018278 <__hexdig_fun>
 8018750:	2800      	cmp	r0, #0
 8018752:	d151      	bne.n	80187f8 <__hexnan+0xe8>
 8018754:	9a04      	ldr	r2, [sp, #16]
 8018756:	9905      	ldr	r1, [sp, #20]
 8018758:	2a20      	cmp	r2, #32
 801875a:	d818      	bhi.n	801878e <__hexnan+0x7e>
 801875c:	9b02      	ldr	r3, [sp, #8]
 801875e:	459b      	cmp	fp, r3
 8018760:	dd13      	ble.n	801878a <__hexnan+0x7a>
 8018762:	454c      	cmp	r4, r9
 8018764:	d206      	bcs.n	8018774 <__hexnan+0x64>
 8018766:	2d07      	cmp	r5, #7
 8018768:	dc04      	bgt.n	8018774 <__hexnan+0x64>
 801876a:	462a      	mov	r2, r5
 801876c:	4649      	mov	r1, r9
 801876e:	4620      	mov	r0, r4
 8018770:	f7ff ffa8 	bl	80186c4 <L_shift>
 8018774:	4544      	cmp	r4, r8
 8018776:	d952      	bls.n	801881e <__hexnan+0x10e>
 8018778:	2300      	movs	r3, #0
 801877a:	f1a4 0904 	sub.w	r9, r4, #4
 801877e:	f844 3c04 	str.w	r3, [r4, #-4]
 8018782:	f8cd b008 	str.w	fp, [sp, #8]
 8018786:	464c      	mov	r4, r9
 8018788:	461d      	mov	r5, r3
 801878a:	9903      	ldr	r1, [sp, #12]
 801878c:	e7d7      	b.n	801873e <__hexnan+0x2e>
 801878e:	2a29      	cmp	r2, #41	@ 0x29
 8018790:	d157      	bne.n	8018842 <__hexnan+0x132>
 8018792:	3102      	adds	r1, #2
 8018794:	f8ca 1000 	str.w	r1, [sl]
 8018798:	f1bb 0f00 	cmp.w	fp, #0
 801879c:	d051      	beq.n	8018842 <__hexnan+0x132>
 801879e:	454c      	cmp	r4, r9
 80187a0:	d206      	bcs.n	80187b0 <__hexnan+0xa0>
 80187a2:	2d07      	cmp	r5, #7
 80187a4:	dc04      	bgt.n	80187b0 <__hexnan+0xa0>
 80187a6:	462a      	mov	r2, r5
 80187a8:	4649      	mov	r1, r9
 80187aa:	4620      	mov	r0, r4
 80187ac:	f7ff ff8a 	bl	80186c4 <L_shift>
 80187b0:	4544      	cmp	r4, r8
 80187b2:	d936      	bls.n	8018822 <__hexnan+0x112>
 80187b4:	f1a8 0204 	sub.w	r2, r8, #4
 80187b8:	4623      	mov	r3, r4
 80187ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80187be:	f842 1f04 	str.w	r1, [r2, #4]!
 80187c2:	429f      	cmp	r7, r3
 80187c4:	d2f9      	bcs.n	80187ba <__hexnan+0xaa>
 80187c6:	1b3b      	subs	r3, r7, r4
 80187c8:	f023 0303 	bic.w	r3, r3, #3
 80187cc:	3304      	adds	r3, #4
 80187ce:	3401      	adds	r4, #1
 80187d0:	3e03      	subs	r6, #3
 80187d2:	42b4      	cmp	r4, r6
 80187d4:	bf88      	it	hi
 80187d6:	2304      	movhi	r3, #4
 80187d8:	4443      	add	r3, r8
 80187da:	2200      	movs	r2, #0
 80187dc:	f843 2b04 	str.w	r2, [r3], #4
 80187e0:	429f      	cmp	r7, r3
 80187e2:	d2fb      	bcs.n	80187dc <__hexnan+0xcc>
 80187e4:	683b      	ldr	r3, [r7, #0]
 80187e6:	b91b      	cbnz	r3, 80187f0 <__hexnan+0xe0>
 80187e8:	4547      	cmp	r7, r8
 80187ea:	d128      	bne.n	801883e <__hexnan+0x12e>
 80187ec:	2301      	movs	r3, #1
 80187ee:	603b      	str	r3, [r7, #0]
 80187f0:	2005      	movs	r0, #5
 80187f2:	b007      	add	sp, #28
 80187f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187f8:	3501      	adds	r5, #1
 80187fa:	2d08      	cmp	r5, #8
 80187fc:	f10b 0b01 	add.w	fp, fp, #1
 8018800:	dd06      	ble.n	8018810 <__hexnan+0x100>
 8018802:	4544      	cmp	r4, r8
 8018804:	d9c1      	bls.n	801878a <__hexnan+0x7a>
 8018806:	2300      	movs	r3, #0
 8018808:	f844 3c04 	str.w	r3, [r4, #-4]
 801880c:	2501      	movs	r5, #1
 801880e:	3c04      	subs	r4, #4
 8018810:	6822      	ldr	r2, [r4, #0]
 8018812:	f000 000f 	and.w	r0, r0, #15
 8018816:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801881a:	6020      	str	r0, [r4, #0]
 801881c:	e7b5      	b.n	801878a <__hexnan+0x7a>
 801881e:	2508      	movs	r5, #8
 8018820:	e7b3      	b.n	801878a <__hexnan+0x7a>
 8018822:	9b01      	ldr	r3, [sp, #4]
 8018824:	2b00      	cmp	r3, #0
 8018826:	d0dd      	beq.n	80187e4 <__hexnan+0xd4>
 8018828:	f1c3 0320 	rsb	r3, r3, #32
 801882c:	f04f 32ff 	mov.w	r2, #4294967295
 8018830:	40da      	lsrs	r2, r3
 8018832:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8018836:	4013      	ands	r3, r2
 8018838:	f846 3c04 	str.w	r3, [r6, #-4]
 801883c:	e7d2      	b.n	80187e4 <__hexnan+0xd4>
 801883e:	3f04      	subs	r7, #4
 8018840:	e7d0      	b.n	80187e4 <__hexnan+0xd4>
 8018842:	2004      	movs	r0, #4
 8018844:	e7d5      	b.n	80187f2 <__hexnan+0xe2>

08018846 <__ascii_mbtowc>:
 8018846:	b082      	sub	sp, #8
 8018848:	b901      	cbnz	r1, 801884c <__ascii_mbtowc+0x6>
 801884a:	a901      	add	r1, sp, #4
 801884c:	b142      	cbz	r2, 8018860 <__ascii_mbtowc+0x1a>
 801884e:	b14b      	cbz	r3, 8018864 <__ascii_mbtowc+0x1e>
 8018850:	7813      	ldrb	r3, [r2, #0]
 8018852:	600b      	str	r3, [r1, #0]
 8018854:	7812      	ldrb	r2, [r2, #0]
 8018856:	1e10      	subs	r0, r2, #0
 8018858:	bf18      	it	ne
 801885a:	2001      	movne	r0, #1
 801885c:	b002      	add	sp, #8
 801885e:	4770      	bx	lr
 8018860:	4610      	mov	r0, r2
 8018862:	e7fb      	b.n	801885c <__ascii_mbtowc+0x16>
 8018864:	f06f 0001 	mvn.w	r0, #1
 8018868:	e7f8      	b.n	801885c <__ascii_mbtowc+0x16>

0801886a <_realloc_r>:
 801886a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801886e:	4680      	mov	r8, r0
 8018870:	4615      	mov	r5, r2
 8018872:	460c      	mov	r4, r1
 8018874:	b921      	cbnz	r1, 8018880 <_realloc_r+0x16>
 8018876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801887a:	4611      	mov	r1, r2
 801887c:	f7fd bc98 	b.w	80161b0 <_malloc_r>
 8018880:	b92a      	cbnz	r2, 801888e <_realloc_r+0x24>
 8018882:	f7fd fc21 	bl	80160c8 <_free_r>
 8018886:	2400      	movs	r4, #0
 8018888:	4620      	mov	r0, r4
 801888a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801888e:	f000 f840 	bl	8018912 <_malloc_usable_size_r>
 8018892:	4285      	cmp	r5, r0
 8018894:	4606      	mov	r6, r0
 8018896:	d802      	bhi.n	801889e <_realloc_r+0x34>
 8018898:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801889c:	d8f4      	bhi.n	8018888 <_realloc_r+0x1e>
 801889e:	4629      	mov	r1, r5
 80188a0:	4640      	mov	r0, r8
 80188a2:	f7fd fc85 	bl	80161b0 <_malloc_r>
 80188a6:	4607      	mov	r7, r0
 80188a8:	2800      	cmp	r0, #0
 80188aa:	d0ec      	beq.n	8018886 <_realloc_r+0x1c>
 80188ac:	42b5      	cmp	r5, r6
 80188ae:	462a      	mov	r2, r5
 80188b0:	4621      	mov	r1, r4
 80188b2:	bf28      	it	cs
 80188b4:	4632      	movcs	r2, r6
 80188b6:	f7ff fc43 	bl	8018140 <memcpy>
 80188ba:	4621      	mov	r1, r4
 80188bc:	4640      	mov	r0, r8
 80188be:	f7fd fc03 	bl	80160c8 <_free_r>
 80188c2:	463c      	mov	r4, r7
 80188c4:	e7e0      	b.n	8018888 <_realloc_r+0x1e>

080188c6 <__ascii_wctomb>:
 80188c6:	4603      	mov	r3, r0
 80188c8:	4608      	mov	r0, r1
 80188ca:	b141      	cbz	r1, 80188de <__ascii_wctomb+0x18>
 80188cc:	2aff      	cmp	r2, #255	@ 0xff
 80188ce:	d904      	bls.n	80188da <__ascii_wctomb+0x14>
 80188d0:	228a      	movs	r2, #138	@ 0x8a
 80188d2:	601a      	str	r2, [r3, #0]
 80188d4:	f04f 30ff 	mov.w	r0, #4294967295
 80188d8:	4770      	bx	lr
 80188da:	700a      	strb	r2, [r1, #0]
 80188dc:	2001      	movs	r0, #1
 80188de:	4770      	bx	lr

080188e0 <fiprintf>:
 80188e0:	b40e      	push	{r1, r2, r3}
 80188e2:	b503      	push	{r0, r1, lr}
 80188e4:	4601      	mov	r1, r0
 80188e6:	ab03      	add	r3, sp, #12
 80188e8:	4805      	ldr	r0, [pc, #20]	@ (8018900 <fiprintf+0x20>)
 80188ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80188ee:	6800      	ldr	r0, [r0, #0]
 80188f0:	9301      	str	r3, [sp, #4]
 80188f2:	f7ff f9a1 	bl	8017c38 <_vfiprintf_r>
 80188f6:	b002      	add	sp, #8
 80188f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80188fc:	b003      	add	sp, #12
 80188fe:	4770      	bx	lr
 8018900:	20000408 	.word	0x20000408

08018904 <abort>:
 8018904:	b508      	push	{r3, lr}
 8018906:	2006      	movs	r0, #6
 8018908:	f000 f834 	bl	8018974 <raise>
 801890c:	2001      	movs	r0, #1
 801890e:	f7eb ffb5 	bl	800487c <_exit>

08018912 <_malloc_usable_size_r>:
 8018912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018916:	1f18      	subs	r0, r3, #4
 8018918:	2b00      	cmp	r3, #0
 801891a:	bfbc      	itt	lt
 801891c:	580b      	ldrlt	r3, [r1, r0]
 801891e:	18c0      	addlt	r0, r0, r3
 8018920:	4770      	bx	lr

08018922 <_raise_r>:
 8018922:	291f      	cmp	r1, #31
 8018924:	b538      	push	{r3, r4, r5, lr}
 8018926:	4605      	mov	r5, r0
 8018928:	460c      	mov	r4, r1
 801892a:	d904      	bls.n	8018936 <_raise_r+0x14>
 801892c:	2316      	movs	r3, #22
 801892e:	6003      	str	r3, [r0, #0]
 8018930:	f04f 30ff 	mov.w	r0, #4294967295
 8018934:	bd38      	pop	{r3, r4, r5, pc}
 8018936:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018938:	b112      	cbz	r2, 8018940 <_raise_r+0x1e>
 801893a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801893e:	b94b      	cbnz	r3, 8018954 <_raise_r+0x32>
 8018940:	4628      	mov	r0, r5
 8018942:	f000 f831 	bl	80189a8 <_getpid_r>
 8018946:	4622      	mov	r2, r4
 8018948:	4601      	mov	r1, r0
 801894a:	4628      	mov	r0, r5
 801894c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018950:	f000 b818 	b.w	8018984 <_kill_r>
 8018954:	2b01      	cmp	r3, #1
 8018956:	d00a      	beq.n	801896e <_raise_r+0x4c>
 8018958:	1c59      	adds	r1, r3, #1
 801895a:	d103      	bne.n	8018964 <_raise_r+0x42>
 801895c:	2316      	movs	r3, #22
 801895e:	6003      	str	r3, [r0, #0]
 8018960:	2001      	movs	r0, #1
 8018962:	e7e7      	b.n	8018934 <_raise_r+0x12>
 8018964:	2100      	movs	r1, #0
 8018966:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801896a:	4620      	mov	r0, r4
 801896c:	4798      	blx	r3
 801896e:	2000      	movs	r0, #0
 8018970:	e7e0      	b.n	8018934 <_raise_r+0x12>
	...

08018974 <raise>:
 8018974:	4b02      	ldr	r3, [pc, #8]	@ (8018980 <raise+0xc>)
 8018976:	4601      	mov	r1, r0
 8018978:	6818      	ldr	r0, [r3, #0]
 801897a:	f7ff bfd2 	b.w	8018922 <_raise_r>
 801897e:	bf00      	nop
 8018980:	20000408 	.word	0x20000408

08018984 <_kill_r>:
 8018984:	b538      	push	{r3, r4, r5, lr}
 8018986:	4d07      	ldr	r5, [pc, #28]	@ (80189a4 <_kill_r+0x20>)
 8018988:	2300      	movs	r3, #0
 801898a:	4604      	mov	r4, r0
 801898c:	4608      	mov	r0, r1
 801898e:	4611      	mov	r1, r2
 8018990:	602b      	str	r3, [r5, #0]
 8018992:	f7eb ff63 	bl	800485c <_kill>
 8018996:	1c43      	adds	r3, r0, #1
 8018998:	d102      	bne.n	80189a0 <_kill_r+0x1c>
 801899a:	682b      	ldr	r3, [r5, #0]
 801899c:	b103      	cbz	r3, 80189a0 <_kill_r+0x1c>
 801899e:	6023      	str	r3, [r4, #0]
 80189a0:	bd38      	pop	{r3, r4, r5, pc}
 80189a2:	bf00      	nop
 80189a4:	20013238 	.word	0x20013238

080189a8 <_getpid_r>:
 80189a8:	f7eb bf50 	b.w	800484c <_getpid>

080189ac <_init>:
 80189ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189ae:	bf00      	nop
 80189b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189b2:	bc08      	pop	{r3}
 80189b4:	469e      	mov	lr, r3
 80189b6:	4770      	bx	lr

080189b8 <_fini>:
 80189b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189ba:	bf00      	nop
 80189bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189be:	bc08      	pop	{r3}
 80189c0:	469e      	mov	lr, r3
 80189c2:	4770      	bx	lr
