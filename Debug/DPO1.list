
DPO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ec4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800909c  0800909c  0000a09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090f4  080090f4  0000b190  2**0
                  CONTENTS
  4 .ARM          00000000  080090f4  080090f4  0000b190  2**0
                  CONTENTS
  5 .preinit_array 00000000  080090f4  080090f4  0000b190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090f4  080090f4  0000a0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090f8  080090f8  0000a0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  080090fc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001480  20000190  0800928c  0000b190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001610  0800928c  0000b610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017475  00000000  00000000  0000b1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bcc  00000000  00000000  00022635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  00026208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000108f  00000000  00000000  000277d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029aa0  00000000  00000000  00028867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a59a  00000000  00000000  00052307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001046dd  00000000  00000000  0006c8a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00170f7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ab4  00000000  00000000  00170fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00176a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000190 	.word	0x20000190
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009084 	.word	0x08009084

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000194 	.word	0x20000194
 8000214:	08009084 	.word	0x08009084

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fe99 	bl	8000f52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f840 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 fb56 	bl	80008d4 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8000228:	f008 f9f6 	bl	8008618 <MX_USB_Device_Init>
  MX_COMP2_Init();
 800022c:	f000 f886 	bl	800033c <MX_COMP2_Init>
  MX_COMP5_Init();
 8000230:	f000 f8aa 	bl	8000388 <MX_COMP5_Init>
  MX_DAC1_Init();
 8000234:	f000 f8ce 	bl	80003d4 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000238:	f000 f914 	bl	8000464 <MX_DAC2_Init>
  MX_OPAMP1_Init();
 800023c:	f000 f94c 	bl	80004d8 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8000240:	f000 f976 	bl	8000530 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8000244:	f000 f99a 	bl	800057c <MX_OPAMP3_Init>
  MX_OPAMP6_Init();
 8000248:	f000 f9be 	bl	80005c8 <MX_OPAMP6_Init>
  MX_TIM1_Init();
 800024c:	f000 f9e2 	bl	8000614 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000250:	f000 fa90 	bl	8000774 <MX_TIM4_Init>
  MX_TIM20_Init();
 8000254:	f000 fae4 	bl	8000820 <MX_TIM20_Init>
  MX_TIM3_Init();
 8000258:	f000 fa36 	bl	80006c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800025c:	213c      	movs	r1, #60	@ 0x3c
 800025e:	480c      	ldr	r0, [pc, #48]	@ (8000290 <main+0x78>)
 8000260:	f004 fd02 	bl	8004c68 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000264:	213c      	movs	r1, #60	@ 0x3c
 8000266:	480b      	ldr	r0, [pc, #44]	@ (8000294 <main+0x7c>)
 8000268:	f004 fcfe 	bl	8004c68 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800026c:	213c      	movs	r1, #60	@ 0x3c
 800026e:	480a      	ldr	r0, [pc, #40]	@ (8000298 <main+0x80>)
 8000270:	f004 fcfa 	bl	8004c68 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim20, TIM_CHANNEL_ALL);
 8000274:	213c      	movs	r1, #60	@ 0x3c
 8000276:	4809      	ldr	r0, [pc, #36]	@ (800029c <main+0x84>)
 8000278:	f004 fcf6 	bl	8004c68 <HAL_TIM_Encoder_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 800027c:	2064      	movs	r0, #100	@ 0x64
 800027e:	f000 fed9 	bl	8001034 <HAL_Delay>
	  CDC_Transmit_FS(BUFFER_CDC, 10);
 8000282:	210a      	movs	r1, #10
 8000284:	4806      	ldr	r0, [pc, #24]	@ (80002a0 <main+0x88>)
 8000286:	f008 fa85 	bl	8008794 <CDC_Transmit_FS>
	  HAL_Delay(100);
 800028a:	bf00      	nop
 800028c:	e7f6      	b.n	800027c <main+0x64>
 800028e:	bf00      	nop
 8000290:	2000030c 	.word	0x2000030c
 8000294:	20000358 	.word	0x20000358
 8000298:	200003a4 	.word	0x200003a4
 800029c:	200003f0 	.word	0x200003f0
 80002a0:	20000000 	.word	0x20000000

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b094      	sub	sp, #80	@ 0x50
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0318 	add.w	r3, r7, #24
 80002ae:	2238      	movs	r2, #56	@ 0x38
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f008 feba 	bl	800902c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002ca:	f003 fc23 	bl	8003b14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80002ce:	2321      	movs	r3, #33	@ 0x21
 80002d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002d8:	2301      	movs	r3, #1
 80002da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002dc:	2302      	movs	r3, #2
 80002de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e0:	2303      	movs	r3, #3
 80002e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80002e4:	2302      	movs	r3, #2
 80002e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80002e8:	234b      	movs	r3, #75	@ 0x4b
 80002ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ec:	2302      	movs	r3, #2
 80002ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002f0:	2302      	movs	r3, #2
 80002f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002f4:	2302      	movs	r3, #2
 80002f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	f107 0318 	add.w	r3, r7, #24
 80002fc:	4618      	mov	r0, r3
 80002fe:	f003 fcbd 	bl	8003c7c <HAL_RCC_OscConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000308:	f000 fb34 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030c:	230f      	movs	r3, #15
 800030e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000310:	2303      	movs	r3, #3
 8000312:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	2104      	movs	r1, #4
 8000324:	4618      	mov	r0, r3
 8000326:	f003 ffbb 	bl	80042a0 <HAL_RCC_ClockConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000330:	f000 fb20 	bl	8000974 <Error_Handler>
  }
}
 8000334:	bf00      	nop
 8000336:	3750      	adds	r7, #80	@ 0x50
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000340:	4b0f      	ldr	r3, [pc, #60]	@ (8000380 <MX_COMP2_Init+0x44>)
 8000342:	4a10      	ldr	r2, [pc, #64]	@ (8000384 <MX_COMP2_Init+0x48>)
 8000344:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000346:	4b0e      	ldr	r3, [pc, #56]	@ (8000380 <MX_COMP2_Init+0x44>)
 8000348:	2200      	movs	r2, #0
 800034a:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 800034c:	4b0c      	ldr	r3, [pc, #48]	@ (8000380 <MX_COMP2_Init+0x44>)
 800034e:	2250      	movs	r2, #80	@ 0x50
 8000350:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000352:	4b0b      	ldr	r3, [pc, #44]	@ (8000380 <MX_COMP2_Init+0x44>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000358:	4b09      	ldr	r3, [pc, #36]	@ (8000380 <MX_COMP2_Init+0x44>)
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800035e:	4b08      	ldr	r3, [pc, #32]	@ (8000380 <MX_COMP2_Init+0x44>)
 8000360:	2200      	movs	r2, #0
 8000362:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000364:	4b06      	ldr	r3, [pc, #24]	@ (8000380 <MX_COMP2_Init+0x44>)
 8000366:	2200      	movs	r2, #0
 8000368:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800036a:	4805      	ldr	r0, [pc, #20]	@ (8000380 <MX_COMP2_Init+0x44>)
 800036c:	f000 fff8 	bl	8001360 <HAL_COMP_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 8000376:	f000 fafd 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	200001ac 	.word	0x200001ac
 8000384:	40010204 	.word	0x40010204

08000388 <MX_COMP5_Init>:
  * @brief COMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP5_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 800038c:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <MX_COMP5_Init+0x44>)
 800038e:	4a10      	ldr	r2, [pc, #64]	@ (80003d0 <MX_COMP5_Init+0x48>)
 8000390:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000392:	4b0e      	ldr	r3, [pc, #56]	@ (80003cc <MX_COMP5_Init+0x44>)
 8000394:	2200      	movs	r2, #0
 8000396:	605a      	str	r2, [r3, #4]
  hcomp5.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8000398:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <MX_COMP5_Init+0x44>)
 800039a:	2250      	movs	r2, #80	@ 0x50
 800039c:	609a      	str	r2, [r3, #8]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800039e:	4b0b      	ldr	r3, [pc, #44]	@ (80003cc <MX_COMP5_Init+0x44>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80003a4:	4b09      	ldr	r3, [pc, #36]	@ (80003cc <MX_COMP5_Init+0x44>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	60da      	str	r2, [r3, #12]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80003aa:	4b08      	ldr	r3, [pc, #32]	@ (80003cc <MX_COMP5_Init+0x44>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	615a      	str	r2, [r3, #20]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80003b0:	4b06      	ldr	r3, [pc, #24]	@ (80003cc <MX_COMP5_Init+0x44>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 80003b6:	4805      	ldr	r0, [pc, #20]	@ (80003cc <MX_COMP5_Init+0x44>)
 80003b8:	f000 ffd2 	bl	8001360 <HAL_COMP_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_COMP5_Init+0x3e>
  {
    Error_Handler();
 80003c2:	f000 fad7 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	200001d0 	.word	0x200001d0
 80003d0:	40010210 	.word	0x40010210

080003d4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08c      	sub	sp, #48	@ 0x30
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003da:	463b      	mov	r3, r7
 80003dc:	2230      	movs	r2, #48	@ 0x30
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f008 fe23 	bl	800902c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80003e6:	4b1d      	ldr	r3, [pc, #116]	@ (800045c <MX_DAC1_Init+0x88>)
 80003e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000460 <MX_DAC1_Init+0x8c>)
 80003ea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003ec:	481b      	ldr	r0, [pc, #108]	@ (800045c <MX_DAC1_Init+0x88>)
 80003ee:	f001 fa60 	bl	80018b2 <HAL_DAC_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80003f8:	f000 fabc 	bl	8000974 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80003fc:	2302      	movs	r3, #2
 80003fe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000400:	2300      	movs	r3, #0
 8000402:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000404:	2300      	movs	r3, #0
 8000406:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000408:	2300      	movs	r3, #0
 800040a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800040c:	2300      	movs	r3, #0
 800040e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000410:	2300      	movs	r3, #0
 8000412:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8000418:	2304      	movs	r3, #4
 800041a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800041c:	2300      	movs	r3, #0
 800041e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000420:	463b      	mov	r3, r7
 8000422:	2200      	movs	r2, #0
 8000424:	4619      	mov	r1, r3
 8000426:	480d      	ldr	r0, [pc, #52]	@ (800045c <MX_DAC1_Init+0x88>)
 8000428:	f001 fa66 	bl	80018f8 <HAL_DAC_ConfigChannel>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000432:	f000 fa9f 	bl	8000974 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000436:	2302      	movs	r3, #2
 8000438:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800043a:	2302      	movs	r3, #2
 800043c:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800043e:	463b      	mov	r3, r7
 8000440:	2210      	movs	r2, #16
 8000442:	4619      	mov	r1, r3
 8000444:	4805      	ldr	r0, [pc, #20]	@ (800045c <MX_DAC1_Init+0x88>)
 8000446:	f001 fa57 	bl	80018f8 <HAL_DAC_ConfigChannel>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_DAC1_Init+0x80>
  {
    Error_Handler();
 8000450:	f000 fa90 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000454:	bf00      	nop
 8000456:	3730      	adds	r7, #48	@ 0x30
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	200001f4 	.word	0x200001f4
 8000460:	50000800 	.word	0x50000800

08000464 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b08c      	sub	sp, #48	@ 0x30
 8000468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800046a:	463b      	mov	r3, r7
 800046c:	2230      	movs	r2, #48	@ 0x30
 800046e:	2100      	movs	r1, #0
 8000470:	4618      	mov	r0, r3
 8000472:	f008 fddb 	bl	800902c <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000476:	4b16      	ldr	r3, [pc, #88]	@ (80004d0 <MX_DAC2_Init+0x6c>)
 8000478:	4a16      	ldr	r2, [pc, #88]	@ (80004d4 <MX_DAC2_Init+0x70>)
 800047a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800047c:	4814      	ldr	r0, [pc, #80]	@ (80004d0 <MX_DAC2_Init+0x6c>)
 800047e:	f001 fa18 	bl	80018b2 <HAL_DAC_Init>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000488:	f000 fa74 	bl	8000974 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800048c:	2302      	movs	r3, #2
 800048e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000490:	2300      	movs	r3, #0
 8000492:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000494:	2300      	movs	r3, #0
 8000496:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000498:	2300      	movs	r3, #0
 800049a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800049c:	2300      	movs	r3, #0
 800049e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 80004a8:	2304      	movs	r3, #4
 80004aa:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004b0:	463b      	mov	r3, r7
 80004b2:	2200      	movs	r2, #0
 80004b4:	4619      	mov	r1, r3
 80004b6:	4806      	ldr	r0, [pc, #24]	@ (80004d0 <MX_DAC2_Init+0x6c>)
 80004b8:	f001 fa1e 	bl	80018f8 <HAL_DAC_ConfigChannel>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80004c2:	f000 fa57 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	3730      	adds	r7, #48	@ 0x30
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000208 	.word	0x20000208
 80004d4:	50000c00 	.word	0x50000c00

080004d8 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80004dc:	4b12      	ldr	r3, [pc, #72]	@ (8000528 <MX_OPAMP1_Init+0x50>)
 80004de:	4a13      	ldr	r2, [pc, #76]	@ (800052c <MX_OPAMP1_Init+0x54>)
 80004e0:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80004e2:	4b11      	ldr	r3, [pc, #68]	@ (8000528 <MX_OPAMP1_Init+0x50>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000528 <MX_OPAMP1_Init+0x50>)
 80004ea:	2240      	movs	r2, #64	@ 0x40
 80004ec:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000528 <MX_OPAMP1_Init+0x50>)
 80004f0:	2208      	movs	r2, #8
 80004f2:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <MX_OPAMP1_Init+0x50>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80004fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000528 <MX_OPAMP1_Init+0x50>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8000500:	4b09      	ldr	r3, [pc, #36]	@ (8000528 <MX_OPAMP1_Init+0x50>)
 8000502:	2200      	movs	r2, #0
 8000504:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8000506:	4b08      	ldr	r3, [pc, #32]	@ (8000528 <MX_OPAMP1_Init+0x50>)
 8000508:	2200      	movs	r2, #0
 800050a:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800050c:	4b06      	ldr	r3, [pc, #24]	@ (8000528 <MX_OPAMP1_Init+0x50>)
 800050e:	2200      	movs	r2, #0
 8000510:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000512:	4805      	ldr	r0, [pc, #20]	@ (8000528 <MX_OPAMP1_Init+0x50>)
 8000514:	f001 fd2c 	bl	8001f70 <HAL_OPAMP_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_OPAMP1_Init+0x4a>
  {
    Error_Handler();
 800051e:	f000 fa29 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	2000021c 	.word	0x2000021c
 800052c:	40010300 	.word	0x40010300

08000530 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8000534:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <MX_OPAMP2_Init+0x44>)
 8000536:	4a10      	ldr	r2, [pc, #64]	@ (8000578 <MX_OPAMP2_Init+0x48>)
 8000538:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800053a:	4b0e      	ldr	r3, [pc, #56]	@ (8000574 <MX_OPAMP2_Init+0x44>)
 800053c:	2200      	movs	r2, #0
 800053e:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000540:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <MX_OPAMP2_Init+0x44>)
 8000542:	2260      	movs	r2, #96	@ 0x60
 8000544:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000546:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <MX_OPAMP2_Init+0x44>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 800054c:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <MX_OPAMP2_Init+0x44>)
 800054e:	2201      	movs	r2, #1
 8000550:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000552:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <MX_OPAMP2_Init+0x44>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000558:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <MX_OPAMP2_Init+0x44>)
 800055a:	2200      	movs	r2, #0
 800055c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 800055e:	4805      	ldr	r0, [pc, #20]	@ (8000574 <MX_OPAMP2_Init+0x44>)
 8000560:	f001 fd06 	bl	8001f70 <HAL_OPAMP_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_OPAMP2_Init+0x3e>
  {
    Error_Handler();
 800056a:	f000 fa03 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000258 	.word	0x20000258
 8000578:	40010304 	.word	0x40010304

0800057c <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000580:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <MX_OPAMP3_Init+0x44>)
 8000582:	4a10      	ldr	r2, [pc, #64]	@ (80005c4 <MX_OPAMP3_Init+0x48>)
 8000584:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000586:	4b0e      	ldr	r3, [pc, #56]	@ (80005c0 <MX_OPAMP3_Init+0x44>)
 8000588:	2200      	movs	r2, #0
 800058a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 800058c:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <MX_OPAMP3_Init+0x44>)
 800058e:	2260      	movs	r2, #96	@ 0x60
 8000590:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO1;
 8000592:	4b0b      	ldr	r3, [pc, #44]	@ (80005c0 <MX_OPAMP3_Init+0x44>)
 8000594:	2204      	movs	r2, #4
 8000596:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8000598:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <MX_OPAMP3_Init+0x44>)
 800059a:	2201      	movs	r2, #1
 800059c:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800059e:	4b08      	ldr	r3, [pc, #32]	@ (80005c0 <MX_OPAMP3_Init+0x44>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <MX_OPAMP3_Init+0x44>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80005aa:	4805      	ldr	r0, [pc, #20]	@ (80005c0 <MX_OPAMP3_Init+0x44>)
 80005ac:	f001 fce0 	bl	8001f70 <HAL_OPAMP_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 80005b6:	f000 f9dd 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000294 	.word	0x20000294
 80005c4:	40010308 	.word	0x40010308

080005c8 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <MX_OPAMP6_Init+0x44>)
 80005ce:	4a10      	ldr	r2, [pc, #64]	@ (8000610 <MX_OPAMP6_Init+0x48>)
 80005d0:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <MX_OPAMP6_Init+0x44>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <MX_OPAMP6_Init+0x44>)
 80005da:	2260      	movs	r2, #96	@ 0x60
 80005dc:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80005de:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <MX_OPAMP6_Init+0x44>)
 80005e0:	2208      	movs	r2, #8
 80005e2:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 80005e4:	4b09      	ldr	r3, [pc, #36]	@ (800060c <MX_OPAMP6_Init+0x44>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <MX_OPAMP6_Init+0x44>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <MX_OPAMP6_Init+0x44>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	@ (800060c <MX_OPAMP6_Init+0x44>)
 80005f8:	f001 fcba 	bl	8001f70 <HAL_OPAMP_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 8000602:	f000 f9b7 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200002d0 	.word	0x200002d0
 8000610:	40010314 	.word	0x40010314

08000614 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08c      	sub	sp, #48	@ 0x30
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2224      	movs	r2, #36	@ 0x24
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f008 fd02 	bl	800902c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000628:	463b      	mov	r3, r7
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000632:	4b23      	ldr	r3, [pc, #140]	@ (80006c0 <MX_TIM1_Init+0xac>)
 8000634:	4a23      	ldr	r2, [pc, #140]	@ (80006c4 <MX_TIM1_Init+0xb0>)
 8000636:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000638:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <MX_TIM1_Init+0xac>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063e:	4b20      	ldr	r3, [pc, #128]	@ (80006c0 <MX_TIM1_Init+0xac>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000644:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <MX_TIM1_Init+0xac>)
 8000646:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800064a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064c:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <MX_TIM1_Init+0xac>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000652:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <MX_TIM1_Init+0xac>)
 8000654:	2200      	movs	r2, #0
 8000656:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000658:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <MX_TIM1_Init+0xac>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800065e:	2301      	movs	r3, #1
 8000660:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000666:	2301      	movs	r3, #1
 8000668:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800066e:	230f      	movs	r3, #15
 8000670:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000672:	2300      	movs	r3, #0
 8000674:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000676:	2301      	movs	r3, #1
 8000678:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800067e:	230f      	movs	r3, #15
 8000680:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	4619      	mov	r1, r3
 8000688:	480d      	ldr	r0, [pc, #52]	@ (80006c0 <MX_TIM1_Init+0xac>)
 800068a:	f004 fa47 	bl	8004b1c <HAL_TIM_Encoder_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000694:	f000 f96e 	bl	8000974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000698:	2300      	movs	r3, #0
 800069a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_TIM1_Init+0xac>)
 80006aa:	f004 fc45 	bl	8004f38 <HAL_TIMEx_MasterConfigSynchronization>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80006b4:	f000 f95e 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	3730      	adds	r7, #48	@ 0x30
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000030c 	.word	0x2000030c
 80006c4:	40012c00 	.word	0x40012c00

080006c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08c      	sub	sp, #48	@ 0x30
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2224      	movs	r2, #36	@ 0x24
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f008 fca8 	bl	800902c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006dc:	463b      	mov	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006e6:	4b21      	ldr	r3, [pc, #132]	@ (800076c <MX_TIM3_Init+0xa4>)
 80006e8:	4a21      	ldr	r2, [pc, #132]	@ (8000770 <MX_TIM3_Init+0xa8>)
 80006ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <MX_TIM3_Init+0xa4>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	@ (800076c <MX_TIM3_Init+0xa4>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006f8:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <MX_TIM3_Init+0xa4>)
 80006fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000700:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <MX_TIM3_Init+0xa4>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000706:	4b19      	ldr	r3, [pc, #100]	@ (800076c <MX_TIM3_Init+0xa4>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800070c:	2301      	movs	r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000714:	2301      	movs	r3, #1
 8000716:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800071c:	230f      	movs	r3, #15
 800071e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000720:	2300      	movs	r3, #0
 8000722:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000724:	2301      	movs	r3, #1
 8000726:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800072c:	230f      	movs	r3, #15
 800072e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	4619      	mov	r1, r3
 8000736:	480d      	ldr	r0, [pc, #52]	@ (800076c <MX_TIM3_Init+0xa4>)
 8000738:	f004 f9f0 	bl	8004b1c <HAL_TIM_Encoder_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000742:	f000 f917 	bl	8000974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	@ (800076c <MX_TIM3_Init+0xa4>)
 8000754:	f004 fbf0 	bl	8004f38 <HAL_TIMEx_MasterConfigSynchronization>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800075e:	f000 f909 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	3730      	adds	r7, #48	@ 0x30
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000358 	.word	0x20000358
 8000770:	40000400 	.word	0x40000400

08000774 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	@ 0x30
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	2224      	movs	r2, #36	@ 0x24
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f008 fc52 	bl	800902c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000788:	463b      	mov	r3, r7
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000792:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <MX_TIM4_Init+0xa4>)
 8000794:	4a21      	ldr	r2, [pc, #132]	@ (800081c <MX_TIM4_Init+0xa8>)
 8000796:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000798:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <MX_TIM4_Init+0xa4>)
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <MX_TIM4_Init+0xa4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80007a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <MX_TIM4_Init+0xa4>)
 80007a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <MX_TIM4_Init+0xa4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_TIM4_Init+0xa4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007c0:	2301      	movs	r3, #1
 80007c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80007c8:	230f      	movs	r3, #15
 80007ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007d0:	2301      	movs	r3, #1
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80007d8:	230f      	movs	r3, #15
 80007da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	4619      	mov	r1, r3
 80007e2:	480d      	ldr	r0, [pc, #52]	@ (8000818 <MX_TIM4_Init+0xa4>)
 80007e4:	f004 f99a 	bl	8004b1c <HAL_TIM_Encoder_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80007ee:	f000 f8c1 	bl	8000974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	4619      	mov	r1, r3
 80007fe:	4806      	ldr	r0, [pc, #24]	@ (8000818 <MX_TIM4_Init+0xa4>)
 8000800:	f004 fb9a 	bl	8004f38 <HAL_TIMEx_MasterConfigSynchronization>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800080a:	f000 f8b3 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	3730      	adds	r7, #48	@ 0x30
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200003a4 	.word	0x200003a4
 800081c:	40000800 	.word	0x40000800

08000820 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	@ 0x30
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	2224      	movs	r2, #36	@ 0x24
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f008 fbfc 	bl	800902c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 800083e:	4b23      	ldr	r3, [pc, #140]	@ (80008cc <MX_TIM20_Init+0xac>)
 8000840:	4a23      	ldr	r2, [pc, #140]	@ (80008d0 <MX_TIM20_Init+0xb0>)
 8000842:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8000844:	4b21      	ldr	r3, [pc, #132]	@ (80008cc <MX_TIM20_Init+0xac>)
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084a:	4b20      	ldr	r3, [pc, #128]	@ (80008cc <MX_TIM20_Init+0xac>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8000850:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <MX_TIM20_Init+0xac>)
 8000852:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000856:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000858:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <MX_TIM20_Init+0xac>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 800085e:	4b1b      	ldr	r3, [pc, #108]	@ (80008cc <MX_TIM20_Init+0xac>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000864:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <MX_TIM20_Init+0xac>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800086a:	2301      	movs	r3, #1
 800086c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000872:	2301      	movs	r3, #1
 8000874:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800087a:	230f      	movs	r3, #15
 800087c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000882:	2301      	movs	r3, #1
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800088a:	230f      	movs	r3, #15
 800088c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	4619      	mov	r1, r3
 8000894:	480d      	ldr	r0, [pc, #52]	@ (80008cc <MX_TIM20_Init+0xac>)
 8000896:	f004 f941 	bl	8004b1c <HAL_TIM_Encoder_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 80008a0:	f000 f868 	bl	8000974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a4:	2300      	movs	r3, #0
 80008a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80008b0:	463b      	mov	r3, r7
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	@ (80008cc <MX_TIM20_Init+0xac>)
 80008b6:	f004 fb3f 	bl	8004f38 <HAL_TIMEx_MasterConfigSynchronization>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 80008c0:	f000 f858 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	3730      	adds	r7, #48	@ 0x30
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200003f0 	.word	0x200003f0
 80008d0:	40015000 	.word	0x40015000

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	@ 0x28
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ea:	4b20      	ldr	r3, [pc, #128]	@ (800096c <MX_GPIO_Init+0x98>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	4a1f      	ldr	r2, [pc, #124]	@ (800096c <MX_GPIO_Init+0x98>)
 80008f0:	f043 0320 	orr.w	r3, r3, #32
 80008f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f6:	4b1d      	ldr	r3, [pc, #116]	@ (800096c <MX_GPIO_Init+0x98>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	f003 0320 	and.w	r3, r3, #32
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	4b1a      	ldr	r3, [pc, #104]	@ (800096c <MX_GPIO_Init+0x98>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	4a19      	ldr	r2, [pc, #100]	@ (800096c <MX_GPIO_Init+0x98>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090e:	4b17      	ldr	r3, [pc, #92]	@ (800096c <MX_GPIO_Init+0x98>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b14      	ldr	r3, [pc, #80]	@ (800096c <MX_GPIO_Init+0x98>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	4a13      	ldr	r2, [pc, #76]	@ (800096c <MX_GPIO_Init+0x98>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000926:	4b11      	ldr	r3, [pc, #68]	@ (800096c <MX_GPIO_Init+0x98>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <MX_GPIO_Init+0x98>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000936:	4a0d      	ldr	r2, [pc, #52]	@ (800096c <MX_GPIO_Init+0x98>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <MX_GPIO_Init+0x98>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800094a:	2310      	movs	r3, #16
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	4804      	ldr	r0, [pc, #16]	@ (8000970 <MX_GPIO_Init+0x9c>)
 8000960:	f001 f984 	bl	8001c6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	@ 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40021000 	.word	0x40021000
 8000970:	48000800 	.word	0x48000800

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <Error_Handler+0x8>

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <HAL_MspInit+0x4c>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800098a:	4a10      	ldr	r2, [pc, #64]	@ (80009cc <HAL_MspInit+0x4c>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6613      	str	r3, [r2, #96]	@ 0x60
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <HAL_MspInit+0x4c>)
 8000994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <HAL_MspInit+0x4c>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a2:	4a0a      	ldr	r2, [pc, #40]	@ (80009cc <HAL_MspInit+0x4c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <HAL_MspInit+0x4c>)
 80009ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80009b6:	f000 fb73 	bl	80010a0 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80009ba:	2002      	movs	r0, #2
 80009bc:	f000 fb5c 	bl	8001078 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009c0:	f003 f94c 	bl	8003c5c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	@ 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a1f      	ldr	r2, [pc, #124]	@ (8000a6c <HAL_COMP_MspInit+0x9c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d119      	bne.n	8000a26 <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <HAL_COMP_MspInit+0xa0>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a70 <HAL_COMP_MspInit+0xa0>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <HAL_COMP_MspInit+0xa0>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a0a:	2380      	movs	r3, #128	@ 0x80
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a20:	f001 f924 	bl	8001c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP5_MspInit 1 */

  /* USER CODE END COMP5_MspInit 1 */
  }

}
 8000a24:	e01d      	b.n	8000a62 <HAL_COMP_MspInit+0x92>
  else if(hcomp->Instance==COMP5)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a12      	ldr	r2, [pc, #72]	@ (8000a74 <HAL_COMP_MspInit+0xa4>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d118      	bne.n	8000a62 <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a30:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <HAL_COMP_MspInit+0xa0>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a34:	4a0e      	ldr	r2, [pc, #56]	@ (8000a70 <HAL_COMP_MspInit+0xa0>)
 8000a36:	f043 0302 	orr.w	r3, r3, #2
 8000a3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <HAL_COMP_MspInit+0xa0>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a40:	f003 0302 	and.w	r3, r3, #2
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <HAL_COMP_MspInit+0xa8>)
 8000a5e:	f001 f905 	bl	8001c6c <HAL_GPIO_Init>
}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	@ 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40010204 	.word	0x40010204
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40010210 	.word	0x40010210
 8000a78:	48000400 	.word	0x48000400

08000a7c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	@ 0x30
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a2b      	ldr	r2, [pc, #172]	@ (8000b48 <HAL_DAC_MspInit+0xcc>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d125      	bne.n	8000aea <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b4c <HAL_DAC_MspInit+0xd0>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8000b4c <HAL_DAC_MspInit+0xd0>)
 8000aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aaa:	4b28      	ldr	r3, [pc, #160]	@ (8000b4c <HAL_DAC_MspInit+0xd0>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b25      	ldr	r3, [pc, #148]	@ (8000b4c <HAL_DAC_MspInit+0xd0>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	4a24      	ldr	r2, [pc, #144]	@ (8000b4c <HAL_DAC_MspInit+0xd0>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac2:	4b22      	ldr	r3, [pc, #136]	@ (8000b4c <HAL_DAC_MspInit+0xd0>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ace:	2310      	movs	r3, #16
 8000ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae4:	f001 f8c2 	bl	8001c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8000ae8:	e029      	b.n	8000b3e <HAL_DAC_MspInit+0xc2>
  else if(hdac->Instance==DAC2)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a18      	ldr	r2, [pc, #96]	@ (8000b50 <HAL_DAC_MspInit+0xd4>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d124      	bne.n	8000b3e <HAL_DAC_MspInit+0xc2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8000af4:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <HAL_DAC_MspInit+0xd0>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af8:	4a14      	ldr	r2, [pc, #80]	@ (8000b4c <HAL_DAC_MspInit+0xd0>)
 8000afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000afe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <HAL_DAC_MspInit+0xd0>)
 8000b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <HAL_DAC_MspInit+0xd0>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b10:	4a0e      	ldr	r2, [pc, #56]	@ (8000b4c <HAL_DAC_MspInit+0xd0>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <HAL_DAC_MspInit+0xd0>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b24:	2340      	movs	r3, #64	@ 0x40
 8000b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b3a:	f001 f897 	bl	8001c6c <HAL_GPIO_Init>
}
 8000b3e:	bf00      	nop
 8000b40:	3730      	adds	r7, #48	@ 0x30
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	50000800 	.word	0x50000800
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	50000c00 	.word	0x50000c00

08000b54 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	@ 0x30
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a3e      	ldr	r2, [pc, #248]	@ (8000c6c <HAL_OPAMP_MspInit+0x118>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d119      	bne.n	8000baa <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b3e      	ldr	r3, [pc, #248]	@ (8000c70 <HAL_OPAMP_MspInit+0x11c>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	4a3d      	ldr	r2, [pc, #244]	@ (8000c70 <HAL_OPAMP_MspInit+0x11c>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b82:	4b3b      	ldr	r3, [pc, #236]	@ (8000c70 <HAL_OPAMP_MspInit+0x11c>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	61bb      	str	r3, [r7, #24]
 8000b8c:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b8e:	2380      	movs	r3, #128	@ 0x80
 8000b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b92:	2303      	movs	r3, #3
 8000b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba4:	f001 f862 	bl	8001c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8000ba8:	e05b      	b.n	8000c62 <HAL_OPAMP_MspInit+0x10e>
  else if(hopamp->Instance==OPAMP2)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a31      	ldr	r2, [pc, #196]	@ (8000c74 <HAL_OPAMP_MspInit+0x120>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d119      	bne.n	8000be8 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8000c70 <HAL_OPAMP_MspInit+0x11c>)
 8000bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8000c70 <HAL_OPAMP_MspInit+0x11c>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c70 <HAL_OPAMP_MspInit+0x11c>)
 8000bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bcc:	2380      	movs	r3, #128	@ 0x80
 8000bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be2:	f001 f843 	bl	8001c6c <HAL_GPIO_Init>
}
 8000be6:	e03c      	b.n	8000c62 <HAL_OPAMP_MspInit+0x10e>
  else if(hopamp->Instance==OPAMP3)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a22      	ldr	r2, [pc, #136]	@ (8000c78 <HAL_OPAMP_MspInit+0x124>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d119      	bne.n	8000c26 <HAL_OPAMP_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c70 <HAL_OPAMP_MspInit+0x11c>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8000c70 <HAL_OPAMP_MspInit+0x11c>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c70 <HAL_OPAMP_MspInit+0x11c>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c10:	2303      	movs	r3, #3
 8000c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4817      	ldr	r0, [pc, #92]	@ (8000c7c <HAL_OPAMP_MspInit+0x128>)
 8000c20:	f001 f824 	bl	8001c6c <HAL_GPIO_Init>
}
 8000c24:	e01d      	b.n	8000c62 <HAL_OPAMP_MspInit+0x10e>
  else if(hopamp->Instance==OPAMP6)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a15      	ldr	r2, [pc, #84]	@ (8000c80 <HAL_OPAMP_MspInit+0x12c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d118      	bne.n	8000c62 <HAL_OPAMP_MspInit+0x10e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c30:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <HAL_OPAMP_MspInit+0x11c>)
 8000c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c34:	4a0e      	ldr	r2, [pc, #56]	@ (8000c70 <HAL_OPAMP_MspInit+0x11c>)
 8000c36:	f043 0302 	orr.w	r3, r3, #2
 8000c3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <HAL_OPAMP_MspInit+0x11c>)
 8000c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4807      	ldr	r0, [pc, #28]	@ (8000c7c <HAL_OPAMP_MspInit+0x128>)
 8000c5e:	f001 f805 	bl	8001c6c <HAL_GPIO_Init>
}
 8000c62:	bf00      	nop
 8000c64:	3730      	adds	r7, #48	@ 0x30
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40010300 	.word	0x40010300
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010304 	.word	0x40010304
 8000c78:	40010308 	.word	0x40010308
 8000c7c:	48000400 	.word	0x48000400
 8000c80:	40010314 	.word	0x40010314

08000c84 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b090      	sub	sp, #64	@ 0x40
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a6a      	ldr	r2, [pc, #424]	@ (8000e4c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d128      	bne.n	8000cf8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ca6:	4b6a      	ldr	r3, [pc, #424]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000caa:	4a69      	ldr	r2, [pc, #420]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000cac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cb2:	4b67      	ldr	r3, [pc, #412]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b64      	ldr	r3, [pc, #400]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc2:	4a63      	ldr	r2, [pc, #396]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cca:	4b61      	ldr	r3, [pc, #388]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4858      	ldr	r0, [pc, #352]	@ (8000e54 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8000cf2:	f000 ffbb 	bl	8001c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8000cf6:	e0a4      	b.n	8000e42 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM3)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a56      	ldr	r2, [pc, #344]	@ (8000e58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d128      	bne.n	8000d54 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d02:	4b53      	ldr	r3, [pc, #332]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d06:	4a52      	ldr	r2, [pc, #328]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d0e:	4b50      	ldr	r3, [pc, #320]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	623b      	str	r3, [r7, #32]
 8000d18:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	4b4d      	ldr	r3, [pc, #308]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1e:	4a4c      	ldr	r2, [pc, #304]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d26:	4b4a      	ldr	r3, [pc, #296]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	61fb      	str	r3, [r7, #28]
 8000d30:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d32:	23c0      	movs	r3, #192	@ 0xc0
 8000d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d42:	2302      	movs	r3, #2
 8000d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4841      	ldr	r0, [pc, #260]	@ (8000e54 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8000d4e:	f000 ff8d 	bl	8001c6c <HAL_GPIO_Init>
}
 8000d52:	e076      	b.n	8000e42 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM4)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a40      	ldr	r2, [pc, #256]	@ (8000e5c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d128      	bne.n	8000db0 <HAL_TIM_Encoder_MspInit+0x12c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d5e:	4b3c      	ldr	r3, [pc, #240]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d62:	4a3b      	ldr	r2, [pc, #236]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d6a:	4b39      	ldr	r3, [pc, #228]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	4b36      	ldr	r3, [pc, #216]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	4a35      	ldr	r2, [pc, #212]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d82:	4b33      	ldr	r3, [pc, #204]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d8e:	23c0      	movs	r3, #192	@ 0xc0
 8000d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da6:	4619      	mov	r1, r3
 8000da8:	482d      	ldr	r0, [pc, #180]	@ (8000e60 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000daa:	f000 ff5f 	bl	8001c6c <HAL_GPIO_Init>
}
 8000dae:	e048      	b.n	8000e42 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM20)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a2b      	ldr	r2, [pc, #172]	@ (8000e64 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d143      	bne.n	8000e42 <HAL_TIM_Encoder_MspInit+0x1be>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8000dba:	4b25      	ldr	r3, [pc, #148]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dbe:	4a24      	ldr	r2, [pc, #144]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000dc0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000dc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dc6:	4b22      	ldr	r3, [pc, #136]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dde:	4b1c      	ldr	r3, [pc, #112]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	4b19      	ldr	r3, [pc, #100]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dee:	4a18      	ldr	r2, [pc, #96]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df6:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e02:	2304      	movs	r3, #4
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8000e12:	2306      	movs	r3, #6
 8000e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8000e1e:	f000 ff25 	bl	8001c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e22:	2304      	movs	r3, #4
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8000e32:	2303      	movs	r3, #3
 8000e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4808      	ldr	r0, [pc, #32]	@ (8000e60 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000e3e:	f000 ff15 	bl	8001c6c <HAL_GPIO_Init>
}
 8000e42:	bf00      	nop
 8000e44:	3740      	adds	r7, #64	@ 0x40
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40012c00 	.word	0x40012c00
 8000e50:	40021000 	.word	0x40021000
 8000e54:	48000800 	.word	0x48000800
 8000e58:	40000400 	.word	0x40000400
 8000e5c:	40000800 	.word	0x40000800
 8000e60:	48000400 	.word	0x48000400
 8000e64:	40015000 	.word	0x40015000

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <NMI_Handler+0x4>

08000e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <MemManage_Handler+0x4>

08000e80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebe:	f000 f89b 	bl	8000ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ecc:	4802      	ldr	r0, [pc, #8]	@ (8000ed8 <USB_LP_IRQHandler+0x10>)
 8000ece:	f001 fa0f 	bl	80022f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20001114 	.word	0x20001114

08000edc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <SystemInit+0x20>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ee6:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <SystemInit+0x20>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f00:	480d      	ldr	r0, [pc, #52]	@ (8000f38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f04:	f7ff ffea 	bl	8000edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f08:	480c      	ldr	r0, [pc, #48]	@ (8000f3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f0a:	490d      	ldr	r1, [pc, #52]	@ (8000f40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f44 <LoopForever+0xe>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f10:	e002      	b.n	8000f18 <LoopCopyDataInit>

08000f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f16:	3304      	adds	r3, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f1c:	d3f9      	bcc.n	8000f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f20:	4c0a      	ldr	r4, [pc, #40]	@ (8000f4c <LoopForever+0x16>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f24:	e001      	b.n	8000f2a <LoopFillZerobss>

08000f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f28:	3204      	adds	r2, #4

08000f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f2c:	d3fb      	bcc.n	8000f26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f008 f885 	bl	800903c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f32:	f7ff f971 	bl	8000218 <main>

08000f36 <LoopForever>:

LoopForever:
    b LoopForever
 8000f36:	e7fe      	b.n	8000f36 <LoopForever>
  ldr   r0, =_estack
 8000f38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000f44:	080090fc 	.word	0x080090fc
  ldr r2, =_sbss
 8000f48:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000f4c:	20001610 	.word	0x20001610

08000f50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC1_2_IRQHandler>

08000f52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f000 fc69 	bl	8001834 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f62:	200f      	movs	r0, #15
 8000f64:	f000 f80e 	bl	8000f84 <HAL_InitTick>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d002      	beq.n	8000f74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	71fb      	strb	r3, [r7, #7]
 8000f72:	e001      	b.n	8000f78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f74:	f7ff fd04 	bl	8000980 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f78:	79fb      	ldrb	r3, [r7, #7]

}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f90:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <HAL_InitTick+0x68>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d022      	beq.n	8000fde <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f98:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <HAL_InitTick+0x6c>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <HAL_InitTick+0x68>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fc74 	bl	800189a <HAL_SYSTICK_Config>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10f      	bne.n	8000fd8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b0f      	cmp	r3, #15
 8000fbc:	d809      	bhi.n	8000fd2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc6:	f000 fc40 	bl	800184a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff4 <HAL_InitTick+0x70>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	e007      	b.n	8000fe2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	73fb      	strb	r3, [r7, #15]
 8000fd6:	e004      	b.n	8000fe2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e001      	b.n	8000fe2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000014 	.word	0x20000014
 8000ff0:	2000000c 	.word	0x2000000c
 8000ff4:	20000010 	.word	0x20000010

08000ff8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <HAL_IncTick+0x1c>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b05      	ldr	r3, [pc, #20]	@ (8001018 <HAL_IncTick+0x20>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4413      	add	r3, r2
 8001006:	4a03      	ldr	r2, [pc, #12]	@ (8001014 <HAL_IncTick+0x1c>)
 8001008:	6013      	str	r3, [r2, #0]
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	2000043c 	.word	0x2000043c
 8001018:	20000014 	.word	0x20000014

0800101c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;
 8001020:	4b03      	ldr	r3, [pc, #12]	@ (8001030 <HAL_GetTick+0x14>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	2000043c 	.word	0x2000043c

08001034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff ffee 	bl	800101c <HAL_GetTick>
 8001040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104c:	d004      	beq.n	8001058 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <HAL_Delay+0x40>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	4413      	add	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001058:	bf00      	nop
 800105a:	f7ff ffdf 	bl	800101c <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	429a      	cmp	r2, r3
 8001068:	d8f7      	bhi.n	800105a <HAL_Delay+0x26>
  {
  }
}
 800106a:	bf00      	nop
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000014 	.word	0x20000014

08001078 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 0202 	bic.w	r2, r3, #2
 8001088:	4904      	ldr	r1, [pc, #16]	@ (800109c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4313      	orrs	r3, r2
 800108e:	600b      	str	r3, [r1, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	40010030 	.word	0x40010030

080010a0 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80010aa:	f023 0301 	bic.w	r3, r3, #1
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40010030 	.word	0x40010030

080010c0 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80010c8:	4b05      	ldr	r3, [pc, #20]	@ (80010e0 <LL_EXTI_EnableIT_0_31+0x20>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4904      	ldr	r1, [pc, #16]	@ (80010e0 <LL_EXTI_EnableIT_0_31+0x20>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	600b      	str	r3, [r1, #0]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40010400 	.word	0x40010400

080010e4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <LL_EXTI_EnableIT_32_63+0x20>)
 80010ee:	6a1a      	ldr	r2, [r3, #32]
 80010f0:	4904      	ldr	r1, [pc, #16]	@ (8001104 <LL_EXTI_EnableIT_32_63+0x20>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	620b      	str	r3, [r1, #32]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	40010400 	.word	0x40010400

08001108 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <LL_EXTI_DisableIT_0_31+0x24>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	43db      	mvns	r3, r3
 8001118:	4904      	ldr	r1, [pc, #16]	@ (800112c <LL_EXTI_DisableIT_0_31+0x24>)
 800111a:	4013      	ands	r3, r2
 800111c:	600b      	str	r3, [r1, #0]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40010400 	.word	0x40010400

08001130 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <LL_EXTI_DisableIT_32_63+0x24>)
 800113a:	6a1a      	ldr	r2, [r3, #32]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	43db      	mvns	r3, r3
 8001140:	4904      	ldr	r1, [pc, #16]	@ (8001154 <LL_EXTI_DisableIT_32_63+0x24>)
 8001142:	4013      	ands	r3, r2
 8001144:	620b      	str	r3, [r1, #32]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40010400 	.word	0x40010400

08001158 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	4904      	ldr	r1, [pc, #16]	@ (8001178 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4313      	orrs	r3, r2
 800116a:	604b      	str	r3, [r1, #4]

}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	40010400 	.word	0x40010400

0800117c <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <LL_EXTI_EnableEvent_32_63+0x20>)
 8001186:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001188:	4904      	ldr	r1, [pc, #16]	@ (800119c <LL_EXTI_EnableEvent_32_63+0x20>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4313      	orrs	r3, r2
 800118e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	40010400 	.word	0x40010400

080011a0 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	4904      	ldr	r1, [pc, #16]	@ (80011c4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80011b2:	4013      	ands	r3, r2
 80011b4:	604b      	str	r3, [r1, #4]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40010400 	.word	0x40010400

080011c8 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <LL_EXTI_DisableEvent_32_63+0x24>)
 80011d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	4904      	ldr	r1, [pc, #16]	@ (80011ec <LL_EXTI_DisableEvent_32_63+0x24>)
 80011da:	4013      	ands	r3, r2
 80011dc:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40010400 	.word	0x40010400

080011f0 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	4904      	ldr	r1, [pc, #16]	@ (8001210 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4313      	orrs	r3, r2
 8001202:	608b      	str	r3, [r1, #8]

}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	40010400 	.word	0x40010400

08001214 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800121c:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800121e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001220:	4904      	ldr	r1, [pc, #16]	@ (8001234 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4313      	orrs	r3, r2
 8001226:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40010400 	.word	0x40010400

08001238 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	43db      	mvns	r3, r3
 8001248:	4904      	ldr	r1, [pc, #16]	@ (800125c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800124a:	4013      	ands	r3, r2
 800124c:	608b      	str	r3, [r1, #8]

}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40010400 	.word	0x40010400

08001260 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800126a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	43db      	mvns	r3, r3
 8001270:	4904      	ldr	r1, [pc, #16]	@ (8001284 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001272:	4013      	ands	r3, r2
 8001274:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40010400 	.word	0x40010400

08001288 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001290:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	4904      	ldr	r1, [pc, #16]	@ (80012a8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4313      	orrs	r3, r2
 800129a:	60cb      	str	r3, [r1, #12]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	40010400 	.word	0x40010400

080012ac <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80012b4:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80012b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012b8:	4904      	ldr	r1, [pc, #16]	@ (80012cc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4313      	orrs	r3, r2
 80012be:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	40010400 	.word	0x40010400

080012d0 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	43db      	mvns	r3, r3
 80012e0:	4904      	ldr	r1, [pc, #16]	@ (80012f4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	60cb      	str	r3, [r1, #12]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40010400 	.word	0x40010400

080012f8 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	43db      	mvns	r3, r3
 8001308:	4904      	ldr	r1, [pc, #16]	@ (800131c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800130a:	4013      	ands	r3, r2
 800130c:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40010400 	.word	0x40010400

08001320 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001328:	4a04      	ldr	r2, [pc, #16]	@ (800133c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6153      	str	r3, [r2, #20]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40010400 	.word	0x40010400

08001340 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8001348:	4a04      	ldr	r2, [pc, #16]	@ (800135c <LL_EXTI_ClearFlag_32_63+0x1c>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40010400 	.word	0x40010400

08001360 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d102      	bne.n	800137c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	77fb      	strb	r3, [r7, #31]
 800137a:	e181      	b.n	8001680 <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001386:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800138a:	d102      	bne.n	8001392 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	77fb      	strb	r3, [r7, #31]
 8001390:	e176      	b.n	8001680 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	7f5b      	ldrb	r3, [r3, #29]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d108      	bne.n	80013ae <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff fb11 	bl	80009d0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80013b8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 80013d4:	4313      	orrs	r3, r2
 80013d6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4b90      	ldr	r3, [pc, #576]	@ (8001620 <HAL_COMP_Init+0x2c0>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	6979      	ldr	r1, [r7, #20]
 80013e8:	430b      	orrs	r3, r1
 80013ea:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d016      	beq.n	8001428 <HAL_COMP_Init+0xc8>
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d113      	bne.n	8001428 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001400:	4b88      	ldr	r3, [pc, #544]	@ (8001624 <HAL_COMP_Init+0x2c4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	099b      	lsrs	r3, r3, #6
 8001406:	4a88      	ldr	r2, [pc, #544]	@ (8001628 <HAL_COMP_Init+0x2c8>)
 8001408:	fba2 2303 	umull	r2, r3, r2, r3
 800140c:	099b      	lsrs	r3, r3, #6
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800141a:	e002      	b.n	8001422 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3b01      	subs	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f9      	bne.n	800141c <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a7f      	ldr	r2, [pc, #508]	@ (800162c <HAL_COMP_Init+0x2cc>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d028      	beq.n	8001484 <HAL_COMP_Init+0x124>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a7e      	ldr	r2, [pc, #504]	@ (8001630 <HAL_COMP_Init+0x2d0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d020      	beq.n	800147e <HAL_COMP_Init+0x11e>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a7c      	ldr	r2, [pc, #496]	@ (8001634 <HAL_COMP_Init+0x2d4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d018      	beq.n	8001478 <HAL_COMP_Init+0x118>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a7b      	ldr	r2, [pc, #492]	@ (8001638 <HAL_COMP_Init+0x2d8>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d010      	beq.n	8001472 <HAL_COMP_Init+0x112>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a79      	ldr	r2, [pc, #484]	@ (800163c <HAL_COMP_Init+0x2dc>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d008      	beq.n	800146c <HAL_COMP_Init+0x10c>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a78      	ldr	r2, [pc, #480]	@ (8001640 <HAL_COMP_Init+0x2e0>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d101      	bne.n	8001468 <HAL_COMP_Init+0x108>
 8001464:	2301      	movs	r3, #1
 8001466:	e00f      	b.n	8001488 <HAL_COMP_Init+0x128>
 8001468:	2302      	movs	r3, #2
 800146a:	e00d      	b.n	8001488 <HAL_COMP_Init+0x128>
 800146c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001470:	e00a      	b.n	8001488 <HAL_COMP_Init+0x128>
 8001472:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001476:	e007      	b.n	8001488 <HAL_COMP_Init+0x128>
 8001478:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800147c:	e004      	b.n	8001488 <HAL_COMP_Init+0x128>
 800147e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001482:	e001      	b.n	8001488 <HAL_COMP_Init+0x128>
 8001484:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001488:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 80b6 	beq.w	8001604 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d011      	beq.n	80014c8 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a65      	ldr	r2, [pc, #404]	@ (8001640 <HAL_COMP_Init+0x2e0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d004      	beq.n	80014b8 <HAL_COMP_Init+0x158>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a64      	ldr	r2, [pc, #400]	@ (8001644 <HAL_COMP_Init+0x2e4>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d103      	bne.n	80014c0 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80014b8:	6938      	ldr	r0, [r7, #16]
 80014ba:	f7ff feab 	bl	8001214 <LL_EXTI_EnableRisingTrig_32_63>
 80014be:	e014      	b.n	80014ea <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80014c0:	6938      	ldr	r0, [r7, #16]
 80014c2:	f7ff fe95 	bl	80011f0 <LL_EXTI_EnableRisingTrig_0_31>
 80014c6:	e010      	b.n	80014ea <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a5c      	ldr	r2, [pc, #368]	@ (8001640 <HAL_COMP_Init+0x2e0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d004      	beq.n	80014dc <HAL_COMP_Init+0x17c>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a5b      	ldr	r2, [pc, #364]	@ (8001644 <HAL_COMP_Init+0x2e4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d103      	bne.n	80014e4 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80014dc:	6938      	ldr	r0, [r7, #16]
 80014de:	f7ff febf 	bl	8001260 <LL_EXTI_DisableRisingTrig_32_63>
 80014e2:	e002      	b.n	80014ea <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80014e4:	6938      	ldr	r0, [r7, #16]
 80014e6:	f7ff fea7 	bl	8001238 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	f003 0320 	and.w	r3, r3, #32
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d011      	beq.n	800151a <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a51      	ldr	r2, [pc, #324]	@ (8001640 <HAL_COMP_Init+0x2e0>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d004      	beq.n	800150a <HAL_COMP_Init+0x1aa>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a4f      	ldr	r2, [pc, #316]	@ (8001644 <HAL_COMP_Init+0x2e4>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d103      	bne.n	8001512 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800150a:	6938      	ldr	r0, [r7, #16]
 800150c:	f7ff fece 	bl	80012ac <LL_EXTI_EnableFallingTrig_32_63>
 8001510:	e014      	b.n	800153c <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8001512:	6938      	ldr	r0, [r7, #16]
 8001514:	f7ff feb8 	bl	8001288 <LL_EXTI_EnableFallingTrig_0_31>
 8001518:	e010      	b.n	800153c <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a48      	ldr	r2, [pc, #288]	@ (8001640 <HAL_COMP_Init+0x2e0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d004      	beq.n	800152e <HAL_COMP_Init+0x1ce>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a46      	ldr	r2, [pc, #280]	@ (8001644 <HAL_COMP_Init+0x2e4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d103      	bne.n	8001536 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800152e:	6938      	ldr	r0, [r7, #16]
 8001530:	f7ff fee2 	bl	80012f8 <LL_EXTI_DisableFallingTrig_32_63>
 8001534:	e002      	b.n	800153c <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8001536:	6938      	ldr	r0, [r7, #16]
 8001538:	f7ff feca 	bl	80012d0 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a3f      	ldr	r2, [pc, #252]	@ (8001640 <HAL_COMP_Init+0x2e0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d004      	beq.n	8001550 <HAL_COMP_Init+0x1f0>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a3e      	ldr	r2, [pc, #248]	@ (8001644 <HAL_COMP_Init+0x2e4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d103      	bne.n	8001558 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8001550:	6938      	ldr	r0, [r7, #16]
 8001552:	f7ff fef5 	bl	8001340 <LL_EXTI_ClearFlag_32_63>
 8001556:	e002      	b.n	800155e <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8001558:	6938      	ldr	r0, [r7, #16]
 800155a:	f7ff fee1 	bl	8001320 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d011      	beq.n	800158e <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a34      	ldr	r2, [pc, #208]	@ (8001640 <HAL_COMP_Init+0x2e0>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d004      	beq.n	800157e <HAL_COMP_Init+0x21e>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a32      	ldr	r2, [pc, #200]	@ (8001644 <HAL_COMP_Init+0x2e4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d103      	bne.n	8001586 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800157e:	6938      	ldr	r0, [r7, #16]
 8001580:	f7ff fdfc 	bl	800117c <LL_EXTI_EnableEvent_32_63>
 8001584:	e014      	b.n	80015b0 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8001586:	6938      	ldr	r0, [r7, #16]
 8001588:	f7ff fde6 	bl	8001158 <LL_EXTI_EnableEvent_0_31>
 800158c:	e010      	b.n	80015b0 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a2b      	ldr	r2, [pc, #172]	@ (8001640 <HAL_COMP_Init+0x2e0>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d004      	beq.n	80015a2 <HAL_COMP_Init+0x242>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a29      	ldr	r2, [pc, #164]	@ (8001644 <HAL_COMP_Init+0x2e4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d103      	bne.n	80015aa <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80015a2:	6938      	ldr	r0, [r7, #16]
 80015a4:	f7ff fe10 	bl	80011c8 <LL_EXTI_DisableEvent_32_63>
 80015a8:	e002      	b.n	80015b0 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80015aa:	6938      	ldr	r0, [r7, #16]
 80015ac:	f7ff fdf8 	bl	80011a0 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d011      	beq.n	80015e0 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001640 <HAL_COMP_Init+0x2e0>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d004      	beq.n	80015d0 <HAL_COMP_Init+0x270>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001644 <HAL_COMP_Init+0x2e4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d103      	bne.n	80015d8 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 80015d0:	6938      	ldr	r0, [r7, #16]
 80015d2:	f7ff fd87 	bl	80010e4 <LL_EXTI_EnableIT_32_63>
 80015d6:	e04b      	b.n	8001670 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 80015d8:	6938      	ldr	r0, [r7, #16]
 80015da:	f7ff fd71 	bl	80010c0 <LL_EXTI_EnableIT_0_31>
 80015de:	e047      	b.n	8001670 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a16      	ldr	r2, [pc, #88]	@ (8001640 <HAL_COMP_Init+0x2e0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d004      	beq.n	80015f4 <HAL_COMP_Init+0x294>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a15      	ldr	r2, [pc, #84]	@ (8001644 <HAL_COMP_Init+0x2e4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d103      	bne.n	80015fc <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80015f4:	6938      	ldr	r0, [r7, #16]
 80015f6:	f7ff fd9b 	bl	8001130 <LL_EXTI_DisableIT_32_63>
 80015fa:	e039      	b.n	8001670 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80015fc:	6938      	ldr	r0, [r7, #16]
 80015fe:	f7ff fd83 	bl	8001108 <LL_EXTI_DisableIT_0_31>
 8001602:	e035      	b.n	8001670 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0d      	ldr	r2, [pc, #52]	@ (8001640 <HAL_COMP_Init+0x2e0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d004      	beq.n	8001618 <HAL_COMP_Init+0x2b8>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a0c      	ldr	r2, [pc, #48]	@ (8001644 <HAL_COMP_Init+0x2e4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d117      	bne.n	8001648 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8001618:	6938      	ldr	r0, [r7, #16]
 800161a:	f7ff fdd5 	bl	80011c8 <LL_EXTI_DisableEvent_32_63>
 800161e:	e016      	b.n	800164e <HAL_COMP_Init+0x2ee>
 8001620:	ff007e0f 	.word	0xff007e0f
 8001624:	2000000c 	.word	0x2000000c
 8001628:	053e2d63 	.word	0x053e2d63
 800162c:	40010200 	.word	0x40010200
 8001630:	40010204 	.word	0x40010204
 8001634:	40010208 	.word	0x40010208
 8001638:	4001020c 	.word	0x4001020c
 800163c:	40010210 	.word	0x40010210
 8001640:	40010214 	.word	0x40010214
 8001644:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8001648:	6938      	ldr	r0, [r7, #16]
 800164a:	f7ff fda9 	bl	80011a0 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a0e      	ldr	r2, [pc, #56]	@ (800168c <HAL_COMP_Init+0x32c>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d004      	beq.n	8001662 <HAL_COMP_Init+0x302>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0c      	ldr	r2, [pc, #48]	@ (8001690 <HAL_COMP_Init+0x330>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d103      	bne.n	800166a <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8001662:	6938      	ldr	r0, [r7, #16]
 8001664:	f7ff fd64 	bl	8001130 <LL_EXTI_DisableIT_32_63>
 8001668:	e002      	b.n	8001670 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800166a:	6938      	ldr	r0, [r7, #16]
 800166c:	f7ff fd4c 	bl	8001108 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7f5b      	ldrb	r3, [r3, #29]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d102      	bne.n	8001680 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8001680:	7ffb      	ldrb	r3, [r7, #31]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3720      	adds	r7, #32
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40010214 	.word	0x40010214
 8001690:	40010218 	.word	0x40010218

08001694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016b0:	4013      	ands	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016c6:	4a04      	ldr	r2, [pc, #16]	@ (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	60d3      	str	r3, [r2, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e0:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <__NVIC_GetPriorityGrouping+0x18>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	f003 0307 	and.w	r3, r3, #7
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	2b00      	cmp	r3, #0
 8001708:	db0b      	blt.n	8001722 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	f003 021f 	and.w	r2, r3, #31
 8001710:	4907      	ldr	r1, [pc, #28]	@ (8001730 <__NVIC_EnableIRQ+0x38>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	2001      	movs	r0, #1
 800171a:	fa00 f202 	lsl.w	r2, r0, r2
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000e100 	.word	0xe000e100

08001734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	db0a      	blt.n	800175e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	b2da      	uxtb	r2, r3
 800174c:	490c      	ldr	r1, [pc, #48]	@ (8001780 <__NVIC_SetPriority+0x4c>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	0112      	lsls	r2, r2, #4
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	440b      	add	r3, r1
 8001758:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800175c:	e00a      	b.n	8001774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4908      	ldr	r1, [pc, #32]	@ (8001784 <__NVIC_SetPriority+0x50>)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	3b04      	subs	r3, #4
 800176c:	0112      	lsls	r2, r2, #4
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	440b      	add	r3, r1
 8001772:	761a      	strb	r2, [r3, #24]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000e100 	.word	0xe000e100
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	@ 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f1c3 0307 	rsb	r3, r3, #7
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	bf28      	it	cs
 80017a6:	2304      	movcs	r3, #4
 80017a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3304      	adds	r3, #4
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	d902      	bls.n	80017b8 <NVIC_EncodePriority+0x30>
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3b03      	subs	r3, #3
 80017b6:	e000      	b.n	80017ba <NVIC_EncodePriority+0x32>
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	401a      	ands	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43d9      	mvns	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	4313      	orrs	r3, r2
         );
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3724      	adds	r7, #36	@ 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001800:	d301      	bcc.n	8001806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001802:	2301      	movs	r3, #1
 8001804:	e00f      	b.n	8001826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001806:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <SysTick_Config+0x40>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180e:	210f      	movs	r1, #15
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f7ff ff8e 	bl	8001734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <SysTick_Config+0x40>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181e:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <SysTick_Config+0x40>)
 8001820:	2207      	movs	r2, #7
 8001822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	e000e010 	.word	0xe000e010

08001834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ff29 	bl	8001694 <__NVIC_SetPriorityGrouping>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001858:	f7ff ff40 	bl	80016dc <__NVIC_GetPriorityGrouping>
 800185c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	6978      	ldr	r0, [r7, #20]
 8001864:	f7ff ff90 	bl	8001788 <NVIC_EncodePriority>
 8001868:	4602      	mov	r2, r0
 800186a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff5f 	bl	8001734 <__NVIC_SetPriority>
}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff33 	bl	80016f8 <__NVIC_EnableIRQ>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ffa4 	bl	80017f0 <SysTick_Config>
 80018a8:	4603      	mov	r3, r0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e014      	b.n	80018ee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	791b      	ldrb	r3, [r3, #4]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d105      	bne.n	80018da <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff f8d1 	bl	8000a7c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2202      	movs	r2, #2
 80018de:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	@ 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <HAL_DAC_ConfigChannel+0x1c>
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e1a1      	b.n	8001c5c <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	795b      	ldrb	r3, [r3, #5]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <HAL_DAC_ConfigChannel+0x32>
 8001926:	2302      	movs	r3, #2
 8001928:	e198      	b.n	8001c5c <HAL_DAC_ConfigChannel+0x364>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2201      	movs	r2, #1
 800192e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2202      	movs	r2, #2
 8001934:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b04      	cmp	r3, #4
 800193c:	d17a      	bne.n	8001a34 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800193e:	f7ff fb6d 	bl	800101c <HAL_GetTick>
 8001942:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d13d      	bne.n	80019c6 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800194a:	e018      	b.n	800197e <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800194c:	f7ff fb66 	bl	800101c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b01      	cmp	r3, #1
 8001958:	d911      	bls.n	800197e <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001960:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00a      	beq.n	800197e <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	f043 0208 	orr.w	r2, r3, #8
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2203      	movs	r2, #3
 8001978:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e16e      	b.n	8001c5c <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001984:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1df      	bne.n	800194c <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001994:	641a      	str	r2, [r3, #64]	@ 0x40
 8001996:	e020      	b.n	80019da <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001998:	f7ff fb40 	bl	800101c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d90f      	bls.n	80019c6 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	da0a      	bge.n	80019c6 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	f043 0208 	orr.w	r2, r3, #8
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2203      	movs	r2, #3
 80019c0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e14a      	b.n	8001c5c <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	dbe3      	blt.n	8001998 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	ea02 0103 	and.w	r1, r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	409a      	lsls	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	21ff      	movs	r1, #255	@ 0xff
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	ea02 0103 	and.w	r1, r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0310 	and.w	r3, r3, #16
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d11d      	bne.n	8001a78 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	221f      	movs	r2, #31
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a54:	4013      	ands	r3, r2
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a76:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	2207      	movs	r2, #7
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a90:	4013      	ands	r3, r2
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d102      	bne.n	8001aa2 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
 8001aa0:	e00f      	b.n	8001ac2 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d102      	bne.n	8001ab0 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	623b      	str	r3, [r7, #32]
 8001aae:	e008      	b.n	8001ac2 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	623b      	str	r3, [r7, #32]
 8001abc:	e001      	b.n	8001ac2 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	6a3a      	ldr	r2, [r7, #32]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	791b      	ldrb	r3, [r3, #4]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d102      	bne.n	8001af6 <HAL_DAC_ConfigChannel+0x1fe>
 8001af0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001af4:	e000      	b.n	8001af8 <HAL_DAC_ConfigChannel+0x200>
 8001af6:	2300      	movs	r3, #0
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b10:	4013      	ands	r3, r2
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	795b      	ldrb	r3, [r3, #5]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d102      	bne.n	8001b22 <HAL_DAC_ConfigChannel+0x22a>
 8001b1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b20:	e000      	b.n	8001b24 <HAL_DAC_ConfigChannel+0x22c>
 8001b22:	2300      	movs	r3, #0
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d114      	bne.n	8001b64 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001b3a:	f002 fd4f 	bl	80045dc <HAL_RCC_GetHCLKFreq>
 8001b3e:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4a48      	ldr	r2, [pc, #288]	@ (8001c64 <HAL_DAC_ConfigChannel+0x36c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d904      	bls.n	8001b52 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b50:	e00f      	b.n	8001b72 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4a44      	ldr	r2, [pc, #272]	@ (8001c68 <HAL_DAC_ConfigChannel+0x370>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d90a      	bls.n	8001b70 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b62:	e006      	b.n	8001b72 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b6e:	e000      	b.n	8001b72 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001b70:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b80:	4313      	orrs	r3, r2
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b8a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6819      	ldr	r1, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f003 0310 	and.w	r3, r3, #16
 8001b98:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43da      	mvns	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001be6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6819      	ldr	r1, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f003 0310 	and.w	r3, r3, #16
 8001bf4:	22c0      	movs	r2, #192	@ 0xc0
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	400a      	ands	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	089b      	lsrs	r3, r3, #2
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	ea02 0103 	and.w	r1, r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	409a      	lsls	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2201      	movs	r2, #1
 8001c52:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001c5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3728      	adds	r7, #40	@ 0x28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	09896800 	.word	0x09896800
 8001c68:	04c4b400 	.word	0x04c4b400

08001c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c7a:	e15a      	b.n	8001f32 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2101      	movs	r1, #1
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	fa01 f303 	lsl.w	r3, r1, r3
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 814c 	beq.w	8001f2c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d005      	beq.n	8001cac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d130      	bne.n	8001d0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	f003 0201 	and.w	r2, r3, #1
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d017      	beq.n	8001d4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	2203      	movs	r2, #3
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d123      	bne.n	8001d9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	08da      	lsrs	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3208      	adds	r2, #8
 8001d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	691a      	ldr	r2, [r3, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	08da      	lsrs	r2, r3, #3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3208      	adds	r2, #8
 8001d98:	6939      	ldr	r1, [r7, #16]
 8001d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0203 	and.w	r2, r3, #3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80a6 	beq.w	8001f2c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de0:	4b5b      	ldr	r3, [pc, #364]	@ (8001f50 <HAL_GPIO_Init+0x2e4>)
 8001de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de4:	4a5a      	ldr	r2, [pc, #360]	@ (8001f50 <HAL_GPIO_Init+0x2e4>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dec:	4b58      	ldr	r3, [pc, #352]	@ (8001f50 <HAL_GPIO_Init+0x2e4>)
 8001dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001df8:	4a56      	ldr	r2, [pc, #344]	@ (8001f54 <HAL_GPIO_Init+0x2e8>)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	089b      	lsrs	r3, r3, #2
 8001dfe:	3302      	adds	r3, #2
 8001e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	220f      	movs	r2, #15
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e22:	d01f      	beq.n	8001e64 <HAL_GPIO_Init+0x1f8>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a4c      	ldr	r2, [pc, #304]	@ (8001f58 <HAL_GPIO_Init+0x2ec>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d019      	beq.n	8001e60 <HAL_GPIO_Init+0x1f4>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a4b      	ldr	r2, [pc, #300]	@ (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d013      	beq.n	8001e5c <HAL_GPIO_Init+0x1f0>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a4a      	ldr	r2, [pc, #296]	@ (8001f60 <HAL_GPIO_Init+0x2f4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00d      	beq.n	8001e58 <HAL_GPIO_Init+0x1ec>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a49      	ldr	r2, [pc, #292]	@ (8001f64 <HAL_GPIO_Init+0x2f8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d007      	beq.n	8001e54 <HAL_GPIO_Init+0x1e8>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a48      	ldr	r2, [pc, #288]	@ (8001f68 <HAL_GPIO_Init+0x2fc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <HAL_GPIO_Init+0x1e4>
 8001e4c:	2305      	movs	r3, #5
 8001e4e:	e00a      	b.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e50:	2306      	movs	r3, #6
 8001e52:	e008      	b.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e54:	2304      	movs	r3, #4
 8001e56:	e006      	b.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e004      	b.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e002      	b.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e64:	2300      	movs	r3, #0
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	f002 0203 	and.w	r2, r2, #3
 8001e6c:	0092      	lsls	r2, r2, #2
 8001e6e:	4093      	lsls	r3, r2
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e76:	4937      	ldr	r1, [pc, #220]	@ (8001f54 <HAL_GPIO_Init+0x2e8>)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e84:	4b39      	ldr	r3, [pc, #228]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ea8:	4a30      	ldr	r2, [pc, #192]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eae:	4b2f      	ldr	r3, [pc, #188]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ed2:	4a26      	ldr	r2, [pc, #152]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ed8:	4b24      	ldr	r3, [pc, #144]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001efc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f26:	4a11      	ldr	r2, [pc, #68]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f47f ae9d 	bne.w	8001c7c <HAL_GPIO_Init+0x10>
  }
}
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
 8001f46:	371c      	adds	r7, #28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40010000 	.word	0x40010000
 8001f58:	48000400 	.word	0x48000400
 8001f5c:	48000800 	.word	0x48000800
 8001f60:	48000c00 	.word	0x48000c00
 8001f64:	48001000 	.word	0x48001000
 8001f68:	48001400 	.word	0x48001400
 8001f6c:	40010400 	.word	0x40010400

08001f70 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e0bb      	b.n	80020fe <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b05      	cmp	r3, #5
 8001f90:	d101      	bne.n	8001f96 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e0b3      	b.n	80020fe <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d101      	bne.n	8001fa6 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0ab      	b.n	80020fe <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa6:	4b58      	ldr	r3, [pc, #352]	@ (8002108 <HAL_OPAMP_Init+0x198>)
 8001fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001faa:	4a57      	ldr	r2, [pc, #348]	@ (8002108 <HAL_OPAMP_Init+0x198>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fb2:	4b55      	ldr	r3, [pc, #340]	@ (8002108 <HAL_OPAMP_Init+0x198>)
 8001fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d103      	bne.n	8001fd2 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7fe fdbe 	bl	8000b54 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b40      	cmp	r3, #64	@ 0x40
 8001fde:	d003      	beq.n	8001fe8 <HAL_OPAMP_Init+0x78>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b60      	cmp	r3, #96	@ 0x60
 8001fe6:	d133      	bne.n	8002050 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 0110 	bic.w	r1, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b41      	ldr	r3, [pc, #260]	@ (800210c <HAL_OPAMP_Init+0x19c>)
 8002006:	4013      	ands	r3, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6851      	ldr	r1, [r2, #4]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6892      	ldr	r2, [r2, #8]
 8002010:	4311      	orrs	r1, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6912      	ldr	r2, [r2, #16]
 8002016:	430a      	orrs	r2, r1
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	7d09      	ldrb	r1, [r1, #20]
 800201c:	2901      	cmp	r1, #1
 800201e:	d102      	bne.n	8002026 <HAL_OPAMP_Init+0xb6>
 8002020:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002024:	e000      	b.n	8002028 <HAL_OPAMP_Init+0xb8>
 8002026:	2100      	movs	r1, #0
 8002028:	4311      	orrs	r1, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800202e:	4311      	orrs	r1, r2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002034:	4311      	orrs	r1, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800203a:	04d2      	lsls	r2, r2, #19
 800203c:	4311      	orrs	r1, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002042:	0612      	lsls	r2, r2, #24
 8002044:	4311      	orrs	r1, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	430b      	orrs	r3, r1
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e035      	b.n	80020bc <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 0110 	bic.w	r1, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b27      	ldr	r3, [pc, #156]	@ (800210c <HAL_OPAMP_Init+0x19c>)
 800206e:	4013      	ands	r3, r2
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6851      	ldr	r1, [r2, #4]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6892      	ldr	r2, [r2, #8]
 8002078:	4311      	orrs	r1, r2
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68d2      	ldr	r2, [r2, #12]
 800207e:	4311      	orrs	r1, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6912      	ldr	r2, [r2, #16]
 8002084:	430a      	orrs	r2, r1
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	7d09      	ldrb	r1, [r1, #20]
 800208a:	2901      	cmp	r1, #1
 800208c:	d102      	bne.n	8002094 <HAL_OPAMP_Init+0x124>
 800208e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002092:	e000      	b.n	8002096 <HAL_OPAMP_Init+0x126>
 8002094:	2100      	movs	r1, #0
 8002096:	4311      	orrs	r1, r2
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800209c:	4311      	orrs	r1, r2
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80020a2:	4311      	orrs	r1, r2
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80020a8:	04d2      	lsls	r2, r2, #19
 80020aa:	4311      	orrs	r1, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020b0:	0612      	lsls	r2, r2, #24
 80020b2:	4311      	orrs	r1, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	430b      	orrs	r3, r1
 80020ba:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	db10      	blt.n	80020e8 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699a      	ldr	r2, [r3, #24]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d103      	bne.n	80020fc <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	e0003e11 	.word	0xe0003e11

08002110 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e0c0      	b.n	80022a4 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f006 fc74 	bl	8008a24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2203      	movs	r2, #3
 8002140:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f002 ffa2 	bl	8005092 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]
 8002152:	e03e      	b.n	80021d2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	3311      	adds	r3, #17
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	440b      	add	r3, r1
 8002176:	3310      	adds	r3, #16
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	440b      	add	r3, r1
 800218a:	3313      	adds	r3, #19
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	3320      	adds	r3, #32
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	440b      	add	r3, r1
 80021b2:	3324      	adds	r3, #36	@ 0x24
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	3301      	adds	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	791b      	ldrb	r3, [r3, #4]
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d3bb      	bcc.n	8002154 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021dc:	2300      	movs	r3, #0
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	e044      	b.n	800226c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	440b      	add	r3, r1
 80021f0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	440b      	add	r3, r1
 800221c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	440b      	add	r3, r1
 8002248:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	440b      	add	r3, r1
 800225e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	3301      	adds	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	791b      	ldrb	r3, [r3, #4]
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	429a      	cmp	r2, r3
 8002274:	d3b5      	bcc.n	80021e2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3304      	adds	r3, #4
 800227e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002282:	f002 ff21 	bl	80050c8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	7a9b      	ldrb	r3, [r3, #10]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d102      	bne.n	80022a2 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f001 fc0e 	bl	8003abe <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_PCD_Start+0x16>
 80022be:	2302      	movs	r3, #2
 80022c0:	e012      	b.n	80022e8 <HAL_PCD_Start+0x3c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f002 fec8 	bl	8005064 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f004 fca5 	bl	8006c28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f004 fcaa 	bl	8006c56 <USB_ReadInterrupts>
 8002302:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fb06 	bl	8002920 <PCD_EP_ISR_Handler>

    return;
 8002314:	e110      	b.n	8002538 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002328:	b29a      	uxth	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002332:	b292      	uxth	r2, r2
 8002334:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f006 fc04 	bl	8008b46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800233e:	2100      	movs	r1, #0
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f8fc 	bl	800253e <HAL_PCD_SetAddress>

    return;
 8002346:	e0f7      	b.n	8002538 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00c      	beq.n	800236c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800235a:	b29a      	uxth	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002364:	b292      	uxth	r2, r2
 8002366:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800236a:	e0e5      	b.n	8002538 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00c      	beq.n	8002390 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800237e:	b29a      	uxth	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002388:	b292      	uxth	r2, r2
 800238a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800238e:	e0d3      	b.n	8002538 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d034      	beq.n	8002404 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0204 	bic.w	r2, r2, #4
 80023ac:	b292      	uxth	r2, r2
 80023ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0208 	bic.w	r2, r2, #8
 80023c4:	b292      	uxth	r2, r2
 80023c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d107      	bne.n	80023e4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023dc:	2100      	movs	r1, #0
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f006 fda4 	bl	8008f2c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f006 fbe7 	bl	8008bb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80023fc:	b292      	uxth	r2, r2
 80023fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002402:	e099      	b.n	8002538 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800240a:	2b00      	cmp	r3, #0
 800240c:	d027      	beq.n	800245e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002416:	b29a      	uxth	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0208 	orr.w	r2, r2, #8
 8002420:	b292      	uxth	r2, r2
 8002422:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800242e:	b29a      	uxth	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002438:	b292      	uxth	r2, r2
 800243a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002446:	b29a      	uxth	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0204 	orr.w	r2, r2, #4
 8002450:	b292      	uxth	r2, r2
 8002452:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f006 fb94 	bl	8008b84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800245c:	e06c      	b.n	8002538 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002464:	2b00      	cmp	r3, #0
 8002466:	d040      	beq.n	80024ea <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002470:	b29a      	uxth	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800247a:	b292      	uxth	r2, r2
 800247c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d12b      	bne.n	80024e2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002492:	b29a      	uxth	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0204 	orr.w	r2, r2, #4
 800249c:	b292      	uxth	r2, r2
 800249e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0208 	orr.w	r2, r2, #8
 80024b4:	b292      	uxth	r2, r2
 80024b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80024d8:	2101      	movs	r1, #1
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f006 fd26 	bl	8008f2c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80024e0:	e02a      	b.n	8002538 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f006 fb4e 	bl	8008b84 <HAL_PCD_SuspendCallback>
    return;
 80024e8:	e026      	b.n	8002538 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00f      	beq.n	8002514 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002506:	b292      	uxth	r2, r2
 8002508:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f006 fb0c 	bl	8008b2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002512:	e011      	b.n	8002538 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00c      	beq.n	8002538 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002526:	b29a      	uxth	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002530:	b292      	uxth	r2, r2
 8002532:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002536:	bf00      	nop
  }
}
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	460b      	mov	r3, r1
 8002548:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_PCD_SetAddress+0x1a>
 8002554:	2302      	movs	r3, #2
 8002556:	e012      	b.n	800257e <HAL_PCD_SetAddress+0x40>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	78fa      	ldrb	r2, [r7, #3]
 8002564:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	78fa      	ldrb	r2, [r7, #3]
 800256c:	4611      	mov	r1, r2
 800256e:	4618      	mov	r0, r3
 8002570:	f004 fb46 	bl	8006c00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	4608      	mov	r0, r1
 8002590:	4611      	mov	r1, r2
 8002592:	461a      	mov	r2, r3
 8002594:	4603      	mov	r3, r0
 8002596:	70fb      	strb	r3, [r7, #3]
 8002598:	460b      	mov	r3, r1
 800259a:	803b      	strh	r3, [r7, #0]
 800259c:	4613      	mov	r3, r2
 800259e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	da0e      	bge.n	80025ca <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	f003 0207 	and.w	r2, r3, #7
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	3310      	adds	r3, #16
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	4413      	add	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2201      	movs	r2, #1
 80025c6:	705a      	strb	r2, [r3, #1]
 80025c8:	e00e      	b.n	80025e8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	f003 0207 	and.w	r2, r3, #7
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	4413      	add	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80025f4:	883b      	ldrh	r3, [r7, #0]
 80025f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	78ba      	ldrb	r2, [r7, #2]
 8002602:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002604:	78bb      	ldrb	r3, [r7, #2]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d102      	bne.n	8002610 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_PCD_EP_Open+0x98>
 800261a:	2302      	movs	r3, #2
 800261c:	e00e      	b.n	800263c <HAL_PCD_EP_Open+0xb6>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68f9      	ldr	r1, [r7, #12]
 800262c:	4618      	mov	r0, r3
 800262e:	f002 fd69 	bl	8005104 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800263a:	7afb      	ldrb	r3, [r7, #11]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002650:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002654:	2b00      	cmp	r3, #0
 8002656:	da0e      	bge.n	8002676 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	f003 0207 	and.w	r2, r3, #7
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	3310      	adds	r3, #16
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	4413      	add	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	705a      	strb	r2, [r3, #1]
 8002674:	e00e      	b.n	8002694 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	f003 0207 	and.w	r2, r3, #7
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	4413      	add	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	b2da      	uxtb	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_PCD_EP_Close+0x6a>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e00e      	b.n	80026cc <HAL_PCD_EP_Close+0x88>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68f9      	ldr	r1, [r7, #12]
 80026bc:	4618      	mov	r0, r3
 80026be:	f003 fa09 	bl	8005ad4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	460b      	mov	r3, r1
 80026e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026e4:	7afb      	ldrb	r3, [r7, #11]
 80026e6:	f003 0207 	and.w	r2, r3, #7
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4413      	add	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2200      	movs	r2, #0
 8002712:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002714:	7afb      	ldrb	r3, [r7, #11]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	b2da      	uxtb	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6979      	ldr	r1, [r7, #20]
 8002726:	4618      	mov	r0, r3
 8002728:	f003 fbc1 	bl	8005eae <USB_EPStartXfer>

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	f003 0207 	and.w	r2, r3, #7
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	440b      	add	r3, r1
 8002754:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002758:	681b      	ldr	r3, [r3, #0]
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	607a      	str	r2, [r7, #4]
 8002770:	603b      	str	r3, [r7, #0]
 8002772:	460b      	mov	r3, r1
 8002774:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002776:	7afb      	ldrb	r3, [r7, #11]
 8002778:	f003 0207 	and.w	r2, r3, #7
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	3310      	adds	r3, #16
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4413      	add	r3, r2
 800278a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2200      	movs	r2, #0
 80027aa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2201      	movs	r2, #1
 80027b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027b2:	7afb      	ldrb	r3, [r7, #11]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6979      	ldr	r1, [r7, #20]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f003 fb72 	bl	8005eae <USB_EPStartXfer>

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	7912      	ldrb	r2, [r2, #4]
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e03e      	b.n	8002870 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	da0e      	bge.n	8002818 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	f003 0207 	and.w	r2, r3, #7
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	3310      	adds	r3, #16
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2201      	movs	r2, #1
 8002814:	705a      	strb	r2, [r3, #1]
 8002816:	e00c      	b.n	8002832 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	b2da      	uxtb	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_PCD_EP_SetStall+0x7e>
 800284e:	2302      	movs	r3, #2
 8002850:	e00e      	b.n	8002870 <HAL_PCD_EP_SetStall+0x9c>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68f9      	ldr	r1, [r7, #12]
 8002860:	4618      	mov	r0, r3
 8002862:	f004 f8d3 	bl	8006a0c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	7912      	ldrb	r2, [r2, #4]
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e040      	b.n	8002918 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002896:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800289a:	2b00      	cmp	r3, #0
 800289c:	da0e      	bge.n	80028bc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800289e:	78fb      	ldrb	r3, [r7, #3]
 80028a0:	f003 0207 	and.w	r2, r3, #7
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	3310      	adds	r3, #16
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2201      	movs	r2, #1
 80028b8:	705a      	strb	r2, [r3, #1]
 80028ba:	e00e      	b.n	80028da <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	f003 0207 	and.w	r2, r3, #7
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_PCD_EP_ClrStall+0x82>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e00e      	b.n	8002918 <HAL_PCD_EP_ClrStall+0xa0>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68f9      	ldr	r1, [r7, #12]
 8002908:	4618      	mov	r0, r3
 800290a:	f004 f8d0 	bl	8006aae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b092      	sub	sp, #72	@ 0x48
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002928:	e333      	b.n	8002f92 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002932:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002934:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8002940:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002944:	2b00      	cmp	r3, #0
 8002946:	f040 8108 	bne.w	8002b5a <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800294a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	d14c      	bne.n	80029ee <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	b29b      	uxth	r3, r3
 800295c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002964:	813b      	strh	r3, [r7, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	893b      	ldrh	r3, [r7, #8]
 800296c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002974:	b29b      	uxth	r3, r3
 8002976:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3310      	adds	r3, #16
 800297c:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002986:	b29b      	uxth	r3, r3
 8002988:	461a      	mov	r2, r3
 800298a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4413      	add	r3, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	4413      	add	r3, r2
 8002998:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80029a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	441a      	add	r2, r3
 80029b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029b2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80029b4:	2100      	movs	r1, #0
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f006 f89d 	bl	8008af6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	7b1b      	ldrb	r3, [r3, #12]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 82e5 	beq.w	8002f92 <PCD_EP_ISR_Handler+0x672>
 80029c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f040 82e0 	bne.w	8002f92 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	7b1b      	ldrb	r3, [r3, #12]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	731a      	strb	r2, [r3, #12]
 80029ec:	e2d1      	b.n	8002f92 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029f4:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80029fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d032      	beq.n	8002a6e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	4413      	add	r3, r2
 8002a22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a2e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a3c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a40:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f004 f959 	bl	8006cfa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002a54:	4013      	ands	r3, r2
 8002a56:	817b      	strh	r3, [r7, #10]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	897a      	ldrh	r2, [r7, #10]
 8002a5e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a62:	b292      	uxth	r2, r2
 8002a64:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f006 f818 	bl	8008a9c <HAL_PCD_SetupStageCallback>
 8002a6c:	e291      	b.n	8002f92 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a6e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f280 828d 	bge.w	8002f92 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002a84:	4013      	ands	r3, r2
 8002a86:	81fb      	strh	r3, [r7, #14]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	89fa      	ldrh	r2, [r7, #14]
 8002a8e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a92:	b292      	uxth	r2, r2
 8002a94:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002aba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002abc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d019      	beq.n	8002afa <PCD_EP_ISR_Handler+0x1da>
 8002ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d015      	beq.n	8002afa <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ad4:	6959      	ldr	r1, [r3, #20]
 8002ad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ad8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002adc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f004 f90b 	bl	8006cfa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	441a      	add	r2, r3
 8002aee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002af0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002af2:	2100      	movs	r1, #0
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f005 ffe3 	bl	8008ac0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002b02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f040 8242 	bne.w	8002f92 <PCD_EP_ISR_Handler+0x672>
 8002b0e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b10:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002b14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b18:	f000 823b 	beq.w	8002f92 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b2c:	81bb      	strh	r3, [r7, #12]
 8002b2e:	89bb      	ldrh	r3, [r7, #12]
 8002b30:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002b34:	81bb      	strh	r3, [r7, #12]
 8002b36:	89bb      	ldrh	r3, [r7, #12]
 8002b38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002b3c:	81bb      	strh	r3, [r7, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	89bb      	ldrh	r3, [r7, #12]
 8002b44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	8013      	strh	r3, [r2, #0]
 8002b58:	e21b      	b.n	8002f92 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b6c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f280 80f1 	bge.w	8002d58 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002ba0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ba4:	b292      	uxth	r2, r2
 8002ba6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002ba8:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	4413      	add	r3, r2
 8002bbc:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bc0:	7b1b      	ldrb	r3, [r3, #12]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d123      	bne.n	8002c0e <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	4413      	add	r3, r2
 8002be0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8002bee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 808b 	beq.w	8002d0e <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bfe:	6959      	ldr	r1, [r3, #20]
 8002c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c02:	88da      	ldrh	r2, [r3, #6]
 8002c04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002c08:	f004 f877 	bl	8006cfa <USB_ReadPMA>
 8002c0c:	e07f      	b.n	8002d0e <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c10:	78db      	ldrb	r3, [r3, #3]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d109      	bne.n	8002c2a <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002c16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002c18:	461a      	mov	r2, r3
 8002c1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f9c6 	bl	8002fae <HAL_PCD_EP_DB_Receive>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002c28:	e071      	b.n	8002d0e <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c44:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	441a      	add	r2, r3
 8002c54:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002c56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c62:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d022      	beq.n	8002cca <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	461a      	mov	r2, r3
 8002c90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4413      	add	r3, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ca8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8002cac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d02c      	beq.n	8002d0e <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cba:	6959      	ldr	r1, [r3, #20]
 8002cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cbe:	891a      	ldrh	r2, [r3, #8]
 8002cc0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002cc4:	f004 f819 	bl	8006cfa <USB_ReadPMA>
 8002cc8:	e021      	b.n	8002d0e <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8002cf2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d00:	6959      	ldr	r1, [r3, #20]
 8002d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d04:	895a      	ldrh	r2, [r3, #10]
 8002d06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002d0a:	f003 fff6 	bl	8006cfa <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d10:	69da      	ldr	r2, [r3, #28]
 8002d12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002d16:	441a      	add	r2, r3
 8002d18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d1a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002d1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d1e:	695a      	ldr	r2, [r3, #20]
 8002d20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002d24:	441a      	add	r2, r3
 8002d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d28:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <PCD_EP_ISR_Handler+0x41e>
 8002d32:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d206      	bcs.n	8002d4c <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	4619      	mov	r1, r3
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f005 febb 	bl	8008ac0 <HAL_PCD_DataOutStageCallback>
 8002d4a:	e005      	b.n	8002d58 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d52:	4618      	mov	r0, r3
 8002d54:	f003 f8ab 	bl	8005eae <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002d58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8117 	beq.w	8002f92 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8002d64:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	3310      	adds	r3, #16
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d92:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	441a      	add	r2, r3
 8002da2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002db0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002db2:	78db      	ldrb	r3, [r3, #3]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	f040 80a1 	bne.w	8002efc <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8002dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc2:	7b1b      	ldrb	r3, [r3, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8092 	beq.w	8002eee <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d046      	beq.n	8002e62 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dd6:	785b      	ldrb	r3, [r3, #1]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d126      	bne.n	8002e2a <PCD_EP_ISR_Handler+0x50a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	4413      	add	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	00da      	lsls	r2, r3, #3
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	801a      	strh	r2, [r3, #0]
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	801a      	strh	r2, [r3, #0]
 8002e28:	e061      	b.n	8002eee <PCD_EP_ISR_Handler+0x5ce>
 8002e2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e2c:	785b      	ldrb	r3, [r3, #1]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d15d      	bne.n	8002eee <PCD_EP_ISR_Handler+0x5ce>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	61fb      	str	r3, [r7, #28]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	4413      	add	r3, r2
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	00da      	lsls	r2, r3, #3
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	4413      	add	r3, r2
 8002e54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	801a      	strh	r2, [r3, #0]
 8002e60:	e045      	b.n	8002eee <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e6a:	785b      	ldrb	r3, [r3, #1]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d126      	bne.n	8002ebe <PCD_EP_ISR_Handler+0x59e>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	4413      	add	r3, r2
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	00da      	lsls	r2, r3, #3
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	4413      	add	r3, r2
 8002e92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002e96:	623b      	str	r3, [r7, #32]
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	801a      	strh	r2, [r3, #0]
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	801a      	strh	r2, [r3, #0]
 8002ebc:	e017      	b.n	8002eee <PCD_EP_ISR_Handler+0x5ce>
 8002ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ec0:	785b      	ldrb	r3, [r3, #1]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d113      	bne.n	8002eee <PCD_EP_ISR_Handler+0x5ce>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed4:	4413      	add	r3, r2
 8002ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	00da      	lsls	r2, r3, #3
 8002ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eea:	2200      	movs	r2, #0
 8002eec:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f005 fdfe 	bl	8008af6 <HAL_PCD_DataInStageCallback>
 8002efa:	e04a      	b.n	8002f92 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002efc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d13f      	bne.n	8002f86 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f2a:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8002f2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f2e:	699a      	ldr	r2, [r3, #24]
 8002f30:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d906      	bls.n	8002f44 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8002f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002f3c:	1ad2      	subs	r2, r2, r3
 8002f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f40:	619a      	str	r2, [r3, #24]
 8002f42:	e002      	b.n	8002f4a <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f46:	2200      	movs	r2, #0
 8002f48:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	4619      	mov	r1, r3
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f005 fdcc 	bl	8008af6 <HAL_PCD_DataInStageCallback>
 8002f5e:	e018      	b.n	8002f92 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002f60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002f66:	441a      	add	r2, r3
 8002f68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f6a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002f6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002f72:	441a      	add	r2, r3
 8002f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f76:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f002 ff95 	bl	8005eae <USB_EPStartXfer>
 8002f84:	e005      	b.n	8002f92 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002f86:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002f88:	461a      	mov	r2, r3
 8002f8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f917 	bl	80031c0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	b21b      	sxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f6ff acc3 	blt.w	800292a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3748      	adds	r7, #72	@ 0x48
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b088      	sub	sp, #32
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d07c      	beq.n	80030c0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4413      	add	r3, r2
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	8b7b      	ldrh	r3, [r7, #26]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d306      	bcc.n	8003004 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	8b7b      	ldrh	r3, [r7, #26]
 8002ffc:	1ad2      	subs	r2, r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	619a      	str	r2, [r3, #24]
 8003002:	e002      	b.n	800300a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2200      	movs	r2, #0
 8003008:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d123      	bne.n	800305a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	b29b      	uxth	r3, r3
 8003024:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003028:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800302c:	833b      	strh	r3, [r7, #24]
 800302e:	8b3b      	ldrh	r3, [r7, #24]
 8003030:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003034:	833b      	strh	r3, [r7, #24]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	441a      	add	r2, r3
 8003044:	8b3b      	ldrh	r3, [r7, #24]
 8003046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800304a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800304e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003056:	b29b      	uxth	r3, r3
 8003058:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01f      	beq.n	80030a4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	b29b      	uxth	r3, r3
 8003076:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800307a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800307e:	82fb      	strh	r3, [r7, #22]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	461a      	mov	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	441a      	add	r2, r3
 800308e:	8afb      	ldrh	r3, [r7, #22]
 8003090:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003094:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800309c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80030a4:	8b7b      	ldrh	r3, [r7, #26]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 8085 	beq.w	80031b6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	6959      	ldr	r1, [r3, #20]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	891a      	ldrh	r2, [r3, #8]
 80030b8:	8b7b      	ldrh	r3, [r7, #26]
 80030ba:	f003 fe1e 	bl	8006cfa <USB_ReadPMA>
 80030be:	e07a      	b.n	80031b6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	4413      	add	r3, r2
 80030da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030e4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	8b7b      	ldrh	r3, [r7, #26]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d306      	bcc.n	80030fe <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	8b7b      	ldrh	r3, [r7, #26]
 80030f6:	1ad2      	subs	r2, r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	619a      	str	r2, [r3, #24]
 80030fc:	e002      	b.n	8003104 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2200      	movs	r2, #0
 8003102:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d123      	bne.n	8003154 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	b29b      	uxth	r3, r3
 800311e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003126:	83fb      	strh	r3, [r7, #30]
 8003128:	8bfb      	ldrh	r3, [r7, #30]
 800312a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800312e:	83fb      	strh	r3, [r7, #30]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	441a      	add	r2, r3
 800313e:	8bfb      	ldrh	r3, [r7, #30]
 8003140:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003144:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003148:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800314c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003150:	b29b      	uxth	r3, r3
 8003152:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d11f      	bne.n	800319e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003178:	83bb      	strh	r3, [r7, #28]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	441a      	add	r2, r3
 8003188:	8bbb      	ldrh	r3, [r7, #28]
 800318a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800318e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003196:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800319a:	b29b      	uxth	r3, r3
 800319c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800319e:	8b7b      	ldrh	r3, [r7, #26]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d008      	beq.n	80031b6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	6959      	ldr	r1, [r3, #20]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	895a      	ldrh	r2, [r3, #10]
 80031b0:	8b7b      	ldrh	r3, [r7, #26]
 80031b2:	f003 fda2 	bl	8006cfa <USB_ReadPMA>
    }
  }

  return count;
 80031b6:	8b7b      	ldrh	r3, [r7, #26]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b0a6      	sub	sp, #152	@ 0x98
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	4613      	mov	r3, r2
 80031cc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 81f7 	beq.w	80035c8 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	4413      	add	r3, r2
 80031f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031fe:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800320a:	429a      	cmp	r2, r3
 800320c:	d907      	bls.n	800321e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003216:	1ad2      	subs	r2, r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	619a      	str	r2, [r3, #24]
 800321c:	e002      	b.n	8003224 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2200      	movs	r2, #0
 8003222:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	2b00      	cmp	r3, #0
 800322a:	f040 80e1 	bne.w	80033f0 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	785b      	ldrb	r3, [r3, #1]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d126      	bne.n	8003284 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	633b      	str	r3, [r7, #48]	@ 0x30
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003244:	b29b      	uxth	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324a:	4413      	add	r3, r2
 800324c:	633b      	str	r3, [r7, #48]	@ 0x30
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	00da      	lsls	r2, r3, #3
 8003254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003256:	4413      	add	r3, r2
 8003258:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800325c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800325e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003268:	b29a      	uxth	r2, r3
 800326a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326c:	801a      	strh	r2, [r3, #0]
 800326e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800327c:	b29a      	uxth	r2, r3
 800327e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003280:	801a      	strh	r2, [r3, #0]
 8003282:	e01a      	b.n	80032ba <HAL_PCD_EP_DB_Transmit+0xfa>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	785b      	ldrb	r3, [r3, #1]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d116      	bne.n	80032ba <HAL_PCD_EP_DB_Transmit+0xfa>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800329a:	b29b      	uxth	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a0:	4413      	add	r3, r2
 80032a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	00da      	lsls	r2, r3, #3
 80032aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ac:	4413      	add	r3, r2
 80032ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80032b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80032b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b6:	2200      	movs	r2, #0
 80032b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	785b      	ldrb	r3, [r3, #1]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d126      	bne.n	8003316 <HAL_PCD_EP_DB_Transmit+0x156>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	623b      	str	r3, [r7, #32]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	4413      	add	r3, r2
 80032de:	623b      	str	r3, [r7, #32]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	00da      	lsls	r2, r3, #3
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	4413      	add	r3, r2
 80032ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	801a      	strh	r2, [r3, #0]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	b29b      	uxth	r3, r3
 8003306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800330a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800330e:	b29a      	uxth	r2, r3
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	801a      	strh	r2, [r3, #0]
 8003314:	e017      	b.n	8003346 <HAL_PCD_EP_DB_Transmit+0x186>
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	785b      	ldrb	r3, [r3, #1]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d113      	bne.n	8003346 <HAL_PCD_EP_DB_Transmit+0x186>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003326:	b29b      	uxth	r3, r3
 8003328:	461a      	mov	r2, r3
 800332a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332c:	4413      	add	r3, r2
 800332e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	00da      	lsls	r2, r3, #3
 8003336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003338:	4413      	add	r3, r2
 800333a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800333e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003342:	2200      	movs	r2, #0
 8003344:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	78db      	ldrb	r3, [r3, #3]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d123      	bne.n	8003396 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	b29b      	uxth	r3, r3
 8003360:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003364:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003368:	837b      	strh	r3, [r7, #26]
 800336a:	8b7b      	ldrh	r3, [r7, #26]
 800336c:	f083 0320 	eor.w	r3, r3, #32
 8003370:	837b      	strh	r3, [r7, #26]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	441a      	add	r2, r3
 8003380:	8b7b      	ldrh	r3, [r7, #26]
 8003382:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003386:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800338a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800338e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003392:	b29b      	uxth	r3, r3
 8003394:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	4619      	mov	r1, r3
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f005 fbaa 	bl	8008af6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01f      	beq.n	80033ec <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033c6:	833b      	strh	r3, [r7, #24]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	441a      	add	r2, r3
 80033d6:	8b3b      	ldrh	r3, [r7, #24]
 80033d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	e31f      	b.n	8003a30 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033f0:	88fb      	ldrh	r3, [r7, #6]
 80033f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d021      	beq.n	800343e <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	b29b      	uxth	r3, r3
 800340c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003414:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	441a      	add	r2, r3
 8003426:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800342a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800342e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003432:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800343a:	b29b      	uxth	r3, r3
 800343c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003444:	2b01      	cmp	r3, #1
 8003446:	f040 82ca 	bne.w	80039de <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003452:	441a      	add	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	69da      	ldr	r2, [r3, #28]
 800345c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003460:	441a      	add	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	6a1a      	ldr	r2, [r3, #32]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	429a      	cmp	r2, r3
 8003470:	d309      	bcc.n	8003486 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	6a1a      	ldr	r2, [r3, #32]
 800347c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800347e:	1ad2      	subs	r2, r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	621a      	str	r2, [r3, #32]
 8003484:	e015      	b.n	80034b2 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d107      	bne.n	800349e <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800348e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003492:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800349c:	e009      	b.n	80034b2 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2200      	movs	r2, #0
 80034b0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	785b      	ldrb	r3, [r3, #1]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d15f      	bne.n	800357a <HAL_PCD_EP_DB_Transmit+0x3ba>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	643b      	str	r3, [r7, #64]	@ 0x40
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ce:	4413      	add	r3, r2
 80034d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	00da      	lsls	r2, r3, #3
 80034d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034da:	4413      	add	r3, r2
 80034dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80034e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034f0:	801a      	strh	r2, [r3, #0]
 80034f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <HAL_PCD_EP_DB_Transmit+0x34e>
 80034f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003506:	b29a      	uxth	r2, r3
 8003508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800350a:	801a      	strh	r2, [r3, #0]
 800350c:	e051      	b.n	80035b2 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800350e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003510:	2b3e      	cmp	r3, #62	@ 0x3e
 8003512:	d816      	bhi.n	8003542 <HAL_PCD_EP_DB_Transmit+0x382>
 8003514:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003516:	085b      	lsrs	r3, r3, #1
 8003518:	653b      	str	r3, [r7, #80]	@ 0x50
 800351a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <HAL_PCD_EP_DB_Transmit+0x36a>
 8003524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003526:	3301      	adds	r3, #1
 8003528:	653b      	str	r3, [r7, #80]	@ 0x50
 800352a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b29a      	uxth	r2, r3
 8003530:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003532:	b29b      	uxth	r3, r3
 8003534:	029b      	lsls	r3, r3, #10
 8003536:	b29b      	uxth	r3, r3
 8003538:	4313      	orrs	r3, r2
 800353a:	b29a      	uxth	r2, r3
 800353c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800353e:	801a      	strh	r2, [r3, #0]
 8003540:	e037      	b.n	80035b2 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003542:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	653b      	str	r3, [r7, #80]	@ 0x50
 8003548:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	2b00      	cmp	r3, #0
 8003550:	d102      	bne.n	8003558 <HAL_PCD_EP_DB_Transmit+0x398>
 8003552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003554:	3b01      	subs	r3, #1
 8003556:	653b      	str	r3, [r7, #80]	@ 0x50
 8003558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	b29a      	uxth	r2, r3
 800355e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003560:	b29b      	uxth	r3, r3
 8003562:	029b      	lsls	r3, r3, #10
 8003564:	b29b      	uxth	r3, r3
 8003566:	4313      	orrs	r3, r2
 8003568:	b29b      	uxth	r3, r3
 800356a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800356e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003572:	b29a      	uxth	r2, r3
 8003574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003576:	801a      	strh	r2, [r3, #0]
 8003578:	e01b      	b.n	80035b2 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	785b      	ldrb	r3, [r3, #1]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d117      	bne.n	80035b2 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003590:	b29b      	uxth	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003596:	4413      	add	r3, r2
 8003598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	00da      	lsls	r2, r3, #3
 80035a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035a2:	4413      	add	r3, r2
 80035a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80035a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035b0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	6959      	ldr	r1, [r3, #20]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	891a      	ldrh	r2, [r3, #8]
 80035be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	f003 fb58 	bl	8006c76 <USB_WritePMA>
 80035c6:	e20a      	b.n	80039de <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	4413      	add	r3, r2
 80035e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ec:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	699a      	ldr	r2, [r3, #24]
 80035f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d307      	bcc.n	800360c <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	699a      	ldr	r2, [r3, #24]
 8003600:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003604:	1ad2      	subs	r2, r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	619a      	str	r2, [r3, #24]
 800360a:	e002      	b.n	8003612 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2200      	movs	r2, #0
 8003610:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 80f6 	bne.w	8003808 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	785b      	ldrb	r3, [r3, #1]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d126      	bne.n	8003672 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	677b      	str	r3, [r7, #116]	@ 0x74
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003632:	b29b      	uxth	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003638:	4413      	add	r3, r2
 800363a:	677b      	str	r3, [r7, #116]	@ 0x74
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	00da      	lsls	r2, r3, #3
 8003642:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003644:	4413      	add	r3, r2
 8003646:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800364a:	673b      	str	r3, [r7, #112]	@ 0x70
 800364c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	b29b      	uxth	r3, r3
 8003652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003656:	b29a      	uxth	r2, r3
 8003658:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800365a:	801a      	strh	r2, [r3, #0]
 800365c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	b29b      	uxth	r3, r3
 8003662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800366a:	b29a      	uxth	r2, r3
 800366c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e01a      	b.n	80036a8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	785b      	ldrb	r3, [r3, #1]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d116      	bne.n	80036a8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003688:	b29b      	uxth	r3, r3
 800368a:	461a      	mov	r2, r3
 800368c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800368e:	4413      	add	r3, r2
 8003690:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	00da      	lsls	r2, r3, #3
 8003698:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800369a:	4413      	add	r3, r2
 800369c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80036a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036a4:	2200      	movs	r2, #0
 80036a6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	785b      	ldrb	r3, [r3, #1]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d12f      	bne.n	8003718 <HAL_PCD_EP_DB_Transmit+0x558>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036d0:	4413      	add	r3, r2
 80036d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	00da      	lsls	r2, r3, #3
 80036dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036e0:	4413      	add	r3, r2
 80036e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80036e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036fc:	801a      	strh	r2, [r3, #0]
 80036fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	b29b      	uxth	r3, r3
 8003706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800370a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800370e:	b29a      	uxth	r2, r3
 8003710:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003714:	801a      	strh	r2, [r3, #0]
 8003716:	e01c      	b.n	8003752 <HAL_PCD_EP_DB_Transmit+0x592>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	785b      	ldrb	r3, [r3, #1]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d118      	bne.n	8003752 <HAL_PCD_EP_DB_Transmit+0x592>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003728:	b29b      	uxth	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003730:	4413      	add	r3, r2
 8003732:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	00da      	lsls	r2, r3, #3
 800373c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003740:	4413      	add	r3, r2
 8003742:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003746:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800374a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800374e:	2200      	movs	r2, #0
 8003750:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	78db      	ldrb	r3, [r3, #3]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d127      	bne.n	80037aa <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	b29b      	uxth	r3, r3
 800376c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003770:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003774:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003778:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800377c:	f083 0320 	eor.w	r3, r3, #32
 8003780:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	441a      	add	r2, r3
 8003792:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003796:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800379a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800379e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	4619      	mov	r1, r3
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f005 f9a0 	bl	8008af6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d121      	bne.n	8003804 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037da:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	441a      	add	r2, r3
 80037ec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80037f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003800:	b29b      	uxth	r3, r3
 8003802:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	e113      	b.n	8003a30 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003808:	88fb      	ldrh	r3, [r7, #6]
 800380a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d121      	bne.n	8003856 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	b29b      	uxth	r3, r3
 8003824:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003828:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800382c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	441a      	add	r2, r3
 800383e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003842:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003846:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800384a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800384e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003852:	b29b      	uxth	r3, r3
 8003854:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800385c:	2b01      	cmp	r3, #1
 800385e:	f040 80be 	bne.w	80039de <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	695a      	ldr	r2, [r3, #20]
 8003866:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800386a:	441a      	add	r2, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003878:	441a      	add	r2, r3
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	6a1a      	ldr	r2, [r3, #32]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	429a      	cmp	r2, r3
 8003888:	d309      	bcc.n	800389e <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	6a1a      	ldr	r2, [r3, #32]
 8003894:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003896:	1ad2      	subs	r2, r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	621a      	str	r2, [r3, #32]
 800389c:	e015      	b.n	80038ca <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d107      	bne.n	80038b6 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80038a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80038aa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80038b4:	e009      	b.n	80038ca <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2200      	movs	r2, #0
 80038c0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	785b      	ldrb	r3, [r3, #1]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d15f      	bne.n	8003998 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038ec:	4413      	add	r3, r2
 80038ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	00da      	lsls	r2, r3, #3
 80038f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038f8:	4413      	add	r3, r2
 80038fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8003900:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
 8003906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800390a:	b29a      	uxth	r2, r3
 800390c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800390e:	801a      	strh	r2, [r3, #0]
 8003910:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10a      	bne.n	800392c <HAL_PCD_EP_DB_Transmit+0x76c>
 8003916:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003924:	b29a      	uxth	r2, r3
 8003926:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003928:	801a      	strh	r2, [r3, #0]
 800392a:	e04e      	b.n	80039ca <HAL_PCD_EP_DB_Transmit+0x80a>
 800392c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800392e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003930:	d816      	bhi.n	8003960 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003932:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003934:	085b      	lsrs	r3, r3, #1
 8003936:	663b      	str	r3, [r7, #96]	@ 0x60
 8003938:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_PCD_EP_DB_Transmit+0x788>
 8003942:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003944:	3301      	adds	r3, #1
 8003946:	663b      	str	r3, [r7, #96]	@ 0x60
 8003948:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	b29a      	uxth	r2, r3
 800394e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003950:	b29b      	uxth	r3, r3
 8003952:	029b      	lsls	r3, r3, #10
 8003954:	b29b      	uxth	r3, r3
 8003956:	4313      	orrs	r3, r2
 8003958:	b29a      	uxth	r2, r3
 800395a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800395c:	801a      	strh	r2, [r3, #0]
 800395e:	e034      	b.n	80039ca <HAL_PCD_EP_DB_Transmit+0x80a>
 8003960:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	663b      	str	r3, [r7, #96]	@ 0x60
 8003966:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8003970:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003972:	3b01      	subs	r3, #1
 8003974:	663b      	str	r3, [r7, #96]	@ 0x60
 8003976:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	b29a      	uxth	r2, r3
 800397c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800397e:	b29b      	uxth	r3, r3
 8003980:	029b      	lsls	r3, r3, #10
 8003982:	b29b      	uxth	r3, r3
 8003984:	4313      	orrs	r3, r2
 8003986:	b29b      	uxth	r3, r3
 8003988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800398c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003990:	b29a      	uxth	r2, r3
 8003992:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003994:	801a      	strh	r2, [r3, #0]
 8003996:	e018      	b.n	80039ca <HAL_PCD_EP_DB_Transmit+0x80a>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	785b      	ldrb	r3, [r3, #1]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d114      	bne.n	80039ca <HAL_PCD_EP_DB_Transmit+0x80a>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039ae:	4413      	add	r3, r2
 80039b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	00da      	lsls	r2, r3, #3
 80039b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039ba:	4413      	add	r3, r2
 80039bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80039c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039c8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	6959      	ldr	r1, [r3, #20]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	895a      	ldrh	r2, [r3, #10]
 80039d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039d8:	b29b      	uxth	r3, r3
 80039da:	f003 f94c 	bl	8006c76 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039f8:	82fb      	strh	r3, [r7, #22]
 80039fa:	8afb      	ldrh	r3, [r7, #22]
 80039fc:	f083 0310 	eor.w	r3, r3, #16
 8003a00:	82fb      	strh	r3, [r7, #22]
 8003a02:	8afb      	ldrh	r3, [r7, #22]
 8003a04:	f083 0320 	eor.w	r3, r3, #32
 8003a08:	82fb      	strh	r3, [r7, #22]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	441a      	add	r2, r3
 8003a18:	8afb      	ldrh	r3, [r7, #22]
 8003a1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3798      	adds	r7, #152	@ 0x98
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	607b      	str	r3, [r7, #4]
 8003a42:	460b      	mov	r3, r1
 8003a44:	817b      	strh	r3, [r7, #10]
 8003a46:	4613      	mov	r3, r2
 8003a48:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003a4a:	897b      	ldrh	r3, [r7, #10]
 8003a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00b      	beq.n	8003a6e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a56:	897b      	ldrh	r3, [r7, #10]
 8003a58:	f003 0207 	and.w	r2, r3, #7
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	3310      	adds	r3, #16
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4413      	add	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	e009      	b.n	8003a82 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a6e:	897a      	ldrh	r2, [r7, #10]
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4413      	add	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003a82:	893b      	ldrh	r3, [r7, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d107      	bne.n	8003a98 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	80da      	strh	r2, [r3, #6]
 8003a96:	e00b      	b.n	8003ab0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	0c1b      	lsrs	r3, r3, #16
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f043 0302 	orr.w	r3, r3, #2
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d141      	bne.n	8003ba6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b22:	4b4b      	ldr	r3, [pc, #300]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b2e:	d131      	bne.n	8003b94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b30:	4b47      	ldr	r3, [pc, #284]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b36:	4a46      	ldr	r2, [pc, #280]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b40:	4b43      	ldr	r3, [pc, #268]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b48:	4a41      	ldr	r2, [pc, #260]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b50:	4b40      	ldr	r3, [pc, #256]	@ (8003c54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2232      	movs	r2, #50	@ 0x32
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b60:	0c9b      	lsrs	r3, r3, #18
 8003b62:	3301      	adds	r3, #1
 8003b64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b66:	e002      	b.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b6e:	4b38      	ldr	r3, [pc, #224]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b7a:	d102      	bne.n	8003b82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f2      	bne.n	8003b68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b82:	4b33      	ldr	r3, [pc, #204]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b8e:	d158      	bne.n	8003c42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e057      	b.n	8003c44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b94:	4b2e      	ldr	r3, [pc, #184]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ba0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ba4:	e04d      	b.n	8003c42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bac:	d141      	bne.n	8003c32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bae:	4b28      	ldr	r3, [pc, #160]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bba:	d131      	bne.n	8003c20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bbc:	4b24      	ldr	r3, [pc, #144]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bc2:	4a23      	ldr	r2, [pc, #140]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bcc:	4b20      	ldr	r3, [pc, #128]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bd4:	4a1e      	ldr	r2, [pc, #120]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2232      	movs	r2, #50	@ 0x32
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	4a1c      	ldr	r2, [pc, #112]	@ (8003c58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003be8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bec:	0c9b      	lsrs	r3, r3, #18
 8003bee:	3301      	adds	r3, #1
 8003bf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bf2:	e002      	b.n	8003bfa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bfa:	4b15      	ldr	r3, [pc, #84]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c06:	d102      	bne.n	8003c0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f2      	bne.n	8003bf4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c0e:	4b10      	ldr	r3, [pc, #64]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c1a:	d112      	bne.n	8003c42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e011      	b.n	8003c44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c20:	4b0b      	ldr	r3, [pc, #44]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c26:	4a0a      	ldr	r2, [pc, #40]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003c30:	e007      	b.n	8003c42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c32:	4b07      	ldr	r3, [pc, #28]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c3a:	4a05      	ldr	r2, [pc, #20]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c40:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	40007000 	.word	0x40007000
 8003c54:	2000000c 	.word	0x2000000c
 8003c58:	431bde83 	.word	0x431bde83

08003c5c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003c60:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	4a04      	ldr	r2, [pc, #16]	@ (8003c78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c6a:	6093      	str	r3, [r2, #8]
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40007000 	.word	0x40007000

08003c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e2fe      	b.n	800428c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d075      	beq.n	8003d86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c9a:	4b97      	ldr	r3, [pc, #604]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ca4:	4b94      	ldr	r3, [pc, #592]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	2b0c      	cmp	r3, #12
 8003cb2:	d102      	bne.n	8003cba <HAL_RCC_OscConfig+0x3e>
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d002      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x44>
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d10b      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc0:	4b8d      	ldr	r3, [pc, #564]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d05b      	beq.n	8003d84 <HAL_RCC_OscConfig+0x108>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d157      	bne.n	8003d84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e2d9      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce0:	d106      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x74>
 8003ce2:	4b85      	ldr	r3, [pc, #532]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a84      	ldr	r2, [pc, #528]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e01d      	b.n	8003d2c <HAL_RCC_OscConfig+0xb0>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x98>
 8003cfa:	4b7f      	ldr	r3, [pc, #508]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a7e      	ldr	r2, [pc, #504]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	4b7c      	ldr	r3, [pc, #496]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a7b      	ldr	r2, [pc, #492]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	e00b      	b.n	8003d2c <HAL_RCC_OscConfig+0xb0>
 8003d14:	4b78      	ldr	r3, [pc, #480]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a77      	ldr	r2, [pc, #476]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	4b75      	ldr	r3, [pc, #468]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a74      	ldr	r2, [pc, #464]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d013      	beq.n	8003d5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fd f972 	bl	800101c <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7fd f96e 	bl	800101c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	@ 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e29e      	b.n	800428c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d4e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0xc0>
 8003d5a:	e014      	b.n	8003d86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fd f95e 	bl	800101c <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fd f95a 	bl	800101c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	@ 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e28a      	b.n	800428c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d76:	4b60      	ldr	r3, [pc, #384]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0xe8>
 8003d82:	e000      	b.n	8003d86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d075      	beq.n	8003e7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d92:	4b59      	ldr	r3, [pc, #356]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 030c 	and.w	r3, r3, #12
 8003d9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d9c:	4b56      	ldr	r3, [pc, #344]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	2b0c      	cmp	r3, #12
 8003daa:	d102      	bne.n	8003db2 <HAL_RCC_OscConfig+0x136>
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d002      	beq.n	8003db8 <HAL_RCC_OscConfig+0x13c>
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d11f      	bne.n	8003df8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003db8:	4b4f      	ldr	r3, [pc, #316]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x154>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e25d      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd0:	4b49      	ldr	r3, [pc, #292]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	061b      	lsls	r3, r3, #24
 8003dde:	4946      	ldr	r1, [pc, #280]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003de4:	4b45      	ldr	r3, [pc, #276]	@ (8003efc <HAL_RCC_OscConfig+0x280>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fd f8cb 	bl	8000f84 <HAL_InitTick>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d043      	beq.n	8003e7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e249      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d023      	beq.n	8003e48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e00:	4b3d      	ldr	r3, [pc, #244]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a3c      	ldr	r2, [pc, #240]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fd f906 	bl	800101c <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e14:	f7fd f902 	bl	800101c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e232      	b.n	800428c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e26:	4b34      	ldr	r3, [pc, #208]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e32:	4b31      	ldr	r3, [pc, #196]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	061b      	lsls	r3, r3, #24
 8003e40:	492d      	ldr	r1, [pc, #180]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	604b      	str	r3, [r1, #4]
 8003e46:	e01a      	b.n	8003e7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e48:	4b2b      	ldr	r3, [pc, #172]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e54:	f7fd f8e2 	bl	800101c <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e5c:	f7fd f8de 	bl	800101c <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e20e      	b.n	800428c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e6e:	4b22      	ldr	r3, [pc, #136]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x1e0>
 8003e7a:	e000      	b.n	8003e7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d041      	beq.n	8003f0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d01c      	beq.n	8003ecc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e92:	4b19      	ldr	r3, [pc, #100]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e98:	4a17      	ldr	r2, [pc, #92]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea2:	f7fd f8bb 	bl	800101c <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eaa:	f7fd f8b7 	bl	800101c <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e1e7      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0ef      	beq.n	8003eaa <HAL_RCC_OscConfig+0x22e>
 8003eca:	e020      	b.n	8003f0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ed2:	4a09      	ldr	r2, [pc, #36]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003edc:	f7fd f89e 	bl	800101c <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ee2:	e00d      	b.n	8003f00 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee4:	f7fd f89a 	bl	800101c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d906      	bls.n	8003f00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e1ca      	b.n	800428c <HAL_RCC_OscConfig+0x610>
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f00:	4b8c      	ldr	r3, [pc, #560]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1ea      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 80a6 	beq.w	8004068 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f20:	4b84      	ldr	r3, [pc, #528]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_RCC_OscConfig+0x2b4>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <HAL_RCC_OscConfig+0x2b6>
 8003f30:	2300      	movs	r3, #0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f36:	4b7f      	ldr	r3, [pc, #508]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f42:	4b7c      	ldr	r3, [pc, #496]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f52:	4b79      	ldr	r3, [pc, #484]	@ (8004138 <HAL_RCC_OscConfig+0x4bc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d118      	bne.n	8003f90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f5e:	4b76      	ldr	r3, [pc, #472]	@ (8004138 <HAL_RCC_OscConfig+0x4bc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a75      	ldr	r2, [pc, #468]	@ (8004138 <HAL_RCC_OscConfig+0x4bc>)
 8003f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f6a:	f7fd f857 	bl	800101c <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f72:	f7fd f853 	bl	800101c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e183      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f84:	4b6c      	ldr	r3, [pc, #432]	@ (8004138 <HAL_RCC_OscConfig+0x4bc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f0      	beq.n	8003f72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d108      	bne.n	8003faa <HAL_RCC_OscConfig+0x32e>
 8003f98:	4b66      	ldr	r3, [pc, #408]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f9e:	4a65      	ldr	r2, [pc, #404]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fa8:	e024      	b.n	8003ff4 <HAL_RCC_OscConfig+0x378>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	d110      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x358>
 8003fb2:	4b60      	ldr	r3, [pc, #384]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb8:	4a5e      	ldr	r2, [pc, #376]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003fba:	f043 0304 	orr.w	r3, r3, #4
 8003fbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fc2:	4b5c      	ldr	r3, [pc, #368]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc8:	4a5a      	ldr	r2, [pc, #360]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fd2:	e00f      	b.n	8003ff4 <HAL_RCC_OscConfig+0x378>
 8003fd4:	4b57      	ldr	r3, [pc, #348]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fda:	4a56      	ldr	r2, [pc, #344]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003fdc:	f023 0301 	bic.w	r3, r3, #1
 8003fe0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fe4:	4b53      	ldr	r3, [pc, #332]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fea:	4a52      	ldr	r2, [pc, #328]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003fec:	f023 0304 	bic.w	r3, r3, #4
 8003ff0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d016      	beq.n	800402a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffc:	f7fd f80e 	bl	800101c <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004002:	e00a      	b.n	800401a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004004:	f7fd f80a 	bl	800101c <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e138      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800401a:	4b46      	ldr	r3, [pc, #280]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0ed      	beq.n	8004004 <HAL_RCC_OscConfig+0x388>
 8004028:	e015      	b.n	8004056 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402a:	f7fc fff7 	bl	800101c <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004030:	e00a      	b.n	8004048 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004032:	f7fc fff3 	bl	800101c <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004040:	4293      	cmp	r3, r2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e121      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004048:	4b3a      	ldr	r3, [pc, #232]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1ed      	bne.n	8004032 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004056:	7ffb      	ldrb	r3, [r7, #31]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d105      	bne.n	8004068 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800405c:	4b35      	ldr	r3, [pc, #212]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004060:	4a34      	ldr	r2, [pc, #208]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8004062:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004066:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d03c      	beq.n	80040ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01c      	beq.n	80040b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800407c:	4b2d      	ldr	r3, [pc, #180]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 800407e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004082:	4a2c      	ldr	r2, [pc, #176]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408c:	f7fc ffc6 	bl	800101c <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004094:	f7fc ffc2 	bl	800101c <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e0f2      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040a6:	4b23      	ldr	r3, [pc, #140]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 80040a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0ef      	beq.n	8004094 <HAL_RCC_OscConfig+0x418>
 80040b4:	e01b      	b.n	80040ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 80040b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 80040be:	f023 0301 	bic.w	r3, r3, #1
 80040c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c6:	f7fc ffa9 	bl	800101c <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040ce:	f7fc ffa5 	bl	800101c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e0d5      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040e0:	4b14      	ldr	r3, [pc, #80]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 80040e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1ef      	bne.n	80040ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 80c9 	beq.w	800428a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 030c 	and.w	r3, r3, #12
 8004100:	2b0c      	cmp	r3, #12
 8004102:	f000 8083 	beq.w	800420c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d15e      	bne.n	80041cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800410e:	4b09      	ldr	r3, [pc, #36]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a08      	ldr	r2, [pc, #32]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8004114:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411a:	f7fc ff7f 	bl	800101c <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004120:	e00c      	b.n	800413c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004122:	f7fc ff7b 	bl	800101c <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d905      	bls.n	800413c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e0ab      	b.n	800428c <HAL_RCC_OscConfig+0x610>
 8004134:	40021000 	.word	0x40021000
 8004138:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800413c:	4b55      	ldr	r3, [pc, #340]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1ec      	bne.n	8004122 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004148:	4b52      	ldr	r3, [pc, #328]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	4b52      	ldr	r3, [pc, #328]	@ (8004298 <HAL_RCC_OscConfig+0x61c>)
 800414e:	4013      	ands	r3, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6a11      	ldr	r1, [r2, #32]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004158:	3a01      	subs	r2, #1
 800415a:	0112      	lsls	r2, r2, #4
 800415c:	4311      	orrs	r1, r2
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004162:	0212      	lsls	r2, r2, #8
 8004164:	4311      	orrs	r1, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800416a:	0852      	lsrs	r2, r2, #1
 800416c:	3a01      	subs	r2, #1
 800416e:	0552      	lsls	r2, r2, #21
 8004170:	4311      	orrs	r1, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004176:	0852      	lsrs	r2, r2, #1
 8004178:	3a01      	subs	r2, #1
 800417a:	0652      	lsls	r2, r2, #25
 800417c:	4311      	orrs	r1, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004182:	06d2      	lsls	r2, r2, #27
 8004184:	430a      	orrs	r2, r1
 8004186:	4943      	ldr	r1, [pc, #268]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 8004188:	4313      	orrs	r3, r2
 800418a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800418c:	4b41      	ldr	r3, [pc, #260]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a40      	ldr	r2, [pc, #256]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 8004192:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004196:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004198:	4b3e      	ldr	r3, [pc, #248]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4a3d      	ldr	r2, [pc, #244]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 800419e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fc ff3a 	bl	800101c <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ac:	f7fc ff36 	bl	800101c <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e066      	b.n	800428c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041be:	4b35      	ldr	r3, [pc, #212]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0x530>
 80041ca:	e05e      	b.n	800428a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041cc:	4b31      	ldr	r3, [pc, #196]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a30      	ldr	r2, [pc, #192]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 80041d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fc ff20 	bl	800101c <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e0:	f7fc ff1c 	bl	800101c <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e04c      	b.n	800428c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041f2:	4b28      	ldr	r3, [pc, #160]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80041fe:	4b25      	ldr	r3, [pc, #148]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	4924      	ldr	r1, [pc, #144]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 8004204:	4b25      	ldr	r3, [pc, #148]	@ (800429c <HAL_RCC_OscConfig+0x620>)
 8004206:	4013      	ands	r3, r2
 8004208:	60cb      	str	r3, [r1, #12]
 800420a:	e03e      	b.n	800428a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e039      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004218:	4b1e      	ldr	r3, [pc, #120]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f003 0203 	and.w	r2, r3, #3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	429a      	cmp	r2, r3
 800422a:	d12c      	bne.n	8004286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	3b01      	subs	r3, #1
 8004238:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423a:	429a      	cmp	r2, r3
 800423c:	d123      	bne.n	8004286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004248:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800424a:	429a      	cmp	r2, r3
 800424c:	d11b      	bne.n	8004286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004258:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800425a:	429a      	cmp	r2, r3
 800425c:	d113      	bne.n	8004286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	3b01      	subs	r3, #1
 800426c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800426e:	429a      	cmp	r2, r3
 8004270:	d109      	bne.n	8004286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	3b01      	subs	r3, #1
 8004280:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d001      	beq.n	800428a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3720      	adds	r7, #32
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000
 8004298:	019f800c 	.word	0x019f800c
 800429c:	feeefffc 	.word	0xfeeefffc

080042a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e11e      	b.n	80044f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042b8:	4b91      	ldr	r3, [pc, #580]	@ (8004500 <HAL_RCC_ClockConfig+0x260>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d910      	bls.n	80042e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c6:	4b8e      	ldr	r3, [pc, #568]	@ (8004500 <HAL_RCC_ClockConfig+0x260>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f023 020f 	bic.w	r2, r3, #15
 80042ce:	498c      	ldr	r1, [pc, #560]	@ (8004500 <HAL_RCC_ClockConfig+0x260>)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d6:	4b8a      	ldr	r3, [pc, #552]	@ (8004500 <HAL_RCC_ClockConfig+0x260>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d001      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e106      	b.n	80044f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d073      	beq.n	80043dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d129      	bne.n	8004350 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042fc:	4b81      	ldr	r3, [pc, #516]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0f4      	b.n	80044f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800430c:	f000 f972 	bl	80045f4 <RCC_GetSysClockFreqFromPLLSource>
 8004310:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4a7c      	ldr	r2, [pc, #496]	@ (8004508 <HAL_RCC_ClockConfig+0x268>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d93f      	bls.n	800439a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800431a:	4b7a      	ldr	r3, [pc, #488]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800432e:	2b00      	cmp	r3, #0
 8004330:	d033      	beq.n	800439a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004336:	2b00      	cmp	r3, #0
 8004338:	d12f      	bne.n	800439a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800433a:	4b72      	ldr	r3, [pc, #456]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004342:	4a70      	ldr	r2, [pc, #448]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 8004344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004348:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800434a:	2380      	movs	r3, #128	@ 0x80
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	e024      	b.n	800439a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b02      	cmp	r3, #2
 8004356:	d107      	bne.n	8004368 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004358:	4b6a      	ldr	r3, [pc, #424]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d109      	bne.n	8004378 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e0c6      	b.n	80044f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004368:	4b66      	ldr	r3, [pc, #408]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0be      	b.n	80044f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004378:	f000 f8ce 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 800437c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4a61      	ldr	r2, [pc, #388]	@ (8004508 <HAL_RCC_ClockConfig+0x268>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d909      	bls.n	800439a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004386:	4b5f      	ldr	r3, [pc, #380]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800438e:	4a5d      	ldr	r2, [pc, #372]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 8004390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004394:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004396:	2380      	movs	r3, #128	@ 0x80
 8004398:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800439a:	4b5a      	ldr	r3, [pc, #360]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f023 0203 	bic.w	r2, r3, #3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	4957      	ldr	r1, [pc, #348]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ac:	f7fc fe36 	bl	800101c <HAL_GetTick>
 80043b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b2:	e00a      	b.n	80043ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b4:	f7fc fe32 	bl	800101c <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e095      	b.n	80044f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ca:	4b4e      	ldr	r3, [pc, #312]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 020c 	and.w	r2, r3, #12
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	429a      	cmp	r2, r3
 80043da:	d1eb      	bne.n	80043b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d023      	beq.n	8004430 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043f4:	4b43      	ldr	r3, [pc, #268]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	4a42      	ldr	r2, [pc, #264]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 80043fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80043fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b00      	cmp	r3, #0
 800440a:	d007      	beq.n	800441c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800440c:	4b3d      	ldr	r3, [pc, #244]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004414:	4a3b      	ldr	r2, [pc, #236]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 8004416:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800441a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800441c:	4b39      	ldr	r3, [pc, #228]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4936      	ldr	r1, [pc, #216]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800442a:	4313      	orrs	r3, r2
 800442c:	608b      	str	r3, [r1, #8]
 800442e:	e008      	b.n	8004442 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2b80      	cmp	r3, #128	@ 0x80
 8004434:	d105      	bne.n	8004442 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004436:	4b33      	ldr	r3, [pc, #204]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	4a32      	ldr	r2, [pc, #200]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800443c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004440:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004442:	4b2f      	ldr	r3, [pc, #188]	@ (8004500 <HAL_RCC_ClockConfig+0x260>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d21d      	bcs.n	800448c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004450:	4b2b      	ldr	r3, [pc, #172]	@ (8004500 <HAL_RCC_ClockConfig+0x260>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f023 020f 	bic.w	r2, r3, #15
 8004458:	4929      	ldr	r1, [pc, #164]	@ (8004500 <HAL_RCC_ClockConfig+0x260>)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	4313      	orrs	r3, r2
 800445e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004460:	f7fc fddc 	bl	800101c <HAL_GetTick>
 8004464:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	e00a      	b.n	800447e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004468:	f7fc fdd8 	bl	800101c <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e03b      	b.n	80044f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b20      	ldr	r3, [pc, #128]	@ (8004500 <HAL_RCC_ClockConfig+0x260>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d1ed      	bne.n	8004468 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004498:	4b1a      	ldr	r3, [pc, #104]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4917      	ldr	r1, [pc, #92]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b6:	4b13      	ldr	r3, [pc, #76]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	490f      	ldr	r1, [pc, #60]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044ca:	f000 f825 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 80044ce:	4602      	mov	r2, r0
 80044d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	490c      	ldr	r1, [pc, #48]	@ (800450c <HAL_RCC_ClockConfig+0x26c>)
 80044dc:	5ccb      	ldrb	r3, [r1, r3]
 80044de:	f003 031f 	and.w	r3, r3, #31
 80044e2:	fa22 f303 	lsr.w	r3, r2, r3
 80044e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004510 <HAL_RCC_ClockConfig+0x270>)
 80044e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80044ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004514 <HAL_RCC_ClockConfig+0x274>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fc fd48 	bl	8000f84 <HAL_InitTick>
 80044f4:	4603      	mov	r3, r0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40022000 	.word	0x40022000
 8004504:	40021000 	.word	0x40021000
 8004508:	04c4b400 	.word	0x04c4b400
 800450c:	080090e4 	.word	0x080090e4
 8004510:	2000000c 	.word	0x2000000c
 8004514:	20000010 	.word	0x20000010

08004518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800451e:	4b2c      	ldr	r3, [pc, #176]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	2b04      	cmp	r3, #4
 8004528:	d102      	bne.n	8004530 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800452a:	4b2a      	ldr	r3, [pc, #168]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	e047      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004530:	4b27      	ldr	r3, [pc, #156]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 030c 	and.w	r3, r3, #12
 8004538:	2b08      	cmp	r3, #8
 800453a:	d102      	bne.n	8004542 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800453c:	4b26      	ldr	r3, [pc, #152]	@ (80045d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	e03e      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004542:	4b23      	ldr	r3, [pc, #140]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b0c      	cmp	r3, #12
 800454c:	d136      	bne.n	80045bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800454e:	4b20      	ldr	r3, [pc, #128]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004558:	4b1d      	ldr	r3, [pc, #116]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	3301      	adds	r3, #1
 8004564:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b03      	cmp	r3, #3
 800456a:	d10c      	bne.n	8004586 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800456c:	4a1a      	ldr	r2, [pc, #104]	@ (80045d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	fbb2 f3f3 	udiv	r3, r2, r3
 8004574:	4a16      	ldr	r2, [pc, #88]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004576:	68d2      	ldr	r2, [r2, #12]
 8004578:	0a12      	lsrs	r2, r2, #8
 800457a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800457e:	fb02 f303 	mul.w	r3, r2, r3
 8004582:	617b      	str	r3, [r7, #20]
      break;
 8004584:	e00c      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004586:	4a13      	ldr	r2, [pc, #76]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	fbb2 f3f3 	udiv	r3, r2, r3
 800458e:	4a10      	ldr	r2, [pc, #64]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004590:	68d2      	ldr	r2, [r2, #12]
 8004592:	0a12      	lsrs	r2, r2, #8
 8004594:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004598:	fb02 f303 	mul.w	r3, r2, r3
 800459c:	617b      	str	r3, [r7, #20]
      break;
 800459e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045a0:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	0e5b      	lsrs	r3, r3, #25
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	3301      	adds	r3, #1
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	e001      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80045c0:	693b      	ldr	r3, [r7, #16]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40021000 	.word	0x40021000
 80045d4:	00f42400 	.word	0x00f42400
 80045d8:	007a1200 	.word	0x007a1200

080045dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e0:	4b03      	ldr	r3, [pc, #12]	@ (80045f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045e2:	681b      	ldr	r3, [r3, #0]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	2000000c 	.word	0x2000000c

080045f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004604:	4b1b      	ldr	r3, [pc, #108]	@ (8004674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	091b      	lsrs	r3, r3, #4
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	3301      	adds	r3, #1
 8004610:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b03      	cmp	r3, #3
 8004616:	d10c      	bne.n	8004632 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004618:	4a17      	ldr	r2, [pc, #92]	@ (8004678 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004620:	4a14      	ldr	r2, [pc, #80]	@ (8004674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004622:	68d2      	ldr	r2, [r2, #12]
 8004624:	0a12      	lsrs	r2, r2, #8
 8004626:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800462a:	fb02 f303 	mul.w	r3, r2, r3
 800462e:	617b      	str	r3, [r7, #20]
    break;
 8004630:	e00c      	b.n	800464c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004632:	4a12      	ldr	r2, [pc, #72]	@ (800467c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	fbb2 f3f3 	udiv	r3, r2, r3
 800463a:	4a0e      	ldr	r2, [pc, #56]	@ (8004674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800463c:	68d2      	ldr	r2, [r2, #12]
 800463e:	0a12      	lsrs	r2, r2, #8
 8004640:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004644:	fb02 f303 	mul.w	r3, r2, r3
 8004648:	617b      	str	r3, [r7, #20]
    break;
 800464a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800464c:	4b09      	ldr	r3, [pc, #36]	@ (8004674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	0e5b      	lsrs	r3, r3, #25
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	3301      	adds	r3, #1
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004666:	687b      	ldr	r3, [r7, #4]
}
 8004668:	4618      	mov	r0, r3
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	40021000 	.word	0x40021000
 8004678:	007a1200 	.word	0x007a1200
 800467c:	00f42400 	.word	0x00f42400

08004680 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004688:	2300      	movs	r3, #0
 800468a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800468c:	2300      	movs	r3, #0
 800468e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8098 	beq.w	80047ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800469e:	2300      	movs	r3, #0
 80046a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a2:	4b43      	ldr	r3, [pc, #268]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10d      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ae:	4b40      	ldr	r3, [pc, #256]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b2:	4a3f      	ldr	r2, [pc, #252]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80046ba:	4b3d      	ldr	r3, [pc, #244]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c6:	2301      	movs	r3, #1
 80046c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046ca:	4b3a      	ldr	r3, [pc, #232]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a39      	ldr	r2, [pc, #228]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046d6:	f7fc fca1 	bl	800101c <HAL_GetTick>
 80046da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046dc:	e009      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046de:	f7fc fc9d 	bl	800101c <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d902      	bls.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	74fb      	strb	r3, [r7, #19]
        break;
 80046f0:	e005      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046f2:	4b30      	ldr	r3, [pc, #192]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0ef      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80046fe:	7cfb      	ldrb	r3, [r7, #19]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d159      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004704:	4b2a      	ldr	r3, [pc, #168]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800470e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d01e      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	429a      	cmp	r2, r3
 800471e:	d019      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004720:	4b23      	ldr	r3, [pc, #140]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004726:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800472a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800472c:	4b20      	ldr	r3, [pc, #128]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004732:	4a1f      	ldr	r2, [pc, #124]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800473c:	4b1c      	ldr	r3, [pc, #112]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004742:	4a1b      	ldr	r2, [pc, #108]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004744:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004748:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800474c:	4a18      	ldr	r2, [pc, #96]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d016      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475e:	f7fc fc5d 	bl	800101c <HAL_GetTick>
 8004762:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004764:	e00b      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004766:	f7fc fc59 	bl	800101c <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004774:	4293      	cmp	r3, r2
 8004776:	d902      	bls.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	74fb      	strb	r3, [r7, #19]
            break;
 800477c:	e006      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800477e:	4b0c      	ldr	r3, [pc, #48]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0ec      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800478c:	7cfb      	ldrb	r3, [r7, #19]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10b      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004792:	4b07      	ldr	r3, [pc, #28]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004798:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a0:	4903      	ldr	r1, [pc, #12]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047a8:	e008      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047aa:	7cfb      	ldrb	r3, [r7, #19]
 80047ac:	74bb      	strb	r3, [r7, #18]
 80047ae:	e005      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b8:	7cfb      	ldrb	r3, [r7, #19]
 80047ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047bc:	7c7b      	ldrb	r3, [r7, #17]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d105      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c2:	4ba7      	ldr	r3, [pc, #668]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c6:	4aa6      	ldr	r2, [pc, #664]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047da:	4ba1      	ldr	r3, [pc, #644]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e0:	f023 0203 	bic.w	r2, r3, #3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	499d      	ldr	r1, [pc, #628]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047fc:	4b98      	ldr	r3, [pc, #608]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004802:	f023 020c 	bic.w	r2, r3, #12
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	4995      	ldr	r1, [pc, #596]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800481e:	4b90      	ldr	r3, [pc, #576]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004824:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	498c      	ldr	r1, [pc, #560]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004840:	4b87      	ldr	r3, [pc, #540]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004846:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	4984      	ldr	r1, [pc, #528]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0310 	and.w	r3, r3, #16
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004862:	4b7f      	ldr	r3, [pc, #508]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004868:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	497b      	ldr	r1, [pc, #492]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004884:	4b76      	ldr	r3, [pc, #472]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	4973      	ldr	r1, [pc, #460]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048a6:	4b6e      	ldr	r3, [pc, #440]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	496a      	ldr	r1, [pc, #424]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048c8:	4b65      	ldr	r3, [pc, #404]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	4962      	ldr	r1, [pc, #392]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048ea:	4b5d      	ldr	r3, [pc, #372]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	4959      	ldr	r1, [pc, #356]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800490c:	4b54      	ldr	r3, [pc, #336]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800490e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004912:	f023 0203 	bic.w	r2, r3, #3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491a:	4951      	ldr	r1, [pc, #324]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800492e:	4b4c      	ldr	r3, [pc, #304]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004934:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493c:	4948      	ldr	r1, [pc, #288]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800494c:	2b00      	cmp	r3, #0
 800494e:	d015      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004950:	4b43      	ldr	r3, [pc, #268]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004956:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495e:	4940      	ldr	r1, [pc, #256]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800496e:	d105      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004970:	4b3b      	ldr	r3, [pc, #236]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4a3a      	ldr	r2, [pc, #232]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800497a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004984:	2b00      	cmp	r3, #0
 8004986:	d015      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004988:	4b35      	ldr	r3, [pc, #212]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004996:	4932      	ldr	r1, [pc, #200]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049a6:	d105      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049b2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d015      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049c0:	4b27      	ldr	r3, [pc, #156]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ce:	4924      	ldr	r1, [pc, #144]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049de:	d105      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d015      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049f8:	4b19      	ldr	r3, [pc, #100]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a06:	4916      	ldr	r1, [pc, #88]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a16:	d105      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a18:	4b11      	ldr	r3, [pc, #68]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4a10      	ldr	r2, [pc, #64]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d019      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a30:	4b0b      	ldr	r3, [pc, #44]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3e:	4908      	ldr	r1, [pc, #32]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a4e:	d109      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a50:	4b03      	ldr	r3, [pc, #12]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4a02      	ldr	r2, [pc, #8]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a5a:	60d3      	str	r3, [r2, #12]
 8004a5c:	e002      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004a5e:	bf00      	nop
 8004a60:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d015      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a70:	4b29      	ldr	r3, [pc, #164]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a76:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7e:	4926      	ldr	r1, [pc, #152]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a8e:	d105      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a90:	4b21      	ldr	r3, [pc, #132]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	4a20      	ldr	r2, [pc, #128]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a9a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d015      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aae:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ab6:	4918      	ldr	r1, [pc, #96]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ac6:	d105      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ac8:	4b13      	ldr	r3, [pc, #76]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	4a12      	ldr	r2, [pc, #72]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d015      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ae2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ae6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aee:	490a      	ldr	r1, [pc, #40]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004afa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004afe:	d105      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b00:	4b05      	ldr	r3, [pc, #20]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	4a04      	ldr	r2, [pc, #16]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b0a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004b0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40021000 	.word	0x40021000

08004b1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e097      	b.n	8004c60 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d106      	bne.n	8004b4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7fc f89d 	bl	8000c84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004b60:	f023 0307 	bic.w	r3, r3, #7
 8004b64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f000 f907 	bl	8004d84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b9e:	f023 0303 	bic.w	r3, r3, #3
 8004ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	021b      	lsls	r3, r3, #8
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004bbc:	f023 030c 	bic.w	r3, r3, #12
 8004bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	011a      	lsls	r2, r3, #4
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	031b      	lsls	r3, r3, #12
 8004bec:	4313      	orrs	r3, r2
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004bfa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004c02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d110      	bne.n	8004cba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d102      	bne.n	8004ca4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c9e:	7b7b      	ldrb	r3, [r7, #13]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d001      	beq.n	8004ca8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e069      	b.n	8004d7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cb8:	e031      	b.n	8004d1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d110      	bne.n	8004ce2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cc0:	7bbb      	ldrb	r3, [r7, #14]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d102      	bne.n	8004ccc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cc6:	7b3b      	ldrb	r3, [r7, #12]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d001      	beq.n	8004cd0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e055      	b.n	8004d7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ce0:	e01d      	b.n	8004d1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d108      	bne.n	8004cfa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ce8:	7bbb      	ldrb	r3, [r7, #14]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d105      	bne.n	8004cfa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cee:	7b7b      	ldrb	r3, [r7, #13]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d102      	bne.n	8004cfa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cf4:	7b3b      	ldrb	r3, [r7, #12]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d001      	beq.n	8004cfe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e03e      	b.n	8004d7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2202      	movs	r2, #2
 8004d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2202      	movs	r2, #2
 8004d12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_TIM_Encoder_Start+0xc4>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d008      	beq.n	8004d3c <HAL_TIM_Encoder_Start+0xd4>
 8004d2a:	e00f      	b.n	8004d4c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2201      	movs	r2, #1
 8004d32:	2100      	movs	r1, #0
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 f8d9 	bl	8004eec <TIM_CCxChannelCmd>
      break;
 8004d3a:	e016      	b.n	8004d6a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2201      	movs	r2, #1
 8004d42:	2104      	movs	r1, #4
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 f8d1 	bl	8004eec <TIM_CCxChannelCmd>
      break;
 8004d4a:	e00e      	b.n	8004d6a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2201      	movs	r2, #1
 8004d52:	2100      	movs	r1, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 f8c9 	bl	8004eec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	2104      	movs	r1, #4
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 f8c2 	bl	8004eec <TIM_CCxChannelCmd>
      break;
 8004d68:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 0201 	orr.w	r2, r2, #1
 8004d78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a4c      	ldr	r2, [pc, #304]	@ (8004ec8 <TIM_Base_SetConfig+0x144>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d017      	beq.n	8004dcc <TIM_Base_SetConfig+0x48>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da2:	d013      	beq.n	8004dcc <TIM_Base_SetConfig+0x48>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a49      	ldr	r2, [pc, #292]	@ (8004ecc <TIM_Base_SetConfig+0x148>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00f      	beq.n	8004dcc <TIM_Base_SetConfig+0x48>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a48      	ldr	r2, [pc, #288]	@ (8004ed0 <TIM_Base_SetConfig+0x14c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <TIM_Base_SetConfig+0x48>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a47      	ldr	r2, [pc, #284]	@ (8004ed4 <TIM_Base_SetConfig+0x150>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d007      	beq.n	8004dcc <TIM_Base_SetConfig+0x48>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a46      	ldr	r2, [pc, #280]	@ (8004ed8 <TIM_Base_SetConfig+0x154>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_Base_SetConfig+0x48>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a45      	ldr	r2, [pc, #276]	@ (8004edc <TIM_Base_SetConfig+0x158>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d108      	bne.n	8004dde <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a39      	ldr	r2, [pc, #228]	@ (8004ec8 <TIM_Base_SetConfig+0x144>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d023      	beq.n	8004e2e <TIM_Base_SetConfig+0xaa>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dec:	d01f      	beq.n	8004e2e <TIM_Base_SetConfig+0xaa>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a36      	ldr	r2, [pc, #216]	@ (8004ecc <TIM_Base_SetConfig+0x148>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d01b      	beq.n	8004e2e <TIM_Base_SetConfig+0xaa>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a35      	ldr	r2, [pc, #212]	@ (8004ed0 <TIM_Base_SetConfig+0x14c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d017      	beq.n	8004e2e <TIM_Base_SetConfig+0xaa>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a34      	ldr	r2, [pc, #208]	@ (8004ed4 <TIM_Base_SetConfig+0x150>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d013      	beq.n	8004e2e <TIM_Base_SetConfig+0xaa>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a33      	ldr	r2, [pc, #204]	@ (8004ed8 <TIM_Base_SetConfig+0x154>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00f      	beq.n	8004e2e <TIM_Base_SetConfig+0xaa>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a33      	ldr	r2, [pc, #204]	@ (8004ee0 <TIM_Base_SetConfig+0x15c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d00b      	beq.n	8004e2e <TIM_Base_SetConfig+0xaa>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a32      	ldr	r2, [pc, #200]	@ (8004ee4 <TIM_Base_SetConfig+0x160>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d007      	beq.n	8004e2e <TIM_Base_SetConfig+0xaa>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a31      	ldr	r2, [pc, #196]	@ (8004ee8 <TIM_Base_SetConfig+0x164>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d003      	beq.n	8004e2e <TIM_Base_SetConfig+0xaa>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a2c      	ldr	r2, [pc, #176]	@ (8004edc <TIM_Base_SetConfig+0x158>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d108      	bne.n	8004e40 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a18      	ldr	r2, [pc, #96]	@ (8004ec8 <TIM_Base_SetConfig+0x144>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d013      	beq.n	8004e94 <TIM_Base_SetConfig+0x110>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ed8 <TIM_Base_SetConfig+0x154>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00f      	beq.n	8004e94 <TIM_Base_SetConfig+0x110>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a1a      	ldr	r2, [pc, #104]	@ (8004ee0 <TIM_Base_SetConfig+0x15c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00b      	beq.n	8004e94 <TIM_Base_SetConfig+0x110>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a19      	ldr	r2, [pc, #100]	@ (8004ee4 <TIM_Base_SetConfig+0x160>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d007      	beq.n	8004e94 <TIM_Base_SetConfig+0x110>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a18      	ldr	r2, [pc, #96]	@ (8004ee8 <TIM_Base_SetConfig+0x164>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d003      	beq.n	8004e94 <TIM_Base_SetConfig+0x110>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a13      	ldr	r2, [pc, #76]	@ (8004edc <TIM_Base_SetConfig+0x158>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d103      	bne.n	8004e9c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d105      	bne.n	8004eba <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f023 0201 	bic.w	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	611a      	str	r2, [r3, #16]
  }
}
 8004eba:	bf00      	nop
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40012c00 	.word	0x40012c00
 8004ecc:	40000400 	.word	0x40000400
 8004ed0:	40000800 	.word	0x40000800
 8004ed4:	40000c00 	.word	0x40000c00
 8004ed8:	40013400 	.word	0x40013400
 8004edc:	40015000 	.word	0x40015000
 8004ee0:	40014000 	.word	0x40014000
 8004ee4:	40014400 	.word	0x40014400
 8004ee8:	40014800 	.word	0x40014800

08004eec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f003 031f 	and.w	r3, r3, #31
 8004efe:	2201      	movs	r2, #1
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a1a      	ldr	r2, [r3, #32]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	401a      	ands	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a1a      	ldr	r2, [r3, #32]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f003 031f 	and.w	r3, r3, #31
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	fa01 f303 	lsl.w	r3, r1, r3
 8004f24:	431a      	orrs	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	621a      	str	r2, [r3, #32]
}
 8004f2a:	bf00      	nop
 8004f2c:	371c      	adds	r7, #28
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
	...

08004f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e074      	b.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a34      	ldr	r2, [pc, #208]	@ (8005048 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d009      	beq.n	8004f8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a33      	ldr	r2, [pc, #204]	@ (800504c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d004      	beq.n	8004f8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a31      	ldr	r2, [pc, #196]	@ (8005050 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d108      	bne.n	8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004f94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a21      	ldr	r2, [pc, #132]	@ (8005048 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d022      	beq.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fd0:	d01d      	beq.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1f      	ldr	r2, [pc, #124]	@ (8005054 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d018      	beq.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8005058 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d013      	beq.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1c      	ldr	r2, [pc, #112]	@ (800505c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d00e      	beq.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a15      	ldr	r2, [pc, #84]	@ (800504c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d009      	beq.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a18      	ldr	r2, [pc, #96]	@ (8005060 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d004      	beq.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a11      	ldr	r2, [pc, #68]	@ (8005050 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d10c      	bne.n	8005028 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005014:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	4313      	orrs	r3, r2
 800501e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40012c00 	.word	0x40012c00
 800504c:	40013400 	.word	0x40013400
 8005050:	40015000 	.word	0x40015000
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800
 800505c:	40000c00 	.word	0x40000c00
 8005060:	40014000 	.word	0x40014000

08005064 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005074:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005078:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	b29a      	uxth	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005092:	b480      	push	{r7}
 8005094:	b085      	sub	sp, #20
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800509a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800509e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	43db      	mvns	r3, r3
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	4013      	ands	r3, r2
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	1d3b      	adds	r3, r7, #4
 80050d2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2201      	movs	r2, #1
 80050da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005104:	b480      	push	{r7}
 8005106:	b0a7      	sub	sp, #156	@ 0x9c
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	b29b      	uxth	r3, r3
 8005122:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	78db      	ldrb	r3, [r3, #3]
 8005132:	2b03      	cmp	r3, #3
 8005134:	d81f      	bhi.n	8005176 <USB_ActivateEndpoint+0x72>
 8005136:	a201      	add	r2, pc, #4	@ (adr r2, 800513c <USB_ActivateEndpoint+0x38>)
 8005138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513c:	0800514d 	.word	0x0800514d
 8005140:	08005169 	.word	0x08005169
 8005144:	0800517f 	.word	0x0800517f
 8005148:	0800515b 	.word	0x0800515b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800514c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005150:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005154:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005158:	e012      	b.n	8005180 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800515a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800515e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005162:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005166:	e00b      	b.n	8005180 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005168:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800516c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005170:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005174:	e004      	b.n	8005180 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800517c:	e000      	b.n	8005180 <USB_ActivateEndpoint+0x7c>
      break;
 800517e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	441a      	add	r2, r3
 800518a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800518e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005192:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005196:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800519a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800519e:	b29b      	uxth	r3, r3
 80051a0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	b21b      	sxth	r3, r3
 80051b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ba:	b21a      	sxth	r2, r3
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	b21b      	sxth	r3, r3
 80051c2:	4313      	orrs	r3, r2
 80051c4:	b21b      	sxth	r3, r3
 80051c6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	441a      	add	r2, r3
 80051d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80051d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	7b1b      	ldrb	r3, [r3, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f040 8180 	bne.w	80054f6 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	785b      	ldrb	r3, [r3, #1]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 8084 	beq.w	8005308 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	61bb      	str	r3, [r7, #24]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800520a:	b29b      	uxth	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	4413      	add	r3, r2
 8005212:	61bb      	str	r3, [r7, #24]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	00da      	lsls	r2, r3, #3
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	88db      	ldrh	r3, [r3, #6]
 8005228:	085b      	lsrs	r3, r3, #1
 800522a:	b29b      	uxth	r3, r3
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	827b      	strh	r3, [r7, #18]
 8005242:	8a7b      	ldrh	r3, [r7, #18]
 8005244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01b      	beq.n	8005284 <USB_ActivateEndpoint+0x180>
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800525e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005262:	823b      	strh	r3, [r7, #16]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	441a      	add	r2, r3
 800526e:	8a3b      	ldrh	r3, [r7, #16]
 8005270:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005274:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005278:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800527c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005280:	b29b      	uxth	r3, r3
 8005282:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	78db      	ldrb	r3, [r3, #3]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d020      	beq.n	80052ce <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	b29b      	uxth	r3, r3
 800529a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800529e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052a2:	81bb      	strh	r3, [r7, #12]
 80052a4:	89bb      	ldrh	r3, [r7, #12]
 80052a6:	f083 0320 	eor.w	r3, r3, #32
 80052aa:	81bb      	strh	r3, [r7, #12]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	441a      	add	r2, r3
 80052b6:	89bb      	ldrh	r3, [r7, #12]
 80052b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	8013      	strh	r3, [r2, #0]
 80052cc:	e3f9      	b.n	8005ac2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052e4:	81fb      	strh	r3, [r7, #14]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	441a      	add	r2, r3
 80052f0:	89fb      	ldrh	r3, [r7, #14]
 80052f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005302:	b29b      	uxth	r3, r3
 8005304:	8013      	strh	r3, [r2, #0]
 8005306:	e3dc      	b.n	8005ac2 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	633b      	str	r3, [r7, #48]	@ 0x30
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005312:	b29b      	uxth	r3, r3
 8005314:	461a      	mov	r2, r3
 8005316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005318:	4413      	add	r3, r2
 800531a:	633b      	str	r3, [r7, #48]	@ 0x30
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	00da      	lsls	r2, r3, #3
 8005322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005324:	4413      	add	r3, r2
 8005326:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800532a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	88db      	ldrh	r3, [r3, #6]
 8005330:	085b      	lsrs	r3, r3, #1
 8005332:	b29b      	uxth	r3, r3
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005346:	b29b      	uxth	r3, r3
 8005348:	461a      	mov	r2, r3
 800534a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534c:	4413      	add	r3, r2
 800534e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	00da      	lsls	r2, r3, #3
 8005356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005358:	4413      	add	r3, r2
 800535a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800535e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800536a:	b29a      	uxth	r2, r3
 800536c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536e:	801a      	strh	r2, [r3, #0]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10a      	bne.n	800538e <USB_ActivateEndpoint+0x28a>
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	b29b      	uxth	r3, r3
 800537e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005386:	b29a      	uxth	r2, r3
 8005388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538a:	801a      	strh	r2, [r3, #0]
 800538c:	e041      	b.n	8005412 <USB_ActivateEndpoint+0x30e>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	2b3e      	cmp	r3, #62	@ 0x3e
 8005394:	d81c      	bhi.n	80053d0 <USB_ActivateEndpoint+0x2cc>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	085b      	lsrs	r3, r3, #1
 800539c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d004      	beq.n	80053b6 <USB_ActivateEndpoint+0x2b2>
 80053ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053b0:	3301      	adds	r3, #1
 80053b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	029b      	lsls	r3, r3, #10
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	4313      	orrs	r3, r2
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053cc:	801a      	strh	r2, [r3, #0]
 80053ce:	e020      	b.n	8005412 <USB_ActivateEndpoint+0x30e>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 031f 	and.w	r3, r3, #31
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d104      	bne.n	80053f0 <USB_ActivateEndpoint+0x2ec>
 80053e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053ea:	3b01      	subs	r3, #1
 80053ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	029b      	lsls	r3, r3, #10
 80053fe:	b29b      	uxth	r3, r3
 8005400:	4313      	orrs	r3, r2
 8005402:	b29b      	uxth	r3, r3
 8005404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800540c:	b29a      	uxth	r2, r3
 800540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005410:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005420:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d01b      	beq.n	8005462 <USB_ActivateEndpoint+0x35e>
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	b29b      	uxth	r3, r3
 8005438:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800543c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005440:	843b      	strh	r3, [r7, #32]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	441a      	add	r2, r3
 800544c:	8c3b      	ldrh	r3, [r7, #32]
 800544e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005452:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005456:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800545a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800545e:	b29b      	uxth	r3, r3
 8005460:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d124      	bne.n	80054b4 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	b29b      	uxth	r3, r3
 8005478:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800547c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005480:	83bb      	strh	r3, [r7, #28]
 8005482:	8bbb      	ldrh	r3, [r7, #28]
 8005484:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005488:	83bb      	strh	r3, [r7, #28]
 800548a:	8bbb      	ldrh	r3, [r7, #28]
 800548c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005490:	83bb      	strh	r3, [r7, #28]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	441a      	add	r2, r3
 800549c:	8bbb      	ldrh	r3, [r7, #28]
 800549e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	8013      	strh	r3, [r2, #0]
 80054b2:	e306      	b.n	8005ac2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ca:	83fb      	strh	r3, [r7, #30]
 80054cc:	8bfb      	ldrh	r3, [r7, #30]
 80054ce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80054d2:	83fb      	strh	r3, [r7, #30]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	441a      	add	r2, r3
 80054de:	8bfb      	ldrh	r3, [r7, #30]
 80054e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	8013      	strh	r3, [r2, #0]
 80054f4:	e2e5      	b.n	8005ac2 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	78db      	ldrb	r3, [r3, #3]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d11e      	bne.n	800553c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005514:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	441a      	add	r2, r3
 8005522:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8005526:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800552a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800552e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005536:	b29b      	uxth	r3, r3
 8005538:	8013      	strh	r3, [r2, #0]
 800553a:	e01d      	b.n	8005578 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	b29b      	uxth	r3, r3
 800554a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800554e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005552:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	441a      	add	r2, r3
 8005560:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8005564:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005568:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800556c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005574:	b29b      	uxth	r3, r3
 8005576:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005582:	b29b      	uxth	r3, r3
 8005584:	461a      	mov	r2, r3
 8005586:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005588:	4413      	add	r3, r2
 800558a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	00da      	lsls	r2, r3, #3
 8005592:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005594:	4413      	add	r3, r2
 8005596:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800559a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	891b      	ldrh	r3, [r3, #8]
 80055a0:	085b      	lsrs	r3, r3, #1
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	461a      	mov	r2, r3
 80055ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055bc:	4413      	add	r3, r2
 80055be:	677b      	str	r3, [r7, #116]	@ 0x74
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	00da      	lsls	r2, r3, #3
 80055c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055c8:	4413      	add	r3, r2
 80055ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80055ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	895b      	ldrh	r3, [r3, #10]
 80055d4:	085b      	lsrs	r3, r3, #1
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055de:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	785b      	ldrb	r3, [r3, #1]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f040 81af 	bne.w	8005948 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80055fa:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80055fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d01d      	beq.n	8005642 <USB_ActivateEndpoint+0x53e>
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	b29b      	uxth	r3, r3
 8005614:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800561c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	441a      	add	r2, r3
 800562a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800562e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005632:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005636:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800563a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800563e:	b29b      	uxth	r3, r3
 8005640:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8005652:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8005656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	d01d      	beq.n	800569a <USB_ActivateEndpoint+0x596>
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	b29b      	uxth	r3, r3
 800566c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005670:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005674:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	441a      	add	r2, r3
 8005682:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8005686:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800568a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800568e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005692:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005696:	b29b      	uxth	r3, r3
 8005698:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	785b      	ldrb	r3, [r3, #1]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d16b      	bne.n	800577a <USB_ActivateEndpoint+0x676>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056b2:	4413      	add	r3, r2
 80056b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	00da      	lsls	r2, r3, #3
 80056bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056be:	4413      	add	r3, r2
 80056c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056d4:	801a      	strh	r2, [r3, #0]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10a      	bne.n	80056f4 <USB_ActivateEndpoint+0x5f0>
 80056de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	e05d      	b.n	80057b0 <USB_ActivateEndpoint+0x6ac>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80056fa:	d81c      	bhi.n	8005736 <USB_ActivateEndpoint+0x632>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	085b      	lsrs	r3, r3, #1
 8005702:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d004      	beq.n	800571c <USB_ActivateEndpoint+0x618>
 8005712:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005716:	3301      	adds	r3, #1
 8005718:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800571c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29a      	uxth	r2, r3
 8005722:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005726:	b29b      	uxth	r3, r3
 8005728:	029b      	lsls	r3, r3, #10
 800572a:	b29b      	uxth	r3, r3
 800572c:	4313      	orrs	r3, r2
 800572e:	b29a      	uxth	r2, r3
 8005730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005732:	801a      	strh	r2, [r3, #0]
 8005734:	e03c      	b.n	80057b0 <USB_ActivateEndpoint+0x6ac>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	095b      	lsrs	r3, r3, #5
 800573c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	f003 031f 	and.w	r3, r3, #31
 8005748:	2b00      	cmp	r3, #0
 800574a:	d104      	bne.n	8005756 <USB_ActivateEndpoint+0x652>
 800574c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005750:	3b01      	subs	r3, #1
 8005752:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	b29a      	uxth	r2, r3
 800575c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005760:	b29b      	uxth	r3, r3
 8005762:	029b      	lsls	r3, r3, #10
 8005764:	b29b      	uxth	r3, r3
 8005766:	4313      	orrs	r3, r2
 8005768:	b29b      	uxth	r3, r3
 800576a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800576e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005772:	b29a      	uxth	r2, r3
 8005774:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005776:	801a      	strh	r2, [r3, #0]
 8005778:	e01a      	b.n	80057b0 <USB_ActivateEndpoint+0x6ac>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	785b      	ldrb	r3, [r3, #1]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d116      	bne.n	80057b0 <USB_ActivateEndpoint+0x6ac>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	657b      	str	r3, [r7, #84]	@ 0x54
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800578c:	b29b      	uxth	r3, r3
 800578e:	461a      	mov	r2, r3
 8005790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005792:	4413      	add	r3, r2
 8005794:	657b      	str	r3, [r7, #84]	@ 0x54
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	00da      	lsls	r2, r3, #3
 800579c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800579e:	4413      	add	r3, r2
 80057a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80057a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	785b      	ldrb	r3, [r3, #1]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d16b      	bne.n	8005894 <USB_ActivateEndpoint+0x790>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	461a      	mov	r2, r3
 80057ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057cc:	4413      	add	r3, r2
 80057ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	00da      	lsls	r2, r3, #3
 80057d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d8:	4413      	add	r3, r2
 80057da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ee:	801a      	strh	r2, [r3, #0]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10a      	bne.n	800580e <USB_ActivateEndpoint+0x70a>
 80057f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005806:	b29a      	uxth	r2, r3
 8005808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580a:	801a      	strh	r2, [r3, #0]
 800580c:	e05b      	b.n	80058c6 <USB_ActivateEndpoint+0x7c2>
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b3e      	cmp	r3, #62	@ 0x3e
 8005814:	d81c      	bhi.n	8005850 <USB_ActivateEndpoint+0x74c>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	085b      	lsrs	r3, r3, #1
 800581c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d004      	beq.n	8005836 <USB_ActivateEndpoint+0x732>
 800582c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005830:	3301      	adds	r3, #1
 8005832:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29a      	uxth	r2, r3
 800583c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005840:	b29b      	uxth	r3, r3
 8005842:	029b      	lsls	r3, r3, #10
 8005844:	b29b      	uxth	r3, r3
 8005846:	4313      	orrs	r3, r2
 8005848:	b29a      	uxth	r2, r3
 800584a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584c:	801a      	strh	r2, [r3, #0]
 800584e:	e03a      	b.n	80058c6 <USB_ActivateEndpoint+0x7c2>
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	095b      	lsrs	r3, r3, #5
 8005856:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	2b00      	cmp	r3, #0
 8005864:	d104      	bne.n	8005870 <USB_ActivateEndpoint+0x76c>
 8005866:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800586a:	3b01      	subs	r3, #1
 800586c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	b29a      	uxth	r2, r3
 8005876:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800587a:	b29b      	uxth	r3, r3
 800587c:	029b      	lsls	r3, r3, #10
 800587e:	b29b      	uxth	r3, r3
 8005880:	4313      	orrs	r3, r2
 8005882:	b29b      	uxth	r3, r3
 8005884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588c:	b29a      	uxth	r2, r3
 800588e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	e018      	b.n	80058c6 <USB_ActivateEndpoint+0x7c2>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	785b      	ldrb	r3, [r3, #1]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d114      	bne.n	80058c6 <USB_ActivateEndpoint+0x7c2>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058a8:	4413      	add	r3, r2
 80058aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	00da      	lsls	r2, r3, #3
 80058b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058b4:	4413      	add	r3, r2
 80058b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80058ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058c4:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80058de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80058e0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80058e4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80058e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80058e8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80058ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	441a      	add	r2, r3
 80058f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80058fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800590a:	b29b      	uxth	r3, r3
 800590c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	b29b      	uxth	r3, r3
 800591c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005924:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	441a      	add	r2, r3
 8005930:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800593a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800593e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005942:	b29b      	uxth	r3, r3
 8005944:	8013      	strh	r3, [r2, #0]
 8005946:	e0bc      	b.n	8005ac2 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8005958:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800595c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d01d      	beq.n	80059a0 <USB_ActivateEndpoint+0x89c>
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	b29b      	uxth	r3, r3
 8005972:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800597a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	441a      	add	r2, r3
 8005988:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800598c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005990:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005994:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800599c:	b29b      	uxth	r3, r3
 800599e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80059b0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80059b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01d      	beq.n	80059f8 <USB_ActivateEndpoint+0x8f4>
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059d2:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	441a      	add	r2, r3
 80059e0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80059e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	78db      	ldrb	r3, [r3, #3]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d024      	beq.n	8005a4a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a16:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005a1a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005a1e:	f083 0320 	eor.w	r3, r3, #32
 8005a22:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	441a      	add	r2, r3
 8005a30:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005a34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	8013      	strh	r3, [r2, #0]
 8005a48:	e01d      	b.n	8005a86 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a60:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	441a      	add	r2, r3
 8005a6e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005a72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a9c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	441a      	add	r2, r3
 8005aaa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005aae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ab2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005ac2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	379c      	adds	r7, #156	@ 0x9c
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop

08005ad4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b08d      	sub	sp, #52	@ 0x34
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	7b1b      	ldrb	r3, [r3, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f040 808e 	bne.w	8005c04 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	785b      	ldrb	r3, [r3, #1]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d044      	beq.n	8005b7a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	81bb      	strh	r3, [r7, #12]
 8005afe:	89bb      	ldrh	r3, [r7, #12]
 8005b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01b      	beq.n	8005b40 <USB_DeactivateEndpoint+0x6c>
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b1e:	817b      	strh	r3, [r7, #10]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	441a      	add	r2, r3
 8005b2a:	897b      	ldrh	r3, [r7, #10]
 8005b2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b56:	813b      	strh	r3, [r7, #8]
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	441a      	add	r2, r3
 8005b62:	893b      	ldrh	r3, [r7, #8]
 8005b64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	8013      	strh	r3, [r2, #0]
 8005b78:	e192      	b.n	8005ea0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	827b      	strh	r3, [r7, #18]
 8005b88:	8a7b      	ldrh	r3, [r7, #18]
 8005b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01b      	beq.n	8005bca <USB_DeactivateEndpoint+0xf6>
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ba8:	823b      	strh	r3, [r7, #16]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	441a      	add	r2, r3
 8005bb4:	8a3b      	ldrh	r3, [r7, #16]
 8005bb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005be0:	81fb      	strh	r3, [r7, #14]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	441a      	add	r2, r3
 8005bec:	89fb      	ldrh	r3, [r7, #14]
 8005bee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	8013      	strh	r3, [r2, #0]
 8005c02:	e14d      	b.n	8005ea0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	785b      	ldrb	r3, [r3, #1]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f040 80a5 	bne.w	8005d58 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	843b      	strh	r3, [r7, #32]
 8005c1c:	8c3b      	ldrh	r3, [r7, #32]
 8005c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d01b      	beq.n	8005c5e <USB_DeactivateEndpoint+0x18a>
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c3c:	83fb      	strh	r3, [r7, #30]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	441a      	add	r2, r3
 8005c48:	8bfb      	ldrh	r3, [r7, #30]
 8005c4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	83bb      	strh	r3, [r7, #28]
 8005c6c:	8bbb      	ldrh	r3, [r7, #28]
 8005c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d01b      	beq.n	8005cae <USB_DeactivateEndpoint+0x1da>
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c8c:	837b      	strh	r3, [r7, #26]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	441a      	add	r2, r3
 8005c98:	8b7b      	ldrh	r3, [r7, #26]
 8005c9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ca2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ca6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cc4:	833b      	strh	r3, [r7, #24]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	441a      	add	r2, r3
 8005cd0:	8b3b      	ldrh	r3, [r7, #24]
 8005cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cde:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cfc:	82fb      	strh	r3, [r7, #22]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	441a      	add	r2, r3
 8005d08:	8afb      	ldrh	r3, [r7, #22]
 8005d0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d34:	82bb      	strh	r3, [r7, #20]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	441a      	add	r2, r3
 8005d40:	8abb      	ldrh	r3, [r7, #20]
 8005d42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	8013      	strh	r3, [r2, #0]
 8005d56:	e0a3      	b.n	8005ea0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005d66:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005d68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01b      	beq.n	8005da8 <USB_DeactivateEndpoint+0x2d4>
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d86:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	441a      	add	r2, r3
 8005d92:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005d94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005db6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d01b      	beq.n	8005df8 <USB_DeactivateEndpoint+0x324>
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	441a      	add	r2, r3
 8005de2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005de4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005de8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005df0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e0e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	441a      	add	r2, r3
 8005e1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e46:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	441a      	add	r2, r3
 8005e52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e7e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	441a      	add	r2, r3
 8005e8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3734      	adds	r7, #52	@ 0x34
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b0ac      	sub	sp, #176	@ 0xb0
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	785b      	ldrb	r3, [r3, #1]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	f040 84ca 	bne.w	8006856 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	699a      	ldr	r2, [r3, #24]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d904      	bls.n	8005ed8 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ed6:	e003      	b.n	8005ee0 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	7b1b      	ldrb	r3, [r3, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d122      	bne.n	8005f2e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	6959      	ldr	r1, [r3, #20]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	88da      	ldrh	r2, [r3, #6]
 8005ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 febd 	bl	8006c76 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	613b      	str	r3, [r7, #16]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	461a      	mov	r2, r3
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	00da      	lsls	r2, r3, #3
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	801a      	strh	r2, [r3, #0]
 8005f2a:	f000 bc6f 	b.w	800680c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	78db      	ldrb	r3, [r3, #3]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	f040 831e 	bne.w	8006574 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	6a1a      	ldr	r2, [r3, #32]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	f240 82cf 	bls.w	80064e4 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f5c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	441a      	add	r2, r3
 8005f6a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005f6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f76:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	6a1a      	ldr	r2, [r3, #32]
 8005f86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f8a:	1ad2      	subs	r2, r2, r3
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 814f 	beq.w	8006246 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	785b      	ldrb	r3, [r3, #1]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d16b      	bne.n	800608c <USB_EPStartXfer+0x1de>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc4:	4413      	add	r3, r2
 8005fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	00da      	lsls	r2, r3, #3
 8005fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe6:	801a      	strh	r2, [r3, #0]
 8005fe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10a      	bne.n	8006006 <USB_EPStartXfer+0x158>
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006002:	801a      	strh	r2, [r3, #0]
 8006004:	e05b      	b.n	80060be <USB_EPStartXfer+0x210>
 8006006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800600a:	2b3e      	cmp	r3, #62	@ 0x3e
 800600c:	d81c      	bhi.n	8006048 <USB_EPStartXfer+0x19a>
 800600e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006012:	085b      	lsrs	r3, r3, #1
 8006014:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <USB_EPStartXfer+0x180>
 8006024:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006028:	3301      	adds	r3, #1
 800602a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800602e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29a      	uxth	r2, r3
 8006034:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006038:	b29b      	uxth	r3, r3
 800603a:	029b      	lsls	r3, r3, #10
 800603c:	b29b      	uxth	r3, r3
 800603e:	4313      	orrs	r3, r2
 8006040:	b29a      	uxth	r2, r3
 8006042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006044:	801a      	strh	r2, [r3, #0]
 8006046:	e03a      	b.n	80060be <USB_EPStartXfer+0x210>
 8006048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800604c:	095b      	lsrs	r3, r3, #5
 800604e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	2b00      	cmp	r3, #0
 800605c:	d104      	bne.n	8006068 <USB_EPStartXfer+0x1ba>
 800605e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006062:	3b01      	subs	r3, #1
 8006064:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	b29a      	uxth	r2, r3
 800606e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006072:	b29b      	uxth	r3, r3
 8006074:	029b      	lsls	r3, r3, #10
 8006076:	b29b      	uxth	r3, r3
 8006078:	4313      	orrs	r3, r2
 800607a:	b29b      	uxth	r3, r3
 800607c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006084:	b29a      	uxth	r2, r3
 8006086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006088:	801a      	strh	r2, [r3, #0]
 800608a:	e018      	b.n	80060be <USB_EPStartXfer+0x210>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	785b      	ldrb	r3, [r3, #1]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d114      	bne.n	80060be <USB_EPStartXfer+0x210>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800609a:	b29b      	uxth	r3, r3
 800609c:	461a      	mov	r2, r3
 800609e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a0:	4413      	add	r3, r2
 80060a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	00da      	lsls	r2, r3, #3
 80060aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ac:	4413      	add	r3, r2
 80060ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80060b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	895b      	ldrh	r3, [r3, #10]
 80060c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	6959      	ldr	r1, [r3, #20]
 80060ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fdce 	bl	8006c76 <USB_WritePMA>
            ep->xfer_buff += len;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	695a      	ldr	r2, [r3, #20]
 80060de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060e2:	441a      	add	r2, r3
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	6a1a      	ldr	r2, [r3, #32]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d907      	bls.n	8006104 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	6a1a      	ldr	r2, [r3, #32]
 80060f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060fc:	1ad2      	subs	r2, r2, r3
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	621a      	str	r2, [r3, #32]
 8006102:	e006      	b.n	8006112 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2200      	movs	r2, #0
 8006110:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	785b      	ldrb	r3, [r3, #1]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d16b      	bne.n	80061f2 <USB_EPStartXfer+0x344>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	61bb      	str	r3, [r7, #24]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006124:	b29b      	uxth	r3, r3
 8006126:	461a      	mov	r2, r3
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	4413      	add	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	00da      	lsls	r2, r3, #3
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	4413      	add	r3, r2
 8006138:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800613c:	617b      	str	r3, [r7, #20]
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	b29b      	uxth	r3, r3
 8006144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006148:	b29a      	uxth	r2, r3
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	801a      	strh	r2, [r3, #0]
 800614e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10a      	bne.n	800616c <USB_EPStartXfer+0x2be>
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006164:	b29a      	uxth	r2, r3
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	801a      	strh	r2, [r3, #0]
 800616a:	e05d      	b.n	8006228 <USB_EPStartXfer+0x37a>
 800616c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006170:	2b3e      	cmp	r3, #62	@ 0x3e
 8006172:	d81c      	bhi.n	80061ae <USB_EPStartXfer+0x300>
 8006174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006178:	085b      	lsrs	r3, r3, #1
 800617a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800617e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d004      	beq.n	8006194 <USB_EPStartXfer+0x2e6>
 800618a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800618e:	3301      	adds	r3, #1
 8006190:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	b29a      	uxth	r2, r3
 800619a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800619e:	b29b      	uxth	r3, r3
 80061a0:	029b      	lsls	r3, r3, #10
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	4313      	orrs	r3, r2
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	801a      	strh	r2, [r3, #0]
 80061ac:	e03c      	b.n	8006228 <USB_EPStartXfer+0x37a>
 80061ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061b2:	095b      	lsrs	r3, r3, #5
 80061b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80061b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061bc:	f003 031f 	and.w	r3, r3, #31
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d104      	bne.n	80061ce <USB_EPStartXfer+0x320>
 80061c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80061c8:	3b01      	subs	r3, #1
 80061ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80061d8:	b29b      	uxth	r3, r3
 80061da:	029b      	lsls	r3, r3, #10
 80061dc:	b29b      	uxth	r3, r3
 80061de:	4313      	orrs	r3, r2
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	801a      	strh	r2, [r3, #0]
 80061f0:	e01a      	b.n	8006228 <USB_EPStartXfer+0x37a>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	785b      	ldrb	r3, [r3, #1]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d116      	bne.n	8006228 <USB_EPStartXfer+0x37a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	623b      	str	r3, [r7, #32]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006204:	b29b      	uxth	r3, r3
 8006206:	461a      	mov	r2, r3
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	4413      	add	r3, r2
 800620c:	623b      	str	r3, [r7, #32]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	00da      	lsls	r2, r3, #3
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	4413      	add	r3, r2
 8006218:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800621c:	61fb      	str	r3, [r7, #28]
 800621e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006222:	b29a      	uxth	r2, r3
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	891b      	ldrh	r3, [r3, #8]
 800622c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	6959      	ldr	r1, [r3, #20]
 8006234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006238:	b29b      	uxth	r3, r3
 800623a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fd19 	bl	8006c76 <USB_WritePMA>
 8006244:	e2e2      	b.n	800680c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	785b      	ldrb	r3, [r3, #1]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d16b      	bne.n	8006326 <USB_EPStartXfer+0x478>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006258:	b29b      	uxth	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800625e:	4413      	add	r3, r2
 8006260:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	00da      	lsls	r2, r3, #3
 8006268:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800626a:	4413      	add	r3, r2
 800626c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006270:	647b      	str	r3, [r7, #68]	@ 0x44
 8006272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b29b      	uxth	r3, r3
 8006278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800627c:	b29a      	uxth	r2, r3
 800627e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006280:	801a      	strh	r2, [r3, #0]
 8006282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10a      	bne.n	80062a0 <USB_EPStartXfer+0x3f2>
 800628a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	b29b      	uxth	r3, r3
 8006290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006298:	b29a      	uxth	r2, r3
 800629a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800629c:	801a      	strh	r2, [r3, #0]
 800629e:	e05d      	b.n	800635c <USB_EPStartXfer+0x4ae>
 80062a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80062a6:	d81c      	bhi.n	80062e2 <USB_EPStartXfer+0x434>
 80062a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062ac:	085b      	lsrs	r3, r3, #1
 80062ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d004      	beq.n	80062c8 <USB_EPStartXfer+0x41a>
 80062be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80062c2:	3301      	adds	r3, #1
 80062c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	029b      	lsls	r3, r3, #10
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	4313      	orrs	r3, r2
 80062da:	b29a      	uxth	r2, r3
 80062dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062de:	801a      	strh	r2, [r3, #0]
 80062e0:	e03c      	b.n	800635c <USB_EPStartXfer+0x4ae>
 80062e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062f0:	f003 031f 	and.w	r3, r3, #31
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d104      	bne.n	8006302 <USB_EPStartXfer+0x454>
 80062f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80062fc:	3b01      	subs	r3, #1
 80062fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006302:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	b29a      	uxth	r2, r3
 8006308:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800630c:	b29b      	uxth	r3, r3
 800630e:	029b      	lsls	r3, r3, #10
 8006310:	b29b      	uxth	r3, r3
 8006312:	4313      	orrs	r3, r2
 8006314:	b29b      	uxth	r3, r3
 8006316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800631e:	b29a      	uxth	r2, r3
 8006320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006322:	801a      	strh	r2, [r3, #0]
 8006324:	e01a      	b.n	800635c <USB_EPStartXfer+0x4ae>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	785b      	ldrb	r3, [r3, #1]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d116      	bne.n	800635c <USB_EPStartXfer+0x4ae>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	653b      	str	r3, [r7, #80]	@ 0x50
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006338:	b29b      	uxth	r3, r3
 800633a:	461a      	mov	r2, r3
 800633c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800633e:	4413      	add	r3, r2
 8006340:	653b      	str	r3, [r7, #80]	@ 0x50
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	00da      	lsls	r2, r3, #3
 8006348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800634a:	4413      	add	r3, r2
 800634c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006350:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006356:	b29a      	uxth	r2, r3
 8006358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800635a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	891b      	ldrh	r3, [r3, #8]
 8006360:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	6959      	ldr	r1, [r3, #20]
 8006368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800636c:	b29b      	uxth	r3, r3
 800636e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fc7f 	bl	8006c76 <USB_WritePMA>
            ep->xfer_buff += len;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	695a      	ldr	r2, [r3, #20]
 800637c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006380:	441a      	add	r2, r3
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	6a1a      	ldr	r2, [r3, #32]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	429a      	cmp	r2, r3
 8006390:	d907      	bls.n	80063a2 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	6a1a      	ldr	r2, [r3, #32]
 8006396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800639a:	1ad2      	subs	r2, r2, r3
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	621a      	str	r2, [r3, #32]
 80063a0:	e006      	b.n	80063b0 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2200      	movs	r2, #0
 80063ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d16b      	bne.n	8006494 <USB_EPStartXfer+0x5e6>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	461a      	mov	r2, r3
 80063ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063cc:	4413      	add	r3, r2
 80063ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	00da      	lsls	r2, r3, #3
 80063d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d8:	4413      	add	r3, r2
 80063da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80063de:	637b      	str	r3, [r7, #52]	@ 0x34
 80063e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ee:	801a      	strh	r2, [r3, #0]
 80063f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10a      	bne.n	800640e <USB_EPStartXfer+0x560>
 80063f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006406:	b29a      	uxth	r2, r3
 8006408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640a:	801a      	strh	r2, [r3, #0]
 800640c:	e05b      	b.n	80064c6 <USB_EPStartXfer+0x618>
 800640e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006412:	2b3e      	cmp	r3, #62	@ 0x3e
 8006414:	d81c      	bhi.n	8006450 <USB_EPStartXfer+0x5a2>
 8006416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800641a:	085b      	lsrs	r3, r3, #1
 800641c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d004      	beq.n	8006436 <USB_EPStartXfer+0x588>
 800642c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006430:	3301      	adds	r3, #1
 8006432:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	b29a      	uxth	r2, r3
 800643c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006440:	b29b      	uxth	r3, r3
 8006442:	029b      	lsls	r3, r3, #10
 8006444:	b29b      	uxth	r3, r3
 8006446:	4313      	orrs	r3, r2
 8006448:	b29a      	uxth	r2, r3
 800644a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800644c:	801a      	strh	r2, [r3, #0]
 800644e:	e03a      	b.n	80064c6 <USB_EPStartXfer+0x618>
 8006450:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006454:	095b      	lsrs	r3, r3, #5
 8006456:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800645a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800645e:	f003 031f 	and.w	r3, r3, #31
 8006462:	2b00      	cmp	r3, #0
 8006464:	d104      	bne.n	8006470 <USB_EPStartXfer+0x5c2>
 8006466:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800646a:	3b01      	subs	r3, #1
 800646c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	b29a      	uxth	r2, r3
 8006476:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800647a:	b29b      	uxth	r3, r3
 800647c:	029b      	lsls	r3, r3, #10
 800647e:	b29b      	uxth	r3, r3
 8006480:	4313      	orrs	r3, r2
 8006482:	b29b      	uxth	r3, r3
 8006484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800648c:	b29a      	uxth	r2, r3
 800648e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006490:	801a      	strh	r2, [r3, #0]
 8006492:	e018      	b.n	80064c6 <USB_EPStartXfer+0x618>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	785b      	ldrb	r3, [r3, #1]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d114      	bne.n	80064c6 <USB_EPStartXfer+0x618>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	461a      	mov	r2, r3
 80064a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064a8:	4413      	add	r3, r2
 80064aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	00da      	lsls	r2, r3, #3
 80064b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064b4:	4413      	add	r3, r2
 80064b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80064ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	895b      	ldrh	r3, [r3, #10]
 80064ca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	6959      	ldr	r1, [r3, #20]
 80064d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fbca 	bl	8006c76 <USB_WritePMA>
 80064e2:	e193      	b.n	800680c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80064fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006502:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	441a      	add	r2, r3
 8006510:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006514:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006518:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800651c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006524:	b29b      	uxth	r3, r3
 8006526:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006532:	b29b      	uxth	r3, r3
 8006534:	461a      	mov	r2, r3
 8006536:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006538:	4413      	add	r3, r2
 800653a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	00da      	lsls	r2, r3, #3
 8006542:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006544:	4413      	add	r3, r2
 8006546:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800654a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800654c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006550:	b29a      	uxth	r2, r3
 8006552:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006554:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	891b      	ldrh	r3, [r3, #8]
 800655a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	6959      	ldr	r1, [r3, #20]
 8006562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006566:	b29b      	uxth	r3, r3
 8006568:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fb82 	bl	8006c76 <USB_WritePMA>
 8006572:	e14b      	b.n	800680c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	6a1a      	ldr	r2, [r3, #32]
 8006578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800657c:	1ad2      	subs	r2, r2, r3
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	b29b      	uxth	r3, r3
 8006590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 809a 	beq.w	80066ce <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	673b      	str	r3, [r7, #112]	@ 0x70
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	785b      	ldrb	r3, [r3, #1]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d16b      	bne.n	800667e <USB_EPStartXfer+0x7d0>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	461a      	mov	r2, r3
 80065b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065b6:	4413      	add	r3, r2
 80065b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	00da      	lsls	r2, r3, #3
 80065c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065c2:	4413      	add	r3, r2
 80065c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80065c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80065ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065d8:	801a      	strh	r2, [r3, #0]
 80065da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10a      	bne.n	80065f8 <USB_EPStartXfer+0x74a>
 80065e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065f4:	801a      	strh	r2, [r3, #0]
 80065f6:	e05b      	b.n	80066b0 <USB_EPStartXfer+0x802>
 80065f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80065fe:	d81c      	bhi.n	800663a <USB_EPStartXfer+0x78c>
 8006600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006604:	085b      	lsrs	r3, r3, #1
 8006606:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800660a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d004      	beq.n	8006620 <USB_EPStartXfer+0x772>
 8006616:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800661a:	3301      	adds	r3, #1
 800661c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006620:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	b29a      	uxth	r2, r3
 8006626:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800662a:	b29b      	uxth	r3, r3
 800662c:	029b      	lsls	r3, r3, #10
 800662e:	b29b      	uxth	r3, r3
 8006630:	4313      	orrs	r3, r2
 8006632:	b29a      	uxth	r2, r3
 8006634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006636:	801a      	strh	r2, [r3, #0]
 8006638:	e03a      	b.n	80066b0 <USB_EPStartXfer+0x802>
 800663a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800663e:	095b      	lsrs	r3, r3, #5
 8006640:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006648:	f003 031f 	and.w	r3, r3, #31
 800664c:	2b00      	cmp	r3, #0
 800664e:	d104      	bne.n	800665a <USB_EPStartXfer+0x7ac>
 8006650:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006654:	3b01      	subs	r3, #1
 8006656:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800665a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29a      	uxth	r2, r3
 8006660:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006664:	b29b      	uxth	r3, r3
 8006666:	029b      	lsls	r3, r3, #10
 8006668:	b29b      	uxth	r3, r3
 800666a:	4313      	orrs	r3, r2
 800666c:	b29b      	uxth	r3, r3
 800666e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006676:	b29a      	uxth	r2, r3
 8006678:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800667a:	801a      	strh	r2, [r3, #0]
 800667c:	e018      	b.n	80066b0 <USB_EPStartXfer+0x802>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	785b      	ldrb	r3, [r3, #1]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d114      	bne.n	80066b0 <USB_EPStartXfer+0x802>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800668c:	b29b      	uxth	r3, r3
 800668e:	461a      	mov	r2, r3
 8006690:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006692:	4413      	add	r3, r2
 8006694:	673b      	str	r3, [r7, #112]	@ 0x70
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	00da      	lsls	r2, r3, #3
 800669c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800669e:	4413      	add	r3, r2
 80066a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	895b      	ldrh	r3, [r3, #10]
 80066b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	6959      	ldr	r1, [r3, #20]
 80066bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fad5 	bl	8006c76 <USB_WritePMA>
 80066cc:	e09e      	b.n	800680c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	785b      	ldrb	r3, [r3, #1]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d16b      	bne.n	80067ae <USB_EPStartXfer+0x900>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	461a      	mov	r2, r3
 80066e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80066e6:	4413      	add	r3, r2
 80066e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	00da      	lsls	r2, r3, #3
 80066f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80066f2:	4413      	add	r3, r2
 80066f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80066f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006704:	b29a      	uxth	r2, r3
 8006706:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006708:	801a      	strh	r2, [r3, #0]
 800670a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10a      	bne.n	8006728 <USB_EPStartXfer+0x87a>
 8006712:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	b29b      	uxth	r3, r3
 8006718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006720:	b29a      	uxth	r2, r3
 8006722:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006724:	801a      	strh	r2, [r3, #0]
 8006726:	e063      	b.n	80067f0 <USB_EPStartXfer+0x942>
 8006728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800672c:	2b3e      	cmp	r3, #62	@ 0x3e
 800672e:	d81c      	bhi.n	800676a <USB_EPStartXfer+0x8bc>
 8006730:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006734:	085b      	lsrs	r3, r3, #1
 8006736:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800673a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d004      	beq.n	8006750 <USB_EPStartXfer+0x8a2>
 8006746:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800674a:	3301      	adds	r3, #1
 800674c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006750:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	b29a      	uxth	r2, r3
 8006756:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800675a:	b29b      	uxth	r3, r3
 800675c:	029b      	lsls	r3, r3, #10
 800675e:	b29b      	uxth	r3, r3
 8006760:	4313      	orrs	r3, r2
 8006762:	b29a      	uxth	r2, r3
 8006764:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006766:	801a      	strh	r2, [r3, #0]
 8006768:	e042      	b.n	80067f0 <USB_EPStartXfer+0x942>
 800676a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800676e:	095b      	lsrs	r3, r3, #5
 8006770:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006778:	f003 031f 	and.w	r3, r3, #31
 800677c:	2b00      	cmp	r3, #0
 800677e:	d104      	bne.n	800678a <USB_EPStartXfer+0x8dc>
 8006780:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006784:	3b01      	subs	r3, #1
 8006786:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800678a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29a      	uxth	r2, r3
 8006790:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006794:	b29b      	uxth	r3, r3
 8006796:	029b      	lsls	r3, r3, #10
 8006798:	b29b      	uxth	r3, r3
 800679a:	4313      	orrs	r3, r2
 800679c:	b29b      	uxth	r3, r3
 800679e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067aa:	801a      	strh	r2, [r3, #0]
 80067ac:	e020      	b.n	80067f0 <USB_EPStartXfer+0x942>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	785b      	ldrb	r3, [r3, #1]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d11c      	bne.n	80067f0 <USB_EPStartXfer+0x942>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	461a      	mov	r2, r3
 80067c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067ca:	4413      	add	r3, r2
 80067cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	00da      	lsls	r2, r3, #3
 80067d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067da:	4413      	add	r3, r2
 80067dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80067e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80067ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	891b      	ldrh	r3, [r3, #8]
 80067f4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	6959      	ldr	r1, [r3, #20]
 80067fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006800:	b29b      	uxth	r3, r3
 8006802:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fa35 	bl	8006c76 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800681e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006822:	817b      	strh	r3, [r7, #10]
 8006824:	897b      	ldrh	r3, [r7, #10]
 8006826:	f083 0310 	eor.w	r3, r3, #16
 800682a:	817b      	strh	r3, [r7, #10]
 800682c:	897b      	ldrh	r3, [r7, #10]
 800682e:	f083 0320 	eor.w	r3, r3, #32
 8006832:	817b      	strh	r3, [r7, #10]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	441a      	add	r2, r3
 800683e:	897b      	ldrh	r3, [r7, #10]
 8006840:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006844:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006848:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800684c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006850:	b29b      	uxth	r3, r3
 8006852:	8013      	strh	r3, [r2, #0]
 8006854:	e0d5      	b.n	8006a02 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	7b1b      	ldrb	r3, [r3, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d156      	bne.n	800690c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d122      	bne.n	80068ac <USB_EPStartXfer+0x9fe>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	78db      	ldrb	r3, [r3, #3]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d11e      	bne.n	80068ac <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	b29b      	uxth	r3, r3
 800687c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006884:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	441a      	add	r2, r3
 8006892:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800689a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800689e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80068a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	8013      	strh	r3, [r2, #0]
 80068aa:	e01d      	b.n	80068e8 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80068be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068c2:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	441a      	add	r2, r3
 80068d0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80068d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	699a      	ldr	r2, [r3, #24]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d907      	bls.n	8006904 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	699a      	ldr	r2, [r3, #24]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	1ad2      	subs	r2, r2, r3
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	619a      	str	r2, [r3, #24]
 8006902:	e054      	b.n	80069ae <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2200      	movs	r2, #0
 8006908:	619a      	str	r2, [r3, #24]
 800690a:	e050      	b.n	80069ae <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	78db      	ldrb	r3, [r3, #3]
 8006910:	2b02      	cmp	r3, #2
 8006912:	d142      	bne.n	800699a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d048      	beq.n	80069ae <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800692c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d005      	beq.n	8006944 <USB_EPStartXfer+0xa96>
 8006938:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800693c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10b      	bne.n	800695c <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006944:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006948:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800694c:	2b00      	cmp	r3, #0
 800694e:	d12e      	bne.n	80069ae <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006950:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d128      	bne.n	80069ae <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800696e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006972:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	441a      	add	r2, r3
 8006980:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8006984:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006988:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800698c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006990:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006994:	b29b      	uxth	r3, r3
 8006996:	8013      	strh	r3, [r2, #0]
 8006998:	e009      	b.n	80069ae <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	78db      	ldrb	r3, [r3, #3]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d103      	bne.n	80069aa <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2200      	movs	r2, #0
 80069a6:	619a      	str	r2, [r3, #24]
 80069a8:	e001      	b.n	80069ae <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e02a      	b.n	8006a04 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80069c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80069cc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069d0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80069d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80069d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	441a      	add	r2, r3
 80069ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80069ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	37b0      	adds	r7, #176	@ 0xb0
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	785b      	ldrb	r3, [r3, #1]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d020      	beq.n	8006a60 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a34:	81bb      	strh	r3, [r7, #12]
 8006a36:	89bb      	ldrh	r3, [r7, #12]
 8006a38:	f083 0310 	eor.w	r3, r3, #16
 8006a3c:	81bb      	strh	r3, [r7, #12]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	441a      	add	r2, r3
 8006a48:	89bb      	ldrh	r3, [r7, #12]
 8006a4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	8013      	strh	r3, [r2, #0]
 8006a5e:	e01f      	b.n	8006aa0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a76:	81fb      	strh	r3, [r7, #14]
 8006a78:	89fb      	ldrh	r3, [r7, #14]
 8006a7a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006a7e:	81fb      	strh	r3, [r7, #14]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	441a      	add	r2, r3
 8006a8a:	89fb      	ldrh	r3, [r7, #14]
 8006a8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b087      	sub	sp, #28
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	785b      	ldrb	r3, [r3, #1]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d04c      	beq.n	8006b5a <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	823b      	strh	r3, [r7, #16]
 8006ace:	8a3b      	ldrh	r3, [r7, #16]
 8006ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d01b      	beq.n	8006b10 <USB_EPClearStall+0x62>
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aee:	81fb      	strh	r3, [r7, #14]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	441a      	add	r2, r3
 8006afa:	89fb      	ldrh	r3, [r7, #14]
 8006afc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b08:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	78db      	ldrb	r3, [r3, #3]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d06c      	beq.n	8006bf2 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b2e:	81bb      	strh	r3, [r7, #12]
 8006b30:	89bb      	ldrh	r3, [r7, #12]
 8006b32:	f083 0320 	eor.w	r3, r3, #32
 8006b36:	81bb      	strh	r3, [r7, #12]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	441a      	add	r2, r3
 8006b42:	89bb      	ldrh	r3, [r7, #12]
 8006b44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	8013      	strh	r3, [r2, #0]
 8006b58:	e04b      	b.n	8006bf2 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	82fb      	strh	r3, [r7, #22]
 8006b68:	8afb      	ldrh	r3, [r7, #22]
 8006b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d01b      	beq.n	8006baa <USB_EPClearStall+0xfc>
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b88:	82bb      	strh	r3, [r7, #20]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	441a      	add	r2, r3
 8006b94:	8abb      	ldrh	r3, [r7, #20]
 8006b96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc0:	827b      	strh	r3, [r7, #18]
 8006bc2:	8a7b      	ldrh	r3, [r7, #18]
 8006bc4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006bc8:	827b      	strh	r3, [r7, #18]
 8006bca:	8a7b      	ldrh	r3, [r7, #18]
 8006bcc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006bd0:	827b      	strh	r3, [r7, #18]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	441a      	add	r2, r3
 8006bdc:	8a7b      	ldrh	r3, [r7, #18]
 8006bde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006be2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	371c      	adds	r7, #28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d103      	bne.n	8006c1a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2280      	movs	r2, #128	@ 0x80
 8006c16:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b085      	sub	sp, #20
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006c68:	68fb      	ldr	r3, [r7, #12]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b08b      	sub	sp, #44	@ 0x2c
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	60f8      	str	r0, [r7, #12]
 8006c7e:	60b9      	str	r1, [r7, #8]
 8006c80:	4611      	mov	r1, r2
 8006c82:	461a      	mov	r2, r3
 8006c84:	460b      	mov	r3, r1
 8006c86:	80fb      	strh	r3, [r7, #6]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006c8c:	88bb      	ldrh	r3, [r7, #4]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	085b      	lsrs	r3, r3, #1
 8006c92:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c9c:	88fa      	ldrh	r2, [r7, #6]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ca6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cac:	e01b      	b.n	8006ce6 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	021b      	lsls	r3, r3, #8
 8006cbc:	b21a      	sxth	r2, r3
 8006cbe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	b21b      	sxth	r3, r3
 8006cc6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	8a7a      	ldrh	r2, [r7, #18]
 8006ccc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	3302      	adds	r3, #2
 8006cd2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e0      	bne.n	8006cae <USB_WritePMA+0x38>
  }
}
 8006cec:	bf00      	nop
 8006cee:	bf00      	nop
 8006cf0:	372c      	adds	r7, #44	@ 0x2c
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b08b      	sub	sp, #44	@ 0x2c
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	60f8      	str	r0, [r7, #12]
 8006d02:	60b9      	str	r1, [r7, #8]
 8006d04:	4611      	mov	r1, r2
 8006d06:	461a      	mov	r2, r3
 8006d08:	460b      	mov	r3, r1
 8006d0a:	80fb      	strh	r3, [r7, #6]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006d10:	88bb      	ldrh	r3, [r7, #4]
 8006d12:	085b      	lsrs	r3, r3, #1
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d20:	88fa      	ldrh	r2, [r7, #6]
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d2a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d30:	e018      	b.n	8006d64 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	3302      	adds	r3, #2
 8006d3e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	0a1b      	lsrs	r3, r3, #8
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d60:	3b01      	subs	r3, #1
 8006d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e3      	bne.n	8006d32 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006d6a:	88bb      	ldrh	r3, [r7, #4]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d007      	beq.n	8006d86 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	701a      	strb	r2, [r3, #0]
  }
}
 8006d86:	bf00      	nop
 8006d88:	372c      	adds	r7, #44	@ 0x2c
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d9e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006da2:	f002 f8f9 	bl	8008f98 <USBD_static_malloc>
 8006da6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d105      	bne.n	8006dba <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8006db6:	2302      	movs	r3, #2
 8006db8:	e066      	b.n	8006e88 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	7c1b      	ldrb	r3, [r3, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d119      	bne.n	8006dfe <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006dca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006dce:	2202      	movs	r2, #2
 8006dd0:	2181      	movs	r1, #129	@ 0x81
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f001 ff87 	bl	8008ce6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006dde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006de2:	2202      	movs	r2, #2
 8006de4:	2101      	movs	r1, #1
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f001 ff7d 	bl	8008ce6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2210      	movs	r2, #16
 8006df8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8006dfc:	e016      	b.n	8006e2c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006dfe:	2340      	movs	r3, #64	@ 0x40
 8006e00:	2202      	movs	r2, #2
 8006e02:	2181      	movs	r1, #129	@ 0x81
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 ff6e 	bl	8008ce6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e10:	2340      	movs	r3, #64	@ 0x40
 8006e12:	2202      	movs	r2, #2
 8006e14:	2101      	movs	r1, #1
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 ff65 	bl	8008ce6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2210      	movs	r2, #16
 8006e28:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e2c:	2308      	movs	r3, #8
 8006e2e:	2203      	movs	r2, #3
 8006e30:	2182      	movs	r1, #130	@ 0x82
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f001 ff57 	bl	8008ce6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	7c1b      	ldrb	r3, [r3, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d109      	bne.n	8006e76 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f002 f828 	bl	8008ec4 <USBD_LL_PrepareReceive>
 8006e74:	e007      	b.n	8006e86 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e7c:	2340      	movs	r3, #64	@ 0x40
 8006e7e:	2101      	movs	r1, #1
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f002 f81f 	bl	8008ec4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006e9c:	2181      	movs	r1, #129	@ 0x81
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f001 ff47 	bl	8008d32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006eaa:	2101      	movs	r1, #1
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f001 ff40 	bl	8008d32 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006eba:	2182      	movs	r1, #130	@ 0x82
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 ff38 	bl	8008d32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00e      	beq.n	8006efa <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006eec:	4618      	mov	r0, r3
 8006eee:	f002 f861 	bl	8008fb4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f14:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e0af      	b.n	800708c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d03f      	beq.n	8006fb8 <USBD_CDC_Setup+0xb4>
 8006f38:	2b20      	cmp	r3, #32
 8006f3a:	f040 809f 	bne.w	800707c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	88db      	ldrh	r3, [r3, #6]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d02e      	beq.n	8006fa4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	b25b      	sxtb	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	da16      	bge.n	8006f7e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006f5c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	88d2      	ldrh	r2, [r2, #6]
 8006f62:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	88db      	ldrh	r3, [r3, #6]
 8006f68:	2b07      	cmp	r3, #7
 8006f6a:	bf28      	it	cs
 8006f6c:	2307      	movcs	r3, #7
 8006f6e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	89fa      	ldrh	r2, [r7, #14]
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 facd 	bl	8008516 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006f7c:	e085      	b.n	800708a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	785a      	ldrb	r2, [r3, #1]
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	88db      	ldrh	r3, [r3, #6]
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006f94:	6939      	ldr	r1, [r7, #16]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	88db      	ldrh	r3, [r3, #6]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 fae6 	bl	800856e <USBD_CtlPrepareRx>
      break;
 8006fa2:	e072      	b.n	800708a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	7850      	ldrb	r0, [r2, #1]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	4798      	blx	r3
      break;
 8006fb6:	e068      	b.n	800708a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	785b      	ldrb	r3, [r3, #1]
 8006fbc:	2b0b      	cmp	r3, #11
 8006fbe:	d852      	bhi.n	8007066 <USBD_CDC_Setup+0x162>
 8006fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fc8 <USBD_CDC_Setup+0xc4>)
 8006fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc6:	bf00      	nop
 8006fc8:	08006ff9 	.word	0x08006ff9
 8006fcc:	08007075 	.word	0x08007075
 8006fd0:	08007067 	.word	0x08007067
 8006fd4:	08007067 	.word	0x08007067
 8006fd8:	08007067 	.word	0x08007067
 8006fdc:	08007067 	.word	0x08007067
 8006fe0:	08007067 	.word	0x08007067
 8006fe4:	08007067 	.word	0x08007067
 8006fe8:	08007067 	.word	0x08007067
 8006fec:	08007067 	.word	0x08007067
 8006ff0:	08007023 	.word	0x08007023
 8006ff4:	0800704d 	.word	0x0800704d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b03      	cmp	r3, #3
 8007002:	d107      	bne.n	8007014 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007004:	f107 030a 	add.w	r3, r7, #10
 8007008:	2202      	movs	r2, #2
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 fa82 	bl	8008516 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007012:	e032      	b.n	800707a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f001 fa0c 	bl	8008434 <USBD_CtlError>
            ret = USBD_FAIL;
 800701c:	2303      	movs	r3, #3
 800701e:	75fb      	strb	r3, [r7, #23]
          break;
 8007020:	e02b      	b.n	800707a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b03      	cmp	r3, #3
 800702c:	d107      	bne.n	800703e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800702e:	f107 030d 	add.w	r3, r7, #13
 8007032:	2201      	movs	r2, #1
 8007034:	4619      	mov	r1, r3
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f001 fa6d 	bl	8008516 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800703c:	e01d      	b.n	800707a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 f9f7 	bl	8008434 <USBD_CtlError>
            ret = USBD_FAIL;
 8007046:	2303      	movs	r3, #3
 8007048:	75fb      	strb	r3, [r7, #23]
          break;
 800704a:	e016      	b.n	800707a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b03      	cmp	r3, #3
 8007056:	d00f      	beq.n	8007078 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f001 f9ea 	bl	8008434 <USBD_CtlError>
            ret = USBD_FAIL;
 8007060:	2303      	movs	r3, #3
 8007062:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007064:	e008      	b.n	8007078 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 f9e3 	bl	8008434 <USBD_CtlError>
          ret = USBD_FAIL;
 800706e:	2303      	movs	r3, #3
 8007070:	75fb      	strb	r3, [r7, #23]
          break;
 8007072:	e002      	b.n	800707a <USBD_CDC_Setup+0x176>
          break;
 8007074:	bf00      	nop
 8007076:	e008      	b.n	800708a <USBD_CDC_Setup+0x186>
          break;
 8007078:	bf00      	nop
      }
      break;
 800707a:	e006      	b.n	800708a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f001 f9d8 	bl	8008434 <USBD_CtlError>
      ret = USBD_FAIL;
 8007084:	2303      	movs	r3, #3
 8007086:	75fb      	strb	r3, [r7, #23]
      break;
 8007088:	bf00      	nop
  }

  return (uint8_t)ret;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80070a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e04f      	b.n	8007156 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80070bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80070be:	78fa      	ldrb	r2, [r7, #3]
 80070c0:	6879      	ldr	r1, [r7, #4]
 80070c2:	4613      	mov	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	440b      	add	r3, r1
 80070cc:	3318      	adds	r3, #24
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d029      	beq.n	8007128 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80070d4:	78fa      	ldrb	r2, [r7, #3]
 80070d6:	6879      	ldr	r1, [r7, #4]
 80070d8:	4613      	mov	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	440b      	add	r3, r1
 80070e2:	3318      	adds	r3, #24
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	78f9      	ldrb	r1, [r7, #3]
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	460b      	mov	r3, r1
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	440b      	add	r3, r1
 80070f0:	00db      	lsls	r3, r3, #3
 80070f2:	4403      	add	r3, r0
 80070f4:	3320      	adds	r3, #32
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80070fc:	fb01 f303 	mul.w	r3, r1, r3
 8007100:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007102:	2b00      	cmp	r3, #0
 8007104:	d110      	bne.n	8007128 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007106:	78fa      	ldrb	r2, [r7, #3]
 8007108:	6879      	ldr	r1, [r7, #4]
 800710a:	4613      	mov	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	440b      	add	r3, r1
 8007114:	3318      	adds	r3, #24
 8007116:	2200      	movs	r2, #0
 8007118:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800711a:	78f9      	ldrb	r1, [r7, #3]
 800711c:	2300      	movs	r3, #0
 800711e:	2200      	movs	r2, #0
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 feae 	bl	8008e82 <USBD_LL_Transmit>
 8007126:	e015      	b.n	8007154 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2200      	movs	r2, #0
 800712c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00b      	beq.n	8007154 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007150:	78fa      	ldrb	r2, [r7, #3]
 8007152:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	460b      	mov	r3, r1
 8007168:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007170:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800717c:	2303      	movs	r3, #3
 800717e:	e015      	b.n	80071ac <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007180:	78fb      	ldrb	r3, [r7, #3]
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 febe 	bl	8008f06 <USBD_LL_GetRxDataSize>
 800718a:	4602      	mov	r2, r0
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80071a6:	4611      	mov	r1, r2
 80071a8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80071c2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e01a      	b.n	8007204 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d014      	beq.n	8007202 <USBD_CDC_EP0_RxReady+0x4e>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80071de:	2bff      	cmp	r3, #255	@ 0xff
 80071e0:	d00f      	beq.n	8007202 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 80071f0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071f8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	22ff      	movs	r2, #255	@ 0xff
 80071fe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2243      	movs	r2, #67	@ 0x43
 8007218:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800721a:	4b03      	ldr	r3, [pc, #12]	@ (8007228 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	200000a0 	.word	0x200000a0

0800722c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2243      	movs	r2, #67	@ 0x43
 8007238:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800723a:	4b03      	ldr	r3, [pc, #12]	@ (8007248 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800723c:	4618      	mov	r0, r3
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	2000005c 	.word	0x2000005c

0800724c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2243      	movs	r2, #67	@ 0x43
 8007258:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800725a:	4b03      	ldr	r3, [pc, #12]	@ (8007268 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800725c:	4618      	mov	r0, r3
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	200000e4 	.word	0x200000e4

0800726c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	220a      	movs	r2, #10
 8007278:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800727a:	4b03      	ldr	r3, [pc, #12]	@ (8007288 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800727c:	4618      	mov	r0, r3
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	20000018 	.word	0x20000018

0800728c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800729c:	2303      	movs	r3, #3
 800729e:	e004      	b.n	80072aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b087      	sub	sp, #28
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	60f8      	str	r0, [r7, #12]
 80072be:	60b9      	str	r1, [r7, #8]
 80072c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80072c8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e008      	b.n	80072e6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b085      	sub	sp, #20
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007302:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800730a:	2303      	movs	r3, #3
 800730c:	e004      	b.n	8007318 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007332:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007334:	2301      	movs	r3, #1
 8007336:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007342:	2303      	movs	r3, #3
 8007344:	e01a      	b.n	800737c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800734c:	2b00      	cmp	r3, #0
 800734e:	d114      	bne.n	800737a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2201      	movs	r2, #1
 8007354:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800736e:	2181      	movs	r1, #129	@ 0x81
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f001 fd86 	bl	8008e82 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007392:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800739e:	2303      	movs	r3, #3
 80073a0:	e016      	b.n	80073d0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	7c1b      	ldrb	r3, [r3, #16]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d109      	bne.n	80073be <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80073b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80073b4:	2101      	movs	r1, #1
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f001 fd84 	bl	8008ec4 <USBD_LL_PrepareReceive>
 80073bc:	e007      	b.n	80073ce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80073c4:	2340      	movs	r3, #64	@ 0x40
 80073c6:	2101      	movs	r1, #1
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f001 fd7b 	bl	8008ec4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	4613      	mov	r3, r2
 80073e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e01f      	b.n	8007430 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	79fa      	ldrb	r2, [r7, #7]
 8007422:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f001 fbe3 	bl	8008bf0 <USBD_LL_Init>
 800742a:	4603      	mov	r3, r0
 800742c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800742e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3718      	adds	r7, #24
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800744c:	2303      	movs	r3, #3
 800744e:	e016      	b.n	800747e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800745e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00b      	beq.n	800747c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800746a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746c:	f107 020e 	add.w	r2, r7, #14
 8007470:	4610      	mov	r0, r2
 8007472:	4798      	blx	r3
 8007474:	4602      	mov	r2, r0
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b082      	sub	sp, #8
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f001 fc0e 	bl	8008cb0 <USBD_LL_Start>
 8007494:	4603      	mov	r3, r0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800749e:	b480      	push	{r7}
 80074a0:	b083      	sub	sp, #12
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80074c0:	2303      	movs	r3, #3
 80074c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d009      	beq.n	80074e2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	78fa      	ldrb	r2, [r7, #3]
 80074d8:	4611      	mov	r1, r2
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	4798      	blx	r3
 80074de:	4603      	mov	r3, r0
 80074e0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d007      	beq.n	8007512 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	78fa      	ldrb	r2, [r7, #3]
 800750c:	4611      	mov	r1, r2
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	4798      	blx	r3
  }

  return USBD_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	4618      	mov	r0, r3
 8007530:	f000 ff46 	bl	80083c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007542:	461a      	mov	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007550:	f003 031f 	and.w	r3, r3, #31
 8007554:	2b02      	cmp	r3, #2
 8007556:	d01a      	beq.n	800758e <USBD_LL_SetupStage+0x72>
 8007558:	2b02      	cmp	r3, #2
 800755a:	d822      	bhi.n	80075a2 <USBD_LL_SetupStage+0x86>
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <USBD_LL_SetupStage+0x4a>
 8007560:	2b01      	cmp	r3, #1
 8007562:	d00a      	beq.n	800757a <USBD_LL_SetupStage+0x5e>
 8007564:	e01d      	b.n	80075a2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f9ee 	bl	8007950 <USBD_StdDevReq>
 8007574:	4603      	mov	r3, r0
 8007576:	73fb      	strb	r3, [r7, #15]
      break;
 8007578:	e020      	b.n	80075bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fa52 	bl	8007a2c <USBD_StdItfReq>
 8007588:	4603      	mov	r3, r0
 800758a:	73fb      	strb	r3, [r7, #15]
      break;
 800758c:	e016      	b.n	80075bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007594:	4619      	mov	r1, r3
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fa91 	bl	8007abe <USBD_StdEPReq>
 800759c:	4603      	mov	r3, r0
 800759e:	73fb      	strb	r3, [r7, #15]
      break;
 80075a0:	e00c      	b.n	80075bc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80075a8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f001 fbdd 	bl	8008d70 <USBD_LL_StallEP>
 80075b6:	4603      	mov	r3, r0
 80075b8:	73fb      	strb	r3, [r7, #15]
      break;
 80075ba:	bf00      	nop
  }

  return ret;
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b086      	sub	sp, #24
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	460b      	mov	r3, r1
 80075d0:	607a      	str	r2, [r7, #4]
 80075d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80075d4:	7afb      	ldrb	r3, [r7, #11]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d138      	bne.n	800764c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80075e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075e8:	2b03      	cmp	r3, #3
 80075ea:	d14a      	bne.n	8007682 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d913      	bls.n	8007620 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	1ad2      	subs	r2, r2, r3
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	4293      	cmp	r3, r2
 8007610:	bf28      	it	cs
 8007612:	4613      	movcs	r3, r2
 8007614:	461a      	mov	r2, r3
 8007616:	6879      	ldr	r1, [r7, #4]
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 ffc5 	bl	80085a8 <USBD_CtlContinueRx>
 800761e:	e030      	b.n	8007682 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b03      	cmp	r3, #3
 800762a:	d10b      	bne.n	8007644 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d005      	beq.n	8007644 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f000 ffc0 	bl	80085ca <USBD_CtlSendStatus>
 800764a:	e01a      	b.n	8007682 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b03      	cmp	r3, #3
 8007656:	d114      	bne.n	8007682 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00e      	beq.n	8007682 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	7afa      	ldrb	r2, [r7, #11]
 800766e:	4611      	mov	r1, r2
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	4798      	blx	r3
 8007674:	4603      	mov	r3, r0
 8007676:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007678:	7dfb      	ldrb	r3, [r7, #23]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800767e:	7dfb      	ldrb	r3, [r7, #23]
 8007680:	e000      	b.n	8007684 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	460b      	mov	r3, r1
 8007696:	607a      	str	r2, [r7, #4]
 8007698:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800769a:	7afb      	ldrb	r3, [r7, #11]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d16b      	bne.n	8007778 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3314      	adds	r3, #20
 80076a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d156      	bne.n	800775e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d914      	bls.n	80076e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	689a      	ldr	r2, [r3, #8]
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	1ad2      	subs	r2, r2, r3
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	461a      	mov	r2, r3
 80076d0:	6879      	ldr	r1, [r7, #4]
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f000 ff3a 	bl	800854c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076d8:	2300      	movs	r3, #0
 80076da:	2200      	movs	r2, #0
 80076dc:	2100      	movs	r1, #0
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f001 fbf0 	bl	8008ec4 <USBD_LL_PrepareReceive>
 80076e4:	e03b      	b.n	800775e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d11c      	bne.n	800772c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d316      	bcc.n	800772c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007708:	429a      	cmp	r2, r3
 800770a:	d20f      	bcs.n	800772c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800770c:	2200      	movs	r2, #0
 800770e:	2100      	movs	r1, #0
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 ff1b 	bl	800854c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800771e:	2300      	movs	r3, #0
 8007720:	2200      	movs	r2, #0
 8007722:	2100      	movs	r1, #0
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f001 fbcd 	bl	8008ec4 <USBD_LL_PrepareReceive>
 800772a:	e018      	b.n	800775e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b03      	cmp	r3, #3
 8007736:	d10b      	bne.n	8007750 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007750:	2180      	movs	r1, #128	@ 0x80
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f001 fb0c 	bl	8008d70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 ff49 	bl	80085f0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007764:	2b01      	cmp	r3, #1
 8007766:	d122      	bne.n	80077ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7ff fe98 	bl	800749e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007776:	e01a      	b.n	80077ae <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b03      	cmp	r3, #3
 8007782:	d114      	bne.n	80077ae <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00e      	beq.n	80077ae <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	7afa      	ldrb	r2, [r7, #11]
 800779a:	4611      	mov	r1, r2
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	4798      	blx	r3
 80077a0:	4603      	mov	r3, r0
 80077a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80077a4:	7dfb      	ldrb	r3, [r7, #23]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
 80077ac:	e000      	b.n	80077b0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3718      	adds	r7, #24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e02f      	b.n	800784c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00f      	beq.n	8007816 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d009      	beq.n	8007816 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	6852      	ldr	r2, [r2, #4]
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	4611      	mov	r1, r2
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007816:	2340      	movs	r3, #64	@ 0x40
 8007818:	2200      	movs	r2, #0
 800781a:	2100      	movs	r1, #0
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f001 fa62 	bl	8008ce6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2240      	movs	r2, #64	@ 0x40
 800782e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007832:	2340      	movs	r3, #64	@ 0x40
 8007834:	2200      	movs	r2, #0
 8007836:	2180      	movs	r1, #128	@ 0x80
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f001 fa54 	bl	8008ce6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2240      	movs	r2, #64	@ 0x40
 8007848:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	460b      	mov	r3, r1
 800785e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	78fa      	ldrb	r2, [r7, #3]
 8007864:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007882:	b2da      	uxtb	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2204      	movs	r2, #4
 800788e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b04      	cmp	r3, #4
 80078b2:	d106      	bne.n	80078c2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e012      	b.n	800790c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d10b      	bne.n	800790a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d005      	beq.n	800790a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007904:	69db      	ldr	r3, [r3, #28]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	3301      	adds	r3, #1
 800792a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007932:	8a3b      	ldrh	r3, [r7, #16]
 8007934:	021b      	lsls	r3, r3, #8
 8007936:	b21a      	sxth	r2, r3
 8007938:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800793c:	4313      	orrs	r3, r2
 800793e:	b21b      	sxth	r3, r3
 8007940:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007942:	89fb      	ldrh	r3, [r7, #14]
}
 8007944:	4618      	mov	r0, r3
 8007946:	371c      	adds	r7, #28
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007966:	2b40      	cmp	r3, #64	@ 0x40
 8007968:	d005      	beq.n	8007976 <USBD_StdDevReq+0x26>
 800796a:	2b40      	cmp	r3, #64	@ 0x40
 800796c:	d853      	bhi.n	8007a16 <USBD_StdDevReq+0xc6>
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00b      	beq.n	800798a <USBD_StdDevReq+0x3a>
 8007972:	2b20      	cmp	r3, #32
 8007974:	d14f      	bne.n	8007a16 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	4798      	blx	r3
 8007984:	4603      	mov	r3, r0
 8007986:	73fb      	strb	r3, [r7, #15]
      break;
 8007988:	e04a      	b.n	8007a20 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	785b      	ldrb	r3, [r3, #1]
 800798e:	2b09      	cmp	r3, #9
 8007990:	d83b      	bhi.n	8007a0a <USBD_StdDevReq+0xba>
 8007992:	a201      	add	r2, pc, #4	@ (adr r2, 8007998 <USBD_StdDevReq+0x48>)
 8007994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007998:	080079ed 	.word	0x080079ed
 800799c:	08007a01 	.word	0x08007a01
 80079a0:	08007a0b 	.word	0x08007a0b
 80079a4:	080079f7 	.word	0x080079f7
 80079a8:	08007a0b 	.word	0x08007a0b
 80079ac:	080079cb 	.word	0x080079cb
 80079b0:	080079c1 	.word	0x080079c1
 80079b4:	08007a0b 	.word	0x08007a0b
 80079b8:	080079e3 	.word	0x080079e3
 80079bc:	080079d5 	.word	0x080079d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f9de 	bl	8007d84 <USBD_GetDescriptor>
          break;
 80079c8:	e024      	b.n	8007a14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fb6d 	bl	80080ac <USBD_SetAddress>
          break;
 80079d2:	e01f      	b.n	8007a14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fbac 	bl	8008134 <USBD_SetConfig>
 80079dc:	4603      	mov	r3, r0
 80079de:	73fb      	strb	r3, [r7, #15]
          break;
 80079e0:	e018      	b.n	8007a14 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fc4b 	bl	8008280 <USBD_GetConfig>
          break;
 80079ea:	e013      	b.n	8007a14 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fc7c 	bl	80082ec <USBD_GetStatus>
          break;
 80079f4:	e00e      	b.n	8007a14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fcab 	bl	8008354 <USBD_SetFeature>
          break;
 80079fe:	e009      	b.n	8007a14 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fcba 	bl	800837c <USBD_ClrFeature>
          break;
 8007a08:	e004      	b.n	8007a14 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fd11 	bl	8008434 <USBD_CtlError>
          break;
 8007a12:	bf00      	nop
      }
      break;
 8007a14:	e004      	b.n	8007a20 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fd0b 	bl	8008434 <USBD_CtlError>
      break;
 8007a1e:	bf00      	nop
  }

  return ret;
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop

08007a2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a42:	2b40      	cmp	r3, #64	@ 0x40
 8007a44:	d005      	beq.n	8007a52 <USBD_StdItfReq+0x26>
 8007a46:	2b40      	cmp	r3, #64	@ 0x40
 8007a48:	d82f      	bhi.n	8007aaa <USBD_StdItfReq+0x7e>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <USBD_StdItfReq+0x26>
 8007a4e:	2b20      	cmp	r3, #32
 8007a50:	d12b      	bne.n	8007aaa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d81d      	bhi.n	8007a9c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	889b      	ldrh	r3, [r3, #4]
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d813      	bhi.n	8007a92 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	4798      	blx	r3
 8007a78:	4603      	mov	r3, r0
 8007a7a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	88db      	ldrh	r3, [r3, #6]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d110      	bne.n	8007aa6 <USBD_StdItfReq+0x7a>
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10d      	bne.n	8007aa6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fd9d 	bl	80085ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a90:	e009      	b.n	8007aa6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007a92:	6839      	ldr	r1, [r7, #0]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fccd 	bl	8008434 <USBD_CtlError>
          break;
 8007a9a:	e004      	b.n	8007aa6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fcc8 	bl	8008434 <USBD_CtlError>
          break;
 8007aa4:	e000      	b.n	8007aa8 <USBD_StdItfReq+0x7c>
          break;
 8007aa6:	bf00      	nop
      }
      break;
 8007aa8:	e004      	b.n	8007ab4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fcc1 	bl	8008434 <USBD_CtlError>
      break;
 8007ab2:	bf00      	nop
  }

  return ret;
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	889b      	ldrh	r3, [r3, #4]
 8007ad0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ada:	2b40      	cmp	r3, #64	@ 0x40
 8007adc:	d007      	beq.n	8007aee <USBD_StdEPReq+0x30>
 8007ade:	2b40      	cmp	r3, #64	@ 0x40
 8007ae0:	f200 8145 	bhi.w	8007d6e <USBD_StdEPReq+0x2b0>
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00c      	beq.n	8007b02 <USBD_StdEPReq+0x44>
 8007ae8:	2b20      	cmp	r3, #32
 8007aea:	f040 8140 	bne.w	8007d6e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	4798      	blx	r3
 8007afc:	4603      	mov	r3, r0
 8007afe:	73fb      	strb	r3, [r7, #15]
      break;
 8007b00:	e13a      	b.n	8007d78 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	785b      	ldrb	r3, [r3, #1]
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d007      	beq.n	8007b1a <USBD_StdEPReq+0x5c>
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	f300 8129 	bgt.w	8007d62 <USBD_StdEPReq+0x2a4>
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d07f      	beq.n	8007c14 <USBD_StdEPReq+0x156>
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d03c      	beq.n	8007b92 <USBD_StdEPReq+0xd4>
 8007b18:	e123      	b.n	8007d62 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d002      	beq.n	8007b2c <USBD_StdEPReq+0x6e>
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d016      	beq.n	8007b58 <USBD_StdEPReq+0x9a>
 8007b2a:	e02c      	b.n	8007b86 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00d      	beq.n	8007b4e <USBD_StdEPReq+0x90>
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	2b80      	cmp	r3, #128	@ 0x80
 8007b36:	d00a      	beq.n	8007b4e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 f917 	bl	8008d70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b42:	2180      	movs	r1, #128	@ 0x80
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 f913 	bl	8008d70 <USBD_LL_StallEP>
 8007b4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b4c:	e020      	b.n	8007b90 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fc6f 	bl	8008434 <USBD_CtlError>
              break;
 8007b56:	e01b      	b.n	8007b90 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	885b      	ldrh	r3, [r3, #2]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10e      	bne.n	8007b7e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00b      	beq.n	8007b7e <USBD_StdEPReq+0xc0>
 8007b66:	7bbb      	ldrb	r3, [r7, #14]
 8007b68:	2b80      	cmp	r3, #128	@ 0x80
 8007b6a:	d008      	beq.n	8007b7e <USBD_StdEPReq+0xc0>
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	88db      	ldrh	r3, [r3, #6]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d104      	bne.n	8007b7e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f001 f8f9 	bl	8008d70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fd23 	bl	80085ca <USBD_CtlSendStatus>

              break;
 8007b84:	e004      	b.n	8007b90 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fc53 	bl	8008434 <USBD_CtlError>
              break;
 8007b8e:	bf00      	nop
          }
          break;
 8007b90:	e0ec      	b.n	8007d6c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d002      	beq.n	8007ba4 <USBD_StdEPReq+0xe6>
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	d016      	beq.n	8007bd0 <USBD_StdEPReq+0x112>
 8007ba2:	e030      	b.n	8007c06 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ba4:	7bbb      	ldrb	r3, [r7, #14]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00d      	beq.n	8007bc6 <USBD_StdEPReq+0x108>
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
 8007bac:	2b80      	cmp	r3, #128	@ 0x80
 8007bae:	d00a      	beq.n	8007bc6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f001 f8db 	bl	8008d70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bba:	2180      	movs	r1, #128	@ 0x80
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f001 f8d7 	bl	8008d70 <USBD_LL_StallEP>
 8007bc2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007bc4:	e025      	b.n	8007c12 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fc33 	bl	8008434 <USBD_CtlError>
              break;
 8007bce:	e020      	b.n	8007c12 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	885b      	ldrh	r3, [r3, #2]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d11b      	bne.n	8007c10 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007bd8:	7bbb      	ldrb	r3, [r7, #14]
 8007bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d004      	beq.n	8007bec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f001 f8e1 	bl	8008dae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fcec 	bl	80085ca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	4798      	blx	r3
 8007c00:	4603      	mov	r3, r0
 8007c02:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007c04:	e004      	b.n	8007c10 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fc13 	bl	8008434 <USBD_CtlError>
              break;
 8007c0e:	e000      	b.n	8007c12 <USBD_StdEPReq+0x154>
              break;
 8007c10:	bf00      	nop
          }
          break;
 8007c12:	e0ab      	b.n	8007d6c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d002      	beq.n	8007c26 <USBD_StdEPReq+0x168>
 8007c20:	2b03      	cmp	r3, #3
 8007c22:	d032      	beq.n	8007c8a <USBD_StdEPReq+0x1cc>
 8007c24:	e097      	b.n	8007d56 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c26:	7bbb      	ldrb	r3, [r7, #14]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d007      	beq.n	8007c3c <USBD_StdEPReq+0x17e>
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	2b80      	cmp	r3, #128	@ 0x80
 8007c30:	d004      	beq.n	8007c3c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fbfd 	bl	8008434 <USBD_CtlError>
                break;
 8007c3a:	e091      	b.n	8007d60 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	da0b      	bge.n	8007c5c <USBD_StdEPReq+0x19e>
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	3310      	adds	r3, #16
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	4413      	add	r3, r2
 8007c58:	3304      	adds	r3, #4
 8007c5a:	e00b      	b.n	8007c74 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c5c:	7bbb      	ldrb	r3, [r7, #14]
 8007c5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	4413      	add	r3, r2
 8007c72:	3304      	adds	r3, #4
 8007c74:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	2202      	movs	r2, #2
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fc47 	bl	8008516 <USBD_CtlSendData>
              break;
 8007c88:	e06a      	b.n	8007d60 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	da11      	bge.n	8007cb6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c92:	7bbb      	ldrb	r3, [r7, #14]
 8007c94:	f003 020f 	and.w	r2, r3, #15
 8007c98:	6879      	ldr	r1, [r7, #4]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	440b      	add	r3, r1
 8007ca4:	3324      	adds	r3, #36	@ 0x24
 8007ca6:	881b      	ldrh	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d117      	bne.n	8007cdc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fbc0 	bl	8008434 <USBD_CtlError>
                  break;
 8007cb4:	e054      	b.n	8007d60 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007cb6:	7bbb      	ldrb	r3, [r7, #14]
 8007cb8:	f003 020f 	and.w	r2, r3, #15
 8007cbc:	6879      	ldr	r1, [r7, #4]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	440b      	add	r3, r1
 8007cc8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007ccc:	881b      	ldrh	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d104      	bne.n	8007cdc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fbad 	bl	8008434 <USBD_CtlError>
                  break;
 8007cda:	e041      	b.n	8007d60 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	da0b      	bge.n	8007cfc <USBD_StdEPReq+0x23e>
 8007ce4:	7bbb      	ldrb	r3, [r7, #14]
 8007ce6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007cea:	4613      	mov	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	3310      	adds	r3, #16
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	e00b      	b.n	8007d14 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
 8007cfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d02:	4613      	mov	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	4413      	add	r3, r2
 8007d12:	3304      	adds	r3, #4
 8007d14:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d002      	beq.n	8007d22 <USBD_StdEPReq+0x264>
 8007d1c:	7bbb      	ldrb	r3, [r7, #14]
 8007d1e:	2b80      	cmp	r3, #128	@ 0x80
 8007d20:	d103      	bne.n	8007d2a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2200      	movs	r2, #0
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	e00e      	b.n	8007d48 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d2a:	7bbb      	ldrb	r3, [r7, #14]
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f001 f85c 	bl	8008dec <USBD_LL_IsStallEP>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d003      	beq.n	8007d42 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]
 8007d40:	e002      	b.n	8007d48 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2200      	movs	r2, #0
 8007d46:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fbe1 	bl	8008516 <USBD_CtlSendData>
              break;
 8007d54:	e004      	b.n	8007d60 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fb6b 	bl	8008434 <USBD_CtlError>
              break;
 8007d5e:	bf00      	nop
          }
          break;
 8007d60:	e004      	b.n	8007d6c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fb65 	bl	8008434 <USBD_CtlError>
          break;
 8007d6a:	bf00      	nop
      }
      break;
 8007d6c:	e004      	b.n	8007d78 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fb5f 	bl	8008434 <USBD_CtlError>
      break;
 8007d76:	bf00      	nop
  }

  return ret;
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
	...

08007d84 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d92:	2300      	movs	r3, #0
 8007d94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	885b      	ldrh	r3, [r3, #2]
 8007d9e:	0a1b      	lsrs	r3, r3, #8
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	3b01      	subs	r3, #1
 8007da4:	2b0e      	cmp	r3, #14
 8007da6:	f200 8152 	bhi.w	800804e <USBD_GetDescriptor+0x2ca>
 8007daa:	a201      	add	r2, pc, #4	@ (adr r2, 8007db0 <USBD_GetDescriptor+0x2c>)
 8007dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db0:	08007e21 	.word	0x08007e21
 8007db4:	08007e39 	.word	0x08007e39
 8007db8:	08007e79 	.word	0x08007e79
 8007dbc:	0800804f 	.word	0x0800804f
 8007dc0:	0800804f 	.word	0x0800804f
 8007dc4:	08007fef 	.word	0x08007fef
 8007dc8:	0800801b 	.word	0x0800801b
 8007dcc:	0800804f 	.word	0x0800804f
 8007dd0:	0800804f 	.word	0x0800804f
 8007dd4:	0800804f 	.word	0x0800804f
 8007dd8:	0800804f 	.word	0x0800804f
 8007ddc:	0800804f 	.word	0x0800804f
 8007de0:	0800804f 	.word	0x0800804f
 8007de4:	0800804f 	.word	0x0800804f
 8007de8:	08007ded 	.word	0x08007ded
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00b      	beq.n	8007e10 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	7c12      	ldrb	r2, [r2, #16]
 8007e04:	f107 0108 	add.w	r1, r7, #8
 8007e08:	4610      	mov	r0, r2
 8007e0a:	4798      	blx	r3
 8007e0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e0e:	e126      	b.n	800805e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fb0e 	bl	8008434 <USBD_CtlError>
        err++;
 8007e18:	7afb      	ldrb	r3, [r7, #11]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	72fb      	strb	r3, [r7, #11]
      break;
 8007e1e:	e11e      	b.n	800805e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	7c12      	ldrb	r2, [r2, #16]
 8007e2c:	f107 0108 	add.w	r1, r7, #8
 8007e30:	4610      	mov	r0, r2
 8007e32:	4798      	blx	r3
 8007e34:	60f8      	str	r0, [r7, #12]
      break;
 8007e36:	e112      	b.n	800805e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	7c1b      	ldrb	r3, [r3, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10d      	bne.n	8007e5c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e48:	f107 0208 	add.w	r2, r7, #8
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	4798      	blx	r3
 8007e50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3301      	adds	r3, #1
 8007e56:	2202      	movs	r2, #2
 8007e58:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e5a:	e100      	b.n	800805e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e64:	f107 0208 	add.w	r2, r7, #8
 8007e68:	4610      	mov	r0, r2
 8007e6a:	4798      	blx	r3
 8007e6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	3301      	adds	r3, #1
 8007e72:	2202      	movs	r2, #2
 8007e74:	701a      	strb	r2, [r3, #0]
      break;
 8007e76:	e0f2      	b.n	800805e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	885b      	ldrh	r3, [r3, #2]
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b05      	cmp	r3, #5
 8007e80:	f200 80ac 	bhi.w	8007fdc <USBD_GetDescriptor+0x258>
 8007e84:	a201      	add	r2, pc, #4	@ (adr r2, 8007e8c <USBD_GetDescriptor+0x108>)
 8007e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8a:	bf00      	nop
 8007e8c:	08007ea5 	.word	0x08007ea5
 8007e90:	08007ed9 	.word	0x08007ed9
 8007e94:	08007f0d 	.word	0x08007f0d
 8007e98:	08007f41 	.word	0x08007f41
 8007e9c:	08007f75 	.word	0x08007f75
 8007ea0:	08007fa9 	.word	0x08007fa9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00b      	beq.n	8007ec8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	7c12      	ldrb	r2, [r2, #16]
 8007ebc:	f107 0108 	add.w	r1, r7, #8
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	4798      	blx	r3
 8007ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ec6:	e091      	b.n	8007fec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fab2 	bl	8008434 <USBD_CtlError>
            err++;
 8007ed0:	7afb      	ldrb	r3, [r7, #11]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ed6:	e089      	b.n	8007fec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00b      	beq.n	8007efc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	7c12      	ldrb	r2, [r2, #16]
 8007ef0:	f107 0108 	add.w	r1, r7, #8
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	4798      	blx	r3
 8007ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007efa:	e077      	b.n	8007fec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fa98 	bl	8008434 <USBD_CtlError>
            err++;
 8007f04:	7afb      	ldrb	r3, [r7, #11]
 8007f06:	3301      	adds	r3, #1
 8007f08:	72fb      	strb	r3, [r7, #11]
          break;
 8007f0a:	e06f      	b.n	8007fec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00b      	beq.n	8007f30 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	7c12      	ldrb	r2, [r2, #16]
 8007f24:	f107 0108 	add.w	r1, r7, #8
 8007f28:	4610      	mov	r0, r2
 8007f2a:	4798      	blx	r3
 8007f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f2e:	e05d      	b.n	8007fec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fa7e 	bl	8008434 <USBD_CtlError>
            err++;
 8007f38:	7afb      	ldrb	r3, [r7, #11]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f3e:	e055      	b.n	8007fec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00b      	beq.n	8007f64 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	7c12      	ldrb	r2, [r2, #16]
 8007f58:	f107 0108 	add.w	r1, r7, #8
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	4798      	blx	r3
 8007f60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f62:	e043      	b.n	8007fec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fa64 	bl	8008434 <USBD_CtlError>
            err++;
 8007f6c:	7afb      	ldrb	r3, [r7, #11]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	72fb      	strb	r3, [r7, #11]
          break;
 8007f72:	e03b      	b.n	8007fec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f7a:	695b      	ldr	r3, [r3, #20]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00b      	beq.n	8007f98 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f86:	695b      	ldr	r3, [r3, #20]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	7c12      	ldrb	r2, [r2, #16]
 8007f8c:	f107 0108 	add.w	r1, r7, #8
 8007f90:	4610      	mov	r0, r2
 8007f92:	4798      	blx	r3
 8007f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f96:	e029      	b.n	8007fec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fa4a 	bl	8008434 <USBD_CtlError>
            err++;
 8007fa0:	7afb      	ldrb	r3, [r7, #11]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8007fa6:	e021      	b.n	8007fec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00b      	beq.n	8007fcc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	7c12      	ldrb	r2, [r2, #16]
 8007fc0:	f107 0108 	add.w	r1, r7, #8
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	4798      	blx	r3
 8007fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fca:	e00f      	b.n	8007fec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fa30 	bl	8008434 <USBD_CtlError>
            err++;
 8007fd4:	7afb      	ldrb	r3, [r7, #11]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007fda:	e007      	b.n	8007fec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fa28 	bl	8008434 <USBD_CtlError>
          err++;
 8007fe4:	7afb      	ldrb	r3, [r7, #11]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007fea:	bf00      	nop
      }
      break;
 8007fec:	e037      	b.n	800805e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	7c1b      	ldrb	r3, [r3, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d109      	bne.n	800800a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ffe:	f107 0208 	add.w	r2, r7, #8
 8008002:	4610      	mov	r0, r2
 8008004:	4798      	blx	r3
 8008006:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008008:	e029      	b.n	800805e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fa11 	bl	8008434 <USBD_CtlError>
        err++;
 8008012:	7afb      	ldrb	r3, [r7, #11]
 8008014:	3301      	adds	r3, #1
 8008016:	72fb      	strb	r3, [r7, #11]
      break;
 8008018:	e021      	b.n	800805e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	7c1b      	ldrb	r3, [r3, #16]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10d      	bne.n	800803e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800802a:	f107 0208 	add.w	r2, r7, #8
 800802e:	4610      	mov	r0, r2
 8008030:	4798      	blx	r3
 8008032:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	3301      	adds	r3, #1
 8008038:	2207      	movs	r2, #7
 800803a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800803c:	e00f      	b.n	800805e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f9f7 	bl	8008434 <USBD_CtlError>
        err++;
 8008046:	7afb      	ldrb	r3, [r7, #11]
 8008048:	3301      	adds	r3, #1
 800804a:	72fb      	strb	r3, [r7, #11]
      break;
 800804c:	e007      	b.n	800805e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f9ef 	bl	8008434 <USBD_CtlError>
      err++;
 8008056:	7afb      	ldrb	r3, [r7, #11]
 8008058:	3301      	adds	r3, #1
 800805a:	72fb      	strb	r3, [r7, #11]
      break;
 800805c:	bf00      	nop
  }

  if (err != 0U)
 800805e:	7afb      	ldrb	r3, [r7, #11]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d11e      	bne.n	80080a2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	88db      	ldrh	r3, [r3, #6]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d016      	beq.n	800809a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800806c:	893b      	ldrh	r3, [r7, #8]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00e      	beq.n	8008090 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	88da      	ldrh	r2, [r3, #6]
 8008076:	893b      	ldrh	r3, [r7, #8]
 8008078:	4293      	cmp	r3, r2
 800807a:	bf28      	it	cs
 800807c:	4613      	movcs	r3, r2
 800807e:	b29b      	uxth	r3, r3
 8008080:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008082:	893b      	ldrh	r3, [r7, #8]
 8008084:	461a      	mov	r2, r3
 8008086:	68f9      	ldr	r1, [r7, #12]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fa44 	bl	8008516 <USBD_CtlSendData>
 800808e:	e009      	b.n	80080a4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f9ce 	bl	8008434 <USBD_CtlError>
 8008098:	e004      	b.n	80080a4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fa95 	bl	80085ca <USBD_CtlSendStatus>
 80080a0:	e000      	b.n	80080a4 <USBD_GetDescriptor+0x320>
    return;
 80080a2:	bf00      	nop
  }
}
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop

080080ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	889b      	ldrh	r3, [r3, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d131      	bne.n	8008122 <USBD_SetAddress+0x76>
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	88db      	ldrh	r3, [r3, #6]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d12d      	bne.n	8008122 <USBD_SetAddress+0x76>
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	885b      	ldrh	r3, [r3, #2]
 80080ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80080cc:	d829      	bhi.n	8008122 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	885b      	ldrh	r3, [r3, #2]
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d104      	bne.n	80080f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f9a3 	bl	8008434 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ee:	e01d      	b.n	800812c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	7bfa      	ldrb	r2, [r7, #15]
 80080f4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fea1 	bl	8008e44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fa61 	bl	80085ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008108:	7bfb      	ldrb	r3, [r7, #15]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d004      	beq.n	8008118 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2202      	movs	r2, #2
 8008112:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008116:	e009      	b.n	800812c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008120:	e004      	b.n	800812c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f985 	bl	8008434 <USBD_CtlError>
  }
}
 800812a:	bf00      	nop
 800812c:	bf00      	nop
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	885b      	ldrh	r3, [r3, #2]
 8008146:	b2da      	uxtb	r2, r3
 8008148:	4b4c      	ldr	r3, [pc, #304]	@ (800827c <USBD_SetConfig+0x148>)
 800814a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800814c:	4b4b      	ldr	r3, [pc, #300]	@ (800827c <USBD_SetConfig+0x148>)
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d905      	bls.n	8008160 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f96c 	bl	8008434 <USBD_CtlError>
    return USBD_FAIL;
 800815c:	2303      	movs	r3, #3
 800815e:	e088      	b.n	8008272 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b02      	cmp	r3, #2
 800816a:	d002      	beq.n	8008172 <USBD_SetConfig+0x3e>
 800816c:	2b03      	cmp	r3, #3
 800816e:	d025      	beq.n	80081bc <USBD_SetConfig+0x88>
 8008170:	e071      	b.n	8008256 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008172:	4b42      	ldr	r3, [pc, #264]	@ (800827c <USBD_SetConfig+0x148>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d01c      	beq.n	80081b4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800817a:	4b40      	ldr	r3, [pc, #256]	@ (800827c <USBD_SetConfig+0x148>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008184:	4b3d      	ldr	r3, [pc, #244]	@ (800827c <USBD_SetConfig+0x148>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7ff f992 	bl	80074b4 <USBD_SetClassConfig>
 8008190:	4603      	mov	r3, r0
 8008192:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008194:	7bfb      	ldrb	r3, [r7, #15]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d004      	beq.n	80081a4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f949 	bl	8008434 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80081a2:	e065      	b.n	8008270 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fa10 	bl	80085ca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2203      	movs	r2, #3
 80081ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80081b2:	e05d      	b.n	8008270 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fa08 	bl	80085ca <USBD_CtlSendStatus>
      break;
 80081ba:	e059      	b.n	8008270 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80081bc:	4b2f      	ldr	r3, [pc, #188]	@ (800827c <USBD_SetConfig+0x148>)
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d112      	bne.n	80081ea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2202      	movs	r2, #2
 80081c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80081cc:	4b2b      	ldr	r3, [pc, #172]	@ (800827c <USBD_SetConfig+0x148>)
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	461a      	mov	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081d6:	4b29      	ldr	r3, [pc, #164]	@ (800827c <USBD_SetConfig+0x148>)
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff f985 	bl	80074ec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f9f1 	bl	80085ca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80081e8:	e042      	b.n	8008270 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80081ea:	4b24      	ldr	r3, [pc, #144]	@ (800827c <USBD_SetConfig+0x148>)
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d02a      	beq.n	800824e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff f973 	bl	80074ec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008206:	4b1d      	ldr	r3, [pc, #116]	@ (800827c <USBD_SetConfig+0x148>)
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008210:	4b1a      	ldr	r3, [pc, #104]	@ (800827c <USBD_SetConfig+0x148>)
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff f94c 	bl	80074b4 <USBD_SetClassConfig>
 800821c:	4603      	mov	r3, r0
 800821e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00f      	beq.n	8008246 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f903 	bl	8008434 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	b2db      	uxtb	r3, r3
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7ff f958 	bl	80074ec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008244:	e014      	b.n	8008270 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f9bf 	bl	80085ca <USBD_CtlSendStatus>
      break;
 800824c:	e010      	b.n	8008270 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f9bb 	bl	80085ca <USBD_CtlSendStatus>
      break;
 8008254:	e00c      	b.n	8008270 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 f8eb 	bl	8008434 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800825e:	4b07      	ldr	r3, [pc, #28]	@ (800827c <USBD_SetConfig+0x148>)
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7ff f941 	bl	80074ec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800826a:	2303      	movs	r3, #3
 800826c:	73fb      	strb	r3, [r7, #15]
      break;
 800826e:	bf00      	nop
  }

  return ret;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	20000440 	.word	0x20000440

08008280 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	88db      	ldrh	r3, [r3, #6]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d004      	beq.n	800829c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f8cd 	bl	8008434 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800829a:	e023      	b.n	80082e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	dc02      	bgt.n	80082ae <USBD_GetConfig+0x2e>
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	dc03      	bgt.n	80082b4 <USBD_GetConfig+0x34>
 80082ac:	e015      	b.n	80082da <USBD_GetConfig+0x5a>
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d00b      	beq.n	80082ca <USBD_GetConfig+0x4a>
 80082b2:	e012      	b.n	80082da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	3308      	adds	r3, #8
 80082be:	2201      	movs	r2, #1
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f927 	bl	8008516 <USBD_CtlSendData>
        break;
 80082c8:	e00c      	b.n	80082e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	3304      	adds	r3, #4
 80082ce:	2201      	movs	r2, #1
 80082d0:	4619      	mov	r1, r3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f91f 	bl	8008516 <USBD_CtlSendData>
        break;
 80082d8:	e004      	b.n	80082e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80082da:	6839      	ldr	r1, [r7, #0]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f8a9 	bl	8008434 <USBD_CtlError>
        break;
 80082e2:	bf00      	nop
}
 80082e4:	bf00      	nop
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	3b01      	subs	r3, #1
 8008300:	2b02      	cmp	r3, #2
 8008302:	d81e      	bhi.n	8008342 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	88db      	ldrh	r3, [r3, #6]
 8008308:	2b02      	cmp	r3, #2
 800830a:	d004      	beq.n	8008316 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f890 	bl	8008434 <USBD_CtlError>
        break;
 8008314:	e01a      	b.n	800834c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008322:	2b00      	cmp	r3, #0
 8008324:	d005      	beq.n	8008332 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	f043 0202 	orr.w	r2, r3, #2
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	330c      	adds	r3, #12
 8008336:	2202      	movs	r2, #2
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f8eb 	bl	8008516 <USBD_CtlSendData>
      break;
 8008340:	e004      	b.n	800834c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f875 	bl	8008434 <USBD_CtlError>
      break;
 800834a:	bf00      	nop
  }
}
 800834c:	bf00      	nop
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	885b      	ldrh	r3, [r3, #2]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d106      	bne.n	8008374 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f92b 	bl	80085ca <USBD_CtlSendStatus>
  }
}
 8008374:	bf00      	nop
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800838c:	b2db      	uxtb	r3, r3
 800838e:	3b01      	subs	r3, #1
 8008390:	2b02      	cmp	r3, #2
 8008392:	d80b      	bhi.n	80083ac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	885b      	ldrh	r3, [r3, #2]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d10c      	bne.n	80083b6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f910 	bl	80085ca <USBD_CtlSendStatus>
      }
      break;
 80083aa:	e004      	b.n	80083b6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f840 	bl	8008434 <USBD_CtlError>
      break;
 80083b4:	e000      	b.n	80083b8 <USBD_ClrFeature+0x3c>
      break;
 80083b6:	bf00      	nop
  }
}
 80083b8:	bf00      	nop
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	781a      	ldrb	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	3301      	adds	r3, #1
 80083da:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	781a      	ldrb	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3301      	adds	r3, #1
 80083e8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff fa92 	bl	8007914 <SWAPBYTE>
 80083f0:	4603      	mov	r3, r0
 80083f2:	461a      	mov	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	3301      	adds	r3, #1
 80083fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	3301      	adds	r3, #1
 8008402:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f7ff fa85 	bl	8007914 <SWAPBYTE>
 800840a:	4603      	mov	r3, r0
 800840c:	461a      	mov	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	3301      	adds	r3, #1
 8008416:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3301      	adds	r3, #1
 800841c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f7ff fa78 	bl	8007914 <SWAPBYTE>
 8008424:	4603      	mov	r3, r0
 8008426:	461a      	mov	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	80da      	strh	r2, [r3, #6]
}
 800842c:	bf00      	nop
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800843e:	2180      	movs	r1, #128	@ 0x80
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fc95 	bl	8008d70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008446:	2100      	movs	r1, #0
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fc91 	bl	8008d70 <USBD_LL_StallEP>
}
 800844e:	bf00      	nop
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b086      	sub	sp, #24
 800845a:	af00      	add	r7, sp, #0
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	60b9      	str	r1, [r7, #8]
 8008460:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008462:	2300      	movs	r3, #0
 8008464:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d036      	beq.n	80084da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008470:	6938      	ldr	r0, [r7, #16]
 8008472:	f000 f836 	bl	80084e2 <USBD_GetLen>
 8008476:	4603      	mov	r3, r0
 8008478:	3301      	adds	r3, #1
 800847a:	b29b      	uxth	r3, r3
 800847c:	005b      	lsls	r3, r3, #1
 800847e:	b29a      	uxth	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008484:	7dfb      	ldrb	r3, [r7, #23]
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	4413      	add	r3, r2
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	7812      	ldrb	r2, [r2, #0]
 800848e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008490:	7dfb      	ldrb	r3, [r7, #23]
 8008492:	3301      	adds	r3, #1
 8008494:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008496:	7dfb      	ldrb	r3, [r7, #23]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	4413      	add	r3, r2
 800849c:	2203      	movs	r2, #3
 800849e:	701a      	strb	r2, [r3, #0]
  idx++;
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
 80084a2:	3301      	adds	r3, #1
 80084a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80084a6:	e013      	b.n	80084d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80084a8:	7dfb      	ldrb	r3, [r7, #23]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	4413      	add	r3, r2
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	7812      	ldrb	r2, [r2, #0]
 80084b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	3301      	adds	r3, #1
 80084b8:	613b      	str	r3, [r7, #16]
    idx++;
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
 80084bc:	3301      	adds	r3, #1
 80084be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80084c0:	7dfb      	ldrb	r3, [r7, #23]
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	4413      	add	r3, r2
 80084c6:	2200      	movs	r2, #0
 80084c8:	701a      	strb	r2, [r3, #0]
    idx++;
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
 80084cc:	3301      	adds	r3, #1
 80084ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e7      	bne.n	80084a8 <USBD_GetString+0x52>
 80084d8:	e000      	b.n	80084dc <USBD_GetString+0x86>
    return;
 80084da:	bf00      	nop
  }
}
 80084dc:	3718      	adds	r7, #24
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b085      	sub	sp, #20
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80084f2:	e005      	b.n	8008500 <USBD_GetLen+0x1e>
  {
    len++;
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
 80084f6:	3301      	adds	r3, #1
 80084f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	3301      	adds	r3, #1
 80084fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1f5      	bne.n	80084f4 <USBD_GetLen+0x12>
  }

  return len;
 8008508:	7bfb      	ldrb	r3, [r7, #15]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2202      	movs	r2, #2
 8008526:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	2100      	movs	r1, #0
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f000 fca0 	bl	8008e82 <USBD_LL_Transmit>

  return USBD_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	2100      	movs	r1, #0
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f000 fc8f 	bl	8008e82 <USBD_LL_Transmit>

  return USBD_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	60f8      	str	r0, [r7, #12]
 8008576:	60b9      	str	r1, [r7, #8]
 8008578:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2203      	movs	r2, #3
 800857e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68ba      	ldr	r2, [r7, #8]
 8008596:	2100      	movs	r1, #0
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 fc93 	bl	8008ec4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	2100      	movs	r1, #0
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f000 fc82 	bl	8008ec4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2204      	movs	r2, #4
 80085d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80085da:	2300      	movs	r3, #0
 80085dc:	2200      	movs	r2, #0
 80085de:	2100      	movs	r1, #0
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fc4e 	bl	8008e82 <USBD_LL_Transmit>

  return USBD_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2205      	movs	r2, #5
 80085fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008600:	2300      	movs	r3, #0
 8008602:	2200      	movs	r2, #0
 8008604:	2100      	movs	r1, #0
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fc5c 	bl	8008ec4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
	...

08008618 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800861c:	2200      	movs	r2, #0
 800861e:	4912      	ldr	r1, [pc, #72]	@ (8008668 <MX_USB_Device_Init+0x50>)
 8008620:	4812      	ldr	r0, [pc, #72]	@ (800866c <MX_USB_Device_Init+0x54>)
 8008622:	f7fe fed9 	bl	80073d8 <USBD_Init>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d001      	beq.n	8008630 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800862c:	f7f8 f9a2 	bl	8000974 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008630:	490f      	ldr	r1, [pc, #60]	@ (8008670 <MX_USB_Device_Init+0x58>)
 8008632:	480e      	ldr	r0, [pc, #56]	@ (800866c <MX_USB_Device_Init+0x54>)
 8008634:	f7fe ff00 	bl	8007438 <USBD_RegisterClass>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800863e:	f7f8 f999 	bl	8000974 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008642:	490c      	ldr	r1, [pc, #48]	@ (8008674 <MX_USB_Device_Init+0x5c>)
 8008644:	4809      	ldr	r0, [pc, #36]	@ (800866c <MX_USB_Device_Init+0x54>)
 8008646:	f7fe fe21 	bl	800728c <USBD_CDC_RegisterInterface>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008650:	f7f8 f990 	bl	8000974 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008654:	4805      	ldr	r0, [pc, #20]	@ (800866c <MX_USB_Device_Init+0x54>)
 8008656:	f7fe ff16 	bl	8007486 <USBD_Start>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008660:	f7f8 f988 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008664:	bf00      	nop
 8008666:	bd80      	pop	{r7, pc}
 8008668:	2000013c 	.word	0x2000013c
 800866c:	20000444 	.word	0x20000444
 8008670:	20000024 	.word	0x20000024
 8008674:	20000128 	.word	0x20000128

08008678 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800867c:	2200      	movs	r2, #0
 800867e:	4905      	ldr	r1, [pc, #20]	@ (8008694 <CDC_Init_FS+0x1c>)
 8008680:	4805      	ldr	r0, [pc, #20]	@ (8008698 <CDC_Init_FS+0x20>)
 8008682:	f7fe fe18 	bl	80072b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008686:	4905      	ldr	r1, [pc, #20]	@ (800869c <CDC_Init_FS+0x24>)
 8008688:	4803      	ldr	r0, [pc, #12]	@ (8008698 <CDC_Init_FS+0x20>)
 800868a:	f7fe fe32 	bl	80072f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800868e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008690:	4618      	mov	r0, r3
 8008692:	bd80      	pop	{r7, pc}
 8008694:	20000b14 	.word	0x20000b14
 8008698:	20000444 	.word	0x20000444
 800869c:	20000714 	.word	0x20000714

080086a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80086a0:	b480      	push	{r7}
 80086a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80086a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4603      	mov	r3, r0
 80086b8:	6039      	str	r1, [r7, #0]
 80086ba:	71fb      	strb	r3, [r7, #7]
 80086bc:	4613      	mov	r3, r2
 80086be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80086c0:	79fb      	ldrb	r3, [r7, #7]
 80086c2:	2b23      	cmp	r3, #35	@ 0x23
 80086c4:	d84a      	bhi.n	800875c <CDC_Control_FS+0xac>
 80086c6:	a201      	add	r2, pc, #4	@ (adr r2, 80086cc <CDC_Control_FS+0x1c>)
 80086c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086cc:	0800875d 	.word	0x0800875d
 80086d0:	0800875d 	.word	0x0800875d
 80086d4:	0800875d 	.word	0x0800875d
 80086d8:	0800875d 	.word	0x0800875d
 80086dc:	0800875d 	.word	0x0800875d
 80086e0:	0800875d 	.word	0x0800875d
 80086e4:	0800875d 	.word	0x0800875d
 80086e8:	0800875d 	.word	0x0800875d
 80086ec:	0800875d 	.word	0x0800875d
 80086f0:	0800875d 	.word	0x0800875d
 80086f4:	0800875d 	.word	0x0800875d
 80086f8:	0800875d 	.word	0x0800875d
 80086fc:	0800875d 	.word	0x0800875d
 8008700:	0800875d 	.word	0x0800875d
 8008704:	0800875d 	.word	0x0800875d
 8008708:	0800875d 	.word	0x0800875d
 800870c:	0800875d 	.word	0x0800875d
 8008710:	0800875d 	.word	0x0800875d
 8008714:	0800875d 	.word	0x0800875d
 8008718:	0800875d 	.word	0x0800875d
 800871c:	0800875d 	.word	0x0800875d
 8008720:	0800875d 	.word	0x0800875d
 8008724:	0800875d 	.word	0x0800875d
 8008728:	0800875d 	.word	0x0800875d
 800872c:	0800875d 	.word	0x0800875d
 8008730:	0800875d 	.word	0x0800875d
 8008734:	0800875d 	.word	0x0800875d
 8008738:	0800875d 	.word	0x0800875d
 800873c:	0800875d 	.word	0x0800875d
 8008740:	0800875d 	.word	0x0800875d
 8008744:	0800875d 	.word	0x0800875d
 8008748:	0800875d 	.word	0x0800875d
 800874c:	0800875d 	.word	0x0800875d
 8008750:	0800875d 	.word	0x0800875d
 8008754:	0800875d 	.word	0x0800875d
 8008758:	0800875d 	.word	0x0800875d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800875c:	bf00      	nop
  }

  return (USBD_OK);
 800875e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008760:	4618      	mov	r0, r3
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008776:	6879      	ldr	r1, [r7, #4]
 8008778:	4805      	ldr	r0, [pc, #20]	@ (8008790 <CDC_Receive_FS+0x24>)
 800877a:	f7fe fdba 	bl	80072f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800877e:	4804      	ldr	r0, [pc, #16]	@ (8008790 <CDC_Receive_FS+0x24>)
 8008780:	f7fe fe00 	bl	8007384 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008784:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20000444 	.word	0x20000444

08008794 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	460b      	mov	r3, r1
 800879e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80087a4:	4b0d      	ldr	r3, [pc, #52]	@ (80087dc <CDC_Transmit_FS+0x48>)
 80087a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80087aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d001      	beq.n	80087ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e00b      	b.n	80087d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80087ba:	887b      	ldrh	r3, [r7, #2]
 80087bc:	461a      	mov	r2, r3
 80087be:	6879      	ldr	r1, [r7, #4]
 80087c0:	4806      	ldr	r0, [pc, #24]	@ (80087dc <CDC_Transmit_FS+0x48>)
 80087c2:	f7fe fd78 	bl	80072b6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80087c6:	4805      	ldr	r0, [pc, #20]	@ (80087dc <CDC_Transmit_FS+0x48>)
 80087c8:	f7fe fdac 	bl	8007324 <USBD_CDC_TransmitPacket>
 80087cc:	4603      	mov	r3, r0
 80087ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	20000444 	.word	0x20000444

080087e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	4613      	mov	r3, r2
 80087ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80087f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	371c      	adds	r7, #28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
	...

08008804 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	6039      	str	r1, [r7, #0]
 800880e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2212      	movs	r2, #18
 8008814:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008816:	4b03      	ldr	r3, [pc, #12]	@ (8008824 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008818:	4618      	mov	r0, r3
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr
 8008824:	2000015c 	.word	0x2000015c

08008828 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	4603      	mov	r3, r0
 8008830:	6039      	str	r1, [r7, #0]
 8008832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2204      	movs	r2, #4
 8008838:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800883a:	4b03      	ldr	r3, [pc, #12]	@ (8008848 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800883c:	4618      	mov	r0, r3
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	20000170 	.word	0x20000170

0800884c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	4603      	mov	r3, r0
 8008854:	6039      	str	r1, [r7, #0]
 8008856:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008858:	79fb      	ldrb	r3, [r7, #7]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d105      	bne.n	800886a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	4907      	ldr	r1, [pc, #28]	@ (8008880 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008862:	4808      	ldr	r0, [pc, #32]	@ (8008884 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008864:	f7ff fdf7 	bl	8008456 <USBD_GetString>
 8008868:	e004      	b.n	8008874 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	4904      	ldr	r1, [pc, #16]	@ (8008880 <USBD_CDC_ProductStrDescriptor+0x34>)
 800886e:	4805      	ldr	r0, [pc, #20]	@ (8008884 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008870:	f7ff fdf1 	bl	8008456 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008874:	4b02      	ldr	r3, [pc, #8]	@ (8008880 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008876:	4618      	mov	r0, r3
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	20000f14 	.word	0x20000f14
 8008884:	0800909c 	.word	0x0800909c

08008888 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	4603      	mov	r3, r0
 8008890:	6039      	str	r1, [r7, #0]
 8008892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	4904      	ldr	r1, [pc, #16]	@ (80088a8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008898:	4804      	ldr	r0, [pc, #16]	@ (80088ac <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800889a:	f7ff fddc 	bl	8008456 <USBD_GetString>
  return USBD_StrDesc;
 800889e:	4b02      	ldr	r3, [pc, #8]	@ (80088a8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	20000f14 	.word	0x20000f14
 80088ac:	080090b4 	.word	0x080090b4

080088b0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	4603      	mov	r3, r0
 80088b8:	6039      	str	r1, [r7, #0]
 80088ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	221a      	movs	r2, #26
 80088c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80088c2:	f000 f843 	bl	800894c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80088c6:	4b02      	ldr	r3, [pc, #8]	@ (80088d0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	20000174 	.word	0x20000174

080088d4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4603      	mov	r3, r0
 80088dc:	6039      	str	r1, [r7, #0]
 80088de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80088e0:	79fb      	ldrb	r3, [r7, #7]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d105      	bne.n	80088f2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	4907      	ldr	r1, [pc, #28]	@ (8008908 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80088ea:	4808      	ldr	r0, [pc, #32]	@ (800890c <USBD_CDC_ConfigStrDescriptor+0x38>)
 80088ec:	f7ff fdb3 	bl	8008456 <USBD_GetString>
 80088f0:	e004      	b.n	80088fc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	4904      	ldr	r1, [pc, #16]	@ (8008908 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80088f6:	4805      	ldr	r0, [pc, #20]	@ (800890c <USBD_CDC_ConfigStrDescriptor+0x38>)
 80088f8:	f7ff fdad 	bl	8008456 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088fc:	4b02      	ldr	r3, [pc, #8]	@ (8008908 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	20000f14 	.word	0x20000f14
 800890c:	080090c8 	.word	0x080090c8

08008910 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	6039      	str	r1, [r7, #0]
 800891a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800891c:	79fb      	ldrb	r3, [r7, #7]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d105      	bne.n	800892e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008922:	683a      	ldr	r2, [r7, #0]
 8008924:	4907      	ldr	r1, [pc, #28]	@ (8008944 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008926:	4808      	ldr	r0, [pc, #32]	@ (8008948 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008928:	f7ff fd95 	bl	8008456 <USBD_GetString>
 800892c:	e004      	b.n	8008938 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	4904      	ldr	r1, [pc, #16]	@ (8008944 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008932:	4805      	ldr	r0, [pc, #20]	@ (8008948 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008934:	f7ff fd8f 	bl	8008456 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008938:	4b02      	ldr	r3, [pc, #8]	@ (8008944 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800893a:	4618      	mov	r0, r3
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20000f14 	.word	0x20000f14
 8008948:	080090d4 	.word	0x080090d4

0800894c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008952:	4b0f      	ldr	r3, [pc, #60]	@ (8008990 <Get_SerialNum+0x44>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008958:	4b0e      	ldr	r3, [pc, #56]	@ (8008994 <Get_SerialNum+0x48>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800895e:	4b0e      	ldr	r3, [pc, #56]	@ (8008998 <Get_SerialNum+0x4c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4413      	add	r3, r2
 800896a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d009      	beq.n	8008986 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008972:	2208      	movs	r2, #8
 8008974:	4909      	ldr	r1, [pc, #36]	@ (800899c <Get_SerialNum+0x50>)
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 f814 	bl	80089a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800897c:	2204      	movs	r2, #4
 800897e:	4908      	ldr	r1, [pc, #32]	@ (80089a0 <Get_SerialNum+0x54>)
 8008980:	68b8      	ldr	r0, [r7, #8]
 8008982:	f000 f80f 	bl	80089a4 <IntToUnicode>
  }
}
 8008986:	bf00      	nop
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	1fff7590 	.word	0x1fff7590
 8008994:	1fff7594 	.word	0x1fff7594
 8008998:	1fff7598 	.word	0x1fff7598
 800899c:	20000176 	.word	0x20000176
 80089a0:	20000186 	.word	0x20000186

080089a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b087      	sub	sp, #28
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	4613      	mov	r3, r2
 80089b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80089b2:	2300      	movs	r3, #0
 80089b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80089b6:	2300      	movs	r3, #0
 80089b8:	75fb      	strb	r3, [r7, #23]
 80089ba:	e027      	b.n	8008a0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	0f1b      	lsrs	r3, r3, #28
 80089c0:	2b09      	cmp	r3, #9
 80089c2:	d80b      	bhi.n	80089dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	0f1b      	lsrs	r3, r3, #28
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	7dfb      	ldrb	r3, [r7, #23]
 80089cc:	005b      	lsls	r3, r3, #1
 80089ce:	4619      	mov	r1, r3
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	440b      	add	r3, r1
 80089d4:	3230      	adds	r2, #48	@ 0x30
 80089d6:	b2d2      	uxtb	r2, r2
 80089d8:	701a      	strb	r2, [r3, #0]
 80089da:	e00a      	b.n	80089f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	0f1b      	lsrs	r3, r3, #28
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	7dfb      	ldrb	r3, [r7, #23]
 80089e4:	005b      	lsls	r3, r3, #1
 80089e6:	4619      	mov	r1, r3
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	440b      	add	r3, r1
 80089ec:	3237      	adds	r2, #55	@ 0x37
 80089ee:	b2d2      	uxtb	r2, r2
 80089f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	011b      	lsls	r3, r3, #4
 80089f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80089f8:	7dfb      	ldrb	r3, [r7, #23]
 80089fa:	005b      	lsls	r3, r3, #1
 80089fc:	3301      	adds	r3, #1
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	4413      	add	r3, r2
 8008a02:	2200      	movs	r2, #0
 8008a04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008a06:	7dfb      	ldrb	r3, [r7, #23]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	75fb      	strb	r3, [r7, #23]
 8008a0c:	7dfa      	ldrb	r2, [r7, #23]
 8008a0e:	79fb      	ldrb	r3, [r7, #7]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d3d3      	bcc.n	80089bc <IntToUnicode+0x18>
  }
}
 8008a14:	bf00      	nop
 8008a16:	bf00      	nop
 8008a18:	371c      	adds	r7, #28
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
	...

08008a24 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b098      	sub	sp, #96	@ 0x60
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008a2c:	f107 030c 	add.w	r3, r7, #12
 8008a30:	2254      	movs	r2, #84	@ 0x54
 8008a32:	2100      	movs	r1, #0
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 faf9 	bl	800902c <memset>
  if(pcdHandle->Instance==USB)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a15      	ldr	r2, [pc, #84]	@ (8008a94 <HAL_PCD_MspInit+0x70>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d122      	bne.n	8008a8a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008a44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008a48:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008a4e:	f107 030c 	add.w	r3, r7, #12
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fb fe14 	bl	8004680 <HAL_RCCEx_PeriphCLKConfig>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d001      	beq.n	8008a62 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8008a5e:	f7f7 ff89 	bl	8000974 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008a62:	4b0d      	ldr	r3, [pc, #52]	@ (8008a98 <HAL_PCD_MspInit+0x74>)
 8008a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a66:	4a0c      	ldr	r2, [pc, #48]	@ (8008a98 <HAL_PCD_MspInit+0x74>)
 8008a68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008a6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8008a98 <HAL_PCD_MspInit+0x74>)
 8008a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a76:	60bb      	str	r3, [r7, #8]
 8008a78:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	2014      	movs	r0, #20
 8008a80:	f7f8 fee3 	bl	800184a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008a84:	2014      	movs	r0, #20
 8008a86:	f7f8 fefa 	bl	800187e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008a8a:	bf00      	nop
 8008a8c:	3760      	adds	r7, #96	@ 0x60
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	40005c00 	.word	0x40005c00
 8008a98:	40021000 	.word	0x40021000

08008a9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	4610      	mov	r0, r2
 8008ab4:	f7fe fd32 	bl	800751c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008ab8:	bf00      	nop
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8008ad2:	78fa      	ldrb	r2, [r7, #3]
 8008ad4:	6879      	ldr	r1, [r7, #4]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	00db      	lsls	r3, r3, #3
 8008ade:	440b      	add	r3, r1
 8008ae0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	78fb      	ldrb	r3, [r7, #3]
 8008ae8:	4619      	mov	r1, r3
 8008aea:	f7fe fd6c 	bl	80075c6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008aee:	bf00      	nop
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b082      	sub	sp, #8
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	460b      	mov	r3, r1
 8008b00:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8008b08:	78fa      	ldrb	r2, [r7, #3]
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	440b      	add	r3, r1
 8008b16:	3324      	adds	r3, #36	@ 0x24
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	78fb      	ldrb	r3, [r7, #3]
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	f7fe fdb5 	bl	800768c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008b22:	bf00      	nop
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b082      	sub	sp, #8
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fe fec9 	bl	80078d0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008b3e:	bf00      	nop
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	795b      	ldrb	r3, [r3, #5]
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d001      	beq.n	8008b5e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008b5a:	f7f7 ff0b 	bl	8000974 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008b64:	7bfa      	ldrb	r2, [r7, #15]
 8008b66:	4611      	mov	r1, r2
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7fe fe73 	bl	8007854 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fe fe1f 	bl	80077b8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008b7a:	bf00      	nop
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
	...

08008b84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fe fe6e 	bl	8007874 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	7a5b      	ldrb	r3, [r3, #9]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d005      	beq.n	8008bac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ba0:	4b04      	ldr	r3, [pc, #16]	@ (8008bb4 <HAL_PCD_SuspendCallback+0x30>)
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	4a03      	ldr	r2, [pc, #12]	@ (8008bb4 <HAL_PCD_SuspendCallback+0x30>)
 8008ba6:	f043 0306 	orr.w	r3, r3, #6
 8008baa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8008bac:	bf00      	nop
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	e000ed00 	.word	0xe000ed00

08008bb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	7a5b      	ldrb	r3, [r3, #9]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d007      	beq.n	8008bd8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bc8:	4b08      	ldr	r3, [pc, #32]	@ (8008bec <HAL_PCD_ResumeCallback+0x34>)
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	4a07      	ldr	r2, [pc, #28]	@ (8008bec <HAL_PCD_ResumeCallback+0x34>)
 8008bce:	f023 0306 	bic.w	r3, r3, #6
 8008bd2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008bd4:	f000 f9f8 	bl	8008fc8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fe fe5e 	bl	80078a0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8008be4:	bf00      	nop
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	e000ed00 	.word	0xe000ed00

08008bf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8008bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8008ca8 <USBD_LL_Init+0xb8>)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a29      	ldr	r2, [pc, #164]	@ (8008ca8 <USBD_LL_Init+0xb8>)
 8008c04:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008c08:	4b27      	ldr	r3, [pc, #156]	@ (8008ca8 <USBD_LL_Init+0xb8>)
 8008c0a:	4a28      	ldr	r2, [pc, #160]	@ (8008cac <USBD_LL_Init+0xbc>)
 8008c0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008c0e:	4b26      	ldr	r3, [pc, #152]	@ (8008ca8 <USBD_LL_Init+0xb8>)
 8008c10:	2208      	movs	r2, #8
 8008c12:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008c14:	4b24      	ldr	r3, [pc, #144]	@ (8008ca8 <USBD_LL_Init+0xb8>)
 8008c16:	2202      	movs	r2, #2
 8008c18:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c1a:	4b23      	ldr	r3, [pc, #140]	@ (8008ca8 <USBD_LL_Init+0xb8>)
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008c20:	4b21      	ldr	r3, [pc, #132]	@ (8008ca8 <USBD_LL_Init+0xb8>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008c26:	4b20      	ldr	r3, [pc, #128]	@ (8008ca8 <USBD_LL_Init+0xb8>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8008ca8 <USBD_LL_Init+0xb8>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008c32:	4b1d      	ldr	r3, [pc, #116]	@ (8008ca8 <USBD_LL_Init+0xb8>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008c38:	481b      	ldr	r0, [pc, #108]	@ (8008ca8 <USBD_LL_Init+0xb8>)
 8008c3a:	f7f9 fa69 	bl	8002110 <HAL_PCD_Init>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8008c44:	f7f7 fe96 	bl	8000974 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008c4e:	2318      	movs	r3, #24
 8008c50:	2200      	movs	r2, #0
 8008c52:	2100      	movs	r1, #0
 8008c54:	f7fa fef0 	bl	8003a38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008c5e:	2358      	movs	r3, #88	@ 0x58
 8008c60:	2200      	movs	r2, #0
 8008c62:	2180      	movs	r1, #128	@ 0x80
 8008c64:	f7fa fee8 	bl	8003a38 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008c6e:	23c0      	movs	r3, #192	@ 0xc0
 8008c70:	2200      	movs	r2, #0
 8008c72:	2181      	movs	r1, #129	@ 0x81
 8008c74:	f7fa fee0 	bl	8003a38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008c7e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008c82:	2200      	movs	r2, #0
 8008c84:	2101      	movs	r1, #1
 8008c86:	f7fa fed7 	bl	8003a38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008c90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008c94:	2200      	movs	r2, #0
 8008c96:	2182      	movs	r1, #130	@ 0x82
 8008c98:	f7fa fece 	bl	8003a38 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20001114 	.word	0x20001114
 8008cac:	40005c00 	.word	0x40005c00

08008cb0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7f9 faf0 	bl	80022ac <HAL_PCD_Start>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 f97e 	bl	8008fd4 <USBD_Get_USB_Status>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	4608      	mov	r0, r1
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	70fb      	strb	r3, [r7, #3]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	70bb      	strb	r3, [r7, #2]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008d0e:	78bb      	ldrb	r3, [r7, #2]
 8008d10:	883a      	ldrh	r2, [r7, #0]
 8008d12:	78f9      	ldrb	r1, [r7, #3]
 8008d14:	f7f9 fc37 	bl	8002586 <HAL_PCD_EP_Open>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 f958 	bl	8008fd4 <USBD_Get_USB_Status>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b084      	sub	sp, #16
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008d4c:	78fa      	ldrb	r2, [r7, #3]
 8008d4e:	4611      	mov	r1, r2
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7f9 fc77 	bl	8002644 <HAL_PCD_EP_Close>
 8008d56:	4603      	mov	r3, r0
 8008d58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 f939 	bl	8008fd4 <USBD_Get_USB_Status>
 8008d62:	4603      	mov	r3, r0
 8008d64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d66:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008d8a:	78fa      	ldrb	r2, [r7, #3]
 8008d8c:	4611      	mov	r1, r2
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7f9 fd20 	bl	80027d4 <HAL_PCD_EP_SetStall>
 8008d94:	4603      	mov	r3, r0
 8008d96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 f91a 	bl	8008fd4 <USBD_Get_USB_Status>
 8008da0:	4603      	mov	r3, r0
 8008da2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008da4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	460b      	mov	r3, r1
 8008db8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008dc8:	78fa      	ldrb	r2, [r7, #3]
 8008dca:	4611      	mov	r1, r2
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7f9 fd53 	bl	8002878 <HAL_PCD_EP_ClrStall>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 f8fb 	bl	8008fd4 <USBD_Get_USB_Status>
 8008dde:	4603      	mov	r3, r0
 8008de0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008de2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008dfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	da0b      	bge.n	8008e20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e08:	78fb      	ldrb	r3, [r7, #3]
 8008e0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e0e:	68f9      	ldr	r1, [r7, #12]
 8008e10:	4613      	mov	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	00db      	lsls	r3, r3, #3
 8008e18:	440b      	add	r3, r1
 8008e1a:	3312      	adds	r3, #18
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	e00b      	b.n	8008e38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e20:	78fb      	ldrb	r3, [r7, #3]
 8008e22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e26:	68f9      	ldr	r1, [r7, #12]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	00db      	lsls	r3, r3, #3
 8008e30:	440b      	add	r3, r1
 8008e32:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008e36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008e5e:	78fa      	ldrb	r2, [r7, #3]
 8008e60:	4611      	mov	r1, r2
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7f9 fb6b 	bl	800253e <HAL_PCD_SetAddress>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 f8b0 	bl	8008fd4 <USBD_Get_USB_Status>
 8008e74:	4603      	mov	r3, r0
 8008e76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b086      	sub	sp, #24
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	60f8      	str	r0, [r7, #12]
 8008e8a:	607a      	str	r2, [r7, #4]
 8008e8c:	603b      	str	r3, [r7, #0]
 8008e8e:	460b      	mov	r3, r1
 8008e90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008ea0:	7af9      	ldrb	r1, [r7, #11]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	f7f9 fc5e 	bl	8002766 <HAL_PCD_EP_Transmit>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eae:	7dfb      	ldrb	r3, [r7, #23]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 f88f 	bl	8008fd4 <USBD_Get_USB_Status>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008eba:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3718      	adds	r7, #24
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	607a      	str	r2, [r7, #4]
 8008ece:	603b      	str	r3, [r7, #0]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008ee2:	7af9      	ldrb	r1, [r7, #11]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	f7f9 fbf4 	bl	80026d4 <HAL_PCD_EP_Receive>
 8008eec:	4603      	mov	r3, r0
 8008eee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 f86e 	bl	8008fd4 <USBD_Get_USB_Status>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008efc:	7dbb      	ldrb	r3, [r7, #22]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3718      	adds	r7, #24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b082      	sub	sp, #8
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	460b      	mov	r3, r1
 8008f10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008f18:	78fa      	ldrb	r2, [r7, #3]
 8008f1a:	4611      	mov	r1, r2
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7f9 fc0a 	bl	8002736 <HAL_PCD_EP_GetRxCount>
 8008f22:	4603      	mov	r3, r0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8008f38:	78fb      	ldrb	r3, [r7, #3]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d002      	beq.n	8008f44 <HAL_PCDEx_LPM_Callback+0x18>
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d013      	beq.n	8008f6a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8008f42:	e023      	b.n	8008f8c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	7a5b      	ldrb	r3, [r3, #9]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d007      	beq.n	8008f5c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008f4c:	f000 f83c 	bl	8008fc8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f50:	4b10      	ldr	r3, [pc, #64]	@ (8008f94 <HAL_PCDEx_LPM_Callback+0x68>)
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	4a0f      	ldr	r2, [pc, #60]	@ (8008f94 <HAL_PCDEx_LPM_Callback+0x68>)
 8008f56:	f023 0306 	bic.w	r3, r3, #6
 8008f5a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fe fc9c 	bl	80078a0 <USBD_LL_Resume>
    break;
 8008f68:	e010      	b.n	8008f8c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe fc7f 	bl	8007874 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	7a5b      	ldrb	r3, [r3, #9]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d005      	beq.n	8008f8a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f7e:	4b05      	ldr	r3, [pc, #20]	@ (8008f94 <HAL_PCDEx_LPM_Callback+0x68>)
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	4a04      	ldr	r2, [pc, #16]	@ (8008f94 <HAL_PCDEx_LPM_Callback+0x68>)
 8008f84:	f043 0306 	orr.w	r3, r3, #6
 8008f88:	6113      	str	r3, [r2, #16]
    break;
 8008f8a:	bf00      	nop
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	e000ed00 	.word	0xe000ed00

08008f98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008fa0:	4b03      	ldr	r3, [pc, #12]	@ (8008fb0 <USBD_static_malloc+0x18>)
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	200013f0 	.word	0x200013f0

08008fb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]

}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008fcc:	f7f7 f96a 	bl	80002a4 <SystemClock_Config>
}
 8008fd0:	bf00      	nop
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	4603      	mov	r3, r0
 8008fdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fe2:	79fb      	ldrb	r3, [r7, #7]
 8008fe4:	2b03      	cmp	r3, #3
 8008fe6:	d817      	bhi.n	8009018 <USBD_Get_USB_Status+0x44>
 8008fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff0 <USBD_Get_USB_Status+0x1c>)
 8008fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fee:	bf00      	nop
 8008ff0:	08009001 	.word	0x08009001
 8008ff4:	08009007 	.word	0x08009007
 8008ff8:	0800900d 	.word	0x0800900d
 8008ffc:	08009013 	.word	0x08009013
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	73fb      	strb	r3, [r7, #15]
    break;
 8009004:	e00b      	b.n	800901e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009006:	2303      	movs	r3, #3
 8009008:	73fb      	strb	r3, [r7, #15]
    break;
 800900a:	e008      	b.n	800901e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800900c:	2301      	movs	r3, #1
 800900e:	73fb      	strb	r3, [r7, #15]
    break;
 8009010:	e005      	b.n	800901e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009012:	2303      	movs	r3, #3
 8009014:	73fb      	strb	r3, [r7, #15]
    break;
 8009016:	e002      	b.n	800901e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009018:	2303      	movs	r3, #3
 800901a:	73fb      	strb	r3, [r7, #15]
    break;
 800901c:	bf00      	nop
  }
  return usb_status;
 800901e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <memset>:
 800902c:	4402      	add	r2, r0
 800902e:	4603      	mov	r3, r0
 8009030:	4293      	cmp	r3, r2
 8009032:	d100      	bne.n	8009036 <memset+0xa>
 8009034:	4770      	bx	lr
 8009036:	f803 1b01 	strb.w	r1, [r3], #1
 800903a:	e7f9      	b.n	8009030 <memset+0x4>

0800903c <__libc_init_array>:
 800903c:	b570      	push	{r4, r5, r6, lr}
 800903e:	4d0d      	ldr	r5, [pc, #52]	@ (8009074 <__libc_init_array+0x38>)
 8009040:	4c0d      	ldr	r4, [pc, #52]	@ (8009078 <__libc_init_array+0x3c>)
 8009042:	1b64      	subs	r4, r4, r5
 8009044:	10a4      	asrs	r4, r4, #2
 8009046:	2600      	movs	r6, #0
 8009048:	42a6      	cmp	r6, r4
 800904a:	d109      	bne.n	8009060 <__libc_init_array+0x24>
 800904c:	4d0b      	ldr	r5, [pc, #44]	@ (800907c <__libc_init_array+0x40>)
 800904e:	4c0c      	ldr	r4, [pc, #48]	@ (8009080 <__libc_init_array+0x44>)
 8009050:	f000 f818 	bl	8009084 <_init>
 8009054:	1b64      	subs	r4, r4, r5
 8009056:	10a4      	asrs	r4, r4, #2
 8009058:	2600      	movs	r6, #0
 800905a:	42a6      	cmp	r6, r4
 800905c:	d105      	bne.n	800906a <__libc_init_array+0x2e>
 800905e:	bd70      	pop	{r4, r5, r6, pc}
 8009060:	f855 3b04 	ldr.w	r3, [r5], #4
 8009064:	4798      	blx	r3
 8009066:	3601      	adds	r6, #1
 8009068:	e7ee      	b.n	8009048 <__libc_init_array+0xc>
 800906a:	f855 3b04 	ldr.w	r3, [r5], #4
 800906e:	4798      	blx	r3
 8009070:	3601      	adds	r6, #1
 8009072:	e7f2      	b.n	800905a <__libc_init_array+0x1e>
 8009074:	080090f4 	.word	0x080090f4
 8009078:	080090f4 	.word	0x080090f4
 800907c:	080090f4 	.word	0x080090f4
 8009080:	080090f8 	.word	0x080090f8

08009084 <_init>:
 8009084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009086:	bf00      	nop
 8009088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800908a:	bc08      	pop	{r3}
 800908c:	469e      	mov	lr, r3
 800908e:	4770      	bx	lr

08009090 <_fini>:
 8009090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009092:	bf00      	nop
 8009094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009096:	bc08      	pop	{r3}
 8009098:	469e      	mov	lr, r3
 800909a:	4770      	bx	lr
