
DPO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011374  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08011558  08011558  00012558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119e0  080119e0  0001334c  2**0
                  CONTENTS
  4 .ARM          00000008  080119e0  080119e0  000129e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080119e8  080119e8  0001334c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080119e8  080119e8  000129e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080119ec  080119ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000034c  20000000  080119f0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d04  2000034c  08011d3c  0001334c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002050  08011d3c  00014050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001334c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c48d  00000000  00000000  0001337c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000458a  00000000  00000000  0002f809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f0  00000000  00000000  00033d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013ad  00000000  00000000  00035788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d37a  00000000  00000000  00036b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fb9e  00000000  00000000  00063eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d7e9  00000000  00000000  00083a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a1236  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081ac  00000000  00000000  001a127c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001a9428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000034c 	.word	0x2000034c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801153c 	.word	0x0801153c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000350 	.word	0x20000350
 800021c:	0801153c 	.word	0x0801153c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff23 	bl	8000b2c <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc99 	bl	8000648 <__aeabi_dmul>
 8000d16:	f7ff ff6f 	bl	8000bf8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc1a 	bl	8000554 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc90 	bl	8000648 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff fad2 	bl	80002d8 <__aeabi_dsub>
 8000d34:	f7ff ff60 	bl	8000bf8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d48:	f001 facd 	bl	80022e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4c:	f000 f84e 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d50:	f000 fd50 	bl	80017f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d54:	f000 fd24 	bl	80017a0 <MX_DMA_Init>
  MX_USB_Device_Init();
 8000d58:	f00b fba6 	bl	800c4a8 <MX_USB_Device_Init>
  MX_COMP2_Init();
 8000d5c:	f000 f8f8 	bl	8000f50 <MX_COMP2_Init>
  MX_COMP5_Init();
 8000d60:	f000 f91c 	bl	8000f9c <MX_COMP5_Init>
  MX_DAC1_Init();
 8000d64:	f000 f940 	bl	8000fe8 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000d68:	f000 f986 	bl	8001078 <MX_DAC2_Init>
  MX_OPAMP1_Init();
 8000d6c:	f000 f9be 	bl	80010ec <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8000d70:	f000 f9e8 	bl	8001144 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8000d74:	f000 fa0c 	bl	8001190 <MX_OPAMP3_Init>
  MX_OPAMP6_Init();
 8000d78:	f000 fa30 	bl	80011dc <MX_OPAMP6_Init>
  MX_TIM1_Init();
 8000d7c:	f000 fa54 	bl	8001228 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000d80:	f000 fb02 	bl	8001388 <MX_TIM4_Init>
  MX_TIM20_Init();
 8000d84:	f000 fcb2 	bl	80016ec <MX_TIM20_Init>
  MX_TIM3_Init();
 8000d88:	f000 faa8 	bl	80012dc <MX_TIM3_Init>
  MX_ADC5_Init();
 8000d8c:	f000 f87a 	bl	8000e84 <MX_ADC5_Init>
  MX_TIM15_Init();
 8000d90:	f000 fc08 	bl	80015a4 <MX_TIM15_Init>
  MX_TIM8_Init();
 8000d94:	f000 fb4e 	bl	8001434 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000d98:	213c      	movs	r1, #60	@ 0x3c
 8000d9a:	480f      	ldr	r0, [pc, #60]	@ (8000dd8 <main+0x94>)
 8000d9c:	f006 ff68 	bl	8007c70 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000da0:	213c      	movs	r1, #60	@ 0x3c
 8000da2:	480e      	ldr	r0, [pc, #56]	@ (8000ddc <main+0x98>)
 8000da4:	f006 ff64 	bl	8007c70 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000da8:	213c      	movs	r1, #60	@ 0x3c
 8000daa:	480d      	ldr	r0, [pc, #52]	@ (8000de0 <main+0x9c>)
 8000dac:	f006 ff60 	bl	8007c70 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim20, TIM_CHANNEL_ALL);
 8000db0:	213c      	movs	r1, #60	@ 0x3c
 8000db2:	480c      	ldr	r0, [pc, #48]	@ (8000de4 <main+0xa0>)
 8000db4:	f006 ff5c 	bl	8007c70 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000db8:	2100      	movs	r1, #0
 8000dba:	480b      	ldr	r0, [pc, #44]	@ (8000de8 <main+0xa4>)
 8000dbc:	f006 fb74 	bl	80074a8 <HAL_TIM_PWM_Start>

//  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);

	  WS2812_Set_All(0xff0000);
 8000dc0:	f44f 007f 	mov.w	r0, #16711680	@ 0xff0000
 8000dc4:	f001 fa3e 	bl	8002244 <WS2812_Set_All>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  WS2812_Update();
 8000dc8:	f001 fa54 	bl	8002274 <WS2812_Update>
	  	  HAL_Delay(1000);
 8000dcc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dd0:	f001 fafa 	bl	80023c8 <HAL_Delay>
	  WS2812_Update();
 8000dd4:	bf00      	nop
 8000dd6:	e7f7      	b.n	8000dc8 <main+0x84>
 8000dd8:	20000534 	.word	0x20000534
 8000ddc:	20000580 	.word	0x20000580
 8000de0:	200005cc 	.word	0x200005cc
 8000de4:	200006b0 	.word	0x200006b0
 8000de8:	20000664 	.word	0x20000664

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b094      	sub	sp, #80	@ 0x50
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 0318 	add.w	r3, r7, #24
 8000df6:	2238      	movs	r2, #56	@ 0x38
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f00c ffc9 	bl	800dd92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e0e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e12:	f005 fa8d 	bl	8006330 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e16:	2321      	movs	r3, #33	@ 0x21
 8000e18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e20:	2301      	movs	r3, #1
 8000e22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e24:	2302      	movs	r3, #2
 8000e26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000e30:	234b      	movs	r3, #75	@ 0x4b
 8000e32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e40:	f107 0318 	add.w	r3, r7, #24
 8000e44:	4618      	mov	r0, r3
 8000e46:	f005 fb27 	bl	8006498 <HAL_RCC_OscConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000e50:	f000 fd20 	bl	8001894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e54:	230f      	movs	r3, #15
 8000e56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f005 fe25 	bl	8006abc <HAL_RCC_ClockConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e78:	f000 fd0c 	bl	8001894 <Error_Handler>
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3750      	adds	r7, #80	@ 0x50
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	2220      	movs	r2, #32
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f00c ff7e 	bl	800dd92 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000e96:	4b2b      	ldr	r3, [pc, #172]	@ (8000f44 <MX_ADC5_Init+0xc0>)
 8000e98:	4a2b      	ldr	r2, [pc, #172]	@ (8000f48 <MX_ADC5_Init+0xc4>)
 8000e9a:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e9c:	4b29      	ldr	r3, [pc, #164]	@ (8000f44 <MX_ADC5_Init+0xc0>)
 8000e9e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ea2:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000ea4:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <MX_ADC5_Init+0xc0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eaa:	4b26      	ldr	r3, [pc, #152]	@ (8000f44 <MX_ADC5_Init+0xc0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000eb0:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <MX_ADC5_Init+0xc0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eb6:	4b23      	ldr	r3, [pc, #140]	@ (8000f44 <MX_ADC5_Init+0xc0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebc:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <MX_ADC5_Init+0xc0>)
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000ec2:	4b20      	ldr	r3, [pc, #128]	@ (8000f44 <MX_ADC5_Init+0xc0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <MX_ADC5_Init+0xc0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000ece:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <MX_ADC5_Init+0xc0>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <MX_ADC5_Init+0xc0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000edc:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <MX_ADC5_Init+0xc0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <MX_ADC5_Init+0xc0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <MX_ADC5_Init+0xc0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_ADC5_Init+0xc0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <MX_ADC5_Init+0xc0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000efe:	4811      	ldr	r0, [pc, #68]	@ (8000f44 <MX_ADC5_Init+0xc0>)
 8000f00:	f001 fc7e 	bl	8002800 <HAL_ADC_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000f0a:	f000 fcc3 	bl	8001894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <MX_ADC5_Init+0xc8>)
 8000f10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f12:	2306      	movs	r3, #6
 8000f14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f1a:	237f      	movs	r3, #127	@ 0x7f
 8000f1c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f1e:	2304      	movs	r3, #4
 8000f20:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000f26:	463b      	mov	r3, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	@ (8000f44 <MX_ADC5_Init+0xc0>)
 8000f2c:	f001 fe24 	bl	8002b78 <HAL_ADC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000f36:	f000 fcad 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000368 	.word	0x20000368
 8000f48:	50000600 	.word	0x50000600
 8000f4c:	08600004 	.word	0x08600004

08000f50 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <MX_COMP2_Init+0x44>)
 8000f56:	4a10      	ldr	r2, [pc, #64]	@ (8000f98 <MX_COMP2_Init+0x48>)
 8000f58:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <MX_COMP2_Init+0x44>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <MX_COMP2_Init+0x44>)
 8000f62:	2250      	movs	r2, #80	@ 0x50
 8000f64:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <MX_COMP2_Init+0x44>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <MX_COMP2_Init+0x44>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <MX_COMP2_Init+0x44>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <MX_COMP2_Init+0x44>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <MX_COMP2_Init+0x44>)
 8000f80:	f002 fb8a 	bl	8003698 <HAL_COMP_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 8000f8a:	f000 fc83 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200003d4 	.word	0x200003d4
 8000f98:	40010204 	.word	0x40010204

08000f9c <MX_COMP5_Init>:
  * @brief COMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP5_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <MX_COMP5_Init+0x44>)
 8000fa2:	4a10      	ldr	r2, [pc, #64]	@ (8000fe4 <MX_COMP5_Init+0x48>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <MX_COMP5_Init+0x44>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
  hcomp5.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <MX_COMP5_Init+0x44>)
 8000fae:	2250      	movs	r2, #80	@ 0x50
 8000fb0:	609a      	str	r2, [r3, #8]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <MX_COMP5_Init+0x44>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <MX_COMP5_Init+0x44>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <MX_COMP5_Init+0x44>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <MX_COMP5_Init+0x44>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <MX_COMP5_Init+0x44>)
 8000fcc:	f002 fb64 	bl	8003698 <HAL_COMP_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_COMP5_Init+0x3e>
  {
    Error_Handler();
 8000fd6:	f000 fc5d 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200003f8 	.word	0x200003f8
 8000fe4:	40010210 	.word	0x40010210

08000fe8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08c      	sub	sp, #48	@ 0x30
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2230      	movs	r2, #48	@ 0x30
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f00c fecc 	bl	800dd92 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8001070 <MX_DAC1_Init+0x88>)
 8000ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8001074 <MX_DAC1_Init+0x8c>)
 8000ffe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001000:	481b      	ldr	r0, [pc, #108]	@ (8001070 <MX_DAC1_Init+0x88>)
 8001002:	f002 fdf2 	bl	8003bea <HAL_DAC_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800100c:	f000 fc42 	bl	8001894 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001010:	2302      	movs	r3, #2
 8001012:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 800102c:	2304      	movs	r3, #4
 800102e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	2200      	movs	r2, #0
 8001038:	4619      	mov	r1, r3
 800103a:	480d      	ldr	r0, [pc, #52]	@ (8001070 <MX_DAC1_Init+0x88>)
 800103c:	f002 fdf8 	bl	8003c30 <HAL_DAC_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001046:	f000 fc25 	bl	8001894 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800104a:	2302      	movs	r3, #2
 800104c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800104e:	2302      	movs	r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001052:	463b      	mov	r3, r7
 8001054:	2210      	movs	r2, #16
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	@ (8001070 <MX_DAC1_Init+0x88>)
 800105a:	f002 fde9 	bl	8003c30 <HAL_DAC_ConfigChannel>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_DAC1_Init+0x80>
  {
    Error_Handler();
 8001064:	f000 fc16 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	3730      	adds	r7, #48	@ 0x30
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	2000041c 	.word	0x2000041c
 8001074:	50000800 	.word	0x50000800

08001078 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08c      	sub	sp, #48	@ 0x30
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800107e:	463b      	mov	r3, r7
 8001080:	2230      	movs	r2, #48	@ 0x30
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f00c fe84 	bl	800dd92 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 800108a:	4b16      	ldr	r3, [pc, #88]	@ (80010e4 <MX_DAC2_Init+0x6c>)
 800108c:	4a16      	ldr	r2, [pc, #88]	@ (80010e8 <MX_DAC2_Init+0x70>)
 800108e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001090:	4814      	ldr	r0, [pc, #80]	@ (80010e4 <MX_DAC2_Init+0x6c>)
 8001092:	f002 fdaa 	bl	8003bea <HAL_DAC_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 800109c:	f000 fbfa 	bl	8001894 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80010a0:	2302      	movs	r3, #2
 80010a2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 80010bc:	2304      	movs	r3, #4
 80010be:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	@ (80010e4 <MX_DAC2_Init+0x6c>)
 80010cc:	f002 fdb0 	bl	8003c30 <HAL_DAC_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80010d6:	f000 fbdd 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	3730      	adds	r7, #48	@ 0x30
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000430 	.word	0x20000430
 80010e8:	50000c00 	.word	0x50000c00

080010ec <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <MX_OPAMP1_Init+0x50>)
 80010f2:	4a13      	ldr	r2, [pc, #76]	@ (8001140 <MX_OPAMP1_Init+0x54>)
 80010f4:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_OPAMP1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <MX_OPAMP1_Init+0x50>)
 80010fe:	2240      	movs	r2, #64	@ 0x40
 8001100:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_OPAMP1_Init+0x50>)
 8001104:	2208      	movs	r2, #8
 8001106:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_OPAMP1_Init+0x50>)
 800110a:	2201      	movs	r2, #1
 800110c:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800110e:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <MX_OPAMP1_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8001114:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_OPAMP1_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 800111a:	4b08      	ldr	r3, [pc, #32]	@ (800113c <MX_OPAMP1_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_OPAMP1_Init+0x50>)
 8001122:	2200      	movs	r2, #0
 8001124:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	@ (800113c <MX_OPAMP1_Init+0x50>)
 8001128:	f003 fb30 	bl	800478c <HAL_OPAMP_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_OPAMP1_Init+0x4a>
  {
    Error_Handler();
 8001132:	f000 fbaf 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000444 	.word	0x20000444
 8001140:	40010300 	.word	0x40010300

08001144 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001148:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <MX_OPAMP2_Init+0x44>)
 800114a:	4a10      	ldr	r2, [pc, #64]	@ (800118c <MX_OPAMP2_Init+0x48>)
 800114c:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800114e:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <MX_OPAMP2_Init+0x44>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <MX_OPAMP2_Init+0x44>)
 8001156:	2260      	movs	r2, #96	@ 0x60
 8001158:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800115a:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <MX_OPAMP2_Init+0x44>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <MX_OPAMP2_Init+0x44>)
 8001162:	2201      	movs	r2, #1
 8001164:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <MX_OPAMP2_Init+0x44>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <MX_OPAMP2_Init+0x44>)
 800116e:	2200      	movs	r2, #0
 8001170:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	@ (8001188 <MX_OPAMP2_Init+0x44>)
 8001174:	f003 fb0a 	bl	800478c <HAL_OPAMP_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_OPAMP2_Init+0x3e>
  {
    Error_Handler();
 800117e:	f000 fb89 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000480 	.word	0x20000480
 800118c:	40010304 	.word	0x40010304

08001190 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <MX_OPAMP3_Init+0x44>)
 8001196:	4a10      	ldr	r2, [pc, #64]	@ (80011d8 <MX_OPAMP3_Init+0x48>)
 8001198:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800119a:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <MX_OPAMP3_Init+0x44>)
 800119c:	2200      	movs	r2, #0
 800119e:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <MX_OPAMP3_Init+0x44>)
 80011a2:	2260      	movs	r2, #96	@ 0x60
 80011a4:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO1;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <MX_OPAMP3_Init+0x44>)
 80011a8:	2204      	movs	r2, #4
 80011aa:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <MX_OPAMP3_Init+0x44>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <MX_OPAMP3_Init+0x44>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <MX_OPAMP3_Init+0x44>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80011be:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <MX_OPAMP3_Init+0x44>)
 80011c0:	f003 fae4 	bl	800478c <HAL_OPAMP_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 80011ca:	f000 fb63 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200004bc 	.word	0x200004bc
 80011d8:	40010308 	.word	0x40010308

080011dc <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <MX_OPAMP6_Init+0x44>)
 80011e2:	4a10      	ldr	r2, [pc, #64]	@ (8001224 <MX_OPAMP6_Init+0x48>)
 80011e4:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <MX_OPAMP6_Init+0x44>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <MX_OPAMP6_Init+0x44>)
 80011ee:	2260      	movs	r2, #96	@ 0x60
 80011f0:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <MX_OPAMP6_Init+0x44>)
 80011f4:	2208      	movs	r2, #8
 80011f6:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 80011f8:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <MX_OPAMP6_Init+0x44>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <MX_OPAMP6_Init+0x44>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MX_OPAMP6_Init+0x44>)
 8001206:	2200      	movs	r2, #0
 8001208:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	@ (8001220 <MX_OPAMP6_Init+0x44>)
 800120c:	f003 fabe 	bl	800478c <HAL_OPAMP_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 8001216:	f000 fb3d 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200004f8 	.word	0x200004f8
 8001224:	40010314 	.word	0x40010314

08001228 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08c      	sub	sp, #48	@ 0x30
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2224      	movs	r2, #36	@ 0x24
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f00c fdab 	bl	800dd92 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	463b      	mov	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001246:	4b23      	ldr	r3, [pc, #140]	@ (80012d4 <MX_TIM1_Init+0xac>)
 8001248:	4a23      	ldr	r2, [pc, #140]	@ (80012d8 <MX_TIM1_Init+0xb0>)
 800124a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800124c:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <MX_TIM1_Init+0xac>)
 800124e:	2200      	movs	r2, #0
 8001250:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b20      	ldr	r3, [pc, #128]	@ (80012d4 <MX_TIM1_Init+0xac>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001258:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <MX_TIM1_Init+0xac>)
 800125a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800125e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <MX_TIM1_Init+0xac>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001266:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <MX_TIM1_Init+0xac>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126c:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <MX_TIM1_Init+0xac>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001272:	2301      	movs	r3, #1
 8001274:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800127a:	2301      	movs	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001282:	230f      	movs	r3, #15
 8001284:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800128a:	2301      	movs	r3, #1
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001292:	230f      	movs	r3, #15
 8001294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	4619      	mov	r1, r3
 800129c:	480d      	ldr	r0, [pc, #52]	@ (80012d4 <MX_TIM1_Init+0xac>)
 800129e:	f006 fc41 	bl	8007b24 <HAL_TIM_Encoder_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80012a8:	f000 faf4 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b8:	463b      	mov	r3, r7
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <MX_TIM1_Init+0xac>)
 80012be:	f007 fd1f 	bl	8008d00 <HAL_TIMEx_MasterConfigSynchronization>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80012c8:	f000 fae4 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	3730      	adds	r7, #48	@ 0x30
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000534 	.word	0x20000534
 80012d8:	40012c00 	.word	0x40012c00

080012dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	@ 0x30
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	2224      	movs	r2, #36	@ 0x24
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f00c fd51 	bl	800dd92 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012fa:	4b21      	ldr	r3, [pc, #132]	@ (8001380 <MX_TIM3_Init+0xa4>)
 80012fc:	4a21      	ldr	r2, [pc, #132]	@ (8001384 <MX_TIM3_Init+0xa8>)
 80012fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001300:	4b1f      	ldr	r3, [pc, #124]	@ (8001380 <MX_TIM3_Init+0xa4>)
 8001302:	2200      	movs	r2, #0
 8001304:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001306:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <MX_TIM3_Init+0xa4>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800130c:	4b1c      	ldr	r3, [pc, #112]	@ (8001380 <MX_TIM3_Init+0xa4>)
 800130e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001312:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001314:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <MX_TIM3_Init+0xa4>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131a:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <MX_TIM3_Init+0xa4>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001320:	2301      	movs	r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001328:	2301      	movs	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001330:	230f      	movs	r3, #15
 8001332:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001338:	2301      	movs	r3, #1
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001340:	230f      	movs	r3, #15
 8001342:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	4619      	mov	r1, r3
 800134a:	480d      	ldr	r0, [pc, #52]	@ (8001380 <MX_TIM3_Init+0xa4>)
 800134c:	f006 fbea 	bl	8007b24 <HAL_TIM_Encoder_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001356:	f000 fa9d 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	4619      	mov	r1, r3
 8001366:	4806      	ldr	r0, [pc, #24]	@ (8001380 <MX_TIM3_Init+0xa4>)
 8001368:	f007 fcca 	bl	8008d00 <HAL_TIMEx_MasterConfigSynchronization>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001372:	f000 fa8f 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	3730      	adds	r7, #48	@ 0x30
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000580 	.word	0x20000580
 8001384:	40000400 	.word	0x40000400

08001388 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	@ 0x30
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	2224      	movs	r2, #36	@ 0x24
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f00c fcfb 	bl	800dd92 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	463b      	mov	r3, r7
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013a6:	4b21      	ldr	r3, [pc, #132]	@ (800142c <MX_TIM4_Init+0xa4>)
 80013a8:	4a21      	ldr	r2, [pc, #132]	@ (8001430 <MX_TIM4_Init+0xa8>)
 80013aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	@ (800142c <MX_TIM4_Init+0xa4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	@ (800142c <MX_TIM4_Init+0xa4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013b8:	4b1c      	ldr	r3, [pc, #112]	@ (800142c <MX_TIM4_Init+0xa4>)
 80013ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	@ (800142c <MX_TIM4_Init+0xa4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c6:	4b19      	ldr	r3, [pc, #100]	@ (800142c <MX_TIM4_Init+0xa4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013d4:	2301      	movs	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80013dc:	230f      	movs	r3, #15
 80013de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013e4:	2301      	movs	r3, #1
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80013ec:	230f      	movs	r3, #15
 80013ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	4619      	mov	r1, r3
 80013f6:	480d      	ldr	r0, [pc, #52]	@ (800142c <MX_TIM4_Init+0xa4>)
 80013f8:	f006 fb94 	bl	8007b24 <HAL_TIM_Encoder_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001402:	f000 fa47 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800140e:	463b      	mov	r3, r7
 8001410:	4619      	mov	r1, r3
 8001412:	4806      	ldr	r0, [pc, #24]	@ (800142c <MX_TIM4_Init+0xa4>)
 8001414:	f007 fc74 	bl	8008d00 <HAL_TIMEx_MasterConfigSynchronization>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800141e:	f000 fa39 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	3730      	adds	r7, #48	@ 0x30
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200005cc 	.word	0x200005cc
 8001430:	40000800 	.word	0x40000800

08001434 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b09c      	sub	sp, #112	@ 0x70
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001448:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001454:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
 8001464:	615a      	str	r2, [r3, #20]
 8001466:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2234      	movs	r2, #52	@ 0x34
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f00c fc8f 	bl	800dd92 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001474:	4b49      	ldr	r3, [pc, #292]	@ (800159c <MX_TIM8_Init+0x168>)
 8001476:	4a4a      	ldr	r2, [pc, #296]	@ (80015a0 <MX_TIM8_Init+0x16c>)
 8001478:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800147a:	4b48      	ldr	r3, [pc, #288]	@ (800159c <MX_TIM8_Init+0x168>)
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001480:	4b46      	ldr	r3, [pc, #280]	@ (800159c <MX_TIM8_Init+0x168>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 180;
 8001486:	4b45      	ldr	r3, [pc, #276]	@ (800159c <MX_TIM8_Init+0x168>)
 8001488:	22b4      	movs	r2, #180	@ 0xb4
 800148a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148c:	4b43      	ldr	r3, [pc, #268]	@ (800159c <MX_TIM8_Init+0x168>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001492:	4b42      	ldr	r3, [pc, #264]	@ (800159c <MX_TIM8_Init+0x168>)
 8001494:	2200      	movs	r2, #0
 8001496:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001498:	4b40      	ldr	r3, [pc, #256]	@ (800159c <MX_TIM8_Init+0x168>)
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800149e:	483f      	ldr	r0, [pc, #252]	@ (800159c <MX_TIM8_Init+0x168>)
 80014a0:	f005 ff4a 	bl	8007338 <HAL_TIM_Base_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80014aa:	f000 f9f3 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014b4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014b8:	4619      	mov	r1, r3
 80014ba:	4838      	ldr	r0, [pc, #224]	@ (800159c <MX_TIM8_Init+0x168>)
 80014bc:	f006 fd7a 	bl	8007fb4 <HAL_TIM_ConfigClockSource>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80014c6:	f000 f9e5 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80014ca:	4834      	ldr	r0, [pc, #208]	@ (800159c <MX_TIM8_Init+0x168>)
 80014cc:	f005 ff8b 	bl	80073e6 <HAL_TIM_PWM_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80014d6:	f000 f9dd 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014e6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014ea:	4619      	mov	r1, r3
 80014ec:	482b      	ldr	r0, [pc, #172]	@ (800159c <MX_TIM8_Init+0x168>)
 80014ee:	f007 fc07 	bl	8008d00 <HAL_TIMEx_MasterConfigSynchronization>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 80014f8:	f000 f9cc 	bl	8001894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014fc:	2360      	movs	r3, #96	@ 0x60
 80014fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 90;
 8001500:	235a      	movs	r3, #90	@ 0x5a
 8001502:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001504:	2300      	movs	r3, #0
 8001506:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001508:	2300      	movs	r3, #0
 800150a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001518:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800151c:	2208      	movs	r2, #8
 800151e:	4619      	mov	r1, r3
 8001520:	481e      	ldr	r0, [pc, #120]	@ (800159c <MX_TIM8_Init+0x168>)
 8001522:	f006 fc33 	bl	8007d8c <HAL_TIM_PWM_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 800152c:	f000 f9b2 	bl	8001894 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_3);
 8001530:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <MX_TIM8_Init+0x168>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	69da      	ldr	r2, [r3, #28]
 8001536:	4b19      	ldr	r3, [pc, #100]	@ (800159c <MX_TIM8_Init+0x168>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0208 	bic.w	r2, r2, #8
 800153e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001554:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001558:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001566:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800156a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001570:	2300      	movs	r3, #0
 8001572:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	4619      	mov	r1, r3
 800157c:	4807      	ldr	r0, [pc, #28]	@ (800159c <MX_TIM8_Init+0x168>)
 800157e:	f007 fc55 	bl	8008e2c <HAL_TIMEx_ConfigBreakDeadTime>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM8_Init+0x158>
  {
    Error_Handler();
 8001588:	f000 f984 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800158c:	4803      	ldr	r0, [pc, #12]	@ (800159c <MX_TIM8_Init+0x168>)
 800158e:	f000 fcb1 	bl	8001ef4 <HAL_TIM_MspPostInit>

}
 8001592:	bf00      	nop
 8001594:	3770      	adds	r7, #112	@ 0x70
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000618 	.word	0x20000618
 80015a0:	40013400 	.word	0x40013400

080015a4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b09c      	sub	sp, #112	@ 0x70
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
 80015d4:	615a      	str	r2, [r3, #20]
 80015d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2234      	movs	r2, #52	@ 0x34
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f00c fbd7 	bl	800dd92 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80015e4:	4b3f      	ldr	r3, [pc, #252]	@ (80016e4 <MX_TIM15_Init+0x140>)
 80015e6:	4a40      	ldr	r2, [pc, #256]	@ (80016e8 <MX_TIM15_Init+0x144>)
 80015e8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 150-1;
 80015ea:	4b3e      	ldr	r3, [pc, #248]	@ (80016e4 <MX_TIM15_Init+0x140>)
 80015ec:	2295      	movs	r2, #149	@ 0x95
 80015ee:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f0:	4b3c      	ldr	r3, [pc, #240]	@ (80016e4 <MX_TIM15_Init+0x140>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80015f6:	4b3b      	ldr	r3, [pc, #236]	@ (80016e4 <MX_TIM15_Init+0x140>)
 80015f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015fc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fe:	4b39      	ldr	r3, [pc, #228]	@ (80016e4 <MX_TIM15_Init+0x140>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001604:	4b37      	ldr	r3, [pc, #220]	@ (80016e4 <MX_TIM15_Init+0x140>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160a:	4b36      	ldr	r3, [pc, #216]	@ (80016e4 <MX_TIM15_Init+0x140>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001610:	4834      	ldr	r0, [pc, #208]	@ (80016e4 <MX_TIM15_Init+0x140>)
 8001612:	f005 fe91 	bl	8007338 <HAL_TIM_Base_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 800161c:	f000 f93a 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001624:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001626:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800162a:	4619      	mov	r1, r3
 800162c:	482d      	ldr	r0, [pc, #180]	@ (80016e4 <MX_TIM15_Init+0x140>)
 800162e:	f006 fcc1 	bl	8007fb4 <HAL_TIM_ConfigClockSource>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001638:	f000 f92c 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800163c:	4829      	ldr	r0, [pc, #164]	@ (80016e4 <MX_TIM15_Init+0x140>)
 800163e:	f005 fed2 	bl	80073e6 <HAL_TIM_PWM_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001648:	f000 f924 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001654:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001658:	4619      	mov	r1, r3
 800165a:	4822      	ldr	r0, [pc, #136]	@ (80016e4 <MX_TIM15_Init+0x140>)
 800165c:	f007 fb50 	bl	8008d00 <HAL_TIMEx_MasterConfigSynchronization>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001666:	f000 f915 	bl	8001894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800166a:	2370      	movs	r3, #112	@ 0x70
 800166c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 499;
 800166e:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001674:	2300      	movs	r3, #0
 8001676:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001678:	2300      	movs	r3, #0
 800167a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001680:	2300      	movs	r3, #0
 8001682:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001688:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800168c:	2200      	movs	r2, #0
 800168e:	4619      	mov	r1, r3
 8001690:	4814      	ldr	r0, [pc, #80]	@ (80016e4 <MX_TIM15_Init+0x140>)
 8001692:	f006 fb7b 	bl	8007d8c <HAL_TIM_PWM_ConfigChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 800169c:	f000 f8fa 	bl	8001894 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	4619      	mov	r1, r3
 80016c6:	4807      	ldr	r0, [pc, #28]	@ (80016e4 <MX_TIM15_Init+0x140>)
 80016c8:	f007 fbb0 	bl	8008e2c <HAL_TIMEx_ConfigBreakDeadTime>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 80016d2:	f000 f8df 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80016d6:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <MX_TIM15_Init+0x140>)
 80016d8:	f000 fc0c 	bl	8001ef4 <HAL_TIM_MspPostInit>

}
 80016dc:	bf00      	nop
 80016de:	3770      	adds	r7, #112	@ 0x70
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000664 	.word	0x20000664
 80016e8:	40014000 	.word	0x40014000

080016ec <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08c      	sub	sp, #48	@ 0x30
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	2224      	movs	r2, #36	@ 0x24
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f00c fb49 	bl	800dd92 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001700:	463b      	mov	r3, r7
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 800170a:	4b23      	ldr	r3, [pc, #140]	@ (8001798 <MX_TIM20_Init+0xac>)
 800170c:	4a23      	ldr	r2, [pc, #140]	@ (800179c <MX_TIM20_Init+0xb0>)
 800170e:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001710:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <MX_TIM20_Init+0xac>)
 8001712:	2200      	movs	r2, #0
 8001714:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001716:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <MX_TIM20_Init+0xac>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 800171c:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <MX_TIM20_Init+0xac>)
 800171e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001722:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001724:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <MX_TIM20_Init+0xac>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 800172a:	4b1b      	ldr	r3, [pc, #108]	@ (8001798 <MX_TIM20_Init+0xac>)
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001730:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <MX_TIM20_Init+0xac>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001736:	2301      	movs	r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800173e:	2301      	movs	r3, #1
 8001740:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001746:	230f      	movs	r3, #15
 8001748:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800174e:	2301      	movs	r3, #1
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001752:	2300      	movs	r3, #0
 8001754:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001756:	230f      	movs	r3, #15
 8001758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	4619      	mov	r1, r3
 8001760:	480d      	ldr	r0, [pc, #52]	@ (8001798 <MX_TIM20_Init+0xac>)
 8001762:	f006 f9df 	bl	8007b24 <HAL_TIM_Encoder_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 800176c:	f000 f892 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 800177c:	463b      	mov	r3, r7
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	@ (8001798 <MX_TIM20_Init+0xac>)
 8001782:	f007 fabd 	bl	8008d00 <HAL_TIMEx_MasterConfigSynchronization>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 800178c:	f000 f882 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	3730      	adds	r7, #48	@ 0x30
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200006b0 	.word	0x200006b0
 800179c:	40015000 	.word	0x40015000

080017a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <MX_DMA_Init+0x50>)
 80017a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017aa:	4a11      	ldr	r2, [pc, #68]	@ (80017f0 <MX_DMA_Init+0x50>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80017b2:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <MX_DMA_Init+0x50>)
 80017b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017be:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <MX_DMA_Init+0x50>)
 80017c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017c2:	4a0b      	ldr	r2, [pc, #44]	@ (80017f0 <MX_DMA_Init+0x50>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80017ca:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <MX_DMA_Init+0x50>)
 80017cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	200b      	movs	r0, #11
 80017dc:	f002 f9d1 	bl	8003b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017e0:	200b      	movs	r0, #11
 80017e2:	f002 f9e8 	bl	8003bb6 <HAL_NVIC_EnableIRQ>

}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000

080017f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	@ 0x28
 80017f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800180a:	4b20      	ldr	r3, [pc, #128]	@ (800188c <MX_GPIO_Init+0x98>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180e:	4a1f      	ldr	r2, [pc, #124]	@ (800188c <MX_GPIO_Init+0x98>)
 8001810:	f043 0320 	orr.w	r3, r3, #32
 8001814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001816:	4b1d      	ldr	r3, [pc, #116]	@ (800188c <MX_GPIO_Init+0x98>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181a:	f003 0320 	and.w	r3, r3, #32
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001822:	4b1a      	ldr	r3, [pc, #104]	@ (800188c <MX_GPIO_Init+0x98>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001826:	4a19      	ldr	r2, [pc, #100]	@ (800188c <MX_GPIO_Init+0x98>)
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182e:	4b17      	ldr	r3, [pc, #92]	@ (800188c <MX_GPIO_Init+0x98>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b14      	ldr	r3, [pc, #80]	@ (800188c <MX_GPIO_Init+0x98>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183e:	4a13      	ldr	r2, [pc, #76]	@ (800188c <MX_GPIO_Init+0x98>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001846:	4b11      	ldr	r3, [pc, #68]	@ (800188c <MX_GPIO_Init+0x98>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <MX_GPIO_Init+0x98>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001856:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <MX_GPIO_Init+0x98>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800185e:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <MX_GPIO_Init+0x98>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800186a:	2310      	movs	r3, #16
 800186c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800186e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	4804      	ldr	r0, [pc, #16]	@ (8001890 <MX_GPIO_Init+0x9c>)
 8001880:	f002 fe02 	bl	8004488 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001884:	bf00      	nop
 8001886:	3728      	adds	r7, #40	@ 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	48000800 	.word	0x48000800

08001894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001898:	b672      	cpsid	i
}
 800189a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <Error_Handler+0x8>

080018a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <HAL_MspInit+0x4c>)
 80018a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018aa:	4a10      	ldr	r2, [pc, #64]	@ (80018ec <HAL_MspInit+0x4c>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80018b2:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <HAL_MspInit+0x4c>)
 80018b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018be:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <HAL_MspInit+0x4c>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c2:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <HAL_MspInit+0x4c>)
 80018c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ca:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <HAL_MspInit+0x4c>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80018d6:	f000 fdad 	bl	8002434 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80018da:	2002      	movs	r0, #2
 80018dc:	f000 fd96 	bl	800240c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80018e0:	f004 fdca 	bl	8006478 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40021000 	.word	0x40021000

080018f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b09e      	sub	sp, #120	@ 0x78
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	2254      	movs	r2, #84	@ 0x54
 800190e:	2100      	movs	r1, #0
 8001910:	4618      	mov	r0, r3
 8001912:	f00c fa3e 	bl	800dd92 <memset>
  if(hadc->Instance==ADC5)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a1e      	ldr	r2, [pc, #120]	@ (8001994 <HAL_ADC_MspInit+0xa4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d135      	bne.n	800198c <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001920:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001924:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001926:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800192a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	4618      	mov	r0, r3
 8001932:	f005 fab3 	bl	8006e9c <HAL_RCCEx_PeriphCLKConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800193c:	f7ff ffaa 	bl	8001894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001940:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <HAL_ADC_MspInit+0xa8>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001944:	4a14      	ldr	r2, [pc, #80]	@ (8001998 <HAL_ADC_MspInit+0xa8>)
 8001946:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800194a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194c:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <HAL_ADC_MspInit+0xa8>)
 800194e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001950:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	4b0f      	ldr	r3, [pc, #60]	@ (8001998 <HAL_ADC_MspInit+0xa8>)
 800195a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195c:	4a0e      	ldr	r2, [pc, #56]	@ (8001998 <HAL_ADC_MspInit+0xa8>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001964:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <HAL_ADC_MspInit+0xa8>)
 8001966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
    /**ADC5 GPIO Configuration
    PA9     ------> ADC5_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001970:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001974:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001976:	2303      	movs	r3, #3
 8001978:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001982:	4619      	mov	r1, r3
 8001984:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001988:	f002 fd7e 	bl	8004488 <HAL_GPIO_Init>

  /* USER CODE END ADC5_MspInit 1 */

  }

}
 800198c:	bf00      	nop
 800198e:	3778      	adds	r7, #120	@ 0x78
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	50000600 	.word	0x50000600
 8001998:	40021000 	.word	0x40021000

0800199c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	@ 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a38 <HAL_COMP_MspInit+0x9c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d119      	bne.n	80019f2 <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <HAL_COMP_MspInit+0xa0>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a3c <HAL_COMP_MspInit+0xa0>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ca:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <HAL_COMP_MspInit+0xa0>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019d6:	2380      	movs	r3, #128	@ 0x80
 80019d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019da:	2303      	movs	r3, #3
 80019dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ec:	f002 fd4c 	bl	8004488 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP5_MspInit 1 */

  /* USER CODE END COMP5_MspInit 1 */
  }

}
 80019f0:	e01d      	b.n	8001a2e <HAL_COMP_MspInit+0x92>
  else if(hcomp->Instance==COMP5)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a12      	ldr	r2, [pc, #72]	@ (8001a40 <HAL_COMP_MspInit+0xa4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d118      	bne.n	8001a2e <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <HAL_COMP_MspInit+0xa0>)
 80019fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a00:	4a0e      	ldr	r2, [pc, #56]	@ (8001a3c <HAL_COMP_MspInit+0xa0>)
 8001a02:	f043 0302 	orr.w	r3, r3, #2
 8001a06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a08:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <HAL_COMP_MspInit+0xa0>)
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	4806      	ldr	r0, [pc, #24]	@ (8001a44 <HAL_COMP_MspInit+0xa8>)
 8001a2a:	f002 fd2d 	bl	8004488 <HAL_GPIO_Init>
}
 8001a2e:	bf00      	nop
 8001a30:	3728      	adds	r7, #40	@ 0x28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40010204 	.word	0x40010204
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40010210 	.word	0x40010210
 8001a44:	48000400 	.word	0x48000400

08001a48 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08c      	sub	sp, #48	@ 0x30
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a2b      	ldr	r2, [pc, #172]	@ (8001b14 <HAL_DAC_MspInit+0xcc>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d125      	bne.n	8001ab6 <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b18 <HAL_DAC_MspInit+0xd0>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8001b18 <HAL_DAC_MspInit+0xd0>)
 8001a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a76:	4b28      	ldr	r3, [pc, #160]	@ (8001b18 <HAL_DAC_MspInit+0xd0>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a7e:	61bb      	str	r3, [r7, #24]
 8001a80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	4b25      	ldr	r3, [pc, #148]	@ (8001b18 <HAL_DAC_MspInit+0xd0>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a86:	4a24      	ldr	r2, [pc, #144]	@ (8001b18 <HAL_DAC_MspInit+0xd0>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8e:	4b22      	ldr	r3, [pc, #136]	@ (8001b18 <HAL_DAC_MspInit+0xd0>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a9a:	2310      	movs	r3, #16
 8001a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa6:	f107 031c 	add.w	r3, r7, #28
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ab0:	f002 fcea 	bl	8004488 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8001ab4:	e029      	b.n	8001b0a <HAL_DAC_MspInit+0xc2>
  else if(hdac->Instance==DAC2)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a18      	ldr	r2, [pc, #96]	@ (8001b1c <HAL_DAC_MspInit+0xd4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d124      	bne.n	8001b0a <HAL_DAC_MspInit+0xc2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001ac0:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <HAL_DAC_MspInit+0xd0>)
 8001ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac4:	4a14      	ldr	r2, [pc, #80]	@ (8001b18 <HAL_DAC_MspInit+0xd0>)
 8001ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <HAL_DAC_MspInit+0xd0>)
 8001ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <HAL_DAC_MspInit+0xd0>)
 8001ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001adc:	4a0e      	ldr	r2, [pc, #56]	@ (8001b18 <HAL_DAC_MspInit+0xd0>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <HAL_DAC_MspInit+0xd0>)
 8001ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001af0:	2340      	movs	r3, #64	@ 0x40
 8001af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001af4:	2303      	movs	r3, #3
 8001af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	4619      	mov	r1, r3
 8001b02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b06:	f002 fcbf 	bl	8004488 <HAL_GPIO_Init>
}
 8001b0a:	bf00      	nop
 8001b0c:	3730      	adds	r7, #48	@ 0x30
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	50000800 	.word	0x50000800
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	50000c00 	.word	0x50000c00

08001b20 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08c      	sub	sp, #48	@ 0x30
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a3e      	ldr	r2, [pc, #248]	@ (8001c38 <HAL_OPAMP_MspInit+0x118>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d119      	bne.n	8001b76 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	4b3e      	ldr	r3, [pc, #248]	@ (8001c3c <HAL_OPAMP_MspInit+0x11c>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b46:	4a3d      	ldr	r2, [pc, #244]	@ (8001c3c <HAL_OPAMP_MspInit+0x11c>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c3c <HAL_OPAMP_MspInit+0x11c>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b5a:	2380      	movs	r3, #128	@ 0x80
 8001b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 031c 	add.w	r3, r7, #28
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b70:	f002 fc8a 	bl	8004488 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8001b74:	e05b      	b.n	8001c2e <HAL_OPAMP_MspInit+0x10e>
  else if(hopamp->Instance==OPAMP2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a31      	ldr	r2, [pc, #196]	@ (8001c40 <HAL_OPAMP_MspInit+0x120>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d119      	bne.n	8001bb4 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b80:	4b2e      	ldr	r3, [pc, #184]	@ (8001c3c <HAL_OPAMP_MspInit+0x11c>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b84:	4a2d      	ldr	r2, [pc, #180]	@ (8001c3c <HAL_OPAMP_MspInit+0x11c>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c3c <HAL_OPAMP_MspInit+0x11c>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bae:	f002 fc6b 	bl	8004488 <HAL_GPIO_Init>
}
 8001bb2:	e03c      	b.n	8001c2e <HAL_OPAMP_MspInit+0x10e>
  else if(hopamp->Instance==OPAMP3)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a22      	ldr	r2, [pc, #136]	@ (8001c44 <HAL_OPAMP_MspInit+0x124>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d119      	bne.n	8001bf2 <HAL_OPAMP_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001c3c <HAL_OPAMP_MspInit+0x11c>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8001c3c <HAL_OPAMP_MspInit+0x11c>)
 8001bc4:	f043 0302 	orr.w	r3, r3, #2
 8001bc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bca:	4b1c      	ldr	r3, [pc, #112]	@ (8001c3c <HAL_OPAMP_MspInit+0x11c>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	4619      	mov	r1, r3
 8001bea:	4817      	ldr	r0, [pc, #92]	@ (8001c48 <HAL_OPAMP_MspInit+0x128>)
 8001bec:	f002 fc4c 	bl	8004488 <HAL_GPIO_Init>
}
 8001bf0:	e01d      	b.n	8001c2e <HAL_OPAMP_MspInit+0x10e>
  else if(hopamp->Instance==OPAMP6)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a15      	ldr	r2, [pc, #84]	@ (8001c4c <HAL_OPAMP_MspInit+0x12c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d118      	bne.n	8001c2e <HAL_OPAMP_MspInit+0x10e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <HAL_OPAMP_MspInit+0x11c>)
 8001bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c00:	4a0e      	ldr	r2, [pc, #56]	@ (8001c3c <HAL_OPAMP_MspInit+0x11c>)
 8001c02:	f043 0302 	orr.w	r3, r3, #2
 8001c06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c08:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <HAL_OPAMP_MspInit+0x11c>)
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	4807      	ldr	r0, [pc, #28]	@ (8001c48 <HAL_OPAMP_MspInit+0x128>)
 8001c2a:	f002 fc2d 	bl	8004488 <HAL_GPIO_Init>
}
 8001c2e:	bf00      	nop
 8001c30:	3730      	adds	r7, #48	@ 0x30
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40010300 	.word	0x40010300
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010304 	.word	0x40010304
 8001c44:	40010308 	.word	0x40010308
 8001c48:	48000400 	.word	0x48000400
 8001c4c:	40010314 	.word	0x40010314

08001c50 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b090      	sub	sp, #64	@ 0x40
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a6a      	ldr	r2, [pc, #424]	@ (8001e18 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d128      	bne.n	8001cc4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c72:	4b6a      	ldr	r3, [pc, #424]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c76:	4a69      	ldr	r2, [pc, #420]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001c78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c7e:	4b67      	ldr	r3, [pc, #412]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8a:	4b64      	ldr	r3, [pc, #400]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8e:	4a63      	ldr	r2, [pc, #396]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c96:	4b61      	ldr	r3, [pc, #388]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4858      	ldr	r0, [pc, #352]	@ (8001e20 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8001cbe:	f002 fbe3 	bl	8004488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8001cc2:	e0a4      	b.n	8001e0e <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM3)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a56      	ldr	r2, [pc, #344]	@ (8001e24 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d128      	bne.n	8001d20 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cce:	4b53      	ldr	r3, [pc, #332]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd2:	4a52      	ldr	r2, [pc, #328]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cda:	4b50      	ldr	r3, [pc, #320]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	623b      	str	r3, [r7, #32]
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce6:	4b4d      	ldr	r3, [pc, #308]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cea:	4a4c      	ldr	r2, [pc, #304]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cfe:	23c0      	movs	r3, #192	@ 0xc0
 8001d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d16:	4619      	mov	r1, r3
 8001d18:	4841      	ldr	r0, [pc, #260]	@ (8001e20 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8001d1a:	f002 fbb5 	bl	8004488 <HAL_GPIO_Init>
}
 8001d1e:	e076      	b.n	8001e0e <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM4)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a40      	ldr	r2, [pc, #256]	@ (8001e28 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d128      	bne.n	8001d7c <HAL_TIM_Encoder_MspInit+0x12c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d2a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2e:	4a3b      	ldr	r2, [pc, #236]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d36:	4b39      	ldr	r3, [pc, #228]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d42:	4b36      	ldr	r3, [pc, #216]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d46:	4a35      	ldr	r2, [pc, #212]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d4e:	4b33      	ldr	r3, [pc, #204]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d5a:	23c0      	movs	r3, #192	@ 0xc0
 8001d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d62:	2301      	movs	r3, #1
 8001d64:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d66:	2303      	movs	r3, #3
 8001d68:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d72:	4619      	mov	r1, r3
 8001d74:	482d      	ldr	r0, [pc, #180]	@ (8001e2c <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001d76:	f002 fb87 	bl	8004488 <HAL_GPIO_Init>
}
 8001d7a:	e048      	b.n	8001e0e <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM20)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2b      	ldr	r2, [pc, #172]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d143      	bne.n	8001e0e <HAL_TIM_Encoder_MspInit+0x1be>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8001d86:	4b25      	ldr	r3, [pc, #148]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d8a:	4a24      	ldr	r2, [pc, #144]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001d8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d90:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d92:	4b22      	ldr	r3, [pc, #136]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001daa:	4b1c      	ldr	r3, [pc, #112]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db6:	4b19      	ldr	r3, [pc, #100]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dba:	4a18      	ldr	r2, [pc, #96]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc2:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dce:	2304      	movs	r3, #4
 8001dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8001dde:	2306      	movs	r3, #6
 8001de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001de6:	4619      	mov	r1, r3
 8001de8:	480d      	ldr	r0, [pc, #52]	@ (8001e20 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8001dea:	f002 fb4d 	bl	8004488 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dee:	2304      	movs	r3, #4
 8001df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e06:	4619      	mov	r1, r3
 8001e08:	4808      	ldr	r0, [pc, #32]	@ (8001e2c <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001e0a:	f002 fb3d 	bl	8004488 <HAL_GPIO_Init>
}
 8001e0e:	bf00      	nop
 8001e10:	3740      	adds	r7, #64	@ 0x40
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40012c00 	.word	0x40012c00
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	48000800 	.word	0x48000800
 8001e24:	40000400 	.word	0x40000400
 8001e28:	40000800 	.word	0x40000800
 8001e2c:	48000400 	.word	0x48000400
 8001e30:	40015000 	.word	0x40015000

08001e34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a27      	ldr	r2, [pc, #156]	@ (8001ee0 <HAL_TIM_Base_MspInit+0xac>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d137      	bne.n	8001eb6 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001e46:	4b27      	ldr	r3, [pc, #156]	@ (8001ee4 <HAL_TIM_Base_MspInit+0xb0>)
 8001e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e4a:	4a26      	ldr	r2, [pc, #152]	@ (8001ee4 <HAL_TIM_Base_MspInit+0xb0>)
 8001e4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e50:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e52:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <HAL_TIM_Base_MspInit+0xb0>)
 8001e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* TIM8_CH3 Init */
    hdma_tim8_ch3.Instance = DMA1_Channel1;
 8001e5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xb4>)
 8001e60:	4a22      	ldr	r2, [pc, #136]	@ (8001eec <HAL_TIM_Base_MspInit+0xb8>)
 8001e62:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Request = DMA_REQUEST_TIM8_CH3;
 8001e64:	4b20      	ldr	r3, [pc, #128]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xb4>)
 8001e66:	2233      	movs	r2, #51	@ 0x33
 8001e68:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xb4>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xb4>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xb4>)
 8001e78:	2280      	movs	r2, #128	@ 0x80
 8001e7a:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xb4>)
 8001e7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e82:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e84:	4b18      	ldr	r3, [pc, #96]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xb4>)
 8001e86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e8a:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_NORMAL;
 8001e8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xb4>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001e92:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xb4>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 8001e98:	4813      	ldr	r0, [pc, #76]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xb4>)
 8001e9a:	f002 f883 	bl	8003fa4 <HAL_DMA_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8001ea4:	f7ff fcf6 	bl	8001894 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xb4>)
 8001eac:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001eae:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xb4>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001eb4:	e010      	b.n	8001ed8 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM15)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef0 <HAL_TIM_Base_MspInit+0xbc>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d10b      	bne.n	8001ed8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001ec0:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <HAL_TIM_Base_MspInit+0xb0>)
 8001ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec4:	4a07      	ldr	r2, [pc, #28]	@ (8001ee4 <HAL_TIM_Base_MspInit+0xb0>)
 8001ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eca:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ecc:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_TIM_Base_MspInit+0xb0>)
 8001ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40013400 	.word	0x40013400
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	200006fc 	.word	0x200006fc
 8001eec:	40020008 	.word	0x40020008
 8001ef0:	40014000 	.word	0x40014000

08001ef4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	@ 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a23      	ldr	r2, [pc, #140]	@ (8001fa0 <HAL_TIM_MspPostInit+0xac>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d11d      	bne.n	8001f52 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	4b23      	ldr	r3, [pc, #140]	@ (8001fa4 <HAL_TIM_MspPostInit+0xb0>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1a:	4a22      	ldr	r2, [pc, #136]	@ (8001fa4 <HAL_TIM_MspPostInit+0xb0>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f22:	4b20      	ldr	r3, [pc, #128]	@ (8001fa4 <HAL_TIM_MspPostInit+0xb0>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8001f40:	230a      	movs	r3, #10
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4817      	ldr	r0, [pc, #92]	@ (8001fa8 <HAL_TIM_MspPostInit+0xb4>)
 8001f4c:	f002 fa9c 	bl	8004488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001f50:	e021      	b.n	8001f96 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a15      	ldr	r2, [pc, #84]	@ (8001fac <HAL_TIM_MspPostInit+0xb8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d11c      	bne.n	8001f96 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5c:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <HAL_TIM_MspPostInit+0xb0>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f60:	4a10      	ldr	r2, [pc, #64]	@ (8001fa4 <HAL_TIM_MspPostInit+0xb0>)
 8001f62:	f043 0302 	orr.w	r3, r3, #2
 8001f66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f68:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa4 <HAL_TIM_MspPostInit+0xb0>)
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f74:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f82:	2300      	movs	r3, #0
 8001f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001f86:	2301      	movs	r3, #1
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4805      	ldr	r0, [pc, #20]	@ (8001fa8 <HAL_TIM_MspPostInit+0xb4>)
 8001f92:	f002 fa79 	bl	8004488 <HAL_GPIO_Init>
}
 8001f96:	bf00      	nop
 8001f98:	3728      	adds	r7, #40	@ 0x28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40013400 	.word	0x40013400
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	48000400 	.word	0x48000400
 8001fac:	40014000 	.word	0x40014000

08001fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <NMI_Handler+0x4>

08001fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <HardFault_Handler+0x4>

08001fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <MemManage_Handler+0x4>

08001fc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <BusFault_Handler+0x4>

08001fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <UsageFault_Handler+0x4>

08001fd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002006:	f000 f9c1 	bl	800238c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 8002014:	4802      	ldr	r0, [pc, #8]	@ (8002020 <DMA1_Channel1_IRQHandler+0x10>)
 8002016:	f002 f8e8 	bl	80041ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200006fc 	.word	0x200006fc

08002024 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002028:	4802      	ldr	r0, [pc, #8]	@ (8002034 <USB_LP_IRQHandler+0x10>)
 800202a:	f002 fd6f 	bl	8004b0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20001a08 	.word	0x20001a08

08002038 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return 1;
 800203c:	2301      	movs	r3, #1
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <_kill>:

int _kill(int pid, int sig)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002052:	f00b fef1 	bl	800de38 <__errno>
 8002056:	4603      	mov	r3, r0
 8002058:	2216      	movs	r2, #22
 800205a:	601a      	str	r2, [r3, #0]
  return -1;
 800205c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <_exit>:

void _exit (int status)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ffe7 	bl	8002048 <_kill>
  while (1) {}    /* Make sure we hang here */
 800207a:	bf00      	nop
 800207c:	e7fd      	b.n	800207a <_exit+0x12>

0800207e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	e00a      	b.n	80020a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002090:	f3af 8000 	nop.w
 8002094:	4601      	mov	r1, r0
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	1c5a      	adds	r2, r3, #1
 800209a:	60ba      	str	r2, [r7, #8]
 800209c:	b2ca      	uxtb	r2, r1
 800209e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	3301      	adds	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	dbf0      	blt.n	8002090 <_read+0x12>
  }

  return len;
 80020ae:	687b      	ldr	r3, [r7, #4]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	e009      	b.n	80020de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	60ba      	str	r2, [r7, #8]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	3301      	adds	r3, #1
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	dbf1      	blt.n	80020ca <_write+0x12>
  }
  return len;
 80020e6:	687b      	ldr	r3, [r7, #4]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <_close>:

int _close(int file)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002118:	605a      	str	r2, [r3, #4]
  return 0;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <_isatty>:

int _isatty(int file)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002130:	2301      	movs	r3, #1
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800213e:	b480      	push	{r7}
 8002140:	b085      	sub	sp, #20
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002160:	4a14      	ldr	r2, [pc, #80]	@ (80021b4 <_sbrk+0x5c>)
 8002162:	4b15      	ldr	r3, [pc, #84]	@ (80021b8 <_sbrk+0x60>)
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800216c:	4b13      	ldr	r3, [pc, #76]	@ (80021bc <_sbrk+0x64>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d102      	bne.n	800217a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002174:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <_sbrk+0x64>)
 8002176:	4a12      	ldr	r2, [pc, #72]	@ (80021c0 <_sbrk+0x68>)
 8002178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800217a:	4b10      	ldr	r3, [pc, #64]	@ (80021bc <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	429a      	cmp	r2, r3
 8002186:	d207      	bcs.n	8002198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002188:	f00b fe56 	bl	800de38 <__errno>
 800218c:	4603      	mov	r3, r0
 800218e:	220c      	movs	r2, #12
 8002190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
 8002196:	e009      	b.n	80021ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002198:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <_sbrk+0x64>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800219e:	4b07      	ldr	r3, [pc, #28]	@ (80021bc <_sbrk+0x64>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	4a05      	ldr	r2, [pc, #20]	@ (80021bc <_sbrk+0x64>)
 80021a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021aa:	68fb      	ldr	r3, [r7, #12]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20020000 	.word	0x20020000
 80021b8:	00000400 	.word	0x00000400
 80021bc:	2000075c 	.word	0x2000075c
 80021c0:	20002050 	.word	0x20002050

080021c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021c8:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <SystemInit+0x20>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ce:	4a05      	ldr	r2, [pc, #20]	@ (80021e4 <SystemInit+0x20>)
 80021d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <WS2812_Write_Data>:
 * @param  Color:颜色24bit of RGB888
 * @param  index:灯的标号
 * @return None
 */
void WS2812_Write_Data(uint32_t Color, uint8_t index)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < 24; i++)
 80021f4:	2300      	movs	r3, #0
 80021f6:	73fb      	strb	r3, [r7, #15]
 80021f8:	e018      	b.n	800222c <WS2812_Write_Data+0x44>
		WS2812_Buf[24 * index + i] = (((Color << i) & 0X800000) ? High_Code : Low_Code);
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <WS2812_Write_Data+0x26>
 800220a:	2178      	movs	r1, #120	@ 0x78
 800220c:	e000      	b.n	8002210 <WS2812_Write_Data+0x28>
 800220e:	213c      	movs	r1, #60	@ 0x3c
 8002210:	78fa      	ldrb	r2, [r7, #3]
 8002212:	4613      	mov	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	461a      	mov	r2, r3
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	4413      	add	r3, r2
 8002220:	4a07      	ldr	r2, [pc, #28]	@ (8002240 <WS2812_Write_Data+0x58>)
 8002222:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 24; i++)
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	3301      	adds	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	2b17      	cmp	r3, #23
 8002230:	d9e3      	bls.n	80021fa <WS2812_Write_Data+0x12>
}
 8002232:	bf00      	nop
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	20000760 	.word	0x20000760

08002244 <WS2812_Set_All>:
 * @brief  所有灯数据更新
 * @param  Color:颜色24bit of RGB888
 * @return None
 */
void WS2812_Set_All(uint32_t Color)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	/*循环写入所有灯珠数组*/
	for(uint8_t index = 0; index < WS2812_NUM; index++)
 800224c:	2300      	movs	r3, #0
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	e007      	b.n	8002262 <WS2812_Set_All+0x1e>
		WS2812_Write_Data(Color,index);
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	4619      	mov	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff ffc6 	bl	80021e8 <WS2812_Write_Data>
	for(uint8_t index = 0; index < WS2812_NUM; index++)
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	3301      	adds	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	2b1d      	cmp	r3, #29
 8002266:	d9f4      	bls.n	8002252 <WS2812_Set_All+0xe>
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <WS2812_Update>:
 * @brief  WS2812更新指令
 * @param  None
 * @return None
 */
void WS2812_Update(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&WS2812_TIM,WS2812_CHANNEL,(uint32_t *)WS2812_Buf,WS2812_BUF_SIZE);
 8002278:	f44f 733a 	mov.w	r3, #744	@ 0x2e8
 800227c:	4a03      	ldr	r2, [pc, #12]	@ (800228c <WS2812_Update+0x18>)
 800227e:	2108      	movs	r1, #8
 8002280:	4803      	ldr	r0, [pc, #12]	@ (8002290 <WS2812_Update+0x1c>)
 8002282:	f005 fa23 	bl	80076cc <HAL_TIM_PWM_Start_DMA>
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000760 	.word	0x20000760
 8002290:	20000618 	.word	0x20000618

08002294 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002294:	480d      	ldr	r0, [pc, #52]	@ (80022cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002296:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002298:	f7ff ff94 	bl	80021c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800229c:	480c      	ldr	r0, [pc, #48]	@ (80022d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800229e:	490d      	ldr	r1, [pc, #52]	@ (80022d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022a0:	4a0d      	ldr	r2, [pc, #52]	@ (80022d8 <LoopForever+0xe>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022a4:	e002      	b.n	80022ac <LoopCopyDataInit>

080022a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022aa:	3304      	adds	r3, #4

080022ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b0:	d3f9      	bcc.n	80022a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b2:	4a0a      	ldr	r2, [pc, #40]	@ (80022dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80022b4:	4c0a      	ldr	r4, [pc, #40]	@ (80022e0 <LoopForever+0x16>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b8:	e001      	b.n	80022be <LoopFillZerobss>

080022ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022bc:	3204      	adds	r2, #4

080022be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c0:	d3fb      	bcc.n	80022ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022c2:	f00b fdbf 	bl	800de44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022c6:	f7fe fd3d 	bl	8000d44 <main>

080022ca <LoopForever>:

LoopForever:
    b LoopForever
 80022ca:	e7fe      	b.n	80022ca <LoopForever>
  ldr   r0, =_estack
 80022cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d4:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 80022d8:	080119f0 	.word	0x080119f0
  ldr r2, =_sbss
 80022dc:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 80022e0:	20002050 	.word	0x20002050

080022e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022e4:	e7fe      	b.n	80022e4 <ADC1_2_IRQHandler>

080022e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f0:	2003      	movs	r0, #3
 80022f2:	f001 fc3b 	bl	8003b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022f6:	200f      	movs	r0, #15
 80022f8:	f000 f80e 	bl	8002318 <HAL_InitTick>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	71fb      	strb	r3, [r7, #7]
 8002306:	e001      	b.n	800230c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002308:	f7ff faca 	bl	80018a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800230c:	79fb      	ldrb	r3, [r7, #7]

}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002324:	4b16      	ldr	r3, [pc, #88]	@ (8002380 <HAL_InitTick+0x68>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d022      	beq.n	8002372 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800232c:	4b15      	ldr	r3, [pc, #84]	@ (8002384 <HAL_InitTick+0x6c>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b13      	ldr	r3, [pc, #76]	@ (8002380 <HAL_InitTick+0x68>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002338:	fbb1 f3f3 	udiv	r3, r1, r3
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	4618      	mov	r0, r3
 8002342:	f001 fc46 	bl	8003bd2 <HAL_SYSTICK_Config>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10f      	bne.n	800236c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b0f      	cmp	r3, #15
 8002350:	d809      	bhi.n	8002366 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002352:	2200      	movs	r2, #0
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	f04f 30ff 	mov.w	r0, #4294967295
 800235a:	f001 fc12 	bl	8003b82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800235e:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <HAL_InitTick+0x70>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	e007      	b.n	8002376 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
 800236a:	e004      	b.n	8002376 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
 8002370:	e001      	b.n	8002376 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002376:	7bfb      	ldrb	r3, [r7, #15]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000008 	.word	0x20000008
 8002384:	20000000 	.word	0x20000000
 8002388:	20000004 	.word	0x20000004

0800238c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002390:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <HAL_IncTick+0x1c>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <HAL_IncTick+0x20>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4413      	add	r3, r2
 800239a:	4a03      	ldr	r2, [pc, #12]	@ (80023a8 <HAL_IncTick+0x1c>)
 800239c:	6013      	str	r3, [r2, #0]
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	20000d30 	.word	0x20000d30
 80023ac:	20000008 	.word	0x20000008

080023b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return uwTick;
 80023b4:	4b03      	ldr	r3, [pc, #12]	@ (80023c4 <HAL_GetTick+0x14>)
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000d30 	.word	0x20000d30

080023c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff ffee 	bl	80023b0 <HAL_GetTick>
 80023d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d004      	beq.n	80023ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80023e2:	4b09      	ldr	r3, [pc, #36]	@ (8002408 <HAL_Delay+0x40>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4413      	add	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ec:	bf00      	nop
 80023ee:	f7ff ffdf 	bl	80023b0 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d8f7      	bhi.n	80023ee <HAL_Delay+0x26>
  {
  }
}
 80023fe:	bf00      	nop
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000008 	.word	0x20000008

0800240c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002414:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f023 0202 	bic.w	r2, r3, #2
 800241c:	4904      	ldr	r1, [pc, #16]	@ (8002430 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4313      	orrs	r3, r2
 8002422:	600b      	str	r3, [r1, #0]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	40010030 	.word	0x40010030

08002434 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002438:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a04      	ldr	r2, [pc, #16]	@ (8002450 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	6013      	str	r3, [r2, #0]
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40010030 	.word	0x40010030

08002454 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	609a      	str	r2, [r3, #8]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	609a      	str	r2, [r3, #8]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	3360      	adds	r3, #96	@ 0x60
 80024ce:	461a      	mov	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <LL_ADC_SetOffset+0x44>)
 80024de:	4013      	ands	r3, r2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024f4:	bf00      	nop
 80024f6:	371c      	adds	r7, #28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	03fff000 	.word	0x03fff000

08002504 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3360      	adds	r3, #96	@ 0x60
 8002512:	461a      	mov	r2, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	3360      	adds	r3, #96	@ 0x60
 8002540:	461a      	mov	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	431a      	orrs	r2, r3
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800255a:	bf00      	nop
 800255c:	371c      	adds	r7, #28
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002566:	b480      	push	{r7}
 8002568:	b087      	sub	sp, #28
 800256a:	af00      	add	r7, sp, #0
 800256c:	60f8      	str	r0, [r7, #12]
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	3360      	adds	r3, #96	@ 0x60
 8002576:	461a      	mov	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	431a      	orrs	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002590:	bf00      	nop
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800259c:	b480      	push	{r7}
 800259e:	b087      	sub	sp, #28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3360      	adds	r3, #96	@ 0x60
 80025ac:	461a      	mov	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	431a      	orrs	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80025c6:	bf00      	nop
 80025c8:	371c      	adds	r7, #28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	615a      	str	r2, [r3, #20]
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	3330      	adds	r3, #48	@ 0x30
 8002608:	461a      	mov	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	4413      	add	r3, r2
 8002616:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	211f      	movs	r1, #31
 8002624:	fa01 f303 	lsl.w	r3, r1, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	401a      	ands	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	0e9b      	lsrs	r3, r3, #26
 8002630:	f003 011f 	and.w	r1, r3, #31
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	431a      	orrs	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002644:	bf00      	nop
 8002646:	371c      	adds	r7, #28
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3314      	adds	r3, #20
 8002660:	461a      	mov	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	0e5b      	lsrs	r3, r3, #25
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	4413      	add	r3, r2
 800266e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	0d1b      	lsrs	r3, r3, #20
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	2107      	movs	r1, #7
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	401a      	ands	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	0d1b      	lsrs	r3, r3, #20
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	431a      	orrs	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800269a:	bf00      	nop
 800269c:	371c      	adds	r7, #28
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c0:	43db      	mvns	r3, r3
 80026c2:	401a      	ands	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f003 0318 	and.w	r3, r3, #24
 80026ca:	4908      	ldr	r1, [pc, #32]	@ (80026ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80026cc:	40d9      	lsrs	r1, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	400b      	ands	r3, r1
 80026d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d6:	431a      	orrs	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80026de:	bf00      	nop
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	0007ffff 	.word	0x0007ffff

080026f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002700:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6093      	str	r3, [r2, #8]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002724:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002728:	d101      	bne.n	800272e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800274c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002750:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002774:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002778:	d101      	bne.n	800277e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <LL_ADC_IsEnabled+0x18>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <LL_ADC_IsEnabled+0x1a>
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d101      	bne.n	80027ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d101      	bne.n	80027f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002800:	b590      	push	{r4, r7, lr}
 8002802:	b089      	sub	sp, #36	@ 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e1a9      	b.n	8002b6e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002824:	2b00      	cmp	r3, #0
 8002826:	d109      	bne.n	800283c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff f861 	bl	80018f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff67 	bl	8002714 <LL_ADC_IsDeepPowerDownEnabled>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d004      	beq.n	8002856 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff4d 	bl	80026f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ff82 	bl	8002764 <LL_ADC_IsInternalRegulatorEnabled>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d115      	bne.n	8002892 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff66 	bl	800273c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002870:	4b9c      	ldr	r3, [pc, #624]	@ (8002ae4 <HAL_ADC_Init+0x2e4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	099b      	lsrs	r3, r3, #6
 8002876:	4a9c      	ldr	r2, [pc, #624]	@ (8002ae8 <HAL_ADC_Init+0x2e8>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	099b      	lsrs	r3, r3, #6
 800287e:	3301      	adds	r3, #1
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002884:	e002      	b.n	800288c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3b01      	subs	r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f9      	bne.n	8002886 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ff64 	bl	8002764 <LL_ADC_IsInternalRegulatorEnabled>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10d      	bne.n	80028be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a6:	f043 0210 	orr.w	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff ff75 	bl	80027b2 <LL_ADC_REG_IsConversionOngoing>
 80028c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 8142 	bne.w	8002b5c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 813e 	bne.w	8002b5c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80028e8:	f043 0202 	orr.w	r2, r3, #2
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff49 	bl	800278c <LL_ADC_IsEnabled>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d141      	bne.n	8002984 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002908:	d004      	beq.n	8002914 <HAL_ADC_Init+0x114>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a77      	ldr	r2, [pc, #476]	@ (8002aec <HAL_ADC_Init+0x2ec>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d10f      	bne.n	8002934 <HAL_ADC_Init+0x134>
 8002914:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002918:	f7ff ff38 	bl	800278c <LL_ADC_IsEnabled>
 800291c:	4604      	mov	r4, r0
 800291e:	4873      	ldr	r0, [pc, #460]	@ (8002aec <HAL_ADC_Init+0x2ec>)
 8002920:	f7ff ff34 	bl	800278c <LL_ADC_IsEnabled>
 8002924:	4603      	mov	r3, r0
 8002926:	4323      	orrs	r3, r4
 8002928:	2b00      	cmp	r3, #0
 800292a:	bf0c      	ite	eq
 800292c:	2301      	moveq	r3, #1
 800292e:	2300      	movne	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	e012      	b.n	800295a <HAL_ADC_Init+0x15a>
 8002934:	486e      	ldr	r0, [pc, #440]	@ (8002af0 <HAL_ADC_Init+0x2f0>)
 8002936:	f7ff ff29 	bl	800278c <LL_ADC_IsEnabled>
 800293a:	4604      	mov	r4, r0
 800293c:	486d      	ldr	r0, [pc, #436]	@ (8002af4 <HAL_ADC_Init+0x2f4>)
 800293e:	f7ff ff25 	bl	800278c <LL_ADC_IsEnabled>
 8002942:	4603      	mov	r3, r0
 8002944:	431c      	orrs	r4, r3
 8002946:	486c      	ldr	r0, [pc, #432]	@ (8002af8 <HAL_ADC_Init+0x2f8>)
 8002948:	f7ff ff20 	bl	800278c <LL_ADC_IsEnabled>
 800294c:	4603      	mov	r3, r0
 800294e:	4323      	orrs	r3, r4
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf0c      	ite	eq
 8002954:	2301      	moveq	r3, #1
 8002956:	2300      	movne	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d012      	beq.n	8002984 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002966:	d004      	beq.n	8002972 <HAL_ADC_Init+0x172>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a5f      	ldr	r2, [pc, #380]	@ (8002aec <HAL_ADC_Init+0x2ec>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_ADC_Init+0x176>
 8002972:	4a62      	ldr	r2, [pc, #392]	@ (8002afc <HAL_ADC_Init+0x2fc>)
 8002974:	e000      	b.n	8002978 <HAL_ADC_Init+0x178>
 8002976:	4a62      	ldr	r2, [pc, #392]	@ (8002b00 <HAL_ADC_Init+0x300>)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4619      	mov	r1, r3
 800297e:	4610      	mov	r0, r2
 8002980:	f7ff fd68 	bl	8002454 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	7f5b      	ldrb	r3, [r3, #29]
 8002988:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800298e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002994:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800299a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029a2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d106      	bne.n	80029c0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b6:	3b01      	subs	r3, #1
 80029b8:	045b      	lsls	r3, r3, #17
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d009      	beq.n	80029dc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029cc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	4b48      	ldr	r3, [pc, #288]	@ (8002b04 <HAL_ADC_Init+0x304>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	69b9      	ldr	r1, [r7, #24]
 80029ec:	430b      	orrs	r3, r1
 80029ee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fee4 	bl	80027d8 <LL_ADC_INJ_IsConversionOngoing>
 8002a10:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d17f      	bne.n	8002b18 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d17c      	bne.n	8002b18 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a22:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a2a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a3a:	f023 0302 	bic.w	r3, r3, #2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	69b9      	ldr	r1, [r7, #24]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d017      	beq.n	8002a80 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002a5e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a68:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6911      	ldr	r1, [r2, #16]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002a7e:	e013      	b.n	8002aa8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002a8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002aa0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002aa4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d12a      	bne.n	8002b08 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002abc:	f023 0304 	bic.w	r3, r3, #4
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ac8:	4311      	orrs	r1, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002ace:	4311      	orrs	r1, r2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0201 	orr.w	r2, r2, #1
 8002ae0:	611a      	str	r2, [r3, #16]
 8002ae2:	e019      	b.n	8002b18 <HAL_ADC_Init+0x318>
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	053e2d63 	.word	0x053e2d63
 8002aec:	50000100 	.word	0x50000100
 8002af0:	50000400 	.word	0x50000400
 8002af4:	50000500 	.word	0x50000500
 8002af8:	50000600 	.word	0x50000600
 8002afc:	50000300 	.word	0x50000300
 8002b00:	50000700 	.word	0x50000700
 8002b04:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0201 	bic.w	r2, r2, #1
 8002b16:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10c      	bne.n	8002b3a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b26:	f023 010f 	bic.w	r1, r3, #15
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	1e5a      	subs	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b38:	e007      	b.n	8002b4a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 020f 	bic.w	r2, r2, #15
 8002b48:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4e:	f023 0303 	bic.w	r3, r3, #3
 8002b52:	f043 0201 	orr.w	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b5a:	e007      	b.n	8002b6c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b60:	f043 0210 	orr.w	r2, r3, #16
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3724      	adds	r7, #36	@ 0x24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd90      	pop	{r4, r7, pc}
 8002b76:	bf00      	nop

08002b78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b0b6      	sub	sp, #216	@ 0xd8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d102      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x24>
 8002b96:	2302      	movs	r3, #2
 8002b98:	f000 bc13 	b.w	80033c2 <HAL_ADC_ConfigChannel+0x84a>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fe02 	bl	80027b2 <LL_ADC_REG_IsConversionOngoing>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f040 83f3 	bne.w	800339c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6859      	ldr	r1, [r3, #4]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f7ff fd18 	bl	80025f8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff fdf0 	bl	80027b2 <LL_ADC_REG_IsConversionOngoing>
 8002bd2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fdfc 	bl	80027d8 <LL_ADC_INJ_IsConversionOngoing>
 8002be0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002be4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f040 81d9 	bne.w	8002fa0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 81d4 	bne.w	8002fa0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c00:	d10f      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f7ff fd1f 	bl	8002650 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fcd9 	bl	80025d2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002c20:	e00e      	b.n	8002c40 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6819      	ldr	r1, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f7ff fd0e 	bl	8002650 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fcc9 	bl	80025d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	08db      	lsrs	r3, r3, #3
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d022      	beq.n	8002ca8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	6919      	ldr	r1, [r3, #16]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c72:	f7ff fc23 	bl	80024bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6919      	ldr	r1, [r3, #16]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	461a      	mov	r2, r3
 8002c84:	f7ff fc6f 	bl	8002566 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d102      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x126>
 8002c98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c9c:	e000      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x128>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f7ff fc7b 	bl	800259c <LL_ADC_SetOffsetSaturation>
 8002ca6:	e17b      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2100      	movs	r1, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fc28 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10a      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x15c>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fc1d 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	0e9b      	lsrs	r3, r3, #26
 8002cce:	f003 021f 	and.w	r2, r3, #31
 8002cd2:	e01e      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x19a>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fc12 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002cf6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002d02:	2320      	movs	r3, #32
 8002d04:	e004      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002d06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d105      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x1b2>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	0e9b      	lsrs	r3, r3, #26
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	e018      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x1e4>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002d3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002d46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002d4e:	2320      	movs	r3, #32
 8002d50:	e004      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002d52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d106      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2200      	movs	r2, #0
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fbe1 	bl	8002530 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2101      	movs	r1, #1
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fbc5 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x222>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fbba 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002d90:	4603      	mov	r3, r0
 8002d92:	0e9b      	lsrs	r3, r3, #26
 8002d94:	f003 021f 	and.w	r2, r3, #31
 8002d98:	e01e      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x260>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2101      	movs	r1, #1
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fbaf 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002db8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002dc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002dc8:	2320      	movs	r3, #32
 8002dca:	e004      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002dcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dd0:	fab3 f383 	clz	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d105      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x278>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	0e9b      	lsrs	r3, r3, #26
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	e018      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x2aa>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002dfc:	fa93 f3a3 	rbit	r3, r3
 8002e00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002e04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002e0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002e14:	2320      	movs	r3, #32
 8002e16:	e004      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002e18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e1c:	fab3 f383 	clz	r3, r3
 8002e20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d106      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fb7e 	bl	8002530 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2102      	movs	r1, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff fb62 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10a      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x2e8>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2102      	movs	r1, #2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fb57 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002e56:	4603      	mov	r3, r0
 8002e58:	0e9b      	lsrs	r3, r3, #26
 8002e5a:	f003 021f 	and.w	r2, r3, #31
 8002e5e:	e01e      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x326>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2102      	movs	r1, #2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fb4c 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002e7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002e86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002e8e:	2320      	movs	r3, #32
 8002e90:	e004      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002e92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x33e>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	0e9b      	lsrs	r3, r3, #26
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	e016      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x36c>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ec2:	fa93 f3a3 	rbit	r3, r3
 8002ec6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002ec8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002eca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002ece:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002ed6:	2320      	movs	r3, #32
 8002ed8:	e004      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002eda:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d106      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2200      	movs	r2, #0
 8002eee:	2102      	movs	r1, #2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff fb1d 	bl	8002530 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2103      	movs	r1, #3
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fb01 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10a      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x3aa>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2103      	movs	r1, #3
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff faf6 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	0e9b      	lsrs	r3, r3, #26
 8002f1c:	f003 021f 	and.w	r2, r3, #31
 8002f20:	e017      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x3da>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2103      	movs	r1, #3
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff faeb 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002f3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f3c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002f3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002f44:	2320      	movs	r3, #32
 8002f46:	e003      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002f48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f4a:	fab3 f383 	clz	r3, r3
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d105      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x3f2>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	0e9b      	lsrs	r3, r3, #26
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	e011      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x416>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002f78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002f7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002f82:	2320      	movs	r3, #32
 8002f84:	e003      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002f86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f88:	fab3 f383 	clz	r3, r3
 8002f8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d106      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2200      	movs	r2, #0
 8002f98:	2103      	movs	r1, #3
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fac8 	bl	8002530 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fbf1 	bl	800278c <LL_ADC_IsEnabled>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f040 813d 	bne.w	800322c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6819      	ldr	r1, [r3, #0]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f7ff fb72 	bl	80026a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4aa2      	ldr	r2, [pc, #648]	@ (8003254 <HAL_ADC_ConfigChannel+0x6dc>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	f040 812e 	bne.w	800322c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10b      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x480>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	0e9b      	lsrs	r3, r3, #26
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	2b09      	cmp	r3, #9
 8002fee:	bf94      	ite	ls
 8002ff0:	2301      	movls	r3, #1
 8002ff2:	2300      	movhi	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	e019      	b.n	800302c <HAL_ADC_ConfigChannel+0x4b4>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003006:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003008:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800300a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003010:	2320      	movs	r3, #32
 8003012:	e003      	b.n	800301c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003014:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	3301      	adds	r3, #1
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	2b09      	cmp	r3, #9
 8003024:	bf94      	ite	ls
 8003026:	2301      	movls	r3, #1
 8003028:	2300      	movhi	r3, #0
 800302a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800302c:	2b00      	cmp	r3, #0
 800302e:	d079      	beq.n	8003124 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003038:	2b00      	cmp	r3, #0
 800303a:	d107      	bne.n	800304c <HAL_ADC_ConfigChannel+0x4d4>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	0e9b      	lsrs	r3, r3, #26
 8003042:	3301      	adds	r3, #1
 8003044:	069b      	lsls	r3, r3, #26
 8003046:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800304a:	e015      	b.n	8003078 <HAL_ADC_ConfigChannel+0x500>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800305a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800305c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800305e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003064:	2320      	movs	r3, #32
 8003066:	e003      	b.n	8003070 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	3301      	adds	r3, #1
 8003072:	069b      	lsls	r3, r3, #26
 8003074:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003080:	2b00      	cmp	r3, #0
 8003082:	d109      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x520>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0e9b      	lsrs	r3, r3, #26
 800308a:	3301      	adds	r3, #1
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	2101      	movs	r1, #1
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	e017      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x550>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80030a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80030aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80030b0:	2320      	movs	r3, #32
 80030b2:	e003      	b.n	80030bc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80030b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	2101      	movs	r1, #1
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	ea42 0103 	orr.w	r1, r2, r3
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10a      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x576>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	0e9b      	lsrs	r3, r3, #26
 80030de:	3301      	adds	r3, #1
 80030e0:	f003 021f 	and.w	r2, r3, #31
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	051b      	lsls	r3, r3, #20
 80030ec:	e018      	b.n	8003120 <HAL_ADC_ConfigChannel+0x5a8>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80030fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003106:	2320      	movs	r3, #32
 8003108:	e003      	b.n	8003112 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800310a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	b2db      	uxtb	r3, r3
 8003112:	3301      	adds	r3, #1
 8003114:	f003 021f 	and.w	r2, r3, #31
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003120:	430b      	orrs	r3, r1
 8003122:	e07e      	b.n	8003222 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312c:	2b00      	cmp	r3, #0
 800312e:	d107      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x5c8>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	0e9b      	lsrs	r3, r3, #26
 8003136:	3301      	adds	r3, #1
 8003138:	069b      	lsls	r3, r3, #26
 800313a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800313e:	e015      	b.n	800316c <HAL_ADC_ConfigChannel+0x5f4>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800314e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003150:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003158:	2320      	movs	r3, #32
 800315a:	e003      	b.n	8003164 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800315c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	3301      	adds	r3, #1
 8003166:	069b      	lsls	r3, r3, #26
 8003168:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_ADC_ConfigChannel+0x614>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	0e9b      	lsrs	r3, r3, #26
 800317e:	3301      	adds	r3, #1
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	2101      	movs	r1, #1
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	e017      	b.n	80031bc <HAL_ADC_ConfigChannel+0x644>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	61fb      	str	r3, [r7, #28]
  return result;
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	e003      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80031a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	3301      	adds	r3, #1
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	2101      	movs	r1, #1
 80031b8:	fa01 f303 	lsl.w	r3, r1, r3
 80031bc:	ea42 0103 	orr.w	r1, r2, r3
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10d      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x670>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	0e9b      	lsrs	r3, r3, #26
 80031d2:	3301      	adds	r3, #1
 80031d4:	f003 021f 	and.w	r2, r3, #31
 80031d8:	4613      	mov	r3, r2
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	4413      	add	r3, r2
 80031de:	3b1e      	subs	r3, #30
 80031e0:	051b      	lsls	r3, r3, #20
 80031e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031e6:	e01b      	b.n	8003220 <HAL_ADC_ConfigChannel+0x6a8>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	fa93 f3a3 	rbit	r3, r3
 80031f4:	613b      	str	r3, [r7, #16]
  return result;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003200:	2320      	movs	r3, #32
 8003202:	e003      	b.n	800320c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	3301      	adds	r3, #1
 800320e:	f003 021f 	and.w	r2, r3, #31
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	3b1e      	subs	r3, #30
 800321a:	051b      	lsls	r3, r3, #20
 800321c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003220:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003226:	4619      	mov	r1, r3
 8003228:	f7ff fa12 	bl	8002650 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	4b09      	ldr	r3, [pc, #36]	@ (8003258 <HAL_ADC_ConfigChannel+0x6e0>)
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80be 	beq.w	80033b6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003242:	d004      	beq.n	800324e <HAL_ADC_ConfigChannel+0x6d6>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a04      	ldr	r2, [pc, #16]	@ (800325c <HAL_ADC_ConfigChannel+0x6e4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d10a      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x6ec>
 800324e:	4b04      	ldr	r3, [pc, #16]	@ (8003260 <HAL_ADC_ConfigChannel+0x6e8>)
 8003250:	e009      	b.n	8003266 <HAL_ADC_ConfigChannel+0x6ee>
 8003252:	bf00      	nop
 8003254:	407f0000 	.word	0x407f0000
 8003258:	80080000 	.word	0x80080000
 800325c:	50000100 	.word	0x50000100
 8003260:	50000300 	.word	0x50000300
 8003264:	4b59      	ldr	r3, [pc, #356]	@ (80033cc <HAL_ADC_ConfigChannel+0x854>)
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff f91a 	bl	80024a0 <LL_ADC_GetCommonPathInternalCh>
 800326c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a56      	ldr	r2, [pc, #344]	@ (80033d0 <HAL_ADC_ConfigChannel+0x858>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d004      	beq.n	8003284 <HAL_ADC_ConfigChannel+0x70c>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a55      	ldr	r2, [pc, #340]	@ (80033d4 <HAL_ADC_ConfigChannel+0x85c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d13a      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003284:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003288:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d134      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003298:	d005      	beq.n	80032a6 <HAL_ADC_ConfigChannel+0x72e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a4e      	ldr	r2, [pc, #312]	@ (80033d8 <HAL_ADC_ConfigChannel+0x860>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	f040 8085 	bne.w	80033b0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032ae:	d004      	beq.n	80032ba <HAL_ADC_ConfigChannel+0x742>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a49      	ldr	r2, [pc, #292]	@ (80033dc <HAL_ADC_ConfigChannel+0x864>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d101      	bne.n	80032be <HAL_ADC_ConfigChannel+0x746>
 80032ba:	4a49      	ldr	r2, [pc, #292]	@ (80033e0 <HAL_ADC_ConfigChannel+0x868>)
 80032bc:	e000      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x748>
 80032be:	4a43      	ldr	r2, [pc, #268]	@ (80033cc <HAL_ADC_ConfigChannel+0x854>)
 80032c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032c8:	4619      	mov	r1, r3
 80032ca:	4610      	mov	r0, r2
 80032cc:	f7ff f8d5 	bl	800247a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032d0:	4b44      	ldr	r3, [pc, #272]	@ (80033e4 <HAL_ADC_ConfigChannel+0x86c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	099b      	lsrs	r3, r3, #6
 80032d6:	4a44      	ldr	r2, [pc, #272]	@ (80033e8 <HAL_ADC_ConfigChannel+0x870>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	099b      	lsrs	r3, r3, #6
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	4613      	mov	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032ea:	e002      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1f9      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032f8:	e05a      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a3b      	ldr	r2, [pc, #236]	@ (80033ec <HAL_ADC_ConfigChannel+0x874>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d125      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003308:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d11f      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a31      	ldr	r2, [pc, #196]	@ (80033dc <HAL_ADC_ConfigChannel+0x864>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d104      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x7ac>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a34      	ldr	r2, [pc, #208]	@ (80033f0 <HAL_ADC_ConfigChannel+0x878>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d047      	beq.n	80033b4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800332c:	d004      	beq.n	8003338 <HAL_ADC_ConfigChannel+0x7c0>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a2a      	ldr	r2, [pc, #168]	@ (80033dc <HAL_ADC_ConfigChannel+0x864>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d101      	bne.n	800333c <HAL_ADC_ConfigChannel+0x7c4>
 8003338:	4a29      	ldr	r2, [pc, #164]	@ (80033e0 <HAL_ADC_ConfigChannel+0x868>)
 800333a:	e000      	b.n	800333e <HAL_ADC_ConfigChannel+0x7c6>
 800333c:	4a23      	ldr	r2, [pc, #140]	@ (80033cc <HAL_ADC_ConfigChannel+0x854>)
 800333e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003342:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003346:	4619      	mov	r1, r3
 8003348:	4610      	mov	r0, r2
 800334a:	f7ff f896 	bl	800247a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800334e:	e031      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a27      	ldr	r2, [pc, #156]	@ (80033f4 <HAL_ADC_ConfigChannel+0x87c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d12d      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800335a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800335e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d127      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1c      	ldr	r2, [pc, #112]	@ (80033dc <HAL_ADC_ConfigChannel+0x864>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d022      	beq.n	80033b6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003378:	d004      	beq.n	8003384 <HAL_ADC_ConfigChannel+0x80c>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a17      	ldr	r2, [pc, #92]	@ (80033dc <HAL_ADC_ConfigChannel+0x864>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d101      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x810>
 8003384:	4a16      	ldr	r2, [pc, #88]	@ (80033e0 <HAL_ADC_ConfigChannel+0x868>)
 8003386:	e000      	b.n	800338a <HAL_ADC_ConfigChannel+0x812>
 8003388:	4a10      	ldr	r2, [pc, #64]	@ (80033cc <HAL_ADC_ConfigChannel+0x854>)
 800338a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800338e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003392:	4619      	mov	r1, r3
 8003394:	4610      	mov	r0, r2
 8003396:	f7ff f870 	bl	800247a <LL_ADC_SetCommonPathInternalCh>
 800339a:	e00c      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a0:	f043 0220 	orr.w	r2, r3, #32
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80033ae:	e002      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033b0:	bf00      	nop
 80033b2:	e000      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80033be:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	37d8      	adds	r7, #216	@ 0xd8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	50000700 	.word	0x50000700
 80033d0:	c3210000 	.word	0xc3210000
 80033d4:	90c00010 	.word	0x90c00010
 80033d8:	50000600 	.word	0x50000600
 80033dc:	50000100 	.word	0x50000100
 80033e0:	50000300 	.word	0x50000300
 80033e4:	20000000 	.word	0x20000000
 80033e8:	053e2d63 	.word	0x053e2d63
 80033ec:	c7520000 	.word	0xc7520000
 80033f0:	50000500 	.word	0x50000500
 80033f4:	cb840000 	.word	0xcb840000

080033f8 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003400:	4b05      	ldr	r3, [pc, #20]	@ (8003418 <LL_EXTI_EnableIT_0_31+0x20>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4904      	ldr	r1, [pc, #16]	@ (8003418 <LL_EXTI_EnableIT_0_31+0x20>)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	40010400 	.word	0x40010400

0800341c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003424:	4b05      	ldr	r3, [pc, #20]	@ (800343c <LL_EXTI_EnableIT_32_63+0x20>)
 8003426:	6a1a      	ldr	r2, [r3, #32]
 8003428:	4904      	ldr	r1, [pc, #16]	@ (800343c <LL_EXTI_EnableIT_32_63+0x20>)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4313      	orrs	r3, r2
 800342e:	620b      	str	r3, [r1, #32]
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	40010400 	.word	0x40010400

08003440 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003448:	4b06      	ldr	r3, [pc, #24]	@ (8003464 <LL_EXTI_DisableIT_0_31+0x24>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	43db      	mvns	r3, r3
 8003450:	4904      	ldr	r1, [pc, #16]	@ (8003464 <LL_EXTI_DisableIT_0_31+0x24>)
 8003452:	4013      	ands	r3, r2
 8003454:	600b      	str	r3, [r1, #0]
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40010400 	.word	0x40010400

08003468 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003470:	4b06      	ldr	r3, [pc, #24]	@ (800348c <LL_EXTI_DisableIT_32_63+0x24>)
 8003472:	6a1a      	ldr	r2, [r3, #32]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	43db      	mvns	r3, r3
 8003478:	4904      	ldr	r1, [pc, #16]	@ (800348c <LL_EXTI_DisableIT_32_63+0x24>)
 800347a:	4013      	ands	r3, r2
 800347c:	620b      	str	r3, [r1, #32]
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40010400 	.word	0x40010400

08003490 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003498:	4b05      	ldr	r3, [pc, #20]	@ (80034b0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	4904      	ldr	r1, [pc, #16]	@ (80034b0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]

}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	40010400 	.word	0x40010400

080034b4 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80034bc:	4b05      	ldr	r3, [pc, #20]	@ (80034d4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80034be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034c0:	4904      	ldr	r1, [pc, #16]	@ (80034d4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	40010400 	.word	0x40010400

080034d8 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80034e0:	4b06      	ldr	r3, [pc, #24]	@ (80034fc <LL_EXTI_DisableEvent_0_31+0x24>)
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	43db      	mvns	r3, r3
 80034e8:	4904      	ldr	r1, [pc, #16]	@ (80034fc <LL_EXTI_DisableEvent_0_31+0x24>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	604b      	str	r3, [r1, #4]
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40010400 	.word	0x40010400

08003500 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003508:	4b06      	ldr	r3, [pc, #24]	@ (8003524 <LL_EXTI_DisableEvent_32_63+0x24>)
 800350a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	43db      	mvns	r3, r3
 8003510:	4904      	ldr	r1, [pc, #16]	@ (8003524 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003512:	4013      	ands	r3, r2
 8003514:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40010400 	.word	0x40010400

08003528 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003530:	4b05      	ldr	r3, [pc, #20]	@ (8003548 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	4904      	ldr	r1, [pc, #16]	@ (8003548 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4313      	orrs	r3, r2
 800353a:	608b      	str	r3, [r1, #8]

}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	40010400 	.word	0x40010400

0800354c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003554:	4b05      	ldr	r3, [pc, #20]	@ (800356c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003556:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003558:	4904      	ldr	r1, [pc, #16]	@ (800356c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4313      	orrs	r3, r2
 800355e:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	40010400 	.word	0x40010400

08003570 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003578:	4b06      	ldr	r3, [pc, #24]	@ (8003594 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	43db      	mvns	r3, r3
 8003580:	4904      	ldr	r1, [pc, #16]	@ (8003594 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003582:	4013      	ands	r3, r2
 8003584:	608b      	str	r3, [r1, #8]

}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40010400 	.word	0x40010400

08003598 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80035a0:	4b06      	ldr	r3, [pc, #24]	@ (80035bc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80035a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	4904      	ldr	r1, [pc, #16]	@ (80035bc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40010400 	.word	0x40010400

080035c0 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80035c8:	4b05      	ldr	r3, [pc, #20]	@ (80035e0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	4904      	ldr	r1, [pc, #16]	@ (80035e0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60cb      	str	r3, [r1, #12]
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	40010400 	.word	0x40010400

080035e4 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80035ec:	4b05      	ldr	r3, [pc, #20]	@ (8003604 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80035ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f0:	4904      	ldr	r1, [pc, #16]	@ (8003604 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	40010400 	.word	0x40010400

08003608 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003610:	4b06      	ldr	r3, [pc, #24]	@ (800362c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	43db      	mvns	r3, r3
 8003618:	4904      	ldr	r1, [pc, #16]	@ (800362c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800361a:	4013      	ands	r3, r2
 800361c:	60cb      	str	r3, [r1, #12]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40010400 	.word	0x40010400

08003630 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003638:	4b06      	ldr	r3, [pc, #24]	@ (8003654 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800363a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	43db      	mvns	r3, r3
 8003640:	4904      	ldr	r1, [pc, #16]	@ (8003654 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003642:	4013      	ands	r3, r2
 8003644:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40010400 	.word	0x40010400

08003658 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003660:	4a04      	ldr	r2, [pc, #16]	@ (8003674 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6153      	str	r3, [r2, #20]
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40010400 	.word	0x40010400

08003678 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8003680:	4a04      	ldr	r2, [pc, #16]	@ (8003694 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40010400 	.word	0x40010400

08003698 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d102      	bne.n	80036b4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	77fb      	strb	r3, [r7, #31]
 80036b2:	e181      	b.n	80039b8 <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80036be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036c2:	d102      	bne.n	80036ca <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e176      	b.n	80039b8 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	7f5b      	ldrb	r3, [r3, #29]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d108      	bne.n	80036e6 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7fe f95b 	bl	800199c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036f0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	4b90      	ldr	r3, [pc, #576]	@ (8003958 <HAL_COMP_Init+0x2c0>)
 8003718:	4013      	ands	r3, r2
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	6979      	ldr	r1, [r7, #20]
 8003720:	430b      	orrs	r3, r1
 8003722:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d016      	beq.n	8003760 <HAL_COMP_Init+0xc8>
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d113      	bne.n	8003760 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003738:	4b88      	ldr	r3, [pc, #544]	@ (800395c <HAL_COMP_Init+0x2c4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	099b      	lsrs	r3, r3, #6
 800373e:	4a88      	ldr	r2, [pc, #544]	@ (8003960 <HAL_COMP_Init+0x2c8>)
 8003740:	fba2 2303 	umull	r2, r3, r2, r3
 8003744:	099b      	lsrs	r3, r3, #6
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003752:	e002      	b.n	800375a <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3b01      	subs	r3, #1
 8003758:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f9      	bne.n	8003754 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a7f      	ldr	r2, [pc, #508]	@ (8003964 <HAL_COMP_Init+0x2cc>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d028      	beq.n	80037bc <HAL_COMP_Init+0x124>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a7e      	ldr	r2, [pc, #504]	@ (8003968 <HAL_COMP_Init+0x2d0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d020      	beq.n	80037b6 <HAL_COMP_Init+0x11e>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a7c      	ldr	r2, [pc, #496]	@ (800396c <HAL_COMP_Init+0x2d4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d018      	beq.n	80037b0 <HAL_COMP_Init+0x118>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a7b      	ldr	r2, [pc, #492]	@ (8003970 <HAL_COMP_Init+0x2d8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d010      	beq.n	80037aa <HAL_COMP_Init+0x112>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a79      	ldr	r2, [pc, #484]	@ (8003974 <HAL_COMP_Init+0x2dc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d008      	beq.n	80037a4 <HAL_COMP_Init+0x10c>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a78      	ldr	r2, [pc, #480]	@ (8003978 <HAL_COMP_Init+0x2e0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d101      	bne.n	80037a0 <HAL_COMP_Init+0x108>
 800379c:	2301      	movs	r3, #1
 800379e:	e00f      	b.n	80037c0 <HAL_COMP_Init+0x128>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e00d      	b.n	80037c0 <HAL_COMP_Init+0x128>
 80037a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80037a8:	e00a      	b.n	80037c0 <HAL_COMP_Init+0x128>
 80037aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80037ae:	e007      	b.n	80037c0 <HAL_COMP_Init+0x128>
 80037b0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80037b4:	e004      	b.n	80037c0 <HAL_COMP_Init+0x128>
 80037b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80037ba:	e001      	b.n	80037c0 <HAL_COMP_Init+0x128>
 80037bc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80037c0:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 80b6 	beq.w	800393c <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d011      	beq.n	8003800 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a65      	ldr	r2, [pc, #404]	@ (8003978 <HAL_COMP_Init+0x2e0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d004      	beq.n	80037f0 <HAL_COMP_Init+0x158>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a64      	ldr	r2, [pc, #400]	@ (800397c <HAL_COMP_Init+0x2e4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d103      	bne.n	80037f8 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80037f0:	6938      	ldr	r0, [r7, #16]
 80037f2:	f7ff feab 	bl	800354c <LL_EXTI_EnableRisingTrig_32_63>
 80037f6:	e014      	b.n	8003822 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80037f8:	6938      	ldr	r0, [r7, #16]
 80037fa:	f7ff fe95 	bl	8003528 <LL_EXTI_EnableRisingTrig_0_31>
 80037fe:	e010      	b.n	8003822 <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a5c      	ldr	r2, [pc, #368]	@ (8003978 <HAL_COMP_Init+0x2e0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <HAL_COMP_Init+0x17c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a5b      	ldr	r2, [pc, #364]	@ (800397c <HAL_COMP_Init+0x2e4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d103      	bne.n	800381c <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8003814:	6938      	ldr	r0, [r7, #16]
 8003816:	f7ff febf 	bl	8003598 <LL_EXTI_DisableRisingTrig_32_63>
 800381a:	e002      	b.n	8003822 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800381c:	6938      	ldr	r0, [r7, #16]
 800381e:	f7ff fea7 	bl	8003570 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d011      	beq.n	8003852 <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a51      	ldr	r2, [pc, #324]	@ (8003978 <HAL_COMP_Init+0x2e0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d004      	beq.n	8003842 <HAL_COMP_Init+0x1aa>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a4f      	ldr	r2, [pc, #316]	@ (800397c <HAL_COMP_Init+0x2e4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d103      	bne.n	800384a <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8003842:	6938      	ldr	r0, [r7, #16]
 8003844:	f7ff fece 	bl	80035e4 <LL_EXTI_EnableFallingTrig_32_63>
 8003848:	e014      	b.n	8003874 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800384a:	6938      	ldr	r0, [r7, #16]
 800384c:	f7ff feb8 	bl	80035c0 <LL_EXTI_EnableFallingTrig_0_31>
 8003850:	e010      	b.n	8003874 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a48      	ldr	r2, [pc, #288]	@ (8003978 <HAL_COMP_Init+0x2e0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d004      	beq.n	8003866 <HAL_COMP_Init+0x1ce>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a46      	ldr	r2, [pc, #280]	@ (800397c <HAL_COMP_Init+0x2e4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d103      	bne.n	800386e <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8003866:	6938      	ldr	r0, [r7, #16]
 8003868:	f7ff fee2 	bl	8003630 <LL_EXTI_DisableFallingTrig_32_63>
 800386c:	e002      	b.n	8003874 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800386e:	6938      	ldr	r0, [r7, #16]
 8003870:	f7ff feca 	bl	8003608 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a3f      	ldr	r2, [pc, #252]	@ (8003978 <HAL_COMP_Init+0x2e0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d004      	beq.n	8003888 <HAL_COMP_Init+0x1f0>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a3e      	ldr	r2, [pc, #248]	@ (800397c <HAL_COMP_Init+0x2e4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d103      	bne.n	8003890 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8003888:	6938      	ldr	r0, [r7, #16]
 800388a:	f7ff fef5 	bl	8003678 <LL_EXTI_ClearFlag_32_63>
 800388e:	e002      	b.n	8003896 <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8003890:	6938      	ldr	r0, [r7, #16]
 8003892:	f7ff fee1 	bl	8003658 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d011      	beq.n	80038c6 <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a34      	ldr	r2, [pc, #208]	@ (8003978 <HAL_COMP_Init+0x2e0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d004      	beq.n	80038b6 <HAL_COMP_Init+0x21e>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a32      	ldr	r2, [pc, #200]	@ (800397c <HAL_COMP_Init+0x2e4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d103      	bne.n	80038be <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80038b6:	6938      	ldr	r0, [r7, #16]
 80038b8:	f7ff fdfc 	bl	80034b4 <LL_EXTI_EnableEvent_32_63>
 80038bc:	e014      	b.n	80038e8 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80038be:	6938      	ldr	r0, [r7, #16]
 80038c0:	f7ff fde6 	bl	8003490 <LL_EXTI_EnableEvent_0_31>
 80038c4:	e010      	b.n	80038e8 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003978 <HAL_COMP_Init+0x2e0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d004      	beq.n	80038da <HAL_COMP_Init+0x242>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a29      	ldr	r2, [pc, #164]	@ (800397c <HAL_COMP_Init+0x2e4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d103      	bne.n	80038e2 <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80038da:	6938      	ldr	r0, [r7, #16]
 80038dc:	f7ff fe10 	bl	8003500 <LL_EXTI_DisableEvent_32_63>
 80038e0:	e002      	b.n	80038e8 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80038e2:	6938      	ldr	r0, [r7, #16]
 80038e4:	f7ff fdf8 	bl	80034d8 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d011      	beq.n	8003918 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003978 <HAL_COMP_Init+0x2e0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <HAL_COMP_Init+0x270>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1e      	ldr	r2, [pc, #120]	@ (800397c <HAL_COMP_Init+0x2e4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d103      	bne.n	8003910 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8003908:	6938      	ldr	r0, [r7, #16]
 800390a:	f7ff fd87 	bl	800341c <LL_EXTI_EnableIT_32_63>
 800390e:	e04b      	b.n	80039a8 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8003910:	6938      	ldr	r0, [r7, #16]
 8003912:	f7ff fd71 	bl	80033f8 <LL_EXTI_EnableIT_0_31>
 8003916:	e047      	b.n	80039a8 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a16      	ldr	r2, [pc, #88]	@ (8003978 <HAL_COMP_Init+0x2e0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d004      	beq.n	800392c <HAL_COMP_Init+0x294>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a15      	ldr	r2, [pc, #84]	@ (800397c <HAL_COMP_Init+0x2e4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d103      	bne.n	8003934 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800392c:	6938      	ldr	r0, [r7, #16]
 800392e:	f7ff fd9b 	bl	8003468 <LL_EXTI_DisableIT_32_63>
 8003932:	e039      	b.n	80039a8 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8003934:	6938      	ldr	r0, [r7, #16]
 8003936:	f7ff fd83 	bl	8003440 <LL_EXTI_DisableIT_0_31>
 800393a:	e035      	b.n	80039a8 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a0d      	ldr	r2, [pc, #52]	@ (8003978 <HAL_COMP_Init+0x2e0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <HAL_COMP_Init+0x2b8>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a0c      	ldr	r2, [pc, #48]	@ (800397c <HAL_COMP_Init+0x2e4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d117      	bne.n	8003980 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8003950:	6938      	ldr	r0, [r7, #16]
 8003952:	f7ff fdd5 	bl	8003500 <LL_EXTI_DisableEvent_32_63>
 8003956:	e016      	b.n	8003986 <HAL_COMP_Init+0x2ee>
 8003958:	ff007e0f 	.word	0xff007e0f
 800395c:	20000000 	.word	0x20000000
 8003960:	053e2d63 	.word	0x053e2d63
 8003964:	40010200 	.word	0x40010200
 8003968:	40010204 	.word	0x40010204
 800396c:	40010208 	.word	0x40010208
 8003970:	4001020c 	.word	0x4001020c
 8003974:	40010210 	.word	0x40010210
 8003978:	40010214 	.word	0x40010214
 800397c:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003980:	6938      	ldr	r0, [r7, #16]
 8003982:	f7ff fda9 	bl	80034d8 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a0e      	ldr	r2, [pc, #56]	@ (80039c4 <HAL_COMP_Init+0x32c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d004      	beq.n	800399a <HAL_COMP_Init+0x302>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a0c      	ldr	r2, [pc, #48]	@ (80039c8 <HAL_COMP_Init+0x330>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d103      	bne.n	80039a2 <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800399a:	6938      	ldr	r0, [r7, #16]
 800399c:	f7ff fd64 	bl	8003468 <LL_EXTI_DisableIT_32_63>
 80039a0:	e002      	b.n	80039a8 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80039a2:	6938      	ldr	r0, [r7, #16]
 80039a4:	f7ff fd4c 	bl	8003440 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	7f5b      	ldrb	r3, [r3, #29]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d102      	bne.n	80039b8 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80039b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3720      	adds	r7, #32
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40010214 	.word	0x40010214
 80039c8:	40010218 	.word	0x40010218

080039cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003a10 <__NVIC_SetPriorityGrouping+0x44>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039e8:	4013      	ands	r3, r2
 80039ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039fe:	4a04      	ldr	r2, [pc, #16]	@ (8003a10 <__NVIC_SetPriorityGrouping+0x44>)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	60d3      	str	r3, [r2, #12]
}
 8003a04:	bf00      	nop
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a18:	4b04      	ldr	r3, [pc, #16]	@ (8003a2c <__NVIC_GetPriorityGrouping+0x18>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	0a1b      	lsrs	r3, r3, #8
 8003a1e:	f003 0307 	and.w	r3, r3, #7
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	db0b      	blt.n	8003a5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	f003 021f 	and.w	r2, r3, #31
 8003a48:	4907      	ldr	r1, [pc, #28]	@ (8003a68 <__NVIC_EnableIRQ+0x38>)
 8003a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	2001      	movs	r0, #1
 8003a52:	fa00 f202 	lsl.w	r2, r0, r2
 8003a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	e000e100 	.word	0xe000e100

08003a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	6039      	str	r1, [r7, #0]
 8003a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	db0a      	blt.n	8003a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	490c      	ldr	r1, [pc, #48]	@ (8003ab8 <__NVIC_SetPriority+0x4c>)
 8003a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8a:	0112      	lsls	r2, r2, #4
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	440b      	add	r3, r1
 8003a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a94:	e00a      	b.n	8003aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4908      	ldr	r1, [pc, #32]	@ (8003abc <__NVIC_SetPriority+0x50>)
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	3b04      	subs	r3, #4
 8003aa4:	0112      	lsls	r2, r2, #4
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	761a      	strb	r2, [r3, #24]
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	e000e100 	.word	0xe000e100
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b089      	sub	sp, #36	@ 0x24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f1c3 0307 	rsb	r3, r3, #7
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	bf28      	it	cs
 8003ade:	2304      	movcs	r3, #4
 8003ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	2b06      	cmp	r3, #6
 8003ae8:	d902      	bls.n	8003af0 <NVIC_EncodePriority+0x30>
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3b03      	subs	r3, #3
 8003aee:	e000      	b.n	8003af2 <NVIC_EncodePriority+0x32>
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af4:	f04f 32ff 	mov.w	r2, #4294967295
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43da      	mvns	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	401a      	ands	r2, r3
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b08:	f04f 31ff 	mov.w	r1, #4294967295
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b12:	43d9      	mvns	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b18:	4313      	orrs	r3, r2
         );
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3724      	adds	r7, #36	@ 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
	...

08003b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b38:	d301      	bcc.n	8003b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e00f      	b.n	8003b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b68 <SysTick_Config+0x40>)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b46:	210f      	movs	r1, #15
 8003b48:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4c:	f7ff ff8e 	bl	8003a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b50:	4b05      	ldr	r3, [pc, #20]	@ (8003b68 <SysTick_Config+0x40>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b56:	4b04      	ldr	r3, [pc, #16]	@ (8003b68 <SysTick_Config+0x40>)
 8003b58:	2207      	movs	r2, #7
 8003b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	e000e010 	.word	0xe000e010

08003b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ff29 	bl	80039cc <__NVIC_SetPriorityGrouping>
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	4603      	mov	r3, r0
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b90:	f7ff ff40 	bl	8003a14 <__NVIC_GetPriorityGrouping>
 8003b94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	6978      	ldr	r0, [r7, #20]
 8003b9c:	f7ff ff90 	bl	8003ac0 <NVIC_EncodePriority>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff ff5f 	bl	8003a6c <__NVIC_SetPriority>
}
 8003bae:	bf00      	nop
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff ff33 	bl	8003a30 <__NVIC_EnableIRQ>
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff ffa4 	bl	8003b28 <SysTick_Config>
 8003be0:	4603      	mov	r3, r0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b082      	sub	sp, #8
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e014      	b.n	8003c26 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	791b      	ldrb	r3, [r3, #4]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d105      	bne.n	8003c12 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7fd ff1b 	bl	8001a48 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2202      	movs	r2, #2
 8003c16:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08a      	sub	sp, #40	@ 0x28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_DAC_ConfigChannel+0x1c>
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e1a1      	b.n	8003f94 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	795b      	ldrb	r3, [r3, #5]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_DAC_ConfigChannel+0x32>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e198      	b.n	8003f94 <HAL_DAC_ConfigChannel+0x364>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d17a      	bne.n	8003d6c <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003c76:	f7fe fb9b 	bl	80023b0 <HAL_GetTick>
 8003c7a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d13d      	bne.n	8003cfe <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c82:	e018      	b.n	8003cb6 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003c84:	f7fe fb94 	bl	80023b0 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d911      	bls.n	8003cb6 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f043 0208 	orr.w	r2, r3, #8
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2203      	movs	r2, #3
 8003cb0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e16e      	b.n	8003f94 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1df      	bne.n	8003c84 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ccc:	641a      	str	r2, [r3, #64]	@ 0x40
 8003cce:	e020      	b.n	8003d12 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003cd0:	f7fe fb6e 	bl	80023b0 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d90f      	bls.n	8003cfe <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	da0a      	bge.n	8003cfe <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f043 0208 	orr.w	r2, r3, #8
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e14a      	b.n	8003f94 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	dbe3      	blt.n	8003cd0 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d10:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003d22:	fa01 f303 	lsl.w	r3, r1, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	ea02 0103 	and.w	r1, r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	409a      	lsls	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	21ff      	movs	r1, #255	@ 0xff
 8003d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d52:	43db      	mvns	r3, r3
 8003d54:	ea02 0103 	and.w	r1, r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	409a      	lsls	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d11d      	bne.n	8003db0 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	221f      	movs	r2, #31
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da4:	4313      	orrs	r3, r2
 8003da6:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2207      	movs	r2, #7
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc8:	4013      	ands	r3, r2
 8003dca:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d102      	bne.n	8003dda <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	623b      	str	r3, [r7, #32]
 8003dd8:	e00f      	b.n	8003dfa <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d102      	bne.n	8003de8 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003de2:	2301      	movs	r3, #1
 8003de4:	623b      	str	r3, [r7, #32]
 8003de6:	e008      	b.n	8003dfa <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d102      	bne.n	8003df6 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003df0:	2301      	movs	r3, #1
 8003df2:	623b      	str	r3, [r7, #32]
 8003df4:	e001      	b.n	8003dfa <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	6a3a      	ldr	r2, [r7, #32]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	791b      	ldrb	r3, [r3, #4]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d102      	bne.n	8003e2e <HAL_DAC_ConfigChannel+0x1fe>
 8003e28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e2c:	e000      	b.n	8003e30 <HAL_DAC_ConfigChannel+0x200>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e48:	4013      	ands	r3, r2
 8003e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	795b      	ldrb	r3, [r3, #5]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d102      	bne.n	8003e5a <HAL_DAC_ConfigChannel+0x22a>
 8003e54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e58:	e000      	b.n	8003e5c <HAL_DAC_ConfigChannel+0x22c>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003e68:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d114      	bne.n	8003e9c <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003e72:	f002 ffc1 	bl	8006df8 <HAL_RCC_GetHCLKFreq>
 8003e76:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4a48      	ldr	r2, [pc, #288]	@ (8003f9c <HAL_DAC_ConfigChannel+0x36c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d904      	bls.n	8003e8a <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e88:	e00f      	b.n	8003eaa <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4a44      	ldr	r2, [pc, #272]	@ (8003fa0 <HAL_DAC_ConfigChannel+0x370>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d90a      	bls.n	8003ea8 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e9a:	e006      	b.n	8003eaa <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ea6:	e000      	b.n	8003eaa <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003ea8:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ec2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6819      	ldr	r1, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	43da      	mvns	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	400a      	ands	r2, r1
 8003ee0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003efc:	4013      	ands	r3, r2
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f14:	4313      	orrs	r3, r2
 8003f16:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f1e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6819      	ldr	r1, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	22c0      	movs	r2, #192	@ 0xc0
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	43da      	mvns	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	400a      	ands	r2, r1
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	089b      	lsrs	r3, r3, #2
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	089b      	lsrs	r3, r3, #2
 8003f4e:	021b      	lsls	r3, r3, #8
 8003f50:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8003f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	ea02 0103 	and.w	r1, r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	409a      	lsls	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003f92:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3728      	adds	r7, #40	@ 0x28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	09896800 	.word	0x09896800
 8003fa0:	04c4b400 	.word	0x04c4b400

08003fa4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e08d      	b.n	80040d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4b47      	ldr	r3, [pc, #284]	@ (80040dc <HAL_DMA_Init+0x138>)
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d80f      	bhi.n	8003fe2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4b45      	ldr	r3, [pc, #276]	@ (80040e0 <HAL_DMA_Init+0x13c>)
 8003fca:	4413      	add	r3, r2
 8003fcc:	4a45      	ldr	r2, [pc, #276]	@ (80040e4 <HAL_DMA_Init+0x140>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	091b      	lsrs	r3, r3, #4
 8003fd4:	009a      	lsls	r2, r3, #2
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a42      	ldr	r2, [pc, #264]	@ (80040e8 <HAL_DMA_Init+0x144>)
 8003fde:	641a      	str	r2, [r3, #64]	@ 0x40
 8003fe0:	e00e      	b.n	8004000 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4b40      	ldr	r3, [pc, #256]	@ (80040ec <HAL_DMA_Init+0x148>)
 8003fea:	4413      	add	r3, r2
 8003fec:	4a3d      	ldr	r2, [pc, #244]	@ (80040e4 <HAL_DMA_Init+0x140>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	091b      	lsrs	r3, r3, #4
 8003ff4:	009a      	lsls	r2, r3, #2
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a3c      	ldr	r2, [pc, #240]	@ (80040f0 <HAL_DMA_Init+0x14c>)
 8003ffe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800401a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004024:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004030:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800403c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f9b6 	bl	80043c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004060:	d102      	bne.n	8004068 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800407c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d010      	beq.n	80040a8 <HAL_DMA_Init+0x104>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b04      	cmp	r3, #4
 800408c:	d80c      	bhi.n	80040a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f9d6 	bl	8004440 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	e008      	b.n	80040ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40020407 	.word	0x40020407
 80040e0:	bffdfff8 	.word	0xbffdfff8
 80040e4:	cccccccd 	.word	0xcccccccd
 80040e8:	40020000 	.word	0x40020000
 80040ec:	bffdfbf8 	.word	0xbffdfbf8
 80040f0:	40020400 	.word	0x40020400

080040f4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_DMA_Start_IT+0x20>
 8004110:	2302      	movs	r3, #2
 8004112:	e066      	b.n	80041e2 <HAL_DMA_Start_IT+0xee>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	d155      	bne.n	80041d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f8fb 	bl	8004348 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	2b00      	cmp	r3, #0
 8004158:	d008      	beq.n	800416c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 020e 	orr.w	r2, r2, #14
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	e00f      	b.n	800418c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0204 	bic.w	r2, r2, #4
 800417a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 020a 	orr.w	r2, r2, #10
 800418a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0201 	orr.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	e005      	b.n	80041e0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80041dc:	2302      	movs	r3, #2
 80041de:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80041e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	2204      	movs	r2, #4
 800420c:	409a      	lsls	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4013      	ands	r3, r2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d026      	beq.n	8004264 <HAL_DMA_IRQHandler+0x7a>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d021      	beq.n	8004264 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	d107      	bne.n	800423e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0204 	bic.w	r2, r2, #4
 800423c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004242:	f003 021f 	and.w	r2, r3, #31
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	2104      	movs	r1, #4
 800424c:	fa01 f202 	lsl.w	r2, r1, r2
 8004250:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004256:	2b00      	cmp	r3, #0
 8004258:	d071      	beq.n	800433e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004262:	e06c      	b.n	800433e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004268:	f003 031f 	and.w	r3, r3, #31
 800426c:	2202      	movs	r2, #2
 800426e:	409a      	lsls	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d02e      	beq.n	80042d6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d029      	beq.n	80042d6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10b      	bne.n	80042a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 020a 	bic.w	r2, r2, #10
 800429e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ac:	f003 021f 	and.w	r2, r3, #31
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	2102      	movs	r1, #2
 80042b6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d038      	beq.n	800433e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80042d4:	e033      	b.n	800433e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042da:	f003 031f 	and.w	r3, r3, #31
 80042de:	2208      	movs	r2, #8
 80042e0:	409a      	lsls	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d02a      	beq.n	8004340 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d025      	beq.n	8004340 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 020e 	bic.w	r2, r2, #14
 8004302:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004308:	f003 021f 	and.w	r2, r3, #31
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004310:	2101      	movs	r1, #1
 8004312:	fa01 f202 	lsl.w	r2, r1, r2
 8004316:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004332:	2b00      	cmp	r3, #0
 8004334:	d004      	beq.n	8004340 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800433e:	bf00      	nop
 8004340:	bf00      	nop
}
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800435e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004364:	2b00      	cmp	r3, #0
 8004366:	d004      	beq.n	8004372 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004370:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004376:	f003 021f 	and.w	r2, r3, #31
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	2101      	movs	r1, #1
 8004380:	fa01 f202 	lsl.w	r2, r1, r2
 8004384:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b10      	cmp	r3, #16
 8004394:	d108      	bne.n	80043a8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043a6:	e007      	b.n	80043b8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	60da      	str	r2, [r3, #12]
}
 80043b8:	bf00      	nop
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b16      	ldr	r3, [pc, #88]	@ (800442c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d802      	bhi.n	80043de <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80043d8:	4b15      	ldr	r3, [pc, #84]	@ (8004430 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	e001      	b.n	80043e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80043de:	4b15      	ldr	r3, [pc, #84]	@ (8004434 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80043e0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	3b08      	subs	r3, #8
 80043ee:	4a12      	ldr	r2, [pc, #72]	@ (8004438 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80043f0:	fba2 2303 	umull	r2, r3, r2, r3
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fc:	089b      	lsrs	r3, r3, #2
 80043fe:	009a      	lsls	r2, r3, #2
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	4413      	add	r3, r2
 8004404:	461a      	mov	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a0b      	ldr	r2, [pc, #44]	@ (800443c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800440e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	2201      	movs	r2, #1
 8004418:	409a      	lsls	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800441e:	bf00      	nop
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40020407 	.word	0x40020407
 8004430:	40020800 	.word	0x40020800
 8004434:	40020820 	.word	0x40020820
 8004438:	cccccccd 	.word	0xcccccccd
 800443c:	40020880 	.word	0x40020880

08004440 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4b0b      	ldr	r3, [pc, #44]	@ (8004480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	461a      	mov	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a08      	ldr	r2, [pc, #32]	@ (8004484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004462:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3b01      	subs	r3, #1
 8004468:	f003 031f 	and.w	r3, r3, #31
 800446c:	2201      	movs	r2, #1
 800446e:	409a      	lsls	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	1000823f 	.word	0x1000823f
 8004484:	40020940 	.word	0x40020940

08004488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004496:	e15a      	b.n	800474e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	2101      	movs	r1, #1
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	fa01 f303 	lsl.w	r3, r1, r3
 80044a4:	4013      	ands	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 814c 	beq.w	8004748 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d005      	beq.n	80044c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d130      	bne.n	800452a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	2203      	movs	r2, #3
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	43db      	mvns	r3, r3
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4013      	ands	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044fe:	2201      	movs	r2, #1
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43db      	mvns	r3, r3
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4013      	ands	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	091b      	lsrs	r3, r3, #4
 8004514:	f003 0201 	and.w	r2, r3, #1
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b03      	cmp	r3, #3
 8004534:	d017      	beq.n	8004566 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	2203      	movs	r2, #3
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4013      	ands	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d123      	bne.n	80045ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	08da      	lsrs	r2, r3, #3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3208      	adds	r2, #8
 800457a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800457e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	220f      	movs	r2, #15
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	43db      	mvns	r3, r3
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4013      	ands	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	691a      	ldr	r2, [r3, #16]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	08da      	lsrs	r2, r3, #3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3208      	adds	r2, #8
 80045b4:	6939      	ldr	r1, [r7, #16]
 80045b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	2203      	movs	r2, #3
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43db      	mvns	r3, r3
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4013      	ands	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f003 0203 	and.w	r2, r3, #3
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 80a6 	beq.w	8004748 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045fc:	4b5b      	ldr	r3, [pc, #364]	@ (800476c <HAL_GPIO_Init+0x2e4>)
 80045fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004600:	4a5a      	ldr	r2, [pc, #360]	@ (800476c <HAL_GPIO_Init+0x2e4>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	6613      	str	r3, [r2, #96]	@ 0x60
 8004608:	4b58      	ldr	r3, [pc, #352]	@ (800476c <HAL_GPIO_Init+0x2e4>)
 800460a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004614:	4a56      	ldr	r2, [pc, #344]	@ (8004770 <HAL_GPIO_Init+0x2e8>)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	089b      	lsrs	r3, r3, #2
 800461a:	3302      	adds	r3, #2
 800461c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004620:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	220f      	movs	r2, #15
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	43db      	mvns	r3, r3
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4013      	ands	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800463e:	d01f      	beq.n	8004680 <HAL_GPIO_Init+0x1f8>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a4c      	ldr	r2, [pc, #304]	@ (8004774 <HAL_GPIO_Init+0x2ec>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d019      	beq.n	800467c <HAL_GPIO_Init+0x1f4>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a4b      	ldr	r2, [pc, #300]	@ (8004778 <HAL_GPIO_Init+0x2f0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d013      	beq.n	8004678 <HAL_GPIO_Init+0x1f0>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a4a      	ldr	r2, [pc, #296]	@ (800477c <HAL_GPIO_Init+0x2f4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d00d      	beq.n	8004674 <HAL_GPIO_Init+0x1ec>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a49      	ldr	r2, [pc, #292]	@ (8004780 <HAL_GPIO_Init+0x2f8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d007      	beq.n	8004670 <HAL_GPIO_Init+0x1e8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a48      	ldr	r2, [pc, #288]	@ (8004784 <HAL_GPIO_Init+0x2fc>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d101      	bne.n	800466c <HAL_GPIO_Init+0x1e4>
 8004668:	2305      	movs	r3, #5
 800466a:	e00a      	b.n	8004682 <HAL_GPIO_Init+0x1fa>
 800466c:	2306      	movs	r3, #6
 800466e:	e008      	b.n	8004682 <HAL_GPIO_Init+0x1fa>
 8004670:	2304      	movs	r3, #4
 8004672:	e006      	b.n	8004682 <HAL_GPIO_Init+0x1fa>
 8004674:	2303      	movs	r3, #3
 8004676:	e004      	b.n	8004682 <HAL_GPIO_Init+0x1fa>
 8004678:	2302      	movs	r3, #2
 800467a:	e002      	b.n	8004682 <HAL_GPIO_Init+0x1fa>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <HAL_GPIO_Init+0x1fa>
 8004680:	2300      	movs	r3, #0
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	f002 0203 	and.w	r2, r2, #3
 8004688:	0092      	lsls	r2, r2, #2
 800468a:	4093      	lsls	r3, r2
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004692:	4937      	ldr	r1, [pc, #220]	@ (8004770 <HAL_GPIO_Init+0x2e8>)
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	089b      	lsrs	r3, r3, #2
 8004698:	3302      	adds	r3, #2
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046a0:	4b39      	ldr	r3, [pc, #228]	@ (8004788 <HAL_GPIO_Init+0x300>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	43db      	mvns	r3, r3
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4013      	ands	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046c4:	4a30      	ldr	r2, [pc, #192]	@ (8004788 <HAL_GPIO_Init+0x300>)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004788 <HAL_GPIO_Init+0x300>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	43db      	mvns	r3, r3
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4013      	ands	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046ee:	4a26      	ldr	r2, [pc, #152]	@ (8004788 <HAL_GPIO_Init+0x300>)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80046f4:	4b24      	ldr	r3, [pc, #144]	@ (8004788 <HAL_GPIO_Init+0x300>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	43db      	mvns	r3, r3
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4013      	ands	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004718:	4a1b      	ldr	r2, [pc, #108]	@ (8004788 <HAL_GPIO_Init+0x300>)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800471e:	4b1a      	ldr	r3, [pc, #104]	@ (8004788 <HAL_GPIO_Init+0x300>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	43db      	mvns	r3, r3
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4013      	ands	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004742:	4a11      	ldr	r2, [pc, #68]	@ (8004788 <HAL_GPIO_Init+0x300>)
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	3301      	adds	r3, #1
 800474c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	f47f ae9d 	bne.w	8004498 <HAL_GPIO_Init+0x10>
  }
}
 800475e:	bf00      	nop
 8004760:	bf00      	nop
 8004762:	371c      	adds	r7, #28
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	40021000 	.word	0x40021000
 8004770:	40010000 	.word	0x40010000
 8004774:	48000400 	.word	0x48000400
 8004778:	48000800 	.word	0x48000800
 800477c:	48000c00 	.word	0x48000c00
 8004780:	48001000 	.word	0x48001000
 8004784:	48001400 	.word	0x48001400
 8004788:	40010400 	.word	0x40010400

0800478c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e0bb      	b.n	800491a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b05      	cmp	r3, #5
 80047ac:	d101      	bne.n	80047b2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e0b3      	b.n	800491a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d101      	bne.n	80047c2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e0ab      	b.n	800491a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c2:	4b58      	ldr	r3, [pc, #352]	@ (8004924 <HAL_OPAMP_Init+0x198>)
 80047c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047c6:	4a57      	ldr	r2, [pc, #348]	@ (8004924 <HAL_OPAMP_Init+0x198>)
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80047ce:	4b55      	ldr	r3, [pc, #340]	@ (8004924 <HAL_OPAMP_Init+0x198>)
 80047d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	60bb      	str	r3, [r7, #8]
 80047d8:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d103      	bne.n	80047ee <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fd f996 	bl	8001b20 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b40      	cmp	r3, #64	@ 0x40
 80047fa:	d003      	beq.n	8004804 <HAL_OPAMP_Init+0x78>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b60      	cmp	r3, #96	@ 0x60
 8004802:	d133      	bne.n	800486c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f023 0110 	bic.w	r1, r3, #16
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	4b41      	ldr	r3, [pc, #260]	@ (8004928 <HAL_OPAMP_Init+0x19c>)
 8004822:	4013      	ands	r3, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6851      	ldr	r1, [r2, #4]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6892      	ldr	r2, [r2, #8]
 800482c:	4311      	orrs	r1, r2
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6912      	ldr	r2, [r2, #16]
 8004832:	430a      	orrs	r2, r1
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	7d09      	ldrb	r1, [r1, #20]
 8004838:	2901      	cmp	r1, #1
 800483a:	d102      	bne.n	8004842 <HAL_OPAMP_Init+0xb6>
 800483c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004840:	e000      	b.n	8004844 <HAL_OPAMP_Init+0xb8>
 8004842:	2100      	movs	r1, #0
 8004844:	4311      	orrs	r1, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800484a:	4311      	orrs	r1, r2
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004850:	4311      	orrs	r1, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004856:	04d2      	lsls	r2, r2, #19
 8004858:	4311      	orrs	r1, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800485e:	0612      	lsls	r2, r2, #24
 8004860:	4311      	orrs	r1, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6812      	ldr	r2, [r2, #0]
 8004866:	430b      	orrs	r3, r1
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	e035      	b.n	80048d8 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 0110 	bic.w	r1, r3, #16
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	4b27      	ldr	r3, [pc, #156]	@ (8004928 <HAL_OPAMP_Init+0x19c>)
 800488a:	4013      	ands	r3, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6851      	ldr	r1, [r2, #4]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6892      	ldr	r2, [r2, #8]
 8004894:	4311      	orrs	r1, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	68d2      	ldr	r2, [r2, #12]
 800489a:	4311      	orrs	r1, r2
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6912      	ldr	r2, [r2, #16]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	7d09      	ldrb	r1, [r1, #20]
 80048a6:	2901      	cmp	r1, #1
 80048a8:	d102      	bne.n	80048b0 <HAL_OPAMP_Init+0x124>
 80048aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80048ae:	e000      	b.n	80048b2 <HAL_OPAMP_Init+0x126>
 80048b0:	2100      	movs	r1, #0
 80048b2:	4311      	orrs	r1, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048b8:	4311      	orrs	r1, r2
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80048be:	4311      	orrs	r1, r2
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80048c4:	04d2      	lsls	r2, r2, #19
 80048c6:	4311      	orrs	r1, r2
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048cc:	0612      	lsls	r2, r2, #24
 80048ce:	4311      	orrs	r1, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	430b      	orrs	r3, r1
 80048d6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	db10      	blt.n	8004904 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	699a      	ldr	r2, [r3, #24]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d103      	bne.n	8004918 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004918:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40021000 	.word	0x40021000
 8004928:	e0003e11 	.word	0xe0003e11

0800492c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e0c0      	b.n	8004ac0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f007 ff88 	bl	800c868 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2203      	movs	r2, #3
 800495c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	f004 fb0c 	bl	8008f82 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800496a:	2300      	movs	r3, #0
 800496c:	73fb      	strb	r3, [r7, #15]
 800496e:	e03e      	b.n	80049ee <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004970:	7bfa      	ldrb	r2, [r7, #15]
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	4613      	mov	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	440b      	add	r3, r1
 800497e:	3311      	adds	r3, #17
 8004980:	2201      	movs	r2, #1
 8004982:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004984:	7bfa      	ldrb	r2, [r7, #15]
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	440b      	add	r3, r1
 8004992:	3310      	adds	r3, #16
 8004994:	7bfa      	ldrb	r2, [r7, #15]
 8004996:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004998:	7bfa      	ldrb	r2, [r7, #15]
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	440b      	add	r3, r1
 80049a6:	3313      	adds	r3, #19
 80049a8:	2200      	movs	r2, #0
 80049aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049ac:	7bfa      	ldrb	r2, [r7, #15]
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	440b      	add	r3, r1
 80049ba:	3320      	adds	r3, #32
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049c0:	7bfa      	ldrb	r2, [r7, #15]
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	440b      	add	r3, r1
 80049ce:	3324      	adds	r3, #36	@ 0x24
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	4613      	mov	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	440b      	add	r3, r1
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	3301      	adds	r3, #1
 80049ec:	73fb      	strb	r3, [r7, #15]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	791b      	ldrb	r3, [r3, #4]
 80049f2:	7bfa      	ldrb	r2, [r7, #15]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d3bb      	bcc.n	8004970 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f8:	2300      	movs	r3, #0
 80049fa:	73fb      	strb	r3, [r7, #15]
 80049fc:	e044      	b.n	8004a88 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049fe:	7bfa      	ldrb	r2, [r7, #15]
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	440b      	add	r3, r1
 8004a0c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004a10:	2200      	movs	r2, #0
 8004a12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a14:	7bfa      	ldrb	r2, [r7, #15]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	440b      	add	r3, r1
 8004a22:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a26:	7bfa      	ldrb	r2, [r7, #15]
 8004a28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a2a:	7bfa      	ldrb	r2, [r7, #15]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	440b      	add	r3, r1
 8004a38:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a40:	7bfa      	ldrb	r2, [r7, #15]
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	440b      	add	r3, r1
 8004a4e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a56:	7bfa      	ldrb	r2, [r7, #15]
 8004a58:	6879      	ldr	r1, [r7, #4]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	440b      	add	r3, r1
 8004a64:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a6c:	7bfa      	ldrb	r2, [r7, #15]
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	440b      	add	r3, r1
 8004a7a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	3301      	adds	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	791b      	ldrb	r3, [r3, #4]
 8004a8c:	7bfa      	ldrb	r2, [r7, #15]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d3b5      	bcc.n	80049fe <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004a9e:	f004 fa8b 	bl	8008fb8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	7a9b      	ldrb	r3, [r3, #10]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d102      	bne.n	8004abe <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f001 fc0e 	bl	80062da <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d101      	bne.n	8004ade <HAL_PCD_Start+0x16>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e012      	b.n	8004b04 <HAL_PCD_Start+0x3c>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f004 fa32 	bl	8008f54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f006 f80f 	bl	800ab18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f006 f814 	bl	800ab46 <USB_ReadInterrupts>
 8004b1e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fb06 	bl	800513c <PCD_EP_ISR_Handler>

    return;
 8004b30:	e110      	b.n	8004d54 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d013      	beq.n	8004b64 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b4e:	b292      	uxth	r2, r2
 8004b50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f007 ff18 	bl	800c98a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f8fc 	bl	8004d5a <HAL_PCD_SetAddress>

    return;
 8004b62:	e0f7      	b.n	8004d54 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00c      	beq.n	8004b88 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b80:	b292      	uxth	r2, r2
 8004b82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004b86:	e0e5      	b.n	8004d54 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00c      	beq.n	8004bac <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ba4:	b292      	uxth	r2, r2
 8004ba6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004baa:	e0d3      	b.n	8004d54 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d034      	beq.n	8004c20 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0204 	bic.w	r2, r2, #4
 8004bc8:	b292      	uxth	r2, r2
 8004bca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0208 	bic.w	r2, r2, #8
 8004be0:	b292      	uxth	r2, r2
 8004be2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d107      	bne.n	8004c00 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f008 f8b8 	bl	800cd70 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f007 fefb 	bl	800c9fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c18:	b292      	uxth	r2, r2
 8004c1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004c1e:	e099      	b.n	8004d54 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d027      	beq.n	8004c7a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0208 	orr.w	r2, r2, #8
 8004c3c:	b292      	uxth	r2, r2
 8004c3e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c54:	b292      	uxth	r2, r2
 8004c56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f042 0204 	orr.w	r2, r2, #4
 8004c6c:	b292      	uxth	r2, r2
 8004c6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f007 fea8 	bl	800c9c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004c78:	e06c      	b.n	8004d54 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d040      	beq.n	8004d06 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c96:	b292      	uxth	r2, r2
 8004c98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d12b      	bne.n	8004cfe <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f042 0204 	orr.w	r2, r2, #4
 8004cb8:	b292      	uxth	r2, r2
 8004cba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0208 	orr.w	r2, r2, #8
 8004cd0:	b292      	uxth	r2, r2
 8004cd2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	089b      	lsrs	r3, r3, #2
 8004cea:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f008 f83a 	bl	800cd70 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004cfc:	e02a      	b.n	8004d54 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f007 fe62 	bl	800c9c8 <HAL_PCD_SuspendCallback>
    return;
 8004d04:	e026      	b.n	8004d54 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00f      	beq.n	8004d30 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004d22:	b292      	uxth	r2, r2
 8004d24:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f007 fe20 	bl	800c96e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004d2e:	e011      	b.n	8004d54 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00c      	beq.n	8004d54 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d4c:	b292      	uxth	r2, r2
 8004d4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004d52:	bf00      	nop
  }
}
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	460b      	mov	r3, r1
 8004d64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <HAL_PCD_SetAddress+0x1a>
 8004d70:	2302      	movs	r3, #2
 8004d72:	e012      	b.n	8004d9a <HAL_PCD_SetAddress+0x40>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	78fa      	ldrb	r2, [r7, #3]
 8004d80:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	78fa      	ldrb	r2, [r7, #3]
 8004d88:	4611      	mov	r1, r2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f005 feb0 	bl	800aaf0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	4608      	mov	r0, r1
 8004dac:	4611      	mov	r1, r2
 8004dae:	461a      	mov	r2, r3
 8004db0:	4603      	mov	r3, r0
 8004db2:	70fb      	strb	r3, [r7, #3]
 8004db4:	460b      	mov	r3, r1
 8004db6:	803b      	strh	r3, [r7, #0]
 8004db8:	4613      	mov	r3, r2
 8004dba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	da0e      	bge.n	8004de6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	f003 0207 	and.w	r2, r3, #7
 8004dce:	4613      	mov	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	3310      	adds	r3, #16
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	4413      	add	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2201      	movs	r2, #1
 8004de2:	705a      	strb	r2, [r3, #1]
 8004de4:	e00e      	b.n	8004e04 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004de6:	78fb      	ldrb	r3, [r7, #3]
 8004de8:	f003 0207 	and.w	r2, r3, #7
 8004dec:	4613      	mov	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004e10:	883b      	ldrh	r3, [r7, #0]
 8004e12:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	78ba      	ldrb	r2, [r7, #2]
 8004e1e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e20:	78bb      	ldrb	r3, [r7, #2]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d102      	bne.n	8004e2c <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <HAL_PCD_EP_Open+0x98>
 8004e36:	2302      	movs	r3, #2
 8004e38:	e00e      	b.n	8004e58 <HAL_PCD_EP_Open+0xb6>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68f9      	ldr	r1, [r7, #12]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f004 f8d3 	bl	8008ff4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004e56:	7afb      	ldrb	r3, [r7, #11]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	da0e      	bge.n	8004e92 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e74:	78fb      	ldrb	r3, [r7, #3]
 8004e76:	f003 0207 	and.w	r2, r3, #7
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	3310      	adds	r3, #16
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	4413      	add	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	705a      	strb	r2, [r3, #1]
 8004e90:	e00e      	b.n	8004eb0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e92:	78fb      	ldrb	r3, [r7, #3]
 8004e94:	f003 0207 	and.w	r2, r3, #7
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <HAL_PCD_EP_Close+0x6a>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e00e      	b.n	8004ee8 <HAL_PCD_EP_Close+0x88>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68f9      	ldr	r1, [r7, #12]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f004 fd73 	bl	80099c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	603b      	str	r3, [r7, #0]
 8004efc:	460b      	mov	r3, r1
 8004efe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f00:	7afb      	ldrb	r3, [r7, #11]
 8004f02:	f003 0207 	and.w	r2, r3, #7
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4413      	add	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2200      	movs	r2, #0
 8004f28:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f30:	7afb      	ldrb	r3, [r7, #11]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6979      	ldr	r1, [r7, #20]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f004 ff2b 	bl	8009d9e <USB_EPStartXfer>

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	f003 0207 	and.w	r2, r3, #7
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	440b      	add	r3, r1
 8004f70:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004f74:	681b      	ldr	r3, [r3, #0]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b086      	sub	sp, #24
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f92:	7afb      	ldrb	r3, [r7, #11]
 8004f94:	f003 0207 	and.w	r2, r3, #7
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	3310      	adds	r3, #16
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fce:	7afb      	ldrb	r3, [r7, #11]
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6979      	ldr	r1, [r7, #20]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f004 fedc 	bl	8009d9e <USB_EPStartXfer>

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ffc:	78fb      	ldrb	r3, [r7, #3]
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	7912      	ldrb	r2, [r2, #4]
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e03e      	b.n	800508c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800500e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005012:	2b00      	cmp	r3, #0
 8005014:	da0e      	bge.n	8005034 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005016:	78fb      	ldrb	r3, [r7, #3]
 8005018:	f003 0207 	and.w	r2, r3, #7
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	3310      	adds	r3, #16
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	4413      	add	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2201      	movs	r2, #1
 8005030:	705a      	strb	r2, [r3, #1]
 8005032:	e00c      	b.n	800504e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005034:	78fa      	ldrb	r2, [r7, #3]
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	4413      	add	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005054:	78fb      	ldrb	r3, [r7, #3]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	b2da      	uxtb	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005066:	2b01      	cmp	r3, #1
 8005068:	d101      	bne.n	800506e <HAL_PCD_EP_SetStall+0x7e>
 800506a:	2302      	movs	r3, #2
 800506c:	e00e      	b.n	800508c <HAL_PCD_EP_SetStall+0x9c>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68f9      	ldr	r1, [r7, #12]
 800507c:	4618      	mov	r0, r3
 800507e:	f005 fc3d 	bl	800a8fc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	7912      	ldrb	r2, [r2, #4]
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e040      	b.n	8005134 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	da0e      	bge.n	80050d8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050ba:	78fb      	ldrb	r3, [r7, #3]
 80050bc:	f003 0207 	and.w	r2, r3, #7
 80050c0:	4613      	mov	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	3310      	adds	r3, #16
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	4413      	add	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2201      	movs	r2, #1
 80050d4:	705a      	strb	r2, [r3, #1]
 80050d6:	e00e      	b.n	80050f6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	f003 0207 	and.w	r2, r3, #7
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	4413      	add	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	b2da      	uxtb	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_PCD_EP_ClrStall+0x82>
 8005112:	2302      	movs	r3, #2
 8005114:	e00e      	b.n	8005134 <HAL_PCD_EP_ClrStall+0xa0>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68f9      	ldr	r1, [r7, #12]
 8005124:	4618      	mov	r0, r3
 8005126:	f005 fc3a 	bl	800a99e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b092      	sub	sp, #72	@ 0x48
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005144:	e333      	b.n	80057ae <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800514e:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005150:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005152:	b2db      	uxtb	r3, r3
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800515c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005160:	2b00      	cmp	r3, #0
 8005162:	f040 8108 	bne.w	8005376 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005166:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005168:	f003 0310 	and.w	r3, r3, #16
 800516c:	2b00      	cmp	r3, #0
 800516e:	d14c      	bne.n	800520a <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	b29b      	uxth	r3, r3
 8005178:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800517c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005180:	813b      	strh	r3, [r7, #8]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	893b      	ldrh	r3, [r7, #8]
 8005188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800518c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005190:	b29b      	uxth	r3, r3
 8005192:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3310      	adds	r3, #16
 8005198:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	461a      	mov	r2, r3
 80051a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	4413      	add	r3, r2
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	4413      	add	r3, r2
 80051b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80051c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051c4:	695a      	ldr	r2, [r3, #20]
 80051c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	441a      	add	r2, r3
 80051cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051ce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80051d0:	2100      	movs	r1, #0
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f007 fbb1 	bl	800c93a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	7b1b      	ldrb	r3, [r3, #12]
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 82e5 	beq.w	80057ae <PCD_EP_ISR_Handler+0x672>
 80051e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f040 82e0 	bne.w	80057ae <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	7b1b      	ldrb	r3, [r3, #12]
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	731a      	strb	r2, [r3, #12]
 8005208:	e2d1      	b.n	80057ae <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005210:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800521a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800521c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005220:	2b00      	cmp	r3, #0
 8005222:	d032      	beq.n	800528a <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800522c:	b29b      	uxth	r3, r3
 800522e:	461a      	mov	r2, r3
 8005230:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	4413      	add	r3, r2
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6812      	ldr	r2, [r2, #0]
 800523c:	4413      	add	r3, r2
 800523e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005248:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800524a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005258:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800525a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800525c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800525e:	b29b      	uxth	r3, r3
 8005260:	f005 fcc3 	bl	800abea <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	b29a      	uxth	r2, r3
 800526c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005270:	4013      	ands	r3, r2
 8005272:	817b      	strh	r3, [r7, #10]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	897a      	ldrh	r2, [r7, #10]
 800527a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800527e:	b292      	uxth	r2, r2
 8005280:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f007 fb2c 	bl	800c8e0 <HAL_PCD_SetupStageCallback>
 8005288:	e291      	b.n	80057ae <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800528a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800528e:	2b00      	cmp	r3, #0
 8005290:	f280 828d 	bge.w	80057ae <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b29a      	uxth	r2, r3
 800529c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80052a0:	4013      	ands	r3, r2
 80052a2:	81fb      	strh	r3, [r7, #14]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	89fa      	ldrh	r2, [r7, #14]
 80052aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80052ae:	b292      	uxth	r2, r2
 80052b0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	4413      	add	r3, r2
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6812      	ldr	r2, [r2, #0]
 80052ca:	4413      	add	r3, r2
 80052cc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052d8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80052da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d019      	beq.n	8005316 <PCD_EP_ISR_Handler+0x1da>
 80052e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d015      	beq.n	8005316 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052f0:	6959      	ldr	r1, [r3, #20]
 80052f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052f4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80052f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052f8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	f005 fc75 	bl	800abea <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005300:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005302:	695a      	ldr	r2, [r3, #20]
 8005304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	441a      	add	r2, r3
 800530a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800530c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800530e:	2100      	movs	r1, #0
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f007 faf7 	bl	800c904 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800531e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005320:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005324:	2b00      	cmp	r3, #0
 8005326:	f040 8242 	bne.w	80057ae <PCD_EP_ISR_Handler+0x672>
 800532a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800532c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005330:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005334:	f000 823b 	beq.w	80057ae <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29b      	uxth	r3, r3
 8005340:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005344:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005348:	81bb      	strh	r3, [r7, #12]
 800534a:	89bb      	ldrh	r3, [r7, #12]
 800534c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005350:	81bb      	strh	r3, [r7, #12]
 8005352:	89bb      	ldrh	r3, [r7, #12]
 8005354:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005358:	81bb      	strh	r3, [r7, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	89bb      	ldrh	r3, [r7, #12]
 8005360:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005364:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005368:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800536c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005370:	b29b      	uxth	r3, r3
 8005372:	8013      	strh	r3, [r2, #0]
 8005374:	e21b      	b.n	80057ae <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005388:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800538c:	2b00      	cmp	r3, #0
 800538e:	f280 80f1 	bge.w	8005574 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80053a8:	4013      	ands	r3, r2
 80053aa:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
 80053b2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80053bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80053c0:	b292      	uxth	r2, r2
 80053c2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80053c4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	4413      	add	r3, r2
 80053d8:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80053da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053dc:	7b1b      	ldrb	r3, [r3, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d123      	bne.n	800542a <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	4413      	add	r3, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	4413      	add	r3, r2
 80053fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005406:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800540a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 808b 	beq.w	800552a <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800541a:	6959      	ldr	r1, [r3, #20]
 800541c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800541e:	88da      	ldrh	r2, [r3, #6]
 8005420:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005424:	f005 fbe1 	bl	800abea <USB_ReadPMA>
 8005428:	e07f      	b.n	800552a <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800542a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800542c:	78db      	ldrb	r3, [r3, #3]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d109      	bne.n	8005446 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005432:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005434:	461a      	mov	r2, r3
 8005436:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f9c6 	bl	80057ca <HAL_PCD_EP_DB_Receive>
 800543e:	4603      	mov	r3, r0
 8005440:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005444:	e071      	b.n	800552a <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	b29b      	uxth	r3, r3
 8005458:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800545c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005460:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	441a      	add	r2, r3
 8005470:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005472:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005476:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800547a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800547e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005482:	b29b      	uxth	r3, r3
 8005484:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	b29b      	uxth	r3, r3
 8005498:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d022      	beq.n	80054e6 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	461a      	mov	r2, r3
 80054ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	4413      	add	r3, r2
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	4413      	add	r3, r2
 80054ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054c4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80054c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d02c      	beq.n	800552a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6818      	ldr	r0, [r3, #0]
 80054d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054d6:	6959      	ldr	r1, [r3, #20]
 80054d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054da:	891a      	ldrh	r2, [r3, #8]
 80054dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80054e0:	f005 fb83 	bl	800abea <USB_ReadPMA>
 80054e4:	e021      	b.n	800552a <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	461a      	mov	r2, r3
 80054f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	4413      	add	r3, r2
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	4413      	add	r3, r2
 8005500:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800550a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800550e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005512:	2b00      	cmp	r3, #0
 8005514:	d009      	beq.n	800552a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800551c:	6959      	ldr	r1, [r3, #20]
 800551e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005520:	895a      	ldrh	r2, [r3, #10]
 8005522:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005526:	f005 fb60 	bl	800abea <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800552a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800552c:	69da      	ldr	r2, [r3, #28]
 800552e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005532:	441a      	add	r2, r3
 8005534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005536:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005538:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800553a:	695a      	ldr	r2, [r3, #20]
 800553c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005540:	441a      	add	r2, r3
 8005542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005544:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d005      	beq.n	800555a <PCD_EP_ISR_Handler+0x41e>
 800554e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	429a      	cmp	r2, r3
 8005558:	d206      	bcs.n	8005568 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800555a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	4619      	mov	r1, r3
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f007 f9cf 	bl	800c904 <HAL_PCD_DataOutStageCallback>
 8005566:	e005      	b.n	8005574 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800556e:	4618      	mov	r0, r3
 8005570:	f004 fc15 	bl	8009d9e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005574:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 8117 	beq.w	80057ae <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8005580:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	3310      	adds	r3, #16
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	4413      	add	r3, r2
 8005592:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	461a      	mov	r2, r3
 800559a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80055aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	461a      	mov	r2, r3
 80055b6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	441a      	add	r2, r3
 80055be:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80055c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80055cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055ce:	78db      	ldrb	r3, [r3, #3]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	f040 80a1 	bne.w	8005718 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80055d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055d8:	2200      	movs	r2, #0
 80055da:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80055dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055de:	7b1b      	ldrb	r3, [r3, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 8092 	beq.w	800570a <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80055e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80055e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d046      	beq.n	800567e <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055f2:	785b      	ldrb	r3, [r3, #1]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d126      	bne.n	8005646 <PCD_EP_ISR_Handler+0x50a>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005606:	b29b      	uxth	r3, r3
 8005608:	461a      	mov	r2, r3
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	4413      	add	r3, r2
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	00da      	lsls	r2, r3, #3
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	4413      	add	r3, r2
 800561a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800561e:	613b      	str	r3, [r7, #16]
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	b29b      	uxth	r3, r3
 8005626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800562a:	b29a      	uxth	r2, r3
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	801a      	strh	r2, [r3, #0]
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	b29b      	uxth	r3, r3
 8005636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800563a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800563e:	b29a      	uxth	r2, r3
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	801a      	strh	r2, [r3, #0]
 8005644:	e061      	b.n	800570a <PCD_EP_ISR_Handler+0x5ce>
 8005646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005648:	785b      	ldrb	r3, [r3, #1]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d15d      	bne.n	800570a <PCD_EP_ISR_Handler+0x5ce>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	61fb      	str	r3, [r7, #28]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800565c:	b29b      	uxth	r3, r3
 800565e:	461a      	mov	r2, r3
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	4413      	add	r3, r2
 8005664:	61fb      	str	r3, [r7, #28]
 8005666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	00da      	lsls	r2, r3, #3
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	4413      	add	r3, r2
 8005670:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005674:	61bb      	str	r3, [r7, #24]
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	2200      	movs	r2, #0
 800567a:	801a      	strh	r2, [r3, #0]
 800567c:	e045      	b.n	800570a <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005684:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d126      	bne.n	80056da <PCD_EP_ISR_Handler+0x59e>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	627b      	str	r3, [r7, #36]	@ 0x24
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800569a:	b29b      	uxth	r3, r3
 800569c:	461a      	mov	r2, r3
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	4413      	add	r3, r2
 80056a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	00da      	lsls	r2, r3, #3
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	4413      	add	r3, r2
 80056ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80056b2:	623b      	str	r3, [r7, #32]
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056be:	b29a      	uxth	r2, r3
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	801a      	strh	r2, [r3, #0]
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	801a      	strh	r2, [r3, #0]
 80056d8:	e017      	b.n	800570a <PCD_EP_ISR_Handler+0x5ce>
 80056da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056dc:	785b      	ldrb	r3, [r3, #1]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d113      	bne.n	800570a <PCD_EP_ISR_Handler+0x5ce>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	461a      	mov	r2, r3
 80056ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f0:	4413      	add	r3, r2
 80056f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	00da      	lsls	r2, r3, #3
 80056fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fc:	4413      	add	r3, r2
 80056fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005702:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005706:	2200      	movs	r2, #0
 8005708:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800570a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f007 f912 	bl	800c93a <HAL_PCD_DataInStageCallback>
 8005716:	e04a      	b.n	80057ae <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005718:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800571a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800571e:	2b00      	cmp	r3, #0
 8005720:	d13f      	bne.n	80057a2 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800572a:	b29b      	uxth	r3, r3
 800572c:	461a      	mov	r2, r3
 800572e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	4413      	add	r3, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6812      	ldr	r2, [r2, #0]
 800573a:	4413      	add	r3, r2
 800573c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005746:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8005748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800574a:	699a      	ldr	r2, [r3, #24]
 800574c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800574e:	429a      	cmp	r2, r3
 8005750:	d906      	bls.n	8005760 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8005752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005758:	1ad2      	subs	r2, r2, r3
 800575a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800575c:	619a      	str	r2, [r3, #24]
 800575e:	e002      	b.n	8005766 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005762:	2200      	movs	r2, #0
 8005764:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005766:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800576e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	4619      	mov	r1, r3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f007 f8e0 	bl	800c93a <HAL_PCD_DataInStageCallback>
 800577a:	e018      	b.n	80057ae <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800577c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005782:	441a      	add	r2, r3
 8005784:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005786:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800578a:	69da      	ldr	r2, [r3, #28]
 800578c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800578e:	441a      	add	r2, r3
 8005790:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005792:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800579a:	4618      	mov	r0, r3
 800579c:	f004 faff 	bl	8009d9e <USB_EPStartXfer>
 80057a0:	e005      	b.n	80057ae <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80057a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80057a4:	461a      	mov	r2, r3
 80057a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f917 	bl	80059dc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	b21b      	sxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f6ff acc3 	blt.w	8005146 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3748      	adds	r7, #72	@ 0x48
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b088      	sub	sp, #32
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	4613      	mov	r3, r2
 80057d6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80057d8:	88fb      	ldrh	r3, [r7, #6]
 80057da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d07c      	beq.n	80058dc <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	4413      	add	r3, r2
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	6812      	ldr	r2, [r2, #0]
 80057fa:	4413      	add	r3, r2
 80057fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005806:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	699a      	ldr	r2, [r3, #24]
 800580c:	8b7b      	ldrh	r3, [r7, #26]
 800580e:	429a      	cmp	r2, r3
 8005810:	d306      	bcc.n	8005820 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	699a      	ldr	r2, [r3, #24]
 8005816:	8b7b      	ldrh	r3, [r7, #26]
 8005818:	1ad2      	subs	r2, r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	619a      	str	r2, [r3, #24]
 800581e:	e002      	b.n	8005826 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2200      	movs	r2, #0
 8005824:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d123      	bne.n	8005876 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	b29b      	uxth	r3, r3
 8005840:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005844:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005848:	833b      	strh	r3, [r7, #24]
 800584a:	8b3b      	ldrh	r3, [r7, #24]
 800584c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005850:	833b      	strh	r3, [r7, #24]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	441a      	add	r2, r3
 8005860:	8b3b      	ldrh	r3, [r7, #24]
 8005862:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005866:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800586a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800586e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005872:	b29b      	uxth	r3, r3
 8005874:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587c:	2b00      	cmp	r3, #0
 800587e:	d01f      	beq.n	80058c0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	461a      	mov	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	b29b      	uxth	r3, r3
 8005892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800589a:	82fb      	strh	r3, [r7, #22]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	461a      	mov	r2, r3
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	441a      	add	r2, r3
 80058aa:	8afb      	ldrh	r3, [r7, #22]
 80058ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80058bc:	b29b      	uxth	r3, r3
 80058be:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80058c0:	8b7b      	ldrh	r3, [r7, #26]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 8085 	beq.w	80059d2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6818      	ldr	r0, [r3, #0]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	6959      	ldr	r1, [r3, #20]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	891a      	ldrh	r2, [r3, #8]
 80058d4:	8b7b      	ldrh	r3, [r7, #26]
 80058d6:	f005 f988 	bl	800abea <USB_ReadPMA>
 80058da:	e07a      	b.n	80059d2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	4413      	add	r3, r2
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	6812      	ldr	r2, [r2, #0]
 80058f4:	4413      	add	r3, r2
 80058f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005900:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	8b7b      	ldrh	r3, [r7, #26]
 8005908:	429a      	cmp	r2, r3
 800590a:	d306      	bcc.n	800591a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	699a      	ldr	r2, [r3, #24]
 8005910:	8b7b      	ldrh	r3, [r7, #26]
 8005912:	1ad2      	subs	r2, r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	619a      	str	r2, [r3, #24]
 8005918:	e002      	b.n	8005920 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2200      	movs	r2, #0
 800591e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d123      	bne.n	8005970 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800593e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005942:	83fb      	strh	r3, [r7, #30]
 8005944:	8bfb      	ldrh	r3, [r7, #30]
 8005946:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800594a:	83fb      	strh	r3, [r7, #30]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	461a      	mov	r2, r3
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	441a      	add	r2, r3
 800595a:	8bfb      	ldrh	r3, [r7, #30]
 800595c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005960:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005964:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800596c:	b29b      	uxth	r3, r3
 800596e:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005970:	88fb      	ldrh	r3, [r7, #6]
 8005972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	d11f      	bne.n	80059ba <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	b29b      	uxth	r3, r3
 800598c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005994:	83bb      	strh	r3, [r7, #28]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	441a      	add	r2, r3
 80059a4:	8bbb      	ldrh	r3, [r7, #28]
 80059a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80059ba:	8b7b      	ldrh	r3, [r7, #26]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d008      	beq.n	80059d2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6818      	ldr	r0, [r3, #0]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	6959      	ldr	r1, [r3, #20]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	895a      	ldrh	r2, [r3, #10]
 80059cc:	8b7b      	ldrh	r3, [r7, #26]
 80059ce:	f005 f90c 	bl	800abea <USB_ReadPMA>
    }
  }

  return count;
 80059d2:	8b7b      	ldrh	r3, [r7, #26]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3720      	adds	r7, #32
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b0a6      	sub	sp, #152	@ 0x98
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	4613      	mov	r3, r2
 80059e8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 81f7 	beq.w	8005de4 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	461a      	mov	r2, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	4413      	add	r3, r2
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	6812      	ldr	r2, [r2, #0]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a1a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	699a      	ldr	r2, [r3, #24]
 8005a22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d907      	bls.n	8005a3a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	699a      	ldr	r2, [r3, #24]
 8005a2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005a32:	1ad2      	subs	r2, r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	619a      	str	r2, [r3, #24]
 8005a38:	e002      	b.n	8005a40 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f040 80e1 	bne.w	8005c0c <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	785b      	ldrb	r3, [r3, #1]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d126      	bne.n	8005aa0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	461a      	mov	r2, r3
 8005a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a66:	4413      	add	r3, r2
 8005a68:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	00da      	lsls	r2, r3, #3
 8005a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a72:	4413      	add	r3, r2
 8005a74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a88:	801a      	strh	r2, [r3, #0]
 8005a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9c:	801a      	strh	r2, [r3, #0]
 8005a9e:	e01a      	b.n	8005ad6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	785b      	ldrb	r3, [r3, #1]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d116      	bne.n	8005ad6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	461a      	mov	r2, r3
 8005aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005abc:	4413      	add	r3, r2
 8005abe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	00da      	lsls	r2, r3, #3
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac8:	4413      	add	r3, r2
 8005aca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	785b      	ldrb	r3, [r3, #1]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d126      	bne.n	8005b32 <HAL_PCD_EP_DB_Transmit+0x156>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	623b      	str	r3, [r7, #32]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	4413      	add	r3, r2
 8005afa:	623b      	str	r3, [r7, #32]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	00da      	lsls	r2, r3, #3
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	4413      	add	r3, r2
 8005b06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b0a:	61fb      	str	r3, [r7, #28]
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	801a      	strh	r2, [r3, #0]
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	801a      	strh	r2, [r3, #0]
 8005b30:	e017      	b.n	8005b62 <HAL_PCD_EP_DB_Transmit+0x186>
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	785b      	ldrb	r3, [r3, #1]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d113      	bne.n	8005b62 <HAL_PCD_EP_DB_Transmit+0x186>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	461a      	mov	r2, r3
 8005b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b48:	4413      	add	r3, r2
 8005b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	00da      	lsls	r2, r3, #3
 8005b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b54:	4413      	add	r3, r2
 8005b56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5e:	2200      	movs	r2, #0
 8005b60:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	78db      	ldrb	r3, [r3, #3]
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d123      	bne.n	8005bb2 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b84:	837b      	strh	r3, [r7, #26]
 8005b86:	8b7b      	ldrh	r3, [r7, #26]
 8005b88:	f083 0320 	eor.w	r3, r3, #32
 8005b8c:	837b      	strh	r3, [r7, #26]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	441a      	add	r2, r3
 8005b9c:	8b7b      	ldrh	r3, [r7, #26]
 8005b9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ba2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f006 febe 	bl	800c93a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005bbe:	88fb      	ldrh	r3, [r7, #6]
 8005bc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d01f      	beq.n	8005c08 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005be2:	833b      	strh	r3, [r7, #24]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	461a      	mov	r2, r3
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	441a      	add	r2, r3
 8005bf2:	8b3b      	ldrh	r3, [r7, #24]
 8005bf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e31f      	b.n	800624c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c0c:	88fb      	ldrh	r3, [r7, #6]
 8005c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d021      	beq.n	8005c5a <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c30:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	441a      	add	r2, r3
 8005c42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005c46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	f040 82ca 	bne.w	80061fa <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	695a      	ldr	r2, [r3, #20]
 8005c6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005c6e:	441a      	add	r2, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	69da      	ldr	r2, [r3, #28]
 8005c78:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005c7c:	441a      	add	r2, r3
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	6a1a      	ldr	r2, [r3, #32]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d309      	bcc.n	8005ca2 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	6a1a      	ldr	r2, [r3, #32]
 8005c98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c9a:	1ad2      	subs	r2, r2, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	621a      	str	r2, [r3, #32]
 8005ca0:	e015      	b.n	8005cce <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d107      	bne.n	8005cba <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8005caa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005cae:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005cb8:	e009      	b.n	8005cce <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d15f      	bne.n	8005d96 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cea:	4413      	add	r3, r2
 8005cec:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	00da      	lsls	r2, r3, #3
 8005cf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d0c:	801a      	strh	r2, [r3, #0]
 8005d0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <HAL_PCD_EP_DB_Transmit+0x34e>
 8005d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d26:	801a      	strh	r2, [r3, #0]
 8005d28:	e051      	b.n	8005dce <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005d2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d2e:	d816      	bhi.n	8005d5e <HAL_PCD_EP_DB_Transmit+0x382>
 8005d30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d32:	085b      	lsrs	r3, r3, #1
 8005d34:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <HAL_PCD_EP_DB_Transmit+0x36a>
 8005d40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d42:	3301      	adds	r3, #1
 8005d44:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	029b      	lsls	r3, r3, #10
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	4313      	orrs	r3, r2
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d5a:	801a      	strh	r2, [r3, #0]
 8005d5c:	e037      	b.n	8005dce <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005d5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d60:	095b      	lsrs	r3, r3, #5
 8005d62:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d66:	f003 031f 	and.w	r3, r3, #31
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d102      	bne.n	8005d74 <HAL_PCD_EP_DB_Transmit+0x398>
 8005d6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d70:	3b01      	subs	r3, #1
 8005d72:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	029b      	lsls	r3, r3, #10
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	4313      	orrs	r3, r2
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d92:	801a      	strh	r2, [r3, #0]
 8005d94:	e01b      	b.n	8005dce <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	785b      	ldrb	r3, [r3, #1]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d117      	bne.n	8005dce <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	461a      	mov	r2, r3
 8005db0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005db2:	4413      	add	r3, r2
 8005db4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	00da      	lsls	r2, r3, #3
 8005dbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005dc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dcc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6818      	ldr	r0, [r3, #0]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	6959      	ldr	r1, [r3, #20]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	891a      	ldrh	r2, [r3, #8]
 8005dda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f004 fec2 	bl	800ab66 <USB_WritePMA>
 8005de2:	e20a      	b.n	80061fa <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	4413      	add	r3, r2
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	6812      	ldr	r2, [r2, #0]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e08:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	699a      	ldr	r2, [r3, #24]
 8005e10:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d307      	bcc.n	8005e28 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	699a      	ldr	r2, [r3, #24]
 8005e1c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005e20:	1ad2      	subs	r2, r2, r3
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	619a      	str	r2, [r3, #24]
 8005e26:	e002      	b.n	8005e2e <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f040 80f6 	bne.w	8006024 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d126      	bne.n	8005e8e <HAL_PCD_EP_DB_Transmit+0x4b2>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	461a      	mov	r2, r3
 8005e52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e54:	4413      	add	r3, r2
 8005e56:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	00da      	lsls	r2, r3, #3
 8005e5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e60:	4413      	add	r3, r2
 8005e62:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005e66:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e76:	801a      	strh	r2, [r3, #0]
 8005e78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e8a:	801a      	strh	r2, [r3, #0]
 8005e8c:	e01a      	b.n	8005ec4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d116      	bne.n	8005ec4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005eaa:	4413      	add	r3, r2
 8005eac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	00da      	lsls	r2, r3, #3
 8005eb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ebc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ebe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	785b      	ldrb	r3, [r3, #1]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d12f      	bne.n	8005f34 <HAL_PCD_EP_DB_Transmit+0x558>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005eec:	4413      	add	r3, r2
 8005eee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	00da      	lsls	r2, r3, #3
 8005ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005efc:	4413      	add	r3, r2
 8005efe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f18:	801a      	strh	r2, [r3, #0]
 8005f1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	e01c      	b.n	8005f6e <HAL_PCD_EP_DB_Transmit+0x592>
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	785b      	ldrb	r3, [r3, #1]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d118      	bne.n	8005f6e <HAL_PCD_EP_DB_Transmit+0x592>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	461a      	mov	r2, r3
 8005f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	00da      	lsls	r2, r3, #3
 8005f58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f66:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	78db      	ldrb	r3, [r3, #3]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d127      	bne.n	8005fc6 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f90:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005f94:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f98:	f083 0320 	eor.w	r3, r3, #32
 8005f9c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	441a      	add	r2, r3
 8005fae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005fb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f006 fcb4 	bl	800c93a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005fd2:	88fb      	ldrh	r3, [r7, #6]
 8005fd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d121      	bne.n	8006020 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ff6:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	441a      	add	r2, r3
 8006008:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800600c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006014:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800601c:	b29b      	uxth	r3, r3
 800601e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006020:	2300      	movs	r3, #0
 8006022:	e113      	b.n	800624c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006024:	88fb      	ldrh	r3, [r7, #6]
 8006026:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d121      	bne.n	8006072 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006044:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006048:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	461a      	mov	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	441a      	add	r2, r3
 800605a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800605e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006062:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006066:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800606a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800606e:	b29b      	uxth	r3, r3
 8006070:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006078:	2b01      	cmp	r3, #1
 800607a:	f040 80be 	bne.w	80061fa <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	695a      	ldr	r2, [r3, #20]
 8006082:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006086:	441a      	add	r2, r3
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	69da      	ldr	r2, [r3, #28]
 8006090:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006094:	441a      	add	r2, r3
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	6a1a      	ldr	r2, [r3, #32]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d309      	bcc.n	80060ba <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	6a1a      	ldr	r2, [r3, #32]
 80060b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060b2:	1ad2      	subs	r2, r2, r3
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	621a      	str	r2, [r3, #32]
 80060b8:	e015      	b.n	80060e6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d107      	bne.n	80060d2 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80060c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80060c6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80060d0:	e009      	b.n	80060e6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2200      	movs	r2, #0
 80060dc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	785b      	ldrb	r3, [r3, #1]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d15f      	bne.n	80061b4 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006102:	b29b      	uxth	r3, r3
 8006104:	461a      	mov	r2, r3
 8006106:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006108:	4413      	add	r3, r2
 800610a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	00da      	lsls	r2, r3, #3
 8006112:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006114:	4413      	add	r3, r2
 8006116:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800611a:	667b      	str	r3, [r7, #100]	@ 0x64
 800611c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	b29b      	uxth	r3, r3
 8006122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006126:	b29a      	uxth	r2, r3
 8006128:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800612a:	801a      	strh	r2, [r3, #0]
 800612c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10a      	bne.n	8006148 <HAL_PCD_EP_DB_Transmit+0x76c>
 8006132:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	b29b      	uxth	r3, r3
 8006138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800613c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006140:	b29a      	uxth	r2, r3
 8006142:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006144:	801a      	strh	r2, [r3, #0]
 8006146:	e04e      	b.n	80061e6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8006148:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800614a:	2b3e      	cmp	r3, #62	@ 0x3e
 800614c:	d816      	bhi.n	800617c <HAL_PCD_EP_DB_Transmit+0x7a0>
 800614e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006150:	085b      	lsrs	r3, r3, #1
 8006152:	663b      	str	r3, [r7, #96]	@ 0x60
 8006154:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <HAL_PCD_EP_DB_Transmit+0x788>
 800615e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006160:	3301      	adds	r3, #1
 8006162:	663b      	str	r3, [r7, #96]	@ 0x60
 8006164:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	b29a      	uxth	r2, r3
 800616a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800616c:	b29b      	uxth	r3, r3
 800616e:	029b      	lsls	r3, r3, #10
 8006170:	b29b      	uxth	r3, r3
 8006172:	4313      	orrs	r3, r2
 8006174:	b29a      	uxth	r2, r3
 8006176:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006178:	801a      	strh	r2, [r3, #0]
 800617a:	e034      	b.n	80061e6 <HAL_PCD_EP_DB_Transmit+0x80a>
 800617c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800617e:	095b      	lsrs	r3, r3, #5
 8006180:	663b      	str	r3, [r7, #96]	@ 0x60
 8006182:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006184:	f003 031f 	and.w	r3, r3, #31
 8006188:	2b00      	cmp	r3, #0
 800618a:	d102      	bne.n	8006192 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800618c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800618e:	3b01      	subs	r3, #1
 8006190:	663b      	str	r3, [r7, #96]	@ 0x60
 8006192:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b29a      	uxth	r2, r3
 8006198:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800619a:	b29b      	uxth	r3, r3
 800619c:	029b      	lsls	r3, r3, #10
 800619e:	b29b      	uxth	r3, r3
 80061a0:	4313      	orrs	r3, r2
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061b0:	801a      	strh	r2, [r3, #0]
 80061b2:	e018      	b.n	80061e6 <HAL_PCD_EP_DB_Transmit+0x80a>
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	785b      	ldrb	r3, [r3, #1]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d114      	bne.n	80061e6 <HAL_PCD_EP_DB_Transmit+0x80a>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	461a      	mov	r2, r3
 80061c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061ca:	4413      	add	r3, r2
 80061cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	00da      	lsls	r2, r3, #3
 80061d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061d6:	4413      	add	r3, r2
 80061d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80061dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061e4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6818      	ldr	r0, [r3, #0]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	6959      	ldr	r1, [r3, #20]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	895a      	ldrh	r2, [r3, #10]
 80061f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f004 fcb6 	bl	800ab66 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006210:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006214:	82fb      	strh	r3, [r7, #22]
 8006216:	8afb      	ldrh	r3, [r7, #22]
 8006218:	f083 0310 	eor.w	r3, r3, #16
 800621c:	82fb      	strh	r3, [r7, #22]
 800621e:	8afb      	ldrh	r3, [r7, #22]
 8006220:	f083 0320 	eor.w	r3, r3, #32
 8006224:	82fb      	strh	r3, [r7, #22]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	441a      	add	r2, r3
 8006234:	8afb      	ldrh	r3, [r7, #22]
 8006236:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800623a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800623e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006246:	b29b      	uxth	r3, r3
 8006248:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3798      	adds	r7, #152	@ 0x98
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	607b      	str	r3, [r7, #4]
 800625e:	460b      	mov	r3, r1
 8006260:	817b      	strh	r3, [r7, #10]
 8006262:	4613      	mov	r3, r2
 8006264:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006266:	897b      	ldrh	r3, [r7, #10]
 8006268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800626c:	b29b      	uxth	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00b      	beq.n	800628a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006272:	897b      	ldrh	r3, [r7, #10]
 8006274:	f003 0207 	and.w	r2, r3, #7
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	3310      	adds	r3, #16
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4413      	add	r3, r2
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	e009      	b.n	800629e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800628a:	897a      	ldrh	r2, [r7, #10]
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4413      	add	r3, r2
 800629c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800629e:	893b      	ldrh	r3, [r7, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d107      	bne.n	80062b4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2200      	movs	r2, #0
 80062a8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	80da      	strh	r2, [r3, #6]
 80062b2:	e00b      	b.n	80062cc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	2201      	movs	r2, #1
 80062b8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	b29a      	uxth	r2, r3
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	0c1b      	lsrs	r3, r3, #16
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	371c      	adds	r7, #28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80062fe:	b29b      	uxth	r3, r3
 8006300:	f043 0301 	orr.w	r3, r3, #1
 8006304:	b29a      	uxth	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006312:	b29b      	uxth	r3, r3
 8006314:	f043 0302 	orr.w	r3, r3, #2
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
	...

08006330 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d141      	bne.n	80063c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800633e:	4b4b      	ldr	r3, [pc, #300]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800634a:	d131      	bne.n	80063b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800634c:	4b47      	ldr	r3, [pc, #284]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800634e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006352:	4a46      	ldr	r2, [pc, #280]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006358:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800635c:	4b43      	ldr	r3, [pc, #268]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006364:	4a41      	ldr	r2, [pc, #260]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006366:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800636a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800636c:	4b40      	ldr	r3, [pc, #256]	@ (8006470 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2232      	movs	r2, #50	@ 0x32
 8006372:	fb02 f303 	mul.w	r3, r2, r3
 8006376:	4a3f      	ldr	r2, [pc, #252]	@ (8006474 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006378:	fba2 2303 	umull	r2, r3, r2, r3
 800637c:	0c9b      	lsrs	r3, r3, #18
 800637e:	3301      	adds	r3, #1
 8006380:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006382:	e002      	b.n	800638a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3b01      	subs	r3, #1
 8006388:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800638a:	4b38      	ldr	r3, [pc, #224]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006396:	d102      	bne.n	800639e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1f2      	bne.n	8006384 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800639e:	4b33      	ldr	r3, [pc, #204]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063aa:	d158      	bne.n	800645e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e057      	b.n	8006460 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063b0:	4b2e      	ldr	r3, [pc, #184]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063b6:	4a2d      	ldr	r2, [pc, #180]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80063c0:	e04d      	b.n	800645e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063c8:	d141      	bne.n	800644e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80063ca:	4b28      	ldr	r3, [pc, #160]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80063d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063d6:	d131      	bne.n	800643c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063d8:	4b24      	ldr	r3, [pc, #144]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063de:	4a23      	ldr	r2, [pc, #140]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80063e8:	4b20      	ldr	r3, [pc, #128]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80063f0:	4a1e      	ldr	r2, [pc, #120]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80063f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006470 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2232      	movs	r2, #50	@ 0x32
 80063fe:	fb02 f303 	mul.w	r3, r2, r3
 8006402:	4a1c      	ldr	r2, [pc, #112]	@ (8006474 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006404:	fba2 2303 	umull	r2, r3, r2, r3
 8006408:	0c9b      	lsrs	r3, r3, #18
 800640a:	3301      	adds	r3, #1
 800640c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800640e:	e002      	b.n	8006416 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3b01      	subs	r3, #1
 8006414:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006416:	4b15      	ldr	r3, [pc, #84]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800641e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006422:	d102      	bne.n	800642a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1f2      	bne.n	8006410 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800642a:	4b10      	ldr	r3, [pc, #64]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006436:	d112      	bne.n	800645e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e011      	b.n	8006460 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800643c:	4b0b      	ldr	r3, [pc, #44]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800643e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006442:	4a0a      	ldr	r2, [pc, #40]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006448:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800644c:	e007      	b.n	800645e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800644e:	4b07      	ldr	r3, [pc, #28]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006456:	4a05      	ldr	r2, [pc, #20]	@ (800646c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006458:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800645c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	40007000 	.word	0x40007000
 8006470:	20000000 	.word	0x20000000
 8006474:	431bde83 	.word	0x431bde83

08006478 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006478:	b480      	push	{r7}
 800647a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800647c:	4b05      	ldr	r3, [pc, #20]	@ (8006494 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	4a04      	ldr	r2, [pc, #16]	@ (8006494 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006482:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006486:	6093      	str	r3, [r2, #8]
}
 8006488:	bf00      	nop
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	40007000 	.word	0x40007000

08006498 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e2fe      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d075      	beq.n	80065a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064b6:	4b97      	ldr	r3, [pc, #604]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f003 030c 	and.w	r3, r3, #12
 80064be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064c0:	4b94      	ldr	r3, [pc, #592]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f003 0303 	and.w	r3, r3, #3
 80064c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	2b0c      	cmp	r3, #12
 80064ce:	d102      	bne.n	80064d6 <HAL_RCC_OscConfig+0x3e>
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d002      	beq.n	80064dc <HAL_RCC_OscConfig+0x44>
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	2b08      	cmp	r3, #8
 80064da:	d10b      	bne.n	80064f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064dc:	4b8d      	ldr	r3, [pc, #564]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d05b      	beq.n	80065a0 <HAL_RCC_OscConfig+0x108>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d157      	bne.n	80065a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e2d9      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064fc:	d106      	bne.n	800650c <HAL_RCC_OscConfig+0x74>
 80064fe:	4b85      	ldr	r3, [pc, #532]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a84      	ldr	r2, [pc, #528]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 8006504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	e01d      	b.n	8006548 <HAL_RCC_OscConfig+0xb0>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006514:	d10c      	bne.n	8006530 <HAL_RCC_OscConfig+0x98>
 8006516:	4b7f      	ldr	r3, [pc, #508]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a7e      	ldr	r2, [pc, #504]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 800651c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	4b7c      	ldr	r3, [pc, #496]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a7b      	ldr	r2, [pc, #492]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 8006528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	e00b      	b.n	8006548 <HAL_RCC_OscConfig+0xb0>
 8006530:	4b78      	ldr	r3, [pc, #480]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a77      	ldr	r2, [pc, #476]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 8006536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	4b75      	ldr	r3, [pc, #468]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a74      	ldr	r2, [pc, #464]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 8006542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d013      	beq.n	8006578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006550:	f7fb ff2e 	bl	80023b0 <HAL_GetTick>
 8006554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006556:	e008      	b.n	800656a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006558:	f7fb ff2a 	bl	80023b0 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b64      	cmp	r3, #100	@ 0x64
 8006564:	d901      	bls.n	800656a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e29e      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800656a:	4b6a      	ldr	r3, [pc, #424]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0f0      	beq.n	8006558 <HAL_RCC_OscConfig+0xc0>
 8006576:	e014      	b.n	80065a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006578:	f7fb ff1a 	bl	80023b0 <HAL_GetTick>
 800657c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006580:	f7fb ff16 	bl	80023b0 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b64      	cmp	r3, #100	@ 0x64
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e28a      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006592:	4b60      	ldr	r3, [pc, #384]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1f0      	bne.n	8006580 <HAL_RCC_OscConfig+0xe8>
 800659e:	e000      	b.n	80065a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d075      	beq.n	800669a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065ae:	4b59      	ldr	r3, [pc, #356]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 030c 	and.w	r3, r3, #12
 80065b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065b8:	4b56      	ldr	r3, [pc, #344]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f003 0303 	and.w	r3, r3, #3
 80065c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	2b0c      	cmp	r3, #12
 80065c6:	d102      	bne.n	80065ce <HAL_RCC_OscConfig+0x136>
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d002      	beq.n	80065d4 <HAL_RCC_OscConfig+0x13c>
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	2b04      	cmp	r3, #4
 80065d2:	d11f      	bne.n	8006614 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065d4:	4b4f      	ldr	r3, [pc, #316]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d005      	beq.n	80065ec <HAL_RCC_OscConfig+0x154>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e25d      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ec:	4b49      	ldr	r3, [pc, #292]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	061b      	lsls	r3, r3, #24
 80065fa:	4946      	ldr	r1, [pc, #280]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006600:	4b45      	ldr	r3, [pc, #276]	@ (8006718 <HAL_RCC_OscConfig+0x280>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4618      	mov	r0, r3
 8006606:	f7fb fe87 	bl	8002318 <HAL_InitTick>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d043      	beq.n	8006698 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e249      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d023      	beq.n	8006664 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800661c:	4b3d      	ldr	r3, [pc, #244]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a3c      	ldr	r2, [pc, #240]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 8006622:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006628:	f7fb fec2 	bl	80023b0 <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006630:	f7fb febe 	bl	80023b0 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e232      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006642:	4b34      	ldr	r3, [pc, #208]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0f0      	beq.n	8006630 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800664e:	4b31      	ldr	r3, [pc, #196]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	061b      	lsls	r3, r3, #24
 800665c:	492d      	ldr	r1, [pc, #180]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 800665e:	4313      	orrs	r3, r2
 8006660:	604b      	str	r3, [r1, #4]
 8006662:	e01a      	b.n	800669a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006664:	4b2b      	ldr	r3, [pc, #172]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a2a      	ldr	r2, [pc, #168]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 800666a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800666e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006670:	f7fb fe9e 	bl	80023b0 <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006676:	e008      	b.n	800668a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006678:	f7fb fe9a 	bl	80023b0 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e20e      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800668a:	4b22      	ldr	r3, [pc, #136]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1f0      	bne.n	8006678 <HAL_RCC_OscConfig+0x1e0>
 8006696:	e000      	b.n	800669a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006698:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0308 	and.w	r3, r3, #8
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d041      	beq.n	800672a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d01c      	beq.n	80066e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066ae:	4b19      	ldr	r3, [pc, #100]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 80066b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066b4:	4a17      	ldr	r2, [pc, #92]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 80066b6:	f043 0301 	orr.w	r3, r3, #1
 80066ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066be:	f7fb fe77 	bl	80023b0 <HAL_GetTick>
 80066c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066c6:	f7fb fe73 	bl	80023b0 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e1e7      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 80066da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0ef      	beq.n	80066c6 <HAL_RCC_OscConfig+0x22e>
 80066e6:	e020      	b.n	800672a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 80066ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066ee:	4a09      	ldr	r2, [pc, #36]	@ (8006714 <HAL_RCC_OscConfig+0x27c>)
 80066f0:	f023 0301 	bic.w	r3, r3, #1
 80066f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f8:	f7fb fe5a 	bl	80023b0 <HAL_GetTick>
 80066fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066fe:	e00d      	b.n	800671c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006700:	f7fb fe56 	bl	80023b0 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d906      	bls.n	800671c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e1ca      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>
 8006712:	bf00      	nop
 8006714:	40021000 	.word	0x40021000
 8006718:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800671c:	4b8c      	ldr	r3, [pc, #560]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 800671e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1ea      	bne.n	8006700 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0304 	and.w	r3, r3, #4
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 80a6 	beq.w	8006884 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006738:	2300      	movs	r3, #0
 800673a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800673c:	4b84      	ldr	r3, [pc, #528]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 800673e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <HAL_RCC_OscConfig+0x2b4>
 8006748:	2301      	movs	r3, #1
 800674a:	e000      	b.n	800674e <HAL_RCC_OscConfig+0x2b6>
 800674c:	2300      	movs	r3, #0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00d      	beq.n	800676e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006752:	4b7f      	ldr	r3, [pc, #508]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 8006754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006756:	4a7e      	ldr	r2, [pc, #504]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 8006758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800675c:	6593      	str	r3, [r2, #88]	@ 0x58
 800675e:	4b7c      	ldr	r3, [pc, #496]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 8006760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800676a:	2301      	movs	r3, #1
 800676c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800676e:	4b79      	ldr	r3, [pc, #484]	@ (8006954 <HAL_RCC_OscConfig+0x4bc>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006776:	2b00      	cmp	r3, #0
 8006778:	d118      	bne.n	80067ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800677a:	4b76      	ldr	r3, [pc, #472]	@ (8006954 <HAL_RCC_OscConfig+0x4bc>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a75      	ldr	r2, [pc, #468]	@ (8006954 <HAL_RCC_OscConfig+0x4bc>)
 8006780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006786:	f7fb fe13 	bl	80023b0 <HAL_GetTick>
 800678a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800678c:	e008      	b.n	80067a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800678e:	f7fb fe0f 	bl	80023b0 <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	2b02      	cmp	r3, #2
 800679a:	d901      	bls.n	80067a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e183      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067a0:	4b6c      	ldr	r3, [pc, #432]	@ (8006954 <HAL_RCC_OscConfig+0x4bc>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0f0      	beq.n	800678e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d108      	bne.n	80067c6 <HAL_RCC_OscConfig+0x32e>
 80067b4:	4b66      	ldr	r3, [pc, #408]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 80067b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ba:	4a65      	ldr	r2, [pc, #404]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 80067bc:	f043 0301 	orr.w	r3, r3, #1
 80067c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067c4:	e024      	b.n	8006810 <HAL_RCC_OscConfig+0x378>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	2b05      	cmp	r3, #5
 80067cc:	d110      	bne.n	80067f0 <HAL_RCC_OscConfig+0x358>
 80067ce:	4b60      	ldr	r3, [pc, #384]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 80067d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067d4:	4a5e      	ldr	r2, [pc, #376]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 80067d6:	f043 0304 	orr.w	r3, r3, #4
 80067da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067de:	4b5c      	ldr	r3, [pc, #368]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 80067e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e4:	4a5a      	ldr	r2, [pc, #360]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 80067e6:	f043 0301 	orr.w	r3, r3, #1
 80067ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067ee:	e00f      	b.n	8006810 <HAL_RCC_OscConfig+0x378>
 80067f0:	4b57      	ldr	r3, [pc, #348]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 80067f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f6:	4a56      	ldr	r2, [pc, #344]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 80067f8:	f023 0301 	bic.w	r3, r3, #1
 80067fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006800:	4b53      	ldr	r3, [pc, #332]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 8006802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006806:	4a52      	ldr	r2, [pc, #328]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 8006808:	f023 0304 	bic.w	r3, r3, #4
 800680c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d016      	beq.n	8006846 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006818:	f7fb fdca 	bl	80023b0 <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800681e:	e00a      	b.n	8006836 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006820:	f7fb fdc6 	bl	80023b0 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800682e:	4293      	cmp	r3, r2
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e138      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006836:	4b46      	ldr	r3, [pc, #280]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 8006838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0ed      	beq.n	8006820 <HAL_RCC_OscConfig+0x388>
 8006844:	e015      	b.n	8006872 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006846:	f7fb fdb3 	bl	80023b0 <HAL_GetTick>
 800684a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800684c:	e00a      	b.n	8006864 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800684e:	f7fb fdaf 	bl	80023b0 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800685c:	4293      	cmp	r3, r2
 800685e:	d901      	bls.n	8006864 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e121      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006864:	4b3a      	ldr	r3, [pc, #232]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 8006866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1ed      	bne.n	800684e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006872:	7ffb      	ldrb	r3, [r7, #31]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d105      	bne.n	8006884 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006878:	4b35      	ldr	r3, [pc, #212]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 800687a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800687c:	4a34      	ldr	r2, [pc, #208]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 800687e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006882:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0320 	and.w	r3, r3, #32
 800688c:	2b00      	cmp	r3, #0
 800688e:	d03c      	beq.n	800690a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01c      	beq.n	80068d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006898:	4b2d      	ldr	r3, [pc, #180]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 800689a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800689e:	4a2c      	ldr	r2, [pc, #176]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 80068a0:	f043 0301 	orr.w	r3, r3, #1
 80068a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a8:	f7fb fd82 	bl	80023b0 <HAL_GetTick>
 80068ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068ae:	e008      	b.n	80068c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068b0:	f7fb fd7e 	bl	80023b0 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d901      	bls.n	80068c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e0f2      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068c2:	4b23      	ldr	r3, [pc, #140]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 80068c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0ef      	beq.n	80068b0 <HAL_RCC_OscConfig+0x418>
 80068d0:	e01b      	b.n	800690a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068d2:	4b1f      	ldr	r3, [pc, #124]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 80068d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 80068da:	f023 0301 	bic.w	r3, r3, #1
 80068de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068e2:	f7fb fd65 	bl	80023b0 <HAL_GetTick>
 80068e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068e8:	e008      	b.n	80068fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068ea:	f7fb fd61 	bl	80023b0 <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d901      	bls.n	80068fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e0d5      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068fc:	4b14      	ldr	r3, [pc, #80]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 80068fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1ef      	bne.n	80068ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 80c9 	beq.w	8006aa6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006914:	4b0e      	ldr	r3, [pc, #56]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f003 030c 	and.w	r3, r3, #12
 800691c:	2b0c      	cmp	r3, #12
 800691e:	f000 8083 	beq.w	8006a28 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	2b02      	cmp	r3, #2
 8006928:	d15e      	bne.n	80069e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800692a:	4b09      	ldr	r3, [pc, #36]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a08      	ldr	r2, [pc, #32]	@ (8006950 <HAL_RCC_OscConfig+0x4b8>)
 8006930:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006936:	f7fb fd3b 	bl	80023b0 <HAL_GetTick>
 800693a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800693c:	e00c      	b.n	8006958 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800693e:	f7fb fd37 	bl	80023b0 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d905      	bls.n	8006958 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e0ab      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>
 8006950:	40021000 	.word	0x40021000
 8006954:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006958:	4b55      	ldr	r3, [pc, #340]	@ (8006ab0 <HAL_RCC_OscConfig+0x618>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1ec      	bne.n	800693e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006964:	4b52      	ldr	r3, [pc, #328]	@ (8006ab0 <HAL_RCC_OscConfig+0x618>)
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	4b52      	ldr	r3, [pc, #328]	@ (8006ab4 <HAL_RCC_OscConfig+0x61c>)
 800696a:	4013      	ands	r3, r2
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6a11      	ldr	r1, [r2, #32]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006974:	3a01      	subs	r2, #1
 8006976:	0112      	lsls	r2, r2, #4
 8006978:	4311      	orrs	r1, r2
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800697e:	0212      	lsls	r2, r2, #8
 8006980:	4311      	orrs	r1, r2
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006986:	0852      	lsrs	r2, r2, #1
 8006988:	3a01      	subs	r2, #1
 800698a:	0552      	lsls	r2, r2, #21
 800698c:	4311      	orrs	r1, r2
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006992:	0852      	lsrs	r2, r2, #1
 8006994:	3a01      	subs	r2, #1
 8006996:	0652      	lsls	r2, r2, #25
 8006998:	4311      	orrs	r1, r2
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800699e:	06d2      	lsls	r2, r2, #27
 80069a0:	430a      	orrs	r2, r1
 80069a2:	4943      	ldr	r1, [pc, #268]	@ (8006ab0 <HAL_RCC_OscConfig+0x618>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069a8:	4b41      	ldr	r3, [pc, #260]	@ (8006ab0 <HAL_RCC_OscConfig+0x618>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a40      	ldr	r2, [pc, #256]	@ (8006ab0 <HAL_RCC_OscConfig+0x618>)
 80069ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069b4:	4b3e      	ldr	r3, [pc, #248]	@ (8006ab0 <HAL_RCC_OscConfig+0x618>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	4a3d      	ldr	r2, [pc, #244]	@ (8006ab0 <HAL_RCC_OscConfig+0x618>)
 80069ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c0:	f7fb fcf6 	bl	80023b0 <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c8:	f7fb fcf2 	bl	80023b0 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e066      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069da:	4b35      	ldr	r3, [pc, #212]	@ (8006ab0 <HAL_RCC_OscConfig+0x618>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0f0      	beq.n	80069c8 <HAL_RCC_OscConfig+0x530>
 80069e6:	e05e      	b.n	8006aa6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069e8:	4b31      	ldr	r3, [pc, #196]	@ (8006ab0 <HAL_RCC_OscConfig+0x618>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a30      	ldr	r2, [pc, #192]	@ (8006ab0 <HAL_RCC_OscConfig+0x618>)
 80069ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f4:	f7fb fcdc 	bl	80023b0 <HAL_GetTick>
 80069f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069fa:	e008      	b.n	8006a0e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069fc:	f7fb fcd8 	bl	80023b0 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d901      	bls.n	8006a0e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e04c      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a0e:	4b28      	ldr	r3, [pc, #160]	@ (8006ab0 <HAL_RCC_OscConfig+0x618>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1f0      	bne.n	80069fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006a1a:	4b25      	ldr	r3, [pc, #148]	@ (8006ab0 <HAL_RCC_OscConfig+0x618>)
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	4924      	ldr	r1, [pc, #144]	@ (8006ab0 <HAL_RCC_OscConfig+0x618>)
 8006a20:	4b25      	ldr	r3, [pc, #148]	@ (8006ab8 <HAL_RCC_OscConfig+0x620>)
 8006a22:	4013      	ands	r3, r2
 8006a24:	60cb      	str	r3, [r1, #12]
 8006a26:	e03e      	b.n	8006aa6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e039      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006a34:	4b1e      	ldr	r3, [pc, #120]	@ (8006ab0 <HAL_RCC_OscConfig+0x618>)
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f003 0203 	and.w	r2, r3, #3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d12c      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a52:	3b01      	subs	r3, #1
 8006a54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d123      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a64:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d11b      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a74:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d113      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a84:	085b      	lsrs	r3, r3, #1
 8006a86:	3b01      	subs	r3, #1
 8006a88:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d109      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a98:	085b      	lsrs	r3, r3, #1
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d001      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3720      	adds	r7, #32
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	40021000 	.word	0x40021000
 8006ab4:	019f800c 	.word	0x019f800c
 8006ab8:	feeefffc 	.word	0xfeeefffc

08006abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e11e      	b.n	8006d12 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ad4:	4b91      	ldr	r3, [pc, #580]	@ (8006d1c <HAL_RCC_ClockConfig+0x260>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 030f 	and.w	r3, r3, #15
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d910      	bls.n	8006b04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ae2:	4b8e      	ldr	r3, [pc, #568]	@ (8006d1c <HAL_RCC_ClockConfig+0x260>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f023 020f 	bic.w	r2, r3, #15
 8006aea:	498c      	ldr	r1, [pc, #560]	@ (8006d1c <HAL_RCC_ClockConfig+0x260>)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006af2:	4b8a      	ldr	r3, [pc, #552]	@ (8006d1c <HAL_RCC_ClockConfig+0x260>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 030f 	and.w	r3, r3, #15
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d001      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e106      	b.n	8006d12 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d073      	beq.n	8006bf8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	2b03      	cmp	r3, #3
 8006b16:	d129      	bne.n	8006b6c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b18:	4b81      	ldr	r3, [pc, #516]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e0f4      	b.n	8006d12 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006b28:	f000 f972 	bl	8006e10 <RCC_GetSysClockFreqFromPLLSource>
 8006b2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	4a7c      	ldr	r2, [pc, #496]	@ (8006d24 <HAL_RCC_ClockConfig+0x268>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d93f      	bls.n	8006bb6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b36:	4b7a      	ldr	r3, [pc, #488]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d009      	beq.n	8006b56 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d033      	beq.n	8006bb6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d12f      	bne.n	8006bb6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b56:	4b72      	ldr	r3, [pc, #456]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b5e:	4a70      	ldr	r2, [pc, #448]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006b66:	2380      	movs	r3, #128	@ 0x80
 8006b68:	617b      	str	r3, [r7, #20]
 8006b6a:	e024      	b.n	8006bb6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d107      	bne.n	8006b84 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b74:	4b6a      	ldr	r3, [pc, #424]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d109      	bne.n	8006b94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e0c6      	b.n	8006d12 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b84:	4b66      	ldr	r3, [pc, #408]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e0be      	b.n	8006d12 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006b94:	f000 f8ce 	bl	8006d34 <HAL_RCC_GetSysClockFreq>
 8006b98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	4a61      	ldr	r2, [pc, #388]	@ (8006d24 <HAL_RCC_ClockConfig+0x268>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d909      	bls.n	8006bb6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006ba2:	4b5f      	ldr	r3, [pc, #380]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006baa:	4a5d      	ldr	r2, [pc, #372]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006bac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bb0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006bb2:	2380      	movs	r3, #128	@ 0x80
 8006bb4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bb6:	4b5a      	ldr	r3, [pc, #360]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f023 0203 	bic.w	r2, r3, #3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	4957      	ldr	r1, [pc, #348]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc8:	f7fb fbf2 	bl	80023b0 <HAL_GetTick>
 8006bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bce:	e00a      	b.n	8006be6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bd0:	f7fb fbee 	bl	80023b0 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e095      	b.n	8006d12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006be6:	4b4e      	ldr	r3, [pc, #312]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 020c 	and.w	r2, r3, #12
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d1eb      	bne.n	8006bd0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0302 	and.w	r3, r3, #2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d023      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d005      	beq.n	8006c1c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c10:	4b43      	ldr	r3, [pc, #268]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	4a42      	ldr	r2, [pc, #264]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006c16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c1a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0308 	and.w	r3, r3, #8
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d007      	beq.n	8006c38 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006c28:	4b3d      	ldr	r3, [pc, #244]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006c30:	4a3b      	ldr	r2, [pc, #236]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006c32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c38:	4b39      	ldr	r3, [pc, #228]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	4936      	ldr	r1, [pc, #216]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	608b      	str	r3, [r1, #8]
 8006c4a:	e008      	b.n	8006c5e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	2b80      	cmp	r3, #128	@ 0x80
 8006c50:	d105      	bne.n	8006c5e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006c52:	4b33      	ldr	r3, [pc, #204]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	4a32      	ldr	r2, [pc, #200]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006c58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c5c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8006d1c <HAL_RCC_ClockConfig+0x260>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d21d      	bcs.n	8006ca8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8006d1c <HAL_RCC_ClockConfig+0x260>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f023 020f 	bic.w	r2, r3, #15
 8006c74:	4929      	ldr	r1, [pc, #164]	@ (8006d1c <HAL_RCC_ClockConfig+0x260>)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c7c:	f7fb fb98 	bl	80023b0 <HAL_GetTick>
 8006c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c82:	e00a      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c84:	f7fb fb94 	bl	80023b0 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d901      	bls.n	8006c9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e03b      	b.n	8006d12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c9a:	4b20      	ldr	r3, [pc, #128]	@ (8006d1c <HAL_RCC_ClockConfig+0x260>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 030f 	and.w	r3, r3, #15
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d1ed      	bne.n	8006c84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d008      	beq.n	8006cc6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	4917      	ldr	r1, [pc, #92]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0308 	and.w	r3, r3, #8
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d009      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cd2:	4b13      	ldr	r3, [pc, #76]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	00db      	lsls	r3, r3, #3
 8006ce0:	490f      	ldr	r1, [pc, #60]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ce6:	f000 f825 	bl	8006d34 <HAL_RCC_GetSysClockFreq>
 8006cea:	4602      	mov	r2, r0
 8006cec:	4b0c      	ldr	r3, [pc, #48]	@ (8006d20 <HAL_RCC_ClockConfig+0x264>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	091b      	lsrs	r3, r3, #4
 8006cf2:	f003 030f 	and.w	r3, r3, #15
 8006cf6:	490c      	ldr	r1, [pc, #48]	@ (8006d28 <HAL_RCC_ClockConfig+0x26c>)
 8006cf8:	5ccb      	ldrb	r3, [r1, r3]
 8006cfa:	f003 031f 	and.w	r3, r3, #31
 8006cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8006d02:	4a0a      	ldr	r2, [pc, #40]	@ (8006d2c <HAL_RCC_ClockConfig+0x270>)
 8006d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006d06:	4b0a      	ldr	r3, [pc, #40]	@ (8006d30 <HAL_RCC_ClockConfig+0x274>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fb fb04 	bl	8002318 <HAL_InitTick>
 8006d10:	4603      	mov	r3, r0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	40022000 	.word	0x40022000
 8006d20:	40021000 	.word	0x40021000
 8006d24:	04c4b400 	.word	0x04c4b400
 8006d28:	080115a0 	.word	0x080115a0
 8006d2c:	20000000 	.word	0x20000000
 8006d30:	20000004 	.word	0x20000004

08006d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d3a:	4b2c      	ldr	r3, [pc, #176]	@ (8006dec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f003 030c 	and.w	r3, r3, #12
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	d102      	bne.n	8006d4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d46:	4b2a      	ldr	r3, [pc, #168]	@ (8006df0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d48:	613b      	str	r3, [r7, #16]
 8006d4a:	e047      	b.n	8006ddc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d4c:	4b27      	ldr	r3, [pc, #156]	@ (8006dec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f003 030c 	and.w	r3, r3, #12
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	d102      	bne.n	8006d5e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d58:	4b26      	ldr	r3, [pc, #152]	@ (8006df4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d5a:	613b      	str	r3, [r7, #16]
 8006d5c:	e03e      	b.n	8006ddc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006d5e:	4b23      	ldr	r3, [pc, #140]	@ (8006dec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 030c 	and.w	r3, r3, #12
 8006d66:	2b0c      	cmp	r3, #12
 8006d68:	d136      	bne.n	8006dd8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d6a:	4b20      	ldr	r3, [pc, #128]	@ (8006dec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d74:	4b1d      	ldr	r3, [pc, #116]	@ (8006dec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	091b      	lsrs	r3, r3, #4
 8006d7a:	f003 030f 	and.w	r3, r3, #15
 8006d7e:	3301      	adds	r3, #1
 8006d80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d10c      	bne.n	8006da2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d88:	4a1a      	ldr	r2, [pc, #104]	@ (8006df4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d90:	4a16      	ldr	r2, [pc, #88]	@ (8006dec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d92:	68d2      	ldr	r2, [r2, #12]
 8006d94:	0a12      	lsrs	r2, r2, #8
 8006d96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d9a:	fb02 f303 	mul.w	r3, r2, r3
 8006d9e:	617b      	str	r3, [r7, #20]
      break;
 8006da0:	e00c      	b.n	8006dbc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006da2:	4a13      	ldr	r2, [pc, #76]	@ (8006df0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006daa:	4a10      	ldr	r2, [pc, #64]	@ (8006dec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dac:	68d2      	ldr	r2, [r2, #12]
 8006dae:	0a12      	lsrs	r2, r2, #8
 8006db0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006db4:	fb02 f303 	mul.w	r3, r2, r3
 8006db8:	617b      	str	r3, [r7, #20]
      break;
 8006dba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8006dec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	0e5b      	lsrs	r3, r3, #25
 8006dc2:	f003 0303 	and.w	r3, r3, #3
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd4:	613b      	str	r3, [r7, #16]
 8006dd6:	e001      	b.n	8006ddc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006ddc:	693b      	ldr	r3, [r7, #16]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	40021000 	.word	0x40021000
 8006df0:	00f42400 	.word	0x00f42400
 8006df4:	007a1200 	.word	0x007a1200

08006df8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dfc:	4b03      	ldr	r3, [pc, #12]	@ (8006e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	20000000 	.word	0x20000000

08006e10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e16:	4b1e      	ldr	r3, [pc, #120]	@ (8006e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e20:	4b1b      	ldr	r3, [pc, #108]	@ (8006e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	091b      	lsrs	r3, r3, #4
 8006e26:	f003 030f 	and.w	r3, r3, #15
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d10c      	bne.n	8006e4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e34:	4a17      	ldr	r2, [pc, #92]	@ (8006e94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3c:	4a14      	ldr	r2, [pc, #80]	@ (8006e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e3e:	68d2      	ldr	r2, [r2, #12]
 8006e40:	0a12      	lsrs	r2, r2, #8
 8006e42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006e46:	fb02 f303 	mul.w	r3, r2, r3
 8006e4a:	617b      	str	r3, [r7, #20]
    break;
 8006e4c:	e00c      	b.n	8006e68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e4e:	4a12      	ldr	r2, [pc, #72]	@ (8006e98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e56:	4a0e      	ldr	r2, [pc, #56]	@ (8006e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e58:	68d2      	ldr	r2, [r2, #12]
 8006e5a:	0a12      	lsrs	r2, r2, #8
 8006e5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006e60:	fb02 f303 	mul.w	r3, r2, r3
 8006e64:	617b      	str	r3, [r7, #20]
    break;
 8006e66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e68:	4b09      	ldr	r3, [pc, #36]	@ (8006e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	0e5b      	lsrs	r3, r3, #25
 8006e6e:	f003 0303 	and.w	r3, r3, #3
 8006e72:	3301      	adds	r3, #1
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006e82:	687b      	ldr	r3, [r7, #4]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	371c      	adds	r7, #28
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	40021000 	.word	0x40021000
 8006e94:	007a1200 	.word	0x007a1200
 8006e98:	00f42400 	.word	0x00f42400

08006e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 8098 	beq.w	8006fea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ebe:	4b43      	ldr	r3, [pc, #268]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10d      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eca:	4b40      	ldr	r3, [pc, #256]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ece:	4a3f      	ldr	r2, [pc, #252]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ed4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ede:	60bb      	str	r3, [r7, #8]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a39      	ldr	r2, [pc, #228]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ef0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ef2:	f7fb fa5d 	bl	80023b0 <HAL_GetTick>
 8006ef6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ef8:	e009      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006efa:	f7fb fa59 	bl	80023b0 <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d902      	bls.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	74fb      	strb	r3, [r7, #19]
        break;
 8006f0c:	e005      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f0e:	4b30      	ldr	r3, [pc, #192]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0ef      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006f1a:	7cfb      	ldrb	r3, [r7, #19]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d159      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f20:	4b2a      	ldr	r3, [pc, #168]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01e      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d019      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f3c:	4b23      	ldr	r3, [pc, #140]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f48:	4b20      	ldr	r3, [pc, #128]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f58:	4b1c      	ldr	r3, [pc, #112]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f68:	4a18      	ldr	r2, [pc, #96]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d016      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7a:	f7fb fa19 	bl	80023b0 <HAL_GetTick>
 8006f7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f80:	e00b      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f82:	f7fb fa15 	bl	80023b0 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d902      	bls.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	74fb      	strb	r3, [r7, #19]
            break;
 8006f98:	e006      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fa0:	f003 0302 	and.w	r3, r3, #2
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d0ec      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006fa8:	7cfb      	ldrb	r3, [r7, #19]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10b      	bne.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fae:	4b07      	ldr	r3, [pc, #28]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fbc:	4903      	ldr	r1, [pc, #12]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006fc4:	e008      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fc6:	7cfb      	ldrb	r3, [r7, #19]
 8006fc8:	74bb      	strb	r3, [r7, #18]
 8006fca:	e005      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006fcc:	40021000 	.word	0x40021000
 8006fd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd4:	7cfb      	ldrb	r3, [r7, #19]
 8006fd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fd8:	7c7b      	ldrb	r3, [r7, #17]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d105      	bne.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fde:	4ba7      	ldr	r3, [pc, #668]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fe2:	4aa6      	ldr	r2, [pc, #664]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fe4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fe8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00a      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ff6:	4ba1      	ldr	r3, [pc, #644]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ffc:	f023 0203 	bic.w	r2, r3, #3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	499d      	ldr	r1, [pc, #628]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007006:	4313      	orrs	r3, r2
 8007008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00a      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007018:	4b98      	ldr	r3, [pc, #608]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800701a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800701e:	f023 020c 	bic.w	r2, r3, #12
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	4995      	ldr	r1, [pc, #596]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007028:	4313      	orrs	r3, r2
 800702a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0304 	and.w	r3, r3, #4
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00a      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800703a:	4b90      	ldr	r3, [pc, #576]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800703c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007040:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	498c      	ldr	r1, [pc, #560]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800704a:	4313      	orrs	r3, r2
 800704c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00a      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800705c:	4b87      	ldr	r3, [pc, #540]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800705e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007062:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	4984      	ldr	r1, [pc, #528]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800706c:	4313      	orrs	r3, r2
 800706e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0310 	and.w	r3, r3, #16
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800707e:	4b7f      	ldr	r3, [pc, #508]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007084:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	497b      	ldr	r1, [pc, #492]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800708e:	4313      	orrs	r3, r2
 8007090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0320 	and.w	r3, r3, #32
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00a      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070a0:	4b76      	ldr	r3, [pc, #472]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	4973      	ldr	r1, [pc, #460]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00a      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070c2:	4b6e      	ldr	r3, [pc, #440]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	496a      	ldr	r1, [pc, #424]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00a      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070e4:	4b65      	ldr	r3, [pc, #404]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	4962      	ldr	r1, [pc, #392]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00a      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007106:	4b5d      	ldr	r3, [pc, #372]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800710c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007114:	4959      	ldr	r1, [pc, #356]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007116:	4313      	orrs	r3, r2
 8007118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00a      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007128:	4b54      	ldr	r3, [pc, #336]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800712a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800712e:	f023 0203 	bic.w	r2, r3, #3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007136:	4951      	ldr	r1, [pc, #324]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007138:	4313      	orrs	r3, r2
 800713a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800714a:	4b4c      	ldr	r3, [pc, #304]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800714c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007150:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007158:	4948      	ldr	r1, [pc, #288]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800715a:	4313      	orrs	r3, r2
 800715c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007168:	2b00      	cmp	r3, #0
 800716a:	d015      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800716c:	4b43      	ldr	r3, [pc, #268]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800716e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007172:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800717a:	4940      	ldr	r1, [pc, #256]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800717c:	4313      	orrs	r3, r2
 800717e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800718a:	d105      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800718c:	4b3b      	ldr	r3, [pc, #236]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	4a3a      	ldr	r2, [pc, #232]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007196:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d015      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80071a4:	4b35      	ldr	r3, [pc, #212]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071b2:	4932      	ldr	r1, [pc, #200]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071c2:	d105      	bne.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071c4:	4b2d      	ldr	r3, [pc, #180]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	4a2c      	ldr	r2, [pc, #176]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071ce:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d015      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071dc:	4b27      	ldr	r3, [pc, #156]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ea:	4924      	ldr	r1, [pc, #144]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071fa:	d105      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071fc:	4b1f      	ldr	r3, [pc, #124]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	4a1e      	ldr	r2, [pc, #120]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007202:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007206:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d015      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007214:	4b19      	ldr	r3, [pc, #100]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800721a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007222:	4916      	ldr	r1, [pc, #88]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007224:	4313      	orrs	r3, r2
 8007226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800722e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007232:	d105      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007234:	4b11      	ldr	r3, [pc, #68]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	4a10      	ldr	r2, [pc, #64]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800723a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800723e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d019      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800724c:	4b0b      	ldr	r3, [pc, #44]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800724e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007252:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725a:	4908      	ldr	r1, [pc, #32]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800725c:	4313      	orrs	r3, r2
 800725e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007266:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800726a:	d109      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800726c:	4b03      	ldr	r3, [pc, #12]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	4a02      	ldr	r2, [pc, #8]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007276:	60d3      	str	r3, [r2, #12]
 8007278:	e002      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800727a:	bf00      	nop
 800727c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d015      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800728c:	4b29      	ldr	r3, [pc, #164]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800728e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007292:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800729a:	4926      	ldr	r1, [pc, #152]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800729c:	4313      	orrs	r3, r2
 800729e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072aa:	d105      	bne.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80072ac:	4b21      	ldr	r3, [pc, #132]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	4a20      	ldr	r2, [pc, #128]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072b6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d015      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80072c4:	4b1b      	ldr	r3, [pc, #108]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072d2:	4918      	ldr	r1, [pc, #96]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072e2:	d105      	bne.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80072e4:	4b13      	ldr	r3, [pc, #76]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	4a12      	ldr	r2, [pc, #72]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072ee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d015      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80072fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007302:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800730a:	490a      	ldr	r1, [pc, #40]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800730c:	4313      	orrs	r3, r2
 800730e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007316:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800731a:	d105      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800731c:	4b05      	ldr	r3, [pc, #20]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	4a04      	ldr	r2, [pc, #16]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007326:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007328:	7cbb      	ldrb	r3, [r7, #18]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	40021000 	.word	0x40021000

08007338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e049      	b.n	80073de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d106      	bne.n	8007364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7fa fd68 	bl	8001e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3304      	adds	r3, #4
 8007374:	4619      	mov	r1, r3
 8007376:	4610      	mov	r0, r2
 8007378:	f001 f822 	bl	80083c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b082      	sub	sp, #8
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e049      	b.n	800748c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d106      	bne.n	8007412 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f841 	bl	8007494 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2202      	movs	r2, #2
 8007416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3304      	adds	r3, #4
 8007422:	4619      	mov	r1, r3
 8007424:	4610      	mov	r0, r2
 8007426:	f000 ffcb 	bl	80083c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d109      	bne.n	80074cc <HAL_TIM_PWM_Start+0x24>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	bf14      	ite	ne
 80074c4:	2301      	movne	r3, #1
 80074c6:	2300      	moveq	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	e03c      	b.n	8007546 <HAL_TIM_PWM_Start+0x9e>
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	d109      	bne.n	80074e6 <HAL_TIM_PWM_Start+0x3e>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b01      	cmp	r3, #1
 80074dc:	bf14      	ite	ne
 80074de:	2301      	movne	r3, #1
 80074e0:	2300      	moveq	r3, #0
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	e02f      	b.n	8007546 <HAL_TIM_PWM_Start+0x9e>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d109      	bne.n	8007500 <HAL_TIM_PWM_Start+0x58>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	bf14      	ite	ne
 80074f8:	2301      	movne	r3, #1
 80074fa:	2300      	moveq	r3, #0
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	e022      	b.n	8007546 <HAL_TIM_PWM_Start+0x9e>
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2b0c      	cmp	r3, #12
 8007504:	d109      	bne.n	800751a <HAL_TIM_PWM_Start+0x72>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b01      	cmp	r3, #1
 8007510:	bf14      	ite	ne
 8007512:	2301      	movne	r3, #1
 8007514:	2300      	moveq	r3, #0
 8007516:	b2db      	uxtb	r3, r3
 8007518:	e015      	b.n	8007546 <HAL_TIM_PWM_Start+0x9e>
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b10      	cmp	r3, #16
 800751e:	d109      	bne.n	8007534 <HAL_TIM_PWM_Start+0x8c>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b01      	cmp	r3, #1
 800752a:	bf14      	ite	ne
 800752c:	2301      	movne	r3, #1
 800752e:	2300      	moveq	r3, #0
 8007530:	b2db      	uxtb	r3, r3
 8007532:	e008      	b.n	8007546 <HAL_TIM_PWM_Start+0x9e>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b01      	cmp	r3, #1
 800753e:	bf14      	ite	ne
 8007540:	2301      	movne	r3, #1
 8007542:	2300      	moveq	r3, #0
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e0a6      	b.n	800769c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d104      	bne.n	800755e <HAL_TIM_PWM_Start+0xb6>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800755c:	e023      	b.n	80075a6 <HAL_TIM_PWM_Start+0xfe>
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b04      	cmp	r3, #4
 8007562:	d104      	bne.n	800756e <HAL_TIM_PWM_Start+0xc6>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2202      	movs	r2, #2
 8007568:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800756c:	e01b      	b.n	80075a6 <HAL_TIM_PWM_Start+0xfe>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b08      	cmp	r3, #8
 8007572:	d104      	bne.n	800757e <HAL_TIM_PWM_Start+0xd6>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800757c:	e013      	b.n	80075a6 <HAL_TIM_PWM_Start+0xfe>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b0c      	cmp	r3, #12
 8007582:	d104      	bne.n	800758e <HAL_TIM_PWM_Start+0xe6>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800758c:	e00b      	b.n	80075a6 <HAL_TIM_PWM_Start+0xfe>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b10      	cmp	r3, #16
 8007592:	d104      	bne.n	800759e <HAL_TIM_PWM_Start+0xf6>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2202      	movs	r2, #2
 8007598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800759c:	e003      	b.n	80075a6 <HAL_TIM_PWM_Start+0xfe>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2202      	movs	r2, #2
 80075a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2201      	movs	r2, #1
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f001 fb80 	bl	8008cb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a3a      	ldr	r2, [pc, #232]	@ (80076a4 <HAL_TIM_PWM_Start+0x1fc>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d018      	beq.n	80075f0 <HAL_TIM_PWM_Start+0x148>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a39      	ldr	r2, [pc, #228]	@ (80076a8 <HAL_TIM_PWM_Start+0x200>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d013      	beq.n	80075f0 <HAL_TIM_PWM_Start+0x148>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a37      	ldr	r2, [pc, #220]	@ (80076ac <HAL_TIM_PWM_Start+0x204>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d00e      	beq.n	80075f0 <HAL_TIM_PWM_Start+0x148>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a36      	ldr	r2, [pc, #216]	@ (80076b0 <HAL_TIM_PWM_Start+0x208>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d009      	beq.n	80075f0 <HAL_TIM_PWM_Start+0x148>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a34      	ldr	r2, [pc, #208]	@ (80076b4 <HAL_TIM_PWM_Start+0x20c>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d004      	beq.n	80075f0 <HAL_TIM_PWM_Start+0x148>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a33      	ldr	r2, [pc, #204]	@ (80076b8 <HAL_TIM_PWM_Start+0x210>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d101      	bne.n	80075f4 <HAL_TIM_PWM_Start+0x14c>
 80075f0:	2301      	movs	r3, #1
 80075f2:	e000      	b.n	80075f6 <HAL_TIM_PWM_Start+0x14e>
 80075f4:	2300      	movs	r3, #0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d007      	beq.n	800760a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007608:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a25      	ldr	r2, [pc, #148]	@ (80076a4 <HAL_TIM_PWM_Start+0x1fc>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d022      	beq.n	800765a <HAL_TIM_PWM_Start+0x1b2>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800761c:	d01d      	beq.n	800765a <HAL_TIM_PWM_Start+0x1b2>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a26      	ldr	r2, [pc, #152]	@ (80076bc <HAL_TIM_PWM_Start+0x214>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d018      	beq.n	800765a <HAL_TIM_PWM_Start+0x1b2>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a24      	ldr	r2, [pc, #144]	@ (80076c0 <HAL_TIM_PWM_Start+0x218>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d013      	beq.n	800765a <HAL_TIM_PWM_Start+0x1b2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a23      	ldr	r2, [pc, #140]	@ (80076c4 <HAL_TIM_PWM_Start+0x21c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00e      	beq.n	800765a <HAL_TIM_PWM_Start+0x1b2>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a19      	ldr	r2, [pc, #100]	@ (80076a8 <HAL_TIM_PWM_Start+0x200>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d009      	beq.n	800765a <HAL_TIM_PWM_Start+0x1b2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a18      	ldr	r2, [pc, #96]	@ (80076ac <HAL_TIM_PWM_Start+0x204>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d004      	beq.n	800765a <HAL_TIM_PWM_Start+0x1b2>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a18      	ldr	r2, [pc, #96]	@ (80076b8 <HAL_TIM_PWM_Start+0x210>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d115      	bne.n	8007686 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	4b19      	ldr	r3, [pc, #100]	@ (80076c8 <HAL_TIM_PWM_Start+0x220>)
 8007662:	4013      	ands	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2b06      	cmp	r3, #6
 800766a:	d015      	beq.n	8007698 <HAL_TIM_PWM_Start+0x1f0>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007672:	d011      	beq.n	8007698 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0201 	orr.w	r2, r2, #1
 8007682:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007684:	e008      	b.n	8007698 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f042 0201 	orr.w	r2, r2, #1
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	e000      	b.n	800769a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007698:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	40012c00 	.word	0x40012c00
 80076a8:	40013400 	.word	0x40013400
 80076ac:	40014000 	.word	0x40014000
 80076b0:	40014400 	.word	0x40014400
 80076b4:	40014800 	.word	0x40014800
 80076b8:	40015000 	.word	0x40015000
 80076bc:	40000400 	.word	0x40000400
 80076c0:	40000800 	.word	0x40000800
 80076c4:	40000c00 	.word	0x40000c00
 80076c8:	00010007 	.word	0x00010007

080076cc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
 80076d8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d109      	bne.n	80076f8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	bf0c      	ite	eq
 80076f0:	2301      	moveq	r3, #1
 80076f2:	2300      	movne	r3, #0
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	e03c      	b.n	8007772 <HAL_TIM_PWM_Start_DMA+0xa6>
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2b04      	cmp	r3, #4
 80076fc:	d109      	bne.n	8007712 <HAL_TIM_PWM_Start_DMA+0x46>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b02      	cmp	r3, #2
 8007708:	bf0c      	ite	eq
 800770a:	2301      	moveq	r3, #1
 800770c:	2300      	movne	r3, #0
 800770e:	b2db      	uxtb	r3, r3
 8007710:	e02f      	b.n	8007772 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2b08      	cmp	r3, #8
 8007716:	d109      	bne.n	800772c <HAL_TIM_PWM_Start_DMA+0x60>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b02      	cmp	r3, #2
 8007722:	bf0c      	ite	eq
 8007724:	2301      	moveq	r3, #1
 8007726:	2300      	movne	r3, #0
 8007728:	b2db      	uxtb	r3, r3
 800772a:	e022      	b.n	8007772 <HAL_TIM_PWM_Start_DMA+0xa6>
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2b0c      	cmp	r3, #12
 8007730:	d109      	bne.n	8007746 <HAL_TIM_PWM_Start_DMA+0x7a>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b02      	cmp	r3, #2
 800773c:	bf0c      	ite	eq
 800773e:	2301      	moveq	r3, #1
 8007740:	2300      	movne	r3, #0
 8007742:	b2db      	uxtb	r3, r3
 8007744:	e015      	b.n	8007772 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b10      	cmp	r3, #16
 800774a:	d109      	bne.n	8007760 <HAL_TIM_PWM_Start_DMA+0x94>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	bf0c      	ite	eq
 8007758:	2301      	moveq	r3, #1
 800775a:	2300      	movne	r3, #0
 800775c:	b2db      	uxtb	r3, r3
 800775e:	e008      	b.n	8007772 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b02      	cmp	r3, #2
 800776a:	bf0c      	ite	eq
 800776c:	2301      	moveq	r3, #1
 800776e:	2300      	movne	r3, #0
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007776:	2302      	movs	r3, #2
 8007778:	e1b5      	b.n	8007ae6 <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d109      	bne.n	8007794 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b01      	cmp	r3, #1
 800778a:	bf0c      	ite	eq
 800778c:	2301      	moveq	r3, #1
 800778e:	2300      	movne	r3, #0
 8007790:	b2db      	uxtb	r3, r3
 8007792:	e03c      	b.n	800780e <HAL_TIM_PWM_Start_DMA+0x142>
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2b04      	cmp	r3, #4
 8007798:	d109      	bne.n	80077ae <HAL_TIM_PWM_Start_DMA+0xe2>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	bf0c      	ite	eq
 80077a6:	2301      	moveq	r3, #1
 80077a8:	2300      	movne	r3, #0
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	e02f      	b.n	800780e <HAL_TIM_PWM_Start_DMA+0x142>
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2b08      	cmp	r3, #8
 80077b2:	d109      	bne.n	80077c8 <HAL_TIM_PWM_Start_DMA+0xfc>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b01      	cmp	r3, #1
 80077be:	bf0c      	ite	eq
 80077c0:	2301      	moveq	r3, #1
 80077c2:	2300      	movne	r3, #0
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	e022      	b.n	800780e <HAL_TIM_PWM_Start_DMA+0x142>
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2b0c      	cmp	r3, #12
 80077cc:	d109      	bne.n	80077e2 <HAL_TIM_PWM_Start_DMA+0x116>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	bf0c      	ite	eq
 80077da:	2301      	moveq	r3, #1
 80077dc:	2300      	movne	r3, #0
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	e015      	b.n	800780e <HAL_TIM_PWM_Start_DMA+0x142>
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b10      	cmp	r3, #16
 80077e6:	d109      	bne.n	80077fc <HAL_TIM_PWM_Start_DMA+0x130>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	bf0c      	ite	eq
 80077f4:	2301      	moveq	r3, #1
 80077f6:	2300      	movne	r3, #0
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	e008      	b.n	800780e <HAL_TIM_PWM_Start_DMA+0x142>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b01      	cmp	r3, #1
 8007806:	bf0c      	ite	eq
 8007808:	2301      	moveq	r3, #1
 800780a:	2300      	movne	r3, #0
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d034      	beq.n	800787c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <HAL_TIM_PWM_Start_DMA+0x152>
 8007818:	887b      	ldrh	r3, [r7, #2]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e161      	b.n	8007ae6 <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d104      	bne.n	8007832 <HAL_TIM_PWM_Start_DMA+0x166>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007830:	e026      	b.n	8007880 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	2b04      	cmp	r3, #4
 8007836:	d104      	bne.n	8007842 <HAL_TIM_PWM_Start_DMA+0x176>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007840:	e01e      	b.n	8007880 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b08      	cmp	r3, #8
 8007846:	d104      	bne.n	8007852 <HAL_TIM_PWM_Start_DMA+0x186>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2202      	movs	r2, #2
 800784c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007850:	e016      	b.n	8007880 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2b0c      	cmp	r3, #12
 8007856:	d104      	bne.n	8007862 <HAL_TIM_PWM_Start_DMA+0x196>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2202      	movs	r2, #2
 800785c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007860:	e00e      	b.n	8007880 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b10      	cmp	r3, #16
 8007866:	d104      	bne.n	8007872 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007870:	e006      	b.n	8007880 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2202      	movs	r2, #2
 8007876:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800787a:	e001      	b.n	8007880 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e132      	b.n	8007ae6 <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2b0c      	cmp	r3, #12
 8007884:	f200 80ae 	bhi.w	80079e4 <HAL_TIM_PWM_Start_DMA+0x318>
 8007888:	a201      	add	r2, pc, #4	@ (adr r2, 8007890 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800788a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788e:	bf00      	nop
 8007890:	080078c5 	.word	0x080078c5
 8007894:	080079e5 	.word	0x080079e5
 8007898:	080079e5 	.word	0x080079e5
 800789c:	080079e5 	.word	0x080079e5
 80078a0:	0800790d 	.word	0x0800790d
 80078a4:	080079e5 	.word	0x080079e5
 80078a8:	080079e5 	.word	0x080079e5
 80078ac:	080079e5 	.word	0x080079e5
 80078b0:	08007955 	.word	0x08007955
 80078b4:	080079e5 	.word	0x080079e5
 80078b8:	080079e5 	.word	0x080079e5
 80078bc:	080079e5 	.word	0x080079e5
 80078c0:	0800799d 	.word	0x0800799d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c8:	4a89      	ldr	r2, [pc, #548]	@ (8007af0 <HAL_TIM_PWM_Start_DMA+0x424>)
 80078ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d0:	4a88      	ldr	r2, [pc, #544]	@ (8007af4 <HAL_TIM_PWM_Start_DMA+0x428>)
 80078d2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d8:	4a87      	ldr	r2, [pc, #540]	@ (8007af8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80078da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80078e0:	6879      	ldr	r1, [r7, #4]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3334      	adds	r3, #52	@ 0x34
 80078e8:	461a      	mov	r2, r3
 80078ea:	887b      	ldrh	r3, [r7, #2]
 80078ec:	f7fc fc02 	bl	80040f4 <HAL_DMA_Start_IT>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e0f5      	b.n	8007ae6 <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68da      	ldr	r2, [r3, #12]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007908:	60da      	str	r2, [r3, #12]
      break;
 800790a:	e06e      	b.n	80079ea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007910:	4a77      	ldr	r2, [pc, #476]	@ (8007af0 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007912:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007918:	4a76      	ldr	r2, [pc, #472]	@ (8007af4 <HAL_TIM_PWM_Start_DMA+0x428>)
 800791a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007920:	4a75      	ldr	r2, [pc, #468]	@ (8007af8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007922:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007928:	6879      	ldr	r1, [r7, #4]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3338      	adds	r3, #56	@ 0x38
 8007930:	461a      	mov	r2, r3
 8007932:	887b      	ldrh	r3, [r7, #2]
 8007934:	f7fc fbde 	bl	80040f4 <HAL_DMA_Start_IT>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e0d1      	b.n	8007ae6 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68da      	ldr	r2, [r3, #12]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007950:	60da      	str	r2, [r3, #12]
      break;
 8007952:	e04a      	b.n	80079ea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007958:	4a65      	ldr	r2, [pc, #404]	@ (8007af0 <HAL_TIM_PWM_Start_DMA+0x424>)
 800795a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007960:	4a64      	ldr	r2, [pc, #400]	@ (8007af4 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007962:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007968:	4a63      	ldr	r2, [pc, #396]	@ (8007af8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800796a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007970:	6879      	ldr	r1, [r7, #4]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	333c      	adds	r3, #60	@ 0x3c
 8007978:	461a      	mov	r2, r3
 800797a:	887b      	ldrh	r3, [r7, #2]
 800797c:	f7fc fbba 	bl	80040f4 <HAL_DMA_Start_IT>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e0ad      	b.n	8007ae6 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68da      	ldr	r2, [r3, #12]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007998:	60da      	str	r2, [r3, #12]
      break;
 800799a:	e026      	b.n	80079ea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a0:	4a53      	ldr	r2, [pc, #332]	@ (8007af0 <HAL_TIM_PWM_Start_DMA+0x424>)
 80079a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a8:	4a52      	ldr	r2, [pc, #328]	@ (8007af4 <HAL_TIM_PWM_Start_DMA+0x428>)
 80079aa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b0:	4a51      	ldr	r2, [pc, #324]	@ (8007af8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80079b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80079b8:	6879      	ldr	r1, [r7, #4]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3340      	adds	r3, #64	@ 0x40
 80079c0:	461a      	mov	r2, r3
 80079c2:	887b      	ldrh	r3, [r7, #2]
 80079c4:	f7fc fb96 	bl	80040f4 <HAL_DMA_Start_IT>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e089      	b.n	8007ae6 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80079e0:	60da      	str	r2, [r3, #12]
      break;
 80079e2:	e002      	b.n	80079ea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	75fb      	strb	r3, [r7, #23]
      break;
 80079e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d179      	bne.n	8007ae4 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2201      	movs	r2, #1
 80079f6:	68b9      	ldr	r1, [r7, #8]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f001 f95b 	bl	8008cb4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a3e      	ldr	r2, [pc, #248]	@ (8007afc <HAL_TIM_PWM_Start_DMA+0x430>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d018      	beq.n	8007a3a <HAL_TIM_PWM_Start_DMA+0x36e>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a3c      	ldr	r2, [pc, #240]	@ (8007b00 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d013      	beq.n	8007a3a <HAL_TIM_PWM_Start_DMA+0x36e>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a3b      	ldr	r2, [pc, #236]	@ (8007b04 <HAL_TIM_PWM_Start_DMA+0x438>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d00e      	beq.n	8007a3a <HAL_TIM_PWM_Start_DMA+0x36e>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a39      	ldr	r2, [pc, #228]	@ (8007b08 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d009      	beq.n	8007a3a <HAL_TIM_PWM_Start_DMA+0x36e>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a38      	ldr	r2, [pc, #224]	@ (8007b0c <HAL_TIM_PWM_Start_DMA+0x440>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d004      	beq.n	8007a3a <HAL_TIM_PWM_Start_DMA+0x36e>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a36      	ldr	r2, [pc, #216]	@ (8007b10 <HAL_TIM_PWM_Start_DMA+0x444>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d101      	bne.n	8007a3e <HAL_TIM_PWM_Start_DMA+0x372>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e000      	b.n	8007a40 <HAL_TIM_PWM_Start_DMA+0x374>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d007      	beq.n	8007a54 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a52:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a28      	ldr	r2, [pc, #160]	@ (8007afc <HAL_TIM_PWM_Start_DMA+0x430>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d022      	beq.n	8007aa4 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a66:	d01d      	beq.n	8007aa4 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a29      	ldr	r2, [pc, #164]	@ (8007b14 <HAL_TIM_PWM_Start_DMA+0x448>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d018      	beq.n	8007aa4 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a28      	ldr	r2, [pc, #160]	@ (8007b18 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d013      	beq.n	8007aa4 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a26      	ldr	r2, [pc, #152]	@ (8007b1c <HAL_TIM_PWM_Start_DMA+0x450>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d00e      	beq.n	8007aa4 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8007b00 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d009      	beq.n	8007aa4 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a1b      	ldr	r2, [pc, #108]	@ (8007b04 <HAL_TIM_PWM_Start_DMA+0x438>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d004      	beq.n	8007aa4 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8007b10 <HAL_TIM_PWM_Start_DMA+0x444>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d115      	bne.n	8007ad0 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	689a      	ldr	r2, [r3, #8]
 8007aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8007b20 <HAL_TIM_PWM_Start_DMA+0x454>)
 8007aac:	4013      	ands	r3, r2
 8007aae:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	2b06      	cmp	r3, #6
 8007ab4:	d015      	beq.n	8007ae2 <HAL_TIM_PWM_Start_DMA+0x416>
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007abc:	d011      	beq.n	8007ae2 <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f042 0201 	orr.w	r2, r2, #1
 8007acc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ace:	e008      	b.n	8007ae2 <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f042 0201 	orr.w	r2, r2, #1
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	e000      	b.n	8007ae4 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ae2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3718      	adds	r7, #24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	080082af 	.word	0x080082af
 8007af4:	08008357 	.word	0x08008357
 8007af8:	0800821d 	.word	0x0800821d
 8007afc:	40012c00 	.word	0x40012c00
 8007b00:	40013400 	.word	0x40013400
 8007b04:	40014000 	.word	0x40014000
 8007b08:	40014400 	.word	0x40014400
 8007b0c:	40014800 	.word	0x40014800
 8007b10:	40015000 	.word	0x40015000
 8007b14:	40000400 	.word	0x40000400
 8007b18:	40000800 	.word	0x40000800
 8007b1c:	40000c00 	.word	0x40000c00
 8007b20:	00010007 	.word	0x00010007

08007b24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e097      	b.n	8007c68 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d106      	bne.n	8007b52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7fa f87f 	bl	8001c50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2202      	movs	r2, #2
 8007b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	6812      	ldr	r2, [r2, #0]
 8007b64:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007b68:	f023 0307 	bic.w	r3, r3, #7
 8007b6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	3304      	adds	r3, #4
 8007b76:	4619      	mov	r1, r3
 8007b78:	4610      	mov	r0, r2
 8007b7a:	f000 fc21 	bl	80083c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ba6:	f023 0303 	bic.w	r3, r3, #3
 8007baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	689a      	ldr	r2, [r3, #8]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	021b      	lsls	r3, r3, #8
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007bc4:	f023 030c 	bic.w	r3, r3, #12
 8007bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007bd0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007bd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68da      	ldr	r2, [r3, #12]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	69db      	ldr	r3, [r3, #28]
 8007bde:	021b      	lsls	r3, r3, #8
 8007be0:	4313      	orrs	r3, r2
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	011a      	lsls	r2, r3, #4
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	031b      	lsls	r3, r3, #12
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007c02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007c0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	011b      	lsls	r3, r3, #4
 8007c16:	4313      	orrs	r3, r2
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3718      	adds	r7, #24
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c80:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c88:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c90:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c98:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d110      	bne.n	8007cc2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d102      	bne.n	8007cac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ca6:	7b7b      	ldrb	r3, [r7, #13]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d001      	beq.n	8007cb0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e069      	b.n	8007d84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cc0:	e031      	b.n	8007d26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b04      	cmp	r3, #4
 8007cc6:	d110      	bne.n	8007cea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d102      	bne.n	8007cd4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007cce:	7b3b      	ldrb	r3, [r7, #12]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d001      	beq.n	8007cd8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e055      	b.n	8007d84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ce8:	e01d      	b.n	8007d26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d108      	bne.n	8007d02 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d105      	bne.n	8007d02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cf6:	7b7b      	ldrb	r3, [r7, #13]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d102      	bne.n	8007d02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007cfc:	7b3b      	ldrb	r3, [r7, #12]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d001      	beq.n	8007d06 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e03e      	b.n	8007d84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2202      	movs	r2, #2
 8007d0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2202      	movs	r2, #2
 8007d12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2202      	movs	r2, #2
 8007d1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2202      	movs	r2, #2
 8007d22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <HAL_TIM_Encoder_Start+0xc4>
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b04      	cmp	r3, #4
 8007d30:	d008      	beq.n	8007d44 <HAL_TIM_Encoder_Start+0xd4>
 8007d32:	e00f      	b.n	8007d54 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 ffb9 	bl	8008cb4 <TIM_CCxChannelCmd>
      break;
 8007d42:	e016      	b.n	8007d72 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	2104      	movs	r1, #4
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 ffb1 	bl	8008cb4 <TIM_CCxChannelCmd>
      break;
 8007d52:	e00e      	b.n	8007d72 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 ffa9 	bl	8008cb4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2201      	movs	r2, #1
 8007d68:	2104      	movs	r1, #4
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 ffa2 	bl	8008cb4 <TIM_CCxChannelCmd>
      break;
 8007d70:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f042 0201 	orr.w	r2, r2, #1
 8007d80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d101      	bne.n	8007daa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007da6:	2302      	movs	r3, #2
 8007da8:	e0ff      	b.n	8007faa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b14      	cmp	r3, #20
 8007db6:	f200 80f0 	bhi.w	8007f9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007dba:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc0:	08007e15 	.word	0x08007e15
 8007dc4:	08007f9b 	.word	0x08007f9b
 8007dc8:	08007f9b 	.word	0x08007f9b
 8007dcc:	08007f9b 	.word	0x08007f9b
 8007dd0:	08007e55 	.word	0x08007e55
 8007dd4:	08007f9b 	.word	0x08007f9b
 8007dd8:	08007f9b 	.word	0x08007f9b
 8007ddc:	08007f9b 	.word	0x08007f9b
 8007de0:	08007e97 	.word	0x08007e97
 8007de4:	08007f9b 	.word	0x08007f9b
 8007de8:	08007f9b 	.word	0x08007f9b
 8007dec:	08007f9b 	.word	0x08007f9b
 8007df0:	08007ed7 	.word	0x08007ed7
 8007df4:	08007f9b 	.word	0x08007f9b
 8007df8:	08007f9b 	.word	0x08007f9b
 8007dfc:	08007f9b 	.word	0x08007f9b
 8007e00:	08007f19 	.word	0x08007f19
 8007e04:	08007f9b 	.word	0x08007f9b
 8007e08:	08007f9b 	.word	0x08007f9b
 8007e0c:	08007f9b 	.word	0x08007f9b
 8007e10:	08007f59 	.word	0x08007f59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68b9      	ldr	r1, [r7, #8]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 fb84 	bl	8008528 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	699a      	ldr	r2, [r3, #24]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0208 	orr.w	r2, r2, #8
 8007e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	699a      	ldr	r2, [r3, #24]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 0204 	bic.w	r2, r2, #4
 8007e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6999      	ldr	r1, [r3, #24]
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	691a      	ldr	r2, [r3, #16]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	619a      	str	r2, [r3, #24]
      break;
 8007e52:	e0a5      	b.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68b9      	ldr	r1, [r7, #8]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 fbfe 	bl	800865c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	699a      	ldr	r2, [r3, #24]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	699a      	ldr	r2, [r3, #24]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6999      	ldr	r1, [r3, #24]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	021a      	lsls	r2, r3, #8
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	619a      	str	r2, [r3, #24]
      break;
 8007e94:	e084      	b.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68b9      	ldr	r1, [r7, #8]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 fc71 	bl	8008784 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69da      	ldr	r2, [r3, #28]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f042 0208 	orr.w	r2, r2, #8
 8007eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	69da      	ldr	r2, [r3, #28]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 0204 	bic.w	r2, r2, #4
 8007ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	69d9      	ldr	r1, [r3, #28]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	691a      	ldr	r2, [r3, #16]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	61da      	str	r2, [r3, #28]
      break;
 8007ed4:	e064      	b.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68b9      	ldr	r1, [r7, #8]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 fce3 	bl	80088a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	69da      	ldr	r2, [r3, #28]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69da      	ldr	r2, [r3, #28]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	69d9      	ldr	r1, [r3, #28]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	021a      	lsls	r2, r3, #8
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	61da      	str	r2, [r3, #28]
      break;
 8007f16:	e043      	b.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68b9      	ldr	r1, [r7, #8]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 fd56 	bl	80089d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 0208 	orr.w	r2, r2, #8
 8007f32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f022 0204 	bic.w	r2, r2, #4
 8007f42:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	691a      	ldr	r2, [r3, #16]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007f56:	e023      	b.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68b9      	ldr	r1, [r7, #8]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 fda0 	bl	8008aa4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f72:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f82:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	021a      	lsls	r2, r3, #8
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007f98:	e002      	b.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop

08007fb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d101      	bne.n	8007fd0 <HAL_TIM_ConfigClockSource+0x1c>
 8007fcc:	2302      	movs	r3, #2
 8007fce:	e0f6      	b.n	80081be <HAL_TIM_ConfigClockSource+0x20a>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2202      	movs	r2, #2
 8007fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007fee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ffa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a6f      	ldr	r2, [pc, #444]	@ (80081c8 <HAL_TIM_ConfigClockSource+0x214>)
 800800a:	4293      	cmp	r3, r2
 800800c:	f000 80c1 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 8008010:	4a6d      	ldr	r2, [pc, #436]	@ (80081c8 <HAL_TIM_ConfigClockSource+0x214>)
 8008012:	4293      	cmp	r3, r2
 8008014:	f200 80c6 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008018:	4a6c      	ldr	r2, [pc, #432]	@ (80081cc <HAL_TIM_ConfigClockSource+0x218>)
 800801a:	4293      	cmp	r3, r2
 800801c:	f000 80b9 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 8008020:	4a6a      	ldr	r2, [pc, #424]	@ (80081cc <HAL_TIM_ConfigClockSource+0x218>)
 8008022:	4293      	cmp	r3, r2
 8008024:	f200 80be 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008028:	4a69      	ldr	r2, [pc, #420]	@ (80081d0 <HAL_TIM_ConfigClockSource+0x21c>)
 800802a:	4293      	cmp	r3, r2
 800802c:	f000 80b1 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 8008030:	4a67      	ldr	r2, [pc, #412]	@ (80081d0 <HAL_TIM_ConfigClockSource+0x21c>)
 8008032:	4293      	cmp	r3, r2
 8008034:	f200 80b6 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008038:	4a66      	ldr	r2, [pc, #408]	@ (80081d4 <HAL_TIM_ConfigClockSource+0x220>)
 800803a:	4293      	cmp	r3, r2
 800803c:	f000 80a9 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 8008040:	4a64      	ldr	r2, [pc, #400]	@ (80081d4 <HAL_TIM_ConfigClockSource+0x220>)
 8008042:	4293      	cmp	r3, r2
 8008044:	f200 80ae 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008048:	4a63      	ldr	r2, [pc, #396]	@ (80081d8 <HAL_TIM_ConfigClockSource+0x224>)
 800804a:	4293      	cmp	r3, r2
 800804c:	f000 80a1 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 8008050:	4a61      	ldr	r2, [pc, #388]	@ (80081d8 <HAL_TIM_ConfigClockSource+0x224>)
 8008052:	4293      	cmp	r3, r2
 8008054:	f200 80a6 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008058:	4a60      	ldr	r2, [pc, #384]	@ (80081dc <HAL_TIM_ConfigClockSource+0x228>)
 800805a:	4293      	cmp	r3, r2
 800805c:	f000 8099 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 8008060:	4a5e      	ldr	r2, [pc, #376]	@ (80081dc <HAL_TIM_ConfigClockSource+0x228>)
 8008062:	4293      	cmp	r3, r2
 8008064:	f200 809e 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008068:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800806c:	f000 8091 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 8008070:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008074:	f200 8096 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008078:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800807c:	f000 8089 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 8008080:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008084:	f200 808e 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800808c:	d03e      	beq.n	800810c <HAL_TIM_ConfigClockSource+0x158>
 800808e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008092:	f200 8087 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800809a:	f000 8086 	beq.w	80081aa <HAL_TIM_ConfigClockSource+0x1f6>
 800809e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080a2:	d87f      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80080a4:	2b70      	cmp	r3, #112	@ 0x70
 80080a6:	d01a      	beq.n	80080de <HAL_TIM_ConfigClockSource+0x12a>
 80080a8:	2b70      	cmp	r3, #112	@ 0x70
 80080aa:	d87b      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80080ac:	2b60      	cmp	r3, #96	@ 0x60
 80080ae:	d050      	beq.n	8008152 <HAL_TIM_ConfigClockSource+0x19e>
 80080b0:	2b60      	cmp	r3, #96	@ 0x60
 80080b2:	d877      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80080b4:	2b50      	cmp	r3, #80	@ 0x50
 80080b6:	d03c      	beq.n	8008132 <HAL_TIM_ConfigClockSource+0x17e>
 80080b8:	2b50      	cmp	r3, #80	@ 0x50
 80080ba:	d873      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80080bc:	2b40      	cmp	r3, #64	@ 0x40
 80080be:	d058      	beq.n	8008172 <HAL_TIM_ConfigClockSource+0x1be>
 80080c0:	2b40      	cmp	r3, #64	@ 0x40
 80080c2:	d86f      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80080c4:	2b30      	cmp	r3, #48	@ 0x30
 80080c6:	d064      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 80080c8:	2b30      	cmp	r3, #48	@ 0x30
 80080ca:	d86b      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80080cc:	2b20      	cmp	r3, #32
 80080ce:	d060      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 80080d0:	2b20      	cmp	r3, #32
 80080d2:	d867      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d05c      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 80080d8:	2b10      	cmp	r3, #16
 80080da:	d05a      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 80080dc:	e062      	b.n	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080ee:	f000 fdc1 	bl	8008c74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008100:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	609a      	str	r2, [r3, #8]
      break;
 800810a:	e04f      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800811c:	f000 fdaa 	bl	8008c74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689a      	ldr	r2, [r3, #8]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800812e:	609a      	str	r2, [r3, #8]
      break;
 8008130:	e03c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800813e:	461a      	mov	r2, r3
 8008140:	f000 fd1c 	bl	8008b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2150      	movs	r1, #80	@ 0x50
 800814a:	4618      	mov	r0, r3
 800814c:	f000 fd75 	bl	8008c3a <TIM_ITRx_SetConfig>
      break;
 8008150:	e02c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800815e:	461a      	mov	r2, r3
 8008160:	f000 fd3b 	bl	8008bda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2160      	movs	r1, #96	@ 0x60
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fd65 	bl	8008c3a <TIM_ITRx_SetConfig>
      break;
 8008170:	e01c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800817e:	461a      	mov	r2, r3
 8008180:	f000 fcfc 	bl	8008b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2140      	movs	r1, #64	@ 0x40
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fd55 	bl	8008c3a <TIM_ITRx_SetConfig>
      break;
 8008190:	e00c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4619      	mov	r1, r3
 800819c:	4610      	mov	r0, r2
 800819e:	f000 fd4c 	bl	8008c3a <TIM_ITRx_SetConfig>
      break;
 80081a2:	e003      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	73fb      	strb	r3, [r7, #15]
      break;
 80081a8:	e000      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80081aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	00100070 	.word	0x00100070
 80081cc:	00100060 	.word	0x00100060
 80081d0:	00100050 	.word	0x00100050
 80081d4:	00100040 	.word	0x00100040
 80081d8:	00100030 	.word	0x00100030
 80081dc:	00100020 	.word	0x00100020

080081e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008228:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	429a      	cmp	r2, r3
 8008232:	d107      	bne.n	8008244 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2201      	movs	r2, #1
 8008238:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008242:	e02a      	b.n	800829a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	429a      	cmp	r2, r3
 800824c:	d107      	bne.n	800825e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2202      	movs	r2, #2
 8008252:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800825c:	e01d      	b.n	800829a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	429a      	cmp	r2, r3
 8008266:	d107      	bne.n	8008278 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2204      	movs	r2, #4
 800826c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008276:	e010      	b.n	800829a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	429a      	cmp	r2, r3
 8008280:	d107      	bne.n	8008292 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2208      	movs	r2, #8
 8008286:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008290:	e003      	b.n	800829a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f7ff ffb4 	bl	8008208 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	771a      	strb	r2, [r3, #28]
}
 80082a6:	bf00      	nop
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b084      	sub	sp, #16
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ba:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d10b      	bne.n	80082de <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2201      	movs	r2, #1
 80082ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d136      	bne.n	8008342 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082dc:	e031      	b.n	8008342 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d10b      	bne.n	8008300 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2202      	movs	r2, #2
 80082ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d125      	bne.n	8008342 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082fe:	e020      	b.n	8008342 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	429a      	cmp	r2, r3
 8008308:	d10b      	bne.n	8008322 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2204      	movs	r2, #4
 800830e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	69db      	ldr	r3, [r3, #28]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d114      	bne.n	8008342 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008320:	e00f      	b.n	8008342 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	429a      	cmp	r2, r3
 800832a:	d10a      	bne.n	8008342 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2208      	movs	r2, #8
 8008330:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	69db      	ldr	r3, [r3, #28]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d103      	bne.n	8008342 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f7ff ff4c 	bl	80081e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	771a      	strb	r2, [r3, #28]
}
 800834e:	bf00      	nop
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b084      	sub	sp, #16
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008362:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	429a      	cmp	r2, r3
 800836c:	d103      	bne.n	8008376 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2201      	movs	r2, #1
 8008372:	771a      	strb	r2, [r3, #28]
 8008374:	e019      	b.n	80083aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	429a      	cmp	r2, r3
 800837e:	d103      	bne.n	8008388 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2202      	movs	r2, #2
 8008384:	771a      	strb	r2, [r3, #28]
 8008386:	e010      	b.n	80083aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	429a      	cmp	r2, r3
 8008390:	d103      	bne.n	800839a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2204      	movs	r2, #4
 8008396:	771a      	strb	r2, [r3, #28]
 8008398:	e007      	b.n	80083aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d102      	bne.n	80083aa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2208      	movs	r2, #8
 80083a8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f7ff ff22 	bl	80081f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	771a      	strb	r2, [r3, #28]
}
 80083b6:	bf00      	nop
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a4c      	ldr	r2, [pc, #304]	@ (8008504 <TIM_Base_SetConfig+0x144>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d017      	beq.n	8008408 <TIM_Base_SetConfig+0x48>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083de:	d013      	beq.n	8008408 <TIM_Base_SetConfig+0x48>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a49      	ldr	r2, [pc, #292]	@ (8008508 <TIM_Base_SetConfig+0x148>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d00f      	beq.n	8008408 <TIM_Base_SetConfig+0x48>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a48      	ldr	r2, [pc, #288]	@ (800850c <TIM_Base_SetConfig+0x14c>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d00b      	beq.n	8008408 <TIM_Base_SetConfig+0x48>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a47      	ldr	r2, [pc, #284]	@ (8008510 <TIM_Base_SetConfig+0x150>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d007      	beq.n	8008408 <TIM_Base_SetConfig+0x48>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a46      	ldr	r2, [pc, #280]	@ (8008514 <TIM_Base_SetConfig+0x154>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d003      	beq.n	8008408 <TIM_Base_SetConfig+0x48>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a45      	ldr	r2, [pc, #276]	@ (8008518 <TIM_Base_SetConfig+0x158>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d108      	bne.n	800841a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800840e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	4313      	orrs	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a39      	ldr	r2, [pc, #228]	@ (8008504 <TIM_Base_SetConfig+0x144>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d023      	beq.n	800846a <TIM_Base_SetConfig+0xaa>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008428:	d01f      	beq.n	800846a <TIM_Base_SetConfig+0xaa>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a36      	ldr	r2, [pc, #216]	@ (8008508 <TIM_Base_SetConfig+0x148>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d01b      	beq.n	800846a <TIM_Base_SetConfig+0xaa>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a35      	ldr	r2, [pc, #212]	@ (800850c <TIM_Base_SetConfig+0x14c>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d017      	beq.n	800846a <TIM_Base_SetConfig+0xaa>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a34      	ldr	r2, [pc, #208]	@ (8008510 <TIM_Base_SetConfig+0x150>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d013      	beq.n	800846a <TIM_Base_SetConfig+0xaa>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a33      	ldr	r2, [pc, #204]	@ (8008514 <TIM_Base_SetConfig+0x154>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d00f      	beq.n	800846a <TIM_Base_SetConfig+0xaa>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a33      	ldr	r2, [pc, #204]	@ (800851c <TIM_Base_SetConfig+0x15c>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d00b      	beq.n	800846a <TIM_Base_SetConfig+0xaa>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a32      	ldr	r2, [pc, #200]	@ (8008520 <TIM_Base_SetConfig+0x160>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d007      	beq.n	800846a <TIM_Base_SetConfig+0xaa>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a31      	ldr	r2, [pc, #196]	@ (8008524 <TIM_Base_SetConfig+0x164>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d003      	beq.n	800846a <TIM_Base_SetConfig+0xaa>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a2c      	ldr	r2, [pc, #176]	@ (8008518 <TIM_Base_SetConfig+0x158>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d108      	bne.n	800847c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	4313      	orrs	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	4313      	orrs	r3, r2
 8008488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	689a      	ldr	r2, [r3, #8]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a18      	ldr	r2, [pc, #96]	@ (8008504 <TIM_Base_SetConfig+0x144>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d013      	beq.n	80084d0 <TIM_Base_SetConfig+0x110>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a1a      	ldr	r2, [pc, #104]	@ (8008514 <TIM_Base_SetConfig+0x154>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d00f      	beq.n	80084d0 <TIM_Base_SetConfig+0x110>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a1a      	ldr	r2, [pc, #104]	@ (800851c <TIM_Base_SetConfig+0x15c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d00b      	beq.n	80084d0 <TIM_Base_SetConfig+0x110>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a19      	ldr	r2, [pc, #100]	@ (8008520 <TIM_Base_SetConfig+0x160>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d007      	beq.n	80084d0 <TIM_Base_SetConfig+0x110>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a18      	ldr	r2, [pc, #96]	@ (8008524 <TIM_Base_SetConfig+0x164>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d003      	beq.n	80084d0 <TIM_Base_SetConfig+0x110>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a13      	ldr	r2, [pc, #76]	@ (8008518 <TIM_Base_SetConfig+0x158>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d103      	bne.n	80084d8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	691a      	ldr	r2, [r3, #16]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d105      	bne.n	80084f6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	f023 0201 	bic.w	r2, r3, #1
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	611a      	str	r2, [r3, #16]
  }
}
 80084f6:	bf00      	nop
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	40012c00 	.word	0x40012c00
 8008508:	40000400 	.word	0x40000400
 800850c:	40000800 	.word	0x40000800
 8008510:	40000c00 	.word	0x40000c00
 8008514:	40013400 	.word	0x40013400
 8008518:	40015000 	.word	0x40015000
 800851c:	40014000 	.word	0x40014000
 8008520:	40014400 	.word	0x40014400
 8008524:	40014800 	.word	0x40014800

08008528 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	f023 0201 	bic.w	r2, r3, #1
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800855a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f023 0303 	bic.w	r3, r3, #3
 8008562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	4313      	orrs	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f023 0302 	bic.w	r3, r3, #2
 8008574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	4313      	orrs	r3, r2
 800857e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a30      	ldr	r2, [pc, #192]	@ (8008644 <TIM_OC1_SetConfig+0x11c>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d013      	beq.n	80085b0 <TIM_OC1_SetConfig+0x88>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a2f      	ldr	r2, [pc, #188]	@ (8008648 <TIM_OC1_SetConfig+0x120>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d00f      	beq.n	80085b0 <TIM_OC1_SetConfig+0x88>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a2e      	ldr	r2, [pc, #184]	@ (800864c <TIM_OC1_SetConfig+0x124>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d00b      	beq.n	80085b0 <TIM_OC1_SetConfig+0x88>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a2d      	ldr	r2, [pc, #180]	@ (8008650 <TIM_OC1_SetConfig+0x128>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d007      	beq.n	80085b0 <TIM_OC1_SetConfig+0x88>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a2c      	ldr	r2, [pc, #176]	@ (8008654 <TIM_OC1_SetConfig+0x12c>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d003      	beq.n	80085b0 <TIM_OC1_SetConfig+0x88>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a2b      	ldr	r2, [pc, #172]	@ (8008658 <TIM_OC1_SetConfig+0x130>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d10c      	bne.n	80085ca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	f023 0308 	bic.w	r3, r3, #8
 80085b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	4313      	orrs	r3, r2
 80085c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f023 0304 	bic.w	r3, r3, #4
 80085c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a1d      	ldr	r2, [pc, #116]	@ (8008644 <TIM_OC1_SetConfig+0x11c>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d013      	beq.n	80085fa <TIM_OC1_SetConfig+0xd2>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008648 <TIM_OC1_SetConfig+0x120>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d00f      	beq.n	80085fa <TIM_OC1_SetConfig+0xd2>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a1b      	ldr	r2, [pc, #108]	@ (800864c <TIM_OC1_SetConfig+0x124>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d00b      	beq.n	80085fa <TIM_OC1_SetConfig+0xd2>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a1a      	ldr	r2, [pc, #104]	@ (8008650 <TIM_OC1_SetConfig+0x128>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d007      	beq.n	80085fa <TIM_OC1_SetConfig+0xd2>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a19      	ldr	r2, [pc, #100]	@ (8008654 <TIM_OC1_SetConfig+0x12c>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d003      	beq.n	80085fa <TIM_OC1_SetConfig+0xd2>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a18      	ldr	r2, [pc, #96]	@ (8008658 <TIM_OC1_SetConfig+0x130>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d111      	bne.n	800861e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	4313      	orrs	r3, r2
 8008612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	4313      	orrs	r3, r2
 800861c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	621a      	str	r2, [r3, #32]
}
 8008638:	bf00      	nop
 800863a:	371c      	adds	r7, #28
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	40012c00 	.word	0x40012c00
 8008648:	40013400 	.word	0x40013400
 800864c:	40014000 	.word	0x40014000
 8008650:	40014400 	.word	0x40014400
 8008654:	40014800 	.word	0x40014800
 8008658:	40015000 	.word	0x40015000

0800865c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a1b      	ldr	r3, [r3, #32]
 8008670:	f023 0210 	bic.w	r2, r3, #16
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800868a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800868e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	021b      	lsls	r3, r3, #8
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	f023 0320 	bic.w	r3, r3, #32
 80086aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	011b      	lsls	r3, r3, #4
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a2c      	ldr	r2, [pc, #176]	@ (800876c <TIM_OC2_SetConfig+0x110>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d007      	beq.n	80086d0 <TIM_OC2_SetConfig+0x74>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a2b      	ldr	r2, [pc, #172]	@ (8008770 <TIM_OC2_SetConfig+0x114>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d003      	beq.n	80086d0 <TIM_OC2_SetConfig+0x74>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a2a      	ldr	r2, [pc, #168]	@ (8008774 <TIM_OC2_SetConfig+0x118>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d10d      	bne.n	80086ec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	011b      	lsls	r3, r3, #4
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a1f      	ldr	r2, [pc, #124]	@ (800876c <TIM_OC2_SetConfig+0x110>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d013      	beq.n	800871c <TIM_OC2_SetConfig+0xc0>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008770 <TIM_OC2_SetConfig+0x114>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d00f      	beq.n	800871c <TIM_OC2_SetConfig+0xc0>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a1e      	ldr	r2, [pc, #120]	@ (8008778 <TIM_OC2_SetConfig+0x11c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d00b      	beq.n	800871c <TIM_OC2_SetConfig+0xc0>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a1d      	ldr	r2, [pc, #116]	@ (800877c <TIM_OC2_SetConfig+0x120>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d007      	beq.n	800871c <TIM_OC2_SetConfig+0xc0>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a1c      	ldr	r2, [pc, #112]	@ (8008780 <TIM_OC2_SetConfig+0x124>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d003      	beq.n	800871c <TIM_OC2_SetConfig+0xc0>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a17      	ldr	r2, [pc, #92]	@ (8008774 <TIM_OC2_SetConfig+0x118>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d113      	bne.n	8008744 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008722:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800872a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	4313      	orrs	r3, r2
 8008736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	4313      	orrs	r3, r2
 8008742:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	697a      	ldr	r2, [r7, #20]
 800875c:	621a      	str	r2, [r3, #32]
}
 800875e:	bf00      	nop
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	40012c00 	.word	0x40012c00
 8008770:	40013400 	.word	0x40013400
 8008774:	40015000 	.word	0x40015000
 8008778:	40014000 	.word	0x40014000
 800877c:	40014400 	.word	0x40014400
 8008780:	40014800 	.word	0x40014800

08008784 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008784:	b480      	push	{r7}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a1b      	ldr	r3, [r3, #32]
 8008798:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f023 0303 	bic.w	r3, r3, #3
 80087be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	021b      	lsls	r3, r3, #8
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	4313      	orrs	r3, r2
 80087dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a2b      	ldr	r2, [pc, #172]	@ (8008890 <TIM_OC3_SetConfig+0x10c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d007      	beq.n	80087f6 <TIM_OC3_SetConfig+0x72>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a2a      	ldr	r2, [pc, #168]	@ (8008894 <TIM_OC3_SetConfig+0x110>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d003      	beq.n	80087f6 <TIM_OC3_SetConfig+0x72>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a29      	ldr	r2, [pc, #164]	@ (8008898 <TIM_OC3_SetConfig+0x114>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d10d      	bne.n	8008812 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80087fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	021b      	lsls	r3, r3, #8
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	4313      	orrs	r3, r2
 8008808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a1e      	ldr	r2, [pc, #120]	@ (8008890 <TIM_OC3_SetConfig+0x10c>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d013      	beq.n	8008842 <TIM_OC3_SetConfig+0xbe>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a1d      	ldr	r2, [pc, #116]	@ (8008894 <TIM_OC3_SetConfig+0x110>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d00f      	beq.n	8008842 <TIM_OC3_SetConfig+0xbe>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a1d      	ldr	r2, [pc, #116]	@ (800889c <TIM_OC3_SetConfig+0x118>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d00b      	beq.n	8008842 <TIM_OC3_SetConfig+0xbe>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a1c      	ldr	r2, [pc, #112]	@ (80088a0 <TIM_OC3_SetConfig+0x11c>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d007      	beq.n	8008842 <TIM_OC3_SetConfig+0xbe>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a1b      	ldr	r2, [pc, #108]	@ (80088a4 <TIM_OC3_SetConfig+0x120>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d003      	beq.n	8008842 <TIM_OC3_SetConfig+0xbe>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a16      	ldr	r2, [pc, #88]	@ (8008898 <TIM_OC3_SetConfig+0x114>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d113      	bne.n	800886a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	011b      	lsls	r3, r3, #4
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	4313      	orrs	r3, r2
 800885c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	011b      	lsls	r3, r3, #4
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	4313      	orrs	r3, r2
 8008868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	685a      	ldr	r2, [r3, #4]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	621a      	str	r2, [r3, #32]
}
 8008884:	bf00      	nop
 8008886:	371c      	adds	r7, #28
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	40012c00 	.word	0x40012c00
 8008894:	40013400 	.word	0x40013400
 8008898:	40015000 	.word	0x40015000
 800889c:	40014000 	.word	0x40014000
 80088a0:	40014400 	.word	0x40014400
 80088a4:	40014800 	.word	0x40014800

080088a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b087      	sub	sp, #28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a1b      	ldr	r3, [r3, #32]
 80088bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	69db      	ldr	r3, [r3, #28]
 80088ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80088d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	021b      	lsls	r3, r3, #8
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80088f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	031b      	lsls	r3, r3, #12
 80088fe:	697a      	ldr	r2, [r7, #20]
 8008900:	4313      	orrs	r3, r2
 8008902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a2c      	ldr	r2, [pc, #176]	@ (80089b8 <TIM_OC4_SetConfig+0x110>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d007      	beq.n	800891c <TIM_OC4_SetConfig+0x74>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a2b      	ldr	r2, [pc, #172]	@ (80089bc <TIM_OC4_SetConfig+0x114>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d003      	beq.n	800891c <TIM_OC4_SetConfig+0x74>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a2a      	ldr	r2, [pc, #168]	@ (80089c0 <TIM_OC4_SetConfig+0x118>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d10d      	bne.n	8008938 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	031b      	lsls	r3, r3, #12
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	4313      	orrs	r3, r2
 800892e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008936:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a1f      	ldr	r2, [pc, #124]	@ (80089b8 <TIM_OC4_SetConfig+0x110>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d013      	beq.n	8008968 <TIM_OC4_SetConfig+0xc0>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a1e      	ldr	r2, [pc, #120]	@ (80089bc <TIM_OC4_SetConfig+0x114>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d00f      	beq.n	8008968 <TIM_OC4_SetConfig+0xc0>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a1e      	ldr	r2, [pc, #120]	@ (80089c4 <TIM_OC4_SetConfig+0x11c>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d00b      	beq.n	8008968 <TIM_OC4_SetConfig+0xc0>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a1d      	ldr	r2, [pc, #116]	@ (80089c8 <TIM_OC4_SetConfig+0x120>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d007      	beq.n	8008968 <TIM_OC4_SetConfig+0xc0>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a1c      	ldr	r2, [pc, #112]	@ (80089cc <TIM_OC4_SetConfig+0x124>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d003      	beq.n	8008968 <TIM_OC4_SetConfig+0xc0>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a17      	ldr	r2, [pc, #92]	@ (80089c0 <TIM_OC4_SetConfig+0x118>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d113      	bne.n	8008990 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800896e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008976:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	019b      	lsls	r3, r3, #6
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	4313      	orrs	r3, r2
 8008982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	019b      	lsls	r3, r3, #6
 800898a:	693a      	ldr	r2, [r7, #16]
 800898c:	4313      	orrs	r3, r2
 800898e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	697a      	ldr	r2, [r7, #20]
 80089a8:	621a      	str	r2, [r3, #32]
}
 80089aa:	bf00      	nop
 80089ac:	371c      	adds	r7, #28
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	40012c00 	.word	0x40012c00
 80089bc:	40013400 	.word	0x40013400
 80089c0:	40015000 	.word	0x40015000
 80089c4:	40014000 	.word	0x40014000
 80089c8:	40014400 	.word	0x40014400
 80089cc:	40014800 	.word	0x40014800

080089d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b087      	sub	sp, #28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a1b      	ldr	r3, [r3, #32]
 80089de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008a14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	041b      	lsls	r3, r3, #16
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a19      	ldr	r2, [pc, #100]	@ (8008a8c <TIM_OC5_SetConfig+0xbc>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d013      	beq.n	8008a52 <TIM_OC5_SetConfig+0x82>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a18      	ldr	r2, [pc, #96]	@ (8008a90 <TIM_OC5_SetConfig+0xc0>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d00f      	beq.n	8008a52 <TIM_OC5_SetConfig+0x82>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a17      	ldr	r2, [pc, #92]	@ (8008a94 <TIM_OC5_SetConfig+0xc4>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d00b      	beq.n	8008a52 <TIM_OC5_SetConfig+0x82>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a16      	ldr	r2, [pc, #88]	@ (8008a98 <TIM_OC5_SetConfig+0xc8>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d007      	beq.n	8008a52 <TIM_OC5_SetConfig+0x82>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a15      	ldr	r2, [pc, #84]	@ (8008a9c <TIM_OC5_SetConfig+0xcc>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d003      	beq.n	8008a52 <TIM_OC5_SetConfig+0x82>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a14      	ldr	r2, [pc, #80]	@ (8008aa0 <TIM_OC5_SetConfig+0xd0>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d109      	bne.n	8008a66 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	021b      	lsls	r3, r3, #8
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	621a      	str	r2, [r3, #32]
}
 8008a80:	bf00      	nop
 8008a82:	371c      	adds	r7, #28
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	40012c00 	.word	0x40012c00
 8008a90:	40013400 	.word	0x40013400
 8008a94:	40014000 	.word	0x40014000
 8008a98:	40014400 	.word	0x40014400
 8008a9c:	40014800 	.word	0x40014800
 8008aa0:	40015000 	.word	0x40015000

08008aa4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b087      	sub	sp, #28
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a1b      	ldr	r3, [r3, #32]
 8008ab8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	021b      	lsls	r3, r3, #8
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	051b      	lsls	r3, r3, #20
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a1a      	ldr	r2, [pc, #104]	@ (8008b64 <TIM_OC6_SetConfig+0xc0>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d013      	beq.n	8008b28 <TIM_OC6_SetConfig+0x84>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a19      	ldr	r2, [pc, #100]	@ (8008b68 <TIM_OC6_SetConfig+0xc4>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d00f      	beq.n	8008b28 <TIM_OC6_SetConfig+0x84>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a18      	ldr	r2, [pc, #96]	@ (8008b6c <TIM_OC6_SetConfig+0xc8>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d00b      	beq.n	8008b28 <TIM_OC6_SetConfig+0x84>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a17      	ldr	r2, [pc, #92]	@ (8008b70 <TIM_OC6_SetConfig+0xcc>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d007      	beq.n	8008b28 <TIM_OC6_SetConfig+0x84>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a16      	ldr	r2, [pc, #88]	@ (8008b74 <TIM_OC6_SetConfig+0xd0>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d003      	beq.n	8008b28 <TIM_OC6_SetConfig+0x84>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a15      	ldr	r2, [pc, #84]	@ (8008b78 <TIM_OC6_SetConfig+0xd4>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d109      	bne.n	8008b3c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	029b      	lsls	r3, r3, #10
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	693a      	ldr	r2, [r7, #16]
 8008b54:	621a      	str	r2, [r3, #32]
}
 8008b56:	bf00      	nop
 8008b58:	371c      	adds	r7, #28
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	40012c00 	.word	0x40012c00
 8008b68:	40013400 	.word	0x40013400
 8008b6c:	40014000 	.word	0x40014000
 8008b70:	40014400 	.word	0x40014400
 8008b74:	40014800 	.word	0x40014800
 8008b78:	40015000 	.word	0x40015000

08008b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b087      	sub	sp, #28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6a1b      	ldr	r3, [r3, #32]
 8008b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	f023 0201 	bic.w	r2, r3, #1
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	011b      	lsls	r3, r3, #4
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f023 030a 	bic.w	r3, r3, #10
 8008bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	621a      	str	r2, [r3, #32]
}
 8008bce:	bf00      	nop
 8008bd0:	371c      	adds	r7, #28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr

08008bda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bda:	b480      	push	{r7}
 8008bdc:	b087      	sub	sp, #28
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	60f8      	str	r0, [r7, #12]
 8008be2:	60b9      	str	r1, [r7, #8]
 8008be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6a1b      	ldr	r3, [r3, #32]
 8008bf0:	f023 0210 	bic.w	r2, r3, #16
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	699b      	ldr	r3, [r3, #24]
 8008bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	031b      	lsls	r3, r3, #12
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008c16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	011b      	lsls	r3, r3, #4
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	621a      	str	r2, [r3, #32]
}
 8008c2e:	bf00      	nop
 8008c30:	371c      	adds	r7, #28
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b085      	sub	sp, #20
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
 8008c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008c50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	f043 0307 	orr.w	r3, r3, #7
 8008c60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	609a      	str	r2, [r3, #8]
}
 8008c68:	bf00      	nop
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b087      	sub	sp, #28
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
 8008c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	021a      	lsls	r2, r3, #8
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	431a      	orrs	r2, r3
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	609a      	str	r2, [r3, #8]
}
 8008ca8:	bf00      	nop
 8008caa:	371c      	adds	r7, #28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	f003 031f 	and.w	r3, r3, #31
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ccc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6a1a      	ldr	r2, [r3, #32]
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	43db      	mvns	r3, r3
 8008cd6:	401a      	ands	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6a1a      	ldr	r2, [r3, #32]
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	f003 031f 	and.w	r3, r3, #31
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8008cec:	431a      	orrs	r2, r3
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	621a      	str	r2, [r3, #32]
}
 8008cf2:	bf00      	nop
 8008cf4:	371c      	adds	r7, #28
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
	...

08008d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d101      	bne.n	8008d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d14:	2302      	movs	r3, #2
 8008d16:	e074      	b.n	8008e02 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2202      	movs	r2, #2
 8008d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a34      	ldr	r2, [pc, #208]	@ (8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d009      	beq.n	8008d56 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a33      	ldr	r2, [pc, #204]	@ (8008e14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d004      	beq.n	8008d56 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a31      	ldr	r2, [pc, #196]	@ (8008e18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d108      	bne.n	8008d68 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008d5c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a21      	ldr	r2, [pc, #132]	@ (8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d022      	beq.n	8008dd6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d98:	d01d      	beq.n	8008dd6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8008e1c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d018      	beq.n	8008dd6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a1d      	ldr	r2, [pc, #116]	@ (8008e20 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d013      	beq.n	8008dd6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a1c      	ldr	r2, [pc, #112]	@ (8008e24 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d00e      	beq.n	8008dd6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a15      	ldr	r2, [pc, #84]	@ (8008e14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d009      	beq.n	8008dd6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a18      	ldr	r2, [pc, #96]	@ (8008e28 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d004      	beq.n	8008dd6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a11      	ldr	r2, [pc, #68]	@ (8008e18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d10c      	bne.n	8008df0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ddc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	40012c00 	.word	0x40012c00
 8008e14:	40013400 	.word	0x40013400
 8008e18:	40015000 	.word	0x40015000
 8008e1c:	40000400 	.word	0x40000400
 8008e20:	40000800 	.word	0x40000800
 8008e24:	40000c00 	.word	0x40000c00
 8008e28:	40014000 	.word	0x40014000

08008e2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d101      	bne.n	8008e48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e44:	2302      	movs	r3, #2
 8008e46:	e078      	b.n	8008f3a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	041b      	lsls	r3, r3, #16
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	69db      	ldr	r3, [r3, #28]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8008f48 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d009      	beq.n	8008eee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a1b      	ldr	r2, [pc, #108]	@ (8008f4c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d004      	beq.n	8008eee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a19      	ldr	r2, [pc, #100]	@ (8008f50 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d11c      	bne.n	8008f28 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef8:	051b      	lsls	r3, r3, #20
 8008efa:	4313      	orrs	r3, r2
 8008efc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	6a1b      	ldr	r3, [r3, #32]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f16:	4313      	orrs	r3, r2
 8008f18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f24:	4313      	orrs	r3, r2
 8008f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	40012c00 	.word	0x40012c00
 8008f4c:	40013400 	.word	0x40013400
 8008f50:	40015000 	.word	0x40015000

08008f54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f64:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008f68:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b085      	sub	sp, #20
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f8a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008f8e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	43db      	mvns	r3, r3
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	1d3b      	adds	r3, r7, #4
 8008fc2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b0a7      	sub	sp, #156	@ 0x9c
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	4413      	add	r3, r2
 800900e:	881b      	ldrh	r3, [r3, #0]
 8009010:	b29b      	uxth	r3, r3
 8009012:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8009016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800901a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	78db      	ldrb	r3, [r3, #3]
 8009022:	2b03      	cmp	r3, #3
 8009024:	d81f      	bhi.n	8009066 <USB_ActivateEndpoint+0x72>
 8009026:	a201      	add	r2, pc, #4	@ (adr r2, 800902c <USB_ActivateEndpoint+0x38>)
 8009028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800902c:	0800903d 	.word	0x0800903d
 8009030:	08009059 	.word	0x08009059
 8009034:	0800906f 	.word	0x0800906f
 8009038:	0800904b 	.word	0x0800904b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800903c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009040:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009044:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8009048:	e012      	b.n	8009070 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800904a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800904e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8009052:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8009056:	e00b      	b.n	8009070 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009058:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800905c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009060:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8009064:	e004      	b.n	8009070 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800906c:	e000      	b.n	8009070 <USB_ActivateEndpoint+0x7c>
      break;
 800906e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	441a      	add	r2, r3
 800907a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800907e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009082:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009086:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800908a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800908e:	b29b      	uxth	r3, r3
 8009090:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4413      	add	r3, r2
 800909c:	881b      	ldrh	r3, [r3, #0]
 800909e:	b29b      	uxth	r3, r3
 80090a0:	b21b      	sxth	r3, r3
 80090a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090aa:	b21a      	sxth	r2, r3
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	b21b      	sxth	r3, r3
 80090b2:	4313      	orrs	r3, r2
 80090b4:	b21b      	sxth	r3, r3
 80090b6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	441a      	add	r2, r3
 80090c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80090c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090d8:	b29b      	uxth	r3, r3
 80090da:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	7b1b      	ldrb	r3, [r3, #12]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f040 8180 	bne.w	80093e6 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	785b      	ldrb	r3, [r3, #1]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f000 8084 	beq.w	80091f8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	61bb      	str	r3, [r7, #24]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	461a      	mov	r2, r3
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	4413      	add	r3, r2
 8009102:	61bb      	str	r3, [r7, #24]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	00da      	lsls	r2, r3, #3
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	4413      	add	r3, r2
 800910e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009112:	617b      	str	r3, [r7, #20]
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	88db      	ldrh	r3, [r3, #6]
 8009118:	085b      	lsrs	r3, r3, #1
 800911a:	b29b      	uxth	r3, r3
 800911c:	005b      	lsls	r3, r3, #1
 800911e:	b29a      	uxth	r2, r3
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	4413      	add	r3, r2
 800912e:	881b      	ldrh	r3, [r3, #0]
 8009130:	827b      	strh	r3, [r7, #18]
 8009132:	8a7b      	ldrh	r3, [r7, #18]
 8009134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009138:	2b00      	cmp	r3, #0
 800913a:	d01b      	beq.n	8009174 <USB_ActivateEndpoint+0x180>
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	b29b      	uxth	r3, r3
 800914a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800914e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009152:	823b      	strh	r3, [r7, #16]
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	441a      	add	r2, r3
 800915e:	8a3b      	ldrh	r3, [r7, #16]
 8009160:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009164:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009168:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800916c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009170:	b29b      	uxth	r3, r3
 8009172:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	78db      	ldrb	r3, [r3, #3]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d020      	beq.n	80091be <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	881b      	ldrh	r3, [r3, #0]
 8009188:	b29b      	uxth	r3, r3
 800918a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800918e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009192:	81bb      	strh	r3, [r7, #12]
 8009194:	89bb      	ldrh	r3, [r7, #12]
 8009196:	f083 0320 	eor.w	r3, r3, #32
 800919a:	81bb      	strh	r3, [r7, #12]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	441a      	add	r2, r3
 80091a6:	89bb      	ldrh	r3, [r7, #12]
 80091a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	8013      	strh	r3, [r2, #0]
 80091bc:	e3f9      	b.n	80099b2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4413      	add	r3, r2
 80091c8:	881b      	ldrh	r3, [r3, #0]
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091d4:	81fb      	strh	r3, [r7, #14]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	441a      	add	r2, r3
 80091e0:	89fb      	ldrh	r3, [r7, #14]
 80091e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	8013      	strh	r3, [r2, #0]
 80091f6:	e3dc      	b.n	80099b2 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009202:	b29b      	uxth	r3, r3
 8009204:	461a      	mov	r2, r3
 8009206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009208:	4413      	add	r3, r2
 800920a:	633b      	str	r3, [r7, #48]	@ 0x30
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	00da      	lsls	r2, r3, #3
 8009212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009214:	4413      	add	r3, r2
 8009216:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800921a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	88db      	ldrh	r3, [r3, #6]
 8009220:	085b      	lsrs	r3, r3, #1
 8009222:	b29b      	uxth	r3, r3
 8009224:	005b      	lsls	r3, r3, #1
 8009226:	b29a      	uxth	r2, r3
 8009228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800922a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009236:	b29b      	uxth	r3, r3
 8009238:	461a      	mov	r2, r3
 800923a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923c:	4413      	add	r3, r2
 800923e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	00da      	lsls	r2, r3, #3
 8009246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009248:	4413      	add	r3, r2
 800924a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800924e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009252:	881b      	ldrh	r3, [r3, #0]
 8009254:	b29b      	uxth	r3, r3
 8009256:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800925a:	b29a      	uxth	r2, r3
 800925c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925e:	801a      	strh	r2, [r3, #0]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10a      	bne.n	800927e <USB_ActivateEndpoint+0x28a>
 8009268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926a:	881b      	ldrh	r3, [r3, #0]
 800926c:	b29b      	uxth	r3, r3
 800926e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009276:	b29a      	uxth	r2, r3
 8009278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927a:	801a      	strh	r2, [r3, #0]
 800927c:	e041      	b.n	8009302 <USB_ActivateEndpoint+0x30e>
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	2b3e      	cmp	r3, #62	@ 0x3e
 8009284:	d81c      	bhi.n	80092c0 <USB_ActivateEndpoint+0x2cc>
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	085b      	lsrs	r3, r3, #1
 800928c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	691b      	ldr	r3, [r3, #16]
 8009294:	f003 0301 	and.w	r3, r3, #1
 8009298:	2b00      	cmp	r3, #0
 800929a:	d004      	beq.n	80092a6 <USB_ActivateEndpoint+0x2b2>
 800929c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80092a0:	3301      	adds	r3, #1
 80092a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80092a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	029b      	lsls	r3, r3, #10
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	4313      	orrs	r3, r2
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092bc:	801a      	strh	r2, [r3, #0]
 80092be:	e020      	b.n	8009302 <USB_ActivateEndpoint+0x30e>
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	095b      	lsrs	r3, r3, #5
 80092c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	f003 031f 	and.w	r3, r3, #31
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d104      	bne.n	80092e0 <USB_ActivateEndpoint+0x2ec>
 80092d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80092da:	3b01      	subs	r3, #1
 80092dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80092e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e2:	881b      	ldrh	r3, [r3, #0]
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	029b      	lsls	r3, r3, #10
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	4313      	orrs	r3, r2
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009300:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	4413      	add	r3, r2
 800930c:	881b      	ldrh	r3, [r3, #0]
 800930e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009310:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009312:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009316:	2b00      	cmp	r3, #0
 8009318:	d01b      	beq.n	8009352 <USB_ActivateEndpoint+0x35e>
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	881b      	ldrh	r3, [r3, #0]
 8009326:	b29b      	uxth	r3, r3
 8009328:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800932c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009330:	843b      	strh	r3, [r7, #32]
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	441a      	add	r2, r3
 800933c:	8c3b      	ldrh	r3, [r7, #32]
 800933e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009342:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009346:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800934a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800934e:	b29b      	uxth	r3, r3
 8009350:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d124      	bne.n	80093a4 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	881b      	ldrh	r3, [r3, #0]
 8009366:	b29b      	uxth	r3, r3
 8009368:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800936c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009370:	83bb      	strh	r3, [r7, #28]
 8009372:	8bbb      	ldrh	r3, [r7, #28]
 8009374:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009378:	83bb      	strh	r3, [r7, #28]
 800937a:	8bbb      	ldrh	r3, [r7, #28]
 800937c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009380:	83bb      	strh	r3, [r7, #28]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	441a      	add	r2, r3
 800938c:	8bbb      	ldrh	r3, [r7, #28]
 800938e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009392:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800939a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800939e:	b29b      	uxth	r3, r3
 80093a0:	8013      	strh	r3, [r2, #0]
 80093a2:	e306      	b.n	80099b2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80093b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093ba:	83fb      	strh	r3, [r7, #30]
 80093bc:	8bfb      	ldrh	r3, [r7, #30]
 80093be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80093c2:	83fb      	strh	r3, [r7, #30]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	441a      	add	r2, r3
 80093ce:	8bfb      	ldrh	r3, [r7, #30]
 80093d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	8013      	strh	r3, [r2, #0]
 80093e4:	e2e5      	b.n	80099b2 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	78db      	ldrb	r3, [r3, #3]
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d11e      	bne.n	800942c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	881b      	ldrh	r3, [r3, #0]
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009404:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	441a      	add	r2, r3
 8009412:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8009416:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800941a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800941e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009426:	b29b      	uxth	r3, r3
 8009428:	8013      	strh	r3, [r2, #0]
 800942a:	e01d      	b.n	8009468 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	881b      	ldrh	r3, [r3, #0]
 8009438:	b29b      	uxth	r3, r3
 800943a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800943e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009442:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	441a      	add	r2, r3
 8009450:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8009454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800945c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009464:	b29b      	uxth	r3, r3
 8009466:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009472:	b29b      	uxth	r3, r3
 8009474:	461a      	mov	r2, r3
 8009476:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009478:	4413      	add	r3, r2
 800947a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	00da      	lsls	r2, r3, #3
 8009482:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009484:	4413      	add	r3, r2
 8009486:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800948a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	891b      	ldrh	r3, [r3, #8]
 8009490:	085b      	lsrs	r3, r3, #1
 8009492:	b29b      	uxth	r3, r3
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	b29a      	uxth	r2, r3
 8009498:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800949a:	801a      	strh	r2, [r3, #0]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	677b      	str	r3, [r7, #116]	@ 0x74
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	461a      	mov	r2, r3
 80094aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094ac:	4413      	add	r3, r2
 80094ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	00da      	lsls	r2, r3, #3
 80094b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094b8:	4413      	add	r3, r2
 80094ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80094be:	673b      	str	r3, [r7, #112]	@ 0x70
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	895b      	ldrh	r3, [r3, #10]
 80094c4:	085b      	lsrs	r3, r3, #1
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	005b      	lsls	r3, r3, #1
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80094ce:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	785b      	ldrb	r3, [r3, #1]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f040 81af 	bne.w	8009838 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	881b      	ldrh	r3, [r3, #0]
 80094e6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80094ea:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80094ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d01d      	beq.n	8009532 <USB_ActivateEndpoint+0x53e>
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	b29b      	uxth	r3, r3
 8009504:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009508:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800950c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	441a      	add	r2, r3
 800951a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800951e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009522:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009526:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800952a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800952e:	b29b      	uxth	r3, r3
 8009530:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	881b      	ldrh	r3, [r3, #0]
 800953e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8009542:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8009546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800954a:	2b00      	cmp	r3, #0
 800954c:	d01d      	beq.n	800958a <USB_ActivateEndpoint+0x596>
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4413      	add	r3, r2
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	b29b      	uxth	r3, r3
 800955c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009560:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009564:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	441a      	add	r2, r3
 8009572:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8009576:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800957a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800957e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009582:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009586:	b29b      	uxth	r3, r3
 8009588:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	785b      	ldrb	r3, [r3, #1]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d16b      	bne.n	800966a <USB_ActivateEndpoint+0x676>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800959c:	b29b      	uxth	r3, r3
 800959e:	461a      	mov	r2, r3
 80095a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095a2:	4413      	add	r3, r2
 80095a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	00da      	lsls	r2, r3, #3
 80095ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095ae:	4413      	add	r3, r2
 80095b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80095b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095b8:	881b      	ldrh	r3, [r3, #0]
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095c4:	801a      	strh	r2, [r3, #0]
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10a      	bne.n	80095e4 <USB_ActivateEndpoint+0x5f0>
 80095ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095dc:	b29a      	uxth	r2, r3
 80095de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095e0:	801a      	strh	r2, [r3, #0]
 80095e2:	e05d      	b.n	80096a0 <USB_ActivateEndpoint+0x6ac>
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80095ea:	d81c      	bhi.n	8009626 <USB_ActivateEndpoint+0x632>
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	085b      	lsrs	r3, r3, #1
 80095f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	f003 0301 	and.w	r3, r3, #1
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d004      	beq.n	800960c <USB_ActivateEndpoint+0x618>
 8009602:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009606:	3301      	adds	r3, #1
 8009608:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800960c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800960e:	881b      	ldrh	r3, [r3, #0]
 8009610:	b29a      	uxth	r2, r3
 8009612:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009616:	b29b      	uxth	r3, r3
 8009618:	029b      	lsls	r3, r3, #10
 800961a:	b29b      	uxth	r3, r3
 800961c:	4313      	orrs	r3, r2
 800961e:	b29a      	uxth	r2, r3
 8009620:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009622:	801a      	strh	r2, [r3, #0]
 8009624:	e03c      	b.n	80096a0 <USB_ActivateEndpoint+0x6ac>
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	095b      	lsrs	r3, r3, #5
 800962c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	f003 031f 	and.w	r3, r3, #31
 8009638:	2b00      	cmp	r3, #0
 800963a:	d104      	bne.n	8009646 <USB_ActivateEndpoint+0x652>
 800963c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009640:	3b01      	subs	r3, #1
 8009642:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009646:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009648:	881b      	ldrh	r3, [r3, #0]
 800964a:	b29a      	uxth	r2, r3
 800964c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009650:	b29b      	uxth	r3, r3
 8009652:	029b      	lsls	r3, r3, #10
 8009654:	b29b      	uxth	r3, r3
 8009656:	4313      	orrs	r3, r2
 8009658:	b29b      	uxth	r3, r3
 800965a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800965e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009662:	b29a      	uxth	r2, r3
 8009664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009666:	801a      	strh	r2, [r3, #0]
 8009668:	e01a      	b.n	80096a0 <USB_ActivateEndpoint+0x6ac>
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	785b      	ldrb	r3, [r3, #1]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d116      	bne.n	80096a0 <USB_ActivateEndpoint+0x6ac>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	657b      	str	r3, [r7, #84]	@ 0x54
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800967c:	b29b      	uxth	r3, r3
 800967e:	461a      	mov	r2, r3
 8009680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009682:	4413      	add	r3, r2
 8009684:	657b      	str	r3, [r7, #84]	@ 0x54
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	00da      	lsls	r2, r3, #3
 800968c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800968e:	4413      	add	r3, r2
 8009690:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009694:	653b      	str	r3, [r7, #80]	@ 0x50
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	b29a      	uxth	r2, r3
 800969c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800969e:	801a      	strh	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	785b      	ldrb	r3, [r3, #1]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d16b      	bne.n	8009784 <USB_ActivateEndpoint+0x790>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	461a      	mov	r2, r3
 80096ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096bc:	4413      	add	r3, r2
 80096be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	00da      	lsls	r2, r3, #3
 80096c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096c8:	4413      	add	r3, r2
 80096ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80096ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80096d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d2:	881b      	ldrh	r3, [r3, #0]
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096da:	b29a      	uxth	r2, r3
 80096dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096de:	801a      	strh	r2, [r3, #0]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10a      	bne.n	80096fe <USB_ActivateEndpoint+0x70a>
 80096e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fa:	801a      	strh	r2, [r3, #0]
 80096fc:	e05b      	b.n	80097b6 <USB_ActivateEndpoint+0x7c2>
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	2b3e      	cmp	r3, #62	@ 0x3e
 8009704:	d81c      	bhi.n	8009740 <USB_ActivateEndpoint+0x74c>
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	085b      	lsrs	r3, r3, #1
 800970c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	f003 0301 	and.w	r3, r3, #1
 8009718:	2b00      	cmp	r3, #0
 800971a:	d004      	beq.n	8009726 <USB_ActivateEndpoint+0x732>
 800971c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009720:	3301      	adds	r3, #1
 8009722:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009728:	881b      	ldrh	r3, [r3, #0]
 800972a:	b29a      	uxth	r2, r3
 800972c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009730:	b29b      	uxth	r3, r3
 8009732:	029b      	lsls	r3, r3, #10
 8009734:	b29b      	uxth	r3, r3
 8009736:	4313      	orrs	r3, r2
 8009738:	b29a      	uxth	r2, r3
 800973a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800973c:	801a      	strh	r2, [r3, #0]
 800973e:	e03a      	b.n	80097b6 <USB_ActivateEndpoint+0x7c2>
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	095b      	lsrs	r3, r3, #5
 8009746:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	f003 031f 	and.w	r3, r3, #31
 8009752:	2b00      	cmp	r3, #0
 8009754:	d104      	bne.n	8009760 <USB_ActivateEndpoint+0x76c>
 8009756:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800975a:	3b01      	subs	r3, #1
 800975c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009762:	881b      	ldrh	r3, [r3, #0]
 8009764:	b29a      	uxth	r2, r3
 8009766:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800976a:	b29b      	uxth	r3, r3
 800976c:	029b      	lsls	r3, r3, #10
 800976e:	b29b      	uxth	r3, r3
 8009770:	4313      	orrs	r3, r2
 8009772:	b29b      	uxth	r3, r3
 8009774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800977c:	b29a      	uxth	r2, r3
 800977e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009780:	801a      	strh	r2, [r3, #0]
 8009782:	e018      	b.n	80097b6 <USB_ActivateEndpoint+0x7c2>
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	785b      	ldrb	r3, [r3, #1]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d114      	bne.n	80097b6 <USB_ActivateEndpoint+0x7c2>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009792:	b29b      	uxth	r3, r3
 8009794:	461a      	mov	r2, r3
 8009796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009798:	4413      	add	r3, r2
 800979a:	647b      	str	r3, [r7, #68]	@ 0x44
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	00da      	lsls	r2, r3, #3
 80097a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097a4:	4413      	add	r3, r2
 80097a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80097aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097b4:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	881b      	ldrh	r3, [r3, #0]
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80097ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80097d0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80097d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80097d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80097d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80097dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	441a      	add	r2, r3
 80097e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80097ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	881b      	ldrh	r3, [r3, #0]
 800980a:	b29b      	uxth	r3, r3
 800980c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009810:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009814:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	441a      	add	r2, r3
 8009820:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009822:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009826:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800982a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800982e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009832:	b29b      	uxth	r3, r3
 8009834:	8013      	strh	r3, [r2, #0]
 8009836:	e0bc      	b.n	80099b2 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	881b      	ldrh	r3, [r3, #0]
 8009844:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8009848:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800984c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009850:	2b00      	cmp	r3, #0
 8009852:	d01d      	beq.n	8009890 <USB_ActivateEndpoint+0x89c>
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4413      	add	r3, r2
 800985e:	881b      	ldrh	r3, [r3, #0]
 8009860:	b29b      	uxth	r3, r3
 8009862:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800986a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	441a      	add	r2, r3
 8009878:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800987c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009880:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009884:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800988c:	b29b      	uxth	r3, r3
 800988e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4413      	add	r3, r2
 800989a:	881b      	ldrh	r3, [r3, #0]
 800989c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80098a0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80098a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d01d      	beq.n	80098e8 <USB_ActivateEndpoint+0x8f4>
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	881b      	ldrh	r3, [r3, #0]
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098c2:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	441a      	add	r2, r3
 80098d0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80098d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	78db      	ldrb	r3, [r3, #3]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d024      	beq.n	800993a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009906:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800990a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800990e:	f083 0320 	eor.w	r3, r3, #32
 8009912:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	441a      	add	r2, r3
 8009920:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009924:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009928:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800992c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009934:	b29b      	uxth	r3, r3
 8009936:	8013      	strh	r3, [r2, #0]
 8009938:	e01d      	b.n	8009976 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	b29b      	uxth	r3, r3
 8009948:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800994c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009950:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	441a      	add	r2, r3
 800995e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009962:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009966:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800996a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800996e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009972:	b29b      	uxth	r3, r3
 8009974:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4413      	add	r3, r2
 8009980:	881b      	ldrh	r3, [r3, #0]
 8009982:	b29b      	uxth	r3, r3
 8009984:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009988:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800998c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	441a      	add	r2, r3
 800999a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800999e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80099b2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	379c      	adds	r7, #156	@ 0x9c
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop

080099c4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b08d      	sub	sp, #52	@ 0x34
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	7b1b      	ldrb	r3, [r3, #12]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f040 808e 	bne.w	8009af4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	785b      	ldrb	r3, [r3, #1]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d044      	beq.n	8009a6a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4413      	add	r3, r2
 80099ea:	881b      	ldrh	r3, [r3, #0]
 80099ec:	81bb      	strh	r3, [r7, #12]
 80099ee:	89bb      	ldrh	r3, [r7, #12]
 80099f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d01b      	beq.n	8009a30 <USB_DeactivateEndpoint+0x6c>
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4413      	add	r3, r2
 8009a02:	881b      	ldrh	r3, [r3, #0]
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a0e:	817b      	strh	r3, [r7, #10]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	441a      	add	r2, r3
 8009a1a:	897b      	ldrh	r3, [r7, #10]
 8009a1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	881b      	ldrh	r3, [r3, #0]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a46:	813b      	strh	r3, [r7, #8]
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	441a      	add	r2, r3
 8009a52:	893b      	ldrh	r3, [r7, #8]
 8009a54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	8013      	strh	r3, [r2, #0]
 8009a68:	e192      	b.n	8009d90 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4413      	add	r3, r2
 8009a74:	881b      	ldrh	r3, [r3, #0]
 8009a76:	827b      	strh	r3, [r7, #18]
 8009a78:	8a7b      	ldrh	r3, [r7, #18]
 8009a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d01b      	beq.n	8009aba <USB_DeactivateEndpoint+0xf6>
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	4413      	add	r3, r2
 8009a8c:	881b      	ldrh	r3, [r3, #0]
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a98:	823b      	strh	r3, [r7, #16]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	441a      	add	r2, r3
 8009aa4:	8a3b      	ldrh	r3, [r7, #16]
 8009aa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009aaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009aae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ad0:	81fb      	strh	r3, [r7, #14]
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	441a      	add	r2, r3
 8009adc:	89fb      	ldrh	r3, [r7, #14]
 8009ade:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ae2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	8013      	strh	r3, [r2, #0]
 8009af2:	e14d      	b.n	8009d90 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	785b      	ldrb	r3, [r3, #1]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f040 80a5 	bne.w	8009c48 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4413      	add	r3, r2
 8009b08:	881b      	ldrh	r3, [r3, #0]
 8009b0a:	843b      	strh	r3, [r7, #32]
 8009b0c:	8c3b      	ldrh	r3, [r7, #32]
 8009b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d01b      	beq.n	8009b4e <USB_DeactivateEndpoint+0x18a>
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	4413      	add	r3, r2
 8009b20:	881b      	ldrh	r3, [r3, #0]
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b2c:	83fb      	strh	r3, [r7, #30]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	441a      	add	r2, r3
 8009b38:	8bfb      	ldrh	r3, [r7, #30]
 8009b3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	881b      	ldrh	r3, [r3, #0]
 8009b5a:	83bb      	strh	r3, [r7, #28]
 8009b5c:	8bbb      	ldrh	r3, [r7, #28]
 8009b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d01b      	beq.n	8009b9e <USB_DeactivateEndpoint+0x1da>
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	4413      	add	r3, r2
 8009b70:	881b      	ldrh	r3, [r3, #0]
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b7c:	837b      	strh	r3, [r7, #26]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	441a      	add	r2, r3
 8009b88:	8b7b      	ldrh	r3, [r7, #26]
 8009b8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	4413      	add	r3, r2
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bb4:	833b      	strh	r3, [r7, #24]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	441a      	add	r2, r3
 8009bc0:	8b3b      	ldrh	r3, [r7, #24]
 8009bc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	881b      	ldrh	r3, [r3, #0]
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009be8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bec:	82fb      	strh	r3, [r7, #22]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	441a      	add	r2, r3
 8009bf8:	8afb      	ldrh	r3, [r7, #22]
 8009bfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	4413      	add	r3, r2
 8009c18:	881b      	ldrh	r3, [r3, #0]
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c24:	82bb      	strh	r3, [r7, #20]
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	441a      	add	r2, r3
 8009c30:	8abb      	ldrh	r3, [r7, #20]
 8009c32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	8013      	strh	r3, [r2, #0]
 8009c46:	e0a3      	b.n	8009d90 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	881b      	ldrh	r3, [r3, #0]
 8009c54:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009c56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009c58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d01b      	beq.n	8009c98 <USB_DeactivateEndpoint+0x2d4>
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4413      	add	r3, r2
 8009c6a:	881b      	ldrh	r3, [r3, #0]
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c76:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	441a      	add	r2, r3
 8009c82:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009c84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4413      	add	r3, r2
 8009ca2:	881b      	ldrh	r3, [r3, #0]
 8009ca4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009ca6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d01b      	beq.n	8009ce8 <USB_DeactivateEndpoint+0x324>
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4413      	add	r3, r2
 8009cba:	881b      	ldrh	r3, [r3, #0]
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cc6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	441a      	add	r2, r3
 8009cd2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009cd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ce0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	4413      	add	r3, r2
 8009cf2:	881b      	ldrh	r3, [r3, #0]
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cfe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	441a      	add	r2, r3
 8009d0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009d0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4413      	add	r3, r2
 8009d2a:	881b      	ldrh	r3, [r3, #0]
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d36:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	441a      	add	r2, r3
 8009d42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009d44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	4413      	add	r3, r2
 8009d62:	881b      	ldrh	r3, [r3, #0]
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d6e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	441a      	add	r2, r3
 8009d7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3734      	adds	r7, #52	@ 0x34
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b0ac      	sub	sp, #176	@ 0xb0
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	785b      	ldrb	r3, [r3, #1]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	f040 84ca 	bne.w	800a746 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	699a      	ldr	r2, [r3, #24]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d904      	bls.n	8009dc8 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009dc6:	e003      	b.n	8009dd0 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	699b      	ldr	r3, [r3, #24]
 8009dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	7b1b      	ldrb	r3, [r3, #12]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d122      	bne.n	8009e1e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	6959      	ldr	r1, [r3, #20]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	88da      	ldrh	r2, [r3, #6]
 8009de0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 febd 	bl	800ab66 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	613b      	str	r3, [r7, #16]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	461a      	mov	r2, r3
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	613b      	str	r3, [r7, #16]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	00da      	lsls	r2, r3, #3
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	4413      	add	r3, r2
 8009e0a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009e0e:	60fb      	str	r3, [r7, #12]
 8009e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	801a      	strh	r2, [r3, #0]
 8009e1a:	f000 bc6f 	b.w	800a6fc <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	78db      	ldrb	r3, [r3, #3]
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	f040 831e 	bne.w	800a464 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	6a1a      	ldr	r2, [r3, #32]
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	f240 82cf 	bls.w	800a3d4 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	4413      	add	r3, r2
 8009e40:	881b      	ldrh	r3, [r3, #0]
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e4c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	441a      	add	r2, r3
 8009e5a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009e5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e66:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	6a1a      	ldr	r2, [r3, #32]
 8009e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e7a:	1ad2      	subs	r2, r2, r3
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4413      	add	r3, r2
 8009e8a:	881b      	ldrh	r3, [r3, #0]
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f000 814f 	beq.w	800a136 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	785b      	ldrb	r3, [r3, #1]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d16b      	bne.n	8009f7c <USB_EPStartXfer+0x1de>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb4:	4413      	add	r3, r2
 8009eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	00da      	lsls	r2, r3, #3
 8009ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec0:	4413      	add	r3, r2
 8009ec2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eca:	881b      	ldrh	r3, [r3, #0]
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed6:	801a      	strh	r2, [r3, #0]
 8009ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10a      	bne.n	8009ef6 <USB_EPStartXfer+0x158>
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee2:	881b      	ldrh	r3, [r3, #0]
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef2:	801a      	strh	r2, [r3, #0]
 8009ef4:	e05b      	b.n	8009fae <USB_EPStartXfer+0x210>
 8009ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009efa:	2b3e      	cmp	r3, #62	@ 0x3e
 8009efc:	d81c      	bhi.n	8009f38 <USB_EPStartXfer+0x19a>
 8009efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f02:	085b      	lsrs	r3, r3, #1
 8009f04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f0c:	f003 0301 	and.w	r3, r3, #1
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d004      	beq.n	8009f1e <USB_EPStartXfer+0x180>
 8009f14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f18:	3301      	adds	r3, #1
 8009f1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f20:	881b      	ldrh	r3, [r3, #0]
 8009f22:	b29a      	uxth	r2, r3
 8009f24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	029b      	lsls	r3, r3, #10
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	b29a      	uxth	r2, r3
 8009f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f34:	801a      	strh	r2, [r3, #0]
 8009f36:	e03a      	b.n	8009fae <USB_EPStartXfer+0x210>
 8009f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f3c:	095b      	lsrs	r3, r3, #5
 8009f3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f46:	f003 031f 	and.w	r3, r3, #31
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d104      	bne.n	8009f58 <USB_EPStartXfer+0x1ba>
 8009f4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f52:	3b01      	subs	r3, #1
 8009f54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f5a:	881b      	ldrh	r3, [r3, #0]
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	029b      	lsls	r3, r3, #10
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f78:	801a      	strh	r2, [r3, #0]
 8009f7a:	e018      	b.n	8009fae <USB_EPStartXfer+0x210>
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	785b      	ldrb	r3, [r3, #1]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d114      	bne.n	8009fae <USB_EPStartXfer+0x210>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f90:	4413      	add	r3, r2
 8009f92:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	00da      	lsls	r2, r3, #3
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f9c:	4413      	add	r3, r2
 8009f9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	895b      	ldrh	r3, [r3, #10]
 8009fb2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	6959      	ldr	r1, [r3, #20]
 8009fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fdce 	bl	800ab66 <USB_WritePMA>
            ep->xfer_buff += len;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	695a      	ldr	r2, [r3, #20]
 8009fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fd2:	441a      	add	r2, r3
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	6a1a      	ldr	r2, [r3, #32]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d907      	bls.n	8009ff4 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	6a1a      	ldr	r2, [r3, #32]
 8009fe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fec:	1ad2      	subs	r2, r2, r3
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	621a      	str	r2, [r3, #32]
 8009ff2:	e006      	b.n	800a002 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	6a1b      	ldr	r3, [r3, #32]
 8009ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	2200      	movs	r2, #0
 800a000:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	785b      	ldrb	r3, [r3, #1]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d16b      	bne.n	800a0e2 <USB_EPStartXfer+0x344>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	61bb      	str	r3, [r7, #24]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a014:	b29b      	uxth	r3, r3
 800a016:	461a      	mov	r2, r3
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	4413      	add	r3, r2
 800a01c:	61bb      	str	r3, [r7, #24]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	00da      	lsls	r2, r3, #3
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	4413      	add	r3, r2
 800a028:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a02c:	617b      	str	r3, [r7, #20]
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	881b      	ldrh	r3, [r3, #0]
 800a032:	b29b      	uxth	r3, r3
 800a034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a038:	b29a      	uxth	r2, r3
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	801a      	strh	r2, [r3, #0]
 800a03e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10a      	bne.n	800a05c <USB_EPStartXfer+0x2be>
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a054:	b29a      	uxth	r2, r3
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	801a      	strh	r2, [r3, #0]
 800a05a:	e05d      	b.n	800a118 <USB_EPStartXfer+0x37a>
 800a05c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a060:	2b3e      	cmp	r3, #62	@ 0x3e
 800a062:	d81c      	bhi.n	800a09e <USB_EPStartXfer+0x300>
 800a064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a068:	085b      	lsrs	r3, r3, #1
 800a06a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a06e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	d004      	beq.n	800a084 <USB_EPStartXfer+0x2e6>
 800a07a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a07e:	3301      	adds	r3, #1
 800a080:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	881b      	ldrh	r3, [r3, #0]
 800a088:	b29a      	uxth	r2, r3
 800a08a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a08e:	b29b      	uxth	r3, r3
 800a090:	029b      	lsls	r3, r3, #10
 800a092:	b29b      	uxth	r3, r3
 800a094:	4313      	orrs	r3, r2
 800a096:	b29a      	uxth	r2, r3
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	801a      	strh	r2, [r3, #0]
 800a09c:	e03c      	b.n	800a118 <USB_EPStartXfer+0x37a>
 800a09e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0a2:	095b      	lsrs	r3, r3, #5
 800a0a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a0a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0ac:	f003 031f 	and.w	r3, r3, #31
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d104      	bne.n	800a0be <USB_EPStartXfer+0x320>
 800a0b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	881b      	ldrh	r3, [r3, #0]
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	029b      	lsls	r3, r3, #10
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0da:	b29a      	uxth	r2, r3
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	801a      	strh	r2, [r3, #0]
 800a0e0:	e01a      	b.n	800a118 <USB_EPStartXfer+0x37a>
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	785b      	ldrb	r3, [r3, #1]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d116      	bne.n	800a118 <USB_EPStartXfer+0x37a>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	623b      	str	r3, [r7, #32]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	6a3b      	ldr	r3, [r7, #32]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	623b      	str	r3, [r7, #32]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	00da      	lsls	r2, r3, #3
 800a104:	6a3b      	ldr	r3, [r7, #32]
 800a106:	4413      	add	r3, r2
 800a108:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a10c:	61fb      	str	r3, [r7, #28]
 800a10e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a112:	b29a      	uxth	r2, r3
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	891b      	ldrh	r3, [r3, #8]
 800a11c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	6959      	ldr	r1, [r3, #20]
 800a124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a128:	b29b      	uxth	r3, r3
 800a12a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fd19 	bl	800ab66 <USB_WritePMA>
 800a134:	e2e2      	b.n	800a6fc <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	785b      	ldrb	r3, [r3, #1]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d16b      	bne.n	800a216 <USB_EPStartXfer+0x478>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a148:	b29b      	uxth	r3, r3
 800a14a:	461a      	mov	r2, r3
 800a14c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a14e:	4413      	add	r3, r2
 800a150:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	00da      	lsls	r2, r3, #3
 800a158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a15a:	4413      	add	r3, r2
 800a15c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a160:	647b      	str	r3, [r7, #68]	@ 0x44
 800a162:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a164:	881b      	ldrh	r3, [r3, #0]
 800a166:	b29b      	uxth	r3, r3
 800a168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a170:	801a      	strh	r2, [r3, #0]
 800a172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a176:	2b00      	cmp	r3, #0
 800a178:	d10a      	bne.n	800a190 <USB_EPStartXfer+0x3f2>
 800a17a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a17c:	881b      	ldrh	r3, [r3, #0]
 800a17e:	b29b      	uxth	r3, r3
 800a180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a188:	b29a      	uxth	r2, r3
 800a18a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a18c:	801a      	strh	r2, [r3, #0]
 800a18e:	e05d      	b.n	800a24c <USB_EPStartXfer+0x4ae>
 800a190:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a194:	2b3e      	cmp	r3, #62	@ 0x3e
 800a196:	d81c      	bhi.n	800a1d2 <USB_EPStartXfer+0x434>
 800a198:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a19c:	085b      	lsrs	r3, r3, #1
 800a19e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a1a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1a6:	f003 0301 	and.w	r3, r3, #1
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d004      	beq.n	800a1b8 <USB_EPStartXfer+0x41a>
 800a1ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a1b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1ba:	881b      	ldrh	r3, [r3, #0]
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	029b      	lsls	r3, r3, #10
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1ce:	801a      	strh	r2, [r3, #0]
 800a1d0:	e03c      	b.n	800a24c <USB_EPStartXfer+0x4ae>
 800a1d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1d6:	095b      	lsrs	r3, r3, #5
 800a1d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a1dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1e0:	f003 031f 	and.w	r3, r3, #31
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d104      	bne.n	800a1f2 <USB_EPStartXfer+0x454>
 800a1e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a1f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1f4:	881b      	ldrh	r3, [r3, #0]
 800a1f6:	b29a      	uxth	r2, r3
 800a1f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	029b      	lsls	r3, r3, #10
 800a200:	b29b      	uxth	r3, r3
 800a202:	4313      	orrs	r3, r2
 800a204:	b29b      	uxth	r3, r3
 800a206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a20a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a20e:	b29a      	uxth	r2, r3
 800a210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a212:	801a      	strh	r2, [r3, #0]
 800a214:	e01a      	b.n	800a24c <USB_EPStartXfer+0x4ae>
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	785b      	ldrb	r3, [r3, #1]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d116      	bne.n	800a24c <USB_EPStartXfer+0x4ae>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	653b      	str	r3, [r7, #80]	@ 0x50
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a228:	b29b      	uxth	r3, r3
 800a22a:	461a      	mov	r2, r3
 800a22c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a22e:	4413      	add	r3, r2
 800a230:	653b      	str	r3, [r7, #80]	@ 0x50
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	00da      	lsls	r2, r3, #3
 800a238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a23a:	4413      	add	r3, r2
 800a23c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a240:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a246:	b29a      	uxth	r2, r3
 800a248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a24a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	891b      	ldrh	r3, [r3, #8]
 800a250:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	6959      	ldr	r1, [r3, #20]
 800a258:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 fc7f 	bl	800ab66 <USB_WritePMA>
            ep->xfer_buff += len;
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	695a      	ldr	r2, [r3, #20]
 800a26c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a270:	441a      	add	r2, r3
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	6a1a      	ldr	r2, [r3, #32]
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d907      	bls.n	800a292 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	6a1a      	ldr	r2, [r3, #32]
 800a286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a28a:	1ad2      	subs	r2, r2, r3
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	621a      	str	r2, [r3, #32]
 800a290:	e006      	b.n	800a2a0 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	2200      	movs	r2, #0
 800a29e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	785b      	ldrb	r3, [r3, #1]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d16b      	bne.n	800a384 <USB_EPStartXfer+0x5e6>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2bc:	4413      	add	r3, r2
 800a2be:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	00da      	lsls	r2, r3, #3
 800a2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c8:	4413      	add	r3, r2
 800a2ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a2ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2d2:	881b      	ldrh	r3, [r3, #0]
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2da:	b29a      	uxth	r2, r3
 800a2dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2de:	801a      	strh	r2, [r3, #0]
 800a2e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10a      	bne.n	800a2fe <USB_EPStartXfer+0x560>
 800a2e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ea:	881b      	ldrh	r3, [r3, #0]
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2fa:	801a      	strh	r2, [r3, #0]
 800a2fc:	e05b      	b.n	800a3b6 <USB_EPStartXfer+0x618>
 800a2fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a302:	2b3e      	cmp	r3, #62	@ 0x3e
 800a304:	d81c      	bhi.n	800a340 <USB_EPStartXfer+0x5a2>
 800a306:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a30a:	085b      	lsrs	r3, r3, #1
 800a30c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a314:	f003 0301 	and.w	r3, r3, #1
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d004      	beq.n	800a326 <USB_EPStartXfer+0x588>
 800a31c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a320:	3301      	adds	r3, #1
 800a322:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a328:	881b      	ldrh	r3, [r3, #0]
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a330:	b29b      	uxth	r3, r3
 800a332:	029b      	lsls	r3, r3, #10
 800a334:	b29b      	uxth	r3, r3
 800a336:	4313      	orrs	r3, r2
 800a338:	b29a      	uxth	r2, r3
 800a33a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a33c:	801a      	strh	r2, [r3, #0]
 800a33e:	e03a      	b.n	800a3b6 <USB_EPStartXfer+0x618>
 800a340:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a344:	095b      	lsrs	r3, r3, #5
 800a346:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a34a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a34e:	f003 031f 	and.w	r3, r3, #31
 800a352:	2b00      	cmp	r3, #0
 800a354:	d104      	bne.n	800a360 <USB_EPStartXfer+0x5c2>
 800a356:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a35a:	3b01      	subs	r3, #1
 800a35c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a362:	881b      	ldrh	r3, [r3, #0]
 800a364:	b29a      	uxth	r2, r3
 800a366:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	029b      	lsls	r3, r3, #10
 800a36e:	b29b      	uxth	r3, r3
 800a370:	4313      	orrs	r3, r2
 800a372:	b29b      	uxth	r3, r3
 800a374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a380:	801a      	strh	r2, [r3, #0]
 800a382:	e018      	b.n	800a3b6 <USB_EPStartXfer+0x618>
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	785b      	ldrb	r3, [r3, #1]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d114      	bne.n	800a3b6 <USB_EPStartXfer+0x618>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a392:	b29b      	uxth	r3, r3
 800a394:	461a      	mov	r2, r3
 800a396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a398:	4413      	add	r3, r2
 800a39a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	00da      	lsls	r2, r3, #3
 800a3a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3a4:	4413      	add	r3, r2
 800a3a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	895b      	ldrh	r3, [r3, #10]
 800a3ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	6959      	ldr	r1, [r3, #20]
 800a3c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 fbca 	bl	800ab66 <USB_WritePMA>
 800a3d2:	e193      	b.n	800a6fc <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	6a1b      	ldr	r3, [r3, #32]
 800a3d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	4413      	add	r3, r2
 800a3e6:	881b      	ldrh	r3, [r3, #0]
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a3ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3f2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	441a      	add	r2, r3
 800a400:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a404:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a408:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a40c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a414:	b29b      	uxth	r3, r3
 800a416:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a422:	b29b      	uxth	r3, r3
 800a424:	461a      	mov	r2, r3
 800a426:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a428:	4413      	add	r3, r2
 800a42a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	00da      	lsls	r2, r3, #3
 800a432:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a434:	4413      	add	r3, r2
 800a436:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a43a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a43c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a440:	b29a      	uxth	r2, r3
 800a442:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a444:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	891b      	ldrh	r3, [r3, #8]
 800a44a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	6959      	ldr	r1, [r3, #20]
 800a452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a456:	b29b      	uxth	r3, r3
 800a458:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 fb82 	bl	800ab66 <USB_WritePMA>
 800a462:	e14b      	b.n	800a6fc <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	6a1a      	ldr	r2, [r3, #32]
 800a468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a46c:	1ad2      	subs	r2, r2, r3
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	4413      	add	r3, r2
 800a47c:	881b      	ldrh	r3, [r3, #0]
 800a47e:	b29b      	uxth	r3, r3
 800a480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a484:	2b00      	cmp	r3, #0
 800a486:	f000 809a 	beq.w	800a5be <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	673b      	str	r3, [r7, #112]	@ 0x70
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	785b      	ldrb	r3, [r3, #1]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d16b      	bne.n	800a56e <USB_EPStartXfer+0x7d0>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4a6:	4413      	add	r3, r2
 800a4a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	00da      	lsls	r2, r3, #3
 800a4b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a4b8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a4ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4c4:	b29a      	uxth	r2, r3
 800a4c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4c8:	801a      	strh	r2, [r3, #0]
 800a4ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d10a      	bne.n	800a4e8 <USB_EPStartXfer+0x74a>
 800a4d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4d4:	881b      	ldrh	r3, [r3, #0]
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4e4:	801a      	strh	r2, [r3, #0]
 800a4e6:	e05b      	b.n	800a5a0 <USB_EPStartXfer+0x802>
 800a4e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4ec:	2b3e      	cmp	r3, #62	@ 0x3e
 800a4ee:	d81c      	bhi.n	800a52a <USB_EPStartXfer+0x78c>
 800a4f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4f4:	085b      	lsrs	r3, r3, #1
 800a4f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a4fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4fe:	f003 0301 	and.w	r3, r3, #1
 800a502:	2b00      	cmp	r3, #0
 800a504:	d004      	beq.n	800a510 <USB_EPStartXfer+0x772>
 800a506:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a50a:	3301      	adds	r3, #1
 800a50c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a510:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a512:	881b      	ldrh	r3, [r3, #0]
 800a514:	b29a      	uxth	r2, r3
 800a516:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	029b      	lsls	r3, r3, #10
 800a51e:	b29b      	uxth	r3, r3
 800a520:	4313      	orrs	r3, r2
 800a522:	b29a      	uxth	r2, r3
 800a524:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a526:	801a      	strh	r2, [r3, #0]
 800a528:	e03a      	b.n	800a5a0 <USB_EPStartXfer+0x802>
 800a52a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a52e:	095b      	lsrs	r3, r3, #5
 800a530:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a538:	f003 031f 	and.w	r3, r3, #31
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d104      	bne.n	800a54a <USB_EPStartXfer+0x7ac>
 800a540:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a544:	3b01      	subs	r3, #1
 800a546:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a54a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a54c:	881b      	ldrh	r3, [r3, #0]
 800a54e:	b29a      	uxth	r2, r3
 800a550:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a554:	b29b      	uxth	r3, r3
 800a556:	029b      	lsls	r3, r3, #10
 800a558:	b29b      	uxth	r3, r3
 800a55a:	4313      	orrs	r3, r2
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a566:	b29a      	uxth	r2, r3
 800a568:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a56a:	801a      	strh	r2, [r3, #0]
 800a56c:	e018      	b.n	800a5a0 <USB_EPStartXfer+0x802>
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	785b      	ldrb	r3, [r3, #1]
 800a572:	2b01      	cmp	r3, #1
 800a574:	d114      	bne.n	800a5a0 <USB_EPStartXfer+0x802>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	461a      	mov	r2, r3
 800a580:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a582:	4413      	add	r3, r2
 800a584:	673b      	str	r3, [r7, #112]	@ 0x70
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	00da      	lsls	r2, r3, #3
 800a58c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a58e:	4413      	add	r3, r2
 800a590:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a594:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a59e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	895b      	ldrh	r3, [r3, #10]
 800a5a4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	6959      	ldr	r1, [r3, #20]
 800a5ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fad5 	bl	800ab66 <USB_WritePMA>
 800a5bc:	e09e      	b.n	800a6fc <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	785b      	ldrb	r3, [r3, #1]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d16b      	bne.n	800a69e <USB_EPStartXfer+0x900>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a5d6:	4413      	add	r3, r2
 800a5d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	00da      	lsls	r2, r3, #3
 800a5e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a5e2:	4413      	add	r3, r2
 800a5e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a5e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a5ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a5ec:	881b      	ldrh	r3, [r3, #0]
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a5f8:	801a      	strh	r2, [r3, #0]
 800a5fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10a      	bne.n	800a618 <USB_EPStartXfer+0x87a>
 800a602:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a604:	881b      	ldrh	r3, [r3, #0]
 800a606:	b29b      	uxth	r3, r3
 800a608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a60c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a610:	b29a      	uxth	r2, r3
 800a612:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a614:	801a      	strh	r2, [r3, #0]
 800a616:	e063      	b.n	800a6e0 <USB_EPStartXfer+0x942>
 800a618:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a61c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a61e:	d81c      	bhi.n	800a65a <USB_EPStartXfer+0x8bc>
 800a620:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a624:	085b      	lsrs	r3, r3, #1
 800a626:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a62a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a62e:	f003 0301 	and.w	r3, r3, #1
 800a632:	2b00      	cmp	r3, #0
 800a634:	d004      	beq.n	800a640 <USB_EPStartXfer+0x8a2>
 800a636:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a63a:	3301      	adds	r3, #1
 800a63c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a640:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a642:	881b      	ldrh	r3, [r3, #0]
 800a644:	b29a      	uxth	r2, r3
 800a646:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	029b      	lsls	r3, r3, #10
 800a64e:	b29b      	uxth	r3, r3
 800a650:	4313      	orrs	r3, r2
 800a652:	b29a      	uxth	r2, r3
 800a654:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a656:	801a      	strh	r2, [r3, #0]
 800a658:	e042      	b.n	800a6e0 <USB_EPStartXfer+0x942>
 800a65a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a65e:	095b      	lsrs	r3, r3, #5
 800a660:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a664:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a668:	f003 031f 	and.w	r3, r3, #31
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d104      	bne.n	800a67a <USB_EPStartXfer+0x8dc>
 800a670:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a674:	3b01      	subs	r3, #1
 800a676:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a67a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a67c:	881b      	ldrh	r3, [r3, #0]
 800a67e:	b29a      	uxth	r2, r3
 800a680:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a684:	b29b      	uxth	r3, r3
 800a686:	029b      	lsls	r3, r3, #10
 800a688:	b29b      	uxth	r3, r3
 800a68a:	4313      	orrs	r3, r2
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a696:	b29a      	uxth	r2, r3
 800a698:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a69a:	801a      	strh	r2, [r3, #0]
 800a69c:	e020      	b.n	800a6e0 <USB_EPStartXfer+0x942>
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	785b      	ldrb	r3, [r3, #1]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d11c      	bne.n	800a6e0 <USB_EPStartXfer+0x942>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a6ba:	4413      	add	r3, r2
 800a6bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	00da      	lsls	r2, r3, #3
 800a6c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a6ca:	4413      	add	r3, r2
 800a6cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a6d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a6d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6d8:	b29a      	uxth	r2, r3
 800a6da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	891b      	ldrh	r3, [r3, #8]
 800a6e4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	6959      	ldr	r1, [r3, #20]
 800a6ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fa35 	bl	800ab66 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	4413      	add	r3, r2
 800a706:	881b      	ldrh	r3, [r3, #0]
 800a708:	b29b      	uxth	r3, r3
 800a70a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a70e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a712:	817b      	strh	r3, [r7, #10]
 800a714:	897b      	ldrh	r3, [r7, #10]
 800a716:	f083 0310 	eor.w	r3, r3, #16
 800a71a:	817b      	strh	r3, [r7, #10]
 800a71c:	897b      	ldrh	r3, [r7, #10]
 800a71e:	f083 0320 	eor.w	r3, r3, #32
 800a722:	817b      	strh	r3, [r7, #10]
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	441a      	add	r2, r3
 800a72e:	897b      	ldrh	r3, [r7, #10]
 800a730:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a734:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a738:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a73c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a740:	b29b      	uxth	r3, r3
 800a742:	8013      	strh	r3, [r2, #0]
 800a744:	e0d5      	b.n	800a8f2 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	7b1b      	ldrb	r3, [r3, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d156      	bne.n	800a7fc <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	699b      	ldr	r3, [r3, #24]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d122      	bne.n	800a79c <USB_EPStartXfer+0x9fe>
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	78db      	ldrb	r3, [r3, #3]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d11e      	bne.n	800a79c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	4413      	add	r3, r2
 800a768:	881b      	ldrh	r3, [r3, #0]
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a774:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	441a      	add	r2, r3
 800a782:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a78a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a78e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a796:	b29b      	uxth	r3, r3
 800a798:	8013      	strh	r3, [r2, #0]
 800a79a:	e01d      	b.n	800a7d8 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	4413      	add	r3, r2
 800a7a6:	881b      	ldrh	r3, [r3, #0]
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a7ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7b2:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	441a      	add	r2, r3
 800a7c0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800a7c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	699a      	ldr	r2, [r3, #24]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d907      	bls.n	800a7f4 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	699a      	ldr	r2, [r3, #24]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	1ad2      	subs	r2, r2, r3
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	619a      	str	r2, [r3, #24]
 800a7f2:	e054      	b.n	800a89e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	619a      	str	r2, [r3, #24]
 800a7fa:	e050      	b.n	800a89e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	78db      	ldrb	r3, [r3, #3]
 800a800:	2b02      	cmp	r3, #2
 800a802:	d142      	bne.n	800a88a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d048      	beq.n	800a89e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	4413      	add	r3, r2
 800a816:	881b      	ldrh	r3, [r3, #0]
 800a818:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a81c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a820:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a824:	2b00      	cmp	r3, #0
 800a826:	d005      	beq.n	800a834 <USB_EPStartXfer+0xa96>
 800a828:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a82c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10b      	bne.n	800a84c <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a834:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a838:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d12e      	bne.n	800a89e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a840:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d128      	bne.n	800a89e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4413      	add	r3, r2
 800a856:	881b      	ldrh	r3, [r3, #0]
 800a858:	b29b      	uxth	r3, r3
 800a85a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a85e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a862:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	441a      	add	r2, r3
 800a870:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800a874:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a878:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a87c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a880:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a884:	b29b      	uxth	r3, r3
 800a886:	8013      	strh	r3, [r2, #0]
 800a888:	e009      	b.n	800a89e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	78db      	ldrb	r3, [r3, #3]
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d103      	bne.n	800a89a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	2200      	movs	r2, #0
 800a896:	619a      	str	r2, [r3, #24]
 800a898:	e001      	b.n	800a89e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	e02a      	b.n	800a8f4 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	4413      	add	r3, r2
 800a8a8:	881b      	ldrh	r3, [r3, #0]
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a8b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8b4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a8b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a8bc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a8c0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a8c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a8c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a8cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	441a      	add	r2, r3
 800a8da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a8de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	37b0      	adds	r7, #176	@ 0xb0
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b085      	sub	sp, #20
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	785b      	ldrb	r3, [r3, #1]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d020      	beq.n	800a950 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4413      	add	r3, r2
 800a918:	881b      	ldrh	r3, [r3, #0]
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a924:	81bb      	strh	r3, [r7, #12]
 800a926:	89bb      	ldrh	r3, [r7, #12]
 800a928:	f083 0310 	eor.w	r3, r3, #16
 800a92c:	81bb      	strh	r3, [r7, #12]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	441a      	add	r2, r3
 800a938:	89bb      	ldrh	r3, [r7, #12]
 800a93a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a93e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	8013      	strh	r3, [r2, #0]
 800a94e:	e01f      	b.n	800a990 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4413      	add	r3, r2
 800a95a:	881b      	ldrh	r3, [r3, #0]
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a966:	81fb      	strh	r3, [r7, #14]
 800a968:	89fb      	ldrh	r3, [r7, #14]
 800a96a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a96e:	81fb      	strh	r3, [r7, #14]
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	441a      	add	r2, r3
 800a97a:	89fb      	ldrh	r3, [r7, #14]
 800a97c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a980:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a99e:	b480      	push	{r7}
 800a9a0:	b087      	sub	sp, #28
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	785b      	ldrb	r3, [r3, #1]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d04c      	beq.n	800aa4a <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4413      	add	r3, r2
 800a9ba:	881b      	ldrh	r3, [r3, #0]
 800a9bc:	823b      	strh	r3, [r7, #16]
 800a9be:	8a3b      	ldrh	r3, [r7, #16]
 800a9c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d01b      	beq.n	800aa00 <USB_EPClearStall+0x62>
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	4413      	add	r3, r2
 800a9d2:	881b      	ldrh	r3, [r3, #0]
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9de:	81fb      	strh	r3, [r7, #14]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	441a      	add	r2, r3
 800a9ea:	89fb      	ldrh	r3, [r7, #14]
 800a9ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	78db      	ldrb	r3, [r3, #3]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d06c      	beq.n	800aae2 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	4413      	add	r3, r2
 800aa12:	881b      	ldrh	r3, [r3, #0]
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa1e:	81bb      	strh	r3, [r7, #12]
 800aa20:	89bb      	ldrh	r3, [r7, #12]
 800aa22:	f083 0320 	eor.w	r3, r3, #32
 800aa26:	81bb      	strh	r3, [r7, #12]
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	441a      	add	r2, r3
 800aa32:	89bb      	ldrh	r3, [r7, #12]
 800aa34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	8013      	strh	r3, [r2, #0]
 800aa48:	e04b      	b.n	800aae2 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4413      	add	r3, r2
 800aa54:	881b      	ldrh	r3, [r3, #0]
 800aa56:	82fb      	strh	r3, [r7, #22]
 800aa58:	8afb      	ldrh	r3, [r7, #22]
 800aa5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d01b      	beq.n	800aa9a <USB_EPClearStall+0xfc>
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa78:	82bb      	strh	r3, [r7, #20]
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	441a      	add	r2, r3
 800aa84:	8abb      	ldrh	r3, [r7, #20]
 800aa86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aa92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	4413      	add	r3, r2
 800aaa4:	881b      	ldrh	r3, [r3, #0]
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aaac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aab0:	827b      	strh	r3, [r7, #18]
 800aab2:	8a7b      	ldrh	r3, [r7, #18]
 800aab4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aab8:	827b      	strh	r3, [r7, #18]
 800aaba:	8a7b      	ldrh	r3, [r7, #18]
 800aabc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aac0:	827b      	strh	r3, [r7, #18]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	441a      	add	r2, r3
 800aacc:	8a7b      	ldrh	r3, [r7, #18]
 800aace:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aad2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aade:	b29b      	uxth	r3, r3
 800aae0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	371c      	adds	r7, #28
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800aafc:	78fb      	ldrb	r3, [r7, #3]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d103      	bne.n	800ab0a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2280      	movs	r2, #128	@ 0x80
 800ab06:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	370c      	adds	r7, #12
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	370c      	adds	r7, #12
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ab46:	b480      	push	{r7}
 800ab48:	b085      	sub	sp, #20
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ab58:	68fb      	ldr	r3, [r7, #12]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3714      	adds	r7, #20
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr

0800ab66 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ab66:	b480      	push	{r7}
 800ab68:	b08b      	sub	sp, #44	@ 0x2c
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	60f8      	str	r0, [r7, #12]
 800ab6e:	60b9      	str	r1, [r7, #8]
 800ab70:	4611      	mov	r1, r2
 800ab72:	461a      	mov	r2, r3
 800ab74:	460b      	mov	r3, r1
 800ab76:	80fb      	strh	r3, [r7, #6]
 800ab78:	4613      	mov	r3, r2
 800ab7a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ab7c:	88bb      	ldrh	r3, [r7, #4]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	085b      	lsrs	r3, r3, #1
 800ab82:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ab8c:	88fa      	ldrh	r2, [r7, #6]
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	4413      	add	r3, r2
 800ab92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ab96:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab9c:	e01b      	b.n	800abd6 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	3301      	adds	r3, #1
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	021b      	lsls	r3, r3, #8
 800abac:	b21a      	sxth	r2, r3
 800abae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	b21b      	sxth	r3, r3
 800abb6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800abb8:	6a3b      	ldr	r3, [r7, #32]
 800abba:	8a7a      	ldrh	r2, [r7, #18]
 800abbc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800abbe:	6a3b      	ldr	r3, [r7, #32]
 800abc0:	3302      	adds	r3, #2
 800abc2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	3301      	adds	r3, #1
 800abc8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	3301      	adds	r3, #1
 800abce:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800abd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd2:	3b01      	subs	r3, #1
 800abd4:	627b      	str	r3, [r7, #36]	@ 0x24
 800abd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1e0      	bne.n	800ab9e <USB_WritePMA+0x38>
  }
}
 800abdc:	bf00      	nop
 800abde:	bf00      	nop
 800abe0:	372c      	adds	r7, #44	@ 0x2c
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800abea:	b480      	push	{r7}
 800abec:	b08b      	sub	sp, #44	@ 0x2c
 800abee:	af00      	add	r7, sp, #0
 800abf0:	60f8      	str	r0, [r7, #12]
 800abf2:	60b9      	str	r1, [r7, #8]
 800abf4:	4611      	mov	r1, r2
 800abf6:	461a      	mov	r2, r3
 800abf8:	460b      	mov	r3, r1
 800abfa:	80fb      	strh	r3, [r7, #6]
 800abfc:	4613      	mov	r3, r2
 800abfe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ac00:	88bb      	ldrh	r3, [r7, #4]
 800ac02:	085b      	lsrs	r3, r3, #1
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ac10:	88fa      	ldrh	r2, [r7, #6]
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	4413      	add	r3, r2
 800ac16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac1a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac20:	e018      	b.n	800ac54 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ac22:	6a3b      	ldr	r3, [r7, #32]
 800ac24:	881b      	ldrh	r3, [r3, #0]
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ac2a:	6a3b      	ldr	r3, [r7, #32]
 800ac2c:	3302      	adds	r3, #2
 800ac2e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	0a1b      	lsrs	r3, r3, #8
 800ac42:	b2da      	uxtb	r2, r3
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac50:	3b01      	subs	r3, #1
 800ac52:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1e3      	bne.n	800ac22 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ac5a:	88bb      	ldrh	r3, [r7, #4]
 800ac5c:	f003 0301 	and.w	r3, r3, #1
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d007      	beq.n	800ac76 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ac66:	6a3b      	ldr	r3, [r7, #32]
 800ac68:	881b      	ldrh	r3, [r3, #0]
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	b2da      	uxtb	r2, r3
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	701a      	strb	r2, [r3, #0]
  }
}
 800ac76:	bf00      	nop
 800ac78:	372c      	adds	r7, #44	@ 0x2c
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr

0800ac82 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b084      	sub	sp, #16
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ac8e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ac92:	f002 f8a3 	bl	800cddc <USBD_static_malloc>
 800ac96:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d105      	bne.n	800acaa <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800aca6:	2302      	movs	r3, #2
 800aca8:	e066      	b.n	800ad78 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	7c1b      	ldrb	r3, [r3, #16]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d119      	bne.n	800acee <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800acba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800acbe:	2202      	movs	r2, #2
 800acc0:	2181      	movs	r1, #129	@ 0x81
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f001 ff31 	bl	800cb2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800acce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800acd2:	2202      	movs	r2, #2
 800acd4:	2101      	movs	r1, #1
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f001 ff27 	bl	800cb2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2210      	movs	r2, #16
 800ace8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800acec:	e016      	b.n	800ad1c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800acee:	2340      	movs	r3, #64	@ 0x40
 800acf0:	2202      	movs	r2, #2
 800acf2:	2181      	movs	r1, #129	@ 0x81
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f001 ff18 	bl	800cb2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2201      	movs	r2, #1
 800acfe:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ad00:	2340      	movs	r3, #64	@ 0x40
 800ad02:	2202      	movs	r2, #2
 800ad04:	2101      	movs	r1, #1
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f001 ff0f 	bl	800cb2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2210      	movs	r2, #16
 800ad18:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ad1c:	2308      	movs	r3, #8
 800ad1e:	2203      	movs	r2, #3
 800ad20:	2182      	movs	r1, #130	@ 0x82
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f001 ff01 	bl	800cb2a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	7c1b      	ldrb	r3, [r3, #16]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d109      	bne.n	800ad66 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad5c:	2101      	movs	r1, #1
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f001 ffd2 	bl	800cd08 <USBD_LL_PrepareReceive>
 800ad64:	e007      	b.n	800ad76 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad6c:	2340      	movs	r3, #64	@ 0x40
 800ad6e:	2101      	movs	r1, #1
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f001 ffc9 	bl	800cd08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	460b      	mov	r3, r1
 800ad8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ad8c:	2181      	movs	r1, #129	@ 0x81
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f001 fef1 	bl	800cb76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ad9a:	2101      	movs	r1, #1
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f001 feea 	bl	800cb76 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800adaa:	2182      	movs	r1, #130	@ 0x82
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f001 fee2 	bl	800cb76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00e      	beq.n	800adea <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800addc:	4618      	mov	r0, r3
 800adde:	f002 f80b 	bl	800cdf8 <USBD_static_free>
    pdev->pClassData = NULL;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b086      	sub	sp, #24
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ae04:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ae06:	2300      	movs	r3, #0
 800ae08:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d101      	bne.n	800ae1c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ae18:	2303      	movs	r3, #3
 800ae1a:	e0af      	b.n	800af7c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d03f      	beq.n	800aea8 <USBD_CDC_Setup+0xb4>
 800ae28:	2b20      	cmp	r3, #32
 800ae2a:	f040 809f 	bne.w	800af6c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	88db      	ldrh	r3, [r3, #6]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d02e      	beq.n	800ae94 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	b25b      	sxtb	r3, r3
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	da16      	bge.n	800ae6e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	683a      	ldr	r2, [r7, #0]
 800ae4a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ae4c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae4e:	683a      	ldr	r2, [r7, #0]
 800ae50:	88d2      	ldrh	r2, [r2, #6]
 800ae52:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	88db      	ldrh	r3, [r3, #6]
 800ae58:	2b07      	cmp	r3, #7
 800ae5a:	bf28      	it	cs
 800ae5c:	2307      	movcs	r3, #7
 800ae5e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	89fa      	ldrh	r2, [r7, #14]
 800ae64:	4619      	mov	r1, r3
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f001 fa9d 	bl	800c3a6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ae6c:	e085      	b.n	800af7a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	785a      	ldrb	r2, [r3, #1]
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	88db      	ldrh	r3, [r3, #6]
 800ae7c:	b2da      	uxtb	r2, r3
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ae84:	6939      	ldr	r1, [r7, #16]
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	88db      	ldrh	r3, [r3, #6]
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f001 fab6 	bl	800c3fe <USBD_CtlPrepareRx>
      break;
 800ae92:	e072      	b.n	800af7a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	683a      	ldr	r2, [r7, #0]
 800ae9e:	7850      	ldrb	r0, [r2, #1]
 800aea0:	2200      	movs	r2, #0
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	4798      	blx	r3
      break;
 800aea6:	e068      	b.n	800af7a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	785b      	ldrb	r3, [r3, #1]
 800aeac:	2b0b      	cmp	r3, #11
 800aeae:	d852      	bhi.n	800af56 <USBD_CDC_Setup+0x162>
 800aeb0:	a201      	add	r2, pc, #4	@ (adr r2, 800aeb8 <USBD_CDC_Setup+0xc4>)
 800aeb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb6:	bf00      	nop
 800aeb8:	0800aee9 	.word	0x0800aee9
 800aebc:	0800af65 	.word	0x0800af65
 800aec0:	0800af57 	.word	0x0800af57
 800aec4:	0800af57 	.word	0x0800af57
 800aec8:	0800af57 	.word	0x0800af57
 800aecc:	0800af57 	.word	0x0800af57
 800aed0:	0800af57 	.word	0x0800af57
 800aed4:	0800af57 	.word	0x0800af57
 800aed8:	0800af57 	.word	0x0800af57
 800aedc:	0800af57 	.word	0x0800af57
 800aee0:	0800af13 	.word	0x0800af13
 800aee4:	0800af3d 	.word	0x0800af3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	2b03      	cmp	r3, #3
 800aef2:	d107      	bne.n	800af04 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aef4:	f107 030a 	add.w	r3, r7, #10
 800aef8:	2202      	movs	r2, #2
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f001 fa52 	bl	800c3a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af02:	e032      	b.n	800af6a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800af04:	6839      	ldr	r1, [r7, #0]
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f001 f9dc 	bl	800c2c4 <USBD_CtlError>
            ret = USBD_FAIL;
 800af0c:	2303      	movs	r3, #3
 800af0e:	75fb      	strb	r3, [r7, #23]
          break;
 800af10:	e02b      	b.n	800af6a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b03      	cmp	r3, #3
 800af1c:	d107      	bne.n	800af2e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800af1e:	f107 030d 	add.w	r3, r7, #13
 800af22:	2201      	movs	r2, #1
 800af24:	4619      	mov	r1, r3
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f001 fa3d 	bl	800c3a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af2c:	e01d      	b.n	800af6a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f001 f9c7 	bl	800c2c4 <USBD_CtlError>
            ret = USBD_FAIL;
 800af36:	2303      	movs	r3, #3
 800af38:	75fb      	strb	r3, [r7, #23]
          break;
 800af3a:	e016      	b.n	800af6a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af42:	b2db      	uxtb	r3, r3
 800af44:	2b03      	cmp	r3, #3
 800af46:	d00f      	beq.n	800af68 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800af48:	6839      	ldr	r1, [r7, #0]
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f001 f9ba 	bl	800c2c4 <USBD_CtlError>
            ret = USBD_FAIL;
 800af50:	2303      	movs	r3, #3
 800af52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800af54:	e008      	b.n	800af68 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800af56:	6839      	ldr	r1, [r7, #0]
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f001 f9b3 	bl	800c2c4 <USBD_CtlError>
          ret = USBD_FAIL;
 800af5e:	2303      	movs	r3, #3
 800af60:	75fb      	strb	r3, [r7, #23]
          break;
 800af62:	e002      	b.n	800af6a <USBD_CDC_Setup+0x176>
          break;
 800af64:	bf00      	nop
 800af66:	e008      	b.n	800af7a <USBD_CDC_Setup+0x186>
          break;
 800af68:	bf00      	nop
      }
      break;
 800af6a:	e006      	b.n	800af7a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f001 f9a8 	bl	800c2c4 <USBD_CtlError>
      ret = USBD_FAIL;
 800af74:	2303      	movs	r3, #3
 800af76:	75fb      	strb	r3, [r7, #23]
      break;
 800af78:	bf00      	nop
  }

  return (uint8_t)ret;
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3718      	adds	r7, #24
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	460b      	mov	r3, r1
 800af8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800af96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d101      	bne.n	800afa6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800afa2:	2303      	movs	r3, #3
 800afa4:	e04f      	b.n	800b046 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800afac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800afae:	78fa      	ldrb	r2, [r7, #3]
 800afb0:	6879      	ldr	r1, [r7, #4]
 800afb2:	4613      	mov	r3, r2
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	4413      	add	r3, r2
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	440b      	add	r3, r1
 800afbc:	3318      	adds	r3, #24
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d029      	beq.n	800b018 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800afc4:	78fa      	ldrb	r2, [r7, #3]
 800afc6:	6879      	ldr	r1, [r7, #4]
 800afc8:	4613      	mov	r3, r2
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	4413      	add	r3, r2
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	440b      	add	r3, r1
 800afd2:	3318      	adds	r3, #24
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	78f9      	ldrb	r1, [r7, #3]
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	460b      	mov	r3, r1
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	440b      	add	r3, r1
 800afe0:	00db      	lsls	r3, r3, #3
 800afe2:	4403      	add	r3, r0
 800afe4:	3320      	adds	r3, #32
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	fbb2 f1f3 	udiv	r1, r2, r3
 800afec:	fb01 f303 	mul.w	r3, r1, r3
 800aff0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d110      	bne.n	800b018 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800aff6:	78fa      	ldrb	r2, [r7, #3]
 800aff8:	6879      	ldr	r1, [r7, #4]
 800affa:	4613      	mov	r3, r2
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	4413      	add	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	440b      	add	r3, r1
 800b004:	3318      	adds	r3, #24
 800b006:	2200      	movs	r2, #0
 800b008:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b00a:	78f9      	ldrb	r1, [r7, #3]
 800b00c:	2300      	movs	r3, #0
 800b00e:	2200      	movs	r2, #0
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f001 fe58 	bl	800ccc6 <USBD_LL_Transmit>
 800b016:	e015      	b.n	800b044 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d00b      	beq.n	800b044 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	68ba      	ldr	r2, [r7, #8]
 800b036:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b03a:	68ba      	ldr	r2, [r7, #8]
 800b03c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b040:	78fa      	ldrb	r2, [r7, #3]
 800b042:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b044:	2300      	movs	r3, #0
}
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b084      	sub	sp, #16
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	460b      	mov	r3, r1
 800b058:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b060:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d101      	bne.n	800b070 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b06c:	2303      	movs	r3, #3
 800b06e:	e015      	b.n	800b09c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b070:	78fb      	ldrb	r3, [r7, #3]
 800b072:	4619      	mov	r1, r3
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f001 fe68 	bl	800cd4a <USBD_LL_GetRxDataSize>
 800b07a:	4602      	mov	r2, r0
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b088:	68db      	ldr	r3, [r3, #12]
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b096:	4611      	mov	r1, r2
 800b098:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b09a:	2300      	movs	r3, #0
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b0b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d101      	bne.n	800b0be <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b0ba:	2303      	movs	r3, #3
 800b0bc:	e01a      	b.n	800b0f4 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d014      	beq.n	800b0f2 <USBD_CDC_EP0_RxReady+0x4e>
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b0ce:	2bff      	cmp	r3, #255	@ 0xff
 800b0d0:	d00f      	beq.n	800b0f2 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800b0e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b0e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	22ff      	movs	r2, #255	@ 0xff
 800b0ee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2243      	movs	r2, #67	@ 0x43
 800b108:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b10a:	4b03      	ldr	r3, [pc, #12]	@ (800b118 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	370c      	adds	r7, #12
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr
 800b118:	20000094 	.word	0x20000094

0800b11c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2243      	movs	r2, #67	@ 0x43
 800b128:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b12a:	4b03      	ldr	r3, [pc, #12]	@ (800b138 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr
 800b138:	20000050 	.word	0x20000050

0800b13c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2243      	movs	r2, #67	@ 0x43
 800b148:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b14a:	4b03      	ldr	r3, [pc, #12]	@ (800b158 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	370c      	adds	r7, #12
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr
 800b158:	200000d8 	.word	0x200000d8

0800b15c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	220a      	movs	r2, #10
 800b168:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b16a:	4b03      	ldr	r3, [pc, #12]	@ (800b178 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	370c      	adds	r7, #12
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr
 800b178:	2000000c 	.word	0x2000000c

0800b17c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d101      	bne.n	800b190 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b18c:	2303      	movs	r3, #3
 800b18e:	e004      	b.n	800b19a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	370c      	adds	r7, #12
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr

0800b1a6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b1a6:	b480      	push	{r7}
 800b1a8:	b087      	sub	sp, #28
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	60f8      	str	r0, [r7, #12]
 800b1ae:	60b9      	str	r1, [r7, #8]
 800b1b0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1b8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d101      	bne.n	800b1c4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	e008      	b.n	800b1d6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	68ba      	ldr	r2, [r7, #8]
 800b1c8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	371c      	adds	r7, #28
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b1e2:	b480      	push	{r7}
 800b1e4:	b085      	sub	sp, #20
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
 800b1ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d101      	bne.n	800b1fe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b1fa:	2303      	movs	r3, #3
 800b1fc:	e004      	b.n	800b208 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3714      	adds	r7, #20
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b222:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d101      	bne.n	800b232 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b22e:	2303      	movs	r3, #3
 800b230:	e016      	b.n	800b260 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	7c1b      	ldrb	r3, [r3, #16]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d109      	bne.n	800b24e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b240:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b244:	2101      	movs	r1, #1
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f001 fd5e 	bl	800cd08 <USBD_LL_PrepareReceive>
 800b24c:	e007      	b.n	800b25e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b254:	2340      	movs	r3, #64	@ 0x40
 800b256:	2101      	movs	r1, #1
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f001 fd55 	bl	800cd08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b086      	sub	sp, #24
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	4613      	mov	r3, r2
 800b274:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d101      	bne.n	800b280 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b27c:	2303      	movs	r3, #3
 800b27e:	e01f      	b.n	800b2c0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2200      	movs	r2, #0
 800b284:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2200      	movs	r2, #0
 800b294:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d003      	beq.n	800b2a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	68ba      	ldr	r2, [r7, #8]
 800b2a2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	79fa      	ldrb	r2, [r7, #7]
 800b2b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f001 fbbd 	bl	800ca34 <USBD_LL_Init>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b2be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3718      	adds	r7, #24
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d101      	bne.n	800b2e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b2dc:	2303      	movs	r3, #3
 800b2de:	e016      	b.n	800b30e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	683a      	ldr	r2, [r7, #0]
 800b2e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00b      	beq.n	800b30c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2fc:	f107 020e 	add.w	r2, r7, #14
 800b300:	4610      	mov	r0, r2
 800b302:	4798      	blx	r3
 800b304:	4602      	mov	r2, r0
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b082      	sub	sp, #8
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f001 fbe8 	bl	800caf4 <USBD_LL_Start>
 800b324:	4603      	mov	r3, r0
}
 800b326:	4618      	mov	r0, r3
 800b328:	3708      	adds	r7, #8
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b32e:	b480      	push	{r7}
 800b330:	b083      	sub	sp, #12
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr

0800b344 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	460b      	mov	r3, r1
 800b34e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b350:	2303      	movs	r3, #3
 800b352:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d009      	beq.n	800b372 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	78fa      	ldrb	r2, [r7, #3]
 800b368:	4611      	mov	r1, r2
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	4798      	blx	r3
 800b36e:	4603      	mov	r3, r0
 800b370:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b372:	7bfb      	ldrb	r3, [r7, #15]
}
 800b374:	4618      	mov	r0, r3
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	460b      	mov	r3, r1
 800b386:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d007      	beq.n	800b3a2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	78fa      	ldrb	r2, [r7, #3]
 800b39c:	4611      	mov	r1, r2
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	4798      	blx	r3
  }

  return USBD_OK;
 800b3a2:	2300      	movs	r3, #0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3708      	adds	r7, #8
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b3bc:	6839      	ldr	r1, [r7, #0]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 ff46 	bl	800c250 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b3e0:	f003 031f 	and.w	r3, r3, #31
 800b3e4:	2b02      	cmp	r3, #2
 800b3e6:	d01a      	beq.n	800b41e <USBD_LL_SetupStage+0x72>
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d822      	bhi.n	800b432 <USBD_LL_SetupStage+0x86>
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d002      	beq.n	800b3f6 <USBD_LL_SetupStage+0x4a>
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d00a      	beq.n	800b40a <USBD_LL_SetupStage+0x5e>
 800b3f4:	e01d      	b.n	800b432 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 f9ee 	bl	800b7e0 <USBD_StdDevReq>
 800b404:	4603      	mov	r3, r0
 800b406:	73fb      	strb	r3, [r7, #15]
      break;
 800b408:	e020      	b.n	800b44c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b410:	4619      	mov	r1, r3
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 fa52 	bl	800b8bc <USBD_StdItfReq>
 800b418:	4603      	mov	r3, r0
 800b41a:	73fb      	strb	r3, [r7, #15]
      break;
 800b41c:	e016      	b.n	800b44c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b424:	4619      	mov	r1, r3
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 fa91 	bl	800b94e <USBD_StdEPReq>
 800b42c:	4603      	mov	r3, r0
 800b42e:	73fb      	strb	r3, [r7, #15]
      break;
 800b430:	e00c      	b.n	800b44c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b438:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	4619      	mov	r1, r3
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f001 fbb7 	bl	800cbb4 <USBD_LL_StallEP>
 800b446:	4603      	mov	r3, r0
 800b448:	73fb      	strb	r3, [r7, #15]
      break;
 800b44a:	bf00      	nop
  }

  return ret;
 800b44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b086      	sub	sp, #24
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	60f8      	str	r0, [r7, #12]
 800b45e:	460b      	mov	r3, r1
 800b460:	607a      	str	r2, [r7, #4]
 800b462:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b464:	7afb      	ldrb	r3, [r7, #11]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d138      	bne.n	800b4dc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b470:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b478:	2b03      	cmp	r3, #3
 800b47a:	d14a      	bne.n	800b512 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	689a      	ldr	r2, [r3, #8]
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	429a      	cmp	r2, r3
 800b486:	d913      	bls.n	800b4b0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	689a      	ldr	r2, [r3, #8]
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	1ad2      	subs	r2, r2, r3
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	68da      	ldr	r2, [r3, #12]
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	bf28      	it	cs
 800b4a2:	4613      	movcs	r3, r2
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	6879      	ldr	r1, [r7, #4]
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f000 ffc5 	bl	800c438 <USBD_CtlContinueRx>
 800b4ae:	e030      	b.n	800b512 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	2b03      	cmp	r3, #3
 800b4ba:	d10b      	bne.n	800b4d4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d005      	beq.n	800b4d4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f000 ffc0 	bl	800c45a <USBD_CtlSendStatus>
 800b4da:	e01a      	b.n	800b512 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	2b03      	cmp	r3, #3
 800b4e6:	d114      	bne.n	800b512 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4ee:	699b      	ldr	r3, [r3, #24]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d00e      	beq.n	800b512 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4fa:	699b      	ldr	r3, [r3, #24]
 800b4fc:	7afa      	ldrb	r2, [r7, #11]
 800b4fe:	4611      	mov	r1, r2
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	4798      	blx	r3
 800b504:	4603      	mov	r3, r0
 800b506:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b508:	7dfb      	ldrb	r3, [r7, #23]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d001      	beq.n	800b512 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b50e:	7dfb      	ldrb	r3, [r7, #23]
 800b510:	e000      	b.n	800b514 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b512:	2300      	movs	r3, #0
}
 800b514:	4618      	mov	r0, r3
 800b516:	3718      	adds	r7, #24
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b086      	sub	sp, #24
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	460b      	mov	r3, r1
 800b526:	607a      	str	r2, [r7, #4]
 800b528:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b52a:	7afb      	ldrb	r3, [r7, #11]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d16b      	bne.n	800b608 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	3314      	adds	r3, #20
 800b534:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	d156      	bne.n	800b5ee <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	689a      	ldr	r2, [r3, #8]
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d914      	bls.n	800b576 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	689a      	ldr	r2, [r3, #8]
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	1ad2      	subs	r2, r2, r3
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	461a      	mov	r2, r3
 800b560:	6879      	ldr	r1, [r7, #4]
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	f000 ff3a 	bl	800c3dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b568:	2300      	movs	r3, #0
 800b56a:	2200      	movs	r2, #0
 800b56c:	2100      	movs	r1, #0
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f001 fbca 	bl	800cd08 <USBD_LL_PrepareReceive>
 800b574:	e03b      	b.n	800b5ee <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	68da      	ldr	r2, [r3, #12]
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d11c      	bne.n	800b5bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	685a      	ldr	r2, [r3, #4]
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d316      	bcc.n	800b5bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b598:	429a      	cmp	r2, r3
 800b59a:	d20f      	bcs.n	800b5bc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b59c:	2200      	movs	r2, #0
 800b59e:	2100      	movs	r1, #0
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f000 ff1b 	bl	800c3dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	f001 fba7 	bl	800cd08 <USBD_LL_PrepareReceive>
 800b5ba:	e018      	b.n	800b5ee <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	2b03      	cmp	r3, #3
 800b5c6:	d10b      	bne.n	800b5e0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d005      	beq.n	800b5e0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5e0:	2180      	movs	r1, #128	@ 0x80
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f001 fae6 	bl	800cbb4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f000 ff49 	bl	800c480 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d122      	bne.n	800b63e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f7ff fe98 	bl	800b32e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2200      	movs	r2, #0
 800b602:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b606:	e01a      	b.n	800b63e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	2b03      	cmp	r3, #3
 800b612:	d114      	bne.n	800b63e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b61a:	695b      	ldr	r3, [r3, #20]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d00e      	beq.n	800b63e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b626:	695b      	ldr	r3, [r3, #20]
 800b628:	7afa      	ldrb	r2, [r7, #11]
 800b62a:	4611      	mov	r1, r2
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	4798      	blx	r3
 800b630:	4603      	mov	r3, r0
 800b632:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b634:	7dfb      	ldrb	r3, [r7, #23]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d001      	beq.n	800b63e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b63a:	7dfb      	ldrb	r3, [r7, #23]
 800b63c:	e000      	b.n	800b640 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	3718      	adds	r7, #24
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b674:	2b00      	cmp	r3, #0
 800b676:	d101      	bne.n	800b67c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b678:	2303      	movs	r3, #3
 800b67a:	e02f      	b.n	800b6dc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b682:	2b00      	cmp	r3, #0
 800b684:	d00f      	beq.n	800b6a6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d009      	beq.n	800b6a6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	6852      	ldr	r2, [r2, #4]
 800b69e:	b2d2      	uxtb	r2, r2
 800b6a0:	4611      	mov	r1, r2
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6a6:	2340      	movs	r3, #64	@ 0x40
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	2100      	movs	r1, #0
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f001 fa3c 	bl	800cb2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2240      	movs	r2, #64	@ 0x40
 800b6be:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6c2:	2340      	movs	r3, #64	@ 0x40
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	2180      	movs	r1, #128	@ 0x80
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f001 fa2e 	bl	800cb2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2240      	movs	r2, #64	@ 0x40
 800b6d8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	78fa      	ldrb	r2, [r7, #3]
 800b6f4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b712:	b2da      	uxtb	r2, r3
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2204      	movs	r2, #4
 800b71e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	2b04      	cmp	r3, #4
 800b742:	d106      	bne.n	800b752 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b74a:	b2da      	uxtb	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d101      	bne.n	800b776 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b772:	2303      	movs	r3, #3
 800b774:	e012      	b.n	800b79c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	2b03      	cmp	r3, #3
 800b780:	d10b      	bne.n	800b79a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b788:	69db      	ldr	r3, [r3, #28]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d005      	beq.n	800b79a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b794:	69db      	ldr	r3, [r3, #28]
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b79a:	2300      	movs	r3, #0
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3708      	adds	r7, #8
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b087      	sub	sp, #28
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b7c2:	8a3b      	ldrh	r3, [r7, #16]
 800b7c4:	021b      	lsls	r3, r3, #8
 800b7c6:	b21a      	sxth	r2, r3
 800b7c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	b21b      	sxth	r3, r3
 800b7d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b7d2:	89fb      	ldrh	r3, [r7, #14]
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	371c      	adds	r7, #28
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b7f6:	2b40      	cmp	r3, #64	@ 0x40
 800b7f8:	d005      	beq.n	800b806 <USBD_StdDevReq+0x26>
 800b7fa:	2b40      	cmp	r3, #64	@ 0x40
 800b7fc:	d853      	bhi.n	800b8a6 <USBD_StdDevReq+0xc6>
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00b      	beq.n	800b81a <USBD_StdDevReq+0x3a>
 800b802:	2b20      	cmp	r3, #32
 800b804:	d14f      	bne.n	800b8a6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	6839      	ldr	r1, [r7, #0]
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	4798      	blx	r3
 800b814:	4603      	mov	r3, r0
 800b816:	73fb      	strb	r3, [r7, #15]
      break;
 800b818:	e04a      	b.n	800b8b0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	785b      	ldrb	r3, [r3, #1]
 800b81e:	2b09      	cmp	r3, #9
 800b820:	d83b      	bhi.n	800b89a <USBD_StdDevReq+0xba>
 800b822:	a201      	add	r2, pc, #4	@ (adr r2, 800b828 <USBD_StdDevReq+0x48>)
 800b824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b828:	0800b87d 	.word	0x0800b87d
 800b82c:	0800b891 	.word	0x0800b891
 800b830:	0800b89b 	.word	0x0800b89b
 800b834:	0800b887 	.word	0x0800b887
 800b838:	0800b89b 	.word	0x0800b89b
 800b83c:	0800b85b 	.word	0x0800b85b
 800b840:	0800b851 	.word	0x0800b851
 800b844:	0800b89b 	.word	0x0800b89b
 800b848:	0800b873 	.word	0x0800b873
 800b84c:	0800b865 	.word	0x0800b865
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b850:	6839      	ldr	r1, [r7, #0]
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 f9de 	bl	800bc14 <USBD_GetDescriptor>
          break;
 800b858:	e024      	b.n	800b8a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b85a:	6839      	ldr	r1, [r7, #0]
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 fb6d 	bl	800bf3c <USBD_SetAddress>
          break;
 800b862:	e01f      	b.n	800b8a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fbac 	bl	800bfc4 <USBD_SetConfig>
 800b86c:	4603      	mov	r3, r0
 800b86e:	73fb      	strb	r3, [r7, #15]
          break;
 800b870:	e018      	b.n	800b8a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b872:	6839      	ldr	r1, [r7, #0]
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 fc4b 	bl	800c110 <USBD_GetConfig>
          break;
 800b87a:	e013      	b.n	800b8a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 fc7c 	bl	800c17c <USBD_GetStatus>
          break;
 800b884:	e00e      	b.n	800b8a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b886:	6839      	ldr	r1, [r7, #0]
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 fcab 	bl	800c1e4 <USBD_SetFeature>
          break;
 800b88e:	e009      	b.n	800b8a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b890:	6839      	ldr	r1, [r7, #0]
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 fcba 	bl	800c20c <USBD_ClrFeature>
          break;
 800b898:	e004      	b.n	800b8a4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b89a:	6839      	ldr	r1, [r7, #0]
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 fd11 	bl	800c2c4 <USBD_CtlError>
          break;
 800b8a2:	bf00      	nop
      }
      break;
 800b8a4:	e004      	b.n	800b8b0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b8a6:	6839      	ldr	r1, [r7, #0]
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 fd0b 	bl	800c2c4 <USBD_CtlError>
      break;
 800b8ae:	bf00      	nop
  }

  return ret;
 800b8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3710      	adds	r7, #16
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop

0800b8bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b8d2:	2b40      	cmp	r3, #64	@ 0x40
 800b8d4:	d005      	beq.n	800b8e2 <USBD_StdItfReq+0x26>
 800b8d6:	2b40      	cmp	r3, #64	@ 0x40
 800b8d8:	d82f      	bhi.n	800b93a <USBD_StdItfReq+0x7e>
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d001      	beq.n	800b8e2 <USBD_StdItfReq+0x26>
 800b8de:	2b20      	cmp	r3, #32
 800b8e0:	d12b      	bne.n	800b93a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	3b01      	subs	r3, #1
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d81d      	bhi.n	800b92c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	889b      	ldrh	r3, [r3, #4]
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d813      	bhi.n	800b922 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	6839      	ldr	r1, [r7, #0]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	4798      	blx	r3
 800b908:	4603      	mov	r3, r0
 800b90a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	88db      	ldrh	r3, [r3, #6]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d110      	bne.n	800b936 <USBD_StdItfReq+0x7a>
 800b914:	7bfb      	ldrb	r3, [r7, #15]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d10d      	bne.n	800b936 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 fd9d 	bl	800c45a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b920:	e009      	b.n	800b936 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b922:	6839      	ldr	r1, [r7, #0]
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 fccd 	bl	800c2c4 <USBD_CtlError>
          break;
 800b92a:	e004      	b.n	800b936 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b92c:	6839      	ldr	r1, [r7, #0]
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 fcc8 	bl	800c2c4 <USBD_CtlError>
          break;
 800b934:	e000      	b.n	800b938 <USBD_StdItfReq+0x7c>
          break;
 800b936:	bf00      	nop
      }
      break;
 800b938:	e004      	b.n	800b944 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b93a:	6839      	ldr	r1, [r7, #0]
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 fcc1 	bl	800c2c4 <USBD_CtlError>
      break;
 800b942:	bf00      	nop
  }

  return ret;
 800b944:	7bfb      	ldrb	r3, [r7, #15]
}
 800b946:	4618      	mov	r0, r3
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b084      	sub	sp, #16
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
 800b956:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b958:	2300      	movs	r3, #0
 800b95a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	889b      	ldrh	r3, [r3, #4]
 800b960:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b96a:	2b40      	cmp	r3, #64	@ 0x40
 800b96c:	d007      	beq.n	800b97e <USBD_StdEPReq+0x30>
 800b96e:	2b40      	cmp	r3, #64	@ 0x40
 800b970:	f200 8145 	bhi.w	800bbfe <USBD_StdEPReq+0x2b0>
 800b974:	2b00      	cmp	r3, #0
 800b976:	d00c      	beq.n	800b992 <USBD_StdEPReq+0x44>
 800b978:	2b20      	cmp	r3, #32
 800b97a:	f040 8140 	bne.w	800bbfe <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	6839      	ldr	r1, [r7, #0]
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	4798      	blx	r3
 800b98c:	4603      	mov	r3, r0
 800b98e:	73fb      	strb	r3, [r7, #15]
      break;
 800b990:	e13a      	b.n	800bc08 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	785b      	ldrb	r3, [r3, #1]
 800b996:	2b03      	cmp	r3, #3
 800b998:	d007      	beq.n	800b9aa <USBD_StdEPReq+0x5c>
 800b99a:	2b03      	cmp	r3, #3
 800b99c:	f300 8129 	bgt.w	800bbf2 <USBD_StdEPReq+0x2a4>
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d07f      	beq.n	800baa4 <USBD_StdEPReq+0x156>
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d03c      	beq.n	800ba22 <USBD_StdEPReq+0xd4>
 800b9a8:	e123      	b.n	800bbf2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d002      	beq.n	800b9bc <USBD_StdEPReq+0x6e>
 800b9b6:	2b03      	cmp	r3, #3
 800b9b8:	d016      	beq.n	800b9e8 <USBD_StdEPReq+0x9a>
 800b9ba:	e02c      	b.n	800ba16 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9bc:	7bbb      	ldrb	r3, [r7, #14]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d00d      	beq.n	800b9de <USBD_StdEPReq+0x90>
 800b9c2:	7bbb      	ldrb	r3, [r7, #14]
 800b9c4:	2b80      	cmp	r3, #128	@ 0x80
 800b9c6:	d00a      	beq.n	800b9de <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9c8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f001 f8f1 	bl	800cbb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9d2:	2180      	movs	r1, #128	@ 0x80
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f001 f8ed 	bl	800cbb4 <USBD_LL_StallEP>
 800b9da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9dc:	e020      	b.n	800ba20 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b9de:	6839      	ldr	r1, [r7, #0]
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 fc6f 	bl	800c2c4 <USBD_CtlError>
              break;
 800b9e6:	e01b      	b.n	800ba20 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	885b      	ldrh	r3, [r3, #2]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d10e      	bne.n	800ba0e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b9f0:	7bbb      	ldrb	r3, [r7, #14]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00b      	beq.n	800ba0e <USBD_StdEPReq+0xc0>
 800b9f6:	7bbb      	ldrb	r3, [r7, #14]
 800b9f8:	2b80      	cmp	r3, #128	@ 0x80
 800b9fa:	d008      	beq.n	800ba0e <USBD_StdEPReq+0xc0>
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	88db      	ldrh	r3, [r3, #6]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d104      	bne.n	800ba0e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba04:	7bbb      	ldrb	r3, [r7, #14]
 800ba06:	4619      	mov	r1, r3
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f001 f8d3 	bl	800cbb4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 fd23 	bl	800c45a <USBD_CtlSendStatus>

              break;
 800ba14:	e004      	b.n	800ba20 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ba16:	6839      	ldr	r1, [r7, #0]
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 fc53 	bl	800c2c4 <USBD_CtlError>
              break;
 800ba1e:	bf00      	nop
          }
          break;
 800ba20:	e0ec      	b.n	800bbfc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	2b02      	cmp	r3, #2
 800ba2c:	d002      	beq.n	800ba34 <USBD_StdEPReq+0xe6>
 800ba2e:	2b03      	cmp	r3, #3
 800ba30:	d016      	beq.n	800ba60 <USBD_StdEPReq+0x112>
 800ba32:	e030      	b.n	800ba96 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba34:	7bbb      	ldrb	r3, [r7, #14]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00d      	beq.n	800ba56 <USBD_StdEPReq+0x108>
 800ba3a:	7bbb      	ldrb	r3, [r7, #14]
 800ba3c:	2b80      	cmp	r3, #128	@ 0x80
 800ba3e:	d00a      	beq.n	800ba56 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba40:	7bbb      	ldrb	r3, [r7, #14]
 800ba42:	4619      	mov	r1, r3
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f001 f8b5 	bl	800cbb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba4a:	2180      	movs	r1, #128	@ 0x80
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f001 f8b1 	bl	800cbb4 <USBD_LL_StallEP>
 800ba52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba54:	e025      	b.n	800baa2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ba56:	6839      	ldr	r1, [r7, #0]
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 fc33 	bl	800c2c4 <USBD_CtlError>
              break;
 800ba5e:	e020      	b.n	800baa2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	885b      	ldrh	r3, [r3, #2]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d11b      	bne.n	800baa0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ba68:	7bbb      	ldrb	r3, [r7, #14]
 800ba6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d004      	beq.n	800ba7c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba72:	7bbb      	ldrb	r3, [r7, #14]
 800ba74:	4619      	mov	r1, r3
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f001 f8bb 	bl	800cbf2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 fcec 	bl	800c45a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	6839      	ldr	r1, [r7, #0]
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	4798      	blx	r3
 800ba90:	4603      	mov	r3, r0
 800ba92:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ba94:	e004      	b.n	800baa0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ba96:	6839      	ldr	r1, [r7, #0]
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fc13 	bl	800c2c4 <USBD_CtlError>
              break;
 800ba9e:	e000      	b.n	800baa2 <USBD_StdEPReq+0x154>
              break;
 800baa0:	bf00      	nop
          }
          break;
 800baa2:	e0ab      	b.n	800bbfc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b02      	cmp	r3, #2
 800baae:	d002      	beq.n	800bab6 <USBD_StdEPReq+0x168>
 800bab0:	2b03      	cmp	r3, #3
 800bab2:	d032      	beq.n	800bb1a <USBD_StdEPReq+0x1cc>
 800bab4:	e097      	b.n	800bbe6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bab6:	7bbb      	ldrb	r3, [r7, #14]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d007      	beq.n	800bacc <USBD_StdEPReq+0x17e>
 800babc:	7bbb      	ldrb	r3, [r7, #14]
 800babe:	2b80      	cmp	r3, #128	@ 0x80
 800bac0:	d004      	beq.n	800bacc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fbfd 	bl	800c2c4 <USBD_CtlError>
                break;
 800baca:	e091      	b.n	800bbf0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bacc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	da0b      	bge.n	800baec <USBD_StdEPReq+0x19e>
 800bad4:	7bbb      	ldrb	r3, [r7, #14]
 800bad6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bada:	4613      	mov	r3, r2
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	4413      	add	r3, r2
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	3310      	adds	r3, #16
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	4413      	add	r3, r2
 800bae8:	3304      	adds	r3, #4
 800baea:	e00b      	b.n	800bb04 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800baec:	7bbb      	ldrb	r3, [r7, #14]
 800baee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800baf2:	4613      	mov	r3, r2
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4413      	add	r3, r2
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	4413      	add	r3, r2
 800bb02:	3304      	adds	r3, #4
 800bb04:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	2202      	movs	r2, #2
 800bb10:	4619      	mov	r1, r3
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fc47 	bl	800c3a6 <USBD_CtlSendData>
              break;
 800bb18:	e06a      	b.n	800bbf0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	da11      	bge.n	800bb46 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb22:	7bbb      	ldrb	r3, [r7, #14]
 800bb24:	f003 020f 	and.w	r2, r3, #15
 800bb28:	6879      	ldr	r1, [r7, #4]
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	4413      	add	r3, r2
 800bb30:	009b      	lsls	r3, r3, #2
 800bb32:	440b      	add	r3, r1
 800bb34:	3324      	adds	r3, #36	@ 0x24
 800bb36:	881b      	ldrh	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d117      	bne.n	800bb6c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bb3c:	6839      	ldr	r1, [r7, #0]
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 fbc0 	bl	800c2c4 <USBD_CtlError>
                  break;
 800bb44:	e054      	b.n	800bbf0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bb46:	7bbb      	ldrb	r3, [r7, #14]
 800bb48:	f003 020f 	and.w	r2, r3, #15
 800bb4c:	6879      	ldr	r1, [r7, #4]
 800bb4e:	4613      	mov	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4413      	add	r3, r2
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	440b      	add	r3, r1
 800bb58:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d104      	bne.n	800bb6c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bb62:	6839      	ldr	r1, [r7, #0]
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fbad 	bl	800c2c4 <USBD_CtlError>
                  break;
 800bb6a:	e041      	b.n	800bbf0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	da0b      	bge.n	800bb8c <USBD_StdEPReq+0x23e>
 800bb74:	7bbb      	ldrb	r3, [r7, #14]
 800bb76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4413      	add	r3, r2
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	3310      	adds	r3, #16
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	4413      	add	r3, r2
 800bb88:	3304      	adds	r3, #4
 800bb8a:	e00b      	b.n	800bba4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb8c:	7bbb      	ldrb	r3, [r7, #14]
 800bb8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb92:	4613      	mov	r3, r2
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	4413      	add	r3, r2
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	4413      	add	r3, r2
 800bba2:	3304      	adds	r3, #4
 800bba4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bba6:	7bbb      	ldrb	r3, [r7, #14]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d002      	beq.n	800bbb2 <USBD_StdEPReq+0x264>
 800bbac:	7bbb      	ldrb	r3, [r7, #14]
 800bbae:	2b80      	cmp	r3, #128	@ 0x80
 800bbb0:	d103      	bne.n	800bbba <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	601a      	str	r2, [r3, #0]
 800bbb8:	e00e      	b.n	800bbd8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bbba:	7bbb      	ldrb	r3, [r7, #14]
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f001 f836 	bl	800cc30 <USBD_LL_IsStallEP>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d003      	beq.n	800bbd2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	2201      	movs	r2, #1
 800bbce:	601a      	str	r2, [r3, #0]
 800bbd0:	e002      	b.n	800bbd8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	2202      	movs	r2, #2
 800bbdc:	4619      	mov	r1, r3
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fbe1 	bl	800c3a6 <USBD_CtlSendData>
              break;
 800bbe4:	e004      	b.n	800bbf0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bbe6:	6839      	ldr	r1, [r7, #0]
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 fb6b 	bl	800c2c4 <USBD_CtlError>
              break;
 800bbee:	bf00      	nop
          }
          break;
 800bbf0:	e004      	b.n	800bbfc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bbf2:	6839      	ldr	r1, [r7, #0]
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 fb65 	bl	800c2c4 <USBD_CtlError>
          break;
 800bbfa:	bf00      	nop
      }
      break;
 800bbfc:	e004      	b.n	800bc08 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bbfe:	6839      	ldr	r1, [r7, #0]
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 fb5f 	bl	800c2c4 <USBD_CtlError>
      break;
 800bc06:	bf00      	nop
  }

  return ret;
 800bc08:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3710      	adds	r7, #16
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
	...

0800bc14 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc22:	2300      	movs	r3, #0
 800bc24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc26:	2300      	movs	r3, #0
 800bc28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	885b      	ldrh	r3, [r3, #2]
 800bc2e:	0a1b      	lsrs	r3, r3, #8
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	3b01      	subs	r3, #1
 800bc34:	2b0e      	cmp	r3, #14
 800bc36:	f200 8152 	bhi.w	800bede <USBD_GetDescriptor+0x2ca>
 800bc3a:	a201      	add	r2, pc, #4	@ (adr r2, 800bc40 <USBD_GetDescriptor+0x2c>)
 800bc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc40:	0800bcb1 	.word	0x0800bcb1
 800bc44:	0800bcc9 	.word	0x0800bcc9
 800bc48:	0800bd09 	.word	0x0800bd09
 800bc4c:	0800bedf 	.word	0x0800bedf
 800bc50:	0800bedf 	.word	0x0800bedf
 800bc54:	0800be7f 	.word	0x0800be7f
 800bc58:	0800beab 	.word	0x0800beab
 800bc5c:	0800bedf 	.word	0x0800bedf
 800bc60:	0800bedf 	.word	0x0800bedf
 800bc64:	0800bedf 	.word	0x0800bedf
 800bc68:	0800bedf 	.word	0x0800bedf
 800bc6c:	0800bedf 	.word	0x0800bedf
 800bc70:	0800bedf 	.word	0x0800bedf
 800bc74:	0800bedf 	.word	0x0800bedf
 800bc78:	0800bc7d 	.word	0x0800bc7d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc82:	69db      	ldr	r3, [r3, #28]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00b      	beq.n	800bca0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc8e:	69db      	ldr	r3, [r3, #28]
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	7c12      	ldrb	r2, [r2, #16]
 800bc94:	f107 0108 	add.w	r1, r7, #8
 800bc98:	4610      	mov	r0, r2
 800bc9a:	4798      	blx	r3
 800bc9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc9e:	e126      	b.n	800beee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bca0:	6839      	ldr	r1, [r7, #0]
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 fb0e 	bl	800c2c4 <USBD_CtlError>
        err++;
 800bca8:	7afb      	ldrb	r3, [r7, #11]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	72fb      	strb	r3, [r7, #11]
      break;
 800bcae:	e11e      	b.n	800beee <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	7c12      	ldrb	r2, [r2, #16]
 800bcbc:	f107 0108 	add.w	r1, r7, #8
 800bcc0:	4610      	mov	r0, r2
 800bcc2:	4798      	blx	r3
 800bcc4:	60f8      	str	r0, [r7, #12]
      break;
 800bcc6:	e112      	b.n	800beee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	7c1b      	ldrb	r3, [r3, #16]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10d      	bne.n	800bcec <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd8:	f107 0208 	add.w	r2, r7, #8
 800bcdc:	4610      	mov	r0, r2
 800bcde:	4798      	blx	r3
 800bce0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	3301      	adds	r3, #1
 800bce6:	2202      	movs	r2, #2
 800bce8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bcea:	e100      	b.n	800beee <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcf4:	f107 0208 	add.w	r2, r7, #8
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	4798      	blx	r3
 800bcfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	3301      	adds	r3, #1
 800bd02:	2202      	movs	r2, #2
 800bd04:	701a      	strb	r2, [r3, #0]
      break;
 800bd06:	e0f2      	b.n	800beee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	885b      	ldrh	r3, [r3, #2]
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	2b05      	cmp	r3, #5
 800bd10:	f200 80ac 	bhi.w	800be6c <USBD_GetDescriptor+0x258>
 800bd14:	a201      	add	r2, pc, #4	@ (adr r2, 800bd1c <USBD_GetDescriptor+0x108>)
 800bd16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd1a:	bf00      	nop
 800bd1c:	0800bd35 	.word	0x0800bd35
 800bd20:	0800bd69 	.word	0x0800bd69
 800bd24:	0800bd9d 	.word	0x0800bd9d
 800bd28:	0800bdd1 	.word	0x0800bdd1
 800bd2c:	0800be05 	.word	0x0800be05
 800bd30:	0800be39 	.word	0x0800be39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d00b      	beq.n	800bd58 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	7c12      	ldrb	r2, [r2, #16]
 800bd4c:	f107 0108 	add.w	r1, r7, #8
 800bd50:	4610      	mov	r0, r2
 800bd52:	4798      	blx	r3
 800bd54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd56:	e091      	b.n	800be7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd58:	6839      	ldr	r1, [r7, #0]
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 fab2 	bl	800c2c4 <USBD_CtlError>
            err++;
 800bd60:	7afb      	ldrb	r3, [r7, #11]
 800bd62:	3301      	adds	r3, #1
 800bd64:	72fb      	strb	r3, [r7, #11]
          break;
 800bd66:	e089      	b.n	800be7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d00b      	beq.n	800bd8c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	7c12      	ldrb	r2, [r2, #16]
 800bd80:	f107 0108 	add.w	r1, r7, #8
 800bd84:	4610      	mov	r0, r2
 800bd86:	4798      	blx	r3
 800bd88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd8a:	e077      	b.n	800be7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd8c:	6839      	ldr	r1, [r7, #0]
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 fa98 	bl	800c2c4 <USBD_CtlError>
            err++;
 800bd94:	7afb      	ldrb	r3, [r7, #11]
 800bd96:	3301      	adds	r3, #1
 800bd98:	72fb      	strb	r3, [r7, #11]
          break;
 800bd9a:	e06f      	b.n	800be7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00b      	beq.n	800bdc0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdae:	68db      	ldr	r3, [r3, #12]
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	7c12      	ldrb	r2, [r2, #16]
 800bdb4:	f107 0108 	add.w	r1, r7, #8
 800bdb8:	4610      	mov	r0, r2
 800bdba:	4798      	blx	r3
 800bdbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdbe:	e05d      	b.n	800be7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bdc0:	6839      	ldr	r1, [r7, #0]
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 fa7e 	bl	800c2c4 <USBD_CtlError>
            err++;
 800bdc8:	7afb      	ldrb	r3, [r7, #11]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	72fb      	strb	r3, [r7, #11]
          break;
 800bdce:	e055      	b.n	800be7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdd6:	691b      	ldr	r3, [r3, #16]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00b      	beq.n	800bdf4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bde2:	691b      	ldr	r3, [r3, #16]
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	7c12      	ldrb	r2, [r2, #16]
 800bde8:	f107 0108 	add.w	r1, r7, #8
 800bdec:	4610      	mov	r0, r2
 800bdee:	4798      	blx	r3
 800bdf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdf2:	e043      	b.n	800be7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bdf4:	6839      	ldr	r1, [r7, #0]
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 fa64 	bl	800c2c4 <USBD_CtlError>
            err++;
 800bdfc:	7afb      	ldrb	r3, [r7, #11]
 800bdfe:	3301      	adds	r3, #1
 800be00:	72fb      	strb	r3, [r7, #11]
          break;
 800be02:	e03b      	b.n	800be7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be0a:	695b      	ldr	r3, [r3, #20]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00b      	beq.n	800be28 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be16:	695b      	ldr	r3, [r3, #20]
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	7c12      	ldrb	r2, [r2, #16]
 800be1c:	f107 0108 	add.w	r1, r7, #8
 800be20:	4610      	mov	r0, r2
 800be22:	4798      	blx	r3
 800be24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be26:	e029      	b.n	800be7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be28:	6839      	ldr	r1, [r7, #0]
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fa4a 	bl	800c2c4 <USBD_CtlError>
            err++;
 800be30:	7afb      	ldrb	r3, [r7, #11]
 800be32:	3301      	adds	r3, #1
 800be34:	72fb      	strb	r3, [r7, #11]
          break;
 800be36:	e021      	b.n	800be7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be3e:	699b      	ldr	r3, [r3, #24]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d00b      	beq.n	800be5c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be4a:	699b      	ldr	r3, [r3, #24]
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	7c12      	ldrb	r2, [r2, #16]
 800be50:	f107 0108 	add.w	r1, r7, #8
 800be54:	4610      	mov	r0, r2
 800be56:	4798      	blx	r3
 800be58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be5a:	e00f      	b.n	800be7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be5c:	6839      	ldr	r1, [r7, #0]
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f000 fa30 	bl	800c2c4 <USBD_CtlError>
            err++;
 800be64:	7afb      	ldrb	r3, [r7, #11]
 800be66:	3301      	adds	r3, #1
 800be68:	72fb      	strb	r3, [r7, #11]
          break;
 800be6a:	e007      	b.n	800be7c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800be6c:	6839      	ldr	r1, [r7, #0]
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 fa28 	bl	800c2c4 <USBD_CtlError>
          err++;
 800be74:	7afb      	ldrb	r3, [r7, #11]
 800be76:	3301      	adds	r3, #1
 800be78:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800be7a:	bf00      	nop
      }
      break;
 800be7c:	e037      	b.n	800beee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	7c1b      	ldrb	r3, [r3, #16]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d109      	bne.n	800be9a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be8e:	f107 0208 	add.w	r2, r7, #8
 800be92:	4610      	mov	r0, r2
 800be94:	4798      	blx	r3
 800be96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be98:	e029      	b.n	800beee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800be9a:	6839      	ldr	r1, [r7, #0]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 fa11 	bl	800c2c4 <USBD_CtlError>
        err++;
 800bea2:	7afb      	ldrb	r3, [r7, #11]
 800bea4:	3301      	adds	r3, #1
 800bea6:	72fb      	strb	r3, [r7, #11]
      break;
 800bea8:	e021      	b.n	800beee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	7c1b      	ldrb	r3, [r3, #16]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d10d      	bne.n	800bece <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800beb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beba:	f107 0208 	add.w	r2, r7, #8
 800bebe:	4610      	mov	r0, r2
 800bec0:	4798      	blx	r3
 800bec2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	3301      	adds	r3, #1
 800bec8:	2207      	movs	r2, #7
 800beca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800becc:	e00f      	b.n	800beee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bece:	6839      	ldr	r1, [r7, #0]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 f9f7 	bl	800c2c4 <USBD_CtlError>
        err++;
 800bed6:	7afb      	ldrb	r3, [r7, #11]
 800bed8:	3301      	adds	r3, #1
 800beda:	72fb      	strb	r3, [r7, #11]
      break;
 800bedc:	e007      	b.n	800beee <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bede:	6839      	ldr	r1, [r7, #0]
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 f9ef 	bl	800c2c4 <USBD_CtlError>
      err++;
 800bee6:	7afb      	ldrb	r3, [r7, #11]
 800bee8:	3301      	adds	r3, #1
 800beea:	72fb      	strb	r3, [r7, #11]
      break;
 800beec:	bf00      	nop
  }

  if (err != 0U)
 800beee:	7afb      	ldrb	r3, [r7, #11]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d11e      	bne.n	800bf32 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	88db      	ldrh	r3, [r3, #6]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d016      	beq.n	800bf2a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800befc:	893b      	ldrh	r3, [r7, #8]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d00e      	beq.n	800bf20 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	88da      	ldrh	r2, [r3, #6]
 800bf06:	893b      	ldrh	r3, [r7, #8]
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	bf28      	it	cs
 800bf0c:	4613      	movcs	r3, r2
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bf12:	893b      	ldrh	r3, [r7, #8]
 800bf14:	461a      	mov	r2, r3
 800bf16:	68f9      	ldr	r1, [r7, #12]
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 fa44 	bl	800c3a6 <USBD_CtlSendData>
 800bf1e:	e009      	b.n	800bf34 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bf20:	6839      	ldr	r1, [r7, #0]
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 f9ce 	bl	800c2c4 <USBD_CtlError>
 800bf28:	e004      	b.n	800bf34 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 fa95 	bl	800c45a <USBD_CtlSendStatus>
 800bf30:	e000      	b.n	800bf34 <USBD_GetDescriptor+0x320>
    return;
 800bf32:	bf00      	nop
  }
}
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop

0800bf3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	889b      	ldrh	r3, [r3, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d131      	bne.n	800bfb2 <USBD_SetAddress+0x76>
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	88db      	ldrh	r3, [r3, #6]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d12d      	bne.n	800bfb2 <USBD_SetAddress+0x76>
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	885b      	ldrh	r3, [r3, #2]
 800bf5a:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf5c:	d829      	bhi.n	800bfb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	885b      	ldrh	r3, [r3, #2]
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	2b03      	cmp	r3, #3
 800bf74:	d104      	bne.n	800bf80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bf76:	6839      	ldr	r1, [r7, #0]
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 f9a3 	bl	800c2c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf7e:	e01d      	b.n	800bfbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	7bfa      	ldrb	r2, [r7, #15]
 800bf84:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf88:	7bfb      	ldrb	r3, [r7, #15]
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 fe7b 	bl	800cc88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 fa61 	bl	800c45a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf98:	7bfb      	ldrb	r3, [r7, #15]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d004      	beq.n	800bfa8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2202      	movs	r2, #2
 800bfa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfa6:	e009      	b.n	800bfbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2201      	movs	r2, #1
 800bfac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfb0:	e004      	b.n	800bfbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bfb2:	6839      	ldr	r1, [r7, #0]
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 f985 	bl	800c2c4 <USBD_CtlError>
  }
}
 800bfba:	bf00      	nop
 800bfbc:	bf00      	nop
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	885b      	ldrh	r3, [r3, #2]
 800bfd6:	b2da      	uxtb	r2, r3
 800bfd8:	4b4c      	ldr	r3, [pc, #304]	@ (800c10c <USBD_SetConfig+0x148>)
 800bfda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bfdc:	4b4b      	ldr	r3, [pc, #300]	@ (800c10c <USBD_SetConfig+0x148>)
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d905      	bls.n	800bff0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bfe4:	6839      	ldr	r1, [r7, #0]
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 f96c 	bl	800c2c4 <USBD_CtlError>
    return USBD_FAIL;
 800bfec:	2303      	movs	r3, #3
 800bfee:	e088      	b.n	800c102 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	d002      	beq.n	800c002 <USBD_SetConfig+0x3e>
 800bffc:	2b03      	cmp	r3, #3
 800bffe:	d025      	beq.n	800c04c <USBD_SetConfig+0x88>
 800c000:	e071      	b.n	800c0e6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c002:	4b42      	ldr	r3, [pc, #264]	@ (800c10c <USBD_SetConfig+0x148>)
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d01c      	beq.n	800c044 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c00a:	4b40      	ldr	r3, [pc, #256]	@ (800c10c <USBD_SetConfig+0x148>)
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	461a      	mov	r2, r3
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c014:	4b3d      	ldr	r3, [pc, #244]	@ (800c10c <USBD_SetConfig+0x148>)
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	4619      	mov	r1, r3
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f7ff f992 	bl	800b344 <USBD_SetClassConfig>
 800c020:	4603      	mov	r3, r0
 800c022:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c024:	7bfb      	ldrb	r3, [r7, #15]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d004      	beq.n	800c034 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c02a:	6839      	ldr	r1, [r7, #0]
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 f949 	bl	800c2c4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c032:	e065      	b.n	800c100 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 fa10 	bl	800c45a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2203      	movs	r2, #3
 800c03e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c042:	e05d      	b.n	800c100 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f000 fa08 	bl	800c45a <USBD_CtlSendStatus>
      break;
 800c04a:	e059      	b.n	800c100 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c04c:	4b2f      	ldr	r3, [pc, #188]	@ (800c10c <USBD_SetConfig+0x148>)
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d112      	bne.n	800c07a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2202      	movs	r2, #2
 800c058:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c05c:	4b2b      	ldr	r3, [pc, #172]	@ (800c10c <USBD_SetConfig+0x148>)
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	461a      	mov	r2, r3
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c066:	4b29      	ldr	r3, [pc, #164]	@ (800c10c <USBD_SetConfig+0x148>)
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	4619      	mov	r1, r3
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f7ff f985 	bl	800b37c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 f9f1 	bl	800c45a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c078:	e042      	b.n	800c100 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c07a:	4b24      	ldr	r3, [pc, #144]	@ (800c10c <USBD_SetConfig+0x148>)
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	461a      	mov	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	429a      	cmp	r2, r3
 800c086:	d02a      	beq.n	800c0de <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	4619      	mov	r1, r3
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f7ff f973 	bl	800b37c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c096:	4b1d      	ldr	r3, [pc, #116]	@ (800c10c <USBD_SetConfig+0x148>)
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	461a      	mov	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c0a0:	4b1a      	ldr	r3, [pc, #104]	@ (800c10c <USBD_SetConfig+0x148>)
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f7ff f94c 	bl	800b344 <USBD_SetClassConfig>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c0b0:	7bfb      	ldrb	r3, [r7, #15]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00f      	beq.n	800c0d6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c0b6:	6839      	ldr	r1, [r7, #0]
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 f903 	bl	800c2c4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7ff f958 	bl	800b37c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2202      	movs	r2, #2
 800c0d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c0d4:	e014      	b.n	800c100 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f9bf 	bl	800c45a <USBD_CtlSendStatus>
      break;
 800c0dc:	e010      	b.n	800c100 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 f9bb 	bl	800c45a <USBD_CtlSendStatus>
      break;
 800c0e4:	e00c      	b.n	800c100 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c0e6:	6839      	ldr	r1, [r7, #0]
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 f8eb 	bl	800c2c4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c0ee:	4b07      	ldr	r3, [pc, #28]	@ (800c10c <USBD_SetConfig+0x148>)
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f7ff f941 	bl	800b37c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c0fa:	2303      	movs	r3, #3
 800c0fc:	73fb      	strb	r3, [r7, #15]
      break;
 800c0fe:	bf00      	nop
  }

  return ret;
 800c100:	7bfb      	ldrb	r3, [r7, #15]
}
 800c102:	4618      	mov	r0, r3
 800c104:	3710      	adds	r7, #16
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	20000d34 	.word	0x20000d34

0800c110 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b082      	sub	sp, #8
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	88db      	ldrh	r3, [r3, #6]
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d004      	beq.n	800c12c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c122:	6839      	ldr	r1, [r7, #0]
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 f8cd 	bl	800c2c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c12a:	e023      	b.n	800c174 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c132:	b2db      	uxtb	r3, r3
 800c134:	2b02      	cmp	r3, #2
 800c136:	dc02      	bgt.n	800c13e <USBD_GetConfig+0x2e>
 800c138:	2b00      	cmp	r3, #0
 800c13a:	dc03      	bgt.n	800c144 <USBD_GetConfig+0x34>
 800c13c:	e015      	b.n	800c16a <USBD_GetConfig+0x5a>
 800c13e:	2b03      	cmp	r3, #3
 800c140:	d00b      	beq.n	800c15a <USBD_GetConfig+0x4a>
 800c142:	e012      	b.n	800c16a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	3308      	adds	r3, #8
 800c14e:	2201      	movs	r2, #1
 800c150:	4619      	mov	r1, r3
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 f927 	bl	800c3a6 <USBD_CtlSendData>
        break;
 800c158:	e00c      	b.n	800c174 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	3304      	adds	r3, #4
 800c15e:	2201      	movs	r2, #1
 800c160:	4619      	mov	r1, r3
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 f91f 	bl	800c3a6 <USBD_CtlSendData>
        break;
 800c168:	e004      	b.n	800c174 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c16a:	6839      	ldr	r1, [r7, #0]
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 f8a9 	bl	800c2c4 <USBD_CtlError>
        break;
 800c172:	bf00      	nop
}
 800c174:	bf00      	nop
 800c176:	3708      	adds	r7, #8
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	3b01      	subs	r3, #1
 800c190:	2b02      	cmp	r3, #2
 800c192:	d81e      	bhi.n	800c1d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	88db      	ldrh	r3, [r3, #6]
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d004      	beq.n	800c1a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c19c:	6839      	ldr	r1, [r7, #0]
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 f890 	bl	800c2c4 <USBD_CtlError>
        break;
 800c1a4:	e01a      	b.n	800c1dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d005      	beq.n	800c1c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	68db      	ldr	r3, [r3, #12]
 800c1ba:	f043 0202 	orr.w	r2, r3, #2
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	330c      	adds	r3, #12
 800c1c6:	2202      	movs	r2, #2
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 f8eb 	bl	800c3a6 <USBD_CtlSendData>
      break;
 800c1d0:	e004      	b.n	800c1dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 f875 	bl	800c2c4 <USBD_CtlError>
      break;
 800c1da:	bf00      	nop
  }
}
 800c1dc:	bf00      	nop
 800c1de:	3708      	adds	r7, #8
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	885b      	ldrh	r3, [r3, #2]
 800c1f2:	2b01      	cmp	r3, #1
 800c1f4:	d106      	bne.n	800c204 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 f92b 	bl	800c45a <USBD_CtlSendStatus>
  }
}
 800c204:	bf00      	nop
 800c206:	3708      	adds	r7, #8
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	3b01      	subs	r3, #1
 800c220:	2b02      	cmp	r3, #2
 800c222:	d80b      	bhi.n	800c23c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	885b      	ldrh	r3, [r3, #2]
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d10c      	bne.n	800c246 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2200      	movs	r2, #0
 800c230:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 f910 	bl	800c45a <USBD_CtlSendStatus>
      }
      break;
 800c23a:	e004      	b.n	800c246 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c23c:	6839      	ldr	r1, [r7, #0]
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 f840 	bl	800c2c4 <USBD_CtlError>
      break;
 800c244:	e000      	b.n	800c248 <USBD_ClrFeature+0x3c>
      break;
 800c246:	bf00      	nop
  }
}
 800c248:	bf00      	nop
 800c24a:	3708      	adds	r7, #8
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	781a      	ldrb	r2, [r3, #0]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	3301      	adds	r3, #1
 800c26a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	781a      	ldrb	r2, [r3, #0]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	3301      	adds	r3, #1
 800c278:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f7ff fa92 	bl	800b7a4 <SWAPBYTE>
 800c280:	4603      	mov	r3, r0
 800c282:	461a      	mov	r2, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	3301      	adds	r3, #1
 800c28c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	3301      	adds	r3, #1
 800c292:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f7ff fa85 	bl	800b7a4 <SWAPBYTE>
 800c29a:	4603      	mov	r3, r0
 800c29c:	461a      	mov	r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f7ff fa78 	bl	800b7a4 <SWAPBYTE>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	80da      	strh	r2, [r3, #6]
}
 800c2bc:	bf00      	nop
 800c2be:	3710      	adds	r7, #16
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2ce:	2180      	movs	r1, #128	@ 0x80
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 fc6f 	bl	800cbb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 fc6b 	bl	800cbb4 <USBD_LL_StallEP>
}
 800c2de:	bf00      	nop
 800c2e0:	3708      	adds	r7, #8
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b086      	sub	sp, #24
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	60f8      	str	r0, [r7, #12]
 800c2ee:	60b9      	str	r1, [r7, #8]
 800c2f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d036      	beq.n	800c36a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c300:	6938      	ldr	r0, [r7, #16]
 800c302:	f000 f836 	bl	800c372 <USBD_GetLen>
 800c306:	4603      	mov	r3, r0
 800c308:	3301      	adds	r3, #1
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	005b      	lsls	r3, r3, #1
 800c30e:	b29a      	uxth	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c314:	7dfb      	ldrb	r3, [r7, #23]
 800c316:	68ba      	ldr	r2, [r7, #8]
 800c318:	4413      	add	r3, r2
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	7812      	ldrb	r2, [r2, #0]
 800c31e:	701a      	strb	r2, [r3, #0]
  idx++;
 800c320:	7dfb      	ldrb	r3, [r7, #23]
 800c322:	3301      	adds	r3, #1
 800c324:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c326:	7dfb      	ldrb	r3, [r7, #23]
 800c328:	68ba      	ldr	r2, [r7, #8]
 800c32a:	4413      	add	r3, r2
 800c32c:	2203      	movs	r2, #3
 800c32e:	701a      	strb	r2, [r3, #0]
  idx++;
 800c330:	7dfb      	ldrb	r3, [r7, #23]
 800c332:	3301      	adds	r3, #1
 800c334:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c336:	e013      	b.n	800c360 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c338:	7dfb      	ldrb	r3, [r7, #23]
 800c33a:	68ba      	ldr	r2, [r7, #8]
 800c33c:	4413      	add	r3, r2
 800c33e:	693a      	ldr	r2, [r7, #16]
 800c340:	7812      	ldrb	r2, [r2, #0]
 800c342:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	3301      	adds	r3, #1
 800c348:	613b      	str	r3, [r7, #16]
    idx++;
 800c34a:	7dfb      	ldrb	r3, [r7, #23]
 800c34c:	3301      	adds	r3, #1
 800c34e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c350:	7dfb      	ldrb	r3, [r7, #23]
 800c352:	68ba      	ldr	r2, [r7, #8]
 800c354:	4413      	add	r3, r2
 800c356:	2200      	movs	r2, #0
 800c358:	701a      	strb	r2, [r3, #0]
    idx++;
 800c35a:	7dfb      	ldrb	r3, [r7, #23]
 800c35c:	3301      	adds	r3, #1
 800c35e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d1e7      	bne.n	800c338 <USBD_GetString+0x52>
 800c368:	e000      	b.n	800c36c <USBD_GetString+0x86>
    return;
 800c36a:	bf00      	nop
  }
}
 800c36c:	3718      	adds	r7, #24
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c372:	b480      	push	{r7}
 800c374:	b085      	sub	sp, #20
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c37a:	2300      	movs	r3, #0
 800c37c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c382:	e005      	b.n	800c390 <USBD_GetLen+0x1e>
  {
    len++;
 800c384:	7bfb      	ldrb	r3, [r7, #15]
 800c386:	3301      	adds	r3, #1
 800c388:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	3301      	adds	r3, #1
 800c38e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d1f5      	bne.n	800c384 <USBD_GetLen+0x12>
  }

  return len;
 800c398:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3714      	adds	r7, #20
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr

0800c3a6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b084      	sub	sp, #16
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	60f8      	str	r0, [r7, #12]
 800c3ae:	60b9      	str	r1, [r7, #8]
 800c3b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2202      	movs	r2, #2
 800c3b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	2100      	movs	r1, #0
 800c3cc:	68f8      	ldr	r0, [r7, #12]
 800c3ce:	f000 fc7a 	bl	800ccc6 <USBD_LL_Transmit>

  return USBD_OK;
 800c3d2:	2300      	movs	r3, #0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	68ba      	ldr	r2, [r7, #8]
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f000 fc69 	bl	800ccc6 <USBD_LL_Transmit>

  return USBD_OK;
 800c3f4:	2300      	movs	r3, #0
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b084      	sub	sp, #16
 800c402:	af00      	add	r7, sp, #0
 800c404:	60f8      	str	r0, [r7, #12]
 800c406:	60b9      	str	r1, [r7, #8]
 800c408:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2203      	movs	r2, #3
 800c40e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	2100      	movs	r1, #0
 800c428:	68f8      	ldr	r0, [r7, #12]
 800c42a:	f000 fc6d 	bl	800cd08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	68ba      	ldr	r2, [r7, #8]
 800c448:	2100      	movs	r1, #0
 800c44a:	68f8      	ldr	r0, [r7, #12]
 800c44c:	f000 fc5c 	bl	800cd08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c450:	2300      	movs	r3, #0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}

0800c45a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c45a:	b580      	push	{r7, lr}
 800c45c:	b082      	sub	sp, #8
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2204      	movs	r2, #4
 800c466:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c46a:	2300      	movs	r3, #0
 800c46c:	2200      	movs	r2, #0
 800c46e:	2100      	movs	r1, #0
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 fc28 	bl	800ccc6 <USBD_LL_Transmit>

  return USBD_OK;
 800c476:	2300      	movs	r3, #0
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3708      	adds	r7, #8
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2205      	movs	r2, #5
 800c48c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c490:	2300      	movs	r3, #0
 800c492:	2200      	movs	r2, #0
 800c494:	2100      	movs	r1, #0
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fc36 	bl	800cd08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c49c:	2300      	movs	r3, #0
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3708      	adds	r7, #8
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
	...

0800c4a8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	4912      	ldr	r1, [pc, #72]	@ (800c4f8 <MX_USB_Device_Init+0x50>)
 800c4b0:	4812      	ldr	r0, [pc, #72]	@ (800c4fc <MX_USB_Device_Init+0x54>)
 800c4b2:	f7fe fed9 	bl	800b268 <USBD_Init>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d001      	beq.n	800c4c0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c4bc:	f7f5 f9ea 	bl	8001894 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c4c0:	490f      	ldr	r1, [pc, #60]	@ (800c500 <MX_USB_Device_Init+0x58>)
 800c4c2:	480e      	ldr	r0, [pc, #56]	@ (800c4fc <MX_USB_Device_Init+0x54>)
 800c4c4:	f7fe ff00 	bl	800b2c8 <USBD_RegisterClass>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d001      	beq.n	800c4d2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c4ce:	f7f5 f9e1 	bl	8001894 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c4d2:	490c      	ldr	r1, [pc, #48]	@ (800c504 <MX_USB_Device_Init+0x5c>)
 800c4d4:	4809      	ldr	r0, [pc, #36]	@ (800c4fc <MX_USB_Device_Init+0x54>)
 800c4d6:	f7fe fe51 	bl	800b17c <USBD_CDC_RegisterInterface>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d001      	beq.n	800c4e4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c4e0:	f7f5 f9d8 	bl	8001894 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c4e4:	4805      	ldr	r0, [pc, #20]	@ (800c4fc <MX_USB_Device_Init+0x54>)
 800c4e6:	f7fe ff16 	bl	800b316 <USBD_Start>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d001      	beq.n	800c4f4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c4f0:	f7f5 f9d0 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c4f4:	bf00      	nop
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	20000130 	.word	0x20000130
 800c4fc:	20000d38 	.word	0x20000d38
 800c500:	20000018 	.word	0x20000018
 800c504:	2000011c 	.word	0x2000011c

0800c508 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c50c:	2200      	movs	r2, #0
 800c50e:	4905      	ldr	r1, [pc, #20]	@ (800c524 <CDC_Init_FS+0x1c>)
 800c510:	4805      	ldr	r0, [pc, #20]	@ (800c528 <CDC_Init_FS+0x20>)
 800c512:	f7fe fe48 	bl	800b1a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c516:	4905      	ldr	r1, [pc, #20]	@ (800c52c <CDC_Init_FS+0x24>)
 800c518:	4803      	ldr	r0, [pc, #12]	@ (800c528 <CDC_Init_FS+0x20>)
 800c51a:	f7fe fe62 	bl	800b1e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c51e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c520:	4618      	mov	r0, r3
 800c522:	bd80      	pop	{r7, pc}
 800c524:	20001408 	.word	0x20001408
 800c528:	20000d38 	.word	0x20000d38
 800c52c:	20001008 	.word	0x20001008

0800c530 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c530:	b480      	push	{r7}
 800c532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c534:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c536:	4618      	mov	r0, r3
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr

0800c540 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	4603      	mov	r3, r0
 800c548:	6039      	str	r1, [r7, #0]
 800c54a:	71fb      	strb	r3, [r7, #7]
 800c54c:	4613      	mov	r3, r2
 800c54e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c550:	79fb      	ldrb	r3, [r7, #7]
 800c552:	2b23      	cmp	r3, #35	@ 0x23
 800c554:	d84a      	bhi.n	800c5ec <CDC_Control_FS+0xac>
 800c556:	a201      	add	r2, pc, #4	@ (adr r2, 800c55c <CDC_Control_FS+0x1c>)
 800c558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c55c:	0800c5ed 	.word	0x0800c5ed
 800c560:	0800c5ed 	.word	0x0800c5ed
 800c564:	0800c5ed 	.word	0x0800c5ed
 800c568:	0800c5ed 	.word	0x0800c5ed
 800c56c:	0800c5ed 	.word	0x0800c5ed
 800c570:	0800c5ed 	.word	0x0800c5ed
 800c574:	0800c5ed 	.word	0x0800c5ed
 800c578:	0800c5ed 	.word	0x0800c5ed
 800c57c:	0800c5ed 	.word	0x0800c5ed
 800c580:	0800c5ed 	.word	0x0800c5ed
 800c584:	0800c5ed 	.word	0x0800c5ed
 800c588:	0800c5ed 	.word	0x0800c5ed
 800c58c:	0800c5ed 	.word	0x0800c5ed
 800c590:	0800c5ed 	.word	0x0800c5ed
 800c594:	0800c5ed 	.word	0x0800c5ed
 800c598:	0800c5ed 	.word	0x0800c5ed
 800c59c:	0800c5ed 	.word	0x0800c5ed
 800c5a0:	0800c5ed 	.word	0x0800c5ed
 800c5a4:	0800c5ed 	.word	0x0800c5ed
 800c5a8:	0800c5ed 	.word	0x0800c5ed
 800c5ac:	0800c5ed 	.word	0x0800c5ed
 800c5b0:	0800c5ed 	.word	0x0800c5ed
 800c5b4:	0800c5ed 	.word	0x0800c5ed
 800c5b8:	0800c5ed 	.word	0x0800c5ed
 800c5bc:	0800c5ed 	.word	0x0800c5ed
 800c5c0:	0800c5ed 	.word	0x0800c5ed
 800c5c4:	0800c5ed 	.word	0x0800c5ed
 800c5c8:	0800c5ed 	.word	0x0800c5ed
 800c5cc:	0800c5ed 	.word	0x0800c5ed
 800c5d0:	0800c5ed 	.word	0x0800c5ed
 800c5d4:	0800c5ed 	.word	0x0800c5ed
 800c5d8:	0800c5ed 	.word	0x0800c5ed
 800c5dc:	0800c5ed 	.word	0x0800c5ed
 800c5e0:	0800c5ed 	.word	0x0800c5ed
 800c5e4:	0800c5ed 	.word	0x0800c5ed
 800c5e8:	0800c5ed 	.word	0x0800c5ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c5ec:	bf00      	nop
  }

  return (USBD_OK);
 800c5ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	370c      	adds	r7, #12
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr

0800c5fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c606:	6879      	ldr	r1, [r7, #4]
 800c608:	4805      	ldr	r0, [pc, #20]	@ (800c620 <CDC_Receive_FS+0x24>)
 800c60a:	f7fe fdea 	bl	800b1e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c60e:	4804      	ldr	r0, [pc, #16]	@ (800c620 <CDC_Receive_FS+0x24>)
 800c610:	f7fe fe00 	bl	800b214 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c614:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c616:	4618      	mov	r0, r3
 800c618:	3708      	adds	r7, #8
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	20000d38 	.word	0x20000d38

0800c624 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c624:	b480      	push	{r7}
 800c626:	b087      	sub	sp, #28
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	4613      	mov	r3, r2
 800c630:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c632:	2300      	movs	r3, #0
 800c634:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c636:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	371c      	adds	r7, #28
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr
	...

0800c648 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	4603      	mov	r3, r0
 800c650:	6039      	str	r1, [r7, #0]
 800c652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	2212      	movs	r2, #18
 800c658:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c65a:	4b03      	ldr	r3, [pc, #12]	@ (800c668 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	370c      	adds	r7, #12
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr
 800c668:	20000150 	.word	0x20000150

0800c66c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
 800c672:	4603      	mov	r3, r0
 800c674:	6039      	str	r1, [r7, #0]
 800c676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	2204      	movs	r2, #4
 800c67c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c67e:	4b03      	ldr	r3, [pc, #12]	@ (800c68c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c680:	4618      	mov	r0, r3
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr
 800c68c:	20000164 	.word	0x20000164

0800c690 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	4603      	mov	r3, r0
 800c698:	6039      	str	r1, [r7, #0]
 800c69a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c69c:	79fb      	ldrb	r3, [r7, #7]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d105      	bne.n	800c6ae <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c6a2:	683a      	ldr	r2, [r7, #0]
 800c6a4:	4907      	ldr	r1, [pc, #28]	@ (800c6c4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c6a6:	4808      	ldr	r0, [pc, #32]	@ (800c6c8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c6a8:	f7ff fe1d 	bl	800c2e6 <USBD_GetString>
 800c6ac:	e004      	b.n	800c6b8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c6ae:	683a      	ldr	r2, [r7, #0]
 800c6b0:	4904      	ldr	r1, [pc, #16]	@ (800c6c4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c6b2:	4805      	ldr	r0, [pc, #20]	@ (800c6c8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c6b4:	f7ff fe17 	bl	800c2e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6b8:	4b02      	ldr	r3, [pc, #8]	@ (800c6c4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	20001808 	.word	0x20001808
 800c6c8:	08011558 	.word	0x08011558

0800c6cc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	6039      	str	r1, [r7, #0]
 800c6d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c6d8:	683a      	ldr	r2, [r7, #0]
 800c6da:	4904      	ldr	r1, [pc, #16]	@ (800c6ec <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800c6dc:	4804      	ldr	r0, [pc, #16]	@ (800c6f0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800c6de:	f7ff fe02 	bl	800c2e6 <USBD_GetString>
  return USBD_StrDesc;
 800c6e2:	4b02      	ldr	r3, [pc, #8]	@ (800c6ec <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	20001808 	.word	0x20001808
 800c6f0:	08011570 	.word	0x08011570

0800c6f4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	6039      	str	r1, [r7, #0]
 800c6fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	221a      	movs	r2, #26
 800c704:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c706:	f000 f843 	bl	800c790 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c70a:	4b02      	ldr	r3, [pc, #8]	@ (800c714 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3708      	adds	r7, #8
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	20000168 	.word	0x20000168

0800c718 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	4603      	mov	r3, r0
 800c720:	6039      	str	r1, [r7, #0]
 800c722:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c724:	79fb      	ldrb	r3, [r7, #7]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d105      	bne.n	800c736 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c72a:	683a      	ldr	r2, [r7, #0]
 800c72c:	4907      	ldr	r1, [pc, #28]	@ (800c74c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c72e:	4808      	ldr	r0, [pc, #32]	@ (800c750 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c730:	f7ff fdd9 	bl	800c2e6 <USBD_GetString>
 800c734:	e004      	b.n	800c740 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c736:	683a      	ldr	r2, [r7, #0]
 800c738:	4904      	ldr	r1, [pc, #16]	@ (800c74c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c73a:	4805      	ldr	r0, [pc, #20]	@ (800c750 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c73c:	f7ff fdd3 	bl	800c2e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c740:	4b02      	ldr	r3, [pc, #8]	@ (800c74c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800c742:	4618      	mov	r0, r3
 800c744:	3708      	adds	r7, #8
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	20001808 	.word	0x20001808
 800c750:	08011584 	.word	0x08011584

0800c754 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	4603      	mov	r3, r0
 800c75c:	6039      	str	r1, [r7, #0]
 800c75e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c760:	79fb      	ldrb	r3, [r7, #7]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d105      	bne.n	800c772 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	4907      	ldr	r1, [pc, #28]	@ (800c788 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c76a:	4808      	ldr	r0, [pc, #32]	@ (800c78c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c76c:	f7ff fdbb 	bl	800c2e6 <USBD_GetString>
 800c770:	e004      	b.n	800c77c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c772:	683a      	ldr	r2, [r7, #0]
 800c774:	4904      	ldr	r1, [pc, #16]	@ (800c788 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c776:	4805      	ldr	r0, [pc, #20]	@ (800c78c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c778:	f7ff fdb5 	bl	800c2e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c77c:	4b02      	ldr	r3, [pc, #8]	@ (800c788 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	20001808 	.word	0x20001808
 800c78c:	08011590 	.word	0x08011590

0800c790 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b084      	sub	sp, #16
 800c794:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c796:	4b0f      	ldr	r3, [pc, #60]	@ (800c7d4 <Get_SerialNum+0x44>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c79c:	4b0e      	ldr	r3, [pc, #56]	@ (800c7d8 <Get_SerialNum+0x48>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c7a2:	4b0e      	ldr	r3, [pc, #56]	@ (800c7dc <Get_SerialNum+0x4c>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	4413      	add	r3, r2
 800c7ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d009      	beq.n	800c7ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c7b6:	2208      	movs	r2, #8
 800c7b8:	4909      	ldr	r1, [pc, #36]	@ (800c7e0 <Get_SerialNum+0x50>)
 800c7ba:	68f8      	ldr	r0, [r7, #12]
 800c7bc:	f000 f814 	bl	800c7e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c7c0:	2204      	movs	r2, #4
 800c7c2:	4908      	ldr	r1, [pc, #32]	@ (800c7e4 <Get_SerialNum+0x54>)
 800c7c4:	68b8      	ldr	r0, [r7, #8]
 800c7c6:	f000 f80f 	bl	800c7e8 <IntToUnicode>
  }
}
 800c7ca:	bf00      	nop
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	1fff7590 	.word	0x1fff7590
 800c7d8:	1fff7594 	.word	0x1fff7594
 800c7dc:	1fff7598 	.word	0x1fff7598
 800c7e0:	2000016a 	.word	0x2000016a
 800c7e4:	2000017a 	.word	0x2000017a

0800c7e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b087      	sub	sp, #28
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	60b9      	str	r1, [r7, #8]
 800c7f2:	4613      	mov	r3, r2
 800c7f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	75fb      	strb	r3, [r7, #23]
 800c7fe:	e027      	b.n	800c850 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	0f1b      	lsrs	r3, r3, #28
 800c804:	2b09      	cmp	r3, #9
 800c806:	d80b      	bhi.n	800c820 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	0f1b      	lsrs	r3, r3, #28
 800c80c:	b2da      	uxtb	r2, r3
 800c80e:	7dfb      	ldrb	r3, [r7, #23]
 800c810:	005b      	lsls	r3, r3, #1
 800c812:	4619      	mov	r1, r3
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	440b      	add	r3, r1
 800c818:	3230      	adds	r2, #48	@ 0x30
 800c81a:	b2d2      	uxtb	r2, r2
 800c81c:	701a      	strb	r2, [r3, #0]
 800c81e:	e00a      	b.n	800c836 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	0f1b      	lsrs	r3, r3, #28
 800c824:	b2da      	uxtb	r2, r3
 800c826:	7dfb      	ldrb	r3, [r7, #23]
 800c828:	005b      	lsls	r3, r3, #1
 800c82a:	4619      	mov	r1, r3
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	440b      	add	r3, r1
 800c830:	3237      	adds	r2, #55	@ 0x37
 800c832:	b2d2      	uxtb	r2, r2
 800c834:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	011b      	lsls	r3, r3, #4
 800c83a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c83c:	7dfb      	ldrb	r3, [r7, #23]
 800c83e:	005b      	lsls	r3, r3, #1
 800c840:	3301      	adds	r3, #1
 800c842:	68ba      	ldr	r2, [r7, #8]
 800c844:	4413      	add	r3, r2
 800c846:	2200      	movs	r2, #0
 800c848:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c84a:	7dfb      	ldrb	r3, [r7, #23]
 800c84c:	3301      	adds	r3, #1
 800c84e:	75fb      	strb	r3, [r7, #23]
 800c850:	7dfa      	ldrb	r2, [r7, #23]
 800c852:	79fb      	ldrb	r3, [r7, #7]
 800c854:	429a      	cmp	r2, r3
 800c856:	d3d3      	bcc.n	800c800 <IntToUnicode+0x18>
  }
}
 800c858:	bf00      	nop
 800c85a:	bf00      	nop
 800c85c:	371c      	adds	r7, #28
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
	...

0800c868 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b098      	sub	sp, #96	@ 0x60
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c870:	f107 030c 	add.w	r3, r7, #12
 800c874:	2254      	movs	r2, #84	@ 0x54
 800c876:	2100      	movs	r1, #0
 800c878:	4618      	mov	r0, r3
 800c87a:	f001 fa8a 	bl	800dd92 <memset>
  if(pcdHandle->Instance==USB)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	4a15      	ldr	r2, [pc, #84]	@ (800c8d8 <HAL_PCD_MspInit+0x70>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d122      	bne.n	800c8ce <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c88c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c88e:	2300      	movs	r3, #0
 800c890:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c892:	f107 030c 	add.w	r3, r7, #12
 800c896:	4618      	mov	r0, r3
 800c898:	f7fa fb00 	bl	8006e9c <HAL_RCCEx_PeriphCLKConfig>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d001      	beq.n	800c8a6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800c8a2:	f7f4 fff7 	bl	8001894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c8a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c8dc <HAL_PCD_MspInit+0x74>)
 800c8a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8aa:	4a0c      	ldr	r2, [pc, #48]	@ (800c8dc <HAL_PCD_MspInit+0x74>)
 800c8ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c8b0:	6593      	str	r3, [r2, #88]	@ 0x58
 800c8b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c8dc <HAL_PCD_MspInit+0x74>)
 800c8b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8ba:	60bb      	str	r3, [r7, #8]
 800c8bc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c8be:	2200      	movs	r2, #0
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	2014      	movs	r0, #20
 800c8c4:	f7f7 f95d 	bl	8003b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c8c8:	2014      	movs	r0, #20
 800c8ca:	f7f7 f974 	bl	8003bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c8ce:	bf00      	nop
 800c8d0:	3760      	adds	r7, #96	@ 0x60
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	40005c00 	.word	0x40005c00
 800c8dc:	40021000 	.word	0x40021000

0800c8e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	f7fe fd58 	bl	800b3ac <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c8fc:	bf00      	nop
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	460b      	mov	r3, r1
 800c90e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800c916:	78fa      	ldrb	r2, [r7, #3]
 800c918:	6879      	ldr	r1, [r7, #4]
 800c91a:	4613      	mov	r3, r2
 800c91c:	009b      	lsls	r3, r3, #2
 800c91e:	4413      	add	r3, r2
 800c920:	00db      	lsls	r3, r3, #3
 800c922:	440b      	add	r3, r1
 800c924:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	78fb      	ldrb	r3, [r7, #3]
 800c92c:	4619      	mov	r1, r3
 800c92e:	f7fe fd92 	bl	800b456 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c932:	bf00      	nop
 800c934:	3708      	adds	r7, #8
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b082      	sub	sp, #8
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
 800c942:	460b      	mov	r3, r1
 800c944:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800c94c:	78fa      	ldrb	r2, [r7, #3]
 800c94e:	6879      	ldr	r1, [r7, #4]
 800c950:	4613      	mov	r3, r2
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	4413      	add	r3, r2
 800c956:	00db      	lsls	r3, r3, #3
 800c958:	440b      	add	r3, r1
 800c95a:	3324      	adds	r3, #36	@ 0x24
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	78fb      	ldrb	r3, [r7, #3]
 800c960:	4619      	mov	r1, r3
 800c962:	f7fe fddb 	bl	800b51c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c966:	bf00      	nop
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c96e:	b580      	push	{r7, lr}
 800c970:	b082      	sub	sp, #8
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7fe feef 	bl	800b760 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c982:	bf00      	nop
 800c984:	3708      	adds	r7, #8
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}

0800c98a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b084      	sub	sp, #16
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c992:	2301      	movs	r3, #1
 800c994:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	795b      	ldrb	r3, [r3, #5]
 800c99a:	2b02      	cmp	r3, #2
 800c99c:	d001      	beq.n	800c9a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c99e:	f7f4 ff79 	bl	8001894 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c9a8:	7bfa      	ldrb	r2, [r7, #15]
 800c9aa:	4611      	mov	r1, r2
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7fe fe99 	bl	800b6e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7fe fe45 	bl	800b648 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c9be:	bf00      	nop
 800c9c0:	3710      	adds	r7, #16
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
	...

0800c9c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b082      	sub	sp, #8
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fe fe94 	bl	800b704 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	7a5b      	ldrb	r3, [r3, #9]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d005      	beq.n	800c9f0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9e4:	4b04      	ldr	r3, [pc, #16]	@ (800c9f8 <HAL_PCD_SuspendCallback+0x30>)
 800c9e6:	691b      	ldr	r3, [r3, #16]
 800c9e8:	4a03      	ldr	r2, [pc, #12]	@ (800c9f8 <HAL_PCD_SuspendCallback+0x30>)
 800c9ea:	f043 0306 	orr.w	r3, r3, #6
 800c9ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c9f0:	bf00      	nop
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	e000ed00 	.word	0xe000ed00

0800c9fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	7a5b      	ldrb	r3, [r3, #9]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d007      	beq.n	800ca1c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca0c:	4b08      	ldr	r3, [pc, #32]	@ (800ca30 <HAL_PCD_ResumeCallback+0x34>)
 800ca0e:	691b      	ldr	r3, [r3, #16]
 800ca10:	4a07      	ldr	r2, [pc, #28]	@ (800ca30 <HAL_PCD_ResumeCallback+0x34>)
 800ca12:	f023 0306 	bic.w	r3, r3, #6
 800ca16:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ca18:	f000 f9f8 	bl	800ce0c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7fe fe84 	bl	800b730 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ca28:	bf00      	nop
 800ca2a:	3708      	adds	r7, #8
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}
 800ca30:	e000ed00 	.word	0xe000ed00

0800ca34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ca3c:	4a2b      	ldr	r2, [pc, #172]	@ (800caec <USBD_LL_Init+0xb8>)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4a29      	ldr	r2, [pc, #164]	@ (800caec <USBD_LL_Init+0xb8>)
 800ca48:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800ca4c:	4b27      	ldr	r3, [pc, #156]	@ (800caec <USBD_LL_Init+0xb8>)
 800ca4e:	4a28      	ldr	r2, [pc, #160]	@ (800caf0 <USBD_LL_Init+0xbc>)
 800ca50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ca52:	4b26      	ldr	r3, [pc, #152]	@ (800caec <USBD_LL_Init+0xb8>)
 800ca54:	2208      	movs	r2, #8
 800ca56:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ca58:	4b24      	ldr	r3, [pc, #144]	@ (800caec <USBD_LL_Init+0xb8>)
 800ca5a:	2202      	movs	r2, #2
 800ca5c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ca5e:	4b23      	ldr	r3, [pc, #140]	@ (800caec <USBD_LL_Init+0xb8>)
 800ca60:	2202      	movs	r2, #2
 800ca62:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ca64:	4b21      	ldr	r3, [pc, #132]	@ (800caec <USBD_LL_Init+0xb8>)
 800ca66:	2200      	movs	r2, #0
 800ca68:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ca6a:	4b20      	ldr	r3, [pc, #128]	@ (800caec <USBD_LL_Init+0xb8>)
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ca70:	4b1e      	ldr	r3, [pc, #120]	@ (800caec <USBD_LL_Init+0xb8>)
 800ca72:	2200      	movs	r2, #0
 800ca74:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ca76:	4b1d      	ldr	r3, [pc, #116]	@ (800caec <USBD_LL_Init+0xb8>)
 800ca78:	2200      	movs	r2, #0
 800ca7a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ca7c:	481b      	ldr	r0, [pc, #108]	@ (800caec <USBD_LL_Init+0xb8>)
 800ca7e:	f7f7 ff55 	bl	800492c <HAL_PCD_Init>
 800ca82:	4603      	mov	r3, r0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d001      	beq.n	800ca8c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ca88:	f7f4 ff04 	bl	8001894 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ca92:	2318      	movs	r3, #24
 800ca94:	2200      	movs	r2, #0
 800ca96:	2100      	movs	r1, #0
 800ca98:	f7f9 fbdc 	bl	8006254 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800caa2:	2358      	movs	r3, #88	@ 0x58
 800caa4:	2200      	movs	r2, #0
 800caa6:	2180      	movs	r1, #128	@ 0x80
 800caa8:	f7f9 fbd4 	bl	8006254 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cab2:	23c0      	movs	r3, #192	@ 0xc0
 800cab4:	2200      	movs	r2, #0
 800cab6:	2181      	movs	r1, #129	@ 0x81
 800cab8:	f7f9 fbcc 	bl	8006254 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cac2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cac6:	2200      	movs	r2, #0
 800cac8:	2101      	movs	r1, #1
 800caca:	f7f9 fbc3 	bl	8006254 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cad4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cad8:	2200      	movs	r2, #0
 800cada:	2182      	movs	r1, #130	@ 0x82
 800cadc:	f7f9 fbba 	bl	8006254 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3708      	adds	r7, #8
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	20001a08 	.word	0x20001a08
 800caf0:	40005c00 	.word	0x40005c00

0800caf4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cafc:	2300      	movs	r3, #0
 800cafe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb00:	2300      	movs	r3, #0
 800cb02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7f7 ffdc 	bl	8004ac8 <HAL_PCD_Start>
 800cb10:	4603      	mov	r3, r0
 800cb12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb14:	7bfb      	ldrb	r3, [r7, #15]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f000 f97e 	bl	800ce18 <USBD_Get_USB_Status>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb20:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3710      	adds	r7, #16
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b084      	sub	sp, #16
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
 800cb32:	4608      	mov	r0, r1
 800cb34:	4611      	mov	r1, r2
 800cb36:	461a      	mov	r2, r3
 800cb38:	4603      	mov	r3, r0
 800cb3a:	70fb      	strb	r3, [r7, #3]
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	70bb      	strb	r3, [r7, #2]
 800cb40:	4613      	mov	r3, r2
 800cb42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb44:	2300      	movs	r3, #0
 800cb46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cb52:	78bb      	ldrb	r3, [r7, #2]
 800cb54:	883a      	ldrh	r2, [r7, #0]
 800cb56:	78f9      	ldrb	r1, [r7, #3]
 800cb58:	f7f8 f923 	bl	8004da2 <HAL_PCD_EP_Open>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb60:	7bfb      	ldrb	r3, [r7, #15]
 800cb62:	4618      	mov	r0, r3
 800cb64:	f000 f958 	bl	800ce18 <USBD_Get_USB_Status>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b084      	sub	sp, #16
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
 800cb7e:	460b      	mov	r3, r1
 800cb80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb82:	2300      	movs	r3, #0
 800cb84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb86:	2300      	movs	r3, #0
 800cb88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cb90:	78fa      	ldrb	r2, [r7, #3]
 800cb92:	4611      	mov	r1, r2
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7f8 f963 	bl	8004e60 <HAL_PCD_EP_Close>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb9e:	7bfb      	ldrb	r3, [r7, #15]
 800cba0:	4618      	mov	r0, r3
 800cba2:	f000 f939 	bl	800ce18 <USBD_Get_USB_Status>
 800cba6:	4603      	mov	r3, r0
 800cba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3710      	adds	r7, #16
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cbce:	78fa      	ldrb	r2, [r7, #3]
 800cbd0:	4611      	mov	r1, r2
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7f8 fa0c 	bl	8004ff0 <HAL_PCD_EP_SetStall>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbdc:	7bfb      	ldrb	r3, [r7, #15]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f000 f91a 	bl	800ce18 <USBD_Get_USB_Status>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbe8:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b084      	sub	sp, #16
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc02:	2300      	movs	r3, #0
 800cc04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cc0c:	78fa      	ldrb	r2, [r7, #3]
 800cc0e:	4611      	mov	r1, r2
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7f8 fa3f 	bl	8005094 <HAL_PCD_EP_ClrStall>
 800cc16:	4603      	mov	r3, r0
 800cc18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc1a:	7bfb      	ldrb	r3, [r7, #15]
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f000 f8fb 	bl	800ce18 <USBD_Get_USB_Status>
 800cc22:	4603      	mov	r3, r0
 800cc24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc26:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3710      	adds	r7, #16
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b085      	sub	sp, #20
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	460b      	mov	r3, r1
 800cc3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cc42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cc44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	da0b      	bge.n	800cc64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cc4c:	78fb      	ldrb	r3, [r7, #3]
 800cc4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cc52:	68f9      	ldr	r1, [r7, #12]
 800cc54:	4613      	mov	r3, r2
 800cc56:	009b      	lsls	r3, r3, #2
 800cc58:	4413      	add	r3, r2
 800cc5a:	00db      	lsls	r3, r3, #3
 800cc5c:	440b      	add	r3, r1
 800cc5e:	3312      	adds	r3, #18
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	e00b      	b.n	800cc7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cc64:	78fb      	ldrb	r3, [r7, #3]
 800cc66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cc6a:	68f9      	ldr	r1, [r7, #12]
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	4413      	add	r3, r2
 800cc72:	00db      	lsls	r3, r3, #3
 800cc74:	440b      	add	r3, r1
 800cc76:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800cc7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3714      	adds	r7, #20
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	460b      	mov	r3, r1
 800cc92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cca2:	78fa      	ldrb	r2, [r7, #3]
 800cca4:	4611      	mov	r1, r2
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7f8 f857 	bl	8004d5a <HAL_PCD_SetAddress>
 800ccac:	4603      	mov	r3, r0
 800ccae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccb0:	7bfb      	ldrb	r3, [r7, #15]
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f000 f8b0 	bl	800ce18 <USBD_Get_USB_Status>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b086      	sub	sp, #24
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	60f8      	str	r0, [r7, #12]
 800ccce:	607a      	str	r2, [r7, #4]
 800ccd0:	603b      	str	r3, [r7, #0]
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cce4:	7af9      	ldrb	r1, [r7, #11]
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	f7f8 f94a 	bl	8004f82 <HAL_PCD_EP_Transmit>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccf2:	7dfb      	ldrb	r3, [r7, #23]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f000 f88f 	bl	800ce18 <USBD_Get_USB_Status>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ccfe:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3718      	adds	r7, #24
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b086      	sub	sp, #24
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	607a      	str	r2, [r7, #4]
 800cd12:	603b      	str	r3, [r7, #0]
 800cd14:	460b      	mov	r3, r1
 800cd16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cd26:	7af9      	ldrb	r1, [r7, #11]
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	f7f8 f8e0 	bl	8004ef0 <HAL_PCD_EP_Receive>
 800cd30:	4603      	mov	r3, r0
 800cd32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd34:	7dfb      	ldrb	r3, [r7, #23]
 800cd36:	4618      	mov	r0, r3
 800cd38:	f000 f86e 	bl	800ce18 <USBD_Get_USB_Status>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd40:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3718      	adds	r7, #24
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b082      	sub	sp, #8
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
 800cd52:	460b      	mov	r3, r1
 800cd54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cd5c:	78fa      	ldrb	r2, [r7, #3]
 800cd5e:	4611      	mov	r1, r2
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7f8 f8f6 	bl	8004f52 <HAL_PCD_EP_GetRxCount>
 800cd66:	4603      	mov	r3, r0
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3708      	adds	r7, #8
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	460b      	mov	r3, r1
 800cd7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800cd7c:	78fb      	ldrb	r3, [r7, #3]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d002      	beq.n	800cd88 <HAL_PCDEx_LPM_Callback+0x18>
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d013      	beq.n	800cdae <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800cd86:	e023      	b.n	800cdd0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	7a5b      	ldrb	r3, [r3, #9]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d007      	beq.n	800cda0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cd90:	f000 f83c 	bl	800ce0c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd94:	4b10      	ldr	r3, [pc, #64]	@ (800cdd8 <HAL_PCDEx_LPM_Callback+0x68>)
 800cd96:	691b      	ldr	r3, [r3, #16]
 800cd98:	4a0f      	ldr	r2, [pc, #60]	@ (800cdd8 <HAL_PCDEx_LPM_Callback+0x68>)
 800cd9a:	f023 0306 	bic.w	r3, r3, #6
 800cd9e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fe fcc2 	bl	800b730 <USBD_LL_Resume>
    break;
 800cdac:	e010      	b.n	800cdd0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7fe fca5 	bl	800b704 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	7a5b      	ldrb	r3, [r3, #9]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d005      	beq.n	800cdce <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cdc2:	4b05      	ldr	r3, [pc, #20]	@ (800cdd8 <HAL_PCDEx_LPM_Callback+0x68>)
 800cdc4:	691b      	ldr	r3, [r3, #16]
 800cdc6:	4a04      	ldr	r2, [pc, #16]	@ (800cdd8 <HAL_PCDEx_LPM_Callback+0x68>)
 800cdc8:	f043 0306 	orr.w	r3, r3, #6
 800cdcc:	6113      	str	r3, [r2, #16]
    break;
 800cdce:	bf00      	nop
}
 800cdd0:	bf00      	nop
 800cdd2:	3708      	adds	r7, #8
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}
 800cdd8:	e000ed00 	.word	0xe000ed00

0800cddc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b083      	sub	sp, #12
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cde4:	4b03      	ldr	r3, [pc, #12]	@ (800cdf4 <USBD_static_malloc+0x18>)
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	20001ce4 	.word	0x20001ce4

0800cdf8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]

}
 800ce00:	bf00      	nop
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ce10:	f7f3 ffec 	bl	8000dec <SystemClock_Config>
}
 800ce14:	bf00      	nop
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b085      	sub	sp, #20
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	4603      	mov	r3, r0
 800ce20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce22:	2300      	movs	r3, #0
 800ce24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce26:	79fb      	ldrb	r3, [r7, #7]
 800ce28:	2b03      	cmp	r3, #3
 800ce2a:	d817      	bhi.n	800ce5c <USBD_Get_USB_Status+0x44>
 800ce2c:	a201      	add	r2, pc, #4	@ (adr r2, 800ce34 <USBD_Get_USB_Status+0x1c>)
 800ce2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce32:	bf00      	nop
 800ce34:	0800ce45 	.word	0x0800ce45
 800ce38:	0800ce4b 	.word	0x0800ce4b
 800ce3c:	0800ce51 	.word	0x0800ce51
 800ce40:	0800ce57 	.word	0x0800ce57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ce44:	2300      	movs	r3, #0
 800ce46:	73fb      	strb	r3, [r7, #15]
    break;
 800ce48:	e00b      	b.n	800ce62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce4a:	2303      	movs	r3, #3
 800ce4c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce4e:	e008      	b.n	800ce62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce50:	2301      	movs	r3, #1
 800ce52:	73fb      	strb	r3, [r7, #15]
    break;
 800ce54:	e005      	b.n	800ce62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce56:	2303      	movs	r3, #3
 800ce58:	73fb      	strb	r3, [r7, #15]
    break;
 800ce5a:	e002      	b.n	800ce62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ce5c:	2303      	movs	r3, #3
 800ce5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce60:	bf00      	nop
  }
  return usb_status;
 800ce62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3714      	adds	r7, #20
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr

0800ce70 <__cvt>:
 800ce70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce74:	ec57 6b10 	vmov	r6, r7, d0
 800ce78:	2f00      	cmp	r7, #0
 800ce7a:	460c      	mov	r4, r1
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	463b      	mov	r3, r7
 800ce80:	bfbb      	ittet	lt
 800ce82:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ce86:	461f      	movlt	r7, r3
 800ce88:	2300      	movge	r3, #0
 800ce8a:	232d      	movlt	r3, #45	@ 0x2d
 800ce8c:	700b      	strb	r3, [r1, #0]
 800ce8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce90:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ce94:	4691      	mov	r9, r2
 800ce96:	f023 0820 	bic.w	r8, r3, #32
 800ce9a:	bfbc      	itt	lt
 800ce9c:	4632      	movlt	r2, r6
 800ce9e:	4616      	movlt	r6, r2
 800cea0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cea4:	d005      	beq.n	800ceb2 <__cvt+0x42>
 800cea6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ceaa:	d100      	bne.n	800ceae <__cvt+0x3e>
 800ceac:	3401      	adds	r4, #1
 800ceae:	2102      	movs	r1, #2
 800ceb0:	e000      	b.n	800ceb4 <__cvt+0x44>
 800ceb2:	2103      	movs	r1, #3
 800ceb4:	ab03      	add	r3, sp, #12
 800ceb6:	9301      	str	r3, [sp, #4]
 800ceb8:	ab02      	add	r3, sp, #8
 800ceba:	9300      	str	r3, [sp, #0]
 800cebc:	ec47 6b10 	vmov	d0, r6, r7
 800cec0:	4653      	mov	r3, sl
 800cec2:	4622      	mov	r2, r4
 800cec4:	f001 f874 	bl	800dfb0 <_dtoa_r>
 800cec8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cecc:	4605      	mov	r5, r0
 800cece:	d119      	bne.n	800cf04 <__cvt+0x94>
 800ced0:	f019 0f01 	tst.w	r9, #1
 800ced4:	d00e      	beq.n	800cef4 <__cvt+0x84>
 800ced6:	eb00 0904 	add.w	r9, r0, r4
 800ceda:	2200      	movs	r2, #0
 800cedc:	2300      	movs	r3, #0
 800cede:	4630      	mov	r0, r6
 800cee0:	4639      	mov	r1, r7
 800cee2:	f7f3 fe19 	bl	8000b18 <__aeabi_dcmpeq>
 800cee6:	b108      	cbz	r0, 800ceec <__cvt+0x7c>
 800cee8:	f8cd 900c 	str.w	r9, [sp, #12]
 800ceec:	2230      	movs	r2, #48	@ 0x30
 800ceee:	9b03      	ldr	r3, [sp, #12]
 800cef0:	454b      	cmp	r3, r9
 800cef2:	d31e      	bcc.n	800cf32 <__cvt+0xc2>
 800cef4:	9b03      	ldr	r3, [sp, #12]
 800cef6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cef8:	1b5b      	subs	r3, r3, r5
 800cefa:	4628      	mov	r0, r5
 800cefc:	6013      	str	r3, [r2, #0]
 800cefe:	b004      	add	sp, #16
 800cf00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf08:	eb00 0904 	add.w	r9, r0, r4
 800cf0c:	d1e5      	bne.n	800ceda <__cvt+0x6a>
 800cf0e:	7803      	ldrb	r3, [r0, #0]
 800cf10:	2b30      	cmp	r3, #48	@ 0x30
 800cf12:	d10a      	bne.n	800cf2a <__cvt+0xba>
 800cf14:	2200      	movs	r2, #0
 800cf16:	2300      	movs	r3, #0
 800cf18:	4630      	mov	r0, r6
 800cf1a:	4639      	mov	r1, r7
 800cf1c:	f7f3 fdfc 	bl	8000b18 <__aeabi_dcmpeq>
 800cf20:	b918      	cbnz	r0, 800cf2a <__cvt+0xba>
 800cf22:	f1c4 0401 	rsb	r4, r4, #1
 800cf26:	f8ca 4000 	str.w	r4, [sl]
 800cf2a:	f8da 3000 	ldr.w	r3, [sl]
 800cf2e:	4499      	add	r9, r3
 800cf30:	e7d3      	b.n	800ceda <__cvt+0x6a>
 800cf32:	1c59      	adds	r1, r3, #1
 800cf34:	9103      	str	r1, [sp, #12]
 800cf36:	701a      	strb	r2, [r3, #0]
 800cf38:	e7d9      	b.n	800ceee <__cvt+0x7e>

0800cf3a <__exponent>:
 800cf3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf3c:	2900      	cmp	r1, #0
 800cf3e:	bfba      	itte	lt
 800cf40:	4249      	neglt	r1, r1
 800cf42:	232d      	movlt	r3, #45	@ 0x2d
 800cf44:	232b      	movge	r3, #43	@ 0x2b
 800cf46:	2909      	cmp	r1, #9
 800cf48:	7002      	strb	r2, [r0, #0]
 800cf4a:	7043      	strb	r3, [r0, #1]
 800cf4c:	dd29      	ble.n	800cfa2 <__exponent+0x68>
 800cf4e:	f10d 0307 	add.w	r3, sp, #7
 800cf52:	461d      	mov	r5, r3
 800cf54:	270a      	movs	r7, #10
 800cf56:	461a      	mov	r2, r3
 800cf58:	fbb1 f6f7 	udiv	r6, r1, r7
 800cf5c:	fb07 1416 	mls	r4, r7, r6, r1
 800cf60:	3430      	adds	r4, #48	@ 0x30
 800cf62:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cf66:	460c      	mov	r4, r1
 800cf68:	2c63      	cmp	r4, #99	@ 0x63
 800cf6a:	f103 33ff 	add.w	r3, r3, #4294967295
 800cf6e:	4631      	mov	r1, r6
 800cf70:	dcf1      	bgt.n	800cf56 <__exponent+0x1c>
 800cf72:	3130      	adds	r1, #48	@ 0x30
 800cf74:	1e94      	subs	r4, r2, #2
 800cf76:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cf7a:	1c41      	adds	r1, r0, #1
 800cf7c:	4623      	mov	r3, r4
 800cf7e:	42ab      	cmp	r3, r5
 800cf80:	d30a      	bcc.n	800cf98 <__exponent+0x5e>
 800cf82:	f10d 0309 	add.w	r3, sp, #9
 800cf86:	1a9b      	subs	r3, r3, r2
 800cf88:	42ac      	cmp	r4, r5
 800cf8a:	bf88      	it	hi
 800cf8c:	2300      	movhi	r3, #0
 800cf8e:	3302      	adds	r3, #2
 800cf90:	4403      	add	r3, r0
 800cf92:	1a18      	subs	r0, r3, r0
 800cf94:	b003      	add	sp, #12
 800cf96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf98:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cf9c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cfa0:	e7ed      	b.n	800cf7e <__exponent+0x44>
 800cfa2:	2330      	movs	r3, #48	@ 0x30
 800cfa4:	3130      	adds	r1, #48	@ 0x30
 800cfa6:	7083      	strb	r3, [r0, #2]
 800cfa8:	70c1      	strb	r1, [r0, #3]
 800cfaa:	1d03      	adds	r3, r0, #4
 800cfac:	e7f1      	b.n	800cf92 <__exponent+0x58>
	...

0800cfb0 <_printf_float>:
 800cfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb4:	b08d      	sub	sp, #52	@ 0x34
 800cfb6:	460c      	mov	r4, r1
 800cfb8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cfbc:	4616      	mov	r6, r2
 800cfbe:	461f      	mov	r7, r3
 800cfc0:	4605      	mov	r5, r0
 800cfc2:	f000 feef 	bl	800dda4 <_localeconv_r>
 800cfc6:	6803      	ldr	r3, [r0, #0]
 800cfc8:	9304      	str	r3, [sp, #16]
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7f3 f978 	bl	80002c0 <strlen>
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfd4:	f8d8 3000 	ldr.w	r3, [r8]
 800cfd8:	9005      	str	r0, [sp, #20]
 800cfda:	3307      	adds	r3, #7
 800cfdc:	f023 0307 	bic.w	r3, r3, #7
 800cfe0:	f103 0208 	add.w	r2, r3, #8
 800cfe4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cfe8:	f8d4 b000 	ldr.w	fp, [r4]
 800cfec:	f8c8 2000 	str.w	r2, [r8]
 800cff0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cff4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cff8:	9307      	str	r3, [sp, #28]
 800cffa:	f8cd 8018 	str.w	r8, [sp, #24]
 800cffe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d002:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d006:	4b9c      	ldr	r3, [pc, #624]	@ (800d278 <_printf_float+0x2c8>)
 800d008:	f04f 32ff 	mov.w	r2, #4294967295
 800d00c:	f7f3 fdb6 	bl	8000b7c <__aeabi_dcmpun>
 800d010:	bb70      	cbnz	r0, 800d070 <_printf_float+0xc0>
 800d012:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d016:	4b98      	ldr	r3, [pc, #608]	@ (800d278 <_printf_float+0x2c8>)
 800d018:	f04f 32ff 	mov.w	r2, #4294967295
 800d01c:	f7f3 fd90 	bl	8000b40 <__aeabi_dcmple>
 800d020:	bb30      	cbnz	r0, 800d070 <_printf_float+0xc0>
 800d022:	2200      	movs	r2, #0
 800d024:	2300      	movs	r3, #0
 800d026:	4640      	mov	r0, r8
 800d028:	4649      	mov	r1, r9
 800d02a:	f7f3 fd7f 	bl	8000b2c <__aeabi_dcmplt>
 800d02e:	b110      	cbz	r0, 800d036 <_printf_float+0x86>
 800d030:	232d      	movs	r3, #45	@ 0x2d
 800d032:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d036:	4a91      	ldr	r2, [pc, #580]	@ (800d27c <_printf_float+0x2cc>)
 800d038:	4b91      	ldr	r3, [pc, #580]	@ (800d280 <_printf_float+0x2d0>)
 800d03a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d03e:	bf94      	ite	ls
 800d040:	4690      	movls	r8, r2
 800d042:	4698      	movhi	r8, r3
 800d044:	2303      	movs	r3, #3
 800d046:	6123      	str	r3, [r4, #16]
 800d048:	f02b 0304 	bic.w	r3, fp, #4
 800d04c:	6023      	str	r3, [r4, #0]
 800d04e:	f04f 0900 	mov.w	r9, #0
 800d052:	9700      	str	r7, [sp, #0]
 800d054:	4633      	mov	r3, r6
 800d056:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d058:	4621      	mov	r1, r4
 800d05a:	4628      	mov	r0, r5
 800d05c:	f000 f9d2 	bl	800d404 <_printf_common>
 800d060:	3001      	adds	r0, #1
 800d062:	f040 808d 	bne.w	800d180 <_printf_float+0x1d0>
 800d066:	f04f 30ff 	mov.w	r0, #4294967295
 800d06a:	b00d      	add	sp, #52	@ 0x34
 800d06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d070:	4642      	mov	r2, r8
 800d072:	464b      	mov	r3, r9
 800d074:	4640      	mov	r0, r8
 800d076:	4649      	mov	r1, r9
 800d078:	f7f3 fd80 	bl	8000b7c <__aeabi_dcmpun>
 800d07c:	b140      	cbz	r0, 800d090 <_printf_float+0xe0>
 800d07e:	464b      	mov	r3, r9
 800d080:	2b00      	cmp	r3, #0
 800d082:	bfbc      	itt	lt
 800d084:	232d      	movlt	r3, #45	@ 0x2d
 800d086:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d08a:	4a7e      	ldr	r2, [pc, #504]	@ (800d284 <_printf_float+0x2d4>)
 800d08c:	4b7e      	ldr	r3, [pc, #504]	@ (800d288 <_printf_float+0x2d8>)
 800d08e:	e7d4      	b.n	800d03a <_printf_float+0x8a>
 800d090:	6863      	ldr	r3, [r4, #4]
 800d092:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d096:	9206      	str	r2, [sp, #24]
 800d098:	1c5a      	adds	r2, r3, #1
 800d09a:	d13b      	bne.n	800d114 <_printf_float+0x164>
 800d09c:	2306      	movs	r3, #6
 800d09e:	6063      	str	r3, [r4, #4]
 800d0a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	6022      	str	r2, [r4, #0]
 800d0a8:	9303      	str	r3, [sp, #12]
 800d0aa:	ab0a      	add	r3, sp, #40	@ 0x28
 800d0ac:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d0b0:	ab09      	add	r3, sp, #36	@ 0x24
 800d0b2:	9300      	str	r3, [sp, #0]
 800d0b4:	6861      	ldr	r1, [r4, #4]
 800d0b6:	ec49 8b10 	vmov	d0, r8, r9
 800d0ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d0be:	4628      	mov	r0, r5
 800d0c0:	f7ff fed6 	bl	800ce70 <__cvt>
 800d0c4:	9b06      	ldr	r3, [sp, #24]
 800d0c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d0c8:	2b47      	cmp	r3, #71	@ 0x47
 800d0ca:	4680      	mov	r8, r0
 800d0cc:	d129      	bne.n	800d122 <_printf_float+0x172>
 800d0ce:	1cc8      	adds	r0, r1, #3
 800d0d0:	db02      	blt.n	800d0d8 <_printf_float+0x128>
 800d0d2:	6863      	ldr	r3, [r4, #4]
 800d0d4:	4299      	cmp	r1, r3
 800d0d6:	dd41      	ble.n	800d15c <_printf_float+0x1ac>
 800d0d8:	f1aa 0a02 	sub.w	sl, sl, #2
 800d0dc:	fa5f fa8a 	uxtb.w	sl, sl
 800d0e0:	3901      	subs	r1, #1
 800d0e2:	4652      	mov	r2, sl
 800d0e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d0e8:	9109      	str	r1, [sp, #36]	@ 0x24
 800d0ea:	f7ff ff26 	bl	800cf3a <__exponent>
 800d0ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d0f0:	1813      	adds	r3, r2, r0
 800d0f2:	2a01      	cmp	r2, #1
 800d0f4:	4681      	mov	r9, r0
 800d0f6:	6123      	str	r3, [r4, #16]
 800d0f8:	dc02      	bgt.n	800d100 <_printf_float+0x150>
 800d0fa:	6822      	ldr	r2, [r4, #0]
 800d0fc:	07d2      	lsls	r2, r2, #31
 800d0fe:	d501      	bpl.n	800d104 <_printf_float+0x154>
 800d100:	3301      	adds	r3, #1
 800d102:	6123      	str	r3, [r4, #16]
 800d104:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d0a2      	beq.n	800d052 <_printf_float+0xa2>
 800d10c:	232d      	movs	r3, #45	@ 0x2d
 800d10e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d112:	e79e      	b.n	800d052 <_printf_float+0xa2>
 800d114:	9a06      	ldr	r2, [sp, #24]
 800d116:	2a47      	cmp	r2, #71	@ 0x47
 800d118:	d1c2      	bne.n	800d0a0 <_printf_float+0xf0>
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d1c0      	bne.n	800d0a0 <_printf_float+0xf0>
 800d11e:	2301      	movs	r3, #1
 800d120:	e7bd      	b.n	800d09e <_printf_float+0xee>
 800d122:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d126:	d9db      	bls.n	800d0e0 <_printf_float+0x130>
 800d128:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d12c:	d118      	bne.n	800d160 <_printf_float+0x1b0>
 800d12e:	2900      	cmp	r1, #0
 800d130:	6863      	ldr	r3, [r4, #4]
 800d132:	dd0b      	ble.n	800d14c <_printf_float+0x19c>
 800d134:	6121      	str	r1, [r4, #16]
 800d136:	b913      	cbnz	r3, 800d13e <_printf_float+0x18e>
 800d138:	6822      	ldr	r2, [r4, #0]
 800d13a:	07d0      	lsls	r0, r2, #31
 800d13c:	d502      	bpl.n	800d144 <_printf_float+0x194>
 800d13e:	3301      	adds	r3, #1
 800d140:	440b      	add	r3, r1
 800d142:	6123      	str	r3, [r4, #16]
 800d144:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d146:	f04f 0900 	mov.w	r9, #0
 800d14a:	e7db      	b.n	800d104 <_printf_float+0x154>
 800d14c:	b913      	cbnz	r3, 800d154 <_printf_float+0x1a4>
 800d14e:	6822      	ldr	r2, [r4, #0]
 800d150:	07d2      	lsls	r2, r2, #31
 800d152:	d501      	bpl.n	800d158 <_printf_float+0x1a8>
 800d154:	3302      	adds	r3, #2
 800d156:	e7f4      	b.n	800d142 <_printf_float+0x192>
 800d158:	2301      	movs	r3, #1
 800d15a:	e7f2      	b.n	800d142 <_printf_float+0x192>
 800d15c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d160:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d162:	4299      	cmp	r1, r3
 800d164:	db05      	blt.n	800d172 <_printf_float+0x1c2>
 800d166:	6823      	ldr	r3, [r4, #0]
 800d168:	6121      	str	r1, [r4, #16]
 800d16a:	07d8      	lsls	r0, r3, #31
 800d16c:	d5ea      	bpl.n	800d144 <_printf_float+0x194>
 800d16e:	1c4b      	adds	r3, r1, #1
 800d170:	e7e7      	b.n	800d142 <_printf_float+0x192>
 800d172:	2900      	cmp	r1, #0
 800d174:	bfd4      	ite	le
 800d176:	f1c1 0202 	rsble	r2, r1, #2
 800d17a:	2201      	movgt	r2, #1
 800d17c:	4413      	add	r3, r2
 800d17e:	e7e0      	b.n	800d142 <_printf_float+0x192>
 800d180:	6823      	ldr	r3, [r4, #0]
 800d182:	055a      	lsls	r2, r3, #21
 800d184:	d407      	bmi.n	800d196 <_printf_float+0x1e6>
 800d186:	6923      	ldr	r3, [r4, #16]
 800d188:	4642      	mov	r2, r8
 800d18a:	4631      	mov	r1, r6
 800d18c:	4628      	mov	r0, r5
 800d18e:	47b8      	blx	r7
 800d190:	3001      	adds	r0, #1
 800d192:	d12b      	bne.n	800d1ec <_printf_float+0x23c>
 800d194:	e767      	b.n	800d066 <_printf_float+0xb6>
 800d196:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d19a:	f240 80dd 	bls.w	800d358 <_printf_float+0x3a8>
 800d19e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	f7f3 fcb7 	bl	8000b18 <__aeabi_dcmpeq>
 800d1aa:	2800      	cmp	r0, #0
 800d1ac:	d033      	beq.n	800d216 <_printf_float+0x266>
 800d1ae:	4a37      	ldr	r2, [pc, #220]	@ (800d28c <_printf_float+0x2dc>)
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	4631      	mov	r1, r6
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	47b8      	blx	r7
 800d1b8:	3001      	adds	r0, #1
 800d1ba:	f43f af54 	beq.w	800d066 <_printf_float+0xb6>
 800d1be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d1c2:	4543      	cmp	r3, r8
 800d1c4:	db02      	blt.n	800d1cc <_printf_float+0x21c>
 800d1c6:	6823      	ldr	r3, [r4, #0]
 800d1c8:	07d8      	lsls	r0, r3, #31
 800d1ca:	d50f      	bpl.n	800d1ec <_printf_float+0x23c>
 800d1cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1d0:	4631      	mov	r1, r6
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	47b8      	blx	r7
 800d1d6:	3001      	adds	r0, #1
 800d1d8:	f43f af45 	beq.w	800d066 <_printf_float+0xb6>
 800d1dc:	f04f 0900 	mov.w	r9, #0
 800d1e0:	f108 38ff 	add.w	r8, r8, #4294967295
 800d1e4:	f104 0a1a 	add.w	sl, r4, #26
 800d1e8:	45c8      	cmp	r8, r9
 800d1ea:	dc09      	bgt.n	800d200 <_printf_float+0x250>
 800d1ec:	6823      	ldr	r3, [r4, #0]
 800d1ee:	079b      	lsls	r3, r3, #30
 800d1f0:	f100 8103 	bmi.w	800d3fa <_printf_float+0x44a>
 800d1f4:	68e0      	ldr	r0, [r4, #12]
 800d1f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1f8:	4298      	cmp	r0, r3
 800d1fa:	bfb8      	it	lt
 800d1fc:	4618      	movlt	r0, r3
 800d1fe:	e734      	b.n	800d06a <_printf_float+0xba>
 800d200:	2301      	movs	r3, #1
 800d202:	4652      	mov	r2, sl
 800d204:	4631      	mov	r1, r6
 800d206:	4628      	mov	r0, r5
 800d208:	47b8      	blx	r7
 800d20a:	3001      	adds	r0, #1
 800d20c:	f43f af2b 	beq.w	800d066 <_printf_float+0xb6>
 800d210:	f109 0901 	add.w	r9, r9, #1
 800d214:	e7e8      	b.n	800d1e8 <_printf_float+0x238>
 800d216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d218:	2b00      	cmp	r3, #0
 800d21a:	dc39      	bgt.n	800d290 <_printf_float+0x2e0>
 800d21c:	4a1b      	ldr	r2, [pc, #108]	@ (800d28c <_printf_float+0x2dc>)
 800d21e:	2301      	movs	r3, #1
 800d220:	4631      	mov	r1, r6
 800d222:	4628      	mov	r0, r5
 800d224:	47b8      	blx	r7
 800d226:	3001      	adds	r0, #1
 800d228:	f43f af1d 	beq.w	800d066 <_printf_float+0xb6>
 800d22c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d230:	ea59 0303 	orrs.w	r3, r9, r3
 800d234:	d102      	bne.n	800d23c <_printf_float+0x28c>
 800d236:	6823      	ldr	r3, [r4, #0]
 800d238:	07d9      	lsls	r1, r3, #31
 800d23a:	d5d7      	bpl.n	800d1ec <_printf_float+0x23c>
 800d23c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d240:	4631      	mov	r1, r6
 800d242:	4628      	mov	r0, r5
 800d244:	47b8      	blx	r7
 800d246:	3001      	adds	r0, #1
 800d248:	f43f af0d 	beq.w	800d066 <_printf_float+0xb6>
 800d24c:	f04f 0a00 	mov.w	sl, #0
 800d250:	f104 0b1a 	add.w	fp, r4, #26
 800d254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d256:	425b      	negs	r3, r3
 800d258:	4553      	cmp	r3, sl
 800d25a:	dc01      	bgt.n	800d260 <_printf_float+0x2b0>
 800d25c:	464b      	mov	r3, r9
 800d25e:	e793      	b.n	800d188 <_printf_float+0x1d8>
 800d260:	2301      	movs	r3, #1
 800d262:	465a      	mov	r2, fp
 800d264:	4631      	mov	r1, r6
 800d266:	4628      	mov	r0, r5
 800d268:	47b8      	blx	r7
 800d26a:	3001      	adds	r0, #1
 800d26c:	f43f aefb 	beq.w	800d066 <_printf_float+0xb6>
 800d270:	f10a 0a01 	add.w	sl, sl, #1
 800d274:	e7ee      	b.n	800d254 <_printf_float+0x2a4>
 800d276:	bf00      	nop
 800d278:	7fefffff 	.word	0x7fefffff
 800d27c:	080115b0 	.word	0x080115b0
 800d280:	080115b4 	.word	0x080115b4
 800d284:	080115b8 	.word	0x080115b8
 800d288:	080115bc 	.word	0x080115bc
 800d28c:	080115c0 	.word	0x080115c0
 800d290:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d292:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d296:	4553      	cmp	r3, sl
 800d298:	bfa8      	it	ge
 800d29a:	4653      	movge	r3, sl
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	4699      	mov	r9, r3
 800d2a0:	dc36      	bgt.n	800d310 <_printf_float+0x360>
 800d2a2:	f04f 0b00 	mov.w	fp, #0
 800d2a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2aa:	f104 021a 	add.w	r2, r4, #26
 800d2ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d2b0:	9306      	str	r3, [sp, #24]
 800d2b2:	eba3 0309 	sub.w	r3, r3, r9
 800d2b6:	455b      	cmp	r3, fp
 800d2b8:	dc31      	bgt.n	800d31e <_printf_float+0x36e>
 800d2ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2bc:	459a      	cmp	sl, r3
 800d2be:	dc3a      	bgt.n	800d336 <_printf_float+0x386>
 800d2c0:	6823      	ldr	r3, [r4, #0]
 800d2c2:	07da      	lsls	r2, r3, #31
 800d2c4:	d437      	bmi.n	800d336 <_printf_float+0x386>
 800d2c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2c8:	ebaa 0903 	sub.w	r9, sl, r3
 800d2cc:	9b06      	ldr	r3, [sp, #24]
 800d2ce:	ebaa 0303 	sub.w	r3, sl, r3
 800d2d2:	4599      	cmp	r9, r3
 800d2d4:	bfa8      	it	ge
 800d2d6:	4699      	movge	r9, r3
 800d2d8:	f1b9 0f00 	cmp.w	r9, #0
 800d2dc:	dc33      	bgt.n	800d346 <_printf_float+0x396>
 800d2de:	f04f 0800 	mov.w	r8, #0
 800d2e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2e6:	f104 0b1a 	add.w	fp, r4, #26
 800d2ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2ec:	ebaa 0303 	sub.w	r3, sl, r3
 800d2f0:	eba3 0309 	sub.w	r3, r3, r9
 800d2f4:	4543      	cmp	r3, r8
 800d2f6:	f77f af79 	ble.w	800d1ec <_printf_float+0x23c>
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	465a      	mov	r2, fp
 800d2fe:	4631      	mov	r1, r6
 800d300:	4628      	mov	r0, r5
 800d302:	47b8      	blx	r7
 800d304:	3001      	adds	r0, #1
 800d306:	f43f aeae 	beq.w	800d066 <_printf_float+0xb6>
 800d30a:	f108 0801 	add.w	r8, r8, #1
 800d30e:	e7ec      	b.n	800d2ea <_printf_float+0x33a>
 800d310:	4642      	mov	r2, r8
 800d312:	4631      	mov	r1, r6
 800d314:	4628      	mov	r0, r5
 800d316:	47b8      	blx	r7
 800d318:	3001      	adds	r0, #1
 800d31a:	d1c2      	bne.n	800d2a2 <_printf_float+0x2f2>
 800d31c:	e6a3      	b.n	800d066 <_printf_float+0xb6>
 800d31e:	2301      	movs	r3, #1
 800d320:	4631      	mov	r1, r6
 800d322:	4628      	mov	r0, r5
 800d324:	9206      	str	r2, [sp, #24]
 800d326:	47b8      	blx	r7
 800d328:	3001      	adds	r0, #1
 800d32a:	f43f ae9c 	beq.w	800d066 <_printf_float+0xb6>
 800d32e:	9a06      	ldr	r2, [sp, #24]
 800d330:	f10b 0b01 	add.w	fp, fp, #1
 800d334:	e7bb      	b.n	800d2ae <_printf_float+0x2fe>
 800d336:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d33a:	4631      	mov	r1, r6
 800d33c:	4628      	mov	r0, r5
 800d33e:	47b8      	blx	r7
 800d340:	3001      	adds	r0, #1
 800d342:	d1c0      	bne.n	800d2c6 <_printf_float+0x316>
 800d344:	e68f      	b.n	800d066 <_printf_float+0xb6>
 800d346:	9a06      	ldr	r2, [sp, #24]
 800d348:	464b      	mov	r3, r9
 800d34a:	4442      	add	r2, r8
 800d34c:	4631      	mov	r1, r6
 800d34e:	4628      	mov	r0, r5
 800d350:	47b8      	blx	r7
 800d352:	3001      	adds	r0, #1
 800d354:	d1c3      	bne.n	800d2de <_printf_float+0x32e>
 800d356:	e686      	b.n	800d066 <_printf_float+0xb6>
 800d358:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d35c:	f1ba 0f01 	cmp.w	sl, #1
 800d360:	dc01      	bgt.n	800d366 <_printf_float+0x3b6>
 800d362:	07db      	lsls	r3, r3, #31
 800d364:	d536      	bpl.n	800d3d4 <_printf_float+0x424>
 800d366:	2301      	movs	r3, #1
 800d368:	4642      	mov	r2, r8
 800d36a:	4631      	mov	r1, r6
 800d36c:	4628      	mov	r0, r5
 800d36e:	47b8      	blx	r7
 800d370:	3001      	adds	r0, #1
 800d372:	f43f ae78 	beq.w	800d066 <_printf_float+0xb6>
 800d376:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d37a:	4631      	mov	r1, r6
 800d37c:	4628      	mov	r0, r5
 800d37e:	47b8      	blx	r7
 800d380:	3001      	adds	r0, #1
 800d382:	f43f ae70 	beq.w	800d066 <_printf_float+0xb6>
 800d386:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d38a:	2200      	movs	r2, #0
 800d38c:	2300      	movs	r3, #0
 800d38e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d392:	f7f3 fbc1 	bl	8000b18 <__aeabi_dcmpeq>
 800d396:	b9c0      	cbnz	r0, 800d3ca <_printf_float+0x41a>
 800d398:	4653      	mov	r3, sl
 800d39a:	f108 0201 	add.w	r2, r8, #1
 800d39e:	4631      	mov	r1, r6
 800d3a0:	4628      	mov	r0, r5
 800d3a2:	47b8      	blx	r7
 800d3a4:	3001      	adds	r0, #1
 800d3a6:	d10c      	bne.n	800d3c2 <_printf_float+0x412>
 800d3a8:	e65d      	b.n	800d066 <_printf_float+0xb6>
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	465a      	mov	r2, fp
 800d3ae:	4631      	mov	r1, r6
 800d3b0:	4628      	mov	r0, r5
 800d3b2:	47b8      	blx	r7
 800d3b4:	3001      	adds	r0, #1
 800d3b6:	f43f ae56 	beq.w	800d066 <_printf_float+0xb6>
 800d3ba:	f108 0801 	add.w	r8, r8, #1
 800d3be:	45d0      	cmp	r8, sl
 800d3c0:	dbf3      	blt.n	800d3aa <_printf_float+0x3fa>
 800d3c2:	464b      	mov	r3, r9
 800d3c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d3c8:	e6df      	b.n	800d18a <_printf_float+0x1da>
 800d3ca:	f04f 0800 	mov.w	r8, #0
 800d3ce:	f104 0b1a 	add.w	fp, r4, #26
 800d3d2:	e7f4      	b.n	800d3be <_printf_float+0x40e>
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	4642      	mov	r2, r8
 800d3d8:	e7e1      	b.n	800d39e <_printf_float+0x3ee>
 800d3da:	2301      	movs	r3, #1
 800d3dc:	464a      	mov	r2, r9
 800d3de:	4631      	mov	r1, r6
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	47b8      	blx	r7
 800d3e4:	3001      	adds	r0, #1
 800d3e6:	f43f ae3e 	beq.w	800d066 <_printf_float+0xb6>
 800d3ea:	f108 0801 	add.w	r8, r8, #1
 800d3ee:	68e3      	ldr	r3, [r4, #12]
 800d3f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d3f2:	1a5b      	subs	r3, r3, r1
 800d3f4:	4543      	cmp	r3, r8
 800d3f6:	dcf0      	bgt.n	800d3da <_printf_float+0x42a>
 800d3f8:	e6fc      	b.n	800d1f4 <_printf_float+0x244>
 800d3fa:	f04f 0800 	mov.w	r8, #0
 800d3fe:	f104 0919 	add.w	r9, r4, #25
 800d402:	e7f4      	b.n	800d3ee <_printf_float+0x43e>

0800d404 <_printf_common>:
 800d404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d408:	4616      	mov	r6, r2
 800d40a:	4698      	mov	r8, r3
 800d40c:	688a      	ldr	r2, [r1, #8]
 800d40e:	690b      	ldr	r3, [r1, #16]
 800d410:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d414:	4293      	cmp	r3, r2
 800d416:	bfb8      	it	lt
 800d418:	4613      	movlt	r3, r2
 800d41a:	6033      	str	r3, [r6, #0]
 800d41c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d420:	4607      	mov	r7, r0
 800d422:	460c      	mov	r4, r1
 800d424:	b10a      	cbz	r2, 800d42a <_printf_common+0x26>
 800d426:	3301      	adds	r3, #1
 800d428:	6033      	str	r3, [r6, #0]
 800d42a:	6823      	ldr	r3, [r4, #0]
 800d42c:	0699      	lsls	r1, r3, #26
 800d42e:	bf42      	ittt	mi
 800d430:	6833      	ldrmi	r3, [r6, #0]
 800d432:	3302      	addmi	r3, #2
 800d434:	6033      	strmi	r3, [r6, #0]
 800d436:	6825      	ldr	r5, [r4, #0]
 800d438:	f015 0506 	ands.w	r5, r5, #6
 800d43c:	d106      	bne.n	800d44c <_printf_common+0x48>
 800d43e:	f104 0a19 	add.w	sl, r4, #25
 800d442:	68e3      	ldr	r3, [r4, #12]
 800d444:	6832      	ldr	r2, [r6, #0]
 800d446:	1a9b      	subs	r3, r3, r2
 800d448:	42ab      	cmp	r3, r5
 800d44a:	dc26      	bgt.n	800d49a <_printf_common+0x96>
 800d44c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d450:	6822      	ldr	r2, [r4, #0]
 800d452:	3b00      	subs	r3, #0
 800d454:	bf18      	it	ne
 800d456:	2301      	movne	r3, #1
 800d458:	0692      	lsls	r2, r2, #26
 800d45a:	d42b      	bmi.n	800d4b4 <_printf_common+0xb0>
 800d45c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d460:	4641      	mov	r1, r8
 800d462:	4638      	mov	r0, r7
 800d464:	47c8      	blx	r9
 800d466:	3001      	adds	r0, #1
 800d468:	d01e      	beq.n	800d4a8 <_printf_common+0xa4>
 800d46a:	6823      	ldr	r3, [r4, #0]
 800d46c:	6922      	ldr	r2, [r4, #16]
 800d46e:	f003 0306 	and.w	r3, r3, #6
 800d472:	2b04      	cmp	r3, #4
 800d474:	bf02      	ittt	eq
 800d476:	68e5      	ldreq	r5, [r4, #12]
 800d478:	6833      	ldreq	r3, [r6, #0]
 800d47a:	1aed      	subeq	r5, r5, r3
 800d47c:	68a3      	ldr	r3, [r4, #8]
 800d47e:	bf0c      	ite	eq
 800d480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d484:	2500      	movne	r5, #0
 800d486:	4293      	cmp	r3, r2
 800d488:	bfc4      	itt	gt
 800d48a:	1a9b      	subgt	r3, r3, r2
 800d48c:	18ed      	addgt	r5, r5, r3
 800d48e:	2600      	movs	r6, #0
 800d490:	341a      	adds	r4, #26
 800d492:	42b5      	cmp	r5, r6
 800d494:	d11a      	bne.n	800d4cc <_printf_common+0xc8>
 800d496:	2000      	movs	r0, #0
 800d498:	e008      	b.n	800d4ac <_printf_common+0xa8>
 800d49a:	2301      	movs	r3, #1
 800d49c:	4652      	mov	r2, sl
 800d49e:	4641      	mov	r1, r8
 800d4a0:	4638      	mov	r0, r7
 800d4a2:	47c8      	blx	r9
 800d4a4:	3001      	adds	r0, #1
 800d4a6:	d103      	bne.n	800d4b0 <_printf_common+0xac>
 800d4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4b0:	3501      	adds	r5, #1
 800d4b2:	e7c6      	b.n	800d442 <_printf_common+0x3e>
 800d4b4:	18e1      	adds	r1, r4, r3
 800d4b6:	1c5a      	adds	r2, r3, #1
 800d4b8:	2030      	movs	r0, #48	@ 0x30
 800d4ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d4be:	4422      	add	r2, r4
 800d4c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d4c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d4c8:	3302      	adds	r3, #2
 800d4ca:	e7c7      	b.n	800d45c <_printf_common+0x58>
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	4622      	mov	r2, r4
 800d4d0:	4641      	mov	r1, r8
 800d4d2:	4638      	mov	r0, r7
 800d4d4:	47c8      	blx	r9
 800d4d6:	3001      	adds	r0, #1
 800d4d8:	d0e6      	beq.n	800d4a8 <_printf_common+0xa4>
 800d4da:	3601      	adds	r6, #1
 800d4dc:	e7d9      	b.n	800d492 <_printf_common+0x8e>
	...

0800d4e0 <_printf_i>:
 800d4e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4e4:	7e0f      	ldrb	r7, [r1, #24]
 800d4e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d4e8:	2f78      	cmp	r7, #120	@ 0x78
 800d4ea:	4691      	mov	r9, r2
 800d4ec:	4680      	mov	r8, r0
 800d4ee:	460c      	mov	r4, r1
 800d4f0:	469a      	mov	sl, r3
 800d4f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d4f6:	d807      	bhi.n	800d508 <_printf_i+0x28>
 800d4f8:	2f62      	cmp	r7, #98	@ 0x62
 800d4fa:	d80a      	bhi.n	800d512 <_printf_i+0x32>
 800d4fc:	2f00      	cmp	r7, #0
 800d4fe:	f000 80d2 	beq.w	800d6a6 <_printf_i+0x1c6>
 800d502:	2f58      	cmp	r7, #88	@ 0x58
 800d504:	f000 80b9 	beq.w	800d67a <_printf_i+0x19a>
 800d508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d50c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d510:	e03a      	b.n	800d588 <_printf_i+0xa8>
 800d512:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d516:	2b15      	cmp	r3, #21
 800d518:	d8f6      	bhi.n	800d508 <_printf_i+0x28>
 800d51a:	a101      	add	r1, pc, #4	@ (adr r1, 800d520 <_printf_i+0x40>)
 800d51c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d520:	0800d579 	.word	0x0800d579
 800d524:	0800d58d 	.word	0x0800d58d
 800d528:	0800d509 	.word	0x0800d509
 800d52c:	0800d509 	.word	0x0800d509
 800d530:	0800d509 	.word	0x0800d509
 800d534:	0800d509 	.word	0x0800d509
 800d538:	0800d58d 	.word	0x0800d58d
 800d53c:	0800d509 	.word	0x0800d509
 800d540:	0800d509 	.word	0x0800d509
 800d544:	0800d509 	.word	0x0800d509
 800d548:	0800d509 	.word	0x0800d509
 800d54c:	0800d68d 	.word	0x0800d68d
 800d550:	0800d5b7 	.word	0x0800d5b7
 800d554:	0800d647 	.word	0x0800d647
 800d558:	0800d509 	.word	0x0800d509
 800d55c:	0800d509 	.word	0x0800d509
 800d560:	0800d6af 	.word	0x0800d6af
 800d564:	0800d509 	.word	0x0800d509
 800d568:	0800d5b7 	.word	0x0800d5b7
 800d56c:	0800d509 	.word	0x0800d509
 800d570:	0800d509 	.word	0x0800d509
 800d574:	0800d64f 	.word	0x0800d64f
 800d578:	6833      	ldr	r3, [r6, #0]
 800d57a:	1d1a      	adds	r2, r3, #4
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	6032      	str	r2, [r6, #0]
 800d580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d584:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d588:	2301      	movs	r3, #1
 800d58a:	e09d      	b.n	800d6c8 <_printf_i+0x1e8>
 800d58c:	6833      	ldr	r3, [r6, #0]
 800d58e:	6820      	ldr	r0, [r4, #0]
 800d590:	1d19      	adds	r1, r3, #4
 800d592:	6031      	str	r1, [r6, #0]
 800d594:	0606      	lsls	r6, r0, #24
 800d596:	d501      	bpl.n	800d59c <_printf_i+0xbc>
 800d598:	681d      	ldr	r5, [r3, #0]
 800d59a:	e003      	b.n	800d5a4 <_printf_i+0xc4>
 800d59c:	0645      	lsls	r5, r0, #25
 800d59e:	d5fb      	bpl.n	800d598 <_printf_i+0xb8>
 800d5a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d5a4:	2d00      	cmp	r5, #0
 800d5a6:	da03      	bge.n	800d5b0 <_printf_i+0xd0>
 800d5a8:	232d      	movs	r3, #45	@ 0x2d
 800d5aa:	426d      	negs	r5, r5
 800d5ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5b0:	4859      	ldr	r0, [pc, #356]	@ (800d718 <_printf_i+0x238>)
 800d5b2:	230a      	movs	r3, #10
 800d5b4:	e011      	b.n	800d5da <_printf_i+0xfa>
 800d5b6:	6821      	ldr	r1, [r4, #0]
 800d5b8:	6833      	ldr	r3, [r6, #0]
 800d5ba:	0608      	lsls	r0, r1, #24
 800d5bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800d5c0:	d402      	bmi.n	800d5c8 <_printf_i+0xe8>
 800d5c2:	0649      	lsls	r1, r1, #25
 800d5c4:	bf48      	it	mi
 800d5c6:	b2ad      	uxthmi	r5, r5
 800d5c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800d5ca:	4853      	ldr	r0, [pc, #332]	@ (800d718 <_printf_i+0x238>)
 800d5cc:	6033      	str	r3, [r6, #0]
 800d5ce:	bf14      	ite	ne
 800d5d0:	230a      	movne	r3, #10
 800d5d2:	2308      	moveq	r3, #8
 800d5d4:	2100      	movs	r1, #0
 800d5d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d5da:	6866      	ldr	r6, [r4, #4]
 800d5dc:	60a6      	str	r6, [r4, #8]
 800d5de:	2e00      	cmp	r6, #0
 800d5e0:	bfa2      	ittt	ge
 800d5e2:	6821      	ldrge	r1, [r4, #0]
 800d5e4:	f021 0104 	bicge.w	r1, r1, #4
 800d5e8:	6021      	strge	r1, [r4, #0]
 800d5ea:	b90d      	cbnz	r5, 800d5f0 <_printf_i+0x110>
 800d5ec:	2e00      	cmp	r6, #0
 800d5ee:	d04b      	beq.n	800d688 <_printf_i+0x1a8>
 800d5f0:	4616      	mov	r6, r2
 800d5f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d5f6:	fb03 5711 	mls	r7, r3, r1, r5
 800d5fa:	5dc7      	ldrb	r7, [r0, r7]
 800d5fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d600:	462f      	mov	r7, r5
 800d602:	42bb      	cmp	r3, r7
 800d604:	460d      	mov	r5, r1
 800d606:	d9f4      	bls.n	800d5f2 <_printf_i+0x112>
 800d608:	2b08      	cmp	r3, #8
 800d60a:	d10b      	bne.n	800d624 <_printf_i+0x144>
 800d60c:	6823      	ldr	r3, [r4, #0]
 800d60e:	07df      	lsls	r7, r3, #31
 800d610:	d508      	bpl.n	800d624 <_printf_i+0x144>
 800d612:	6923      	ldr	r3, [r4, #16]
 800d614:	6861      	ldr	r1, [r4, #4]
 800d616:	4299      	cmp	r1, r3
 800d618:	bfde      	ittt	le
 800d61a:	2330      	movle	r3, #48	@ 0x30
 800d61c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d620:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d624:	1b92      	subs	r2, r2, r6
 800d626:	6122      	str	r2, [r4, #16]
 800d628:	f8cd a000 	str.w	sl, [sp]
 800d62c:	464b      	mov	r3, r9
 800d62e:	aa03      	add	r2, sp, #12
 800d630:	4621      	mov	r1, r4
 800d632:	4640      	mov	r0, r8
 800d634:	f7ff fee6 	bl	800d404 <_printf_common>
 800d638:	3001      	adds	r0, #1
 800d63a:	d14a      	bne.n	800d6d2 <_printf_i+0x1f2>
 800d63c:	f04f 30ff 	mov.w	r0, #4294967295
 800d640:	b004      	add	sp, #16
 800d642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d646:	6823      	ldr	r3, [r4, #0]
 800d648:	f043 0320 	orr.w	r3, r3, #32
 800d64c:	6023      	str	r3, [r4, #0]
 800d64e:	4833      	ldr	r0, [pc, #204]	@ (800d71c <_printf_i+0x23c>)
 800d650:	2778      	movs	r7, #120	@ 0x78
 800d652:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d656:	6823      	ldr	r3, [r4, #0]
 800d658:	6831      	ldr	r1, [r6, #0]
 800d65a:	061f      	lsls	r7, r3, #24
 800d65c:	f851 5b04 	ldr.w	r5, [r1], #4
 800d660:	d402      	bmi.n	800d668 <_printf_i+0x188>
 800d662:	065f      	lsls	r7, r3, #25
 800d664:	bf48      	it	mi
 800d666:	b2ad      	uxthmi	r5, r5
 800d668:	6031      	str	r1, [r6, #0]
 800d66a:	07d9      	lsls	r1, r3, #31
 800d66c:	bf44      	itt	mi
 800d66e:	f043 0320 	orrmi.w	r3, r3, #32
 800d672:	6023      	strmi	r3, [r4, #0]
 800d674:	b11d      	cbz	r5, 800d67e <_printf_i+0x19e>
 800d676:	2310      	movs	r3, #16
 800d678:	e7ac      	b.n	800d5d4 <_printf_i+0xf4>
 800d67a:	4827      	ldr	r0, [pc, #156]	@ (800d718 <_printf_i+0x238>)
 800d67c:	e7e9      	b.n	800d652 <_printf_i+0x172>
 800d67e:	6823      	ldr	r3, [r4, #0]
 800d680:	f023 0320 	bic.w	r3, r3, #32
 800d684:	6023      	str	r3, [r4, #0]
 800d686:	e7f6      	b.n	800d676 <_printf_i+0x196>
 800d688:	4616      	mov	r6, r2
 800d68a:	e7bd      	b.n	800d608 <_printf_i+0x128>
 800d68c:	6833      	ldr	r3, [r6, #0]
 800d68e:	6825      	ldr	r5, [r4, #0]
 800d690:	6961      	ldr	r1, [r4, #20]
 800d692:	1d18      	adds	r0, r3, #4
 800d694:	6030      	str	r0, [r6, #0]
 800d696:	062e      	lsls	r6, r5, #24
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	d501      	bpl.n	800d6a0 <_printf_i+0x1c0>
 800d69c:	6019      	str	r1, [r3, #0]
 800d69e:	e002      	b.n	800d6a6 <_printf_i+0x1c6>
 800d6a0:	0668      	lsls	r0, r5, #25
 800d6a2:	d5fb      	bpl.n	800d69c <_printf_i+0x1bc>
 800d6a4:	8019      	strh	r1, [r3, #0]
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	6123      	str	r3, [r4, #16]
 800d6aa:	4616      	mov	r6, r2
 800d6ac:	e7bc      	b.n	800d628 <_printf_i+0x148>
 800d6ae:	6833      	ldr	r3, [r6, #0]
 800d6b0:	1d1a      	adds	r2, r3, #4
 800d6b2:	6032      	str	r2, [r6, #0]
 800d6b4:	681e      	ldr	r6, [r3, #0]
 800d6b6:	6862      	ldr	r2, [r4, #4]
 800d6b8:	2100      	movs	r1, #0
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	f7f2 fdb0 	bl	8000220 <memchr>
 800d6c0:	b108      	cbz	r0, 800d6c6 <_printf_i+0x1e6>
 800d6c2:	1b80      	subs	r0, r0, r6
 800d6c4:	6060      	str	r0, [r4, #4]
 800d6c6:	6863      	ldr	r3, [r4, #4]
 800d6c8:	6123      	str	r3, [r4, #16]
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6d0:	e7aa      	b.n	800d628 <_printf_i+0x148>
 800d6d2:	6923      	ldr	r3, [r4, #16]
 800d6d4:	4632      	mov	r2, r6
 800d6d6:	4649      	mov	r1, r9
 800d6d8:	4640      	mov	r0, r8
 800d6da:	47d0      	blx	sl
 800d6dc:	3001      	adds	r0, #1
 800d6de:	d0ad      	beq.n	800d63c <_printf_i+0x15c>
 800d6e0:	6823      	ldr	r3, [r4, #0]
 800d6e2:	079b      	lsls	r3, r3, #30
 800d6e4:	d413      	bmi.n	800d70e <_printf_i+0x22e>
 800d6e6:	68e0      	ldr	r0, [r4, #12]
 800d6e8:	9b03      	ldr	r3, [sp, #12]
 800d6ea:	4298      	cmp	r0, r3
 800d6ec:	bfb8      	it	lt
 800d6ee:	4618      	movlt	r0, r3
 800d6f0:	e7a6      	b.n	800d640 <_printf_i+0x160>
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	4632      	mov	r2, r6
 800d6f6:	4649      	mov	r1, r9
 800d6f8:	4640      	mov	r0, r8
 800d6fa:	47d0      	blx	sl
 800d6fc:	3001      	adds	r0, #1
 800d6fe:	d09d      	beq.n	800d63c <_printf_i+0x15c>
 800d700:	3501      	adds	r5, #1
 800d702:	68e3      	ldr	r3, [r4, #12]
 800d704:	9903      	ldr	r1, [sp, #12]
 800d706:	1a5b      	subs	r3, r3, r1
 800d708:	42ab      	cmp	r3, r5
 800d70a:	dcf2      	bgt.n	800d6f2 <_printf_i+0x212>
 800d70c:	e7eb      	b.n	800d6e6 <_printf_i+0x206>
 800d70e:	2500      	movs	r5, #0
 800d710:	f104 0619 	add.w	r6, r4, #25
 800d714:	e7f5      	b.n	800d702 <_printf_i+0x222>
 800d716:	bf00      	nop
 800d718:	080115c2 	.word	0x080115c2
 800d71c:	080115d3 	.word	0x080115d3

0800d720 <_scanf_float>:
 800d720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d724:	b087      	sub	sp, #28
 800d726:	4617      	mov	r7, r2
 800d728:	9303      	str	r3, [sp, #12]
 800d72a:	688b      	ldr	r3, [r1, #8]
 800d72c:	1e5a      	subs	r2, r3, #1
 800d72e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d732:	bf81      	itttt	hi
 800d734:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d738:	eb03 0b05 	addhi.w	fp, r3, r5
 800d73c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d740:	608b      	strhi	r3, [r1, #8]
 800d742:	680b      	ldr	r3, [r1, #0]
 800d744:	460a      	mov	r2, r1
 800d746:	f04f 0500 	mov.w	r5, #0
 800d74a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d74e:	f842 3b1c 	str.w	r3, [r2], #28
 800d752:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d756:	4680      	mov	r8, r0
 800d758:	460c      	mov	r4, r1
 800d75a:	bf98      	it	ls
 800d75c:	f04f 0b00 	movls.w	fp, #0
 800d760:	9201      	str	r2, [sp, #4]
 800d762:	4616      	mov	r6, r2
 800d764:	46aa      	mov	sl, r5
 800d766:	46a9      	mov	r9, r5
 800d768:	9502      	str	r5, [sp, #8]
 800d76a:	68a2      	ldr	r2, [r4, #8]
 800d76c:	b152      	cbz	r2, 800d784 <_scanf_float+0x64>
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	2b4e      	cmp	r3, #78	@ 0x4e
 800d774:	d864      	bhi.n	800d840 <_scanf_float+0x120>
 800d776:	2b40      	cmp	r3, #64	@ 0x40
 800d778:	d83c      	bhi.n	800d7f4 <_scanf_float+0xd4>
 800d77a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d77e:	b2c8      	uxtb	r0, r1
 800d780:	280e      	cmp	r0, #14
 800d782:	d93a      	bls.n	800d7fa <_scanf_float+0xda>
 800d784:	f1b9 0f00 	cmp.w	r9, #0
 800d788:	d003      	beq.n	800d792 <_scanf_float+0x72>
 800d78a:	6823      	ldr	r3, [r4, #0]
 800d78c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d790:	6023      	str	r3, [r4, #0]
 800d792:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d796:	f1ba 0f01 	cmp.w	sl, #1
 800d79a:	f200 8117 	bhi.w	800d9cc <_scanf_float+0x2ac>
 800d79e:	9b01      	ldr	r3, [sp, #4]
 800d7a0:	429e      	cmp	r6, r3
 800d7a2:	f200 8108 	bhi.w	800d9b6 <_scanf_float+0x296>
 800d7a6:	2001      	movs	r0, #1
 800d7a8:	b007      	add	sp, #28
 800d7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ae:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d7b2:	2a0d      	cmp	r2, #13
 800d7b4:	d8e6      	bhi.n	800d784 <_scanf_float+0x64>
 800d7b6:	a101      	add	r1, pc, #4	@ (adr r1, 800d7bc <_scanf_float+0x9c>)
 800d7b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d7bc:	0800d903 	.word	0x0800d903
 800d7c0:	0800d785 	.word	0x0800d785
 800d7c4:	0800d785 	.word	0x0800d785
 800d7c8:	0800d785 	.word	0x0800d785
 800d7cc:	0800d963 	.word	0x0800d963
 800d7d0:	0800d93b 	.word	0x0800d93b
 800d7d4:	0800d785 	.word	0x0800d785
 800d7d8:	0800d785 	.word	0x0800d785
 800d7dc:	0800d911 	.word	0x0800d911
 800d7e0:	0800d785 	.word	0x0800d785
 800d7e4:	0800d785 	.word	0x0800d785
 800d7e8:	0800d785 	.word	0x0800d785
 800d7ec:	0800d785 	.word	0x0800d785
 800d7f0:	0800d8c9 	.word	0x0800d8c9
 800d7f4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d7f8:	e7db      	b.n	800d7b2 <_scanf_float+0x92>
 800d7fa:	290e      	cmp	r1, #14
 800d7fc:	d8c2      	bhi.n	800d784 <_scanf_float+0x64>
 800d7fe:	a001      	add	r0, pc, #4	@ (adr r0, 800d804 <_scanf_float+0xe4>)
 800d800:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d804:	0800d8b9 	.word	0x0800d8b9
 800d808:	0800d785 	.word	0x0800d785
 800d80c:	0800d8b9 	.word	0x0800d8b9
 800d810:	0800d94f 	.word	0x0800d94f
 800d814:	0800d785 	.word	0x0800d785
 800d818:	0800d861 	.word	0x0800d861
 800d81c:	0800d89f 	.word	0x0800d89f
 800d820:	0800d89f 	.word	0x0800d89f
 800d824:	0800d89f 	.word	0x0800d89f
 800d828:	0800d89f 	.word	0x0800d89f
 800d82c:	0800d89f 	.word	0x0800d89f
 800d830:	0800d89f 	.word	0x0800d89f
 800d834:	0800d89f 	.word	0x0800d89f
 800d838:	0800d89f 	.word	0x0800d89f
 800d83c:	0800d89f 	.word	0x0800d89f
 800d840:	2b6e      	cmp	r3, #110	@ 0x6e
 800d842:	d809      	bhi.n	800d858 <_scanf_float+0x138>
 800d844:	2b60      	cmp	r3, #96	@ 0x60
 800d846:	d8b2      	bhi.n	800d7ae <_scanf_float+0x8e>
 800d848:	2b54      	cmp	r3, #84	@ 0x54
 800d84a:	d07b      	beq.n	800d944 <_scanf_float+0x224>
 800d84c:	2b59      	cmp	r3, #89	@ 0x59
 800d84e:	d199      	bne.n	800d784 <_scanf_float+0x64>
 800d850:	2d07      	cmp	r5, #7
 800d852:	d197      	bne.n	800d784 <_scanf_float+0x64>
 800d854:	2508      	movs	r5, #8
 800d856:	e02c      	b.n	800d8b2 <_scanf_float+0x192>
 800d858:	2b74      	cmp	r3, #116	@ 0x74
 800d85a:	d073      	beq.n	800d944 <_scanf_float+0x224>
 800d85c:	2b79      	cmp	r3, #121	@ 0x79
 800d85e:	e7f6      	b.n	800d84e <_scanf_float+0x12e>
 800d860:	6821      	ldr	r1, [r4, #0]
 800d862:	05c8      	lsls	r0, r1, #23
 800d864:	d51b      	bpl.n	800d89e <_scanf_float+0x17e>
 800d866:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d86a:	6021      	str	r1, [r4, #0]
 800d86c:	f109 0901 	add.w	r9, r9, #1
 800d870:	f1bb 0f00 	cmp.w	fp, #0
 800d874:	d003      	beq.n	800d87e <_scanf_float+0x15e>
 800d876:	3201      	adds	r2, #1
 800d878:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d87c:	60a2      	str	r2, [r4, #8]
 800d87e:	68a3      	ldr	r3, [r4, #8]
 800d880:	3b01      	subs	r3, #1
 800d882:	60a3      	str	r3, [r4, #8]
 800d884:	6923      	ldr	r3, [r4, #16]
 800d886:	3301      	adds	r3, #1
 800d888:	6123      	str	r3, [r4, #16]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	3b01      	subs	r3, #1
 800d88e:	2b00      	cmp	r3, #0
 800d890:	607b      	str	r3, [r7, #4]
 800d892:	f340 8087 	ble.w	800d9a4 <_scanf_float+0x284>
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	3301      	adds	r3, #1
 800d89a:	603b      	str	r3, [r7, #0]
 800d89c:	e765      	b.n	800d76a <_scanf_float+0x4a>
 800d89e:	eb1a 0105 	adds.w	r1, sl, r5
 800d8a2:	f47f af6f 	bne.w	800d784 <_scanf_float+0x64>
 800d8a6:	6822      	ldr	r2, [r4, #0]
 800d8a8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d8ac:	6022      	str	r2, [r4, #0]
 800d8ae:	460d      	mov	r5, r1
 800d8b0:	468a      	mov	sl, r1
 800d8b2:	f806 3b01 	strb.w	r3, [r6], #1
 800d8b6:	e7e2      	b.n	800d87e <_scanf_float+0x15e>
 800d8b8:	6822      	ldr	r2, [r4, #0]
 800d8ba:	0610      	lsls	r0, r2, #24
 800d8bc:	f57f af62 	bpl.w	800d784 <_scanf_float+0x64>
 800d8c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d8c4:	6022      	str	r2, [r4, #0]
 800d8c6:	e7f4      	b.n	800d8b2 <_scanf_float+0x192>
 800d8c8:	f1ba 0f00 	cmp.w	sl, #0
 800d8cc:	d10e      	bne.n	800d8ec <_scanf_float+0x1cc>
 800d8ce:	f1b9 0f00 	cmp.w	r9, #0
 800d8d2:	d10e      	bne.n	800d8f2 <_scanf_float+0x1d2>
 800d8d4:	6822      	ldr	r2, [r4, #0]
 800d8d6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d8da:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d8de:	d108      	bne.n	800d8f2 <_scanf_float+0x1d2>
 800d8e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d8e4:	6022      	str	r2, [r4, #0]
 800d8e6:	f04f 0a01 	mov.w	sl, #1
 800d8ea:	e7e2      	b.n	800d8b2 <_scanf_float+0x192>
 800d8ec:	f1ba 0f02 	cmp.w	sl, #2
 800d8f0:	d055      	beq.n	800d99e <_scanf_float+0x27e>
 800d8f2:	2d01      	cmp	r5, #1
 800d8f4:	d002      	beq.n	800d8fc <_scanf_float+0x1dc>
 800d8f6:	2d04      	cmp	r5, #4
 800d8f8:	f47f af44 	bne.w	800d784 <_scanf_float+0x64>
 800d8fc:	3501      	adds	r5, #1
 800d8fe:	b2ed      	uxtb	r5, r5
 800d900:	e7d7      	b.n	800d8b2 <_scanf_float+0x192>
 800d902:	f1ba 0f01 	cmp.w	sl, #1
 800d906:	f47f af3d 	bne.w	800d784 <_scanf_float+0x64>
 800d90a:	f04f 0a02 	mov.w	sl, #2
 800d90e:	e7d0      	b.n	800d8b2 <_scanf_float+0x192>
 800d910:	b97d      	cbnz	r5, 800d932 <_scanf_float+0x212>
 800d912:	f1b9 0f00 	cmp.w	r9, #0
 800d916:	f47f af38 	bne.w	800d78a <_scanf_float+0x6a>
 800d91a:	6822      	ldr	r2, [r4, #0]
 800d91c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d920:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d924:	f040 8108 	bne.w	800db38 <_scanf_float+0x418>
 800d928:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d92c:	6022      	str	r2, [r4, #0]
 800d92e:	2501      	movs	r5, #1
 800d930:	e7bf      	b.n	800d8b2 <_scanf_float+0x192>
 800d932:	2d03      	cmp	r5, #3
 800d934:	d0e2      	beq.n	800d8fc <_scanf_float+0x1dc>
 800d936:	2d05      	cmp	r5, #5
 800d938:	e7de      	b.n	800d8f8 <_scanf_float+0x1d8>
 800d93a:	2d02      	cmp	r5, #2
 800d93c:	f47f af22 	bne.w	800d784 <_scanf_float+0x64>
 800d940:	2503      	movs	r5, #3
 800d942:	e7b6      	b.n	800d8b2 <_scanf_float+0x192>
 800d944:	2d06      	cmp	r5, #6
 800d946:	f47f af1d 	bne.w	800d784 <_scanf_float+0x64>
 800d94a:	2507      	movs	r5, #7
 800d94c:	e7b1      	b.n	800d8b2 <_scanf_float+0x192>
 800d94e:	6822      	ldr	r2, [r4, #0]
 800d950:	0591      	lsls	r1, r2, #22
 800d952:	f57f af17 	bpl.w	800d784 <_scanf_float+0x64>
 800d956:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d95a:	6022      	str	r2, [r4, #0]
 800d95c:	f8cd 9008 	str.w	r9, [sp, #8]
 800d960:	e7a7      	b.n	800d8b2 <_scanf_float+0x192>
 800d962:	6822      	ldr	r2, [r4, #0]
 800d964:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d968:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d96c:	d006      	beq.n	800d97c <_scanf_float+0x25c>
 800d96e:	0550      	lsls	r0, r2, #21
 800d970:	f57f af08 	bpl.w	800d784 <_scanf_float+0x64>
 800d974:	f1b9 0f00 	cmp.w	r9, #0
 800d978:	f000 80de 	beq.w	800db38 <_scanf_float+0x418>
 800d97c:	0591      	lsls	r1, r2, #22
 800d97e:	bf58      	it	pl
 800d980:	9902      	ldrpl	r1, [sp, #8]
 800d982:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d986:	bf58      	it	pl
 800d988:	eba9 0101 	subpl.w	r1, r9, r1
 800d98c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d990:	bf58      	it	pl
 800d992:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d996:	6022      	str	r2, [r4, #0]
 800d998:	f04f 0900 	mov.w	r9, #0
 800d99c:	e789      	b.n	800d8b2 <_scanf_float+0x192>
 800d99e:	f04f 0a03 	mov.w	sl, #3
 800d9a2:	e786      	b.n	800d8b2 <_scanf_float+0x192>
 800d9a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d9a8:	4639      	mov	r1, r7
 800d9aa:	4640      	mov	r0, r8
 800d9ac:	4798      	blx	r3
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	f43f aedb 	beq.w	800d76a <_scanf_float+0x4a>
 800d9b4:	e6e6      	b.n	800d784 <_scanf_float+0x64>
 800d9b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d9ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d9be:	463a      	mov	r2, r7
 800d9c0:	4640      	mov	r0, r8
 800d9c2:	4798      	blx	r3
 800d9c4:	6923      	ldr	r3, [r4, #16]
 800d9c6:	3b01      	subs	r3, #1
 800d9c8:	6123      	str	r3, [r4, #16]
 800d9ca:	e6e8      	b.n	800d79e <_scanf_float+0x7e>
 800d9cc:	1e6b      	subs	r3, r5, #1
 800d9ce:	2b06      	cmp	r3, #6
 800d9d0:	d824      	bhi.n	800da1c <_scanf_float+0x2fc>
 800d9d2:	2d02      	cmp	r5, #2
 800d9d4:	d836      	bhi.n	800da44 <_scanf_float+0x324>
 800d9d6:	9b01      	ldr	r3, [sp, #4]
 800d9d8:	429e      	cmp	r6, r3
 800d9da:	f67f aee4 	bls.w	800d7a6 <_scanf_float+0x86>
 800d9de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d9e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d9e6:	463a      	mov	r2, r7
 800d9e8:	4640      	mov	r0, r8
 800d9ea:	4798      	blx	r3
 800d9ec:	6923      	ldr	r3, [r4, #16]
 800d9ee:	3b01      	subs	r3, #1
 800d9f0:	6123      	str	r3, [r4, #16]
 800d9f2:	e7f0      	b.n	800d9d6 <_scanf_float+0x2b6>
 800d9f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d9f8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d9fc:	463a      	mov	r2, r7
 800d9fe:	4640      	mov	r0, r8
 800da00:	4798      	blx	r3
 800da02:	6923      	ldr	r3, [r4, #16]
 800da04:	3b01      	subs	r3, #1
 800da06:	6123      	str	r3, [r4, #16]
 800da08:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da0c:	fa5f fa8a 	uxtb.w	sl, sl
 800da10:	f1ba 0f02 	cmp.w	sl, #2
 800da14:	d1ee      	bne.n	800d9f4 <_scanf_float+0x2d4>
 800da16:	3d03      	subs	r5, #3
 800da18:	b2ed      	uxtb	r5, r5
 800da1a:	1b76      	subs	r6, r6, r5
 800da1c:	6823      	ldr	r3, [r4, #0]
 800da1e:	05da      	lsls	r2, r3, #23
 800da20:	d530      	bpl.n	800da84 <_scanf_float+0x364>
 800da22:	055b      	lsls	r3, r3, #21
 800da24:	d511      	bpl.n	800da4a <_scanf_float+0x32a>
 800da26:	9b01      	ldr	r3, [sp, #4]
 800da28:	429e      	cmp	r6, r3
 800da2a:	f67f aebc 	bls.w	800d7a6 <_scanf_float+0x86>
 800da2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800da36:	463a      	mov	r2, r7
 800da38:	4640      	mov	r0, r8
 800da3a:	4798      	blx	r3
 800da3c:	6923      	ldr	r3, [r4, #16]
 800da3e:	3b01      	subs	r3, #1
 800da40:	6123      	str	r3, [r4, #16]
 800da42:	e7f0      	b.n	800da26 <_scanf_float+0x306>
 800da44:	46aa      	mov	sl, r5
 800da46:	46b3      	mov	fp, r6
 800da48:	e7de      	b.n	800da08 <_scanf_float+0x2e8>
 800da4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800da4e:	6923      	ldr	r3, [r4, #16]
 800da50:	2965      	cmp	r1, #101	@ 0x65
 800da52:	f103 33ff 	add.w	r3, r3, #4294967295
 800da56:	f106 35ff 	add.w	r5, r6, #4294967295
 800da5a:	6123      	str	r3, [r4, #16]
 800da5c:	d00c      	beq.n	800da78 <_scanf_float+0x358>
 800da5e:	2945      	cmp	r1, #69	@ 0x45
 800da60:	d00a      	beq.n	800da78 <_scanf_float+0x358>
 800da62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da66:	463a      	mov	r2, r7
 800da68:	4640      	mov	r0, r8
 800da6a:	4798      	blx	r3
 800da6c:	6923      	ldr	r3, [r4, #16]
 800da6e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800da72:	3b01      	subs	r3, #1
 800da74:	1eb5      	subs	r5, r6, #2
 800da76:	6123      	str	r3, [r4, #16]
 800da78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da7c:	463a      	mov	r2, r7
 800da7e:	4640      	mov	r0, r8
 800da80:	4798      	blx	r3
 800da82:	462e      	mov	r6, r5
 800da84:	6822      	ldr	r2, [r4, #0]
 800da86:	f012 0210 	ands.w	r2, r2, #16
 800da8a:	d001      	beq.n	800da90 <_scanf_float+0x370>
 800da8c:	2000      	movs	r0, #0
 800da8e:	e68b      	b.n	800d7a8 <_scanf_float+0x88>
 800da90:	7032      	strb	r2, [r6, #0]
 800da92:	6823      	ldr	r3, [r4, #0]
 800da94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800da98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da9c:	d11c      	bne.n	800dad8 <_scanf_float+0x3b8>
 800da9e:	9b02      	ldr	r3, [sp, #8]
 800daa0:	454b      	cmp	r3, r9
 800daa2:	eba3 0209 	sub.w	r2, r3, r9
 800daa6:	d123      	bne.n	800daf0 <_scanf_float+0x3d0>
 800daa8:	9901      	ldr	r1, [sp, #4]
 800daaa:	2200      	movs	r2, #0
 800daac:	4640      	mov	r0, r8
 800daae:	f002 fbf7 	bl	80102a0 <_strtod_r>
 800dab2:	9b03      	ldr	r3, [sp, #12]
 800dab4:	6821      	ldr	r1, [r4, #0]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f011 0f02 	tst.w	r1, #2
 800dabc:	ec57 6b10 	vmov	r6, r7, d0
 800dac0:	f103 0204 	add.w	r2, r3, #4
 800dac4:	d01f      	beq.n	800db06 <_scanf_float+0x3e6>
 800dac6:	9903      	ldr	r1, [sp, #12]
 800dac8:	600a      	str	r2, [r1, #0]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	e9c3 6700 	strd	r6, r7, [r3]
 800dad0:	68e3      	ldr	r3, [r4, #12]
 800dad2:	3301      	adds	r3, #1
 800dad4:	60e3      	str	r3, [r4, #12]
 800dad6:	e7d9      	b.n	800da8c <_scanf_float+0x36c>
 800dad8:	9b04      	ldr	r3, [sp, #16]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d0e4      	beq.n	800daa8 <_scanf_float+0x388>
 800dade:	9905      	ldr	r1, [sp, #20]
 800dae0:	230a      	movs	r3, #10
 800dae2:	3101      	adds	r1, #1
 800dae4:	4640      	mov	r0, r8
 800dae6:	f002 fc5b 	bl	80103a0 <_strtol_r>
 800daea:	9b04      	ldr	r3, [sp, #16]
 800daec:	9e05      	ldr	r6, [sp, #20]
 800daee:	1ac2      	subs	r2, r0, r3
 800daf0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800daf4:	429e      	cmp	r6, r3
 800daf6:	bf28      	it	cs
 800daf8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800dafc:	4910      	ldr	r1, [pc, #64]	@ (800db40 <_scanf_float+0x420>)
 800dafe:	4630      	mov	r0, r6
 800db00:	f000 f8e4 	bl	800dccc <siprintf>
 800db04:	e7d0      	b.n	800daa8 <_scanf_float+0x388>
 800db06:	f011 0f04 	tst.w	r1, #4
 800db0a:	9903      	ldr	r1, [sp, #12]
 800db0c:	600a      	str	r2, [r1, #0]
 800db0e:	d1dc      	bne.n	800daca <_scanf_float+0x3aa>
 800db10:	681d      	ldr	r5, [r3, #0]
 800db12:	4632      	mov	r2, r6
 800db14:	463b      	mov	r3, r7
 800db16:	4630      	mov	r0, r6
 800db18:	4639      	mov	r1, r7
 800db1a:	f7f3 f82f 	bl	8000b7c <__aeabi_dcmpun>
 800db1e:	b128      	cbz	r0, 800db2c <_scanf_float+0x40c>
 800db20:	4808      	ldr	r0, [pc, #32]	@ (800db44 <_scanf_float+0x424>)
 800db22:	f000 f9b7 	bl	800de94 <nanf>
 800db26:	ed85 0a00 	vstr	s0, [r5]
 800db2a:	e7d1      	b.n	800dad0 <_scanf_float+0x3b0>
 800db2c:	4630      	mov	r0, r6
 800db2e:	4639      	mov	r1, r7
 800db30:	f7f3 f882 	bl	8000c38 <__aeabi_d2f>
 800db34:	6028      	str	r0, [r5, #0]
 800db36:	e7cb      	b.n	800dad0 <_scanf_float+0x3b0>
 800db38:	f04f 0900 	mov.w	r9, #0
 800db3c:	e629      	b.n	800d792 <_scanf_float+0x72>
 800db3e:	bf00      	nop
 800db40:	080115e4 	.word	0x080115e4
 800db44:	0801197d 	.word	0x0801197d

0800db48 <std>:
 800db48:	2300      	movs	r3, #0
 800db4a:	b510      	push	{r4, lr}
 800db4c:	4604      	mov	r4, r0
 800db4e:	e9c0 3300 	strd	r3, r3, [r0]
 800db52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db56:	6083      	str	r3, [r0, #8]
 800db58:	8181      	strh	r1, [r0, #12]
 800db5a:	6643      	str	r3, [r0, #100]	@ 0x64
 800db5c:	81c2      	strh	r2, [r0, #14]
 800db5e:	6183      	str	r3, [r0, #24]
 800db60:	4619      	mov	r1, r3
 800db62:	2208      	movs	r2, #8
 800db64:	305c      	adds	r0, #92	@ 0x5c
 800db66:	f000 f914 	bl	800dd92 <memset>
 800db6a:	4b0d      	ldr	r3, [pc, #52]	@ (800dba0 <std+0x58>)
 800db6c:	6263      	str	r3, [r4, #36]	@ 0x24
 800db6e:	4b0d      	ldr	r3, [pc, #52]	@ (800dba4 <std+0x5c>)
 800db70:	62a3      	str	r3, [r4, #40]	@ 0x28
 800db72:	4b0d      	ldr	r3, [pc, #52]	@ (800dba8 <std+0x60>)
 800db74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800db76:	4b0d      	ldr	r3, [pc, #52]	@ (800dbac <std+0x64>)
 800db78:	6323      	str	r3, [r4, #48]	@ 0x30
 800db7a:	4b0d      	ldr	r3, [pc, #52]	@ (800dbb0 <std+0x68>)
 800db7c:	6224      	str	r4, [r4, #32]
 800db7e:	429c      	cmp	r4, r3
 800db80:	d006      	beq.n	800db90 <std+0x48>
 800db82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800db86:	4294      	cmp	r4, r2
 800db88:	d002      	beq.n	800db90 <std+0x48>
 800db8a:	33d0      	adds	r3, #208	@ 0xd0
 800db8c:	429c      	cmp	r4, r3
 800db8e:	d105      	bne.n	800db9c <std+0x54>
 800db90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800db94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db98:	f000 b978 	b.w	800de8c <__retarget_lock_init_recursive>
 800db9c:	bd10      	pop	{r4, pc}
 800db9e:	bf00      	nop
 800dba0:	0800dd0d 	.word	0x0800dd0d
 800dba4:	0800dd2f 	.word	0x0800dd2f
 800dba8:	0800dd67 	.word	0x0800dd67
 800dbac:	0800dd8b 	.word	0x0800dd8b
 800dbb0:	20001f04 	.word	0x20001f04

0800dbb4 <stdio_exit_handler>:
 800dbb4:	4a02      	ldr	r2, [pc, #8]	@ (800dbc0 <stdio_exit_handler+0xc>)
 800dbb6:	4903      	ldr	r1, [pc, #12]	@ (800dbc4 <stdio_exit_handler+0x10>)
 800dbb8:	4803      	ldr	r0, [pc, #12]	@ (800dbc8 <stdio_exit_handler+0x14>)
 800dbba:	f000 b869 	b.w	800dc90 <_fwalk_sglue>
 800dbbe:	bf00      	nop
 800dbc0:	20000184 	.word	0x20000184
 800dbc4:	0801075d 	.word	0x0801075d
 800dbc8:	20000194 	.word	0x20000194

0800dbcc <cleanup_stdio>:
 800dbcc:	6841      	ldr	r1, [r0, #4]
 800dbce:	4b0c      	ldr	r3, [pc, #48]	@ (800dc00 <cleanup_stdio+0x34>)
 800dbd0:	4299      	cmp	r1, r3
 800dbd2:	b510      	push	{r4, lr}
 800dbd4:	4604      	mov	r4, r0
 800dbd6:	d001      	beq.n	800dbdc <cleanup_stdio+0x10>
 800dbd8:	f002 fdc0 	bl	801075c <_fflush_r>
 800dbdc:	68a1      	ldr	r1, [r4, #8]
 800dbde:	4b09      	ldr	r3, [pc, #36]	@ (800dc04 <cleanup_stdio+0x38>)
 800dbe0:	4299      	cmp	r1, r3
 800dbe2:	d002      	beq.n	800dbea <cleanup_stdio+0x1e>
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	f002 fdb9 	bl	801075c <_fflush_r>
 800dbea:	68e1      	ldr	r1, [r4, #12]
 800dbec:	4b06      	ldr	r3, [pc, #24]	@ (800dc08 <cleanup_stdio+0x3c>)
 800dbee:	4299      	cmp	r1, r3
 800dbf0:	d004      	beq.n	800dbfc <cleanup_stdio+0x30>
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbf8:	f002 bdb0 	b.w	801075c <_fflush_r>
 800dbfc:	bd10      	pop	{r4, pc}
 800dbfe:	bf00      	nop
 800dc00:	20001f04 	.word	0x20001f04
 800dc04:	20001f6c 	.word	0x20001f6c
 800dc08:	20001fd4 	.word	0x20001fd4

0800dc0c <global_stdio_init.part.0>:
 800dc0c:	b510      	push	{r4, lr}
 800dc0e:	4b0b      	ldr	r3, [pc, #44]	@ (800dc3c <global_stdio_init.part.0+0x30>)
 800dc10:	4c0b      	ldr	r4, [pc, #44]	@ (800dc40 <global_stdio_init.part.0+0x34>)
 800dc12:	4a0c      	ldr	r2, [pc, #48]	@ (800dc44 <global_stdio_init.part.0+0x38>)
 800dc14:	601a      	str	r2, [r3, #0]
 800dc16:	4620      	mov	r0, r4
 800dc18:	2200      	movs	r2, #0
 800dc1a:	2104      	movs	r1, #4
 800dc1c:	f7ff ff94 	bl	800db48 <std>
 800dc20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dc24:	2201      	movs	r2, #1
 800dc26:	2109      	movs	r1, #9
 800dc28:	f7ff ff8e 	bl	800db48 <std>
 800dc2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dc30:	2202      	movs	r2, #2
 800dc32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc36:	2112      	movs	r1, #18
 800dc38:	f7ff bf86 	b.w	800db48 <std>
 800dc3c:	2000203c 	.word	0x2000203c
 800dc40:	20001f04 	.word	0x20001f04
 800dc44:	0800dbb5 	.word	0x0800dbb5

0800dc48 <__sfp_lock_acquire>:
 800dc48:	4801      	ldr	r0, [pc, #4]	@ (800dc50 <__sfp_lock_acquire+0x8>)
 800dc4a:	f000 b920 	b.w	800de8e <__retarget_lock_acquire_recursive>
 800dc4e:	bf00      	nop
 800dc50:	20002045 	.word	0x20002045

0800dc54 <__sfp_lock_release>:
 800dc54:	4801      	ldr	r0, [pc, #4]	@ (800dc5c <__sfp_lock_release+0x8>)
 800dc56:	f000 b91b 	b.w	800de90 <__retarget_lock_release_recursive>
 800dc5a:	bf00      	nop
 800dc5c:	20002045 	.word	0x20002045

0800dc60 <__sinit>:
 800dc60:	b510      	push	{r4, lr}
 800dc62:	4604      	mov	r4, r0
 800dc64:	f7ff fff0 	bl	800dc48 <__sfp_lock_acquire>
 800dc68:	6a23      	ldr	r3, [r4, #32]
 800dc6a:	b11b      	cbz	r3, 800dc74 <__sinit+0x14>
 800dc6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc70:	f7ff bff0 	b.w	800dc54 <__sfp_lock_release>
 800dc74:	4b04      	ldr	r3, [pc, #16]	@ (800dc88 <__sinit+0x28>)
 800dc76:	6223      	str	r3, [r4, #32]
 800dc78:	4b04      	ldr	r3, [pc, #16]	@ (800dc8c <__sinit+0x2c>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d1f5      	bne.n	800dc6c <__sinit+0xc>
 800dc80:	f7ff ffc4 	bl	800dc0c <global_stdio_init.part.0>
 800dc84:	e7f2      	b.n	800dc6c <__sinit+0xc>
 800dc86:	bf00      	nop
 800dc88:	0800dbcd 	.word	0x0800dbcd
 800dc8c:	2000203c 	.word	0x2000203c

0800dc90 <_fwalk_sglue>:
 800dc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc94:	4607      	mov	r7, r0
 800dc96:	4688      	mov	r8, r1
 800dc98:	4614      	mov	r4, r2
 800dc9a:	2600      	movs	r6, #0
 800dc9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dca0:	f1b9 0901 	subs.w	r9, r9, #1
 800dca4:	d505      	bpl.n	800dcb2 <_fwalk_sglue+0x22>
 800dca6:	6824      	ldr	r4, [r4, #0]
 800dca8:	2c00      	cmp	r4, #0
 800dcaa:	d1f7      	bne.n	800dc9c <_fwalk_sglue+0xc>
 800dcac:	4630      	mov	r0, r6
 800dcae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcb2:	89ab      	ldrh	r3, [r5, #12]
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d907      	bls.n	800dcc8 <_fwalk_sglue+0x38>
 800dcb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	d003      	beq.n	800dcc8 <_fwalk_sglue+0x38>
 800dcc0:	4629      	mov	r1, r5
 800dcc2:	4638      	mov	r0, r7
 800dcc4:	47c0      	blx	r8
 800dcc6:	4306      	orrs	r6, r0
 800dcc8:	3568      	adds	r5, #104	@ 0x68
 800dcca:	e7e9      	b.n	800dca0 <_fwalk_sglue+0x10>

0800dccc <siprintf>:
 800dccc:	b40e      	push	{r1, r2, r3}
 800dcce:	b500      	push	{lr}
 800dcd0:	b09c      	sub	sp, #112	@ 0x70
 800dcd2:	ab1d      	add	r3, sp, #116	@ 0x74
 800dcd4:	9002      	str	r0, [sp, #8]
 800dcd6:	9006      	str	r0, [sp, #24]
 800dcd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dcdc:	4809      	ldr	r0, [pc, #36]	@ (800dd04 <siprintf+0x38>)
 800dcde:	9107      	str	r1, [sp, #28]
 800dce0:	9104      	str	r1, [sp, #16]
 800dce2:	4909      	ldr	r1, [pc, #36]	@ (800dd08 <siprintf+0x3c>)
 800dce4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dce8:	9105      	str	r1, [sp, #20]
 800dcea:	6800      	ldr	r0, [r0, #0]
 800dcec:	9301      	str	r3, [sp, #4]
 800dcee:	a902      	add	r1, sp, #8
 800dcf0:	f002 fbb4 	bl	801045c <_svfiprintf_r>
 800dcf4:	9b02      	ldr	r3, [sp, #8]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	701a      	strb	r2, [r3, #0]
 800dcfa:	b01c      	add	sp, #112	@ 0x70
 800dcfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd00:	b003      	add	sp, #12
 800dd02:	4770      	bx	lr
 800dd04:	20000190 	.word	0x20000190
 800dd08:	ffff0208 	.word	0xffff0208

0800dd0c <__sread>:
 800dd0c:	b510      	push	{r4, lr}
 800dd0e:	460c      	mov	r4, r1
 800dd10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd14:	f000 f86c 	bl	800ddf0 <_read_r>
 800dd18:	2800      	cmp	r0, #0
 800dd1a:	bfab      	itete	ge
 800dd1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dd1e:	89a3      	ldrhlt	r3, [r4, #12]
 800dd20:	181b      	addge	r3, r3, r0
 800dd22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dd26:	bfac      	ite	ge
 800dd28:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dd2a:	81a3      	strhlt	r3, [r4, #12]
 800dd2c:	bd10      	pop	{r4, pc}

0800dd2e <__swrite>:
 800dd2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd32:	461f      	mov	r7, r3
 800dd34:	898b      	ldrh	r3, [r1, #12]
 800dd36:	05db      	lsls	r3, r3, #23
 800dd38:	4605      	mov	r5, r0
 800dd3a:	460c      	mov	r4, r1
 800dd3c:	4616      	mov	r6, r2
 800dd3e:	d505      	bpl.n	800dd4c <__swrite+0x1e>
 800dd40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd44:	2302      	movs	r3, #2
 800dd46:	2200      	movs	r2, #0
 800dd48:	f000 f840 	bl	800ddcc <_lseek_r>
 800dd4c:	89a3      	ldrh	r3, [r4, #12]
 800dd4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dd56:	81a3      	strh	r3, [r4, #12]
 800dd58:	4632      	mov	r2, r6
 800dd5a:	463b      	mov	r3, r7
 800dd5c:	4628      	mov	r0, r5
 800dd5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd62:	f000 b857 	b.w	800de14 <_write_r>

0800dd66 <__sseek>:
 800dd66:	b510      	push	{r4, lr}
 800dd68:	460c      	mov	r4, r1
 800dd6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd6e:	f000 f82d 	bl	800ddcc <_lseek_r>
 800dd72:	1c43      	adds	r3, r0, #1
 800dd74:	89a3      	ldrh	r3, [r4, #12]
 800dd76:	bf15      	itete	ne
 800dd78:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dd7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dd7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dd82:	81a3      	strheq	r3, [r4, #12]
 800dd84:	bf18      	it	ne
 800dd86:	81a3      	strhne	r3, [r4, #12]
 800dd88:	bd10      	pop	{r4, pc}

0800dd8a <__sclose>:
 800dd8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd8e:	f000 b80d 	b.w	800ddac <_close_r>

0800dd92 <memset>:
 800dd92:	4402      	add	r2, r0
 800dd94:	4603      	mov	r3, r0
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d100      	bne.n	800dd9c <memset+0xa>
 800dd9a:	4770      	bx	lr
 800dd9c:	f803 1b01 	strb.w	r1, [r3], #1
 800dda0:	e7f9      	b.n	800dd96 <memset+0x4>
	...

0800dda4 <_localeconv_r>:
 800dda4:	4800      	ldr	r0, [pc, #0]	@ (800dda8 <_localeconv_r+0x4>)
 800dda6:	4770      	bx	lr
 800dda8:	200002d0 	.word	0x200002d0

0800ddac <_close_r>:
 800ddac:	b538      	push	{r3, r4, r5, lr}
 800ddae:	4d06      	ldr	r5, [pc, #24]	@ (800ddc8 <_close_r+0x1c>)
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	4608      	mov	r0, r1
 800ddb6:	602b      	str	r3, [r5, #0]
 800ddb8:	f7f4 f99a 	bl	80020f0 <_close>
 800ddbc:	1c43      	adds	r3, r0, #1
 800ddbe:	d102      	bne.n	800ddc6 <_close_r+0x1a>
 800ddc0:	682b      	ldr	r3, [r5, #0]
 800ddc2:	b103      	cbz	r3, 800ddc6 <_close_r+0x1a>
 800ddc4:	6023      	str	r3, [r4, #0]
 800ddc6:	bd38      	pop	{r3, r4, r5, pc}
 800ddc8:	20002040 	.word	0x20002040

0800ddcc <_lseek_r>:
 800ddcc:	b538      	push	{r3, r4, r5, lr}
 800ddce:	4d07      	ldr	r5, [pc, #28]	@ (800ddec <_lseek_r+0x20>)
 800ddd0:	4604      	mov	r4, r0
 800ddd2:	4608      	mov	r0, r1
 800ddd4:	4611      	mov	r1, r2
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	602a      	str	r2, [r5, #0]
 800ddda:	461a      	mov	r2, r3
 800dddc:	f7f4 f9af 	bl	800213e <_lseek>
 800dde0:	1c43      	adds	r3, r0, #1
 800dde2:	d102      	bne.n	800ddea <_lseek_r+0x1e>
 800dde4:	682b      	ldr	r3, [r5, #0]
 800dde6:	b103      	cbz	r3, 800ddea <_lseek_r+0x1e>
 800dde8:	6023      	str	r3, [r4, #0]
 800ddea:	bd38      	pop	{r3, r4, r5, pc}
 800ddec:	20002040 	.word	0x20002040

0800ddf0 <_read_r>:
 800ddf0:	b538      	push	{r3, r4, r5, lr}
 800ddf2:	4d07      	ldr	r5, [pc, #28]	@ (800de10 <_read_r+0x20>)
 800ddf4:	4604      	mov	r4, r0
 800ddf6:	4608      	mov	r0, r1
 800ddf8:	4611      	mov	r1, r2
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	602a      	str	r2, [r5, #0]
 800ddfe:	461a      	mov	r2, r3
 800de00:	f7f4 f93d 	bl	800207e <_read>
 800de04:	1c43      	adds	r3, r0, #1
 800de06:	d102      	bne.n	800de0e <_read_r+0x1e>
 800de08:	682b      	ldr	r3, [r5, #0]
 800de0a:	b103      	cbz	r3, 800de0e <_read_r+0x1e>
 800de0c:	6023      	str	r3, [r4, #0]
 800de0e:	bd38      	pop	{r3, r4, r5, pc}
 800de10:	20002040 	.word	0x20002040

0800de14 <_write_r>:
 800de14:	b538      	push	{r3, r4, r5, lr}
 800de16:	4d07      	ldr	r5, [pc, #28]	@ (800de34 <_write_r+0x20>)
 800de18:	4604      	mov	r4, r0
 800de1a:	4608      	mov	r0, r1
 800de1c:	4611      	mov	r1, r2
 800de1e:	2200      	movs	r2, #0
 800de20:	602a      	str	r2, [r5, #0]
 800de22:	461a      	mov	r2, r3
 800de24:	f7f4 f948 	bl	80020b8 <_write>
 800de28:	1c43      	adds	r3, r0, #1
 800de2a:	d102      	bne.n	800de32 <_write_r+0x1e>
 800de2c:	682b      	ldr	r3, [r5, #0]
 800de2e:	b103      	cbz	r3, 800de32 <_write_r+0x1e>
 800de30:	6023      	str	r3, [r4, #0]
 800de32:	bd38      	pop	{r3, r4, r5, pc}
 800de34:	20002040 	.word	0x20002040

0800de38 <__errno>:
 800de38:	4b01      	ldr	r3, [pc, #4]	@ (800de40 <__errno+0x8>)
 800de3a:	6818      	ldr	r0, [r3, #0]
 800de3c:	4770      	bx	lr
 800de3e:	bf00      	nop
 800de40:	20000190 	.word	0x20000190

0800de44 <__libc_init_array>:
 800de44:	b570      	push	{r4, r5, r6, lr}
 800de46:	4d0d      	ldr	r5, [pc, #52]	@ (800de7c <__libc_init_array+0x38>)
 800de48:	4c0d      	ldr	r4, [pc, #52]	@ (800de80 <__libc_init_array+0x3c>)
 800de4a:	1b64      	subs	r4, r4, r5
 800de4c:	10a4      	asrs	r4, r4, #2
 800de4e:	2600      	movs	r6, #0
 800de50:	42a6      	cmp	r6, r4
 800de52:	d109      	bne.n	800de68 <__libc_init_array+0x24>
 800de54:	4d0b      	ldr	r5, [pc, #44]	@ (800de84 <__libc_init_array+0x40>)
 800de56:	4c0c      	ldr	r4, [pc, #48]	@ (800de88 <__libc_init_array+0x44>)
 800de58:	f003 fb70 	bl	801153c <_init>
 800de5c:	1b64      	subs	r4, r4, r5
 800de5e:	10a4      	asrs	r4, r4, #2
 800de60:	2600      	movs	r6, #0
 800de62:	42a6      	cmp	r6, r4
 800de64:	d105      	bne.n	800de72 <__libc_init_array+0x2e>
 800de66:	bd70      	pop	{r4, r5, r6, pc}
 800de68:	f855 3b04 	ldr.w	r3, [r5], #4
 800de6c:	4798      	blx	r3
 800de6e:	3601      	adds	r6, #1
 800de70:	e7ee      	b.n	800de50 <__libc_init_array+0xc>
 800de72:	f855 3b04 	ldr.w	r3, [r5], #4
 800de76:	4798      	blx	r3
 800de78:	3601      	adds	r6, #1
 800de7a:	e7f2      	b.n	800de62 <__libc_init_array+0x1e>
 800de7c:	080119e8 	.word	0x080119e8
 800de80:	080119e8 	.word	0x080119e8
 800de84:	080119e8 	.word	0x080119e8
 800de88:	080119ec 	.word	0x080119ec

0800de8c <__retarget_lock_init_recursive>:
 800de8c:	4770      	bx	lr

0800de8e <__retarget_lock_acquire_recursive>:
 800de8e:	4770      	bx	lr

0800de90 <__retarget_lock_release_recursive>:
 800de90:	4770      	bx	lr
	...

0800de94 <nanf>:
 800de94:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800de9c <nanf+0x8>
 800de98:	4770      	bx	lr
 800de9a:	bf00      	nop
 800de9c:	7fc00000 	.word	0x7fc00000

0800dea0 <quorem>:
 800dea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea4:	6903      	ldr	r3, [r0, #16]
 800dea6:	690c      	ldr	r4, [r1, #16]
 800dea8:	42a3      	cmp	r3, r4
 800deaa:	4607      	mov	r7, r0
 800deac:	db7e      	blt.n	800dfac <quorem+0x10c>
 800deae:	3c01      	subs	r4, #1
 800deb0:	f101 0814 	add.w	r8, r1, #20
 800deb4:	00a3      	lsls	r3, r4, #2
 800deb6:	f100 0514 	add.w	r5, r0, #20
 800deba:	9300      	str	r3, [sp, #0]
 800debc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dec0:	9301      	str	r3, [sp, #4]
 800dec2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dec6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800deca:	3301      	adds	r3, #1
 800decc:	429a      	cmp	r2, r3
 800dece:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ded2:	fbb2 f6f3 	udiv	r6, r2, r3
 800ded6:	d32e      	bcc.n	800df36 <quorem+0x96>
 800ded8:	f04f 0a00 	mov.w	sl, #0
 800dedc:	46c4      	mov	ip, r8
 800dede:	46ae      	mov	lr, r5
 800dee0:	46d3      	mov	fp, sl
 800dee2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dee6:	b298      	uxth	r0, r3
 800dee8:	fb06 a000 	mla	r0, r6, r0, sl
 800deec:	0c02      	lsrs	r2, r0, #16
 800deee:	0c1b      	lsrs	r3, r3, #16
 800def0:	fb06 2303 	mla	r3, r6, r3, r2
 800def4:	f8de 2000 	ldr.w	r2, [lr]
 800def8:	b280      	uxth	r0, r0
 800defa:	b292      	uxth	r2, r2
 800defc:	1a12      	subs	r2, r2, r0
 800defe:	445a      	add	r2, fp
 800df00:	f8de 0000 	ldr.w	r0, [lr]
 800df04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df08:	b29b      	uxth	r3, r3
 800df0a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800df0e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800df12:	b292      	uxth	r2, r2
 800df14:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800df18:	45e1      	cmp	r9, ip
 800df1a:	f84e 2b04 	str.w	r2, [lr], #4
 800df1e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800df22:	d2de      	bcs.n	800dee2 <quorem+0x42>
 800df24:	9b00      	ldr	r3, [sp, #0]
 800df26:	58eb      	ldr	r3, [r5, r3]
 800df28:	b92b      	cbnz	r3, 800df36 <quorem+0x96>
 800df2a:	9b01      	ldr	r3, [sp, #4]
 800df2c:	3b04      	subs	r3, #4
 800df2e:	429d      	cmp	r5, r3
 800df30:	461a      	mov	r2, r3
 800df32:	d32f      	bcc.n	800df94 <quorem+0xf4>
 800df34:	613c      	str	r4, [r7, #16]
 800df36:	4638      	mov	r0, r7
 800df38:	f001 f9c2 	bl	800f2c0 <__mcmp>
 800df3c:	2800      	cmp	r0, #0
 800df3e:	db25      	blt.n	800df8c <quorem+0xec>
 800df40:	4629      	mov	r1, r5
 800df42:	2000      	movs	r0, #0
 800df44:	f858 2b04 	ldr.w	r2, [r8], #4
 800df48:	f8d1 c000 	ldr.w	ip, [r1]
 800df4c:	fa1f fe82 	uxth.w	lr, r2
 800df50:	fa1f f38c 	uxth.w	r3, ip
 800df54:	eba3 030e 	sub.w	r3, r3, lr
 800df58:	4403      	add	r3, r0
 800df5a:	0c12      	lsrs	r2, r2, #16
 800df5c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800df60:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800df64:	b29b      	uxth	r3, r3
 800df66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df6a:	45c1      	cmp	r9, r8
 800df6c:	f841 3b04 	str.w	r3, [r1], #4
 800df70:	ea4f 4022 	mov.w	r0, r2, asr #16
 800df74:	d2e6      	bcs.n	800df44 <quorem+0xa4>
 800df76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df7e:	b922      	cbnz	r2, 800df8a <quorem+0xea>
 800df80:	3b04      	subs	r3, #4
 800df82:	429d      	cmp	r5, r3
 800df84:	461a      	mov	r2, r3
 800df86:	d30b      	bcc.n	800dfa0 <quorem+0x100>
 800df88:	613c      	str	r4, [r7, #16]
 800df8a:	3601      	adds	r6, #1
 800df8c:	4630      	mov	r0, r6
 800df8e:	b003      	add	sp, #12
 800df90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df94:	6812      	ldr	r2, [r2, #0]
 800df96:	3b04      	subs	r3, #4
 800df98:	2a00      	cmp	r2, #0
 800df9a:	d1cb      	bne.n	800df34 <quorem+0x94>
 800df9c:	3c01      	subs	r4, #1
 800df9e:	e7c6      	b.n	800df2e <quorem+0x8e>
 800dfa0:	6812      	ldr	r2, [r2, #0]
 800dfa2:	3b04      	subs	r3, #4
 800dfa4:	2a00      	cmp	r2, #0
 800dfa6:	d1ef      	bne.n	800df88 <quorem+0xe8>
 800dfa8:	3c01      	subs	r4, #1
 800dfaa:	e7ea      	b.n	800df82 <quorem+0xe2>
 800dfac:	2000      	movs	r0, #0
 800dfae:	e7ee      	b.n	800df8e <quorem+0xee>

0800dfb0 <_dtoa_r>:
 800dfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb4:	69c7      	ldr	r7, [r0, #28]
 800dfb6:	b099      	sub	sp, #100	@ 0x64
 800dfb8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dfbc:	ec55 4b10 	vmov	r4, r5, d0
 800dfc0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dfc2:	9109      	str	r1, [sp, #36]	@ 0x24
 800dfc4:	4683      	mov	fp, r0
 800dfc6:	920e      	str	r2, [sp, #56]	@ 0x38
 800dfc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dfca:	b97f      	cbnz	r7, 800dfec <_dtoa_r+0x3c>
 800dfcc:	2010      	movs	r0, #16
 800dfce:	f000 fdfd 	bl	800ebcc <malloc>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	f8cb 001c 	str.w	r0, [fp, #28]
 800dfd8:	b920      	cbnz	r0, 800dfe4 <_dtoa_r+0x34>
 800dfda:	4ba7      	ldr	r3, [pc, #668]	@ (800e278 <_dtoa_r+0x2c8>)
 800dfdc:	21ef      	movs	r1, #239	@ 0xef
 800dfde:	48a7      	ldr	r0, [pc, #668]	@ (800e27c <_dtoa_r+0x2cc>)
 800dfe0:	f002 fc36 	bl	8010850 <__assert_func>
 800dfe4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dfe8:	6007      	str	r7, [r0, #0]
 800dfea:	60c7      	str	r7, [r0, #12]
 800dfec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dff0:	6819      	ldr	r1, [r3, #0]
 800dff2:	b159      	cbz	r1, 800e00c <_dtoa_r+0x5c>
 800dff4:	685a      	ldr	r2, [r3, #4]
 800dff6:	604a      	str	r2, [r1, #4]
 800dff8:	2301      	movs	r3, #1
 800dffa:	4093      	lsls	r3, r2
 800dffc:	608b      	str	r3, [r1, #8]
 800dffe:	4658      	mov	r0, fp
 800e000:	f000 feda 	bl	800edb8 <_Bfree>
 800e004:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e008:	2200      	movs	r2, #0
 800e00a:	601a      	str	r2, [r3, #0]
 800e00c:	1e2b      	subs	r3, r5, #0
 800e00e:	bfb9      	ittee	lt
 800e010:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e014:	9303      	strlt	r3, [sp, #12]
 800e016:	2300      	movge	r3, #0
 800e018:	6033      	strge	r3, [r6, #0]
 800e01a:	9f03      	ldr	r7, [sp, #12]
 800e01c:	4b98      	ldr	r3, [pc, #608]	@ (800e280 <_dtoa_r+0x2d0>)
 800e01e:	bfbc      	itt	lt
 800e020:	2201      	movlt	r2, #1
 800e022:	6032      	strlt	r2, [r6, #0]
 800e024:	43bb      	bics	r3, r7
 800e026:	d112      	bne.n	800e04e <_dtoa_r+0x9e>
 800e028:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e02a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e02e:	6013      	str	r3, [r2, #0]
 800e030:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e034:	4323      	orrs	r3, r4
 800e036:	f000 854d 	beq.w	800ead4 <_dtoa_r+0xb24>
 800e03a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e03c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e294 <_dtoa_r+0x2e4>
 800e040:	2b00      	cmp	r3, #0
 800e042:	f000 854f 	beq.w	800eae4 <_dtoa_r+0xb34>
 800e046:	f10a 0303 	add.w	r3, sl, #3
 800e04a:	f000 bd49 	b.w	800eae0 <_dtoa_r+0xb30>
 800e04e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e052:	2200      	movs	r2, #0
 800e054:	ec51 0b17 	vmov	r0, r1, d7
 800e058:	2300      	movs	r3, #0
 800e05a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e05e:	f7f2 fd5b 	bl	8000b18 <__aeabi_dcmpeq>
 800e062:	4680      	mov	r8, r0
 800e064:	b158      	cbz	r0, 800e07e <_dtoa_r+0xce>
 800e066:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e068:	2301      	movs	r3, #1
 800e06a:	6013      	str	r3, [r2, #0]
 800e06c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e06e:	b113      	cbz	r3, 800e076 <_dtoa_r+0xc6>
 800e070:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e072:	4b84      	ldr	r3, [pc, #528]	@ (800e284 <_dtoa_r+0x2d4>)
 800e074:	6013      	str	r3, [r2, #0]
 800e076:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e298 <_dtoa_r+0x2e8>
 800e07a:	f000 bd33 	b.w	800eae4 <_dtoa_r+0xb34>
 800e07e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e082:	aa16      	add	r2, sp, #88	@ 0x58
 800e084:	a917      	add	r1, sp, #92	@ 0x5c
 800e086:	4658      	mov	r0, fp
 800e088:	f001 fa3a 	bl	800f500 <__d2b>
 800e08c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e090:	4681      	mov	r9, r0
 800e092:	2e00      	cmp	r6, #0
 800e094:	d077      	beq.n	800e186 <_dtoa_r+0x1d6>
 800e096:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e098:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e09c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e0a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e0ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	4b74      	ldr	r3, [pc, #464]	@ (800e288 <_dtoa_r+0x2d8>)
 800e0b6:	f7f2 f90f 	bl	80002d8 <__aeabi_dsub>
 800e0ba:	a369      	add	r3, pc, #420	@ (adr r3, 800e260 <_dtoa_r+0x2b0>)
 800e0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c0:	f7f2 fac2 	bl	8000648 <__aeabi_dmul>
 800e0c4:	a368      	add	r3, pc, #416	@ (adr r3, 800e268 <_dtoa_r+0x2b8>)
 800e0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ca:	f7f2 f907 	bl	80002dc <__adddf3>
 800e0ce:	4604      	mov	r4, r0
 800e0d0:	4630      	mov	r0, r6
 800e0d2:	460d      	mov	r5, r1
 800e0d4:	f7f2 fa4e 	bl	8000574 <__aeabi_i2d>
 800e0d8:	a365      	add	r3, pc, #404	@ (adr r3, 800e270 <_dtoa_r+0x2c0>)
 800e0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0de:	f7f2 fab3 	bl	8000648 <__aeabi_dmul>
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	4629      	mov	r1, r5
 800e0ea:	f7f2 f8f7 	bl	80002dc <__adddf3>
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	460d      	mov	r5, r1
 800e0f2:	f7f2 fd59 	bl	8000ba8 <__aeabi_d2iz>
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	4607      	mov	r7, r0
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	4629      	mov	r1, r5
 800e100:	f7f2 fd14 	bl	8000b2c <__aeabi_dcmplt>
 800e104:	b140      	cbz	r0, 800e118 <_dtoa_r+0x168>
 800e106:	4638      	mov	r0, r7
 800e108:	f7f2 fa34 	bl	8000574 <__aeabi_i2d>
 800e10c:	4622      	mov	r2, r4
 800e10e:	462b      	mov	r3, r5
 800e110:	f7f2 fd02 	bl	8000b18 <__aeabi_dcmpeq>
 800e114:	b900      	cbnz	r0, 800e118 <_dtoa_r+0x168>
 800e116:	3f01      	subs	r7, #1
 800e118:	2f16      	cmp	r7, #22
 800e11a:	d851      	bhi.n	800e1c0 <_dtoa_r+0x210>
 800e11c:	4b5b      	ldr	r3, [pc, #364]	@ (800e28c <_dtoa_r+0x2dc>)
 800e11e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e126:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e12a:	f7f2 fcff 	bl	8000b2c <__aeabi_dcmplt>
 800e12e:	2800      	cmp	r0, #0
 800e130:	d048      	beq.n	800e1c4 <_dtoa_r+0x214>
 800e132:	3f01      	subs	r7, #1
 800e134:	2300      	movs	r3, #0
 800e136:	9312      	str	r3, [sp, #72]	@ 0x48
 800e138:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e13a:	1b9b      	subs	r3, r3, r6
 800e13c:	1e5a      	subs	r2, r3, #1
 800e13e:	bf44      	itt	mi
 800e140:	f1c3 0801 	rsbmi	r8, r3, #1
 800e144:	2300      	movmi	r3, #0
 800e146:	9208      	str	r2, [sp, #32]
 800e148:	bf54      	ite	pl
 800e14a:	f04f 0800 	movpl.w	r8, #0
 800e14e:	9308      	strmi	r3, [sp, #32]
 800e150:	2f00      	cmp	r7, #0
 800e152:	db39      	blt.n	800e1c8 <_dtoa_r+0x218>
 800e154:	9b08      	ldr	r3, [sp, #32]
 800e156:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e158:	443b      	add	r3, r7
 800e15a:	9308      	str	r3, [sp, #32]
 800e15c:	2300      	movs	r3, #0
 800e15e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e162:	2b09      	cmp	r3, #9
 800e164:	d864      	bhi.n	800e230 <_dtoa_r+0x280>
 800e166:	2b05      	cmp	r3, #5
 800e168:	bfc4      	itt	gt
 800e16a:	3b04      	subgt	r3, #4
 800e16c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e16e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e170:	f1a3 0302 	sub.w	r3, r3, #2
 800e174:	bfcc      	ite	gt
 800e176:	2400      	movgt	r4, #0
 800e178:	2401      	movle	r4, #1
 800e17a:	2b03      	cmp	r3, #3
 800e17c:	d863      	bhi.n	800e246 <_dtoa_r+0x296>
 800e17e:	e8df f003 	tbb	[pc, r3]
 800e182:	372a      	.short	0x372a
 800e184:	5535      	.short	0x5535
 800e186:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e18a:	441e      	add	r6, r3
 800e18c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e190:	2b20      	cmp	r3, #32
 800e192:	bfc1      	itttt	gt
 800e194:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e198:	409f      	lslgt	r7, r3
 800e19a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e19e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e1a2:	bfd6      	itet	le
 800e1a4:	f1c3 0320 	rsble	r3, r3, #32
 800e1a8:	ea47 0003 	orrgt.w	r0, r7, r3
 800e1ac:	fa04 f003 	lslle.w	r0, r4, r3
 800e1b0:	f7f2 f9d0 	bl	8000554 <__aeabi_ui2d>
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e1ba:	3e01      	subs	r6, #1
 800e1bc:	9214      	str	r2, [sp, #80]	@ 0x50
 800e1be:	e777      	b.n	800e0b0 <_dtoa_r+0x100>
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	e7b8      	b.n	800e136 <_dtoa_r+0x186>
 800e1c4:	9012      	str	r0, [sp, #72]	@ 0x48
 800e1c6:	e7b7      	b.n	800e138 <_dtoa_r+0x188>
 800e1c8:	427b      	negs	r3, r7
 800e1ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	eba8 0807 	sub.w	r8, r8, r7
 800e1d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e1d4:	e7c4      	b.n	800e160 <_dtoa_r+0x1b0>
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	dc35      	bgt.n	800e24c <_dtoa_r+0x29c>
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	9300      	str	r3, [sp, #0]
 800e1e4:	9307      	str	r3, [sp, #28]
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e1ea:	e00b      	b.n	800e204 <_dtoa_r+0x254>
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	e7f3      	b.n	800e1d8 <_dtoa_r+0x228>
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1f6:	18fb      	adds	r3, r7, r3
 800e1f8:	9300      	str	r3, [sp, #0]
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	9307      	str	r3, [sp, #28]
 800e200:	bfb8      	it	lt
 800e202:	2301      	movlt	r3, #1
 800e204:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e208:	2100      	movs	r1, #0
 800e20a:	2204      	movs	r2, #4
 800e20c:	f102 0514 	add.w	r5, r2, #20
 800e210:	429d      	cmp	r5, r3
 800e212:	d91f      	bls.n	800e254 <_dtoa_r+0x2a4>
 800e214:	6041      	str	r1, [r0, #4]
 800e216:	4658      	mov	r0, fp
 800e218:	f000 fd8e 	bl	800ed38 <_Balloc>
 800e21c:	4682      	mov	sl, r0
 800e21e:	2800      	cmp	r0, #0
 800e220:	d13c      	bne.n	800e29c <_dtoa_r+0x2ec>
 800e222:	4b1b      	ldr	r3, [pc, #108]	@ (800e290 <_dtoa_r+0x2e0>)
 800e224:	4602      	mov	r2, r0
 800e226:	f240 11af 	movw	r1, #431	@ 0x1af
 800e22a:	e6d8      	b.n	800dfde <_dtoa_r+0x2e>
 800e22c:	2301      	movs	r3, #1
 800e22e:	e7e0      	b.n	800e1f2 <_dtoa_r+0x242>
 800e230:	2401      	movs	r4, #1
 800e232:	2300      	movs	r3, #0
 800e234:	9309      	str	r3, [sp, #36]	@ 0x24
 800e236:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e238:	f04f 33ff 	mov.w	r3, #4294967295
 800e23c:	9300      	str	r3, [sp, #0]
 800e23e:	9307      	str	r3, [sp, #28]
 800e240:	2200      	movs	r2, #0
 800e242:	2312      	movs	r3, #18
 800e244:	e7d0      	b.n	800e1e8 <_dtoa_r+0x238>
 800e246:	2301      	movs	r3, #1
 800e248:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e24a:	e7f5      	b.n	800e238 <_dtoa_r+0x288>
 800e24c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e24e:	9300      	str	r3, [sp, #0]
 800e250:	9307      	str	r3, [sp, #28]
 800e252:	e7d7      	b.n	800e204 <_dtoa_r+0x254>
 800e254:	3101      	adds	r1, #1
 800e256:	0052      	lsls	r2, r2, #1
 800e258:	e7d8      	b.n	800e20c <_dtoa_r+0x25c>
 800e25a:	bf00      	nop
 800e25c:	f3af 8000 	nop.w
 800e260:	636f4361 	.word	0x636f4361
 800e264:	3fd287a7 	.word	0x3fd287a7
 800e268:	8b60c8b3 	.word	0x8b60c8b3
 800e26c:	3fc68a28 	.word	0x3fc68a28
 800e270:	509f79fb 	.word	0x509f79fb
 800e274:	3fd34413 	.word	0x3fd34413
 800e278:	080115f6 	.word	0x080115f6
 800e27c:	0801160d 	.word	0x0801160d
 800e280:	7ff00000 	.word	0x7ff00000
 800e284:	080115c1 	.word	0x080115c1
 800e288:	3ff80000 	.word	0x3ff80000
 800e28c:	08011708 	.word	0x08011708
 800e290:	08011665 	.word	0x08011665
 800e294:	080115f2 	.word	0x080115f2
 800e298:	080115c0 	.word	0x080115c0
 800e29c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e2a0:	6018      	str	r0, [r3, #0]
 800e2a2:	9b07      	ldr	r3, [sp, #28]
 800e2a4:	2b0e      	cmp	r3, #14
 800e2a6:	f200 80a4 	bhi.w	800e3f2 <_dtoa_r+0x442>
 800e2aa:	2c00      	cmp	r4, #0
 800e2ac:	f000 80a1 	beq.w	800e3f2 <_dtoa_r+0x442>
 800e2b0:	2f00      	cmp	r7, #0
 800e2b2:	dd33      	ble.n	800e31c <_dtoa_r+0x36c>
 800e2b4:	4bad      	ldr	r3, [pc, #692]	@ (800e56c <_dtoa_r+0x5bc>)
 800e2b6:	f007 020f 	and.w	r2, r7, #15
 800e2ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2be:	ed93 7b00 	vldr	d7, [r3]
 800e2c2:	05f8      	lsls	r0, r7, #23
 800e2c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e2c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e2cc:	d516      	bpl.n	800e2fc <_dtoa_r+0x34c>
 800e2ce:	4ba8      	ldr	r3, [pc, #672]	@ (800e570 <_dtoa_r+0x5c0>)
 800e2d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e2d8:	f7f2 fae0 	bl	800089c <__aeabi_ddiv>
 800e2dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2e0:	f004 040f 	and.w	r4, r4, #15
 800e2e4:	2603      	movs	r6, #3
 800e2e6:	4da2      	ldr	r5, [pc, #648]	@ (800e570 <_dtoa_r+0x5c0>)
 800e2e8:	b954      	cbnz	r4, 800e300 <_dtoa_r+0x350>
 800e2ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e2ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2f2:	f7f2 fad3 	bl	800089c <__aeabi_ddiv>
 800e2f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2fa:	e028      	b.n	800e34e <_dtoa_r+0x39e>
 800e2fc:	2602      	movs	r6, #2
 800e2fe:	e7f2      	b.n	800e2e6 <_dtoa_r+0x336>
 800e300:	07e1      	lsls	r1, r4, #31
 800e302:	d508      	bpl.n	800e316 <_dtoa_r+0x366>
 800e304:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e308:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e30c:	f7f2 f99c 	bl	8000648 <__aeabi_dmul>
 800e310:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e314:	3601      	adds	r6, #1
 800e316:	1064      	asrs	r4, r4, #1
 800e318:	3508      	adds	r5, #8
 800e31a:	e7e5      	b.n	800e2e8 <_dtoa_r+0x338>
 800e31c:	f000 80d2 	beq.w	800e4c4 <_dtoa_r+0x514>
 800e320:	427c      	negs	r4, r7
 800e322:	4b92      	ldr	r3, [pc, #584]	@ (800e56c <_dtoa_r+0x5bc>)
 800e324:	4d92      	ldr	r5, [pc, #584]	@ (800e570 <_dtoa_r+0x5c0>)
 800e326:	f004 020f 	and.w	r2, r4, #15
 800e32a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e332:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e336:	f7f2 f987 	bl	8000648 <__aeabi_dmul>
 800e33a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e33e:	1124      	asrs	r4, r4, #4
 800e340:	2300      	movs	r3, #0
 800e342:	2602      	movs	r6, #2
 800e344:	2c00      	cmp	r4, #0
 800e346:	f040 80b2 	bne.w	800e4ae <_dtoa_r+0x4fe>
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d1d3      	bne.n	800e2f6 <_dtoa_r+0x346>
 800e34e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e350:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e354:	2b00      	cmp	r3, #0
 800e356:	f000 80b7 	beq.w	800e4c8 <_dtoa_r+0x518>
 800e35a:	4b86      	ldr	r3, [pc, #536]	@ (800e574 <_dtoa_r+0x5c4>)
 800e35c:	2200      	movs	r2, #0
 800e35e:	4620      	mov	r0, r4
 800e360:	4629      	mov	r1, r5
 800e362:	f7f2 fbe3 	bl	8000b2c <__aeabi_dcmplt>
 800e366:	2800      	cmp	r0, #0
 800e368:	f000 80ae 	beq.w	800e4c8 <_dtoa_r+0x518>
 800e36c:	9b07      	ldr	r3, [sp, #28]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	f000 80aa 	beq.w	800e4c8 <_dtoa_r+0x518>
 800e374:	9b00      	ldr	r3, [sp, #0]
 800e376:	2b00      	cmp	r3, #0
 800e378:	dd37      	ble.n	800e3ea <_dtoa_r+0x43a>
 800e37a:	1e7b      	subs	r3, r7, #1
 800e37c:	9304      	str	r3, [sp, #16]
 800e37e:	4620      	mov	r0, r4
 800e380:	4b7d      	ldr	r3, [pc, #500]	@ (800e578 <_dtoa_r+0x5c8>)
 800e382:	2200      	movs	r2, #0
 800e384:	4629      	mov	r1, r5
 800e386:	f7f2 f95f 	bl	8000648 <__aeabi_dmul>
 800e38a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e38e:	9c00      	ldr	r4, [sp, #0]
 800e390:	3601      	adds	r6, #1
 800e392:	4630      	mov	r0, r6
 800e394:	f7f2 f8ee 	bl	8000574 <__aeabi_i2d>
 800e398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e39c:	f7f2 f954 	bl	8000648 <__aeabi_dmul>
 800e3a0:	4b76      	ldr	r3, [pc, #472]	@ (800e57c <_dtoa_r+0x5cc>)
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	f7f1 ff9a 	bl	80002dc <__adddf3>
 800e3a8:	4605      	mov	r5, r0
 800e3aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e3ae:	2c00      	cmp	r4, #0
 800e3b0:	f040 808d 	bne.w	800e4ce <_dtoa_r+0x51e>
 800e3b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3b8:	4b71      	ldr	r3, [pc, #452]	@ (800e580 <_dtoa_r+0x5d0>)
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	f7f1 ff8c 	bl	80002d8 <__aeabi_dsub>
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e3c8:	462a      	mov	r2, r5
 800e3ca:	4633      	mov	r3, r6
 800e3cc:	f7f2 fbcc 	bl	8000b68 <__aeabi_dcmpgt>
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	f040 828b 	bne.w	800e8ec <_dtoa_r+0x93c>
 800e3d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3da:	462a      	mov	r2, r5
 800e3dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e3e0:	f7f2 fba4 	bl	8000b2c <__aeabi_dcmplt>
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	f040 8128 	bne.w	800e63a <_dtoa_r+0x68a>
 800e3ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e3ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e3f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f2c0 815a 	blt.w	800e6ae <_dtoa_r+0x6fe>
 800e3fa:	2f0e      	cmp	r7, #14
 800e3fc:	f300 8157 	bgt.w	800e6ae <_dtoa_r+0x6fe>
 800e400:	4b5a      	ldr	r3, [pc, #360]	@ (800e56c <_dtoa_r+0x5bc>)
 800e402:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e406:	ed93 7b00 	vldr	d7, [r3]
 800e40a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	ed8d 7b00 	vstr	d7, [sp]
 800e412:	da03      	bge.n	800e41c <_dtoa_r+0x46c>
 800e414:	9b07      	ldr	r3, [sp, #28]
 800e416:	2b00      	cmp	r3, #0
 800e418:	f340 8101 	ble.w	800e61e <_dtoa_r+0x66e>
 800e41c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e420:	4656      	mov	r6, sl
 800e422:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e426:	4620      	mov	r0, r4
 800e428:	4629      	mov	r1, r5
 800e42a:	f7f2 fa37 	bl	800089c <__aeabi_ddiv>
 800e42e:	f7f2 fbbb 	bl	8000ba8 <__aeabi_d2iz>
 800e432:	4680      	mov	r8, r0
 800e434:	f7f2 f89e 	bl	8000574 <__aeabi_i2d>
 800e438:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e43c:	f7f2 f904 	bl	8000648 <__aeabi_dmul>
 800e440:	4602      	mov	r2, r0
 800e442:	460b      	mov	r3, r1
 800e444:	4620      	mov	r0, r4
 800e446:	4629      	mov	r1, r5
 800e448:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e44c:	f7f1 ff44 	bl	80002d8 <__aeabi_dsub>
 800e450:	f806 4b01 	strb.w	r4, [r6], #1
 800e454:	9d07      	ldr	r5, [sp, #28]
 800e456:	eba6 040a 	sub.w	r4, r6, sl
 800e45a:	42a5      	cmp	r5, r4
 800e45c:	4602      	mov	r2, r0
 800e45e:	460b      	mov	r3, r1
 800e460:	f040 8117 	bne.w	800e692 <_dtoa_r+0x6e2>
 800e464:	f7f1 ff3a 	bl	80002dc <__adddf3>
 800e468:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e46c:	4604      	mov	r4, r0
 800e46e:	460d      	mov	r5, r1
 800e470:	f7f2 fb7a 	bl	8000b68 <__aeabi_dcmpgt>
 800e474:	2800      	cmp	r0, #0
 800e476:	f040 80f9 	bne.w	800e66c <_dtoa_r+0x6bc>
 800e47a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e47e:	4620      	mov	r0, r4
 800e480:	4629      	mov	r1, r5
 800e482:	f7f2 fb49 	bl	8000b18 <__aeabi_dcmpeq>
 800e486:	b118      	cbz	r0, 800e490 <_dtoa_r+0x4e0>
 800e488:	f018 0f01 	tst.w	r8, #1
 800e48c:	f040 80ee 	bne.w	800e66c <_dtoa_r+0x6bc>
 800e490:	4649      	mov	r1, r9
 800e492:	4658      	mov	r0, fp
 800e494:	f000 fc90 	bl	800edb8 <_Bfree>
 800e498:	2300      	movs	r3, #0
 800e49a:	7033      	strb	r3, [r6, #0]
 800e49c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e49e:	3701      	adds	r7, #1
 800e4a0:	601f      	str	r7, [r3, #0]
 800e4a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	f000 831d 	beq.w	800eae4 <_dtoa_r+0xb34>
 800e4aa:	601e      	str	r6, [r3, #0]
 800e4ac:	e31a      	b.n	800eae4 <_dtoa_r+0xb34>
 800e4ae:	07e2      	lsls	r2, r4, #31
 800e4b0:	d505      	bpl.n	800e4be <_dtoa_r+0x50e>
 800e4b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e4b6:	f7f2 f8c7 	bl	8000648 <__aeabi_dmul>
 800e4ba:	3601      	adds	r6, #1
 800e4bc:	2301      	movs	r3, #1
 800e4be:	1064      	asrs	r4, r4, #1
 800e4c0:	3508      	adds	r5, #8
 800e4c2:	e73f      	b.n	800e344 <_dtoa_r+0x394>
 800e4c4:	2602      	movs	r6, #2
 800e4c6:	e742      	b.n	800e34e <_dtoa_r+0x39e>
 800e4c8:	9c07      	ldr	r4, [sp, #28]
 800e4ca:	9704      	str	r7, [sp, #16]
 800e4cc:	e761      	b.n	800e392 <_dtoa_r+0x3e2>
 800e4ce:	4b27      	ldr	r3, [pc, #156]	@ (800e56c <_dtoa_r+0x5bc>)
 800e4d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e4d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e4d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e4da:	4454      	add	r4, sl
 800e4dc:	2900      	cmp	r1, #0
 800e4de:	d053      	beq.n	800e588 <_dtoa_r+0x5d8>
 800e4e0:	4928      	ldr	r1, [pc, #160]	@ (800e584 <_dtoa_r+0x5d4>)
 800e4e2:	2000      	movs	r0, #0
 800e4e4:	f7f2 f9da 	bl	800089c <__aeabi_ddiv>
 800e4e8:	4633      	mov	r3, r6
 800e4ea:	462a      	mov	r2, r5
 800e4ec:	f7f1 fef4 	bl	80002d8 <__aeabi_dsub>
 800e4f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e4f4:	4656      	mov	r6, sl
 800e4f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4fa:	f7f2 fb55 	bl	8000ba8 <__aeabi_d2iz>
 800e4fe:	4605      	mov	r5, r0
 800e500:	f7f2 f838 	bl	8000574 <__aeabi_i2d>
 800e504:	4602      	mov	r2, r0
 800e506:	460b      	mov	r3, r1
 800e508:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e50c:	f7f1 fee4 	bl	80002d8 <__aeabi_dsub>
 800e510:	3530      	adds	r5, #48	@ 0x30
 800e512:	4602      	mov	r2, r0
 800e514:	460b      	mov	r3, r1
 800e516:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e51a:	f806 5b01 	strb.w	r5, [r6], #1
 800e51e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e522:	f7f2 fb03 	bl	8000b2c <__aeabi_dcmplt>
 800e526:	2800      	cmp	r0, #0
 800e528:	d171      	bne.n	800e60e <_dtoa_r+0x65e>
 800e52a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e52e:	4911      	ldr	r1, [pc, #68]	@ (800e574 <_dtoa_r+0x5c4>)
 800e530:	2000      	movs	r0, #0
 800e532:	f7f1 fed1 	bl	80002d8 <__aeabi_dsub>
 800e536:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e53a:	f7f2 faf7 	bl	8000b2c <__aeabi_dcmplt>
 800e53e:	2800      	cmp	r0, #0
 800e540:	f040 8095 	bne.w	800e66e <_dtoa_r+0x6be>
 800e544:	42a6      	cmp	r6, r4
 800e546:	f43f af50 	beq.w	800e3ea <_dtoa_r+0x43a>
 800e54a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e54e:	4b0a      	ldr	r3, [pc, #40]	@ (800e578 <_dtoa_r+0x5c8>)
 800e550:	2200      	movs	r2, #0
 800e552:	f7f2 f879 	bl	8000648 <__aeabi_dmul>
 800e556:	4b08      	ldr	r3, [pc, #32]	@ (800e578 <_dtoa_r+0x5c8>)
 800e558:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e55c:	2200      	movs	r2, #0
 800e55e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e562:	f7f2 f871 	bl	8000648 <__aeabi_dmul>
 800e566:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e56a:	e7c4      	b.n	800e4f6 <_dtoa_r+0x546>
 800e56c:	08011708 	.word	0x08011708
 800e570:	080116e0 	.word	0x080116e0
 800e574:	3ff00000 	.word	0x3ff00000
 800e578:	40240000 	.word	0x40240000
 800e57c:	401c0000 	.word	0x401c0000
 800e580:	40140000 	.word	0x40140000
 800e584:	3fe00000 	.word	0x3fe00000
 800e588:	4631      	mov	r1, r6
 800e58a:	4628      	mov	r0, r5
 800e58c:	f7f2 f85c 	bl	8000648 <__aeabi_dmul>
 800e590:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e594:	9415      	str	r4, [sp, #84]	@ 0x54
 800e596:	4656      	mov	r6, sl
 800e598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e59c:	f7f2 fb04 	bl	8000ba8 <__aeabi_d2iz>
 800e5a0:	4605      	mov	r5, r0
 800e5a2:	f7f1 ffe7 	bl	8000574 <__aeabi_i2d>
 800e5a6:	4602      	mov	r2, r0
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5ae:	f7f1 fe93 	bl	80002d8 <__aeabi_dsub>
 800e5b2:	3530      	adds	r5, #48	@ 0x30
 800e5b4:	f806 5b01 	strb.w	r5, [r6], #1
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	460b      	mov	r3, r1
 800e5bc:	42a6      	cmp	r6, r4
 800e5be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e5c2:	f04f 0200 	mov.w	r2, #0
 800e5c6:	d124      	bne.n	800e612 <_dtoa_r+0x662>
 800e5c8:	4bac      	ldr	r3, [pc, #688]	@ (800e87c <_dtoa_r+0x8cc>)
 800e5ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e5ce:	f7f1 fe85 	bl	80002dc <__adddf3>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5da:	f7f2 fac5 	bl	8000b68 <__aeabi_dcmpgt>
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d145      	bne.n	800e66e <_dtoa_r+0x6be>
 800e5e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e5e6:	49a5      	ldr	r1, [pc, #660]	@ (800e87c <_dtoa_r+0x8cc>)
 800e5e8:	2000      	movs	r0, #0
 800e5ea:	f7f1 fe75 	bl	80002d8 <__aeabi_dsub>
 800e5ee:	4602      	mov	r2, r0
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5f6:	f7f2 fa99 	bl	8000b2c <__aeabi_dcmplt>
 800e5fa:	2800      	cmp	r0, #0
 800e5fc:	f43f aef5 	beq.w	800e3ea <_dtoa_r+0x43a>
 800e600:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e602:	1e73      	subs	r3, r6, #1
 800e604:	9315      	str	r3, [sp, #84]	@ 0x54
 800e606:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e60a:	2b30      	cmp	r3, #48	@ 0x30
 800e60c:	d0f8      	beq.n	800e600 <_dtoa_r+0x650>
 800e60e:	9f04      	ldr	r7, [sp, #16]
 800e610:	e73e      	b.n	800e490 <_dtoa_r+0x4e0>
 800e612:	4b9b      	ldr	r3, [pc, #620]	@ (800e880 <_dtoa_r+0x8d0>)
 800e614:	f7f2 f818 	bl	8000648 <__aeabi_dmul>
 800e618:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e61c:	e7bc      	b.n	800e598 <_dtoa_r+0x5e8>
 800e61e:	d10c      	bne.n	800e63a <_dtoa_r+0x68a>
 800e620:	4b98      	ldr	r3, [pc, #608]	@ (800e884 <_dtoa_r+0x8d4>)
 800e622:	2200      	movs	r2, #0
 800e624:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e628:	f7f2 f80e 	bl	8000648 <__aeabi_dmul>
 800e62c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e630:	f7f2 fa90 	bl	8000b54 <__aeabi_dcmpge>
 800e634:	2800      	cmp	r0, #0
 800e636:	f000 8157 	beq.w	800e8e8 <_dtoa_r+0x938>
 800e63a:	2400      	movs	r4, #0
 800e63c:	4625      	mov	r5, r4
 800e63e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e640:	43db      	mvns	r3, r3
 800e642:	9304      	str	r3, [sp, #16]
 800e644:	4656      	mov	r6, sl
 800e646:	2700      	movs	r7, #0
 800e648:	4621      	mov	r1, r4
 800e64a:	4658      	mov	r0, fp
 800e64c:	f000 fbb4 	bl	800edb8 <_Bfree>
 800e650:	2d00      	cmp	r5, #0
 800e652:	d0dc      	beq.n	800e60e <_dtoa_r+0x65e>
 800e654:	b12f      	cbz	r7, 800e662 <_dtoa_r+0x6b2>
 800e656:	42af      	cmp	r7, r5
 800e658:	d003      	beq.n	800e662 <_dtoa_r+0x6b2>
 800e65a:	4639      	mov	r1, r7
 800e65c:	4658      	mov	r0, fp
 800e65e:	f000 fbab 	bl	800edb8 <_Bfree>
 800e662:	4629      	mov	r1, r5
 800e664:	4658      	mov	r0, fp
 800e666:	f000 fba7 	bl	800edb8 <_Bfree>
 800e66a:	e7d0      	b.n	800e60e <_dtoa_r+0x65e>
 800e66c:	9704      	str	r7, [sp, #16]
 800e66e:	4633      	mov	r3, r6
 800e670:	461e      	mov	r6, r3
 800e672:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e676:	2a39      	cmp	r2, #57	@ 0x39
 800e678:	d107      	bne.n	800e68a <_dtoa_r+0x6da>
 800e67a:	459a      	cmp	sl, r3
 800e67c:	d1f8      	bne.n	800e670 <_dtoa_r+0x6c0>
 800e67e:	9a04      	ldr	r2, [sp, #16]
 800e680:	3201      	adds	r2, #1
 800e682:	9204      	str	r2, [sp, #16]
 800e684:	2230      	movs	r2, #48	@ 0x30
 800e686:	f88a 2000 	strb.w	r2, [sl]
 800e68a:	781a      	ldrb	r2, [r3, #0]
 800e68c:	3201      	adds	r2, #1
 800e68e:	701a      	strb	r2, [r3, #0]
 800e690:	e7bd      	b.n	800e60e <_dtoa_r+0x65e>
 800e692:	4b7b      	ldr	r3, [pc, #492]	@ (800e880 <_dtoa_r+0x8d0>)
 800e694:	2200      	movs	r2, #0
 800e696:	f7f1 ffd7 	bl	8000648 <__aeabi_dmul>
 800e69a:	2200      	movs	r2, #0
 800e69c:	2300      	movs	r3, #0
 800e69e:	4604      	mov	r4, r0
 800e6a0:	460d      	mov	r5, r1
 800e6a2:	f7f2 fa39 	bl	8000b18 <__aeabi_dcmpeq>
 800e6a6:	2800      	cmp	r0, #0
 800e6a8:	f43f aebb 	beq.w	800e422 <_dtoa_r+0x472>
 800e6ac:	e6f0      	b.n	800e490 <_dtoa_r+0x4e0>
 800e6ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e6b0:	2a00      	cmp	r2, #0
 800e6b2:	f000 80db 	beq.w	800e86c <_dtoa_r+0x8bc>
 800e6b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6b8:	2a01      	cmp	r2, #1
 800e6ba:	f300 80bf 	bgt.w	800e83c <_dtoa_r+0x88c>
 800e6be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e6c0:	2a00      	cmp	r2, #0
 800e6c2:	f000 80b7 	beq.w	800e834 <_dtoa_r+0x884>
 800e6c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e6ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e6cc:	4646      	mov	r6, r8
 800e6ce:	9a08      	ldr	r2, [sp, #32]
 800e6d0:	2101      	movs	r1, #1
 800e6d2:	441a      	add	r2, r3
 800e6d4:	4658      	mov	r0, fp
 800e6d6:	4498      	add	r8, r3
 800e6d8:	9208      	str	r2, [sp, #32]
 800e6da:	f000 fc6b 	bl	800efb4 <__i2b>
 800e6de:	4605      	mov	r5, r0
 800e6e0:	b15e      	cbz	r6, 800e6fa <_dtoa_r+0x74a>
 800e6e2:	9b08      	ldr	r3, [sp, #32]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	dd08      	ble.n	800e6fa <_dtoa_r+0x74a>
 800e6e8:	42b3      	cmp	r3, r6
 800e6ea:	9a08      	ldr	r2, [sp, #32]
 800e6ec:	bfa8      	it	ge
 800e6ee:	4633      	movge	r3, r6
 800e6f0:	eba8 0803 	sub.w	r8, r8, r3
 800e6f4:	1af6      	subs	r6, r6, r3
 800e6f6:	1ad3      	subs	r3, r2, r3
 800e6f8:	9308      	str	r3, [sp, #32]
 800e6fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6fc:	b1f3      	cbz	r3, 800e73c <_dtoa_r+0x78c>
 800e6fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e700:	2b00      	cmp	r3, #0
 800e702:	f000 80b7 	beq.w	800e874 <_dtoa_r+0x8c4>
 800e706:	b18c      	cbz	r4, 800e72c <_dtoa_r+0x77c>
 800e708:	4629      	mov	r1, r5
 800e70a:	4622      	mov	r2, r4
 800e70c:	4658      	mov	r0, fp
 800e70e:	f000 fd11 	bl	800f134 <__pow5mult>
 800e712:	464a      	mov	r2, r9
 800e714:	4601      	mov	r1, r0
 800e716:	4605      	mov	r5, r0
 800e718:	4658      	mov	r0, fp
 800e71a:	f000 fc61 	bl	800efe0 <__multiply>
 800e71e:	4649      	mov	r1, r9
 800e720:	9004      	str	r0, [sp, #16]
 800e722:	4658      	mov	r0, fp
 800e724:	f000 fb48 	bl	800edb8 <_Bfree>
 800e728:	9b04      	ldr	r3, [sp, #16]
 800e72a:	4699      	mov	r9, r3
 800e72c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e72e:	1b1a      	subs	r2, r3, r4
 800e730:	d004      	beq.n	800e73c <_dtoa_r+0x78c>
 800e732:	4649      	mov	r1, r9
 800e734:	4658      	mov	r0, fp
 800e736:	f000 fcfd 	bl	800f134 <__pow5mult>
 800e73a:	4681      	mov	r9, r0
 800e73c:	2101      	movs	r1, #1
 800e73e:	4658      	mov	r0, fp
 800e740:	f000 fc38 	bl	800efb4 <__i2b>
 800e744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e746:	4604      	mov	r4, r0
 800e748:	2b00      	cmp	r3, #0
 800e74a:	f000 81cf 	beq.w	800eaec <_dtoa_r+0xb3c>
 800e74e:	461a      	mov	r2, r3
 800e750:	4601      	mov	r1, r0
 800e752:	4658      	mov	r0, fp
 800e754:	f000 fcee 	bl	800f134 <__pow5mult>
 800e758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	4604      	mov	r4, r0
 800e75e:	f300 8095 	bgt.w	800e88c <_dtoa_r+0x8dc>
 800e762:	9b02      	ldr	r3, [sp, #8]
 800e764:	2b00      	cmp	r3, #0
 800e766:	f040 8087 	bne.w	800e878 <_dtoa_r+0x8c8>
 800e76a:	9b03      	ldr	r3, [sp, #12]
 800e76c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e770:	2b00      	cmp	r3, #0
 800e772:	f040 8089 	bne.w	800e888 <_dtoa_r+0x8d8>
 800e776:	9b03      	ldr	r3, [sp, #12]
 800e778:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e77c:	0d1b      	lsrs	r3, r3, #20
 800e77e:	051b      	lsls	r3, r3, #20
 800e780:	b12b      	cbz	r3, 800e78e <_dtoa_r+0x7de>
 800e782:	9b08      	ldr	r3, [sp, #32]
 800e784:	3301      	adds	r3, #1
 800e786:	9308      	str	r3, [sp, #32]
 800e788:	f108 0801 	add.w	r8, r8, #1
 800e78c:	2301      	movs	r3, #1
 800e78e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e790:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e792:	2b00      	cmp	r3, #0
 800e794:	f000 81b0 	beq.w	800eaf8 <_dtoa_r+0xb48>
 800e798:	6923      	ldr	r3, [r4, #16]
 800e79a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e79e:	6918      	ldr	r0, [r3, #16]
 800e7a0:	f000 fbbc 	bl	800ef1c <__hi0bits>
 800e7a4:	f1c0 0020 	rsb	r0, r0, #32
 800e7a8:	9b08      	ldr	r3, [sp, #32]
 800e7aa:	4418      	add	r0, r3
 800e7ac:	f010 001f 	ands.w	r0, r0, #31
 800e7b0:	d077      	beq.n	800e8a2 <_dtoa_r+0x8f2>
 800e7b2:	f1c0 0320 	rsb	r3, r0, #32
 800e7b6:	2b04      	cmp	r3, #4
 800e7b8:	dd6b      	ble.n	800e892 <_dtoa_r+0x8e2>
 800e7ba:	9b08      	ldr	r3, [sp, #32]
 800e7bc:	f1c0 001c 	rsb	r0, r0, #28
 800e7c0:	4403      	add	r3, r0
 800e7c2:	4480      	add	r8, r0
 800e7c4:	4406      	add	r6, r0
 800e7c6:	9308      	str	r3, [sp, #32]
 800e7c8:	f1b8 0f00 	cmp.w	r8, #0
 800e7cc:	dd05      	ble.n	800e7da <_dtoa_r+0x82a>
 800e7ce:	4649      	mov	r1, r9
 800e7d0:	4642      	mov	r2, r8
 800e7d2:	4658      	mov	r0, fp
 800e7d4:	f000 fd08 	bl	800f1e8 <__lshift>
 800e7d8:	4681      	mov	r9, r0
 800e7da:	9b08      	ldr	r3, [sp, #32]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	dd05      	ble.n	800e7ec <_dtoa_r+0x83c>
 800e7e0:	4621      	mov	r1, r4
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	4658      	mov	r0, fp
 800e7e6:	f000 fcff 	bl	800f1e8 <__lshift>
 800e7ea:	4604      	mov	r4, r0
 800e7ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d059      	beq.n	800e8a6 <_dtoa_r+0x8f6>
 800e7f2:	4621      	mov	r1, r4
 800e7f4:	4648      	mov	r0, r9
 800e7f6:	f000 fd63 	bl	800f2c0 <__mcmp>
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	da53      	bge.n	800e8a6 <_dtoa_r+0x8f6>
 800e7fe:	1e7b      	subs	r3, r7, #1
 800e800:	9304      	str	r3, [sp, #16]
 800e802:	4649      	mov	r1, r9
 800e804:	2300      	movs	r3, #0
 800e806:	220a      	movs	r2, #10
 800e808:	4658      	mov	r0, fp
 800e80a:	f000 faf7 	bl	800edfc <__multadd>
 800e80e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e810:	4681      	mov	r9, r0
 800e812:	2b00      	cmp	r3, #0
 800e814:	f000 8172 	beq.w	800eafc <_dtoa_r+0xb4c>
 800e818:	2300      	movs	r3, #0
 800e81a:	4629      	mov	r1, r5
 800e81c:	220a      	movs	r2, #10
 800e81e:	4658      	mov	r0, fp
 800e820:	f000 faec 	bl	800edfc <__multadd>
 800e824:	9b00      	ldr	r3, [sp, #0]
 800e826:	2b00      	cmp	r3, #0
 800e828:	4605      	mov	r5, r0
 800e82a:	dc67      	bgt.n	800e8fc <_dtoa_r+0x94c>
 800e82c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e82e:	2b02      	cmp	r3, #2
 800e830:	dc41      	bgt.n	800e8b6 <_dtoa_r+0x906>
 800e832:	e063      	b.n	800e8fc <_dtoa_r+0x94c>
 800e834:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e836:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e83a:	e746      	b.n	800e6ca <_dtoa_r+0x71a>
 800e83c:	9b07      	ldr	r3, [sp, #28]
 800e83e:	1e5c      	subs	r4, r3, #1
 800e840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e842:	42a3      	cmp	r3, r4
 800e844:	bfbf      	itttt	lt
 800e846:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e848:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e84a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e84c:	1ae3      	sublt	r3, r4, r3
 800e84e:	bfb4      	ite	lt
 800e850:	18d2      	addlt	r2, r2, r3
 800e852:	1b1c      	subge	r4, r3, r4
 800e854:	9b07      	ldr	r3, [sp, #28]
 800e856:	bfbc      	itt	lt
 800e858:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e85a:	2400      	movlt	r4, #0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	bfb5      	itete	lt
 800e860:	eba8 0603 	sublt.w	r6, r8, r3
 800e864:	9b07      	ldrge	r3, [sp, #28]
 800e866:	2300      	movlt	r3, #0
 800e868:	4646      	movge	r6, r8
 800e86a:	e730      	b.n	800e6ce <_dtoa_r+0x71e>
 800e86c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e86e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e870:	4646      	mov	r6, r8
 800e872:	e735      	b.n	800e6e0 <_dtoa_r+0x730>
 800e874:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e876:	e75c      	b.n	800e732 <_dtoa_r+0x782>
 800e878:	2300      	movs	r3, #0
 800e87a:	e788      	b.n	800e78e <_dtoa_r+0x7de>
 800e87c:	3fe00000 	.word	0x3fe00000
 800e880:	40240000 	.word	0x40240000
 800e884:	40140000 	.word	0x40140000
 800e888:	9b02      	ldr	r3, [sp, #8]
 800e88a:	e780      	b.n	800e78e <_dtoa_r+0x7de>
 800e88c:	2300      	movs	r3, #0
 800e88e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e890:	e782      	b.n	800e798 <_dtoa_r+0x7e8>
 800e892:	d099      	beq.n	800e7c8 <_dtoa_r+0x818>
 800e894:	9a08      	ldr	r2, [sp, #32]
 800e896:	331c      	adds	r3, #28
 800e898:	441a      	add	r2, r3
 800e89a:	4498      	add	r8, r3
 800e89c:	441e      	add	r6, r3
 800e89e:	9208      	str	r2, [sp, #32]
 800e8a0:	e792      	b.n	800e7c8 <_dtoa_r+0x818>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	e7f6      	b.n	800e894 <_dtoa_r+0x8e4>
 800e8a6:	9b07      	ldr	r3, [sp, #28]
 800e8a8:	9704      	str	r7, [sp, #16]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	dc20      	bgt.n	800e8f0 <_dtoa_r+0x940>
 800e8ae:	9300      	str	r3, [sp, #0]
 800e8b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8b2:	2b02      	cmp	r3, #2
 800e8b4:	dd1e      	ble.n	800e8f4 <_dtoa_r+0x944>
 800e8b6:	9b00      	ldr	r3, [sp, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	f47f aec0 	bne.w	800e63e <_dtoa_r+0x68e>
 800e8be:	4621      	mov	r1, r4
 800e8c0:	2205      	movs	r2, #5
 800e8c2:	4658      	mov	r0, fp
 800e8c4:	f000 fa9a 	bl	800edfc <__multadd>
 800e8c8:	4601      	mov	r1, r0
 800e8ca:	4604      	mov	r4, r0
 800e8cc:	4648      	mov	r0, r9
 800e8ce:	f000 fcf7 	bl	800f2c0 <__mcmp>
 800e8d2:	2800      	cmp	r0, #0
 800e8d4:	f77f aeb3 	ble.w	800e63e <_dtoa_r+0x68e>
 800e8d8:	4656      	mov	r6, sl
 800e8da:	2331      	movs	r3, #49	@ 0x31
 800e8dc:	f806 3b01 	strb.w	r3, [r6], #1
 800e8e0:	9b04      	ldr	r3, [sp, #16]
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	9304      	str	r3, [sp, #16]
 800e8e6:	e6ae      	b.n	800e646 <_dtoa_r+0x696>
 800e8e8:	9c07      	ldr	r4, [sp, #28]
 800e8ea:	9704      	str	r7, [sp, #16]
 800e8ec:	4625      	mov	r5, r4
 800e8ee:	e7f3      	b.n	800e8d8 <_dtoa_r+0x928>
 800e8f0:	9b07      	ldr	r3, [sp, #28]
 800e8f2:	9300      	str	r3, [sp, #0]
 800e8f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	f000 8104 	beq.w	800eb04 <_dtoa_r+0xb54>
 800e8fc:	2e00      	cmp	r6, #0
 800e8fe:	dd05      	ble.n	800e90c <_dtoa_r+0x95c>
 800e900:	4629      	mov	r1, r5
 800e902:	4632      	mov	r2, r6
 800e904:	4658      	mov	r0, fp
 800e906:	f000 fc6f 	bl	800f1e8 <__lshift>
 800e90a:	4605      	mov	r5, r0
 800e90c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d05a      	beq.n	800e9c8 <_dtoa_r+0xa18>
 800e912:	6869      	ldr	r1, [r5, #4]
 800e914:	4658      	mov	r0, fp
 800e916:	f000 fa0f 	bl	800ed38 <_Balloc>
 800e91a:	4606      	mov	r6, r0
 800e91c:	b928      	cbnz	r0, 800e92a <_dtoa_r+0x97a>
 800e91e:	4b84      	ldr	r3, [pc, #528]	@ (800eb30 <_dtoa_r+0xb80>)
 800e920:	4602      	mov	r2, r0
 800e922:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e926:	f7ff bb5a 	b.w	800dfde <_dtoa_r+0x2e>
 800e92a:	692a      	ldr	r2, [r5, #16]
 800e92c:	3202      	adds	r2, #2
 800e92e:	0092      	lsls	r2, r2, #2
 800e930:	f105 010c 	add.w	r1, r5, #12
 800e934:	300c      	adds	r0, #12
 800e936:	f001 ff75 	bl	8010824 <memcpy>
 800e93a:	2201      	movs	r2, #1
 800e93c:	4631      	mov	r1, r6
 800e93e:	4658      	mov	r0, fp
 800e940:	f000 fc52 	bl	800f1e8 <__lshift>
 800e944:	f10a 0301 	add.w	r3, sl, #1
 800e948:	9307      	str	r3, [sp, #28]
 800e94a:	9b00      	ldr	r3, [sp, #0]
 800e94c:	4453      	add	r3, sl
 800e94e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e950:	9b02      	ldr	r3, [sp, #8]
 800e952:	f003 0301 	and.w	r3, r3, #1
 800e956:	462f      	mov	r7, r5
 800e958:	930a      	str	r3, [sp, #40]	@ 0x28
 800e95a:	4605      	mov	r5, r0
 800e95c:	9b07      	ldr	r3, [sp, #28]
 800e95e:	4621      	mov	r1, r4
 800e960:	3b01      	subs	r3, #1
 800e962:	4648      	mov	r0, r9
 800e964:	9300      	str	r3, [sp, #0]
 800e966:	f7ff fa9b 	bl	800dea0 <quorem>
 800e96a:	4639      	mov	r1, r7
 800e96c:	9002      	str	r0, [sp, #8]
 800e96e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e972:	4648      	mov	r0, r9
 800e974:	f000 fca4 	bl	800f2c0 <__mcmp>
 800e978:	462a      	mov	r2, r5
 800e97a:	9008      	str	r0, [sp, #32]
 800e97c:	4621      	mov	r1, r4
 800e97e:	4658      	mov	r0, fp
 800e980:	f000 fcba 	bl	800f2f8 <__mdiff>
 800e984:	68c2      	ldr	r2, [r0, #12]
 800e986:	4606      	mov	r6, r0
 800e988:	bb02      	cbnz	r2, 800e9cc <_dtoa_r+0xa1c>
 800e98a:	4601      	mov	r1, r0
 800e98c:	4648      	mov	r0, r9
 800e98e:	f000 fc97 	bl	800f2c0 <__mcmp>
 800e992:	4602      	mov	r2, r0
 800e994:	4631      	mov	r1, r6
 800e996:	4658      	mov	r0, fp
 800e998:	920e      	str	r2, [sp, #56]	@ 0x38
 800e99a:	f000 fa0d 	bl	800edb8 <_Bfree>
 800e99e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e9a2:	9e07      	ldr	r6, [sp, #28]
 800e9a4:	ea43 0102 	orr.w	r1, r3, r2
 800e9a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9aa:	4319      	orrs	r1, r3
 800e9ac:	d110      	bne.n	800e9d0 <_dtoa_r+0xa20>
 800e9ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e9b2:	d029      	beq.n	800ea08 <_dtoa_r+0xa58>
 800e9b4:	9b08      	ldr	r3, [sp, #32]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	dd02      	ble.n	800e9c0 <_dtoa_r+0xa10>
 800e9ba:	9b02      	ldr	r3, [sp, #8]
 800e9bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e9c0:	9b00      	ldr	r3, [sp, #0]
 800e9c2:	f883 8000 	strb.w	r8, [r3]
 800e9c6:	e63f      	b.n	800e648 <_dtoa_r+0x698>
 800e9c8:	4628      	mov	r0, r5
 800e9ca:	e7bb      	b.n	800e944 <_dtoa_r+0x994>
 800e9cc:	2201      	movs	r2, #1
 800e9ce:	e7e1      	b.n	800e994 <_dtoa_r+0x9e4>
 800e9d0:	9b08      	ldr	r3, [sp, #32]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	db04      	blt.n	800e9e0 <_dtoa_r+0xa30>
 800e9d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e9d8:	430b      	orrs	r3, r1
 800e9da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e9dc:	430b      	orrs	r3, r1
 800e9de:	d120      	bne.n	800ea22 <_dtoa_r+0xa72>
 800e9e0:	2a00      	cmp	r2, #0
 800e9e2:	dded      	ble.n	800e9c0 <_dtoa_r+0xa10>
 800e9e4:	4649      	mov	r1, r9
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	4658      	mov	r0, fp
 800e9ea:	f000 fbfd 	bl	800f1e8 <__lshift>
 800e9ee:	4621      	mov	r1, r4
 800e9f0:	4681      	mov	r9, r0
 800e9f2:	f000 fc65 	bl	800f2c0 <__mcmp>
 800e9f6:	2800      	cmp	r0, #0
 800e9f8:	dc03      	bgt.n	800ea02 <_dtoa_r+0xa52>
 800e9fa:	d1e1      	bne.n	800e9c0 <_dtoa_r+0xa10>
 800e9fc:	f018 0f01 	tst.w	r8, #1
 800ea00:	d0de      	beq.n	800e9c0 <_dtoa_r+0xa10>
 800ea02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ea06:	d1d8      	bne.n	800e9ba <_dtoa_r+0xa0a>
 800ea08:	9a00      	ldr	r2, [sp, #0]
 800ea0a:	2339      	movs	r3, #57	@ 0x39
 800ea0c:	7013      	strb	r3, [r2, #0]
 800ea0e:	4633      	mov	r3, r6
 800ea10:	461e      	mov	r6, r3
 800ea12:	3b01      	subs	r3, #1
 800ea14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ea18:	2a39      	cmp	r2, #57	@ 0x39
 800ea1a:	d052      	beq.n	800eac2 <_dtoa_r+0xb12>
 800ea1c:	3201      	adds	r2, #1
 800ea1e:	701a      	strb	r2, [r3, #0]
 800ea20:	e612      	b.n	800e648 <_dtoa_r+0x698>
 800ea22:	2a00      	cmp	r2, #0
 800ea24:	dd07      	ble.n	800ea36 <_dtoa_r+0xa86>
 800ea26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ea2a:	d0ed      	beq.n	800ea08 <_dtoa_r+0xa58>
 800ea2c:	9a00      	ldr	r2, [sp, #0]
 800ea2e:	f108 0301 	add.w	r3, r8, #1
 800ea32:	7013      	strb	r3, [r2, #0]
 800ea34:	e608      	b.n	800e648 <_dtoa_r+0x698>
 800ea36:	9b07      	ldr	r3, [sp, #28]
 800ea38:	9a07      	ldr	r2, [sp, #28]
 800ea3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ea3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d028      	beq.n	800ea96 <_dtoa_r+0xae6>
 800ea44:	4649      	mov	r1, r9
 800ea46:	2300      	movs	r3, #0
 800ea48:	220a      	movs	r2, #10
 800ea4a:	4658      	mov	r0, fp
 800ea4c:	f000 f9d6 	bl	800edfc <__multadd>
 800ea50:	42af      	cmp	r7, r5
 800ea52:	4681      	mov	r9, r0
 800ea54:	f04f 0300 	mov.w	r3, #0
 800ea58:	f04f 020a 	mov.w	r2, #10
 800ea5c:	4639      	mov	r1, r7
 800ea5e:	4658      	mov	r0, fp
 800ea60:	d107      	bne.n	800ea72 <_dtoa_r+0xac2>
 800ea62:	f000 f9cb 	bl	800edfc <__multadd>
 800ea66:	4607      	mov	r7, r0
 800ea68:	4605      	mov	r5, r0
 800ea6a:	9b07      	ldr	r3, [sp, #28]
 800ea6c:	3301      	adds	r3, #1
 800ea6e:	9307      	str	r3, [sp, #28]
 800ea70:	e774      	b.n	800e95c <_dtoa_r+0x9ac>
 800ea72:	f000 f9c3 	bl	800edfc <__multadd>
 800ea76:	4629      	mov	r1, r5
 800ea78:	4607      	mov	r7, r0
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	220a      	movs	r2, #10
 800ea7e:	4658      	mov	r0, fp
 800ea80:	f000 f9bc 	bl	800edfc <__multadd>
 800ea84:	4605      	mov	r5, r0
 800ea86:	e7f0      	b.n	800ea6a <_dtoa_r+0xaba>
 800ea88:	9b00      	ldr	r3, [sp, #0]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	bfcc      	ite	gt
 800ea8e:	461e      	movgt	r6, r3
 800ea90:	2601      	movle	r6, #1
 800ea92:	4456      	add	r6, sl
 800ea94:	2700      	movs	r7, #0
 800ea96:	4649      	mov	r1, r9
 800ea98:	2201      	movs	r2, #1
 800ea9a:	4658      	mov	r0, fp
 800ea9c:	f000 fba4 	bl	800f1e8 <__lshift>
 800eaa0:	4621      	mov	r1, r4
 800eaa2:	4681      	mov	r9, r0
 800eaa4:	f000 fc0c 	bl	800f2c0 <__mcmp>
 800eaa8:	2800      	cmp	r0, #0
 800eaaa:	dcb0      	bgt.n	800ea0e <_dtoa_r+0xa5e>
 800eaac:	d102      	bne.n	800eab4 <_dtoa_r+0xb04>
 800eaae:	f018 0f01 	tst.w	r8, #1
 800eab2:	d1ac      	bne.n	800ea0e <_dtoa_r+0xa5e>
 800eab4:	4633      	mov	r3, r6
 800eab6:	461e      	mov	r6, r3
 800eab8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eabc:	2a30      	cmp	r2, #48	@ 0x30
 800eabe:	d0fa      	beq.n	800eab6 <_dtoa_r+0xb06>
 800eac0:	e5c2      	b.n	800e648 <_dtoa_r+0x698>
 800eac2:	459a      	cmp	sl, r3
 800eac4:	d1a4      	bne.n	800ea10 <_dtoa_r+0xa60>
 800eac6:	9b04      	ldr	r3, [sp, #16]
 800eac8:	3301      	adds	r3, #1
 800eaca:	9304      	str	r3, [sp, #16]
 800eacc:	2331      	movs	r3, #49	@ 0x31
 800eace:	f88a 3000 	strb.w	r3, [sl]
 800ead2:	e5b9      	b.n	800e648 <_dtoa_r+0x698>
 800ead4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ead6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800eb34 <_dtoa_r+0xb84>
 800eada:	b11b      	cbz	r3, 800eae4 <_dtoa_r+0xb34>
 800eadc:	f10a 0308 	add.w	r3, sl, #8
 800eae0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800eae2:	6013      	str	r3, [r2, #0]
 800eae4:	4650      	mov	r0, sl
 800eae6:	b019      	add	sp, #100	@ 0x64
 800eae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	f77f ae37 	ble.w	800e762 <_dtoa_r+0x7b2>
 800eaf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eaf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800eaf8:	2001      	movs	r0, #1
 800eafa:	e655      	b.n	800e7a8 <_dtoa_r+0x7f8>
 800eafc:	9b00      	ldr	r3, [sp, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	f77f aed6 	ble.w	800e8b0 <_dtoa_r+0x900>
 800eb04:	4656      	mov	r6, sl
 800eb06:	4621      	mov	r1, r4
 800eb08:	4648      	mov	r0, r9
 800eb0a:	f7ff f9c9 	bl	800dea0 <quorem>
 800eb0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800eb12:	f806 8b01 	strb.w	r8, [r6], #1
 800eb16:	9b00      	ldr	r3, [sp, #0]
 800eb18:	eba6 020a 	sub.w	r2, r6, sl
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	ddb3      	ble.n	800ea88 <_dtoa_r+0xad8>
 800eb20:	4649      	mov	r1, r9
 800eb22:	2300      	movs	r3, #0
 800eb24:	220a      	movs	r2, #10
 800eb26:	4658      	mov	r0, fp
 800eb28:	f000 f968 	bl	800edfc <__multadd>
 800eb2c:	4681      	mov	r9, r0
 800eb2e:	e7ea      	b.n	800eb06 <_dtoa_r+0xb56>
 800eb30:	08011665 	.word	0x08011665
 800eb34:	080115e9 	.word	0x080115e9

0800eb38 <_free_r>:
 800eb38:	b538      	push	{r3, r4, r5, lr}
 800eb3a:	4605      	mov	r5, r0
 800eb3c:	2900      	cmp	r1, #0
 800eb3e:	d041      	beq.n	800ebc4 <_free_r+0x8c>
 800eb40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb44:	1f0c      	subs	r4, r1, #4
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	bfb8      	it	lt
 800eb4a:	18e4      	addlt	r4, r4, r3
 800eb4c:	f000 f8e8 	bl	800ed20 <__malloc_lock>
 800eb50:	4a1d      	ldr	r2, [pc, #116]	@ (800ebc8 <_free_r+0x90>)
 800eb52:	6813      	ldr	r3, [r2, #0]
 800eb54:	b933      	cbnz	r3, 800eb64 <_free_r+0x2c>
 800eb56:	6063      	str	r3, [r4, #4]
 800eb58:	6014      	str	r4, [r2, #0]
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb60:	f000 b8e4 	b.w	800ed2c <__malloc_unlock>
 800eb64:	42a3      	cmp	r3, r4
 800eb66:	d908      	bls.n	800eb7a <_free_r+0x42>
 800eb68:	6820      	ldr	r0, [r4, #0]
 800eb6a:	1821      	adds	r1, r4, r0
 800eb6c:	428b      	cmp	r3, r1
 800eb6e:	bf01      	itttt	eq
 800eb70:	6819      	ldreq	r1, [r3, #0]
 800eb72:	685b      	ldreq	r3, [r3, #4]
 800eb74:	1809      	addeq	r1, r1, r0
 800eb76:	6021      	streq	r1, [r4, #0]
 800eb78:	e7ed      	b.n	800eb56 <_free_r+0x1e>
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	685b      	ldr	r3, [r3, #4]
 800eb7e:	b10b      	cbz	r3, 800eb84 <_free_r+0x4c>
 800eb80:	42a3      	cmp	r3, r4
 800eb82:	d9fa      	bls.n	800eb7a <_free_r+0x42>
 800eb84:	6811      	ldr	r1, [r2, #0]
 800eb86:	1850      	adds	r0, r2, r1
 800eb88:	42a0      	cmp	r0, r4
 800eb8a:	d10b      	bne.n	800eba4 <_free_r+0x6c>
 800eb8c:	6820      	ldr	r0, [r4, #0]
 800eb8e:	4401      	add	r1, r0
 800eb90:	1850      	adds	r0, r2, r1
 800eb92:	4283      	cmp	r3, r0
 800eb94:	6011      	str	r1, [r2, #0]
 800eb96:	d1e0      	bne.n	800eb5a <_free_r+0x22>
 800eb98:	6818      	ldr	r0, [r3, #0]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	6053      	str	r3, [r2, #4]
 800eb9e:	4408      	add	r0, r1
 800eba0:	6010      	str	r0, [r2, #0]
 800eba2:	e7da      	b.n	800eb5a <_free_r+0x22>
 800eba4:	d902      	bls.n	800ebac <_free_r+0x74>
 800eba6:	230c      	movs	r3, #12
 800eba8:	602b      	str	r3, [r5, #0]
 800ebaa:	e7d6      	b.n	800eb5a <_free_r+0x22>
 800ebac:	6820      	ldr	r0, [r4, #0]
 800ebae:	1821      	adds	r1, r4, r0
 800ebb0:	428b      	cmp	r3, r1
 800ebb2:	bf04      	itt	eq
 800ebb4:	6819      	ldreq	r1, [r3, #0]
 800ebb6:	685b      	ldreq	r3, [r3, #4]
 800ebb8:	6063      	str	r3, [r4, #4]
 800ebba:	bf04      	itt	eq
 800ebbc:	1809      	addeq	r1, r1, r0
 800ebbe:	6021      	streq	r1, [r4, #0]
 800ebc0:	6054      	str	r4, [r2, #4]
 800ebc2:	e7ca      	b.n	800eb5a <_free_r+0x22>
 800ebc4:	bd38      	pop	{r3, r4, r5, pc}
 800ebc6:	bf00      	nop
 800ebc8:	2000204c 	.word	0x2000204c

0800ebcc <malloc>:
 800ebcc:	4b02      	ldr	r3, [pc, #8]	@ (800ebd8 <malloc+0xc>)
 800ebce:	4601      	mov	r1, r0
 800ebd0:	6818      	ldr	r0, [r3, #0]
 800ebd2:	f000 b825 	b.w	800ec20 <_malloc_r>
 800ebd6:	bf00      	nop
 800ebd8:	20000190 	.word	0x20000190

0800ebdc <sbrk_aligned>:
 800ebdc:	b570      	push	{r4, r5, r6, lr}
 800ebde:	4e0f      	ldr	r6, [pc, #60]	@ (800ec1c <sbrk_aligned+0x40>)
 800ebe0:	460c      	mov	r4, r1
 800ebe2:	6831      	ldr	r1, [r6, #0]
 800ebe4:	4605      	mov	r5, r0
 800ebe6:	b911      	cbnz	r1, 800ebee <sbrk_aligned+0x12>
 800ebe8:	f001 fe0c 	bl	8010804 <_sbrk_r>
 800ebec:	6030      	str	r0, [r6, #0]
 800ebee:	4621      	mov	r1, r4
 800ebf0:	4628      	mov	r0, r5
 800ebf2:	f001 fe07 	bl	8010804 <_sbrk_r>
 800ebf6:	1c43      	adds	r3, r0, #1
 800ebf8:	d103      	bne.n	800ec02 <sbrk_aligned+0x26>
 800ebfa:	f04f 34ff 	mov.w	r4, #4294967295
 800ebfe:	4620      	mov	r0, r4
 800ec00:	bd70      	pop	{r4, r5, r6, pc}
 800ec02:	1cc4      	adds	r4, r0, #3
 800ec04:	f024 0403 	bic.w	r4, r4, #3
 800ec08:	42a0      	cmp	r0, r4
 800ec0a:	d0f8      	beq.n	800ebfe <sbrk_aligned+0x22>
 800ec0c:	1a21      	subs	r1, r4, r0
 800ec0e:	4628      	mov	r0, r5
 800ec10:	f001 fdf8 	bl	8010804 <_sbrk_r>
 800ec14:	3001      	adds	r0, #1
 800ec16:	d1f2      	bne.n	800ebfe <sbrk_aligned+0x22>
 800ec18:	e7ef      	b.n	800ebfa <sbrk_aligned+0x1e>
 800ec1a:	bf00      	nop
 800ec1c:	20002048 	.word	0x20002048

0800ec20 <_malloc_r>:
 800ec20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec24:	1ccd      	adds	r5, r1, #3
 800ec26:	f025 0503 	bic.w	r5, r5, #3
 800ec2a:	3508      	adds	r5, #8
 800ec2c:	2d0c      	cmp	r5, #12
 800ec2e:	bf38      	it	cc
 800ec30:	250c      	movcc	r5, #12
 800ec32:	2d00      	cmp	r5, #0
 800ec34:	4606      	mov	r6, r0
 800ec36:	db01      	blt.n	800ec3c <_malloc_r+0x1c>
 800ec38:	42a9      	cmp	r1, r5
 800ec3a:	d904      	bls.n	800ec46 <_malloc_r+0x26>
 800ec3c:	230c      	movs	r3, #12
 800ec3e:	6033      	str	r3, [r6, #0]
 800ec40:	2000      	movs	r0, #0
 800ec42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ed1c <_malloc_r+0xfc>
 800ec4a:	f000 f869 	bl	800ed20 <__malloc_lock>
 800ec4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ec52:	461c      	mov	r4, r3
 800ec54:	bb44      	cbnz	r4, 800eca8 <_malloc_r+0x88>
 800ec56:	4629      	mov	r1, r5
 800ec58:	4630      	mov	r0, r6
 800ec5a:	f7ff ffbf 	bl	800ebdc <sbrk_aligned>
 800ec5e:	1c43      	adds	r3, r0, #1
 800ec60:	4604      	mov	r4, r0
 800ec62:	d158      	bne.n	800ed16 <_malloc_r+0xf6>
 800ec64:	f8d8 4000 	ldr.w	r4, [r8]
 800ec68:	4627      	mov	r7, r4
 800ec6a:	2f00      	cmp	r7, #0
 800ec6c:	d143      	bne.n	800ecf6 <_malloc_r+0xd6>
 800ec6e:	2c00      	cmp	r4, #0
 800ec70:	d04b      	beq.n	800ed0a <_malloc_r+0xea>
 800ec72:	6823      	ldr	r3, [r4, #0]
 800ec74:	4639      	mov	r1, r7
 800ec76:	4630      	mov	r0, r6
 800ec78:	eb04 0903 	add.w	r9, r4, r3
 800ec7c:	f001 fdc2 	bl	8010804 <_sbrk_r>
 800ec80:	4581      	cmp	r9, r0
 800ec82:	d142      	bne.n	800ed0a <_malloc_r+0xea>
 800ec84:	6821      	ldr	r1, [r4, #0]
 800ec86:	1a6d      	subs	r5, r5, r1
 800ec88:	4629      	mov	r1, r5
 800ec8a:	4630      	mov	r0, r6
 800ec8c:	f7ff ffa6 	bl	800ebdc <sbrk_aligned>
 800ec90:	3001      	adds	r0, #1
 800ec92:	d03a      	beq.n	800ed0a <_malloc_r+0xea>
 800ec94:	6823      	ldr	r3, [r4, #0]
 800ec96:	442b      	add	r3, r5
 800ec98:	6023      	str	r3, [r4, #0]
 800ec9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ec9e:	685a      	ldr	r2, [r3, #4]
 800eca0:	bb62      	cbnz	r2, 800ecfc <_malloc_r+0xdc>
 800eca2:	f8c8 7000 	str.w	r7, [r8]
 800eca6:	e00f      	b.n	800ecc8 <_malloc_r+0xa8>
 800eca8:	6822      	ldr	r2, [r4, #0]
 800ecaa:	1b52      	subs	r2, r2, r5
 800ecac:	d420      	bmi.n	800ecf0 <_malloc_r+0xd0>
 800ecae:	2a0b      	cmp	r2, #11
 800ecb0:	d917      	bls.n	800ece2 <_malloc_r+0xc2>
 800ecb2:	1961      	adds	r1, r4, r5
 800ecb4:	42a3      	cmp	r3, r4
 800ecb6:	6025      	str	r5, [r4, #0]
 800ecb8:	bf18      	it	ne
 800ecba:	6059      	strne	r1, [r3, #4]
 800ecbc:	6863      	ldr	r3, [r4, #4]
 800ecbe:	bf08      	it	eq
 800ecc0:	f8c8 1000 	streq.w	r1, [r8]
 800ecc4:	5162      	str	r2, [r4, r5]
 800ecc6:	604b      	str	r3, [r1, #4]
 800ecc8:	4630      	mov	r0, r6
 800ecca:	f000 f82f 	bl	800ed2c <__malloc_unlock>
 800ecce:	f104 000b 	add.w	r0, r4, #11
 800ecd2:	1d23      	adds	r3, r4, #4
 800ecd4:	f020 0007 	bic.w	r0, r0, #7
 800ecd8:	1ac2      	subs	r2, r0, r3
 800ecda:	bf1c      	itt	ne
 800ecdc:	1a1b      	subne	r3, r3, r0
 800ecde:	50a3      	strne	r3, [r4, r2]
 800ece0:	e7af      	b.n	800ec42 <_malloc_r+0x22>
 800ece2:	6862      	ldr	r2, [r4, #4]
 800ece4:	42a3      	cmp	r3, r4
 800ece6:	bf0c      	ite	eq
 800ece8:	f8c8 2000 	streq.w	r2, [r8]
 800ecec:	605a      	strne	r2, [r3, #4]
 800ecee:	e7eb      	b.n	800ecc8 <_malloc_r+0xa8>
 800ecf0:	4623      	mov	r3, r4
 800ecf2:	6864      	ldr	r4, [r4, #4]
 800ecf4:	e7ae      	b.n	800ec54 <_malloc_r+0x34>
 800ecf6:	463c      	mov	r4, r7
 800ecf8:	687f      	ldr	r7, [r7, #4]
 800ecfa:	e7b6      	b.n	800ec6a <_malloc_r+0x4a>
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	42a3      	cmp	r3, r4
 800ed02:	d1fb      	bne.n	800ecfc <_malloc_r+0xdc>
 800ed04:	2300      	movs	r3, #0
 800ed06:	6053      	str	r3, [r2, #4]
 800ed08:	e7de      	b.n	800ecc8 <_malloc_r+0xa8>
 800ed0a:	230c      	movs	r3, #12
 800ed0c:	6033      	str	r3, [r6, #0]
 800ed0e:	4630      	mov	r0, r6
 800ed10:	f000 f80c 	bl	800ed2c <__malloc_unlock>
 800ed14:	e794      	b.n	800ec40 <_malloc_r+0x20>
 800ed16:	6005      	str	r5, [r0, #0]
 800ed18:	e7d6      	b.n	800ecc8 <_malloc_r+0xa8>
 800ed1a:	bf00      	nop
 800ed1c:	2000204c 	.word	0x2000204c

0800ed20 <__malloc_lock>:
 800ed20:	4801      	ldr	r0, [pc, #4]	@ (800ed28 <__malloc_lock+0x8>)
 800ed22:	f7ff b8b4 	b.w	800de8e <__retarget_lock_acquire_recursive>
 800ed26:	bf00      	nop
 800ed28:	20002044 	.word	0x20002044

0800ed2c <__malloc_unlock>:
 800ed2c:	4801      	ldr	r0, [pc, #4]	@ (800ed34 <__malloc_unlock+0x8>)
 800ed2e:	f7ff b8af 	b.w	800de90 <__retarget_lock_release_recursive>
 800ed32:	bf00      	nop
 800ed34:	20002044 	.word	0x20002044

0800ed38 <_Balloc>:
 800ed38:	b570      	push	{r4, r5, r6, lr}
 800ed3a:	69c6      	ldr	r6, [r0, #28]
 800ed3c:	4604      	mov	r4, r0
 800ed3e:	460d      	mov	r5, r1
 800ed40:	b976      	cbnz	r6, 800ed60 <_Balloc+0x28>
 800ed42:	2010      	movs	r0, #16
 800ed44:	f7ff ff42 	bl	800ebcc <malloc>
 800ed48:	4602      	mov	r2, r0
 800ed4a:	61e0      	str	r0, [r4, #28]
 800ed4c:	b920      	cbnz	r0, 800ed58 <_Balloc+0x20>
 800ed4e:	4b18      	ldr	r3, [pc, #96]	@ (800edb0 <_Balloc+0x78>)
 800ed50:	4818      	ldr	r0, [pc, #96]	@ (800edb4 <_Balloc+0x7c>)
 800ed52:	216b      	movs	r1, #107	@ 0x6b
 800ed54:	f001 fd7c 	bl	8010850 <__assert_func>
 800ed58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed5c:	6006      	str	r6, [r0, #0]
 800ed5e:	60c6      	str	r6, [r0, #12]
 800ed60:	69e6      	ldr	r6, [r4, #28]
 800ed62:	68f3      	ldr	r3, [r6, #12]
 800ed64:	b183      	cbz	r3, 800ed88 <_Balloc+0x50>
 800ed66:	69e3      	ldr	r3, [r4, #28]
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ed6e:	b9b8      	cbnz	r0, 800eda0 <_Balloc+0x68>
 800ed70:	2101      	movs	r1, #1
 800ed72:	fa01 f605 	lsl.w	r6, r1, r5
 800ed76:	1d72      	adds	r2, r6, #5
 800ed78:	0092      	lsls	r2, r2, #2
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	f001 fd86 	bl	801088c <_calloc_r>
 800ed80:	b160      	cbz	r0, 800ed9c <_Balloc+0x64>
 800ed82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ed86:	e00e      	b.n	800eda6 <_Balloc+0x6e>
 800ed88:	2221      	movs	r2, #33	@ 0x21
 800ed8a:	2104      	movs	r1, #4
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	f001 fd7d 	bl	801088c <_calloc_r>
 800ed92:	69e3      	ldr	r3, [r4, #28]
 800ed94:	60f0      	str	r0, [r6, #12]
 800ed96:	68db      	ldr	r3, [r3, #12]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d1e4      	bne.n	800ed66 <_Balloc+0x2e>
 800ed9c:	2000      	movs	r0, #0
 800ed9e:	bd70      	pop	{r4, r5, r6, pc}
 800eda0:	6802      	ldr	r2, [r0, #0]
 800eda2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eda6:	2300      	movs	r3, #0
 800eda8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800edac:	e7f7      	b.n	800ed9e <_Balloc+0x66>
 800edae:	bf00      	nop
 800edb0:	080115f6 	.word	0x080115f6
 800edb4:	08011676 	.word	0x08011676

0800edb8 <_Bfree>:
 800edb8:	b570      	push	{r4, r5, r6, lr}
 800edba:	69c6      	ldr	r6, [r0, #28]
 800edbc:	4605      	mov	r5, r0
 800edbe:	460c      	mov	r4, r1
 800edc0:	b976      	cbnz	r6, 800ede0 <_Bfree+0x28>
 800edc2:	2010      	movs	r0, #16
 800edc4:	f7ff ff02 	bl	800ebcc <malloc>
 800edc8:	4602      	mov	r2, r0
 800edca:	61e8      	str	r0, [r5, #28]
 800edcc:	b920      	cbnz	r0, 800edd8 <_Bfree+0x20>
 800edce:	4b09      	ldr	r3, [pc, #36]	@ (800edf4 <_Bfree+0x3c>)
 800edd0:	4809      	ldr	r0, [pc, #36]	@ (800edf8 <_Bfree+0x40>)
 800edd2:	218f      	movs	r1, #143	@ 0x8f
 800edd4:	f001 fd3c 	bl	8010850 <__assert_func>
 800edd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eddc:	6006      	str	r6, [r0, #0]
 800edde:	60c6      	str	r6, [r0, #12]
 800ede0:	b13c      	cbz	r4, 800edf2 <_Bfree+0x3a>
 800ede2:	69eb      	ldr	r3, [r5, #28]
 800ede4:	6862      	ldr	r2, [r4, #4]
 800ede6:	68db      	ldr	r3, [r3, #12]
 800ede8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800edec:	6021      	str	r1, [r4, #0]
 800edee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800edf2:	bd70      	pop	{r4, r5, r6, pc}
 800edf4:	080115f6 	.word	0x080115f6
 800edf8:	08011676 	.word	0x08011676

0800edfc <__multadd>:
 800edfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee00:	690d      	ldr	r5, [r1, #16]
 800ee02:	4607      	mov	r7, r0
 800ee04:	460c      	mov	r4, r1
 800ee06:	461e      	mov	r6, r3
 800ee08:	f101 0c14 	add.w	ip, r1, #20
 800ee0c:	2000      	movs	r0, #0
 800ee0e:	f8dc 3000 	ldr.w	r3, [ip]
 800ee12:	b299      	uxth	r1, r3
 800ee14:	fb02 6101 	mla	r1, r2, r1, r6
 800ee18:	0c1e      	lsrs	r6, r3, #16
 800ee1a:	0c0b      	lsrs	r3, r1, #16
 800ee1c:	fb02 3306 	mla	r3, r2, r6, r3
 800ee20:	b289      	uxth	r1, r1
 800ee22:	3001      	adds	r0, #1
 800ee24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ee28:	4285      	cmp	r5, r0
 800ee2a:	f84c 1b04 	str.w	r1, [ip], #4
 800ee2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ee32:	dcec      	bgt.n	800ee0e <__multadd+0x12>
 800ee34:	b30e      	cbz	r6, 800ee7a <__multadd+0x7e>
 800ee36:	68a3      	ldr	r3, [r4, #8]
 800ee38:	42ab      	cmp	r3, r5
 800ee3a:	dc19      	bgt.n	800ee70 <__multadd+0x74>
 800ee3c:	6861      	ldr	r1, [r4, #4]
 800ee3e:	4638      	mov	r0, r7
 800ee40:	3101      	adds	r1, #1
 800ee42:	f7ff ff79 	bl	800ed38 <_Balloc>
 800ee46:	4680      	mov	r8, r0
 800ee48:	b928      	cbnz	r0, 800ee56 <__multadd+0x5a>
 800ee4a:	4602      	mov	r2, r0
 800ee4c:	4b0c      	ldr	r3, [pc, #48]	@ (800ee80 <__multadd+0x84>)
 800ee4e:	480d      	ldr	r0, [pc, #52]	@ (800ee84 <__multadd+0x88>)
 800ee50:	21ba      	movs	r1, #186	@ 0xba
 800ee52:	f001 fcfd 	bl	8010850 <__assert_func>
 800ee56:	6922      	ldr	r2, [r4, #16]
 800ee58:	3202      	adds	r2, #2
 800ee5a:	f104 010c 	add.w	r1, r4, #12
 800ee5e:	0092      	lsls	r2, r2, #2
 800ee60:	300c      	adds	r0, #12
 800ee62:	f001 fcdf 	bl	8010824 <memcpy>
 800ee66:	4621      	mov	r1, r4
 800ee68:	4638      	mov	r0, r7
 800ee6a:	f7ff ffa5 	bl	800edb8 <_Bfree>
 800ee6e:	4644      	mov	r4, r8
 800ee70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ee74:	3501      	adds	r5, #1
 800ee76:	615e      	str	r6, [r3, #20]
 800ee78:	6125      	str	r5, [r4, #16]
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee80:	08011665 	.word	0x08011665
 800ee84:	08011676 	.word	0x08011676

0800ee88 <__s2b>:
 800ee88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee8c:	460c      	mov	r4, r1
 800ee8e:	4615      	mov	r5, r2
 800ee90:	461f      	mov	r7, r3
 800ee92:	2209      	movs	r2, #9
 800ee94:	3308      	adds	r3, #8
 800ee96:	4606      	mov	r6, r0
 800ee98:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee9c:	2100      	movs	r1, #0
 800ee9e:	2201      	movs	r2, #1
 800eea0:	429a      	cmp	r2, r3
 800eea2:	db09      	blt.n	800eeb8 <__s2b+0x30>
 800eea4:	4630      	mov	r0, r6
 800eea6:	f7ff ff47 	bl	800ed38 <_Balloc>
 800eeaa:	b940      	cbnz	r0, 800eebe <__s2b+0x36>
 800eeac:	4602      	mov	r2, r0
 800eeae:	4b19      	ldr	r3, [pc, #100]	@ (800ef14 <__s2b+0x8c>)
 800eeb0:	4819      	ldr	r0, [pc, #100]	@ (800ef18 <__s2b+0x90>)
 800eeb2:	21d3      	movs	r1, #211	@ 0xd3
 800eeb4:	f001 fccc 	bl	8010850 <__assert_func>
 800eeb8:	0052      	lsls	r2, r2, #1
 800eeba:	3101      	adds	r1, #1
 800eebc:	e7f0      	b.n	800eea0 <__s2b+0x18>
 800eebe:	9b08      	ldr	r3, [sp, #32]
 800eec0:	6143      	str	r3, [r0, #20]
 800eec2:	2d09      	cmp	r5, #9
 800eec4:	f04f 0301 	mov.w	r3, #1
 800eec8:	6103      	str	r3, [r0, #16]
 800eeca:	dd16      	ble.n	800eefa <__s2b+0x72>
 800eecc:	f104 0909 	add.w	r9, r4, #9
 800eed0:	46c8      	mov	r8, r9
 800eed2:	442c      	add	r4, r5
 800eed4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eed8:	4601      	mov	r1, r0
 800eeda:	3b30      	subs	r3, #48	@ 0x30
 800eedc:	220a      	movs	r2, #10
 800eede:	4630      	mov	r0, r6
 800eee0:	f7ff ff8c 	bl	800edfc <__multadd>
 800eee4:	45a0      	cmp	r8, r4
 800eee6:	d1f5      	bne.n	800eed4 <__s2b+0x4c>
 800eee8:	f1a5 0408 	sub.w	r4, r5, #8
 800eeec:	444c      	add	r4, r9
 800eeee:	1b2d      	subs	r5, r5, r4
 800eef0:	1963      	adds	r3, r4, r5
 800eef2:	42bb      	cmp	r3, r7
 800eef4:	db04      	blt.n	800ef00 <__s2b+0x78>
 800eef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eefa:	340a      	adds	r4, #10
 800eefc:	2509      	movs	r5, #9
 800eefe:	e7f6      	b.n	800eeee <__s2b+0x66>
 800ef00:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ef04:	4601      	mov	r1, r0
 800ef06:	3b30      	subs	r3, #48	@ 0x30
 800ef08:	220a      	movs	r2, #10
 800ef0a:	4630      	mov	r0, r6
 800ef0c:	f7ff ff76 	bl	800edfc <__multadd>
 800ef10:	e7ee      	b.n	800eef0 <__s2b+0x68>
 800ef12:	bf00      	nop
 800ef14:	08011665 	.word	0x08011665
 800ef18:	08011676 	.word	0x08011676

0800ef1c <__hi0bits>:
 800ef1c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ef20:	4603      	mov	r3, r0
 800ef22:	bf36      	itet	cc
 800ef24:	0403      	lslcc	r3, r0, #16
 800ef26:	2000      	movcs	r0, #0
 800ef28:	2010      	movcc	r0, #16
 800ef2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ef2e:	bf3c      	itt	cc
 800ef30:	021b      	lslcc	r3, r3, #8
 800ef32:	3008      	addcc	r0, #8
 800ef34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef38:	bf3c      	itt	cc
 800ef3a:	011b      	lslcc	r3, r3, #4
 800ef3c:	3004      	addcc	r0, #4
 800ef3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef42:	bf3c      	itt	cc
 800ef44:	009b      	lslcc	r3, r3, #2
 800ef46:	3002      	addcc	r0, #2
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	db05      	blt.n	800ef58 <__hi0bits+0x3c>
 800ef4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ef50:	f100 0001 	add.w	r0, r0, #1
 800ef54:	bf08      	it	eq
 800ef56:	2020      	moveq	r0, #32
 800ef58:	4770      	bx	lr

0800ef5a <__lo0bits>:
 800ef5a:	6803      	ldr	r3, [r0, #0]
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	f013 0007 	ands.w	r0, r3, #7
 800ef62:	d00b      	beq.n	800ef7c <__lo0bits+0x22>
 800ef64:	07d9      	lsls	r1, r3, #31
 800ef66:	d421      	bmi.n	800efac <__lo0bits+0x52>
 800ef68:	0798      	lsls	r0, r3, #30
 800ef6a:	bf49      	itett	mi
 800ef6c:	085b      	lsrmi	r3, r3, #1
 800ef6e:	089b      	lsrpl	r3, r3, #2
 800ef70:	2001      	movmi	r0, #1
 800ef72:	6013      	strmi	r3, [r2, #0]
 800ef74:	bf5c      	itt	pl
 800ef76:	6013      	strpl	r3, [r2, #0]
 800ef78:	2002      	movpl	r0, #2
 800ef7a:	4770      	bx	lr
 800ef7c:	b299      	uxth	r1, r3
 800ef7e:	b909      	cbnz	r1, 800ef84 <__lo0bits+0x2a>
 800ef80:	0c1b      	lsrs	r3, r3, #16
 800ef82:	2010      	movs	r0, #16
 800ef84:	b2d9      	uxtb	r1, r3
 800ef86:	b909      	cbnz	r1, 800ef8c <__lo0bits+0x32>
 800ef88:	3008      	adds	r0, #8
 800ef8a:	0a1b      	lsrs	r3, r3, #8
 800ef8c:	0719      	lsls	r1, r3, #28
 800ef8e:	bf04      	itt	eq
 800ef90:	091b      	lsreq	r3, r3, #4
 800ef92:	3004      	addeq	r0, #4
 800ef94:	0799      	lsls	r1, r3, #30
 800ef96:	bf04      	itt	eq
 800ef98:	089b      	lsreq	r3, r3, #2
 800ef9a:	3002      	addeq	r0, #2
 800ef9c:	07d9      	lsls	r1, r3, #31
 800ef9e:	d403      	bmi.n	800efa8 <__lo0bits+0x4e>
 800efa0:	085b      	lsrs	r3, r3, #1
 800efa2:	f100 0001 	add.w	r0, r0, #1
 800efa6:	d003      	beq.n	800efb0 <__lo0bits+0x56>
 800efa8:	6013      	str	r3, [r2, #0]
 800efaa:	4770      	bx	lr
 800efac:	2000      	movs	r0, #0
 800efae:	4770      	bx	lr
 800efb0:	2020      	movs	r0, #32
 800efb2:	4770      	bx	lr

0800efb4 <__i2b>:
 800efb4:	b510      	push	{r4, lr}
 800efb6:	460c      	mov	r4, r1
 800efb8:	2101      	movs	r1, #1
 800efba:	f7ff febd 	bl	800ed38 <_Balloc>
 800efbe:	4602      	mov	r2, r0
 800efc0:	b928      	cbnz	r0, 800efce <__i2b+0x1a>
 800efc2:	4b05      	ldr	r3, [pc, #20]	@ (800efd8 <__i2b+0x24>)
 800efc4:	4805      	ldr	r0, [pc, #20]	@ (800efdc <__i2b+0x28>)
 800efc6:	f240 1145 	movw	r1, #325	@ 0x145
 800efca:	f001 fc41 	bl	8010850 <__assert_func>
 800efce:	2301      	movs	r3, #1
 800efd0:	6144      	str	r4, [r0, #20]
 800efd2:	6103      	str	r3, [r0, #16]
 800efd4:	bd10      	pop	{r4, pc}
 800efd6:	bf00      	nop
 800efd8:	08011665 	.word	0x08011665
 800efdc:	08011676 	.word	0x08011676

0800efe0 <__multiply>:
 800efe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe4:	4614      	mov	r4, r2
 800efe6:	690a      	ldr	r2, [r1, #16]
 800efe8:	6923      	ldr	r3, [r4, #16]
 800efea:	429a      	cmp	r2, r3
 800efec:	bfa8      	it	ge
 800efee:	4623      	movge	r3, r4
 800eff0:	460f      	mov	r7, r1
 800eff2:	bfa4      	itt	ge
 800eff4:	460c      	movge	r4, r1
 800eff6:	461f      	movge	r7, r3
 800eff8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800effc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f000:	68a3      	ldr	r3, [r4, #8]
 800f002:	6861      	ldr	r1, [r4, #4]
 800f004:	eb0a 0609 	add.w	r6, sl, r9
 800f008:	42b3      	cmp	r3, r6
 800f00a:	b085      	sub	sp, #20
 800f00c:	bfb8      	it	lt
 800f00e:	3101      	addlt	r1, #1
 800f010:	f7ff fe92 	bl	800ed38 <_Balloc>
 800f014:	b930      	cbnz	r0, 800f024 <__multiply+0x44>
 800f016:	4602      	mov	r2, r0
 800f018:	4b44      	ldr	r3, [pc, #272]	@ (800f12c <__multiply+0x14c>)
 800f01a:	4845      	ldr	r0, [pc, #276]	@ (800f130 <__multiply+0x150>)
 800f01c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f020:	f001 fc16 	bl	8010850 <__assert_func>
 800f024:	f100 0514 	add.w	r5, r0, #20
 800f028:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f02c:	462b      	mov	r3, r5
 800f02e:	2200      	movs	r2, #0
 800f030:	4543      	cmp	r3, r8
 800f032:	d321      	bcc.n	800f078 <__multiply+0x98>
 800f034:	f107 0114 	add.w	r1, r7, #20
 800f038:	f104 0214 	add.w	r2, r4, #20
 800f03c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f040:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f044:	9302      	str	r3, [sp, #8]
 800f046:	1b13      	subs	r3, r2, r4
 800f048:	3b15      	subs	r3, #21
 800f04a:	f023 0303 	bic.w	r3, r3, #3
 800f04e:	3304      	adds	r3, #4
 800f050:	f104 0715 	add.w	r7, r4, #21
 800f054:	42ba      	cmp	r2, r7
 800f056:	bf38      	it	cc
 800f058:	2304      	movcc	r3, #4
 800f05a:	9301      	str	r3, [sp, #4]
 800f05c:	9b02      	ldr	r3, [sp, #8]
 800f05e:	9103      	str	r1, [sp, #12]
 800f060:	428b      	cmp	r3, r1
 800f062:	d80c      	bhi.n	800f07e <__multiply+0x9e>
 800f064:	2e00      	cmp	r6, #0
 800f066:	dd03      	ble.n	800f070 <__multiply+0x90>
 800f068:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d05b      	beq.n	800f128 <__multiply+0x148>
 800f070:	6106      	str	r6, [r0, #16]
 800f072:	b005      	add	sp, #20
 800f074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f078:	f843 2b04 	str.w	r2, [r3], #4
 800f07c:	e7d8      	b.n	800f030 <__multiply+0x50>
 800f07e:	f8b1 a000 	ldrh.w	sl, [r1]
 800f082:	f1ba 0f00 	cmp.w	sl, #0
 800f086:	d024      	beq.n	800f0d2 <__multiply+0xf2>
 800f088:	f104 0e14 	add.w	lr, r4, #20
 800f08c:	46a9      	mov	r9, r5
 800f08e:	f04f 0c00 	mov.w	ip, #0
 800f092:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f096:	f8d9 3000 	ldr.w	r3, [r9]
 800f09a:	fa1f fb87 	uxth.w	fp, r7
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	fb0a 330b 	mla	r3, sl, fp, r3
 800f0a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f0a8:	f8d9 7000 	ldr.w	r7, [r9]
 800f0ac:	4463      	add	r3, ip
 800f0ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f0b2:	fb0a c70b 	mla	r7, sl, fp, ip
 800f0b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f0ba:	b29b      	uxth	r3, r3
 800f0bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f0c0:	4572      	cmp	r2, lr
 800f0c2:	f849 3b04 	str.w	r3, [r9], #4
 800f0c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f0ca:	d8e2      	bhi.n	800f092 <__multiply+0xb2>
 800f0cc:	9b01      	ldr	r3, [sp, #4]
 800f0ce:	f845 c003 	str.w	ip, [r5, r3]
 800f0d2:	9b03      	ldr	r3, [sp, #12]
 800f0d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f0d8:	3104      	adds	r1, #4
 800f0da:	f1b9 0f00 	cmp.w	r9, #0
 800f0de:	d021      	beq.n	800f124 <__multiply+0x144>
 800f0e0:	682b      	ldr	r3, [r5, #0]
 800f0e2:	f104 0c14 	add.w	ip, r4, #20
 800f0e6:	46ae      	mov	lr, r5
 800f0e8:	f04f 0a00 	mov.w	sl, #0
 800f0ec:	f8bc b000 	ldrh.w	fp, [ip]
 800f0f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f0f4:	fb09 770b 	mla	r7, r9, fp, r7
 800f0f8:	4457      	add	r7, sl
 800f0fa:	b29b      	uxth	r3, r3
 800f0fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f100:	f84e 3b04 	str.w	r3, [lr], #4
 800f104:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f108:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f10c:	f8be 3000 	ldrh.w	r3, [lr]
 800f110:	fb09 330a 	mla	r3, r9, sl, r3
 800f114:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f118:	4562      	cmp	r2, ip
 800f11a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f11e:	d8e5      	bhi.n	800f0ec <__multiply+0x10c>
 800f120:	9f01      	ldr	r7, [sp, #4]
 800f122:	51eb      	str	r3, [r5, r7]
 800f124:	3504      	adds	r5, #4
 800f126:	e799      	b.n	800f05c <__multiply+0x7c>
 800f128:	3e01      	subs	r6, #1
 800f12a:	e79b      	b.n	800f064 <__multiply+0x84>
 800f12c:	08011665 	.word	0x08011665
 800f130:	08011676 	.word	0x08011676

0800f134 <__pow5mult>:
 800f134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f138:	4615      	mov	r5, r2
 800f13a:	f012 0203 	ands.w	r2, r2, #3
 800f13e:	4607      	mov	r7, r0
 800f140:	460e      	mov	r6, r1
 800f142:	d007      	beq.n	800f154 <__pow5mult+0x20>
 800f144:	4c25      	ldr	r4, [pc, #148]	@ (800f1dc <__pow5mult+0xa8>)
 800f146:	3a01      	subs	r2, #1
 800f148:	2300      	movs	r3, #0
 800f14a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f14e:	f7ff fe55 	bl	800edfc <__multadd>
 800f152:	4606      	mov	r6, r0
 800f154:	10ad      	asrs	r5, r5, #2
 800f156:	d03d      	beq.n	800f1d4 <__pow5mult+0xa0>
 800f158:	69fc      	ldr	r4, [r7, #28]
 800f15a:	b97c      	cbnz	r4, 800f17c <__pow5mult+0x48>
 800f15c:	2010      	movs	r0, #16
 800f15e:	f7ff fd35 	bl	800ebcc <malloc>
 800f162:	4602      	mov	r2, r0
 800f164:	61f8      	str	r0, [r7, #28]
 800f166:	b928      	cbnz	r0, 800f174 <__pow5mult+0x40>
 800f168:	4b1d      	ldr	r3, [pc, #116]	@ (800f1e0 <__pow5mult+0xac>)
 800f16a:	481e      	ldr	r0, [pc, #120]	@ (800f1e4 <__pow5mult+0xb0>)
 800f16c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f170:	f001 fb6e 	bl	8010850 <__assert_func>
 800f174:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f178:	6004      	str	r4, [r0, #0]
 800f17a:	60c4      	str	r4, [r0, #12]
 800f17c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f180:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f184:	b94c      	cbnz	r4, 800f19a <__pow5mult+0x66>
 800f186:	f240 2171 	movw	r1, #625	@ 0x271
 800f18a:	4638      	mov	r0, r7
 800f18c:	f7ff ff12 	bl	800efb4 <__i2b>
 800f190:	2300      	movs	r3, #0
 800f192:	f8c8 0008 	str.w	r0, [r8, #8]
 800f196:	4604      	mov	r4, r0
 800f198:	6003      	str	r3, [r0, #0]
 800f19a:	f04f 0900 	mov.w	r9, #0
 800f19e:	07eb      	lsls	r3, r5, #31
 800f1a0:	d50a      	bpl.n	800f1b8 <__pow5mult+0x84>
 800f1a2:	4631      	mov	r1, r6
 800f1a4:	4622      	mov	r2, r4
 800f1a6:	4638      	mov	r0, r7
 800f1a8:	f7ff ff1a 	bl	800efe0 <__multiply>
 800f1ac:	4631      	mov	r1, r6
 800f1ae:	4680      	mov	r8, r0
 800f1b0:	4638      	mov	r0, r7
 800f1b2:	f7ff fe01 	bl	800edb8 <_Bfree>
 800f1b6:	4646      	mov	r6, r8
 800f1b8:	106d      	asrs	r5, r5, #1
 800f1ba:	d00b      	beq.n	800f1d4 <__pow5mult+0xa0>
 800f1bc:	6820      	ldr	r0, [r4, #0]
 800f1be:	b938      	cbnz	r0, 800f1d0 <__pow5mult+0x9c>
 800f1c0:	4622      	mov	r2, r4
 800f1c2:	4621      	mov	r1, r4
 800f1c4:	4638      	mov	r0, r7
 800f1c6:	f7ff ff0b 	bl	800efe0 <__multiply>
 800f1ca:	6020      	str	r0, [r4, #0]
 800f1cc:	f8c0 9000 	str.w	r9, [r0]
 800f1d0:	4604      	mov	r4, r0
 800f1d2:	e7e4      	b.n	800f19e <__pow5mult+0x6a>
 800f1d4:	4630      	mov	r0, r6
 800f1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1da:	bf00      	nop
 800f1dc:	080116d0 	.word	0x080116d0
 800f1e0:	080115f6 	.word	0x080115f6
 800f1e4:	08011676 	.word	0x08011676

0800f1e8 <__lshift>:
 800f1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1ec:	460c      	mov	r4, r1
 800f1ee:	6849      	ldr	r1, [r1, #4]
 800f1f0:	6923      	ldr	r3, [r4, #16]
 800f1f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f1f6:	68a3      	ldr	r3, [r4, #8]
 800f1f8:	4607      	mov	r7, r0
 800f1fa:	4691      	mov	r9, r2
 800f1fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f200:	f108 0601 	add.w	r6, r8, #1
 800f204:	42b3      	cmp	r3, r6
 800f206:	db0b      	blt.n	800f220 <__lshift+0x38>
 800f208:	4638      	mov	r0, r7
 800f20a:	f7ff fd95 	bl	800ed38 <_Balloc>
 800f20e:	4605      	mov	r5, r0
 800f210:	b948      	cbnz	r0, 800f226 <__lshift+0x3e>
 800f212:	4602      	mov	r2, r0
 800f214:	4b28      	ldr	r3, [pc, #160]	@ (800f2b8 <__lshift+0xd0>)
 800f216:	4829      	ldr	r0, [pc, #164]	@ (800f2bc <__lshift+0xd4>)
 800f218:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f21c:	f001 fb18 	bl	8010850 <__assert_func>
 800f220:	3101      	adds	r1, #1
 800f222:	005b      	lsls	r3, r3, #1
 800f224:	e7ee      	b.n	800f204 <__lshift+0x1c>
 800f226:	2300      	movs	r3, #0
 800f228:	f100 0114 	add.w	r1, r0, #20
 800f22c:	f100 0210 	add.w	r2, r0, #16
 800f230:	4618      	mov	r0, r3
 800f232:	4553      	cmp	r3, sl
 800f234:	db33      	blt.n	800f29e <__lshift+0xb6>
 800f236:	6920      	ldr	r0, [r4, #16]
 800f238:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f23c:	f104 0314 	add.w	r3, r4, #20
 800f240:	f019 091f 	ands.w	r9, r9, #31
 800f244:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f248:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f24c:	d02b      	beq.n	800f2a6 <__lshift+0xbe>
 800f24e:	f1c9 0e20 	rsb	lr, r9, #32
 800f252:	468a      	mov	sl, r1
 800f254:	2200      	movs	r2, #0
 800f256:	6818      	ldr	r0, [r3, #0]
 800f258:	fa00 f009 	lsl.w	r0, r0, r9
 800f25c:	4310      	orrs	r0, r2
 800f25e:	f84a 0b04 	str.w	r0, [sl], #4
 800f262:	f853 2b04 	ldr.w	r2, [r3], #4
 800f266:	459c      	cmp	ip, r3
 800f268:	fa22 f20e 	lsr.w	r2, r2, lr
 800f26c:	d8f3      	bhi.n	800f256 <__lshift+0x6e>
 800f26e:	ebac 0304 	sub.w	r3, ip, r4
 800f272:	3b15      	subs	r3, #21
 800f274:	f023 0303 	bic.w	r3, r3, #3
 800f278:	3304      	adds	r3, #4
 800f27a:	f104 0015 	add.w	r0, r4, #21
 800f27e:	4584      	cmp	ip, r0
 800f280:	bf38      	it	cc
 800f282:	2304      	movcc	r3, #4
 800f284:	50ca      	str	r2, [r1, r3]
 800f286:	b10a      	cbz	r2, 800f28c <__lshift+0xa4>
 800f288:	f108 0602 	add.w	r6, r8, #2
 800f28c:	3e01      	subs	r6, #1
 800f28e:	4638      	mov	r0, r7
 800f290:	612e      	str	r6, [r5, #16]
 800f292:	4621      	mov	r1, r4
 800f294:	f7ff fd90 	bl	800edb8 <_Bfree>
 800f298:	4628      	mov	r0, r5
 800f29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f29e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	e7c5      	b.n	800f232 <__lshift+0x4a>
 800f2a6:	3904      	subs	r1, #4
 800f2a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800f2b0:	459c      	cmp	ip, r3
 800f2b2:	d8f9      	bhi.n	800f2a8 <__lshift+0xc0>
 800f2b4:	e7ea      	b.n	800f28c <__lshift+0xa4>
 800f2b6:	bf00      	nop
 800f2b8:	08011665 	.word	0x08011665
 800f2bc:	08011676 	.word	0x08011676

0800f2c0 <__mcmp>:
 800f2c0:	690a      	ldr	r2, [r1, #16]
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	6900      	ldr	r0, [r0, #16]
 800f2c6:	1a80      	subs	r0, r0, r2
 800f2c8:	b530      	push	{r4, r5, lr}
 800f2ca:	d10e      	bne.n	800f2ea <__mcmp+0x2a>
 800f2cc:	3314      	adds	r3, #20
 800f2ce:	3114      	adds	r1, #20
 800f2d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f2d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f2d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f2dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f2e0:	4295      	cmp	r5, r2
 800f2e2:	d003      	beq.n	800f2ec <__mcmp+0x2c>
 800f2e4:	d205      	bcs.n	800f2f2 <__mcmp+0x32>
 800f2e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ea:	bd30      	pop	{r4, r5, pc}
 800f2ec:	42a3      	cmp	r3, r4
 800f2ee:	d3f3      	bcc.n	800f2d8 <__mcmp+0x18>
 800f2f0:	e7fb      	b.n	800f2ea <__mcmp+0x2a>
 800f2f2:	2001      	movs	r0, #1
 800f2f4:	e7f9      	b.n	800f2ea <__mcmp+0x2a>
	...

0800f2f8 <__mdiff>:
 800f2f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2fc:	4689      	mov	r9, r1
 800f2fe:	4606      	mov	r6, r0
 800f300:	4611      	mov	r1, r2
 800f302:	4648      	mov	r0, r9
 800f304:	4614      	mov	r4, r2
 800f306:	f7ff ffdb 	bl	800f2c0 <__mcmp>
 800f30a:	1e05      	subs	r5, r0, #0
 800f30c:	d112      	bne.n	800f334 <__mdiff+0x3c>
 800f30e:	4629      	mov	r1, r5
 800f310:	4630      	mov	r0, r6
 800f312:	f7ff fd11 	bl	800ed38 <_Balloc>
 800f316:	4602      	mov	r2, r0
 800f318:	b928      	cbnz	r0, 800f326 <__mdiff+0x2e>
 800f31a:	4b3f      	ldr	r3, [pc, #252]	@ (800f418 <__mdiff+0x120>)
 800f31c:	f240 2137 	movw	r1, #567	@ 0x237
 800f320:	483e      	ldr	r0, [pc, #248]	@ (800f41c <__mdiff+0x124>)
 800f322:	f001 fa95 	bl	8010850 <__assert_func>
 800f326:	2301      	movs	r3, #1
 800f328:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f32c:	4610      	mov	r0, r2
 800f32e:	b003      	add	sp, #12
 800f330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f334:	bfbc      	itt	lt
 800f336:	464b      	movlt	r3, r9
 800f338:	46a1      	movlt	r9, r4
 800f33a:	4630      	mov	r0, r6
 800f33c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f340:	bfba      	itte	lt
 800f342:	461c      	movlt	r4, r3
 800f344:	2501      	movlt	r5, #1
 800f346:	2500      	movge	r5, #0
 800f348:	f7ff fcf6 	bl	800ed38 <_Balloc>
 800f34c:	4602      	mov	r2, r0
 800f34e:	b918      	cbnz	r0, 800f358 <__mdiff+0x60>
 800f350:	4b31      	ldr	r3, [pc, #196]	@ (800f418 <__mdiff+0x120>)
 800f352:	f240 2145 	movw	r1, #581	@ 0x245
 800f356:	e7e3      	b.n	800f320 <__mdiff+0x28>
 800f358:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f35c:	6926      	ldr	r6, [r4, #16]
 800f35e:	60c5      	str	r5, [r0, #12]
 800f360:	f109 0310 	add.w	r3, r9, #16
 800f364:	f109 0514 	add.w	r5, r9, #20
 800f368:	f104 0e14 	add.w	lr, r4, #20
 800f36c:	f100 0b14 	add.w	fp, r0, #20
 800f370:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f374:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f378:	9301      	str	r3, [sp, #4]
 800f37a:	46d9      	mov	r9, fp
 800f37c:	f04f 0c00 	mov.w	ip, #0
 800f380:	9b01      	ldr	r3, [sp, #4]
 800f382:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f386:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f38a:	9301      	str	r3, [sp, #4]
 800f38c:	fa1f f38a 	uxth.w	r3, sl
 800f390:	4619      	mov	r1, r3
 800f392:	b283      	uxth	r3, r0
 800f394:	1acb      	subs	r3, r1, r3
 800f396:	0c00      	lsrs	r0, r0, #16
 800f398:	4463      	add	r3, ip
 800f39a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f39e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f3a8:	4576      	cmp	r6, lr
 800f3aa:	f849 3b04 	str.w	r3, [r9], #4
 800f3ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f3b2:	d8e5      	bhi.n	800f380 <__mdiff+0x88>
 800f3b4:	1b33      	subs	r3, r6, r4
 800f3b6:	3b15      	subs	r3, #21
 800f3b8:	f023 0303 	bic.w	r3, r3, #3
 800f3bc:	3415      	adds	r4, #21
 800f3be:	3304      	adds	r3, #4
 800f3c0:	42a6      	cmp	r6, r4
 800f3c2:	bf38      	it	cc
 800f3c4:	2304      	movcc	r3, #4
 800f3c6:	441d      	add	r5, r3
 800f3c8:	445b      	add	r3, fp
 800f3ca:	461e      	mov	r6, r3
 800f3cc:	462c      	mov	r4, r5
 800f3ce:	4544      	cmp	r4, r8
 800f3d0:	d30e      	bcc.n	800f3f0 <__mdiff+0xf8>
 800f3d2:	f108 0103 	add.w	r1, r8, #3
 800f3d6:	1b49      	subs	r1, r1, r5
 800f3d8:	f021 0103 	bic.w	r1, r1, #3
 800f3dc:	3d03      	subs	r5, #3
 800f3de:	45a8      	cmp	r8, r5
 800f3e0:	bf38      	it	cc
 800f3e2:	2100      	movcc	r1, #0
 800f3e4:	440b      	add	r3, r1
 800f3e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f3ea:	b191      	cbz	r1, 800f412 <__mdiff+0x11a>
 800f3ec:	6117      	str	r7, [r2, #16]
 800f3ee:	e79d      	b.n	800f32c <__mdiff+0x34>
 800f3f0:	f854 1b04 	ldr.w	r1, [r4], #4
 800f3f4:	46e6      	mov	lr, ip
 800f3f6:	0c08      	lsrs	r0, r1, #16
 800f3f8:	fa1c fc81 	uxtah	ip, ip, r1
 800f3fc:	4471      	add	r1, lr
 800f3fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f402:	b289      	uxth	r1, r1
 800f404:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f408:	f846 1b04 	str.w	r1, [r6], #4
 800f40c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f410:	e7dd      	b.n	800f3ce <__mdiff+0xd6>
 800f412:	3f01      	subs	r7, #1
 800f414:	e7e7      	b.n	800f3e6 <__mdiff+0xee>
 800f416:	bf00      	nop
 800f418:	08011665 	.word	0x08011665
 800f41c:	08011676 	.word	0x08011676

0800f420 <__ulp>:
 800f420:	b082      	sub	sp, #8
 800f422:	ed8d 0b00 	vstr	d0, [sp]
 800f426:	9a01      	ldr	r2, [sp, #4]
 800f428:	4b0f      	ldr	r3, [pc, #60]	@ (800f468 <__ulp+0x48>)
 800f42a:	4013      	ands	r3, r2
 800f42c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f430:	2b00      	cmp	r3, #0
 800f432:	dc08      	bgt.n	800f446 <__ulp+0x26>
 800f434:	425b      	negs	r3, r3
 800f436:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f43a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f43e:	da04      	bge.n	800f44a <__ulp+0x2a>
 800f440:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f444:	4113      	asrs	r3, r2
 800f446:	2200      	movs	r2, #0
 800f448:	e008      	b.n	800f45c <__ulp+0x3c>
 800f44a:	f1a2 0314 	sub.w	r3, r2, #20
 800f44e:	2b1e      	cmp	r3, #30
 800f450:	bfda      	itte	le
 800f452:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f456:	40da      	lsrle	r2, r3
 800f458:	2201      	movgt	r2, #1
 800f45a:	2300      	movs	r3, #0
 800f45c:	4619      	mov	r1, r3
 800f45e:	4610      	mov	r0, r2
 800f460:	ec41 0b10 	vmov	d0, r0, r1
 800f464:	b002      	add	sp, #8
 800f466:	4770      	bx	lr
 800f468:	7ff00000 	.word	0x7ff00000

0800f46c <__b2d>:
 800f46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f470:	6906      	ldr	r6, [r0, #16]
 800f472:	f100 0814 	add.w	r8, r0, #20
 800f476:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f47a:	1f37      	subs	r7, r6, #4
 800f47c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f480:	4610      	mov	r0, r2
 800f482:	f7ff fd4b 	bl	800ef1c <__hi0bits>
 800f486:	f1c0 0320 	rsb	r3, r0, #32
 800f48a:	280a      	cmp	r0, #10
 800f48c:	600b      	str	r3, [r1, #0]
 800f48e:	491b      	ldr	r1, [pc, #108]	@ (800f4fc <__b2d+0x90>)
 800f490:	dc15      	bgt.n	800f4be <__b2d+0x52>
 800f492:	f1c0 0c0b 	rsb	ip, r0, #11
 800f496:	fa22 f30c 	lsr.w	r3, r2, ip
 800f49a:	45b8      	cmp	r8, r7
 800f49c:	ea43 0501 	orr.w	r5, r3, r1
 800f4a0:	bf34      	ite	cc
 800f4a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f4a6:	2300      	movcs	r3, #0
 800f4a8:	3015      	adds	r0, #21
 800f4aa:	fa02 f000 	lsl.w	r0, r2, r0
 800f4ae:	fa23 f30c 	lsr.w	r3, r3, ip
 800f4b2:	4303      	orrs	r3, r0
 800f4b4:	461c      	mov	r4, r3
 800f4b6:	ec45 4b10 	vmov	d0, r4, r5
 800f4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4be:	45b8      	cmp	r8, r7
 800f4c0:	bf3a      	itte	cc
 800f4c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f4c6:	f1a6 0708 	subcc.w	r7, r6, #8
 800f4ca:	2300      	movcs	r3, #0
 800f4cc:	380b      	subs	r0, #11
 800f4ce:	d012      	beq.n	800f4f6 <__b2d+0x8a>
 800f4d0:	f1c0 0120 	rsb	r1, r0, #32
 800f4d4:	fa23 f401 	lsr.w	r4, r3, r1
 800f4d8:	4082      	lsls	r2, r0
 800f4da:	4322      	orrs	r2, r4
 800f4dc:	4547      	cmp	r7, r8
 800f4de:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f4e2:	bf8c      	ite	hi
 800f4e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f4e8:	2200      	movls	r2, #0
 800f4ea:	4083      	lsls	r3, r0
 800f4ec:	40ca      	lsrs	r2, r1
 800f4ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f4f2:	4313      	orrs	r3, r2
 800f4f4:	e7de      	b.n	800f4b4 <__b2d+0x48>
 800f4f6:	ea42 0501 	orr.w	r5, r2, r1
 800f4fa:	e7db      	b.n	800f4b4 <__b2d+0x48>
 800f4fc:	3ff00000 	.word	0x3ff00000

0800f500 <__d2b>:
 800f500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f504:	460f      	mov	r7, r1
 800f506:	2101      	movs	r1, #1
 800f508:	ec59 8b10 	vmov	r8, r9, d0
 800f50c:	4616      	mov	r6, r2
 800f50e:	f7ff fc13 	bl	800ed38 <_Balloc>
 800f512:	4604      	mov	r4, r0
 800f514:	b930      	cbnz	r0, 800f524 <__d2b+0x24>
 800f516:	4602      	mov	r2, r0
 800f518:	4b23      	ldr	r3, [pc, #140]	@ (800f5a8 <__d2b+0xa8>)
 800f51a:	4824      	ldr	r0, [pc, #144]	@ (800f5ac <__d2b+0xac>)
 800f51c:	f240 310f 	movw	r1, #783	@ 0x30f
 800f520:	f001 f996 	bl	8010850 <__assert_func>
 800f524:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f528:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f52c:	b10d      	cbz	r5, 800f532 <__d2b+0x32>
 800f52e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f532:	9301      	str	r3, [sp, #4]
 800f534:	f1b8 0300 	subs.w	r3, r8, #0
 800f538:	d023      	beq.n	800f582 <__d2b+0x82>
 800f53a:	4668      	mov	r0, sp
 800f53c:	9300      	str	r3, [sp, #0]
 800f53e:	f7ff fd0c 	bl	800ef5a <__lo0bits>
 800f542:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f546:	b1d0      	cbz	r0, 800f57e <__d2b+0x7e>
 800f548:	f1c0 0320 	rsb	r3, r0, #32
 800f54c:	fa02 f303 	lsl.w	r3, r2, r3
 800f550:	430b      	orrs	r3, r1
 800f552:	40c2      	lsrs	r2, r0
 800f554:	6163      	str	r3, [r4, #20]
 800f556:	9201      	str	r2, [sp, #4]
 800f558:	9b01      	ldr	r3, [sp, #4]
 800f55a:	61a3      	str	r3, [r4, #24]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	bf0c      	ite	eq
 800f560:	2201      	moveq	r2, #1
 800f562:	2202      	movne	r2, #2
 800f564:	6122      	str	r2, [r4, #16]
 800f566:	b1a5      	cbz	r5, 800f592 <__d2b+0x92>
 800f568:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f56c:	4405      	add	r5, r0
 800f56e:	603d      	str	r5, [r7, #0]
 800f570:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f574:	6030      	str	r0, [r6, #0]
 800f576:	4620      	mov	r0, r4
 800f578:	b003      	add	sp, #12
 800f57a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f57e:	6161      	str	r1, [r4, #20]
 800f580:	e7ea      	b.n	800f558 <__d2b+0x58>
 800f582:	a801      	add	r0, sp, #4
 800f584:	f7ff fce9 	bl	800ef5a <__lo0bits>
 800f588:	9b01      	ldr	r3, [sp, #4]
 800f58a:	6163      	str	r3, [r4, #20]
 800f58c:	3020      	adds	r0, #32
 800f58e:	2201      	movs	r2, #1
 800f590:	e7e8      	b.n	800f564 <__d2b+0x64>
 800f592:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f596:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f59a:	6038      	str	r0, [r7, #0]
 800f59c:	6918      	ldr	r0, [r3, #16]
 800f59e:	f7ff fcbd 	bl	800ef1c <__hi0bits>
 800f5a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f5a6:	e7e5      	b.n	800f574 <__d2b+0x74>
 800f5a8:	08011665 	.word	0x08011665
 800f5ac:	08011676 	.word	0x08011676

0800f5b0 <__ratio>:
 800f5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5b4:	b085      	sub	sp, #20
 800f5b6:	e9cd 1000 	strd	r1, r0, [sp]
 800f5ba:	a902      	add	r1, sp, #8
 800f5bc:	f7ff ff56 	bl	800f46c <__b2d>
 800f5c0:	9800      	ldr	r0, [sp, #0]
 800f5c2:	a903      	add	r1, sp, #12
 800f5c4:	ec55 4b10 	vmov	r4, r5, d0
 800f5c8:	f7ff ff50 	bl	800f46c <__b2d>
 800f5cc:	9b01      	ldr	r3, [sp, #4]
 800f5ce:	6919      	ldr	r1, [r3, #16]
 800f5d0:	9b00      	ldr	r3, [sp, #0]
 800f5d2:	691b      	ldr	r3, [r3, #16]
 800f5d4:	1ac9      	subs	r1, r1, r3
 800f5d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f5da:	1a9b      	subs	r3, r3, r2
 800f5dc:	ec5b ab10 	vmov	sl, fp, d0
 800f5e0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	bfce      	itee	gt
 800f5e8:	462a      	movgt	r2, r5
 800f5ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f5ee:	465a      	movle	r2, fp
 800f5f0:	462f      	mov	r7, r5
 800f5f2:	46d9      	mov	r9, fp
 800f5f4:	bfcc      	ite	gt
 800f5f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f5fa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f5fe:	464b      	mov	r3, r9
 800f600:	4652      	mov	r2, sl
 800f602:	4620      	mov	r0, r4
 800f604:	4639      	mov	r1, r7
 800f606:	f7f1 f949 	bl	800089c <__aeabi_ddiv>
 800f60a:	ec41 0b10 	vmov	d0, r0, r1
 800f60e:	b005      	add	sp, #20
 800f610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f614 <__copybits>:
 800f614:	3901      	subs	r1, #1
 800f616:	b570      	push	{r4, r5, r6, lr}
 800f618:	1149      	asrs	r1, r1, #5
 800f61a:	6914      	ldr	r4, [r2, #16]
 800f61c:	3101      	adds	r1, #1
 800f61e:	f102 0314 	add.w	r3, r2, #20
 800f622:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f626:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f62a:	1f05      	subs	r5, r0, #4
 800f62c:	42a3      	cmp	r3, r4
 800f62e:	d30c      	bcc.n	800f64a <__copybits+0x36>
 800f630:	1aa3      	subs	r3, r4, r2
 800f632:	3b11      	subs	r3, #17
 800f634:	f023 0303 	bic.w	r3, r3, #3
 800f638:	3211      	adds	r2, #17
 800f63a:	42a2      	cmp	r2, r4
 800f63c:	bf88      	it	hi
 800f63e:	2300      	movhi	r3, #0
 800f640:	4418      	add	r0, r3
 800f642:	2300      	movs	r3, #0
 800f644:	4288      	cmp	r0, r1
 800f646:	d305      	bcc.n	800f654 <__copybits+0x40>
 800f648:	bd70      	pop	{r4, r5, r6, pc}
 800f64a:	f853 6b04 	ldr.w	r6, [r3], #4
 800f64e:	f845 6f04 	str.w	r6, [r5, #4]!
 800f652:	e7eb      	b.n	800f62c <__copybits+0x18>
 800f654:	f840 3b04 	str.w	r3, [r0], #4
 800f658:	e7f4      	b.n	800f644 <__copybits+0x30>

0800f65a <__any_on>:
 800f65a:	f100 0214 	add.w	r2, r0, #20
 800f65e:	6900      	ldr	r0, [r0, #16]
 800f660:	114b      	asrs	r3, r1, #5
 800f662:	4298      	cmp	r0, r3
 800f664:	b510      	push	{r4, lr}
 800f666:	db11      	blt.n	800f68c <__any_on+0x32>
 800f668:	dd0a      	ble.n	800f680 <__any_on+0x26>
 800f66a:	f011 011f 	ands.w	r1, r1, #31
 800f66e:	d007      	beq.n	800f680 <__any_on+0x26>
 800f670:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f674:	fa24 f001 	lsr.w	r0, r4, r1
 800f678:	fa00 f101 	lsl.w	r1, r0, r1
 800f67c:	428c      	cmp	r4, r1
 800f67e:	d10b      	bne.n	800f698 <__any_on+0x3e>
 800f680:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f684:	4293      	cmp	r3, r2
 800f686:	d803      	bhi.n	800f690 <__any_on+0x36>
 800f688:	2000      	movs	r0, #0
 800f68a:	bd10      	pop	{r4, pc}
 800f68c:	4603      	mov	r3, r0
 800f68e:	e7f7      	b.n	800f680 <__any_on+0x26>
 800f690:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f694:	2900      	cmp	r1, #0
 800f696:	d0f5      	beq.n	800f684 <__any_on+0x2a>
 800f698:	2001      	movs	r0, #1
 800f69a:	e7f6      	b.n	800f68a <__any_on+0x30>

0800f69c <sulp>:
 800f69c:	b570      	push	{r4, r5, r6, lr}
 800f69e:	4604      	mov	r4, r0
 800f6a0:	460d      	mov	r5, r1
 800f6a2:	ec45 4b10 	vmov	d0, r4, r5
 800f6a6:	4616      	mov	r6, r2
 800f6a8:	f7ff feba 	bl	800f420 <__ulp>
 800f6ac:	ec51 0b10 	vmov	r0, r1, d0
 800f6b0:	b17e      	cbz	r6, 800f6d2 <sulp+0x36>
 800f6b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f6b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	dd09      	ble.n	800f6d2 <sulp+0x36>
 800f6be:	051b      	lsls	r3, r3, #20
 800f6c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f6c4:	2400      	movs	r4, #0
 800f6c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f6ca:	4622      	mov	r2, r4
 800f6cc:	462b      	mov	r3, r5
 800f6ce:	f7f0 ffbb 	bl	8000648 <__aeabi_dmul>
 800f6d2:	ec41 0b10 	vmov	d0, r0, r1
 800f6d6:	bd70      	pop	{r4, r5, r6, pc}

0800f6d8 <_strtod_l>:
 800f6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6dc:	b09f      	sub	sp, #124	@ 0x7c
 800f6de:	460c      	mov	r4, r1
 800f6e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	921a      	str	r2, [sp, #104]	@ 0x68
 800f6e6:	9005      	str	r0, [sp, #20]
 800f6e8:	f04f 0a00 	mov.w	sl, #0
 800f6ec:	f04f 0b00 	mov.w	fp, #0
 800f6f0:	460a      	mov	r2, r1
 800f6f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f6f4:	7811      	ldrb	r1, [r2, #0]
 800f6f6:	292b      	cmp	r1, #43	@ 0x2b
 800f6f8:	d04a      	beq.n	800f790 <_strtod_l+0xb8>
 800f6fa:	d838      	bhi.n	800f76e <_strtod_l+0x96>
 800f6fc:	290d      	cmp	r1, #13
 800f6fe:	d832      	bhi.n	800f766 <_strtod_l+0x8e>
 800f700:	2908      	cmp	r1, #8
 800f702:	d832      	bhi.n	800f76a <_strtod_l+0x92>
 800f704:	2900      	cmp	r1, #0
 800f706:	d03b      	beq.n	800f780 <_strtod_l+0xa8>
 800f708:	2200      	movs	r2, #0
 800f70a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f70c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f70e:	782a      	ldrb	r2, [r5, #0]
 800f710:	2a30      	cmp	r2, #48	@ 0x30
 800f712:	f040 80b3 	bne.w	800f87c <_strtod_l+0x1a4>
 800f716:	786a      	ldrb	r2, [r5, #1]
 800f718:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f71c:	2a58      	cmp	r2, #88	@ 0x58
 800f71e:	d16e      	bne.n	800f7fe <_strtod_l+0x126>
 800f720:	9302      	str	r3, [sp, #8]
 800f722:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f724:	9301      	str	r3, [sp, #4]
 800f726:	ab1a      	add	r3, sp, #104	@ 0x68
 800f728:	9300      	str	r3, [sp, #0]
 800f72a:	4a8e      	ldr	r2, [pc, #568]	@ (800f964 <_strtod_l+0x28c>)
 800f72c:	9805      	ldr	r0, [sp, #20]
 800f72e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f730:	a919      	add	r1, sp, #100	@ 0x64
 800f732:	f001 f927 	bl	8010984 <__gethex>
 800f736:	f010 060f 	ands.w	r6, r0, #15
 800f73a:	4604      	mov	r4, r0
 800f73c:	d005      	beq.n	800f74a <_strtod_l+0x72>
 800f73e:	2e06      	cmp	r6, #6
 800f740:	d128      	bne.n	800f794 <_strtod_l+0xbc>
 800f742:	3501      	adds	r5, #1
 800f744:	2300      	movs	r3, #0
 800f746:	9519      	str	r5, [sp, #100]	@ 0x64
 800f748:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f74a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	f040 858e 	bne.w	801026e <_strtod_l+0xb96>
 800f752:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f754:	b1cb      	cbz	r3, 800f78a <_strtod_l+0xb2>
 800f756:	4652      	mov	r2, sl
 800f758:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f75c:	ec43 2b10 	vmov	d0, r2, r3
 800f760:	b01f      	add	sp, #124	@ 0x7c
 800f762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f766:	2920      	cmp	r1, #32
 800f768:	d1ce      	bne.n	800f708 <_strtod_l+0x30>
 800f76a:	3201      	adds	r2, #1
 800f76c:	e7c1      	b.n	800f6f2 <_strtod_l+0x1a>
 800f76e:	292d      	cmp	r1, #45	@ 0x2d
 800f770:	d1ca      	bne.n	800f708 <_strtod_l+0x30>
 800f772:	2101      	movs	r1, #1
 800f774:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f776:	1c51      	adds	r1, r2, #1
 800f778:	9119      	str	r1, [sp, #100]	@ 0x64
 800f77a:	7852      	ldrb	r2, [r2, #1]
 800f77c:	2a00      	cmp	r2, #0
 800f77e:	d1c5      	bne.n	800f70c <_strtod_l+0x34>
 800f780:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f782:	9419      	str	r4, [sp, #100]	@ 0x64
 800f784:	2b00      	cmp	r3, #0
 800f786:	f040 8570 	bne.w	801026a <_strtod_l+0xb92>
 800f78a:	4652      	mov	r2, sl
 800f78c:	465b      	mov	r3, fp
 800f78e:	e7e5      	b.n	800f75c <_strtod_l+0x84>
 800f790:	2100      	movs	r1, #0
 800f792:	e7ef      	b.n	800f774 <_strtod_l+0x9c>
 800f794:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f796:	b13a      	cbz	r2, 800f7a8 <_strtod_l+0xd0>
 800f798:	2135      	movs	r1, #53	@ 0x35
 800f79a:	a81c      	add	r0, sp, #112	@ 0x70
 800f79c:	f7ff ff3a 	bl	800f614 <__copybits>
 800f7a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f7a2:	9805      	ldr	r0, [sp, #20]
 800f7a4:	f7ff fb08 	bl	800edb8 <_Bfree>
 800f7a8:	3e01      	subs	r6, #1
 800f7aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f7ac:	2e04      	cmp	r6, #4
 800f7ae:	d806      	bhi.n	800f7be <_strtod_l+0xe6>
 800f7b0:	e8df f006 	tbb	[pc, r6]
 800f7b4:	201d0314 	.word	0x201d0314
 800f7b8:	14          	.byte	0x14
 800f7b9:	00          	.byte	0x00
 800f7ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f7be:	05e1      	lsls	r1, r4, #23
 800f7c0:	bf48      	it	mi
 800f7c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f7c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f7ca:	0d1b      	lsrs	r3, r3, #20
 800f7cc:	051b      	lsls	r3, r3, #20
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d1bb      	bne.n	800f74a <_strtod_l+0x72>
 800f7d2:	f7fe fb31 	bl	800de38 <__errno>
 800f7d6:	2322      	movs	r3, #34	@ 0x22
 800f7d8:	6003      	str	r3, [r0, #0]
 800f7da:	e7b6      	b.n	800f74a <_strtod_l+0x72>
 800f7dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f7e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f7e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f7e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f7ec:	e7e7      	b.n	800f7be <_strtod_l+0xe6>
 800f7ee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f96c <_strtod_l+0x294>
 800f7f2:	e7e4      	b.n	800f7be <_strtod_l+0xe6>
 800f7f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f7f8:	f04f 3aff 	mov.w	sl, #4294967295
 800f7fc:	e7df      	b.n	800f7be <_strtod_l+0xe6>
 800f7fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f800:	1c5a      	adds	r2, r3, #1
 800f802:	9219      	str	r2, [sp, #100]	@ 0x64
 800f804:	785b      	ldrb	r3, [r3, #1]
 800f806:	2b30      	cmp	r3, #48	@ 0x30
 800f808:	d0f9      	beq.n	800f7fe <_strtod_l+0x126>
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d09d      	beq.n	800f74a <_strtod_l+0x72>
 800f80e:	2301      	movs	r3, #1
 800f810:	9309      	str	r3, [sp, #36]	@ 0x24
 800f812:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f814:	930c      	str	r3, [sp, #48]	@ 0x30
 800f816:	2300      	movs	r3, #0
 800f818:	9308      	str	r3, [sp, #32]
 800f81a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f81c:	461f      	mov	r7, r3
 800f81e:	220a      	movs	r2, #10
 800f820:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f822:	7805      	ldrb	r5, [r0, #0]
 800f824:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f828:	b2d9      	uxtb	r1, r3
 800f82a:	2909      	cmp	r1, #9
 800f82c:	d928      	bls.n	800f880 <_strtod_l+0x1a8>
 800f82e:	494e      	ldr	r1, [pc, #312]	@ (800f968 <_strtod_l+0x290>)
 800f830:	2201      	movs	r2, #1
 800f832:	f000 ffd5 	bl	80107e0 <strncmp>
 800f836:	2800      	cmp	r0, #0
 800f838:	d032      	beq.n	800f8a0 <_strtod_l+0x1c8>
 800f83a:	2000      	movs	r0, #0
 800f83c:	462a      	mov	r2, r5
 800f83e:	4681      	mov	r9, r0
 800f840:	463d      	mov	r5, r7
 800f842:	4603      	mov	r3, r0
 800f844:	2a65      	cmp	r2, #101	@ 0x65
 800f846:	d001      	beq.n	800f84c <_strtod_l+0x174>
 800f848:	2a45      	cmp	r2, #69	@ 0x45
 800f84a:	d114      	bne.n	800f876 <_strtod_l+0x19e>
 800f84c:	b91d      	cbnz	r5, 800f856 <_strtod_l+0x17e>
 800f84e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f850:	4302      	orrs	r2, r0
 800f852:	d095      	beq.n	800f780 <_strtod_l+0xa8>
 800f854:	2500      	movs	r5, #0
 800f856:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f858:	1c62      	adds	r2, r4, #1
 800f85a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f85c:	7862      	ldrb	r2, [r4, #1]
 800f85e:	2a2b      	cmp	r2, #43	@ 0x2b
 800f860:	d077      	beq.n	800f952 <_strtod_l+0x27a>
 800f862:	2a2d      	cmp	r2, #45	@ 0x2d
 800f864:	d07b      	beq.n	800f95e <_strtod_l+0x286>
 800f866:	f04f 0c00 	mov.w	ip, #0
 800f86a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f86e:	2909      	cmp	r1, #9
 800f870:	f240 8082 	bls.w	800f978 <_strtod_l+0x2a0>
 800f874:	9419      	str	r4, [sp, #100]	@ 0x64
 800f876:	f04f 0800 	mov.w	r8, #0
 800f87a:	e0a2      	b.n	800f9c2 <_strtod_l+0x2ea>
 800f87c:	2300      	movs	r3, #0
 800f87e:	e7c7      	b.n	800f810 <_strtod_l+0x138>
 800f880:	2f08      	cmp	r7, #8
 800f882:	bfd5      	itete	le
 800f884:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f886:	9908      	ldrgt	r1, [sp, #32]
 800f888:	fb02 3301 	mlale	r3, r2, r1, r3
 800f88c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f890:	f100 0001 	add.w	r0, r0, #1
 800f894:	bfd4      	ite	le
 800f896:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f898:	9308      	strgt	r3, [sp, #32]
 800f89a:	3701      	adds	r7, #1
 800f89c:	9019      	str	r0, [sp, #100]	@ 0x64
 800f89e:	e7bf      	b.n	800f820 <_strtod_l+0x148>
 800f8a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f8a2:	1c5a      	adds	r2, r3, #1
 800f8a4:	9219      	str	r2, [sp, #100]	@ 0x64
 800f8a6:	785a      	ldrb	r2, [r3, #1]
 800f8a8:	b37f      	cbz	r7, 800f90a <_strtod_l+0x232>
 800f8aa:	4681      	mov	r9, r0
 800f8ac:	463d      	mov	r5, r7
 800f8ae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f8b2:	2b09      	cmp	r3, #9
 800f8b4:	d912      	bls.n	800f8dc <_strtod_l+0x204>
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	e7c4      	b.n	800f844 <_strtod_l+0x16c>
 800f8ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f8bc:	1c5a      	adds	r2, r3, #1
 800f8be:	9219      	str	r2, [sp, #100]	@ 0x64
 800f8c0:	785a      	ldrb	r2, [r3, #1]
 800f8c2:	3001      	adds	r0, #1
 800f8c4:	2a30      	cmp	r2, #48	@ 0x30
 800f8c6:	d0f8      	beq.n	800f8ba <_strtod_l+0x1e2>
 800f8c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f8cc:	2b08      	cmp	r3, #8
 800f8ce:	f200 84d3 	bhi.w	8010278 <_strtod_l+0xba0>
 800f8d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f8d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800f8d6:	4681      	mov	r9, r0
 800f8d8:	2000      	movs	r0, #0
 800f8da:	4605      	mov	r5, r0
 800f8dc:	3a30      	subs	r2, #48	@ 0x30
 800f8de:	f100 0301 	add.w	r3, r0, #1
 800f8e2:	d02a      	beq.n	800f93a <_strtod_l+0x262>
 800f8e4:	4499      	add	r9, r3
 800f8e6:	eb00 0c05 	add.w	ip, r0, r5
 800f8ea:	462b      	mov	r3, r5
 800f8ec:	210a      	movs	r1, #10
 800f8ee:	4563      	cmp	r3, ip
 800f8f0:	d10d      	bne.n	800f90e <_strtod_l+0x236>
 800f8f2:	1c69      	adds	r1, r5, #1
 800f8f4:	4401      	add	r1, r0
 800f8f6:	4428      	add	r0, r5
 800f8f8:	2808      	cmp	r0, #8
 800f8fa:	dc16      	bgt.n	800f92a <_strtod_l+0x252>
 800f8fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f8fe:	230a      	movs	r3, #10
 800f900:	fb03 2300 	mla	r3, r3, r0, r2
 800f904:	930a      	str	r3, [sp, #40]	@ 0x28
 800f906:	2300      	movs	r3, #0
 800f908:	e018      	b.n	800f93c <_strtod_l+0x264>
 800f90a:	4638      	mov	r0, r7
 800f90c:	e7da      	b.n	800f8c4 <_strtod_l+0x1ec>
 800f90e:	2b08      	cmp	r3, #8
 800f910:	f103 0301 	add.w	r3, r3, #1
 800f914:	dc03      	bgt.n	800f91e <_strtod_l+0x246>
 800f916:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f918:	434e      	muls	r6, r1
 800f91a:	960a      	str	r6, [sp, #40]	@ 0x28
 800f91c:	e7e7      	b.n	800f8ee <_strtod_l+0x216>
 800f91e:	2b10      	cmp	r3, #16
 800f920:	bfde      	ittt	le
 800f922:	9e08      	ldrle	r6, [sp, #32]
 800f924:	434e      	mulle	r6, r1
 800f926:	9608      	strle	r6, [sp, #32]
 800f928:	e7e1      	b.n	800f8ee <_strtod_l+0x216>
 800f92a:	280f      	cmp	r0, #15
 800f92c:	dceb      	bgt.n	800f906 <_strtod_l+0x22e>
 800f92e:	9808      	ldr	r0, [sp, #32]
 800f930:	230a      	movs	r3, #10
 800f932:	fb03 2300 	mla	r3, r3, r0, r2
 800f936:	9308      	str	r3, [sp, #32]
 800f938:	e7e5      	b.n	800f906 <_strtod_l+0x22e>
 800f93a:	4629      	mov	r1, r5
 800f93c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f93e:	1c50      	adds	r0, r2, #1
 800f940:	9019      	str	r0, [sp, #100]	@ 0x64
 800f942:	7852      	ldrb	r2, [r2, #1]
 800f944:	4618      	mov	r0, r3
 800f946:	460d      	mov	r5, r1
 800f948:	e7b1      	b.n	800f8ae <_strtod_l+0x1d6>
 800f94a:	f04f 0900 	mov.w	r9, #0
 800f94e:	2301      	movs	r3, #1
 800f950:	e77d      	b.n	800f84e <_strtod_l+0x176>
 800f952:	f04f 0c00 	mov.w	ip, #0
 800f956:	1ca2      	adds	r2, r4, #2
 800f958:	9219      	str	r2, [sp, #100]	@ 0x64
 800f95a:	78a2      	ldrb	r2, [r4, #2]
 800f95c:	e785      	b.n	800f86a <_strtod_l+0x192>
 800f95e:	f04f 0c01 	mov.w	ip, #1
 800f962:	e7f8      	b.n	800f956 <_strtod_l+0x27e>
 800f964:	080117e8 	.word	0x080117e8
 800f968:	080117d0 	.word	0x080117d0
 800f96c:	7ff00000 	.word	0x7ff00000
 800f970:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f972:	1c51      	adds	r1, r2, #1
 800f974:	9119      	str	r1, [sp, #100]	@ 0x64
 800f976:	7852      	ldrb	r2, [r2, #1]
 800f978:	2a30      	cmp	r2, #48	@ 0x30
 800f97a:	d0f9      	beq.n	800f970 <_strtod_l+0x298>
 800f97c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f980:	2908      	cmp	r1, #8
 800f982:	f63f af78 	bhi.w	800f876 <_strtod_l+0x19e>
 800f986:	3a30      	subs	r2, #48	@ 0x30
 800f988:	920e      	str	r2, [sp, #56]	@ 0x38
 800f98a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f98c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f98e:	f04f 080a 	mov.w	r8, #10
 800f992:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f994:	1c56      	adds	r6, r2, #1
 800f996:	9619      	str	r6, [sp, #100]	@ 0x64
 800f998:	7852      	ldrb	r2, [r2, #1]
 800f99a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f99e:	f1be 0f09 	cmp.w	lr, #9
 800f9a2:	d939      	bls.n	800fa18 <_strtod_l+0x340>
 800f9a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f9a6:	1a76      	subs	r6, r6, r1
 800f9a8:	2e08      	cmp	r6, #8
 800f9aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f9ae:	dc03      	bgt.n	800f9b8 <_strtod_l+0x2e0>
 800f9b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f9b2:	4588      	cmp	r8, r1
 800f9b4:	bfa8      	it	ge
 800f9b6:	4688      	movge	r8, r1
 800f9b8:	f1bc 0f00 	cmp.w	ip, #0
 800f9bc:	d001      	beq.n	800f9c2 <_strtod_l+0x2ea>
 800f9be:	f1c8 0800 	rsb	r8, r8, #0
 800f9c2:	2d00      	cmp	r5, #0
 800f9c4:	d14e      	bne.n	800fa64 <_strtod_l+0x38c>
 800f9c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f9c8:	4308      	orrs	r0, r1
 800f9ca:	f47f aebe 	bne.w	800f74a <_strtod_l+0x72>
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	f47f aed6 	bne.w	800f780 <_strtod_l+0xa8>
 800f9d4:	2a69      	cmp	r2, #105	@ 0x69
 800f9d6:	d028      	beq.n	800fa2a <_strtod_l+0x352>
 800f9d8:	dc25      	bgt.n	800fa26 <_strtod_l+0x34e>
 800f9da:	2a49      	cmp	r2, #73	@ 0x49
 800f9dc:	d025      	beq.n	800fa2a <_strtod_l+0x352>
 800f9de:	2a4e      	cmp	r2, #78	@ 0x4e
 800f9e0:	f47f aece 	bne.w	800f780 <_strtod_l+0xa8>
 800f9e4:	499b      	ldr	r1, [pc, #620]	@ (800fc54 <_strtod_l+0x57c>)
 800f9e6:	a819      	add	r0, sp, #100	@ 0x64
 800f9e8:	f001 f9ee 	bl	8010dc8 <__match>
 800f9ec:	2800      	cmp	r0, #0
 800f9ee:	f43f aec7 	beq.w	800f780 <_strtod_l+0xa8>
 800f9f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f9f4:	781b      	ldrb	r3, [r3, #0]
 800f9f6:	2b28      	cmp	r3, #40	@ 0x28
 800f9f8:	d12e      	bne.n	800fa58 <_strtod_l+0x380>
 800f9fa:	4997      	ldr	r1, [pc, #604]	@ (800fc58 <_strtod_l+0x580>)
 800f9fc:	aa1c      	add	r2, sp, #112	@ 0x70
 800f9fe:	a819      	add	r0, sp, #100	@ 0x64
 800fa00:	f001 f9f6 	bl	8010df0 <__hexnan>
 800fa04:	2805      	cmp	r0, #5
 800fa06:	d127      	bne.n	800fa58 <_strtod_l+0x380>
 800fa08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fa0a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800fa0e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800fa12:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800fa16:	e698      	b.n	800f74a <_strtod_l+0x72>
 800fa18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fa1a:	fb08 2101 	mla	r1, r8, r1, r2
 800fa1e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800fa22:	920e      	str	r2, [sp, #56]	@ 0x38
 800fa24:	e7b5      	b.n	800f992 <_strtod_l+0x2ba>
 800fa26:	2a6e      	cmp	r2, #110	@ 0x6e
 800fa28:	e7da      	b.n	800f9e0 <_strtod_l+0x308>
 800fa2a:	498c      	ldr	r1, [pc, #560]	@ (800fc5c <_strtod_l+0x584>)
 800fa2c:	a819      	add	r0, sp, #100	@ 0x64
 800fa2e:	f001 f9cb 	bl	8010dc8 <__match>
 800fa32:	2800      	cmp	r0, #0
 800fa34:	f43f aea4 	beq.w	800f780 <_strtod_l+0xa8>
 800fa38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fa3a:	4989      	ldr	r1, [pc, #548]	@ (800fc60 <_strtod_l+0x588>)
 800fa3c:	3b01      	subs	r3, #1
 800fa3e:	a819      	add	r0, sp, #100	@ 0x64
 800fa40:	9319      	str	r3, [sp, #100]	@ 0x64
 800fa42:	f001 f9c1 	bl	8010dc8 <__match>
 800fa46:	b910      	cbnz	r0, 800fa4e <_strtod_l+0x376>
 800fa48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fa4a:	3301      	adds	r3, #1
 800fa4c:	9319      	str	r3, [sp, #100]	@ 0x64
 800fa4e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800fc70 <_strtod_l+0x598>
 800fa52:	f04f 0a00 	mov.w	sl, #0
 800fa56:	e678      	b.n	800f74a <_strtod_l+0x72>
 800fa58:	4882      	ldr	r0, [pc, #520]	@ (800fc64 <_strtod_l+0x58c>)
 800fa5a:	f000 fef1 	bl	8010840 <nan>
 800fa5e:	ec5b ab10 	vmov	sl, fp, d0
 800fa62:	e672      	b.n	800f74a <_strtod_l+0x72>
 800fa64:	eba8 0309 	sub.w	r3, r8, r9
 800fa68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fa6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa6c:	2f00      	cmp	r7, #0
 800fa6e:	bf08      	it	eq
 800fa70:	462f      	moveq	r7, r5
 800fa72:	2d10      	cmp	r5, #16
 800fa74:	462c      	mov	r4, r5
 800fa76:	bfa8      	it	ge
 800fa78:	2410      	movge	r4, #16
 800fa7a:	f7f0 fd6b 	bl	8000554 <__aeabi_ui2d>
 800fa7e:	2d09      	cmp	r5, #9
 800fa80:	4682      	mov	sl, r0
 800fa82:	468b      	mov	fp, r1
 800fa84:	dc13      	bgt.n	800faae <_strtod_l+0x3d6>
 800fa86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	f43f ae5e 	beq.w	800f74a <_strtod_l+0x72>
 800fa8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa90:	dd78      	ble.n	800fb84 <_strtod_l+0x4ac>
 800fa92:	2b16      	cmp	r3, #22
 800fa94:	dc5f      	bgt.n	800fb56 <_strtod_l+0x47e>
 800fa96:	4974      	ldr	r1, [pc, #464]	@ (800fc68 <_strtod_l+0x590>)
 800fa98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fa9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800faa0:	4652      	mov	r2, sl
 800faa2:	465b      	mov	r3, fp
 800faa4:	f7f0 fdd0 	bl	8000648 <__aeabi_dmul>
 800faa8:	4682      	mov	sl, r0
 800faaa:	468b      	mov	fp, r1
 800faac:	e64d      	b.n	800f74a <_strtod_l+0x72>
 800faae:	4b6e      	ldr	r3, [pc, #440]	@ (800fc68 <_strtod_l+0x590>)
 800fab0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fab4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800fab8:	f7f0 fdc6 	bl	8000648 <__aeabi_dmul>
 800fabc:	4682      	mov	sl, r0
 800fabe:	9808      	ldr	r0, [sp, #32]
 800fac0:	468b      	mov	fp, r1
 800fac2:	f7f0 fd47 	bl	8000554 <__aeabi_ui2d>
 800fac6:	4602      	mov	r2, r0
 800fac8:	460b      	mov	r3, r1
 800faca:	4650      	mov	r0, sl
 800facc:	4659      	mov	r1, fp
 800face:	f7f0 fc05 	bl	80002dc <__adddf3>
 800fad2:	2d0f      	cmp	r5, #15
 800fad4:	4682      	mov	sl, r0
 800fad6:	468b      	mov	fp, r1
 800fad8:	ddd5      	ble.n	800fa86 <_strtod_l+0x3ae>
 800fada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fadc:	1b2c      	subs	r4, r5, r4
 800fade:	441c      	add	r4, r3
 800fae0:	2c00      	cmp	r4, #0
 800fae2:	f340 8096 	ble.w	800fc12 <_strtod_l+0x53a>
 800fae6:	f014 030f 	ands.w	r3, r4, #15
 800faea:	d00a      	beq.n	800fb02 <_strtod_l+0x42a>
 800faec:	495e      	ldr	r1, [pc, #376]	@ (800fc68 <_strtod_l+0x590>)
 800faee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800faf2:	4652      	mov	r2, sl
 800faf4:	465b      	mov	r3, fp
 800faf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fafa:	f7f0 fda5 	bl	8000648 <__aeabi_dmul>
 800fafe:	4682      	mov	sl, r0
 800fb00:	468b      	mov	fp, r1
 800fb02:	f034 040f 	bics.w	r4, r4, #15
 800fb06:	d073      	beq.n	800fbf0 <_strtod_l+0x518>
 800fb08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800fb0c:	dd48      	ble.n	800fba0 <_strtod_l+0x4c8>
 800fb0e:	2400      	movs	r4, #0
 800fb10:	46a0      	mov	r8, r4
 800fb12:	940a      	str	r4, [sp, #40]	@ 0x28
 800fb14:	46a1      	mov	r9, r4
 800fb16:	9a05      	ldr	r2, [sp, #20]
 800fb18:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800fc70 <_strtod_l+0x598>
 800fb1c:	2322      	movs	r3, #34	@ 0x22
 800fb1e:	6013      	str	r3, [r2, #0]
 800fb20:	f04f 0a00 	mov.w	sl, #0
 800fb24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	f43f ae0f 	beq.w	800f74a <_strtod_l+0x72>
 800fb2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fb2e:	9805      	ldr	r0, [sp, #20]
 800fb30:	f7ff f942 	bl	800edb8 <_Bfree>
 800fb34:	9805      	ldr	r0, [sp, #20]
 800fb36:	4649      	mov	r1, r9
 800fb38:	f7ff f93e 	bl	800edb8 <_Bfree>
 800fb3c:	9805      	ldr	r0, [sp, #20]
 800fb3e:	4641      	mov	r1, r8
 800fb40:	f7ff f93a 	bl	800edb8 <_Bfree>
 800fb44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fb46:	9805      	ldr	r0, [sp, #20]
 800fb48:	f7ff f936 	bl	800edb8 <_Bfree>
 800fb4c:	9805      	ldr	r0, [sp, #20]
 800fb4e:	4621      	mov	r1, r4
 800fb50:	f7ff f932 	bl	800edb8 <_Bfree>
 800fb54:	e5f9      	b.n	800f74a <_strtod_l+0x72>
 800fb56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	dbbc      	blt.n	800fada <_strtod_l+0x402>
 800fb60:	4c41      	ldr	r4, [pc, #260]	@ (800fc68 <_strtod_l+0x590>)
 800fb62:	f1c5 050f 	rsb	r5, r5, #15
 800fb66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fb6a:	4652      	mov	r2, sl
 800fb6c:	465b      	mov	r3, fp
 800fb6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb72:	f7f0 fd69 	bl	8000648 <__aeabi_dmul>
 800fb76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb78:	1b5d      	subs	r5, r3, r5
 800fb7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fb7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fb82:	e78f      	b.n	800faa4 <_strtod_l+0x3cc>
 800fb84:	3316      	adds	r3, #22
 800fb86:	dba8      	blt.n	800fada <_strtod_l+0x402>
 800fb88:	4b37      	ldr	r3, [pc, #220]	@ (800fc68 <_strtod_l+0x590>)
 800fb8a:	eba9 0808 	sub.w	r8, r9, r8
 800fb8e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800fb92:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fb96:	4650      	mov	r0, sl
 800fb98:	4659      	mov	r1, fp
 800fb9a:	f7f0 fe7f 	bl	800089c <__aeabi_ddiv>
 800fb9e:	e783      	b.n	800faa8 <_strtod_l+0x3d0>
 800fba0:	4b32      	ldr	r3, [pc, #200]	@ (800fc6c <_strtod_l+0x594>)
 800fba2:	9308      	str	r3, [sp, #32]
 800fba4:	2300      	movs	r3, #0
 800fba6:	1124      	asrs	r4, r4, #4
 800fba8:	4650      	mov	r0, sl
 800fbaa:	4659      	mov	r1, fp
 800fbac:	461e      	mov	r6, r3
 800fbae:	2c01      	cmp	r4, #1
 800fbb0:	dc21      	bgt.n	800fbf6 <_strtod_l+0x51e>
 800fbb2:	b10b      	cbz	r3, 800fbb8 <_strtod_l+0x4e0>
 800fbb4:	4682      	mov	sl, r0
 800fbb6:	468b      	mov	fp, r1
 800fbb8:	492c      	ldr	r1, [pc, #176]	@ (800fc6c <_strtod_l+0x594>)
 800fbba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800fbbe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800fbc2:	4652      	mov	r2, sl
 800fbc4:	465b      	mov	r3, fp
 800fbc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbca:	f7f0 fd3d 	bl	8000648 <__aeabi_dmul>
 800fbce:	4b28      	ldr	r3, [pc, #160]	@ (800fc70 <_strtod_l+0x598>)
 800fbd0:	460a      	mov	r2, r1
 800fbd2:	400b      	ands	r3, r1
 800fbd4:	4927      	ldr	r1, [pc, #156]	@ (800fc74 <_strtod_l+0x59c>)
 800fbd6:	428b      	cmp	r3, r1
 800fbd8:	4682      	mov	sl, r0
 800fbda:	d898      	bhi.n	800fb0e <_strtod_l+0x436>
 800fbdc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800fbe0:	428b      	cmp	r3, r1
 800fbe2:	bf86      	itte	hi
 800fbe4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800fc78 <_strtod_l+0x5a0>
 800fbe8:	f04f 3aff 	movhi.w	sl, #4294967295
 800fbec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	9308      	str	r3, [sp, #32]
 800fbf4:	e07a      	b.n	800fcec <_strtod_l+0x614>
 800fbf6:	07e2      	lsls	r2, r4, #31
 800fbf8:	d505      	bpl.n	800fc06 <_strtod_l+0x52e>
 800fbfa:	9b08      	ldr	r3, [sp, #32]
 800fbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc00:	f7f0 fd22 	bl	8000648 <__aeabi_dmul>
 800fc04:	2301      	movs	r3, #1
 800fc06:	9a08      	ldr	r2, [sp, #32]
 800fc08:	3208      	adds	r2, #8
 800fc0a:	3601      	adds	r6, #1
 800fc0c:	1064      	asrs	r4, r4, #1
 800fc0e:	9208      	str	r2, [sp, #32]
 800fc10:	e7cd      	b.n	800fbae <_strtod_l+0x4d6>
 800fc12:	d0ed      	beq.n	800fbf0 <_strtod_l+0x518>
 800fc14:	4264      	negs	r4, r4
 800fc16:	f014 020f 	ands.w	r2, r4, #15
 800fc1a:	d00a      	beq.n	800fc32 <_strtod_l+0x55a>
 800fc1c:	4b12      	ldr	r3, [pc, #72]	@ (800fc68 <_strtod_l+0x590>)
 800fc1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fc22:	4650      	mov	r0, sl
 800fc24:	4659      	mov	r1, fp
 800fc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2a:	f7f0 fe37 	bl	800089c <__aeabi_ddiv>
 800fc2e:	4682      	mov	sl, r0
 800fc30:	468b      	mov	fp, r1
 800fc32:	1124      	asrs	r4, r4, #4
 800fc34:	d0dc      	beq.n	800fbf0 <_strtod_l+0x518>
 800fc36:	2c1f      	cmp	r4, #31
 800fc38:	dd20      	ble.n	800fc7c <_strtod_l+0x5a4>
 800fc3a:	2400      	movs	r4, #0
 800fc3c:	46a0      	mov	r8, r4
 800fc3e:	940a      	str	r4, [sp, #40]	@ 0x28
 800fc40:	46a1      	mov	r9, r4
 800fc42:	9a05      	ldr	r2, [sp, #20]
 800fc44:	2322      	movs	r3, #34	@ 0x22
 800fc46:	f04f 0a00 	mov.w	sl, #0
 800fc4a:	f04f 0b00 	mov.w	fp, #0
 800fc4e:	6013      	str	r3, [r2, #0]
 800fc50:	e768      	b.n	800fb24 <_strtod_l+0x44c>
 800fc52:	bf00      	nop
 800fc54:	080115bd 	.word	0x080115bd
 800fc58:	080117d4 	.word	0x080117d4
 800fc5c:	080115b5 	.word	0x080115b5
 800fc60:	080115ec 	.word	0x080115ec
 800fc64:	0801197d 	.word	0x0801197d
 800fc68:	08011708 	.word	0x08011708
 800fc6c:	080116e0 	.word	0x080116e0
 800fc70:	7ff00000 	.word	0x7ff00000
 800fc74:	7ca00000 	.word	0x7ca00000
 800fc78:	7fefffff 	.word	0x7fefffff
 800fc7c:	f014 0310 	ands.w	r3, r4, #16
 800fc80:	bf18      	it	ne
 800fc82:	236a      	movne	r3, #106	@ 0x6a
 800fc84:	4ea9      	ldr	r6, [pc, #676]	@ (800ff2c <_strtod_l+0x854>)
 800fc86:	9308      	str	r3, [sp, #32]
 800fc88:	4650      	mov	r0, sl
 800fc8a:	4659      	mov	r1, fp
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	07e2      	lsls	r2, r4, #31
 800fc90:	d504      	bpl.n	800fc9c <_strtod_l+0x5c4>
 800fc92:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fc96:	f7f0 fcd7 	bl	8000648 <__aeabi_dmul>
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	1064      	asrs	r4, r4, #1
 800fc9e:	f106 0608 	add.w	r6, r6, #8
 800fca2:	d1f4      	bne.n	800fc8e <_strtod_l+0x5b6>
 800fca4:	b10b      	cbz	r3, 800fcaa <_strtod_l+0x5d2>
 800fca6:	4682      	mov	sl, r0
 800fca8:	468b      	mov	fp, r1
 800fcaa:	9b08      	ldr	r3, [sp, #32]
 800fcac:	b1b3      	cbz	r3, 800fcdc <_strtod_l+0x604>
 800fcae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fcb2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	4659      	mov	r1, fp
 800fcba:	dd0f      	ble.n	800fcdc <_strtod_l+0x604>
 800fcbc:	2b1f      	cmp	r3, #31
 800fcbe:	dd55      	ble.n	800fd6c <_strtod_l+0x694>
 800fcc0:	2b34      	cmp	r3, #52	@ 0x34
 800fcc2:	bfde      	ittt	le
 800fcc4:	f04f 33ff 	movle.w	r3, #4294967295
 800fcc8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800fccc:	4093      	lslle	r3, r2
 800fcce:	f04f 0a00 	mov.w	sl, #0
 800fcd2:	bfcc      	ite	gt
 800fcd4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800fcd8:	ea03 0b01 	andle.w	fp, r3, r1
 800fcdc:	2200      	movs	r2, #0
 800fcde:	2300      	movs	r3, #0
 800fce0:	4650      	mov	r0, sl
 800fce2:	4659      	mov	r1, fp
 800fce4:	f7f0 ff18 	bl	8000b18 <__aeabi_dcmpeq>
 800fce8:	2800      	cmp	r0, #0
 800fcea:	d1a6      	bne.n	800fc3a <_strtod_l+0x562>
 800fcec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcee:	9300      	str	r3, [sp, #0]
 800fcf0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fcf2:	9805      	ldr	r0, [sp, #20]
 800fcf4:	462b      	mov	r3, r5
 800fcf6:	463a      	mov	r2, r7
 800fcf8:	f7ff f8c6 	bl	800ee88 <__s2b>
 800fcfc:	900a      	str	r0, [sp, #40]	@ 0x28
 800fcfe:	2800      	cmp	r0, #0
 800fd00:	f43f af05 	beq.w	800fb0e <_strtod_l+0x436>
 800fd04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd06:	2a00      	cmp	r2, #0
 800fd08:	eba9 0308 	sub.w	r3, r9, r8
 800fd0c:	bfa8      	it	ge
 800fd0e:	2300      	movge	r3, #0
 800fd10:	9312      	str	r3, [sp, #72]	@ 0x48
 800fd12:	2400      	movs	r4, #0
 800fd14:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800fd18:	9316      	str	r3, [sp, #88]	@ 0x58
 800fd1a:	46a0      	mov	r8, r4
 800fd1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd1e:	9805      	ldr	r0, [sp, #20]
 800fd20:	6859      	ldr	r1, [r3, #4]
 800fd22:	f7ff f809 	bl	800ed38 <_Balloc>
 800fd26:	4681      	mov	r9, r0
 800fd28:	2800      	cmp	r0, #0
 800fd2a:	f43f aef4 	beq.w	800fb16 <_strtod_l+0x43e>
 800fd2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd30:	691a      	ldr	r2, [r3, #16]
 800fd32:	3202      	adds	r2, #2
 800fd34:	f103 010c 	add.w	r1, r3, #12
 800fd38:	0092      	lsls	r2, r2, #2
 800fd3a:	300c      	adds	r0, #12
 800fd3c:	f000 fd72 	bl	8010824 <memcpy>
 800fd40:	ec4b ab10 	vmov	d0, sl, fp
 800fd44:	9805      	ldr	r0, [sp, #20]
 800fd46:	aa1c      	add	r2, sp, #112	@ 0x70
 800fd48:	a91b      	add	r1, sp, #108	@ 0x6c
 800fd4a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800fd4e:	f7ff fbd7 	bl	800f500 <__d2b>
 800fd52:	901a      	str	r0, [sp, #104]	@ 0x68
 800fd54:	2800      	cmp	r0, #0
 800fd56:	f43f aede 	beq.w	800fb16 <_strtod_l+0x43e>
 800fd5a:	9805      	ldr	r0, [sp, #20]
 800fd5c:	2101      	movs	r1, #1
 800fd5e:	f7ff f929 	bl	800efb4 <__i2b>
 800fd62:	4680      	mov	r8, r0
 800fd64:	b948      	cbnz	r0, 800fd7a <_strtod_l+0x6a2>
 800fd66:	f04f 0800 	mov.w	r8, #0
 800fd6a:	e6d4      	b.n	800fb16 <_strtod_l+0x43e>
 800fd6c:	f04f 32ff 	mov.w	r2, #4294967295
 800fd70:	fa02 f303 	lsl.w	r3, r2, r3
 800fd74:	ea03 0a0a 	and.w	sl, r3, sl
 800fd78:	e7b0      	b.n	800fcdc <_strtod_l+0x604>
 800fd7a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800fd7c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fd7e:	2d00      	cmp	r5, #0
 800fd80:	bfab      	itete	ge
 800fd82:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800fd84:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800fd86:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800fd88:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800fd8a:	bfac      	ite	ge
 800fd8c:	18ef      	addge	r7, r5, r3
 800fd8e:	1b5e      	sublt	r6, r3, r5
 800fd90:	9b08      	ldr	r3, [sp, #32]
 800fd92:	1aed      	subs	r5, r5, r3
 800fd94:	4415      	add	r5, r2
 800fd96:	4b66      	ldr	r3, [pc, #408]	@ (800ff30 <_strtod_l+0x858>)
 800fd98:	3d01      	subs	r5, #1
 800fd9a:	429d      	cmp	r5, r3
 800fd9c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fda0:	da50      	bge.n	800fe44 <_strtod_l+0x76c>
 800fda2:	1b5b      	subs	r3, r3, r5
 800fda4:	2b1f      	cmp	r3, #31
 800fda6:	eba2 0203 	sub.w	r2, r2, r3
 800fdaa:	f04f 0101 	mov.w	r1, #1
 800fdae:	dc3d      	bgt.n	800fe2c <_strtod_l+0x754>
 800fdb0:	fa01 f303 	lsl.w	r3, r1, r3
 800fdb4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	9310      	str	r3, [sp, #64]	@ 0x40
 800fdba:	18bd      	adds	r5, r7, r2
 800fdbc:	9b08      	ldr	r3, [sp, #32]
 800fdbe:	42af      	cmp	r7, r5
 800fdc0:	4416      	add	r6, r2
 800fdc2:	441e      	add	r6, r3
 800fdc4:	463b      	mov	r3, r7
 800fdc6:	bfa8      	it	ge
 800fdc8:	462b      	movge	r3, r5
 800fdca:	42b3      	cmp	r3, r6
 800fdcc:	bfa8      	it	ge
 800fdce:	4633      	movge	r3, r6
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	bfc2      	ittt	gt
 800fdd4:	1aed      	subgt	r5, r5, r3
 800fdd6:	1af6      	subgt	r6, r6, r3
 800fdd8:	1aff      	subgt	r7, r7, r3
 800fdda:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	dd16      	ble.n	800fe0e <_strtod_l+0x736>
 800fde0:	4641      	mov	r1, r8
 800fde2:	9805      	ldr	r0, [sp, #20]
 800fde4:	461a      	mov	r2, r3
 800fde6:	f7ff f9a5 	bl	800f134 <__pow5mult>
 800fdea:	4680      	mov	r8, r0
 800fdec:	2800      	cmp	r0, #0
 800fdee:	d0ba      	beq.n	800fd66 <_strtod_l+0x68e>
 800fdf0:	4601      	mov	r1, r0
 800fdf2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fdf4:	9805      	ldr	r0, [sp, #20]
 800fdf6:	f7ff f8f3 	bl	800efe0 <__multiply>
 800fdfa:	900e      	str	r0, [sp, #56]	@ 0x38
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	f43f ae8a 	beq.w	800fb16 <_strtod_l+0x43e>
 800fe02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fe04:	9805      	ldr	r0, [sp, #20]
 800fe06:	f7fe ffd7 	bl	800edb8 <_Bfree>
 800fe0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe0c:	931a      	str	r3, [sp, #104]	@ 0x68
 800fe0e:	2d00      	cmp	r5, #0
 800fe10:	dc1d      	bgt.n	800fe4e <_strtod_l+0x776>
 800fe12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	dd23      	ble.n	800fe60 <_strtod_l+0x788>
 800fe18:	4649      	mov	r1, r9
 800fe1a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800fe1c:	9805      	ldr	r0, [sp, #20]
 800fe1e:	f7ff f989 	bl	800f134 <__pow5mult>
 800fe22:	4681      	mov	r9, r0
 800fe24:	b9e0      	cbnz	r0, 800fe60 <_strtod_l+0x788>
 800fe26:	f04f 0900 	mov.w	r9, #0
 800fe2a:	e674      	b.n	800fb16 <_strtod_l+0x43e>
 800fe2c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800fe30:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800fe34:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800fe38:	35e2      	adds	r5, #226	@ 0xe2
 800fe3a:	fa01 f305 	lsl.w	r3, r1, r5
 800fe3e:	9310      	str	r3, [sp, #64]	@ 0x40
 800fe40:	9113      	str	r1, [sp, #76]	@ 0x4c
 800fe42:	e7ba      	b.n	800fdba <_strtod_l+0x6e2>
 800fe44:	2300      	movs	r3, #0
 800fe46:	9310      	str	r3, [sp, #64]	@ 0x40
 800fe48:	2301      	movs	r3, #1
 800fe4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fe4c:	e7b5      	b.n	800fdba <_strtod_l+0x6e2>
 800fe4e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fe50:	9805      	ldr	r0, [sp, #20]
 800fe52:	462a      	mov	r2, r5
 800fe54:	f7ff f9c8 	bl	800f1e8 <__lshift>
 800fe58:	901a      	str	r0, [sp, #104]	@ 0x68
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	d1d9      	bne.n	800fe12 <_strtod_l+0x73a>
 800fe5e:	e65a      	b.n	800fb16 <_strtod_l+0x43e>
 800fe60:	2e00      	cmp	r6, #0
 800fe62:	dd07      	ble.n	800fe74 <_strtod_l+0x79c>
 800fe64:	4649      	mov	r1, r9
 800fe66:	9805      	ldr	r0, [sp, #20]
 800fe68:	4632      	mov	r2, r6
 800fe6a:	f7ff f9bd 	bl	800f1e8 <__lshift>
 800fe6e:	4681      	mov	r9, r0
 800fe70:	2800      	cmp	r0, #0
 800fe72:	d0d8      	beq.n	800fe26 <_strtod_l+0x74e>
 800fe74:	2f00      	cmp	r7, #0
 800fe76:	dd08      	ble.n	800fe8a <_strtod_l+0x7b2>
 800fe78:	4641      	mov	r1, r8
 800fe7a:	9805      	ldr	r0, [sp, #20]
 800fe7c:	463a      	mov	r2, r7
 800fe7e:	f7ff f9b3 	bl	800f1e8 <__lshift>
 800fe82:	4680      	mov	r8, r0
 800fe84:	2800      	cmp	r0, #0
 800fe86:	f43f ae46 	beq.w	800fb16 <_strtod_l+0x43e>
 800fe8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fe8c:	9805      	ldr	r0, [sp, #20]
 800fe8e:	464a      	mov	r2, r9
 800fe90:	f7ff fa32 	bl	800f2f8 <__mdiff>
 800fe94:	4604      	mov	r4, r0
 800fe96:	2800      	cmp	r0, #0
 800fe98:	f43f ae3d 	beq.w	800fb16 <_strtod_l+0x43e>
 800fe9c:	68c3      	ldr	r3, [r0, #12]
 800fe9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fea0:	2300      	movs	r3, #0
 800fea2:	60c3      	str	r3, [r0, #12]
 800fea4:	4641      	mov	r1, r8
 800fea6:	f7ff fa0b 	bl	800f2c0 <__mcmp>
 800feaa:	2800      	cmp	r0, #0
 800feac:	da46      	bge.n	800ff3c <_strtod_l+0x864>
 800feae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800feb0:	ea53 030a 	orrs.w	r3, r3, sl
 800feb4:	d16c      	bne.n	800ff90 <_strtod_l+0x8b8>
 800feb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800feba:	2b00      	cmp	r3, #0
 800febc:	d168      	bne.n	800ff90 <_strtod_l+0x8b8>
 800febe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fec2:	0d1b      	lsrs	r3, r3, #20
 800fec4:	051b      	lsls	r3, r3, #20
 800fec6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800feca:	d961      	bls.n	800ff90 <_strtod_l+0x8b8>
 800fecc:	6963      	ldr	r3, [r4, #20]
 800fece:	b913      	cbnz	r3, 800fed6 <_strtod_l+0x7fe>
 800fed0:	6923      	ldr	r3, [r4, #16]
 800fed2:	2b01      	cmp	r3, #1
 800fed4:	dd5c      	ble.n	800ff90 <_strtod_l+0x8b8>
 800fed6:	4621      	mov	r1, r4
 800fed8:	2201      	movs	r2, #1
 800feda:	9805      	ldr	r0, [sp, #20]
 800fedc:	f7ff f984 	bl	800f1e8 <__lshift>
 800fee0:	4641      	mov	r1, r8
 800fee2:	4604      	mov	r4, r0
 800fee4:	f7ff f9ec 	bl	800f2c0 <__mcmp>
 800fee8:	2800      	cmp	r0, #0
 800feea:	dd51      	ble.n	800ff90 <_strtod_l+0x8b8>
 800feec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fef0:	9a08      	ldr	r2, [sp, #32]
 800fef2:	0d1b      	lsrs	r3, r3, #20
 800fef4:	051b      	lsls	r3, r3, #20
 800fef6:	2a00      	cmp	r2, #0
 800fef8:	d06b      	beq.n	800ffd2 <_strtod_l+0x8fa>
 800fefa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fefe:	d868      	bhi.n	800ffd2 <_strtod_l+0x8fa>
 800ff00:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ff04:	f67f ae9d 	bls.w	800fc42 <_strtod_l+0x56a>
 800ff08:	4b0a      	ldr	r3, [pc, #40]	@ (800ff34 <_strtod_l+0x85c>)
 800ff0a:	4650      	mov	r0, sl
 800ff0c:	4659      	mov	r1, fp
 800ff0e:	2200      	movs	r2, #0
 800ff10:	f7f0 fb9a 	bl	8000648 <__aeabi_dmul>
 800ff14:	4b08      	ldr	r3, [pc, #32]	@ (800ff38 <_strtod_l+0x860>)
 800ff16:	400b      	ands	r3, r1
 800ff18:	4682      	mov	sl, r0
 800ff1a:	468b      	mov	fp, r1
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	f47f ae05 	bne.w	800fb2c <_strtod_l+0x454>
 800ff22:	9a05      	ldr	r2, [sp, #20]
 800ff24:	2322      	movs	r3, #34	@ 0x22
 800ff26:	6013      	str	r3, [r2, #0]
 800ff28:	e600      	b.n	800fb2c <_strtod_l+0x454>
 800ff2a:	bf00      	nop
 800ff2c:	08011800 	.word	0x08011800
 800ff30:	fffffc02 	.word	0xfffffc02
 800ff34:	39500000 	.word	0x39500000
 800ff38:	7ff00000 	.word	0x7ff00000
 800ff3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ff40:	d165      	bne.n	801000e <_strtod_l+0x936>
 800ff42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ff44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ff48:	b35a      	cbz	r2, 800ffa2 <_strtod_l+0x8ca>
 800ff4a:	4a9f      	ldr	r2, [pc, #636]	@ (80101c8 <_strtod_l+0xaf0>)
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	d12b      	bne.n	800ffa8 <_strtod_l+0x8d0>
 800ff50:	9b08      	ldr	r3, [sp, #32]
 800ff52:	4651      	mov	r1, sl
 800ff54:	b303      	cbz	r3, 800ff98 <_strtod_l+0x8c0>
 800ff56:	4b9d      	ldr	r3, [pc, #628]	@ (80101cc <_strtod_l+0xaf4>)
 800ff58:	465a      	mov	r2, fp
 800ff5a:	4013      	ands	r3, r2
 800ff5c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ff60:	f04f 32ff 	mov.w	r2, #4294967295
 800ff64:	d81b      	bhi.n	800ff9e <_strtod_l+0x8c6>
 800ff66:	0d1b      	lsrs	r3, r3, #20
 800ff68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ff6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ff70:	4299      	cmp	r1, r3
 800ff72:	d119      	bne.n	800ffa8 <_strtod_l+0x8d0>
 800ff74:	4b96      	ldr	r3, [pc, #600]	@ (80101d0 <_strtod_l+0xaf8>)
 800ff76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d102      	bne.n	800ff82 <_strtod_l+0x8aa>
 800ff7c:	3101      	adds	r1, #1
 800ff7e:	f43f adca 	beq.w	800fb16 <_strtod_l+0x43e>
 800ff82:	4b92      	ldr	r3, [pc, #584]	@ (80101cc <_strtod_l+0xaf4>)
 800ff84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff86:	401a      	ands	r2, r3
 800ff88:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ff8c:	f04f 0a00 	mov.w	sl, #0
 800ff90:	9b08      	ldr	r3, [sp, #32]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d1b8      	bne.n	800ff08 <_strtod_l+0x830>
 800ff96:	e5c9      	b.n	800fb2c <_strtod_l+0x454>
 800ff98:	f04f 33ff 	mov.w	r3, #4294967295
 800ff9c:	e7e8      	b.n	800ff70 <_strtod_l+0x898>
 800ff9e:	4613      	mov	r3, r2
 800ffa0:	e7e6      	b.n	800ff70 <_strtod_l+0x898>
 800ffa2:	ea53 030a 	orrs.w	r3, r3, sl
 800ffa6:	d0a1      	beq.n	800feec <_strtod_l+0x814>
 800ffa8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ffaa:	b1db      	cbz	r3, 800ffe4 <_strtod_l+0x90c>
 800ffac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ffae:	4213      	tst	r3, r2
 800ffb0:	d0ee      	beq.n	800ff90 <_strtod_l+0x8b8>
 800ffb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffb4:	9a08      	ldr	r2, [sp, #32]
 800ffb6:	4650      	mov	r0, sl
 800ffb8:	4659      	mov	r1, fp
 800ffba:	b1bb      	cbz	r3, 800ffec <_strtod_l+0x914>
 800ffbc:	f7ff fb6e 	bl	800f69c <sulp>
 800ffc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ffc4:	ec53 2b10 	vmov	r2, r3, d0
 800ffc8:	f7f0 f988 	bl	80002dc <__adddf3>
 800ffcc:	4682      	mov	sl, r0
 800ffce:	468b      	mov	fp, r1
 800ffd0:	e7de      	b.n	800ff90 <_strtod_l+0x8b8>
 800ffd2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ffd6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ffda:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ffde:	f04f 3aff 	mov.w	sl, #4294967295
 800ffe2:	e7d5      	b.n	800ff90 <_strtod_l+0x8b8>
 800ffe4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ffe6:	ea13 0f0a 	tst.w	r3, sl
 800ffea:	e7e1      	b.n	800ffb0 <_strtod_l+0x8d8>
 800ffec:	f7ff fb56 	bl	800f69c <sulp>
 800fff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fff4:	ec53 2b10 	vmov	r2, r3, d0
 800fff8:	f7f0 f96e 	bl	80002d8 <__aeabi_dsub>
 800fffc:	2200      	movs	r2, #0
 800fffe:	2300      	movs	r3, #0
 8010000:	4682      	mov	sl, r0
 8010002:	468b      	mov	fp, r1
 8010004:	f7f0 fd88 	bl	8000b18 <__aeabi_dcmpeq>
 8010008:	2800      	cmp	r0, #0
 801000a:	d0c1      	beq.n	800ff90 <_strtod_l+0x8b8>
 801000c:	e619      	b.n	800fc42 <_strtod_l+0x56a>
 801000e:	4641      	mov	r1, r8
 8010010:	4620      	mov	r0, r4
 8010012:	f7ff facd 	bl	800f5b0 <__ratio>
 8010016:	ec57 6b10 	vmov	r6, r7, d0
 801001a:	2200      	movs	r2, #0
 801001c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010020:	4630      	mov	r0, r6
 8010022:	4639      	mov	r1, r7
 8010024:	f7f0 fd8c 	bl	8000b40 <__aeabi_dcmple>
 8010028:	2800      	cmp	r0, #0
 801002a:	d06f      	beq.n	801010c <_strtod_l+0xa34>
 801002c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801002e:	2b00      	cmp	r3, #0
 8010030:	d17a      	bne.n	8010128 <_strtod_l+0xa50>
 8010032:	f1ba 0f00 	cmp.w	sl, #0
 8010036:	d158      	bne.n	80100ea <_strtod_l+0xa12>
 8010038:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801003a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801003e:	2b00      	cmp	r3, #0
 8010040:	d15a      	bne.n	80100f8 <_strtod_l+0xa20>
 8010042:	4b64      	ldr	r3, [pc, #400]	@ (80101d4 <_strtod_l+0xafc>)
 8010044:	2200      	movs	r2, #0
 8010046:	4630      	mov	r0, r6
 8010048:	4639      	mov	r1, r7
 801004a:	f7f0 fd6f 	bl	8000b2c <__aeabi_dcmplt>
 801004e:	2800      	cmp	r0, #0
 8010050:	d159      	bne.n	8010106 <_strtod_l+0xa2e>
 8010052:	4630      	mov	r0, r6
 8010054:	4639      	mov	r1, r7
 8010056:	4b60      	ldr	r3, [pc, #384]	@ (80101d8 <_strtod_l+0xb00>)
 8010058:	2200      	movs	r2, #0
 801005a:	f7f0 faf5 	bl	8000648 <__aeabi_dmul>
 801005e:	4606      	mov	r6, r0
 8010060:	460f      	mov	r7, r1
 8010062:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010066:	9606      	str	r6, [sp, #24]
 8010068:	9307      	str	r3, [sp, #28]
 801006a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801006e:	4d57      	ldr	r5, [pc, #348]	@ (80101cc <_strtod_l+0xaf4>)
 8010070:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010074:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010076:	401d      	ands	r5, r3
 8010078:	4b58      	ldr	r3, [pc, #352]	@ (80101dc <_strtod_l+0xb04>)
 801007a:	429d      	cmp	r5, r3
 801007c:	f040 80b2 	bne.w	80101e4 <_strtod_l+0xb0c>
 8010080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010082:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010086:	ec4b ab10 	vmov	d0, sl, fp
 801008a:	f7ff f9c9 	bl	800f420 <__ulp>
 801008e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010092:	ec51 0b10 	vmov	r0, r1, d0
 8010096:	f7f0 fad7 	bl	8000648 <__aeabi_dmul>
 801009a:	4652      	mov	r2, sl
 801009c:	465b      	mov	r3, fp
 801009e:	f7f0 f91d 	bl	80002dc <__adddf3>
 80100a2:	460b      	mov	r3, r1
 80100a4:	4949      	ldr	r1, [pc, #292]	@ (80101cc <_strtod_l+0xaf4>)
 80100a6:	4a4e      	ldr	r2, [pc, #312]	@ (80101e0 <_strtod_l+0xb08>)
 80100a8:	4019      	ands	r1, r3
 80100aa:	4291      	cmp	r1, r2
 80100ac:	4682      	mov	sl, r0
 80100ae:	d942      	bls.n	8010136 <_strtod_l+0xa5e>
 80100b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80100b2:	4b47      	ldr	r3, [pc, #284]	@ (80101d0 <_strtod_l+0xaf8>)
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d103      	bne.n	80100c0 <_strtod_l+0x9e8>
 80100b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80100ba:	3301      	adds	r3, #1
 80100bc:	f43f ad2b 	beq.w	800fb16 <_strtod_l+0x43e>
 80100c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80101d0 <_strtod_l+0xaf8>
 80100c4:	f04f 3aff 	mov.w	sl, #4294967295
 80100c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80100ca:	9805      	ldr	r0, [sp, #20]
 80100cc:	f7fe fe74 	bl	800edb8 <_Bfree>
 80100d0:	9805      	ldr	r0, [sp, #20]
 80100d2:	4649      	mov	r1, r9
 80100d4:	f7fe fe70 	bl	800edb8 <_Bfree>
 80100d8:	9805      	ldr	r0, [sp, #20]
 80100da:	4641      	mov	r1, r8
 80100dc:	f7fe fe6c 	bl	800edb8 <_Bfree>
 80100e0:	9805      	ldr	r0, [sp, #20]
 80100e2:	4621      	mov	r1, r4
 80100e4:	f7fe fe68 	bl	800edb8 <_Bfree>
 80100e8:	e618      	b.n	800fd1c <_strtod_l+0x644>
 80100ea:	f1ba 0f01 	cmp.w	sl, #1
 80100ee:	d103      	bne.n	80100f8 <_strtod_l+0xa20>
 80100f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	f43f ada5 	beq.w	800fc42 <_strtod_l+0x56a>
 80100f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80101a8 <_strtod_l+0xad0>
 80100fc:	4f35      	ldr	r7, [pc, #212]	@ (80101d4 <_strtod_l+0xafc>)
 80100fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010102:	2600      	movs	r6, #0
 8010104:	e7b1      	b.n	801006a <_strtod_l+0x992>
 8010106:	4f34      	ldr	r7, [pc, #208]	@ (80101d8 <_strtod_l+0xb00>)
 8010108:	2600      	movs	r6, #0
 801010a:	e7aa      	b.n	8010062 <_strtod_l+0x98a>
 801010c:	4b32      	ldr	r3, [pc, #200]	@ (80101d8 <_strtod_l+0xb00>)
 801010e:	4630      	mov	r0, r6
 8010110:	4639      	mov	r1, r7
 8010112:	2200      	movs	r2, #0
 8010114:	f7f0 fa98 	bl	8000648 <__aeabi_dmul>
 8010118:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801011a:	4606      	mov	r6, r0
 801011c:	460f      	mov	r7, r1
 801011e:	2b00      	cmp	r3, #0
 8010120:	d09f      	beq.n	8010062 <_strtod_l+0x98a>
 8010122:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010126:	e7a0      	b.n	801006a <_strtod_l+0x992>
 8010128:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80101b0 <_strtod_l+0xad8>
 801012c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010130:	ec57 6b17 	vmov	r6, r7, d7
 8010134:	e799      	b.n	801006a <_strtod_l+0x992>
 8010136:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801013a:	9b08      	ldr	r3, [sp, #32]
 801013c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010140:	2b00      	cmp	r3, #0
 8010142:	d1c1      	bne.n	80100c8 <_strtod_l+0x9f0>
 8010144:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010148:	0d1b      	lsrs	r3, r3, #20
 801014a:	051b      	lsls	r3, r3, #20
 801014c:	429d      	cmp	r5, r3
 801014e:	d1bb      	bne.n	80100c8 <_strtod_l+0x9f0>
 8010150:	4630      	mov	r0, r6
 8010152:	4639      	mov	r1, r7
 8010154:	f7f0 fdc0 	bl	8000cd8 <__aeabi_d2lz>
 8010158:	f7f0 fa48 	bl	80005ec <__aeabi_l2d>
 801015c:	4602      	mov	r2, r0
 801015e:	460b      	mov	r3, r1
 8010160:	4630      	mov	r0, r6
 8010162:	4639      	mov	r1, r7
 8010164:	f7f0 f8b8 	bl	80002d8 <__aeabi_dsub>
 8010168:	460b      	mov	r3, r1
 801016a:	4602      	mov	r2, r0
 801016c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010170:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010176:	ea46 060a 	orr.w	r6, r6, sl
 801017a:	431e      	orrs	r6, r3
 801017c:	d06f      	beq.n	801025e <_strtod_l+0xb86>
 801017e:	a30e      	add	r3, pc, #56	@ (adr r3, 80101b8 <_strtod_l+0xae0>)
 8010180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010184:	f7f0 fcd2 	bl	8000b2c <__aeabi_dcmplt>
 8010188:	2800      	cmp	r0, #0
 801018a:	f47f accf 	bne.w	800fb2c <_strtod_l+0x454>
 801018e:	a30c      	add	r3, pc, #48	@ (adr r3, 80101c0 <_strtod_l+0xae8>)
 8010190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010194:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010198:	f7f0 fce6 	bl	8000b68 <__aeabi_dcmpgt>
 801019c:	2800      	cmp	r0, #0
 801019e:	d093      	beq.n	80100c8 <_strtod_l+0x9f0>
 80101a0:	e4c4      	b.n	800fb2c <_strtod_l+0x454>
 80101a2:	bf00      	nop
 80101a4:	f3af 8000 	nop.w
 80101a8:	00000000 	.word	0x00000000
 80101ac:	bff00000 	.word	0xbff00000
 80101b0:	00000000 	.word	0x00000000
 80101b4:	3ff00000 	.word	0x3ff00000
 80101b8:	94a03595 	.word	0x94a03595
 80101bc:	3fdfffff 	.word	0x3fdfffff
 80101c0:	35afe535 	.word	0x35afe535
 80101c4:	3fe00000 	.word	0x3fe00000
 80101c8:	000fffff 	.word	0x000fffff
 80101cc:	7ff00000 	.word	0x7ff00000
 80101d0:	7fefffff 	.word	0x7fefffff
 80101d4:	3ff00000 	.word	0x3ff00000
 80101d8:	3fe00000 	.word	0x3fe00000
 80101dc:	7fe00000 	.word	0x7fe00000
 80101e0:	7c9fffff 	.word	0x7c9fffff
 80101e4:	9b08      	ldr	r3, [sp, #32]
 80101e6:	b323      	cbz	r3, 8010232 <_strtod_l+0xb5a>
 80101e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80101ec:	d821      	bhi.n	8010232 <_strtod_l+0xb5a>
 80101ee:	a328      	add	r3, pc, #160	@ (adr r3, 8010290 <_strtod_l+0xbb8>)
 80101f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f4:	4630      	mov	r0, r6
 80101f6:	4639      	mov	r1, r7
 80101f8:	f7f0 fca2 	bl	8000b40 <__aeabi_dcmple>
 80101fc:	b1a0      	cbz	r0, 8010228 <_strtod_l+0xb50>
 80101fe:	4639      	mov	r1, r7
 8010200:	4630      	mov	r0, r6
 8010202:	f7f0 fcf9 	bl	8000bf8 <__aeabi_d2uiz>
 8010206:	2801      	cmp	r0, #1
 8010208:	bf38      	it	cc
 801020a:	2001      	movcc	r0, #1
 801020c:	f7f0 f9a2 	bl	8000554 <__aeabi_ui2d>
 8010210:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010212:	4606      	mov	r6, r0
 8010214:	460f      	mov	r7, r1
 8010216:	b9fb      	cbnz	r3, 8010258 <_strtod_l+0xb80>
 8010218:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801021c:	9014      	str	r0, [sp, #80]	@ 0x50
 801021e:	9315      	str	r3, [sp, #84]	@ 0x54
 8010220:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010224:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010228:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801022a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801022e:	1b5b      	subs	r3, r3, r5
 8010230:	9311      	str	r3, [sp, #68]	@ 0x44
 8010232:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010236:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801023a:	f7ff f8f1 	bl	800f420 <__ulp>
 801023e:	4650      	mov	r0, sl
 8010240:	ec53 2b10 	vmov	r2, r3, d0
 8010244:	4659      	mov	r1, fp
 8010246:	f7f0 f9ff 	bl	8000648 <__aeabi_dmul>
 801024a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801024e:	f7f0 f845 	bl	80002dc <__adddf3>
 8010252:	4682      	mov	sl, r0
 8010254:	468b      	mov	fp, r1
 8010256:	e770      	b.n	801013a <_strtod_l+0xa62>
 8010258:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801025c:	e7e0      	b.n	8010220 <_strtod_l+0xb48>
 801025e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010298 <_strtod_l+0xbc0>)
 8010260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010264:	f7f0 fc62 	bl	8000b2c <__aeabi_dcmplt>
 8010268:	e798      	b.n	801019c <_strtod_l+0xac4>
 801026a:	2300      	movs	r3, #0
 801026c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801026e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010270:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010272:	6013      	str	r3, [r2, #0]
 8010274:	f7ff ba6d 	b.w	800f752 <_strtod_l+0x7a>
 8010278:	2a65      	cmp	r2, #101	@ 0x65
 801027a:	f43f ab66 	beq.w	800f94a <_strtod_l+0x272>
 801027e:	2a45      	cmp	r2, #69	@ 0x45
 8010280:	f43f ab63 	beq.w	800f94a <_strtod_l+0x272>
 8010284:	2301      	movs	r3, #1
 8010286:	f7ff bb9e 	b.w	800f9c6 <_strtod_l+0x2ee>
 801028a:	bf00      	nop
 801028c:	f3af 8000 	nop.w
 8010290:	ffc00000 	.word	0xffc00000
 8010294:	41dfffff 	.word	0x41dfffff
 8010298:	94a03595 	.word	0x94a03595
 801029c:	3fcfffff 	.word	0x3fcfffff

080102a0 <_strtod_r>:
 80102a0:	4b01      	ldr	r3, [pc, #4]	@ (80102a8 <_strtod_r+0x8>)
 80102a2:	f7ff ba19 	b.w	800f6d8 <_strtod_l>
 80102a6:	bf00      	nop
 80102a8:	200001e0 	.word	0x200001e0

080102ac <_strtol_l.constprop.0>:
 80102ac:	2b24      	cmp	r3, #36	@ 0x24
 80102ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102b2:	4686      	mov	lr, r0
 80102b4:	4690      	mov	r8, r2
 80102b6:	d801      	bhi.n	80102bc <_strtol_l.constprop.0+0x10>
 80102b8:	2b01      	cmp	r3, #1
 80102ba:	d106      	bne.n	80102ca <_strtol_l.constprop.0+0x1e>
 80102bc:	f7fd fdbc 	bl	800de38 <__errno>
 80102c0:	2316      	movs	r3, #22
 80102c2:	6003      	str	r3, [r0, #0]
 80102c4:	2000      	movs	r0, #0
 80102c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102ca:	4834      	ldr	r0, [pc, #208]	@ (801039c <_strtol_l.constprop.0+0xf0>)
 80102cc:	460d      	mov	r5, r1
 80102ce:	462a      	mov	r2, r5
 80102d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80102d4:	5d06      	ldrb	r6, [r0, r4]
 80102d6:	f016 0608 	ands.w	r6, r6, #8
 80102da:	d1f8      	bne.n	80102ce <_strtol_l.constprop.0+0x22>
 80102dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80102de:	d12d      	bne.n	801033c <_strtol_l.constprop.0+0x90>
 80102e0:	782c      	ldrb	r4, [r5, #0]
 80102e2:	2601      	movs	r6, #1
 80102e4:	1c95      	adds	r5, r2, #2
 80102e6:	f033 0210 	bics.w	r2, r3, #16
 80102ea:	d109      	bne.n	8010300 <_strtol_l.constprop.0+0x54>
 80102ec:	2c30      	cmp	r4, #48	@ 0x30
 80102ee:	d12a      	bne.n	8010346 <_strtol_l.constprop.0+0x9a>
 80102f0:	782a      	ldrb	r2, [r5, #0]
 80102f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80102f6:	2a58      	cmp	r2, #88	@ 0x58
 80102f8:	d125      	bne.n	8010346 <_strtol_l.constprop.0+0x9a>
 80102fa:	786c      	ldrb	r4, [r5, #1]
 80102fc:	2310      	movs	r3, #16
 80102fe:	3502      	adds	r5, #2
 8010300:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010304:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010308:	2200      	movs	r2, #0
 801030a:	fbbc f9f3 	udiv	r9, ip, r3
 801030e:	4610      	mov	r0, r2
 8010310:	fb03 ca19 	mls	sl, r3, r9, ip
 8010314:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010318:	2f09      	cmp	r7, #9
 801031a:	d81b      	bhi.n	8010354 <_strtol_l.constprop.0+0xa8>
 801031c:	463c      	mov	r4, r7
 801031e:	42a3      	cmp	r3, r4
 8010320:	dd27      	ble.n	8010372 <_strtol_l.constprop.0+0xc6>
 8010322:	1c57      	adds	r7, r2, #1
 8010324:	d007      	beq.n	8010336 <_strtol_l.constprop.0+0x8a>
 8010326:	4581      	cmp	r9, r0
 8010328:	d320      	bcc.n	801036c <_strtol_l.constprop.0+0xc0>
 801032a:	d101      	bne.n	8010330 <_strtol_l.constprop.0+0x84>
 801032c:	45a2      	cmp	sl, r4
 801032e:	db1d      	blt.n	801036c <_strtol_l.constprop.0+0xc0>
 8010330:	fb00 4003 	mla	r0, r0, r3, r4
 8010334:	2201      	movs	r2, #1
 8010336:	f815 4b01 	ldrb.w	r4, [r5], #1
 801033a:	e7eb      	b.n	8010314 <_strtol_l.constprop.0+0x68>
 801033c:	2c2b      	cmp	r4, #43	@ 0x2b
 801033e:	bf04      	itt	eq
 8010340:	782c      	ldrbeq	r4, [r5, #0]
 8010342:	1c95      	addeq	r5, r2, #2
 8010344:	e7cf      	b.n	80102e6 <_strtol_l.constprop.0+0x3a>
 8010346:	2b00      	cmp	r3, #0
 8010348:	d1da      	bne.n	8010300 <_strtol_l.constprop.0+0x54>
 801034a:	2c30      	cmp	r4, #48	@ 0x30
 801034c:	bf0c      	ite	eq
 801034e:	2308      	moveq	r3, #8
 8010350:	230a      	movne	r3, #10
 8010352:	e7d5      	b.n	8010300 <_strtol_l.constprop.0+0x54>
 8010354:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010358:	2f19      	cmp	r7, #25
 801035a:	d801      	bhi.n	8010360 <_strtol_l.constprop.0+0xb4>
 801035c:	3c37      	subs	r4, #55	@ 0x37
 801035e:	e7de      	b.n	801031e <_strtol_l.constprop.0+0x72>
 8010360:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010364:	2f19      	cmp	r7, #25
 8010366:	d804      	bhi.n	8010372 <_strtol_l.constprop.0+0xc6>
 8010368:	3c57      	subs	r4, #87	@ 0x57
 801036a:	e7d8      	b.n	801031e <_strtol_l.constprop.0+0x72>
 801036c:	f04f 32ff 	mov.w	r2, #4294967295
 8010370:	e7e1      	b.n	8010336 <_strtol_l.constprop.0+0x8a>
 8010372:	1c53      	adds	r3, r2, #1
 8010374:	d108      	bne.n	8010388 <_strtol_l.constprop.0+0xdc>
 8010376:	2322      	movs	r3, #34	@ 0x22
 8010378:	f8ce 3000 	str.w	r3, [lr]
 801037c:	4660      	mov	r0, ip
 801037e:	f1b8 0f00 	cmp.w	r8, #0
 8010382:	d0a0      	beq.n	80102c6 <_strtol_l.constprop.0+0x1a>
 8010384:	1e69      	subs	r1, r5, #1
 8010386:	e006      	b.n	8010396 <_strtol_l.constprop.0+0xea>
 8010388:	b106      	cbz	r6, 801038c <_strtol_l.constprop.0+0xe0>
 801038a:	4240      	negs	r0, r0
 801038c:	f1b8 0f00 	cmp.w	r8, #0
 8010390:	d099      	beq.n	80102c6 <_strtol_l.constprop.0+0x1a>
 8010392:	2a00      	cmp	r2, #0
 8010394:	d1f6      	bne.n	8010384 <_strtol_l.constprop.0+0xd8>
 8010396:	f8c8 1000 	str.w	r1, [r8]
 801039a:	e794      	b.n	80102c6 <_strtol_l.constprop.0+0x1a>
 801039c:	08011829 	.word	0x08011829

080103a0 <_strtol_r>:
 80103a0:	f7ff bf84 	b.w	80102ac <_strtol_l.constprop.0>

080103a4 <__ssputs_r>:
 80103a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103a8:	688e      	ldr	r6, [r1, #8]
 80103aa:	461f      	mov	r7, r3
 80103ac:	42be      	cmp	r6, r7
 80103ae:	680b      	ldr	r3, [r1, #0]
 80103b0:	4682      	mov	sl, r0
 80103b2:	460c      	mov	r4, r1
 80103b4:	4690      	mov	r8, r2
 80103b6:	d82d      	bhi.n	8010414 <__ssputs_r+0x70>
 80103b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80103bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80103c0:	d026      	beq.n	8010410 <__ssputs_r+0x6c>
 80103c2:	6965      	ldr	r5, [r4, #20]
 80103c4:	6909      	ldr	r1, [r1, #16]
 80103c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80103ca:	eba3 0901 	sub.w	r9, r3, r1
 80103ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80103d2:	1c7b      	adds	r3, r7, #1
 80103d4:	444b      	add	r3, r9
 80103d6:	106d      	asrs	r5, r5, #1
 80103d8:	429d      	cmp	r5, r3
 80103da:	bf38      	it	cc
 80103dc:	461d      	movcc	r5, r3
 80103de:	0553      	lsls	r3, r2, #21
 80103e0:	d527      	bpl.n	8010432 <__ssputs_r+0x8e>
 80103e2:	4629      	mov	r1, r5
 80103e4:	f7fe fc1c 	bl	800ec20 <_malloc_r>
 80103e8:	4606      	mov	r6, r0
 80103ea:	b360      	cbz	r0, 8010446 <__ssputs_r+0xa2>
 80103ec:	6921      	ldr	r1, [r4, #16]
 80103ee:	464a      	mov	r2, r9
 80103f0:	f000 fa18 	bl	8010824 <memcpy>
 80103f4:	89a3      	ldrh	r3, [r4, #12]
 80103f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80103fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80103fe:	81a3      	strh	r3, [r4, #12]
 8010400:	6126      	str	r6, [r4, #16]
 8010402:	6165      	str	r5, [r4, #20]
 8010404:	444e      	add	r6, r9
 8010406:	eba5 0509 	sub.w	r5, r5, r9
 801040a:	6026      	str	r6, [r4, #0]
 801040c:	60a5      	str	r5, [r4, #8]
 801040e:	463e      	mov	r6, r7
 8010410:	42be      	cmp	r6, r7
 8010412:	d900      	bls.n	8010416 <__ssputs_r+0x72>
 8010414:	463e      	mov	r6, r7
 8010416:	6820      	ldr	r0, [r4, #0]
 8010418:	4632      	mov	r2, r6
 801041a:	4641      	mov	r1, r8
 801041c:	f000 f9c6 	bl	80107ac <memmove>
 8010420:	68a3      	ldr	r3, [r4, #8]
 8010422:	1b9b      	subs	r3, r3, r6
 8010424:	60a3      	str	r3, [r4, #8]
 8010426:	6823      	ldr	r3, [r4, #0]
 8010428:	4433      	add	r3, r6
 801042a:	6023      	str	r3, [r4, #0]
 801042c:	2000      	movs	r0, #0
 801042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010432:	462a      	mov	r2, r5
 8010434:	f000 fd89 	bl	8010f4a <_realloc_r>
 8010438:	4606      	mov	r6, r0
 801043a:	2800      	cmp	r0, #0
 801043c:	d1e0      	bne.n	8010400 <__ssputs_r+0x5c>
 801043e:	6921      	ldr	r1, [r4, #16]
 8010440:	4650      	mov	r0, sl
 8010442:	f7fe fb79 	bl	800eb38 <_free_r>
 8010446:	230c      	movs	r3, #12
 8010448:	f8ca 3000 	str.w	r3, [sl]
 801044c:	89a3      	ldrh	r3, [r4, #12]
 801044e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010452:	81a3      	strh	r3, [r4, #12]
 8010454:	f04f 30ff 	mov.w	r0, #4294967295
 8010458:	e7e9      	b.n	801042e <__ssputs_r+0x8a>
	...

0801045c <_svfiprintf_r>:
 801045c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010460:	4698      	mov	r8, r3
 8010462:	898b      	ldrh	r3, [r1, #12]
 8010464:	061b      	lsls	r3, r3, #24
 8010466:	b09d      	sub	sp, #116	@ 0x74
 8010468:	4607      	mov	r7, r0
 801046a:	460d      	mov	r5, r1
 801046c:	4614      	mov	r4, r2
 801046e:	d510      	bpl.n	8010492 <_svfiprintf_r+0x36>
 8010470:	690b      	ldr	r3, [r1, #16]
 8010472:	b973      	cbnz	r3, 8010492 <_svfiprintf_r+0x36>
 8010474:	2140      	movs	r1, #64	@ 0x40
 8010476:	f7fe fbd3 	bl	800ec20 <_malloc_r>
 801047a:	6028      	str	r0, [r5, #0]
 801047c:	6128      	str	r0, [r5, #16]
 801047e:	b930      	cbnz	r0, 801048e <_svfiprintf_r+0x32>
 8010480:	230c      	movs	r3, #12
 8010482:	603b      	str	r3, [r7, #0]
 8010484:	f04f 30ff 	mov.w	r0, #4294967295
 8010488:	b01d      	add	sp, #116	@ 0x74
 801048a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801048e:	2340      	movs	r3, #64	@ 0x40
 8010490:	616b      	str	r3, [r5, #20]
 8010492:	2300      	movs	r3, #0
 8010494:	9309      	str	r3, [sp, #36]	@ 0x24
 8010496:	2320      	movs	r3, #32
 8010498:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801049c:	f8cd 800c 	str.w	r8, [sp, #12]
 80104a0:	2330      	movs	r3, #48	@ 0x30
 80104a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010640 <_svfiprintf_r+0x1e4>
 80104a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80104aa:	f04f 0901 	mov.w	r9, #1
 80104ae:	4623      	mov	r3, r4
 80104b0:	469a      	mov	sl, r3
 80104b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104b6:	b10a      	cbz	r2, 80104bc <_svfiprintf_r+0x60>
 80104b8:	2a25      	cmp	r2, #37	@ 0x25
 80104ba:	d1f9      	bne.n	80104b0 <_svfiprintf_r+0x54>
 80104bc:	ebba 0b04 	subs.w	fp, sl, r4
 80104c0:	d00b      	beq.n	80104da <_svfiprintf_r+0x7e>
 80104c2:	465b      	mov	r3, fp
 80104c4:	4622      	mov	r2, r4
 80104c6:	4629      	mov	r1, r5
 80104c8:	4638      	mov	r0, r7
 80104ca:	f7ff ff6b 	bl	80103a4 <__ssputs_r>
 80104ce:	3001      	adds	r0, #1
 80104d0:	f000 80a7 	beq.w	8010622 <_svfiprintf_r+0x1c6>
 80104d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104d6:	445a      	add	r2, fp
 80104d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80104da:	f89a 3000 	ldrb.w	r3, [sl]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	f000 809f 	beq.w	8010622 <_svfiprintf_r+0x1c6>
 80104e4:	2300      	movs	r3, #0
 80104e6:	f04f 32ff 	mov.w	r2, #4294967295
 80104ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104ee:	f10a 0a01 	add.w	sl, sl, #1
 80104f2:	9304      	str	r3, [sp, #16]
 80104f4:	9307      	str	r3, [sp, #28]
 80104f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80104fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80104fc:	4654      	mov	r4, sl
 80104fe:	2205      	movs	r2, #5
 8010500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010504:	484e      	ldr	r0, [pc, #312]	@ (8010640 <_svfiprintf_r+0x1e4>)
 8010506:	f7ef fe8b 	bl	8000220 <memchr>
 801050a:	9a04      	ldr	r2, [sp, #16]
 801050c:	b9d8      	cbnz	r0, 8010546 <_svfiprintf_r+0xea>
 801050e:	06d0      	lsls	r0, r2, #27
 8010510:	bf44      	itt	mi
 8010512:	2320      	movmi	r3, #32
 8010514:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010518:	0711      	lsls	r1, r2, #28
 801051a:	bf44      	itt	mi
 801051c:	232b      	movmi	r3, #43	@ 0x2b
 801051e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010522:	f89a 3000 	ldrb.w	r3, [sl]
 8010526:	2b2a      	cmp	r3, #42	@ 0x2a
 8010528:	d015      	beq.n	8010556 <_svfiprintf_r+0xfa>
 801052a:	9a07      	ldr	r2, [sp, #28]
 801052c:	4654      	mov	r4, sl
 801052e:	2000      	movs	r0, #0
 8010530:	f04f 0c0a 	mov.w	ip, #10
 8010534:	4621      	mov	r1, r4
 8010536:	f811 3b01 	ldrb.w	r3, [r1], #1
 801053a:	3b30      	subs	r3, #48	@ 0x30
 801053c:	2b09      	cmp	r3, #9
 801053e:	d94b      	bls.n	80105d8 <_svfiprintf_r+0x17c>
 8010540:	b1b0      	cbz	r0, 8010570 <_svfiprintf_r+0x114>
 8010542:	9207      	str	r2, [sp, #28]
 8010544:	e014      	b.n	8010570 <_svfiprintf_r+0x114>
 8010546:	eba0 0308 	sub.w	r3, r0, r8
 801054a:	fa09 f303 	lsl.w	r3, r9, r3
 801054e:	4313      	orrs	r3, r2
 8010550:	9304      	str	r3, [sp, #16]
 8010552:	46a2      	mov	sl, r4
 8010554:	e7d2      	b.n	80104fc <_svfiprintf_r+0xa0>
 8010556:	9b03      	ldr	r3, [sp, #12]
 8010558:	1d19      	adds	r1, r3, #4
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	9103      	str	r1, [sp, #12]
 801055e:	2b00      	cmp	r3, #0
 8010560:	bfbb      	ittet	lt
 8010562:	425b      	neglt	r3, r3
 8010564:	f042 0202 	orrlt.w	r2, r2, #2
 8010568:	9307      	strge	r3, [sp, #28]
 801056a:	9307      	strlt	r3, [sp, #28]
 801056c:	bfb8      	it	lt
 801056e:	9204      	strlt	r2, [sp, #16]
 8010570:	7823      	ldrb	r3, [r4, #0]
 8010572:	2b2e      	cmp	r3, #46	@ 0x2e
 8010574:	d10a      	bne.n	801058c <_svfiprintf_r+0x130>
 8010576:	7863      	ldrb	r3, [r4, #1]
 8010578:	2b2a      	cmp	r3, #42	@ 0x2a
 801057a:	d132      	bne.n	80105e2 <_svfiprintf_r+0x186>
 801057c:	9b03      	ldr	r3, [sp, #12]
 801057e:	1d1a      	adds	r2, r3, #4
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	9203      	str	r2, [sp, #12]
 8010584:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010588:	3402      	adds	r4, #2
 801058a:	9305      	str	r3, [sp, #20]
 801058c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010650 <_svfiprintf_r+0x1f4>
 8010590:	7821      	ldrb	r1, [r4, #0]
 8010592:	2203      	movs	r2, #3
 8010594:	4650      	mov	r0, sl
 8010596:	f7ef fe43 	bl	8000220 <memchr>
 801059a:	b138      	cbz	r0, 80105ac <_svfiprintf_r+0x150>
 801059c:	9b04      	ldr	r3, [sp, #16]
 801059e:	eba0 000a 	sub.w	r0, r0, sl
 80105a2:	2240      	movs	r2, #64	@ 0x40
 80105a4:	4082      	lsls	r2, r0
 80105a6:	4313      	orrs	r3, r2
 80105a8:	3401      	adds	r4, #1
 80105aa:	9304      	str	r3, [sp, #16]
 80105ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105b0:	4824      	ldr	r0, [pc, #144]	@ (8010644 <_svfiprintf_r+0x1e8>)
 80105b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80105b6:	2206      	movs	r2, #6
 80105b8:	f7ef fe32 	bl	8000220 <memchr>
 80105bc:	2800      	cmp	r0, #0
 80105be:	d036      	beq.n	801062e <_svfiprintf_r+0x1d2>
 80105c0:	4b21      	ldr	r3, [pc, #132]	@ (8010648 <_svfiprintf_r+0x1ec>)
 80105c2:	bb1b      	cbnz	r3, 801060c <_svfiprintf_r+0x1b0>
 80105c4:	9b03      	ldr	r3, [sp, #12]
 80105c6:	3307      	adds	r3, #7
 80105c8:	f023 0307 	bic.w	r3, r3, #7
 80105cc:	3308      	adds	r3, #8
 80105ce:	9303      	str	r3, [sp, #12]
 80105d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105d2:	4433      	add	r3, r6
 80105d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80105d6:	e76a      	b.n	80104ae <_svfiprintf_r+0x52>
 80105d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80105dc:	460c      	mov	r4, r1
 80105de:	2001      	movs	r0, #1
 80105e0:	e7a8      	b.n	8010534 <_svfiprintf_r+0xd8>
 80105e2:	2300      	movs	r3, #0
 80105e4:	3401      	adds	r4, #1
 80105e6:	9305      	str	r3, [sp, #20]
 80105e8:	4619      	mov	r1, r3
 80105ea:	f04f 0c0a 	mov.w	ip, #10
 80105ee:	4620      	mov	r0, r4
 80105f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105f4:	3a30      	subs	r2, #48	@ 0x30
 80105f6:	2a09      	cmp	r2, #9
 80105f8:	d903      	bls.n	8010602 <_svfiprintf_r+0x1a6>
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d0c6      	beq.n	801058c <_svfiprintf_r+0x130>
 80105fe:	9105      	str	r1, [sp, #20]
 8010600:	e7c4      	b.n	801058c <_svfiprintf_r+0x130>
 8010602:	fb0c 2101 	mla	r1, ip, r1, r2
 8010606:	4604      	mov	r4, r0
 8010608:	2301      	movs	r3, #1
 801060a:	e7f0      	b.n	80105ee <_svfiprintf_r+0x192>
 801060c:	ab03      	add	r3, sp, #12
 801060e:	9300      	str	r3, [sp, #0]
 8010610:	462a      	mov	r2, r5
 8010612:	4b0e      	ldr	r3, [pc, #56]	@ (801064c <_svfiprintf_r+0x1f0>)
 8010614:	a904      	add	r1, sp, #16
 8010616:	4638      	mov	r0, r7
 8010618:	f7fc fcca 	bl	800cfb0 <_printf_float>
 801061c:	1c42      	adds	r2, r0, #1
 801061e:	4606      	mov	r6, r0
 8010620:	d1d6      	bne.n	80105d0 <_svfiprintf_r+0x174>
 8010622:	89ab      	ldrh	r3, [r5, #12]
 8010624:	065b      	lsls	r3, r3, #25
 8010626:	f53f af2d 	bmi.w	8010484 <_svfiprintf_r+0x28>
 801062a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801062c:	e72c      	b.n	8010488 <_svfiprintf_r+0x2c>
 801062e:	ab03      	add	r3, sp, #12
 8010630:	9300      	str	r3, [sp, #0]
 8010632:	462a      	mov	r2, r5
 8010634:	4b05      	ldr	r3, [pc, #20]	@ (801064c <_svfiprintf_r+0x1f0>)
 8010636:	a904      	add	r1, sp, #16
 8010638:	4638      	mov	r0, r7
 801063a:	f7fc ff51 	bl	800d4e0 <_printf_i>
 801063e:	e7ed      	b.n	801061c <_svfiprintf_r+0x1c0>
 8010640:	08011929 	.word	0x08011929
 8010644:	08011933 	.word	0x08011933
 8010648:	0800cfb1 	.word	0x0800cfb1
 801064c:	080103a5 	.word	0x080103a5
 8010650:	0801192f 	.word	0x0801192f

08010654 <__sflush_r>:
 8010654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801065c:	0716      	lsls	r6, r2, #28
 801065e:	4605      	mov	r5, r0
 8010660:	460c      	mov	r4, r1
 8010662:	d454      	bmi.n	801070e <__sflush_r+0xba>
 8010664:	684b      	ldr	r3, [r1, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	dc02      	bgt.n	8010670 <__sflush_r+0x1c>
 801066a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801066c:	2b00      	cmp	r3, #0
 801066e:	dd48      	ble.n	8010702 <__sflush_r+0xae>
 8010670:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010672:	2e00      	cmp	r6, #0
 8010674:	d045      	beq.n	8010702 <__sflush_r+0xae>
 8010676:	2300      	movs	r3, #0
 8010678:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801067c:	682f      	ldr	r7, [r5, #0]
 801067e:	6a21      	ldr	r1, [r4, #32]
 8010680:	602b      	str	r3, [r5, #0]
 8010682:	d030      	beq.n	80106e6 <__sflush_r+0x92>
 8010684:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010686:	89a3      	ldrh	r3, [r4, #12]
 8010688:	0759      	lsls	r1, r3, #29
 801068a:	d505      	bpl.n	8010698 <__sflush_r+0x44>
 801068c:	6863      	ldr	r3, [r4, #4]
 801068e:	1ad2      	subs	r2, r2, r3
 8010690:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010692:	b10b      	cbz	r3, 8010698 <__sflush_r+0x44>
 8010694:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010696:	1ad2      	subs	r2, r2, r3
 8010698:	2300      	movs	r3, #0
 801069a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801069c:	6a21      	ldr	r1, [r4, #32]
 801069e:	4628      	mov	r0, r5
 80106a0:	47b0      	blx	r6
 80106a2:	1c43      	adds	r3, r0, #1
 80106a4:	89a3      	ldrh	r3, [r4, #12]
 80106a6:	d106      	bne.n	80106b6 <__sflush_r+0x62>
 80106a8:	6829      	ldr	r1, [r5, #0]
 80106aa:	291d      	cmp	r1, #29
 80106ac:	d82b      	bhi.n	8010706 <__sflush_r+0xb2>
 80106ae:	4a2a      	ldr	r2, [pc, #168]	@ (8010758 <__sflush_r+0x104>)
 80106b0:	410a      	asrs	r2, r1
 80106b2:	07d6      	lsls	r6, r2, #31
 80106b4:	d427      	bmi.n	8010706 <__sflush_r+0xb2>
 80106b6:	2200      	movs	r2, #0
 80106b8:	6062      	str	r2, [r4, #4]
 80106ba:	04d9      	lsls	r1, r3, #19
 80106bc:	6922      	ldr	r2, [r4, #16]
 80106be:	6022      	str	r2, [r4, #0]
 80106c0:	d504      	bpl.n	80106cc <__sflush_r+0x78>
 80106c2:	1c42      	adds	r2, r0, #1
 80106c4:	d101      	bne.n	80106ca <__sflush_r+0x76>
 80106c6:	682b      	ldr	r3, [r5, #0]
 80106c8:	b903      	cbnz	r3, 80106cc <__sflush_r+0x78>
 80106ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80106cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80106ce:	602f      	str	r7, [r5, #0]
 80106d0:	b1b9      	cbz	r1, 8010702 <__sflush_r+0xae>
 80106d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80106d6:	4299      	cmp	r1, r3
 80106d8:	d002      	beq.n	80106e0 <__sflush_r+0x8c>
 80106da:	4628      	mov	r0, r5
 80106dc:	f7fe fa2c 	bl	800eb38 <_free_r>
 80106e0:	2300      	movs	r3, #0
 80106e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80106e4:	e00d      	b.n	8010702 <__sflush_r+0xae>
 80106e6:	2301      	movs	r3, #1
 80106e8:	4628      	mov	r0, r5
 80106ea:	47b0      	blx	r6
 80106ec:	4602      	mov	r2, r0
 80106ee:	1c50      	adds	r0, r2, #1
 80106f0:	d1c9      	bne.n	8010686 <__sflush_r+0x32>
 80106f2:	682b      	ldr	r3, [r5, #0]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d0c6      	beq.n	8010686 <__sflush_r+0x32>
 80106f8:	2b1d      	cmp	r3, #29
 80106fa:	d001      	beq.n	8010700 <__sflush_r+0xac>
 80106fc:	2b16      	cmp	r3, #22
 80106fe:	d11e      	bne.n	801073e <__sflush_r+0xea>
 8010700:	602f      	str	r7, [r5, #0]
 8010702:	2000      	movs	r0, #0
 8010704:	e022      	b.n	801074c <__sflush_r+0xf8>
 8010706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801070a:	b21b      	sxth	r3, r3
 801070c:	e01b      	b.n	8010746 <__sflush_r+0xf2>
 801070e:	690f      	ldr	r7, [r1, #16]
 8010710:	2f00      	cmp	r7, #0
 8010712:	d0f6      	beq.n	8010702 <__sflush_r+0xae>
 8010714:	0793      	lsls	r3, r2, #30
 8010716:	680e      	ldr	r6, [r1, #0]
 8010718:	bf08      	it	eq
 801071a:	694b      	ldreq	r3, [r1, #20]
 801071c:	600f      	str	r7, [r1, #0]
 801071e:	bf18      	it	ne
 8010720:	2300      	movne	r3, #0
 8010722:	eba6 0807 	sub.w	r8, r6, r7
 8010726:	608b      	str	r3, [r1, #8]
 8010728:	f1b8 0f00 	cmp.w	r8, #0
 801072c:	dde9      	ble.n	8010702 <__sflush_r+0xae>
 801072e:	6a21      	ldr	r1, [r4, #32]
 8010730:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010732:	4643      	mov	r3, r8
 8010734:	463a      	mov	r2, r7
 8010736:	4628      	mov	r0, r5
 8010738:	47b0      	blx	r6
 801073a:	2800      	cmp	r0, #0
 801073c:	dc08      	bgt.n	8010750 <__sflush_r+0xfc>
 801073e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010746:	81a3      	strh	r3, [r4, #12]
 8010748:	f04f 30ff 	mov.w	r0, #4294967295
 801074c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010750:	4407      	add	r7, r0
 8010752:	eba8 0800 	sub.w	r8, r8, r0
 8010756:	e7e7      	b.n	8010728 <__sflush_r+0xd4>
 8010758:	dfbffffe 	.word	0xdfbffffe

0801075c <_fflush_r>:
 801075c:	b538      	push	{r3, r4, r5, lr}
 801075e:	690b      	ldr	r3, [r1, #16]
 8010760:	4605      	mov	r5, r0
 8010762:	460c      	mov	r4, r1
 8010764:	b913      	cbnz	r3, 801076c <_fflush_r+0x10>
 8010766:	2500      	movs	r5, #0
 8010768:	4628      	mov	r0, r5
 801076a:	bd38      	pop	{r3, r4, r5, pc}
 801076c:	b118      	cbz	r0, 8010776 <_fflush_r+0x1a>
 801076e:	6a03      	ldr	r3, [r0, #32]
 8010770:	b90b      	cbnz	r3, 8010776 <_fflush_r+0x1a>
 8010772:	f7fd fa75 	bl	800dc60 <__sinit>
 8010776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d0f3      	beq.n	8010766 <_fflush_r+0xa>
 801077e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010780:	07d0      	lsls	r0, r2, #31
 8010782:	d404      	bmi.n	801078e <_fflush_r+0x32>
 8010784:	0599      	lsls	r1, r3, #22
 8010786:	d402      	bmi.n	801078e <_fflush_r+0x32>
 8010788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801078a:	f7fd fb80 	bl	800de8e <__retarget_lock_acquire_recursive>
 801078e:	4628      	mov	r0, r5
 8010790:	4621      	mov	r1, r4
 8010792:	f7ff ff5f 	bl	8010654 <__sflush_r>
 8010796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010798:	07da      	lsls	r2, r3, #31
 801079a:	4605      	mov	r5, r0
 801079c:	d4e4      	bmi.n	8010768 <_fflush_r+0xc>
 801079e:	89a3      	ldrh	r3, [r4, #12]
 80107a0:	059b      	lsls	r3, r3, #22
 80107a2:	d4e1      	bmi.n	8010768 <_fflush_r+0xc>
 80107a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80107a6:	f7fd fb73 	bl	800de90 <__retarget_lock_release_recursive>
 80107aa:	e7dd      	b.n	8010768 <_fflush_r+0xc>

080107ac <memmove>:
 80107ac:	4288      	cmp	r0, r1
 80107ae:	b510      	push	{r4, lr}
 80107b0:	eb01 0402 	add.w	r4, r1, r2
 80107b4:	d902      	bls.n	80107bc <memmove+0x10>
 80107b6:	4284      	cmp	r4, r0
 80107b8:	4623      	mov	r3, r4
 80107ba:	d807      	bhi.n	80107cc <memmove+0x20>
 80107bc:	1e43      	subs	r3, r0, #1
 80107be:	42a1      	cmp	r1, r4
 80107c0:	d008      	beq.n	80107d4 <memmove+0x28>
 80107c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80107ca:	e7f8      	b.n	80107be <memmove+0x12>
 80107cc:	4402      	add	r2, r0
 80107ce:	4601      	mov	r1, r0
 80107d0:	428a      	cmp	r2, r1
 80107d2:	d100      	bne.n	80107d6 <memmove+0x2a>
 80107d4:	bd10      	pop	{r4, pc}
 80107d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80107da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80107de:	e7f7      	b.n	80107d0 <memmove+0x24>

080107e0 <strncmp>:
 80107e0:	b510      	push	{r4, lr}
 80107e2:	b16a      	cbz	r2, 8010800 <strncmp+0x20>
 80107e4:	3901      	subs	r1, #1
 80107e6:	1884      	adds	r4, r0, r2
 80107e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80107f0:	429a      	cmp	r2, r3
 80107f2:	d103      	bne.n	80107fc <strncmp+0x1c>
 80107f4:	42a0      	cmp	r0, r4
 80107f6:	d001      	beq.n	80107fc <strncmp+0x1c>
 80107f8:	2a00      	cmp	r2, #0
 80107fa:	d1f5      	bne.n	80107e8 <strncmp+0x8>
 80107fc:	1ad0      	subs	r0, r2, r3
 80107fe:	bd10      	pop	{r4, pc}
 8010800:	4610      	mov	r0, r2
 8010802:	e7fc      	b.n	80107fe <strncmp+0x1e>

08010804 <_sbrk_r>:
 8010804:	b538      	push	{r3, r4, r5, lr}
 8010806:	4d06      	ldr	r5, [pc, #24]	@ (8010820 <_sbrk_r+0x1c>)
 8010808:	2300      	movs	r3, #0
 801080a:	4604      	mov	r4, r0
 801080c:	4608      	mov	r0, r1
 801080e:	602b      	str	r3, [r5, #0]
 8010810:	f7f1 fca2 	bl	8002158 <_sbrk>
 8010814:	1c43      	adds	r3, r0, #1
 8010816:	d102      	bne.n	801081e <_sbrk_r+0x1a>
 8010818:	682b      	ldr	r3, [r5, #0]
 801081a:	b103      	cbz	r3, 801081e <_sbrk_r+0x1a>
 801081c:	6023      	str	r3, [r4, #0]
 801081e:	bd38      	pop	{r3, r4, r5, pc}
 8010820:	20002040 	.word	0x20002040

08010824 <memcpy>:
 8010824:	440a      	add	r2, r1
 8010826:	4291      	cmp	r1, r2
 8010828:	f100 33ff 	add.w	r3, r0, #4294967295
 801082c:	d100      	bne.n	8010830 <memcpy+0xc>
 801082e:	4770      	bx	lr
 8010830:	b510      	push	{r4, lr}
 8010832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010836:	f803 4f01 	strb.w	r4, [r3, #1]!
 801083a:	4291      	cmp	r1, r2
 801083c:	d1f9      	bne.n	8010832 <memcpy+0xe>
 801083e:	bd10      	pop	{r4, pc}

08010840 <nan>:
 8010840:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010848 <nan+0x8>
 8010844:	4770      	bx	lr
 8010846:	bf00      	nop
 8010848:	00000000 	.word	0x00000000
 801084c:	7ff80000 	.word	0x7ff80000

08010850 <__assert_func>:
 8010850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010852:	4614      	mov	r4, r2
 8010854:	461a      	mov	r2, r3
 8010856:	4b09      	ldr	r3, [pc, #36]	@ (801087c <__assert_func+0x2c>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	4605      	mov	r5, r0
 801085c:	68d8      	ldr	r0, [r3, #12]
 801085e:	b954      	cbnz	r4, 8010876 <__assert_func+0x26>
 8010860:	4b07      	ldr	r3, [pc, #28]	@ (8010880 <__assert_func+0x30>)
 8010862:	461c      	mov	r4, r3
 8010864:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010868:	9100      	str	r1, [sp, #0]
 801086a:	462b      	mov	r3, r5
 801086c:	4905      	ldr	r1, [pc, #20]	@ (8010884 <__assert_func+0x34>)
 801086e:	f000 fba7 	bl	8010fc0 <fiprintf>
 8010872:	f000 fbb7 	bl	8010fe4 <abort>
 8010876:	4b04      	ldr	r3, [pc, #16]	@ (8010888 <__assert_func+0x38>)
 8010878:	e7f4      	b.n	8010864 <__assert_func+0x14>
 801087a:	bf00      	nop
 801087c:	20000190 	.word	0x20000190
 8010880:	0801197d 	.word	0x0801197d
 8010884:	0801194f 	.word	0x0801194f
 8010888:	08011942 	.word	0x08011942

0801088c <_calloc_r>:
 801088c:	b570      	push	{r4, r5, r6, lr}
 801088e:	fba1 5402 	umull	r5, r4, r1, r2
 8010892:	b93c      	cbnz	r4, 80108a4 <_calloc_r+0x18>
 8010894:	4629      	mov	r1, r5
 8010896:	f7fe f9c3 	bl	800ec20 <_malloc_r>
 801089a:	4606      	mov	r6, r0
 801089c:	b928      	cbnz	r0, 80108aa <_calloc_r+0x1e>
 801089e:	2600      	movs	r6, #0
 80108a0:	4630      	mov	r0, r6
 80108a2:	bd70      	pop	{r4, r5, r6, pc}
 80108a4:	220c      	movs	r2, #12
 80108a6:	6002      	str	r2, [r0, #0]
 80108a8:	e7f9      	b.n	801089e <_calloc_r+0x12>
 80108aa:	462a      	mov	r2, r5
 80108ac:	4621      	mov	r1, r4
 80108ae:	f7fd fa70 	bl	800dd92 <memset>
 80108b2:	e7f5      	b.n	80108a0 <_calloc_r+0x14>

080108b4 <rshift>:
 80108b4:	6903      	ldr	r3, [r0, #16]
 80108b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80108ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108be:	ea4f 1261 	mov.w	r2, r1, asr #5
 80108c2:	f100 0414 	add.w	r4, r0, #20
 80108c6:	dd45      	ble.n	8010954 <rshift+0xa0>
 80108c8:	f011 011f 	ands.w	r1, r1, #31
 80108cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80108d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80108d4:	d10c      	bne.n	80108f0 <rshift+0x3c>
 80108d6:	f100 0710 	add.w	r7, r0, #16
 80108da:	4629      	mov	r1, r5
 80108dc:	42b1      	cmp	r1, r6
 80108de:	d334      	bcc.n	801094a <rshift+0x96>
 80108e0:	1a9b      	subs	r3, r3, r2
 80108e2:	009b      	lsls	r3, r3, #2
 80108e4:	1eea      	subs	r2, r5, #3
 80108e6:	4296      	cmp	r6, r2
 80108e8:	bf38      	it	cc
 80108ea:	2300      	movcc	r3, #0
 80108ec:	4423      	add	r3, r4
 80108ee:	e015      	b.n	801091c <rshift+0x68>
 80108f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80108f4:	f1c1 0820 	rsb	r8, r1, #32
 80108f8:	40cf      	lsrs	r7, r1
 80108fa:	f105 0e04 	add.w	lr, r5, #4
 80108fe:	46a1      	mov	r9, r4
 8010900:	4576      	cmp	r6, lr
 8010902:	46f4      	mov	ip, lr
 8010904:	d815      	bhi.n	8010932 <rshift+0x7e>
 8010906:	1a9a      	subs	r2, r3, r2
 8010908:	0092      	lsls	r2, r2, #2
 801090a:	3a04      	subs	r2, #4
 801090c:	3501      	adds	r5, #1
 801090e:	42ae      	cmp	r6, r5
 8010910:	bf38      	it	cc
 8010912:	2200      	movcc	r2, #0
 8010914:	18a3      	adds	r3, r4, r2
 8010916:	50a7      	str	r7, [r4, r2]
 8010918:	b107      	cbz	r7, 801091c <rshift+0x68>
 801091a:	3304      	adds	r3, #4
 801091c:	1b1a      	subs	r2, r3, r4
 801091e:	42a3      	cmp	r3, r4
 8010920:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010924:	bf08      	it	eq
 8010926:	2300      	moveq	r3, #0
 8010928:	6102      	str	r2, [r0, #16]
 801092a:	bf08      	it	eq
 801092c:	6143      	streq	r3, [r0, #20]
 801092e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010932:	f8dc c000 	ldr.w	ip, [ip]
 8010936:	fa0c fc08 	lsl.w	ip, ip, r8
 801093a:	ea4c 0707 	orr.w	r7, ip, r7
 801093e:	f849 7b04 	str.w	r7, [r9], #4
 8010942:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010946:	40cf      	lsrs	r7, r1
 8010948:	e7da      	b.n	8010900 <rshift+0x4c>
 801094a:	f851 cb04 	ldr.w	ip, [r1], #4
 801094e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010952:	e7c3      	b.n	80108dc <rshift+0x28>
 8010954:	4623      	mov	r3, r4
 8010956:	e7e1      	b.n	801091c <rshift+0x68>

08010958 <__hexdig_fun>:
 8010958:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801095c:	2b09      	cmp	r3, #9
 801095e:	d802      	bhi.n	8010966 <__hexdig_fun+0xe>
 8010960:	3820      	subs	r0, #32
 8010962:	b2c0      	uxtb	r0, r0
 8010964:	4770      	bx	lr
 8010966:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801096a:	2b05      	cmp	r3, #5
 801096c:	d801      	bhi.n	8010972 <__hexdig_fun+0x1a>
 801096e:	3847      	subs	r0, #71	@ 0x47
 8010970:	e7f7      	b.n	8010962 <__hexdig_fun+0xa>
 8010972:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010976:	2b05      	cmp	r3, #5
 8010978:	d801      	bhi.n	801097e <__hexdig_fun+0x26>
 801097a:	3827      	subs	r0, #39	@ 0x27
 801097c:	e7f1      	b.n	8010962 <__hexdig_fun+0xa>
 801097e:	2000      	movs	r0, #0
 8010980:	4770      	bx	lr
	...

08010984 <__gethex>:
 8010984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010988:	b085      	sub	sp, #20
 801098a:	468a      	mov	sl, r1
 801098c:	9302      	str	r3, [sp, #8]
 801098e:	680b      	ldr	r3, [r1, #0]
 8010990:	9001      	str	r0, [sp, #4]
 8010992:	4690      	mov	r8, r2
 8010994:	1c9c      	adds	r4, r3, #2
 8010996:	46a1      	mov	r9, r4
 8010998:	f814 0b01 	ldrb.w	r0, [r4], #1
 801099c:	2830      	cmp	r0, #48	@ 0x30
 801099e:	d0fa      	beq.n	8010996 <__gethex+0x12>
 80109a0:	eba9 0303 	sub.w	r3, r9, r3
 80109a4:	f1a3 0b02 	sub.w	fp, r3, #2
 80109a8:	f7ff ffd6 	bl	8010958 <__hexdig_fun>
 80109ac:	4605      	mov	r5, r0
 80109ae:	2800      	cmp	r0, #0
 80109b0:	d168      	bne.n	8010a84 <__gethex+0x100>
 80109b2:	49a0      	ldr	r1, [pc, #640]	@ (8010c34 <__gethex+0x2b0>)
 80109b4:	2201      	movs	r2, #1
 80109b6:	4648      	mov	r0, r9
 80109b8:	f7ff ff12 	bl	80107e0 <strncmp>
 80109bc:	4607      	mov	r7, r0
 80109be:	2800      	cmp	r0, #0
 80109c0:	d167      	bne.n	8010a92 <__gethex+0x10e>
 80109c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80109c6:	4626      	mov	r6, r4
 80109c8:	f7ff ffc6 	bl	8010958 <__hexdig_fun>
 80109cc:	2800      	cmp	r0, #0
 80109ce:	d062      	beq.n	8010a96 <__gethex+0x112>
 80109d0:	4623      	mov	r3, r4
 80109d2:	7818      	ldrb	r0, [r3, #0]
 80109d4:	2830      	cmp	r0, #48	@ 0x30
 80109d6:	4699      	mov	r9, r3
 80109d8:	f103 0301 	add.w	r3, r3, #1
 80109dc:	d0f9      	beq.n	80109d2 <__gethex+0x4e>
 80109de:	f7ff ffbb 	bl	8010958 <__hexdig_fun>
 80109e2:	fab0 f580 	clz	r5, r0
 80109e6:	096d      	lsrs	r5, r5, #5
 80109e8:	f04f 0b01 	mov.w	fp, #1
 80109ec:	464a      	mov	r2, r9
 80109ee:	4616      	mov	r6, r2
 80109f0:	3201      	adds	r2, #1
 80109f2:	7830      	ldrb	r0, [r6, #0]
 80109f4:	f7ff ffb0 	bl	8010958 <__hexdig_fun>
 80109f8:	2800      	cmp	r0, #0
 80109fa:	d1f8      	bne.n	80109ee <__gethex+0x6a>
 80109fc:	498d      	ldr	r1, [pc, #564]	@ (8010c34 <__gethex+0x2b0>)
 80109fe:	2201      	movs	r2, #1
 8010a00:	4630      	mov	r0, r6
 8010a02:	f7ff feed 	bl	80107e0 <strncmp>
 8010a06:	2800      	cmp	r0, #0
 8010a08:	d13f      	bne.n	8010a8a <__gethex+0x106>
 8010a0a:	b944      	cbnz	r4, 8010a1e <__gethex+0x9a>
 8010a0c:	1c74      	adds	r4, r6, #1
 8010a0e:	4622      	mov	r2, r4
 8010a10:	4616      	mov	r6, r2
 8010a12:	3201      	adds	r2, #1
 8010a14:	7830      	ldrb	r0, [r6, #0]
 8010a16:	f7ff ff9f 	bl	8010958 <__hexdig_fun>
 8010a1a:	2800      	cmp	r0, #0
 8010a1c:	d1f8      	bne.n	8010a10 <__gethex+0x8c>
 8010a1e:	1ba4      	subs	r4, r4, r6
 8010a20:	00a7      	lsls	r7, r4, #2
 8010a22:	7833      	ldrb	r3, [r6, #0]
 8010a24:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010a28:	2b50      	cmp	r3, #80	@ 0x50
 8010a2a:	d13e      	bne.n	8010aaa <__gethex+0x126>
 8010a2c:	7873      	ldrb	r3, [r6, #1]
 8010a2e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010a30:	d033      	beq.n	8010a9a <__gethex+0x116>
 8010a32:	2b2d      	cmp	r3, #45	@ 0x2d
 8010a34:	d034      	beq.n	8010aa0 <__gethex+0x11c>
 8010a36:	1c71      	adds	r1, r6, #1
 8010a38:	2400      	movs	r4, #0
 8010a3a:	7808      	ldrb	r0, [r1, #0]
 8010a3c:	f7ff ff8c 	bl	8010958 <__hexdig_fun>
 8010a40:	1e43      	subs	r3, r0, #1
 8010a42:	b2db      	uxtb	r3, r3
 8010a44:	2b18      	cmp	r3, #24
 8010a46:	d830      	bhi.n	8010aaa <__gethex+0x126>
 8010a48:	f1a0 0210 	sub.w	r2, r0, #16
 8010a4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010a50:	f7ff ff82 	bl	8010958 <__hexdig_fun>
 8010a54:	f100 3cff 	add.w	ip, r0, #4294967295
 8010a58:	fa5f fc8c 	uxtb.w	ip, ip
 8010a5c:	f1bc 0f18 	cmp.w	ip, #24
 8010a60:	f04f 030a 	mov.w	r3, #10
 8010a64:	d91e      	bls.n	8010aa4 <__gethex+0x120>
 8010a66:	b104      	cbz	r4, 8010a6a <__gethex+0xe6>
 8010a68:	4252      	negs	r2, r2
 8010a6a:	4417      	add	r7, r2
 8010a6c:	f8ca 1000 	str.w	r1, [sl]
 8010a70:	b1ed      	cbz	r5, 8010aae <__gethex+0x12a>
 8010a72:	f1bb 0f00 	cmp.w	fp, #0
 8010a76:	bf0c      	ite	eq
 8010a78:	2506      	moveq	r5, #6
 8010a7a:	2500      	movne	r5, #0
 8010a7c:	4628      	mov	r0, r5
 8010a7e:	b005      	add	sp, #20
 8010a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a84:	2500      	movs	r5, #0
 8010a86:	462c      	mov	r4, r5
 8010a88:	e7b0      	b.n	80109ec <__gethex+0x68>
 8010a8a:	2c00      	cmp	r4, #0
 8010a8c:	d1c7      	bne.n	8010a1e <__gethex+0x9a>
 8010a8e:	4627      	mov	r7, r4
 8010a90:	e7c7      	b.n	8010a22 <__gethex+0x9e>
 8010a92:	464e      	mov	r6, r9
 8010a94:	462f      	mov	r7, r5
 8010a96:	2501      	movs	r5, #1
 8010a98:	e7c3      	b.n	8010a22 <__gethex+0x9e>
 8010a9a:	2400      	movs	r4, #0
 8010a9c:	1cb1      	adds	r1, r6, #2
 8010a9e:	e7cc      	b.n	8010a3a <__gethex+0xb6>
 8010aa0:	2401      	movs	r4, #1
 8010aa2:	e7fb      	b.n	8010a9c <__gethex+0x118>
 8010aa4:	fb03 0002 	mla	r0, r3, r2, r0
 8010aa8:	e7ce      	b.n	8010a48 <__gethex+0xc4>
 8010aaa:	4631      	mov	r1, r6
 8010aac:	e7de      	b.n	8010a6c <__gethex+0xe8>
 8010aae:	eba6 0309 	sub.w	r3, r6, r9
 8010ab2:	3b01      	subs	r3, #1
 8010ab4:	4629      	mov	r1, r5
 8010ab6:	2b07      	cmp	r3, #7
 8010ab8:	dc0a      	bgt.n	8010ad0 <__gethex+0x14c>
 8010aba:	9801      	ldr	r0, [sp, #4]
 8010abc:	f7fe f93c 	bl	800ed38 <_Balloc>
 8010ac0:	4604      	mov	r4, r0
 8010ac2:	b940      	cbnz	r0, 8010ad6 <__gethex+0x152>
 8010ac4:	4b5c      	ldr	r3, [pc, #368]	@ (8010c38 <__gethex+0x2b4>)
 8010ac6:	4602      	mov	r2, r0
 8010ac8:	21e4      	movs	r1, #228	@ 0xe4
 8010aca:	485c      	ldr	r0, [pc, #368]	@ (8010c3c <__gethex+0x2b8>)
 8010acc:	f7ff fec0 	bl	8010850 <__assert_func>
 8010ad0:	3101      	adds	r1, #1
 8010ad2:	105b      	asrs	r3, r3, #1
 8010ad4:	e7ef      	b.n	8010ab6 <__gethex+0x132>
 8010ad6:	f100 0a14 	add.w	sl, r0, #20
 8010ada:	2300      	movs	r3, #0
 8010adc:	4655      	mov	r5, sl
 8010ade:	469b      	mov	fp, r3
 8010ae0:	45b1      	cmp	r9, r6
 8010ae2:	d337      	bcc.n	8010b54 <__gethex+0x1d0>
 8010ae4:	f845 bb04 	str.w	fp, [r5], #4
 8010ae8:	eba5 050a 	sub.w	r5, r5, sl
 8010aec:	10ad      	asrs	r5, r5, #2
 8010aee:	6125      	str	r5, [r4, #16]
 8010af0:	4658      	mov	r0, fp
 8010af2:	f7fe fa13 	bl	800ef1c <__hi0bits>
 8010af6:	016d      	lsls	r5, r5, #5
 8010af8:	f8d8 6000 	ldr.w	r6, [r8]
 8010afc:	1a2d      	subs	r5, r5, r0
 8010afe:	42b5      	cmp	r5, r6
 8010b00:	dd54      	ble.n	8010bac <__gethex+0x228>
 8010b02:	1bad      	subs	r5, r5, r6
 8010b04:	4629      	mov	r1, r5
 8010b06:	4620      	mov	r0, r4
 8010b08:	f7fe fda7 	bl	800f65a <__any_on>
 8010b0c:	4681      	mov	r9, r0
 8010b0e:	b178      	cbz	r0, 8010b30 <__gethex+0x1ac>
 8010b10:	1e6b      	subs	r3, r5, #1
 8010b12:	1159      	asrs	r1, r3, #5
 8010b14:	f003 021f 	and.w	r2, r3, #31
 8010b18:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010b1c:	f04f 0901 	mov.w	r9, #1
 8010b20:	fa09 f202 	lsl.w	r2, r9, r2
 8010b24:	420a      	tst	r2, r1
 8010b26:	d003      	beq.n	8010b30 <__gethex+0x1ac>
 8010b28:	454b      	cmp	r3, r9
 8010b2a:	dc36      	bgt.n	8010b9a <__gethex+0x216>
 8010b2c:	f04f 0902 	mov.w	r9, #2
 8010b30:	4629      	mov	r1, r5
 8010b32:	4620      	mov	r0, r4
 8010b34:	f7ff febe 	bl	80108b4 <rshift>
 8010b38:	442f      	add	r7, r5
 8010b3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010b3e:	42bb      	cmp	r3, r7
 8010b40:	da42      	bge.n	8010bc8 <__gethex+0x244>
 8010b42:	9801      	ldr	r0, [sp, #4]
 8010b44:	4621      	mov	r1, r4
 8010b46:	f7fe f937 	bl	800edb8 <_Bfree>
 8010b4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	6013      	str	r3, [r2, #0]
 8010b50:	25a3      	movs	r5, #163	@ 0xa3
 8010b52:	e793      	b.n	8010a7c <__gethex+0xf8>
 8010b54:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010b58:	2a2e      	cmp	r2, #46	@ 0x2e
 8010b5a:	d012      	beq.n	8010b82 <__gethex+0x1fe>
 8010b5c:	2b20      	cmp	r3, #32
 8010b5e:	d104      	bne.n	8010b6a <__gethex+0x1e6>
 8010b60:	f845 bb04 	str.w	fp, [r5], #4
 8010b64:	f04f 0b00 	mov.w	fp, #0
 8010b68:	465b      	mov	r3, fp
 8010b6a:	7830      	ldrb	r0, [r6, #0]
 8010b6c:	9303      	str	r3, [sp, #12]
 8010b6e:	f7ff fef3 	bl	8010958 <__hexdig_fun>
 8010b72:	9b03      	ldr	r3, [sp, #12]
 8010b74:	f000 000f 	and.w	r0, r0, #15
 8010b78:	4098      	lsls	r0, r3
 8010b7a:	ea4b 0b00 	orr.w	fp, fp, r0
 8010b7e:	3304      	adds	r3, #4
 8010b80:	e7ae      	b.n	8010ae0 <__gethex+0x15c>
 8010b82:	45b1      	cmp	r9, r6
 8010b84:	d8ea      	bhi.n	8010b5c <__gethex+0x1d8>
 8010b86:	492b      	ldr	r1, [pc, #172]	@ (8010c34 <__gethex+0x2b0>)
 8010b88:	9303      	str	r3, [sp, #12]
 8010b8a:	2201      	movs	r2, #1
 8010b8c:	4630      	mov	r0, r6
 8010b8e:	f7ff fe27 	bl	80107e0 <strncmp>
 8010b92:	9b03      	ldr	r3, [sp, #12]
 8010b94:	2800      	cmp	r0, #0
 8010b96:	d1e1      	bne.n	8010b5c <__gethex+0x1d8>
 8010b98:	e7a2      	b.n	8010ae0 <__gethex+0x15c>
 8010b9a:	1ea9      	subs	r1, r5, #2
 8010b9c:	4620      	mov	r0, r4
 8010b9e:	f7fe fd5c 	bl	800f65a <__any_on>
 8010ba2:	2800      	cmp	r0, #0
 8010ba4:	d0c2      	beq.n	8010b2c <__gethex+0x1a8>
 8010ba6:	f04f 0903 	mov.w	r9, #3
 8010baa:	e7c1      	b.n	8010b30 <__gethex+0x1ac>
 8010bac:	da09      	bge.n	8010bc2 <__gethex+0x23e>
 8010bae:	1b75      	subs	r5, r6, r5
 8010bb0:	4621      	mov	r1, r4
 8010bb2:	9801      	ldr	r0, [sp, #4]
 8010bb4:	462a      	mov	r2, r5
 8010bb6:	f7fe fb17 	bl	800f1e8 <__lshift>
 8010bba:	1b7f      	subs	r7, r7, r5
 8010bbc:	4604      	mov	r4, r0
 8010bbe:	f100 0a14 	add.w	sl, r0, #20
 8010bc2:	f04f 0900 	mov.w	r9, #0
 8010bc6:	e7b8      	b.n	8010b3a <__gethex+0x1b6>
 8010bc8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010bcc:	42bd      	cmp	r5, r7
 8010bce:	dd6f      	ble.n	8010cb0 <__gethex+0x32c>
 8010bd0:	1bed      	subs	r5, r5, r7
 8010bd2:	42ae      	cmp	r6, r5
 8010bd4:	dc34      	bgt.n	8010c40 <__gethex+0x2bc>
 8010bd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010bda:	2b02      	cmp	r3, #2
 8010bdc:	d022      	beq.n	8010c24 <__gethex+0x2a0>
 8010bde:	2b03      	cmp	r3, #3
 8010be0:	d024      	beq.n	8010c2c <__gethex+0x2a8>
 8010be2:	2b01      	cmp	r3, #1
 8010be4:	d115      	bne.n	8010c12 <__gethex+0x28e>
 8010be6:	42ae      	cmp	r6, r5
 8010be8:	d113      	bne.n	8010c12 <__gethex+0x28e>
 8010bea:	2e01      	cmp	r6, #1
 8010bec:	d10b      	bne.n	8010c06 <__gethex+0x282>
 8010bee:	9a02      	ldr	r2, [sp, #8]
 8010bf0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010bf4:	6013      	str	r3, [r2, #0]
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	6123      	str	r3, [r4, #16]
 8010bfa:	f8ca 3000 	str.w	r3, [sl]
 8010bfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c00:	2562      	movs	r5, #98	@ 0x62
 8010c02:	601c      	str	r4, [r3, #0]
 8010c04:	e73a      	b.n	8010a7c <__gethex+0xf8>
 8010c06:	1e71      	subs	r1, r6, #1
 8010c08:	4620      	mov	r0, r4
 8010c0a:	f7fe fd26 	bl	800f65a <__any_on>
 8010c0e:	2800      	cmp	r0, #0
 8010c10:	d1ed      	bne.n	8010bee <__gethex+0x26a>
 8010c12:	9801      	ldr	r0, [sp, #4]
 8010c14:	4621      	mov	r1, r4
 8010c16:	f7fe f8cf 	bl	800edb8 <_Bfree>
 8010c1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	6013      	str	r3, [r2, #0]
 8010c20:	2550      	movs	r5, #80	@ 0x50
 8010c22:	e72b      	b.n	8010a7c <__gethex+0xf8>
 8010c24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d1f3      	bne.n	8010c12 <__gethex+0x28e>
 8010c2a:	e7e0      	b.n	8010bee <__gethex+0x26a>
 8010c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d1dd      	bne.n	8010bee <__gethex+0x26a>
 8010c32:	e7ee      	b.n	8010c12 <__gethex+0x28e>
 8010c34:	080117d0 	.word	0x080117d0
 8010c38:	08011665 	.word	0x08011665
 8010c3c:	0801197e 	.word	0x0801197e
 8010c40:	1e6f      	subs	r7, r5, #1
 8010c42:	f1b9 0f00 	cmp.w	r9, #0
 8010c46:	d130      	bne.n	8010caa <__gethex+0x326>
 8010c48:	b127      	cbz	r7, 8010c54 <__gethex+0x2d0>
 8010c4a:	4639      	mov	r1, r7
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	f7fe fd04 	bl	800f65a <__any_on>
 8010c52:	4681      	mov	r9, r0
 8010c54:	117a      	asrs	r2, r7, #5
 8010c56:	2301      	movs	r3, #1
 8010c58:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010c5c:	f007 071f 	and.w	r7, r7, #31
 8010c60:	40bb      	lsls	r3, r7
 8010c62:	4213      	tst	r3, r2
 8010c64:	4629      	mov	r1, r5
 8010c66:	4620      	mov	r0, r4
 8010c68:	bf18      	it	ne
 8010c6a:	f049 0902 	orrne.w	r9, r9, #2
 8010c6e:	f7ff fe21 	bl	80108b4 <rshift>
 8010c72:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010c76:	1b76      	subs	r6, r6, r5
 8010c78:	2502      	movs	r5, #2
 8010c7a:	f1b9 0f00 	cmp.w	r9, #0
 8010c7e:	d047      	beq.n	8010d10 <__gethex+0x38c>
 8010c80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010c84:	2b02      	cmp	r3, #2
 8010c86:	d015      	beq.n	8010cb4 <__gethex+0x330>
 8010c88:	2b03      	cmp	r3, #3
 8010c8a:	d017      	beq.n	8010cbc <__gethex+0x338>
 8010c8c:	2b01      	cmp	r3, #1
 8010c8e:	d109      	bne.n	8010ca4 <__gethex+0x320>
 8010c90:	f019 0f02 	tst.w	r9, #2
 8010c94:	d006      	beq.n	8010ca4 <__gethex+0x320>
 8010c96:	f8da 3000 	ldr.w	r3, [sl]
 8010c9a:	ea49 0903 	orr.w	r9, r9, r3
 8010c9e:	f019 0f01 	tst.w	r9, #1
 8010ca2:	d10e      	bne.n	8010cc2 <__gethex+0x33e>
 8010ca4:	f045 0510 	orr.w	r5, r5, #16
 8010ca8:	e032      	b.n	8010d10 <__gethex+0x38c>
 8010caa:	f04f 0901 	mov.w	r9, #1
 8010cae:	e7d1      	b.n	8010c54 <__gethex+0x2d0>
 8010cb0:	2501      	movs	r5, #1
 8010cb2:	e7e2      	b.n	8010c7a <__gethex+0x2f6>
 8010cb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cb6:	f1c3 0301 	rsb	r3, r3, #1
 8010cba:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010cbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d0f0      	beq.n	8010ca4 <__gethex+0x320>
 8010cc2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010cc6:	f104 0314 	add.w	r3, r4, #20
 8010cca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010cce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010cd2:	f04f 0c00 	mov.w	ip, #0
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cdc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010ce0:	d01b      	beq.n	8010d1a <__gethex+0x396>
 8010ce2:	3201      	adds	r2, #1
 8010ce4:	6002      	str	r2, [r0, #0]
 8010ce6:	2d02      	cmp	r5, #2
 8010ce8:	f104 0314 	add.w	r3, r4, #20
 8010cec:	d13c      	bne.n	8010d68 <__gethex+0x3e4>
 8010cee:	f8d8 2000 	ldr.w	r2, [r8]
 8010cf2:	3a01      	subs	r2, #1
 8010cf4:	42b2      	cmp	r2, r6
 8010cf6:	d109      	bne.n	8010d0c <__gethex+0x388>
 8010cf8:	1171      	asrs	r1, r6, #5
 8010cfa:	2201      	movs	r2, #1
 8010cfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d00:	f006 061f 	and.w	r6, r6, #31
 8010d04:	fa02 f606 	lsl.w	r6, r2, r6
 8010d08:	421e      	tst	r6, r3
 8010d0a:	d13a      	bne.n	8010d82 <__gethex+0x3fe>
 8010d0c:	f045 0520 	orr.w	r5, r5, #32
 8010d10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d12:	601c      	str	r4, [r3, #0]
 8010d14:	9b02      	ldr	r3, [sp, #8]
 8010d16:	601f      	str	r7, [r3, #0]
 8010d18:	e6b0      	b.n	8010a7c <__gethex+0xf8>
 8010d1a:	4299      	cmp	r1, r3
 8010d1c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010d20:	d8d9      	bhi.n	8010cd6 <__gethex+0x352>
 8010d22:	68a3      	ldr	r3, [r4, #8]
 8010d24:	459b      	cmp	fp, r3
 8010d26:	db17      	blt.n	8010d58 <__gethex+0x3d4>
 8010d28:	6861      	ldr	r1, [r4, #4]
 8010d2a:	9801      	ldr	r0, [sp, #4]
 8010d2c:	3101      	adds	r1, #1
 8010d2e:	f7fe f803 	bl	800ed38 <_Balloc>
 8010d32:	4681      	mov	r9, r0
 8010d34:	b918      	cbnz	r0, 8010d3e <__gethex+0x3ba>
 8010d36:	4b1a      	ldr	r3, [pc, #104]	@ (8010da0 <__gethex+0x41c>)
 8010d38:	4602      	mov	r2, r0
 8010d3a:	2184      	movs	r1, #132	@ 0x84
 8010d3c:	e6c5      	b.n	8010aca <__gethex+0x146>
 8010d3e:	6922      	ldr	r2, [r4, #16]
 8010d40:	3202      	adds	r2, #2
 8010d42:	f104 010c 	add.w	r1, r4, #12
 8010d46:	0092      	lsls	r2, r2, #2
 8010d48:	300c      	adds	r0, #12
 8010d4a:	f7ff fd6b 	bl	8010824 <memcpy>
 8010d4e:	4621      	mov	r1, r4
 8010d50:	9801      	ldr	r0, [sp, #4]
 8010d52:	f7fe f831 	bl	800edb8 <_Bfree>
 8010d56:	464c      	mov	r4, r9
 8010d58:	6923      	ldr	r3, [r4, #16]
 8010d5a:	1c5a      	adds	r2, r3, #1
 8010d5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010d60:	6122      	str	r2, [r4, #16]
 8010d62:	2201      	movs	r2, #1
 8010d64:	615a      	str	r2, [r3, #20]
 8010d66:	e7be      	b.n	8010ce6 <__gethex+0x362>
 8010d68:	6922      	ldr	r2, [r4, #16]
 8010d6a:	455a      	cmp	r2, fp
 8010d6c:	dd0b      	ble.n	8010d86 <__gethex+0x402>
 8010d6e:	2101      	movs	r1, #1
 8010d70:	4620      	mov	r0, r4
 8010d72:	f7ff fd9f 	bl	80108b4 <rshift>
 8010d76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010d7a:	3701      	adds	r7, #1
 8010d7c:	42bb      	cmp	r3, r7
 8010d7e:	f6ff aee0 	blt.w	8010b42 <__gethex+0x1be>
 8010d82:	2501      	movs	r5, #1
 8010d84:	e7c2      	b.n	8010d0c <__gethex+0x388>
 8010d86:	f016 061f 	ands.w	r6, r6, #31
 8010d8a:	d0fa      	beq.n	8010d82 <__gethex+0x3fe>
 8010d8c:	4453      	add	r3, sl
 8010d8e:	f1c6 0620 	rsb	r6, r6, #32
 8010d92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010d96:	f7fe f8c1 	bl	800ef1c <__hi0bits>
 8010d9a:	42b0      	cmp	r0, r6
 8010d9c:	dbe7      	blt.n	8010d6e <__gethex+0x3ea>
 8010d9e:	e7f0      	b.n	8010d82 <__gethex+0x3fe>
 8010da0:	08011665 	.word	0x08011665

08010da4 <L_shift>:
 8010da4:	f1c2 0208 	rsb	r2, r2, #8
 8010da8:	0092      	lsls	r2, r2, #2
 8010daa:	b570      	push	{r4, r5, r6, lr}
 8010dac:	f1c2 0620 	rsb	r6, r2, #32
 8010db0:	6843      	ldr	r3, [r0, #4]
 8010db2:	6804      	ldr	r4, [r0, #0]
 8010db4:	fa03 f506 	lsl.w	r5, r3, r6
 8010db8:	432c      	orrs	r4, r5
 8010dba:	40d3      	lsrs	r3, r2
 8010dbc:	6004      	str	r4, [r0, #0]
 8010dbe:	f840 3f04 	str.w	r3, [r0, #4]!
 8010dc2:	4288      	cmp	r0, r1
 8010dc4:	d3f4      	bcc.n	8010db0 <L_shift+0xc>
 8010dc6:	bd70      	pop	{r4, r5, r6, pc}

08010dc8 <__match>:
 8010dc8:	b530      	push	{r4, r5, lr}
 8010dca:	6803      	ldr	r3, [r0, #0]
 8010dcc:	3301      	adds	r3, #1
 8010dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010dd2:	b914      	cbnz	r4, 8010dda <__match+0x12>
 8010dd4:	6003      	str	r3, [r0, #0]
 8010dd6:	2001      	movs	r0, #1
 8010dd8:	bd30      	pop	{r4, r5, pc}
 8010dda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010dde:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010de2:	2d19      	cmp	r5, #25
 8010de4:	bf98      	it	ls
 8010de6:	3220      	addls	r2, #32
 8010de8:	42a2      	cmp	r2, r4
 8010dea:	d0f0      	beq.n	8010dce <__match+0x6>
 8010dec:	2000      	movs	r0, #0
 8010dee:	e7f3      	b.n	8010dd8 <__match+0x10>

08010df0 <__hexnan>:
 8010df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010df4:	680b      	ldr	r3, [r1, #0]
 8010df6:	6801      	ldr	r1, [r0, #0]
 8010df8:	115e      	asrs	r6, r3, #5
 8010dfa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010dfe:	f013 031f 	ands.w	r3, r3, #31
 8010e02:	b087      	sub	sp, #28
 8010e04:	bf18      	it	ne
 8010e06:	3604      	addne	r6, #4
 8010e08:	2500      	movs	r5, #0
 8010e0a:	1f37      	subs	r7, r6, #4
 8010e0c:	4682      	mov	sl, r0
 8010e0e:	4690      	mov	r8, r2
 8010e10:	9301      	str	r3, [sp, #4]
 8010e12:	f846 5c04 	str.w	r5, [r6, #-4]
 8010e16:	46b9      	mov	r9, r7
 8010e18:	463c      	mov	r4, r7
 8010e1a:	9502      	str	r5, [sp, #8]
 8010e1c:	46ab      	mov	fp, r5
 8010e1e:	784a      	ldrb	r2, [r1, #1]
 8010e20:	1c4b      	adds	r3, r1, #1
 8010e22:	9303      	str	r3, [sp, #12]
 8010e24:	b342      	cbz	r2, 8010e78 <__hexnan+0x88>
 8010e26:	4610      	mov	r0, r2
 8010e28:	9105      	str	r1, [sp, #20]
 8010e2a:	9204      	str	r2, [sp, #16]
 8010e2c:	f7ff fd94 	bl	8010958 <__hexdig_fun>
 8010e30:	2800      	cmp	r0, #0
 8010e32:	d151      	bne.n	8010ed8 <__hexnan+0xe8>
 8010e34:	9a04      	ldr	r2, [sp, #16]
 8010e36:	9905      	ldr	r1, [sp, #20]
 8010e38:	2a20      	cmp	r2, #32
 8010e3a:	d818      	bhi.n	8010e6e <__hexnan+0x7e>
 8010e3c:	9b02      	ldr	r3, [sp, #8]
 8010e3e:	459b      	cmp	fp, r3
 8010e40:	dd13      	ble.n	8010e6a <__hexnan+0x7a>
 8010e42:	454c      	cmp	r4, r9
 8010e44:	d206      	bcs.n	8010e54 <__hexnan+0x64>
 8010e46:	2d07      	cmp	r5, #7
 8010e48:	dc04      	bgt.n	8010e54 <__hexnan+0x64>
 8010e4a:	462a      	mov	r2, r5
 8010e4c:	4649      	mov	r1, r9
 8010e4e:	4620      	mov	r0, r4
 8010e50:	f7ff ffa8 	bl	8010da4 <L_shift>
 8010e54:	4544      	cmp	r4, r8
 8010e56:	d952      	bls.n	8010efe <__hexnan+0x10e>
 8010e58:	2300      	movs	r3, #0
 8010e5a:	f1a4 0904 	sub.w	r9, r4, #4
 8010e5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010e62:	f8cd b008 	str.w	fp, [sp, #8]
 8010e66:	464c      	mov	r4, r9
 8010e68:	461d      	mov	r5, r3
 8010e6a:	9903      	ldr	r1, [sp, #12]
 8010e6c:	e7d7      	b.n	8010e1e <__hexnan+0x2e>
 8010e6e:	2a29      	cmp	r2, #41	@ 0x29
 8010e70:	d157      	bne.n	8010f22 <__hexnan+0x132>
 8010e72:	3102      	adds	r1, #2
 8010e74:	f8ca 1000 	str.w	r1, [sl]
 8010e78:	f1bb 0f00 	cmp.w	fp, #0
 8010e7c:	d051      	beq.n	8010f22 <__hexnan+0x132>
 8010e7e:	454c      	cmp	r4, r9
 8010e80:	d206      	bcs.n	8010e90 <__hexnan+0xa0>
 8010e82:	2d07      	cmp	r5, #7
 8010e84:	dc04      	bgt.n	8010e90 <__hexnan+0xa0>
 8010e86:	462a      	mov	r2, r5
 8010e88:	4649      	mov	r1, r9
 8010e8a:	4620      	mov	r0, r4
 8010e8c:	f7ff ff8a 	bl	8010da4 <L_shift>
 8010e90:	4544      	cmp	r4, r8
 8010e92:	d936      	bls.n	8010f02 <__hexnan+0x112>
 8010e94:	f1a8 0204 	sub.w	r2, r8, #4
 8010e98:	4623      	mov	r3, r4
 8010e9a:	f853 1b04 	ldr.w	r1, [r3], #4
 8010e9e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010ea2:	429f      	cmp	r7, r3
 8010ea4:	d2f9      	bcs.n	8010e9a <__hexnan+0xaa>
 8010ea6:	1b3b      	subs	r3, r7, r4
 8010ea8:	f023 0303 	bic.w	r3, r3, #3
 8010eac:	3304      	adds	r3, #4
 8010eae:	3401      	adds	r4, #1
 8010eb0:	3e03      	subs	r6, #3
 8010eb2:	42b4      	cmp	r4, r6
 8010eb4:	bf88      	it	hi
 8010eb6:	2304      	movhi	r3, #4
 8010eb8:	4443      	add	r3, r8
 8010eba:	2200      	movs	r2, #0
 8010ebc:	f843 2b04 	str.w	r2, [r3], #4
 8010ec0:	429f      	cmp	r7, r3
 8010ec2:	d2fb      	bcs.n	8010ebc <__hexnan+0xcc>
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	b91b      	cbnz	r3, 8010ed0 <__hexnan+0xe0>
 8010ec8:	4547      	cmp	r7, r8
 8010eca:	d128      	bne.n	8010f1e <__hexnan+0x12e>
 8010ecc:	2301      	movs	r3, #1
 8010ece:	603b      	str	r3, [r7, #0]
 8010ed0:	2005      	movs	r0, #5
 8010ed2:	b007      	add	sp, #28
 8010ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ed8:	3501      	adds	r5, #1
 8010eda:	2d08      	cmp	r5, #8
 8010edc:	f10b 0b01 	add.w	fp, fp, #1
 8010ee0:	dd06      	ble.n	8010ef0 <__hexnan+0x100>
 8010ee2:	4544      	cmp	r4, r8
 8010ee4:	d9c1      	bls.n	8010e6a <__hexnan+0x7a>
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	f844 3c04 	str.w	r3, [r4, #-4]
 8010eec:	2501      	movs	r5, #1
 8010eee:	3c04      	subs	r4, #4
 8010ef0:	6822      	ldr	r2, [r4, #0]
 8010ef2:	f000 000f 	and.w	r0, r0, #15
 8010ef6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010efa:	6020      	str	r0, [r4, #0]
 8010efc:	e7b5      	b.n	8010e6a <__hexnan+0x7a>
 8010efe:	2508      	movs	r5, #8
 8010f00:	e7b3      	b.n	8010e6a <__hexnan+0x7a>
 8010f02:	9b01      	ldr	r3, [sp, #4]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d0dd      	beq.n	8010ec4 <__hexnan+0xd4>
 8010f08:	f1c3 0320 	rsb	r3, r3, #32
 8010f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8010f10:	40da      	lsrs	r2, r3
 8010f12:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010f16:	4013      	ands	r3, r2
 8010f18:	f846 3c04 	str.w	r3, [r6, #-4]
 8010f1c:	e7d2      	b.n	8010ec4 <__hexnan+0xd4>
 8010f1e:	3f04      	subs	r7, #4
 8010f20:	e7d0      	b.n	8010ec4 <__hexnan+0xd4>
 8010f22:	2004      	movs	r0, #4
 8010f24:	e7d5      	b.n	8010ed2 <__hexnan+0xe2>

08010f26 <__ascii_mbtowc>:
 8010f26:	b082      	sub	sp, #8
 8010f28:	b901      	cbnz	r1, 8010f2c <__ascii_mbtowc+0x6>
 8010f2a:	a901      	add	r1, sp, #4
 8010f2c:	b142      	cbz	r2, 8010f40 <__ascii_mbtowc+0x1a>
 8010f2e:	b14b      	cbz	r3, 8010f44 <__ascii_mbtowc+0x1e>
 8010f30:	7813      	ldrb	r3, [r2, #0]
 8010f32:	600b      	str	r3, [r1, #0]
 8010f34:	7812      	ldrb	r2, [r2, #0]
 8010f36:	1e10      	subs	r0, r2, #0
 8010f38:	bf18      	it	ne
 8010f3a:	2001      	movne	r0, #1
 8010f3c:	b002      	add	sp, #8
 8010f3e:	4770      	bx	lr
 8010f40:	4610      	mov	r0, r2
 8010f42:	e7fb      	b.n	8010f3c <__ascii_mbtowc+0x16>
 8010f44:	f06f 0001 	mvn.w	r0, #1
 8010f48:	e7f8      	b.n	8010f3c <__ascii_mbtowc+0x16>

08010f4a <_realloc_r>:
 8010f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f4e:	4680      	mov	r8, r0
 8010f50:	4615      	mov	r5, r2
 8010f52:	460c      	mov	r4, r1
 8010f54:	b921      	cbnz	r1, 8010f60 <_realloc_r+0x16>
 8010f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f5a:	4611      	mov	r1, r2
 8010f5c:	f7fd be60 	b.w	800ec20 <_malloc_r>
 8010f60:	b92a      	cbnz	r2, 8010f6e <_realloc_r+0x24>
 8010f62:	f7fd fde9 	bl	800eb38 <_free_r>
 8010f66:	2400      	movs	r4, #0
 8010f68:	4620      	mov	r0, r4
 8010f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f6e:	f000 f840 	bl	8010ff2 <_malloc_usable_size_r>
 8010f72:	4285      	cmp	r5, r0
 8010f74:	4606      	mov	r6, r0
 8010f76:	d802      	bhi.n	8010f7e <_realloc_r+0x34>
 8010f78:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010f7c:	d8f4      	bhi.n	8010f68 <_realloc_r+0x1e>
 8010f7e:	4629      	mov	r1, r5
 8010f80:	4640      	mov	r0, r8
 8010f82:	f7fd fe4d 	bl	800ec20 <_malloc_r>
 8010f86:	4607      	mov	r7, r0
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	d0ec      	beq.n	8010f66 <_realloc_r+0x1c>
 8010f8c:	42b5      	cmp	r5, r6
 8010f8e:	462a      	mov	r2, r5
 8010f90:	4621      	mov	r1, r4
 8010f92:	bf28      	it	cs
 8010f94:	4632      	movcs	r2, r6
 8010f96:	f7ff fc45 	bl	8010824 <memcpy>
 8010f9a:	4621      	mov	r1, r4
 8010f9c:	4640      	mov	r0, r8
 8010f9e:	f7fd fdcb 	bl	800eb38 <_free_r>
 8010fa2:	463c      	mov	r4, r7
 8010fa4:	e7e0      	b.n	8010f68 <_realloc_r+0x1e>

08010fa6 <__ascii_wctomb>:
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	4608      	mov	r0, r1
 8010faa:	b141      	cbz	r1, 8010fbe <__ascii_wctomb+0x18>
 8010fac:	2aff      	cmp	r2, #255	@ 0xff
 8010fae:	d904      	bls.n	8010fba <__ascii_wctomb+0x14>
 8010fb0:	228a      	movs	r2, #138	@ 0x8a
 8010fb2:	601a      	str	r2, [r3, #0]
 8010fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8010fb8:	4770      	bx	lr
 8010fba:	700a      	strb	r2, [r1, #0]
 8010fbc:	2001      	movs	r0, #1
 8010fbe:	4770      	bx	lr

08010fc0 <fiprintf>:
 8010fc0:	b40e      	push	{r1, r2, r3}
 8010fc2:	b503      	push	{r0, r1, lr}
 8010fc4:	4601      	mov	r1, r0
 8010fc6:	ab03      	add	r3, sp, #12
 8010fc8:	4805      	ldr	r0, [pc, #20]	@ (8010fe0 <fiprintf+0x20>)
 8010fca:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fce:	6800      	ldr	r0, [r0, #0]
 8010fd0:	9301      	str	r3, [sp, #4]
 8010fd2:	f000 f83f 	bl	8011054 <_vfiprintf_r>
 8010fd6:	b002      	add	sp, #8
 8010fd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fdc:	b003      	add	sp, #12
 8010fde:	4770      	bx	lr
 8010fe0:	20000190 	.word	0x20000190

08010fe4 <abort>:
 8010fe4:	b508      	push	{r3, lr}
 8010fe6:	2006      	movs	r0, #6
 8010fe8:	f000 fa08 	bl	80113fc <raise>
 8010fec:	2001      	movs	r0, #1
 8010fee:	f7f1 f83b 	bl	8002068 <_exit>

08010ff2 <_malloc_usable_size_r>:
 8010ff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ff6:	1f18      	subs	r0, r3, #4
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	bfbc      	itt	lt
 8010ffc:	580b      	ldrlt	r3, [r1, r0]
 8010ffe:	18c0      	addlt	r0, r0, r3
 8011000:	4770      	bx	lr

08011002 <__sfputc_r>:
 8011002:	6893      	ldr	r3, [r2, #8]
 8011004:	3b01      	subs	r3, #1
 8011006:	2b00      	cmp	r3, #0
 8011008:	b410      	push	{r4}
 801100a:	6093      	str	r3, [r2, #8]
 801100c:	da08      	bge.n	8011020 <__sfputc_r+0x1e>
 801100e:	6994      	ldr	r4, [r2, #24]
 8011010:	42a3      	cmp	r3, r4
 8011012:	db01      	blt.n	8011018 <__sfputc_r+0x16>
 8011014:	290a      	cmp	r1, #10
 8011016:	d103      	bne.n	8011020 <__sfputc_r+0x1e>
 8011018:	f85d 4b04 	ldr.w	r4, [sp], #4
 801101c:	f000 b932 	b.w	8011284 <__swbuf_r>
 8011020:	6813      	ldr	r3, [r2, #0]
 8011022:	1c58      	adds	r0, r3, #1
 8011024:	6010      	str	r0, [r2, #0]
 8011026:	7019      	strb	r1, [r3, #0]
 8011028:	4608      	mov	r0, r1
 801102a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801102e:	4770      	bx	lr

08011030 <__sfputs_r>:
 8011030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011032:	4606      	mov	r6, r0
 8011034:	460f      	mov	r7, r1
 8011036:	4614      	mov	r4, r2
 8011038:	18d5      	adds	r5, r2, r3
 801103a:	42ac      	cmp	r4, r5
 801103c:	d101      	bne.n	8011042 <__sfputs_r+0x12>
 801103e:	2000      	movs	r0, #0
 8011040:	e007      	b.n	8011052 <__sfputs_r+0x22>
 8011042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011046:	463a      	mov	r2, r7
 8011048:	4630      	mov	r0, r6
 801104a:	f7ff ffda 	bl	8011002 <__sfputc_r>
 801104e:	1c43      	adds	r3, r0, #1
 8011050:	d1f3      	bne.n	801103a <__sfputs_r+0xa>
 8011052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011054 <_vfiprintf_r>:
 8011054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011058:	460d      	mov	r5, r1
 801105a:	b09d      	sub	sp, #116	@ 0x74
 801105c:	4614      	mov	r4, r2
 801105e:	4698      	mov	r8, r3
 8011060:	4606      	mov	r6, r0
 8011062:	b118      	cbz	r0, 801106c <_vfiprintf_r+0x18>
 8011064:	6a03      	ldr	r3, [r0, #32]
 8011066:	b90b      	cbnz	r3, 801106c <_vfiprintf_r+0x18>
 8011068:	f7fc fdfa 	bl	800dc60 <__sinit>
 801106c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801106e:	07d9      	lsls	r1, r3, #31
 8011070:	d405      	bmi.n	801107e <_vfiprintf_r+0x2a>
 8011072:	89ab      	ldrh	r3, [r5, #12]
 8011074:	059a      	lsls	r2, r3, #22
 8011076:	d402      	bmi.n	801107e <_vfiprintf_r+0x2a>
 8011078:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801107a:	f7fc ff08 	bl	800de8e <__retarget_lock_acquire_recursive>
 801107e:	89ab      	ldrh	r3, [r5, #12]
 8011080:	071b      	lsls	r3, r3, #28
 8011082:	d501      	bpl.n	8011088 <_vfiprintf_r+0x34>
 8011084:	692b      	ldr	r3, [r5, #16]
 8011086:	b99b      	cbnz	r3, 80110b0 <_vfiprintf_r+0x5c>
 8011088:	4629      	mov	r1, r5
 801108a:	4630      	mov	r0, r6
 801108c:	f000 f938 	bl	8011300 <__swsetup_r>
 8011090:	b170      	cbz	r0, 80110b0 <_vfiprintf_r+0x5c>
 8011092:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011094:	07dc      	lsls	r4, r3, #31
 8011096:	d504      	bpl.n	80110a2 <_vfiprintf_r+0x4e>
 8011098:	f04f 30ff 	mov.w	r0, #4294967295
 801109c:	b01d      	add	sp, #116	@ 0x74
 801109e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110a2:	89ab      	ldrh	r3, [r5, #12]
 80110a4:	0598      	lsls	r0, r3, #22
 80110a6:	d4f7      	bmi.n	8011098 <_vfiprintf_r+0x44>
 80110a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80110aa:	f7fc fef1 	bl	800de90 <__retarget_lock_release_recursive>
 80110ae:	e7f3      	b.n	8011098 <_vfiprintf_r+0x44>
 80110b0:	2300      	movs	r3, #0
 80110b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80110b4:	2320      	movs	r3, #32
 80110b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80110ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80110be:	2330      	movs	r3, #48	@ 0x30
 80110c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011270 <_vfiprintf_r+0x21c>
 80110c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80110c8:	f04f 0901 	mov.w	r9, #1
 80110cc:	4623      	mov	r3, r4
 80110ce:	469a      	mov	sl, r3
 80110d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110d4:	b10a      	cbz	r2, 80110da <_vfiprintf_r+0x86>
 80110d6:	2a25      	cmp	r2, #37	@ 0x25
 80110d8:	d1f9      	bne.n	80110ce <_vfiprintf_r+0x7a>
 80110da:	ebba 0b04 	subs.w	fp, sl, r4
 80110de:	d00b      	beq.n	80110f8 <_vfiprintf_r+0xa4>
 80110e0:	465b      	mov	r3, fp
 80110e2:	4622      	mov	r2, r4
 80110e4:	4629      	mov	r1, r5
 80110e6:	4630      	mov	r0, r6
 80110e8:	f7ff ffa2 	bl	8011030 <__sfputs_r>
 80110ec:	3001      	adds	r0, #1
 80110ee:	f000 80a7 	beq.w	8011240 <_vfiprintf_r+0x1ec>
 80110f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80110f4:	445a      	add	r2, fp
 80110f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80110f8:	f89a 3000 	ldrb.w	r3, [sl]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	f000 809f 	beq.w	8011240 <_vfiprintf_r+0x1ec>
 8011102:	2300      	movs	r3, #0
 8011104:	f04f 32ff 	mov.w	r2, #4294967295
 8011108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801110c:	f10a 0a01 	add.w	sl, sl, #1
 8011110:	9304      	str	r3, [sp, #16]
 8011112:	9307      	str	r3, [sp, #28]
 8011114:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011118:	931a      	str	r3, [sp, #104]	@ 0x68
 801111a:	4654      	mov	r4, sl
 801111c:	2205      	movs	r2, #5
 801111e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011122:	4853      	ldr	r0, [pc, #332]	@ (8011270 <_vfiprintf_r+0x21c>)
 8011124:	f7ef f87c 	bl	8000220 <memchr>
 8011128:	9a04      	ldr	r2, [sp, #16]
 801112a:	b9d8      	cbnz	r0, 8011164 <_vfiprintf_r+0x110>
 801112c:	06d1      	lsls	r1, r2, #27
 801112e:	bf44      	itt	mi
 8011130:	2320      	movmi	r3, #32
 8011132:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011136:	0713      	lsls	r3, r2, #28
 8011138:	bf44      	itt	mi
 801113a:	232b      	movmi	r3, #43	@ 0x2b
 801113c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011140:	f89a 3000 	ldrb.w	r3, [sl]
 8011144:	2b2a      	cmp	r3, #42	@ 0x2a
 8011146:	d015      	beq.n	8011174 <_vfiprintf_r+0x120>
 8011148:	9a07      	ldr	r2, [sp, #28]
 801114a:	4654      	mov	r4, sl
 801114c:	2000      	movs	r0, #0
 801114e:	f04f 0c0a 	mov.w	ip, #10
 8011152:	4621      	mov	r1, r4
 8011154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011158:	3b30      	subs	r3, #48	@ 0x30
 801115a:	2b09      	cmp	r3, #9
 801115c:	d94b      	bls.n	80111f6 <_vfiprintf_r+0x1a2>
 801115e:	b1b0      	cbz	r0, 801118e <_vfiprintf_r+0x13a>
 8011160:	9207      	str	r2, [sp, #28]
 8011162:	e014      	b.n	801118e <_vfiprintf_r+0x13a>
 8011164:	eba0 0308 	sub.w	r3, r0, r8
 8011168:	fa09 f303 	lsl.w	r3, r9, r3
 801116c:	4313      	orrs	r3, r2
 801116e:	9304      	str	r3, [sp, #16]
 8011170:	46a2      	mov	sl, r4
 8011172:	e7d2      	b.n	801111a <_vfiprintf_r+0xc6>
 8011174:	9b03      	ldr	r3, [sp, #12]
 8011176:	1d19      	adds	r1, r3, #4
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	9103      	str	r1, [sp, #12]
 801117c:	2b00      	cmp	r3, #0
 801117e:	bfbb      	ittet	lt
 8011180:	425b      	neglt	r3, r3
 8011182:	f042 0202 	orrlt.w	r2, r2, #2
 8011186:	9307      	strge	r3, [sp, #28]
 8011188:	9307      	strlt	r3, [sp, #28]
 801118a:	bfb8      	it	lt
 801118c:	9204      	strlt	r2, [sp, #16]
 801118e:	7823      	ldrb	r3, [r4, #0]
 8011190:	2b2e      	cmp	r3, #46	@ 0x2e
 8011192:	d10a      	bne.n	80111aa <_vfiprintf_r+0x156>
 8011194:	7863      	ldrb	r3, [r4, #1]
 8011196:	2b2a      	cmp	r3, #42	@ 0x2a
 8011198:	d132      	bne.n	8011200 <_vfiprintf_r+0x1ac>
 801119a:	9b03      	ldr	r3, [sp, #12]
 801119c:	1d1a      	adds	r2, r3, #4
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	9203      	str	r2, [sp, #12]
 80111a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80111a6:	3402      	adds	r4, #2
 80111a8:	9305      	str	r3, [sp, #20]
 80111aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011280 <_vfiprintf_r+0x22c>
 80111ae:	7821      	ldrb	r1, [r4, #0]
 80111b0:	2203      	movs	r2, #3
 80111b2:	4650      	mov	r0, sl
 80111b4:	f7ef f834 	bl	8000220 <memchr>
 80111b8:	b138      	cbz	r0, 80111ca <_vfiprintf_r+0x176>
 80111ba:	9b04      	ldr	r3, [sp, #16]
 80111bc:	eba0 000a 	sub.w	r0, r0, sl
 80111c0:	2240      	movs	r2, #64	@ 0x40
 80111c2:	4082      	lsls	r2, r0
 80111c4:	4313      	orrs	r3, r2
 80111c6:	3401      	adds	r4, #1
 80111c8:	9304      	str	r3, [sp, #16]
 80111ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111ce:	4829      	ldr	r0, [pc, #164]	@ (8011274 <_vfiprintf_r+0x220>)
 80111d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80111d4:	2206      	movs	r2, #6
 80111d6:	f7ef f823 	bl	8000220 <memchr>
 80111da:	2800      	cmp	r0, #0
 80111dc:	d03f      	beq.n	801125e <_vfiprintf_r+0x20a>
 80111de:	4b26      	ldr	r3, [pc, #152]	@ (8011278 <_vfiprintf_r+0x224>)
 80111e0:	bb1b      	cbnz	r3, 801122a <_vfiprintf_r+0x1d6>
 80111e2:	9b03      	ldr	r3, [sp, #12]
 80111e4:	3307      	adds	r3, #7
 80111e6:	f023 0307 	bic.w	r3, r3, #7
 80111ea:	3308      	adds	r3, #8
 80111ec:	9303      	str	r3, [sp, #12]
 80111ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111f0:	443b      	add	r3, r7
 80111f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80111f4:	e76a      	b.n	80110cc <_vfiprintf_r+0x78>
 80111f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80111fa:	460c      	mov	r4, r1
 80111fc:	2001      	movs	r0, #1
 80111fe:	e7a8      	b.n	8011152 <_vfiprintf_r+0xfe>
 8011200:	2300      	movs	r3, #0
 8011202:	3401      	adds	r4, #1
 8011204:	9305      	str	r3, [sp, #20]
 8011206:	4619      	mov	r1, r3
 8011208:	f04f 0c0a 	mov.w	ip, #10
 801120c:	4620      	mov	r0, r4
 801120e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011212:	3a30      	subs	r2, #48	@ 0x30
 8011214:	2a09      	cmp	r2, #9
 8011216:	d903      	bls.n	8011220 <_vfiprintf_r+0x1cc>
 8011218:	2b00      	cmp	r3, #0
 801121a:	d0c6      	beq.n	80111aa <_vfiprintf_r+0x156>
 801121c:	9105      	str	r1, [sp, #20]
 801121e:	e7c4      	b.n	80111aa <_vfiprintf_r+0x156>
 8011220:	fb0c 2101 	mla	r1, ip, r1, r2
 8011224:	4604      	mov	r4, r0
 8011226:	2301      	movs	r3, #1
 8011228:	e7f0      	b.n	801120c <_vfiprintf_r+0x1b8>
 801122a:	ab03      	add	r3, sp, #12
 801122c:	9300      	str	r3, [sp, #0]
 801122e:	462a      	mov	r2, r5
 8011230:	4b12      	ldr	r3, [pc, #72]	@ (801127c <_vfiprintf_r+0x228>)
 8011232:	a904      	add	r1, sp, #16
 8011234:	4630      	mov	r0, r6
 8011236:	f7fb febb 	bl	800cfb0 <_printf_float>
 801123a:	4607      	mov	r7, r0
 801123c:	1c78      	adds	r0, r7, #1
 801123e:	d1d6      	bne.n	80111ee <_vfiprintf_r+0x19a>
 8011240:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011242:	07d9      	lsls	r1, r3, #31
 8011244:	d405      	bmi.n	8011252 <_vfiprintf_r+0x1fe>
 8011246:	89ab      	ldrh	r3, [r5, #12]
 8011248:	059a      	lsls	r2, r3, #22
 801124a:	d402      	bmi.n	8011252 <_vfiprintf_r+0x1fe>
 801124c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801124e:	f7fc fe1f 	bl	800de90 <__retarget_lock_release_recursive>
 8011252:	89ab      	ldrh	r3, [r5, #12]
 8011254:	065b      	lsls	r3, r3, #25
 8011256:	f53f af1f 	bmi.w	8011098 <_vfiprintf_r+0x44>
 801125a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801125c:	e71e      	b.n	801109c <_vfiprintf_r+0x48>
 801125e:	ab03      	add	r3, sp, #12
 8011260:	9300      	str	r3, [sp, #0]
 8011262:	462a      	mov	r2, r5
 8011264:	4b05      	ldr	r3, [pc, #20]	@ (801127c <_vfiprintf_r+0x228>)
 8011266:	a904      	add	r1, sp, #16
 8011268:	4630      	mov	r0, r6
 801126a:	f7fc f939 	bl	800d4e0 <_printf_i>
 801126e:	e7e4      	b.n	801123a <_vfiprintf_r+0x1e6>
 8011270:	08011929 	.word	0x08011929
 8011274:	08011933 	.word	0x08011933
 8011278:	0800cfb1 	.word	0x0800cfb1
 801127c:	08011031 	.word	0x08011031
 8011280:	0801192f 	.word	0x0801192f

08011284 <__swbuf_r>:
 8011284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011286:	460e      	mov	r6, r1
 8011288:	4614      	mov	r4, r2
 801128a:	4605      	mov	r5, r0
 801128c:	b118      	cbz	r0, 8011296 <__swbuf_r+0x12>
 801128e:	6a03      	ldr	r3, [r0, #32]
 8011290:	b90b      	cbnz	r3, 8011296 <__swbuf_r+0x12>
 8011292:	f7fc fce5 	bl	800dc60 <__sinit>
 8011296:	69a3      	ldr	r3, [r4, #24]
 8011298:	60a3      	str	r3, [r4, #8]
 801129a:	89a3      	ldrh	r3, [r4, #12]
 801129c:	071a      	lsls	r2, r3, #28
 801129e:	d501      	bpl.n	80112a4 <__swbuf_r+0x20>
 80112a0:	6923      	ldr	r3, [r4, #16]
 80112a2:	b943      	cbnz	r3, 80112b6 <__swbuf_r+0x32>
 80112a4:	4621      	mov	r1, r4
 80112a6:	4628      	mov	r0, r5
 80112a8:	f000 f82a 	bl	8011300 <__swsetup_r>
 80112ac:	b118      	cbz	r0, 80112b6 <__swbuf_r+0x32>
 80112ae:	f04f 37ff 	mov.w	r7, #4294967295
 80112b2:	4638      	mov	r0, r7
 80112b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112b6:	6823      	ldr	r3, [r4, #0]
 80112b8:	6922      	ldr	r2, [r4, #16]
 80112ba:	1a98      	subs	r0, r3, r2
 80112bc:	6963      	ldr	r3, [r4, #20]
 80112be:	b2f6      	uxtb	r6, r6
 80112c0:	4283      	cmp	r3, r0
 80112c2:	4637      	mov	r7, r6
 80112c4:	dc05      	bgt.n	80112d2 <__swbuf_r+0x4e>
 80112c6:	4621      	mov	r1, r4
 80112c8:	4628      	mov	r0, r5
 80112ca:	f7ff fa47 	bl	801075c <_fflush_r>
 80112ce:	2800      	cmp	r0, #0
 80112d0:	d1ed      	bne.n	80112ae <__swbuf_r+0x2a>
 80112d2:	68a3      	ldr	r3, [r4, #8]
 80112d4:	3b01      	subs	r3, #1
 80112d6:	60a3      	str	r3, [r4, #8]
 80112d8:	6823      	ldr	r3, [r4, #0]
 80112da:	1c5a      	adds	r2, r3, #1
 80112dc:	6022      	str	r2, [r4, #0]
 80112de:	701e      	strb	r6, [r3, #0]
 80112e0:	6962      	ldr	r2, [r4, #20]
 80112e2:	1c43      	adds	r3, r0, #1
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d004      	beq.n	80112f2 <__swbuf_r+0x6e>
 80112e8:	89a3      	ldrh	r3, [r4, #12]
 80112ea:	07db      	lsls	r3, r3, #31
 80112ec:	d5e1      	bpl.n	80112b2 <__swbuf_r+0x2e>
 80112ee:	2e0a      	cmp	r6, #10
 80112f0:	d1df      	bne.n	80112b2 <__swbuf_r+0x2e>
 80112f2:	4621      	mov	r1, r4
 80112f4:	4628      	mov	r0, r5
 80112f6:	f7ff fa31 	bl	801075c <_fflush_r>
 80112fa:	2800      	cmp	r0, #0
 80112fc:	d0d9      	beq.n	80112b2 <__swbuf_r+0x2e>
 80112fe:	e7d6      	b.n	80112ae <__swbuf_r+0x2a>

08011300 <__swsetup_r>:
 8011300:	b538      	push	{r3, r4, r5, lr}
 8011302:	4b29      	ldr	r3, [pc, #164]	@ (80113a8 <__swsetup_r+0xa8>)
 8011304:	4605      	mov	r5, r0
 8011306:	6818      	ldr	r0, [r3, #0]
 8011308:	460c      	mov	r4, r1
 801130a:	b118      	cbz	r0, 8011314 <__swsetup_r+0x14>
 801130c:	6a03      	ldr	r3, [r0, #32]
 801130e:	b90b      	cbnz	r3, 8011314 <__swsetup_r+0x14>
 8011310:	f7fc fca6 	bl	800dc60 <__sinit>
 8011314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011318:	0719      	lsls	r1, r3, #28
 801131a:	d422      	bmi.n	8011362 <__swsetup_r+0x62>
 801131c:	06da      	lsls	r2, r3, #27
 801131e:	d407      	bmi.n	8011330 <__swsetup_r+0x30>
 8011320:	2209      	movs	r2, #9
 8011322:	602a      	str	r2, [r5, #0]
 8011324:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011328:	81a3      	strh	r3, [r4, #12]
 801132a:	f04f 30ff 	mov.w	r0, #4294967295
 801132e:	e033      	b.n	8011398 <__swsetup_r+0x98>
 8011330:	0758      	lsls	r0, r3, #29
 8011332:	d512      	bpl.n	801135a <__swsetup_r+0x5a>
 8011334:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011336:	b141      	cbz	r1, 801134a <__swsetup_r+0x4a>
 8011338:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801133c:	4299      	cmp	r1, r3
 801133e:	d002      	beq.n	8011346 <__swsetup_r+0x46>
 8011340:	4628      	mov	r0, r5
 8011342:	f7fd fbf9 	bl	800eb38 <_free_r>
 8011346:	2300      	movs	r3, #0
 8011348:	6363      	str	r3, [r4, #52]	@ 0x34
 801134a:	89a3      	ldrh	r3, [r4, #12]
 801134c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011350:	81a3      	strh	r3, [r4, #12]
 8011352:	2300      	movs	r3, #0
 8011354:	6063      	str	r3, [r4, #4]
 8011356:	6923      	ldr	r3, [r4, #16]
 8011358:	6023      	str	r3, [r4, #0]
 801135a:	89a3      	ldrh	r3, [r4, #12]
 801135c:	f043 0308 	orr.w	r3, r3, #8
 8011360:	81a3      	strh	r3, [r4, #12]
 8011362:	6923      	ldr	r3, [r4, #16]
 8011364:	b94b      	cbnz	r3, 801137a <__swsetup_r+0x7a>
 8011366:	89a3      	ldrh	r3, [r4, #12]
 8011368:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801136c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011370:	d003      	beq.n	801137a <__swsetup_r+0x7a>
 8011372:	4621      	mov	r1, r4
 8011374:	4628      	mov	r0, r5
 8011376:	f000 f883 	bl	8011480 <__smakebuf_r>
 801137a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801137e:	f013 0201 	ands.w	r2, r3, #1
 8011382:	d00a      	beq.n	801139a <__swsetup_r+0x9a>
 8011384:	2200      	movs	r2, #0
 8011386:	60a2      	str	r2, [r4, #8]
 8011388:	6962      	ldr	r2, [r4, #20]
 801138a:	4252      	negs	r2, r2
 801138c:	61a2      	str	r2, [r4, #24]
 801138e:	6922      	ldr	r2, [r4, #16]
 8011390:	b942      	cbnz	r2, 80113a4 <__swsetup_r+0xa4>
 8011392:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011396:	d1c5      	bne.n	8011324 <__swsetup_r+0x24>
 8011398:	bd38      	pop	{r3, r4, r5, pc}
 801139a:	0799      	lsls	r1, r3, #30
 801139c:	bf58      	it	pl
 801139e:	6962      	ldrpl	r2, [r4, #20]
 80113a0:	60a2      	str	r2, [r4, #8]
 80113a2:	e7f4      	b.n	801138e <__swsetup_r+0x8e>
 80113a4:	2000      	movs	r0, #0
 80113a6:	e7f7      	b.n	8011398 <__swsetup_r+0x98>
 80113a8:	20000190 	.word	0x20000190

080113ac <_raise_r>:
 80113ac:	291f      	cmp	r1, #31
 80113ae:	b538      	push	{r3, r4, r5, lr}
 80113b0:	4605      	mov	r5, r0
 80113b2:	460c      	mov	r4, r1
 80113b4:	d904      	bls.n	80113c0 <_raise_r+0x14>
 80113b6:	2316      	movs	r3, #22
 80113b8:	6003      	str	r3, [r0, #0]
 80113ba:	f04f 30ff 	mov.w	r0, #4294967295
 80113be:	bd38      	pop	{r3, r4, r5, pc}
 80113c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80113c2:	b112      	cbz	r2, 80113ca <_raise_r+0x1e>
 80113c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80113c8:	b94b      	cbnz	r3, 80113de <_raise_r+0x32>
 80113ca:	4628      	mov	r0, r5
 80113cc:	f000 f830 	bl	8011430 <_getpid_r>
 80113d0:	4622      	mov	r2, r4
 80113d2:	4601      	mov	r1, r0
 80113d4:	4628      	mov	r0, r5
 80113d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113da:	f000 b817 	b.w	801140c <_kill_r>
 80113de:	2b01      	cmp	r3, #1
 80113e0:	d00a      	beq.n	80113f8 <_raise_r+0x4c>
 80113e2:	1c59      	adds	r1, r3, #1
 80113e4:	d103      	bne.n	80113ee <_raise_r+0x42>
 80113e6:	2316      	movs	r3, #22
 80113e8:	6003      	str	r3, [r0, #0]
 80113ea:	2001      	movs	r0, #1
 80113ec:	e7e7      	b.n	80113be <_raise_r+0x12>
 80113ee:	2100      	movs	r1, #0
 80113f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80113f4:	4620      	mov	r0, r4
 80113f6:	4798      	blx	r3
 80113f8:	2000      	movs	r0, #0
 80113fa:	e7e0      	b.n	80113be <_raise_r+0x12>

080113fc <raise>:
 80113fc:	4b02      	ldr	r3, [pc, #8]	@ (8011408 <raise+0xc>)
 80113fe:	4601      	mov	r1, r0
 8011400:	6818      	ldr	r0, [r3, #0]
 8011402:	f7ff bfd3 	b.w	80113ac <_raise_r>
 8011406:	bf00      	nop
 8011408:	20000190 	.word	0x20000190

0801140c <_kill_r>:
 801140c:	b538      	push	{r3, r4, r5, lr}
 801140e:	4d07      	ldr	r5, [pc, #28]	@ (801142c <_kill_r+0x20>)
 8011410:	2300      	movs	r3, #0
 8011412:	4604      	mov	r4, r0
 8011414:	4608      	mov	r0, r1
 8011416:	4611      	mov	r1, r2
 8011418:	602b      	str	r3, [r5, #0]
 801141a:	f7f0 fe15 	bl	8002048 <_kill>
 801141e:	1c43      	adds	r3, r0, #1
 8011420:	d102      	bne.n	8011428 <_kill_r+0x1c>
 8011422:	682b      	ldr	r3, [r5, #0]
 8011424:	b103      	cbz	r3, 8011428 <_kill_r+0x1c>
 8011426:	6023      	str	r3, [r4, #0]
 8011428:	bd38      	pop	{r3, r4, r5, pc}
 801142a:	bf00      	nop
 801142c:	20002040 	.word	0x20002040

08011430 <_getpid_r>:
 8011430:	f7f0 be02 	b.w	8002038 <_getpid>

08011434 <__swhatbuf_r>:
 8011434:	b570      	push	{r4, r5, r6, lr}
 8011436:	460c      	mov	r4, r1
 8011438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801143c:	2900      	cmp	r1, #0
 801143e:	b096      	sub	sp, #88	@ 0x58
 8011440:	4615      	mov	r5, r2
 8011442:	461e      	mov	r6, r3
 8011444:	da0d      	bge.n	8011462 <__swhatbuf_r+0x2e>
 8011446:	89a3      	ldrh	r3, [r4, #12]
 8011448:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801144c:	f04f 0100 	mov.w	r1, #0
 8011450:	bf14      	ite	ne
 8011452:	2340      	movne	r3, #64	@ 0x40
 8011454:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011458:	2000      	movs	r0, #0
 801145a:	6031      	str	r1, [r6, #0]
 801145c:	602b      	str	r3, [r5, #0]
 801145e:	b016      	add	sp, #88	@ 0x58
 8011460:	bd70      	pop	{r4, r5, r6, pc}
 8011462:	466a      	mov	r2, sp
 8011464:	f000 f848 	bl	80114f8 <_fstat_r>
 8011468:	2800      	cmp	r0, #0
 801146a:	dbec      	blt.n	8011446 <__swhatbuf_r+0x12>
 801146c:	9901      	ldr	r1, [sp, #4]
 801146e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011472:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011476:	4259      	negs	r1, r3
 8011478:	4159      	adcs	r1, r3
 801147a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801147e:	e7eb      	b.n	8011458 <__swhatbuf_r+0x24>

08011480 <__smakebuf_r>:
 8011480:	898b      	ldrh	r3, [r1, #12]
 8011482:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011484:	079d      	lsls	r5, r3, #30
 8011486:	4606      	mov	r6, r0
 8011488:	460c      	mov	r4, r1
 801148a:	d507      	bpl.n	801149c <__smakebuf_r+0x1c>
 801148c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011490:	6023      	str	r3, [r4, #0]
 8011492:	6123      	str	r3, [r4, #16]
 8011494:	2301      	movs	r3, #1
 8011496:	6163      	str	r3, [r4, #20]
 8011498:	b003      	add	sp, #12
 801149a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801149c:	ab01      	add	r3, sp, #4
 801149e:	466a      	mov	r2, sp
 80114a0:	f7ff ffc8 	bl	8011434 <__swhatbuf_r>
 80114a4:	9f00      	ldr	r7, [sp, #0]
 80114a6:	4605      	mov	r5, r0
 80114a8:	4639      	mov	r1, r7
 80114aa:	4630      	mov	r0, r6
 80114ac:	f7fd fbb8 	bl	800ec20 <_malloc_r>
 80114b0:	b948      	cbnz	r0, 80114c6 <__smakebuf_r+0x46>
 80114b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114b6:	059a      	lsls	r2, r3, #22
 80114b8:	d4ee      	bmi.n	8011498 <__smakebuf_r+0x18>
 80114ba:	f023 0303 	bic.w	r3, r3, #3
 80114be:	f043 0302 	orr.w	r3, r3, #2
 80114c2:	81a3      	strh	r3, [r4, #12]
 80114c4:	e7e2      	b.n	801148c <__smakebuf_r+0xc>
 80114c6:	89a3      	ldrh	r3, [r4, #12]
 80114c8:	6020      	str	r0, [r4, #0]
 80114ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114ce:	81a3      	strh	r3, [r4, #12]
 80114d0:	9b01      	ldr	r3, [sp, #4]
 80114d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80114d6:	b15b      	cbz	r3, 80114f0 <__smakebuf_r+0x70>
 80114d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80114dc:	4630      	mov	r0, r6
 80114de:	f000 f81d 	bl	801151c <_isatty_r>
 80114e2:	b128      	cbz	r0, 80114f0 <__smakebuf_r+0x70>
 80114e4:	89a3      	ldrh	r3, [r4, #12]
 80114e6:	f023 0303 	bic.w	r3, r3, #3
 80114ea:	f043 0301 	orr.w	r3, r3, #1
 80114ee:	81a3      	strh	r3, [r4, #12]
 80114f0:	89a3      	ldrh	r3, [r4, #12]
 80114f2:	431d      	orrs	r5, r3
 80114f4:	81a5      	strh	r5, [r4, #12]
 80114f6:	e7cf      	b.n	8011498 <__smakebuf_r+0x18>

080114f8 <_fstat_r>:
 80114f8:	b538      	push	{r3, r4, r5, lr}
 80114fa:	4d07      	ldr	r5, [pc, #28]	@ (8011518 <_fstat_r+0x20>)
 80114fc:	2300      	movs	r3, #0
 80114fe:	4604      	mov	r4, r0
 8011500:	4608      	mov	r0, r1
 8011502:	4611      	mov	r1, r2
 8011504:	602b      	str	r3, [r5, #0]
 8011506:	f7f0 fdff 	bl	8002108 <_fstat>
 801150a:	1c43      	adds	r3, r0, #1
 801150c:	d102      	bne.n	8011514 <_fstat_r+0x1c>
 801150e:	682b      	ldr	r3, [r5, #0]
 8011510:	b103      	cbz	r3, 8011514 <_fstat_r+0x1c>
 8011512:	6023      	str	r3, [r4, #0]
 8011514:	bd38      	pop	{r3, r4, r5, pc}
 8011516:	bf00      	nop
 8011518:	20002040 	.word	0x20002040

0801151c <_isatty_r>:
 801151c:	b538      	push	{r3, r4, r5, lr}
 801151e:	4d06      	ldr	r5, [pc, #24]	@ (8011538 <_isatty_r+0x1c>)
 8011520:	2300      	movs	r3, #0
 8011522:	4604      	mov	r4, r0
 8011524:	4608      	mov	r0, r1
 8011526:	602b      	str	r3, [r5, #0]
 8011528:	f7f0 fdfe 	bl	8002128 <_isatty>
 801152c:	1c43      	adds	r3, r0, #1
 801152e:	d102      	bne.n	8011536 <_isatty_r+0x1a>
 8011530:	682b      	ldr	r3, [r5, #0]
 8011532:	b103      	cbz	r3, 8011536 <_isatty_r+0x1a>
 8011534:	6023      	str	r3, [r4, #0]
 8011536:	bd38      	pop	{r3, r4, r5, pc}
 8011538:	20002040 	.word	0x20002040

0801153c <_init>:
 801153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801153e:	bf00      	nop
 8011540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011542:	bc08      	pop	{r3}
 8011544:	469e      	mov	lr, r3
 8011546:	4770      	bx	lr

08011548 <_fini>:
 8011548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801154a:	bf00      	nop
 801154c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801154e:	bc08      	pop	{r3}
 8011550:	469e      	mov	lr, r3
 8011552:	4770      	bx	lr
